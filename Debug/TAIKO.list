
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001664c  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001982c  08016840  08016840  00026840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803006c  0803006c  000502fc  2**0
                  CONTENTS
  4 .ARM          00000000  0803006c  0803006c  000502fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803006c  0803006c  000502fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803006c  0803006c  0004006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030070  08030070  00040070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08030074  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a8  20000300  08030370  00050300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200025a8  08030370  000525a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000502fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030023  00000000  00000000  00050325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f90  00000000  00000000  00080348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002938  00000000  00000000  000872d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002658  00000000  00000000  00089c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249ea  00000000  00000000  0008c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034fff  00000000  00000000  000b0c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbdb6  00000000  00000000  000e5c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a1a07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be80  00000000  00000000  001a1a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000300 	.word	0x20000300
 800020c:	00000000 	.word	0x00000000
 8000210:	08016824 	.word	0x08016824

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000304 	.word	0x20000304
 800022c:	08016824 	.word	0x08016824

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <AddDrum>:

AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <AddDrum+0x38>)
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 8000b7a:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <AddDrum+0x3c>)
 8000b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8000b84:	81bb      	strh	r3, [r7, #12]
 8000b86:	2300      	movs	r3, #0
 8000b88:	81fb      	strh	r3, [r7, #14]
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b92:	f000 f809 	bl	8000ba8 <AddTrack>
		.pos = 0
	});
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	08016998 	.word	0x08016998

08000ba8 <AddTrack>:

void AddTrack(AudioTrack track) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	463b      	mov	r3, r7
 8000bb0:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <AddTrack+0x3c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b09      	cmp	r3, #9
 8000bba:	dc0d      	bgt.n	8000bd8 <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <AddTrack+0x3c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <AddTrack+0x3c>)
 8000bc4:	600a      	str	r2, [r1, #0]
 8000bc6:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <AddTrack+0x40>)
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4413      	add	r3, r2
 8000bcc:	463a      	mov	r2, r7
 8000bce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bd6:	e000      	b.n	8000bda <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 8000bd8:	bf00      	nop
}
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000754 	.word	0x20000754
 8000be8:	20000704 	.word	0x20000704

08000bec <RemoveTrack>:

void RemoveTrack(uint16_t index) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	80fb      	strh	r3, [r7, #6]
	if (num_tracks <= 0) return;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <RemoveTrack+0x44>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	dd12      	ble.n	8000c24 <RemoveTrack+0x38>
	audio_tracks[index] = audio_tracks[--num_tracks];
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <RemoveTrack+0x44>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <RemoveTrack+0x44>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <RemoveTrack+0x44>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <RemoveTrack+0x48>)
 8000c10:	4908      	ldr	r1, [pc, #32]	; (8000c34 <RemoveTrack+0x48>)
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4403      	add	r3, r0
 8000c16:	00d2      	lsls	r2, r2, #3
 8000c18:	440a      	add	r2, r1
 8000c1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c22:	e000      	b.n	8000c26 <RemoveTrack+0x3a>
	if (num_tracks <= 0) return;
 8000c24:	bf00      	nop
}
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000754 	.word	0x20000754
 8000c34:	20000704 	.word	0x20000704

08000c38 <PrecomputeMix>:

void PrecomputeMix() {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8000c3e:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <PrecomputeMix+0x15c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dc11      	bgt.n	8000c6a <PrecomputeMix+0x32>
		if (audio_dma_on) {
 8000c46:	4b54      	ldr	r3, [pc, #336]	; (8000d98 <PrecomputeMix+0x160>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <PrecomputeMix+0x24>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4852      	ldr	r0, [pc, #328]	; (8000d9c <PrecomputeMix+0x164>)
 8000c52:	f003 f931 	bl	8003eb8 <HAL_DAC_Stop_DMA>
			audio_dma_on = 0;
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <PrecomputeMix+0x160>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
		}
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8000c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c60:	2100      	movs	r1, #0
 8000c62:	484f      	ldr	r0, [pc, #316]	; (8000da0 <PrecomputeMix+0x168>)
 8000c64:	f012 fff6 	bl	8013c54 <memset>
			}
		}

	}

}
 8000c68:	e090      	b.n	8000d8c <PrecomputeMix+0x154>
		if (!audio_dma_on) {
 8000c6a:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <PrecomputeMix+0x160>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d126      	bne.n	8000cc0 <PrecomputeMix+0x88>
			HAL_TIM_Base_Stop(&htim2);
 8000c72:	484c      	ldr	r0, [pc, #304]	; (8000da4 <PrecomputeMix+0x16c>)
 8000c74:	f008 f992 	bl	8008f9c <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8000c78:	484b      	ldr	r0, [pc, #300]	; (8000da8 <PrecomputeMix+0x170>)
 8000c7a:	f008 f98f 	bl	8008f9c <HAL_TIM_Base_Stop>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8000c7e:	2304      	movs	r3, #4
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c86:	4a46      	ldr	r2, [pc, #280]	; (8000da0 <PrecomputeMix+0x168>)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4844      	ldr	r0, [pc, #272]	; (8000d9c <PrecomputeMix+0x164>)
 8000c8c:	f003 f864 	bl	8003d58 <HAL_DAC_Start_DMA>
			TIM2->CNT = 0;
 8000c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8000c98:	4b44      	ldr	r3, [pc, #272]	; (8000dac <PrecomputeMix+0x174>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim4);
 8000c9e:	4842      	ldr	r0, [pc, #264]	; (8000da8 <PrecomputeMix+0x170>)
 8000ca0:	f008 f9a2 	bl	8008fe8 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8000ca4:	483f      	ldr	r0, [pc, #252]	; (8000da4 <PrecomputeMix+0x16c>)
 8000ca6:	f008 f921 	bl	8008eec <HAL_TIM_Base_Start>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000caa:	4b3e      	ldr	r3, [pc, #248]	; (8000da4 <PrecomputeMix+0x16c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <PrecomputeMix+0x16c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0201 	orr.w	r2, r2, #1
 8000cb8:	60da      	str	r2, [r3, #12]
			audio_dma_on = 1;
 8000cba:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <PrecomputeMix+0x160>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e05e      	b.n	8000d84 <PrecomputeMix+0x14c>
			int32_t sum = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
			int j = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 8000cce:	e033      	b.n	8000d38 <PrecomputeMix+0x100>
				sum += audio_tracks[j].buff[audio_tracks[j].pos++] / 4;
 8000cd0:	4a37      	ldr	r2, [pc, #220]	; (8000db0 <PrecomputeMix+0x178>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000cd8:	4a35      	ldr	r2, [pc, #212]	; (8000db0 <PrecomputeMix+0x178>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	4413      	add	r3, r2
 8000ce0:	88da      	ldrh	r2, [r3, #6]
 8000ce2:	1c53      	adds	r3, r2, #1
 8000ce4:	b29c      	uxth	r4, r3
 8000ce6:	4832      	ldr	r0, [pc, #200]	; (8000db0 <PrecomputeMix+0x178>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	4403      	add	r3, r0
 8000cee:	4620      	mov	r0, r4
 8000cf0:	80d8      	strh	r0, [r3, #6]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da00      	bge.n	8000d02 <PrecomputeMix+0xca>
 8000d00:	3303      	adds	r3, #3
 8000d02:	109b      	asrs	r3, r3, #2
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
				if (audio_tracks[j].pos > audio_tracks[j].length) {
 8000d0e:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <PrecomputeMix+0x178>)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	88da      	ldrh	r2, [r3, #6]
 8000d18:	4925      	ldr	r1, [pc, #148]	; (8000db0 <PrecomputeMix+0x178>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	440b      	add	r3, r1
 8000d20:	889b      	ldrh	r3, [r3, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d905      	bls.n	8000d32 <PrecomputeMix+0xfa>
					RemoveTrack(j);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff5e 	bl	8000bec <RemoveTrack>
 8000d30:	e002      	b.n	8000d38 <PrecomputeMix+0x100>
					j++;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3301      	adds	r3, #1
 8000d36:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <PrecomputeMix+0x15c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbc6      	blt.n	8000cd0 <PrecomputeMix+0x98>
			if (sum < -32768) {
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000d48:	da05      	bge.n	8000d56 <PrecomputeMix+0x11e>
				audio_buff[i] = 0;
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <PrecomputeMix+0x168>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d54:	e013      	b.n	8000d7e <PrecomputeMix+0x146>
			} else if (sum > 32767) {
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d5c:	db06      	blt.n	8000d6c <PrecomputeMix+0x134>
				audio_buff[i] = 65535;
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <PrecomputeMix+0x168>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d6a:	e008      	b.n	8000d7e <PrecomputeMix+0x146>
				audio_buff[i] = sum + 32768;
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000d74:	b299      	uxth	r1, r3
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <PrecomputeMix+0x168>)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d8a:	db9c      	blt.n	8000cc6 <PrecomputeMix+0x8e>
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	20000754 	.word	0x20000754
 8000d98:	20000758 	.word	0x20000758
 8000d9c:	20000928 	.word	0x20000928
 8000da0:	2000031c 	.word	0x2000031c
 8000da4:	20000b4c 	.word	0x20000b4c
 8000da8:	20000bdc 	.word	0x20000bdc
 8000dac:	40000800 	.word	0x40000800
 8000db0:	20000704 	.word	0x20000704

08000db4 <ButtonPadInit>:
#include "button.h"

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
void ButtonPadInit() {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2110      	movs	r1, #16
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <ButtonPadInit+0x34>)
 8000dbe:	f003 ffe2 	bl	8004d86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <ButtonPadInit+0x34>)
 8000dc8:	f003 ffdd 	bl	8004d86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2140      	movs	r1, #64	; 0x40
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <ButtonPadInit+0x34>)
 8000dd2:	f003 ffd8 	bl	8004d86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <ButtonPadInit+0x38>)
 8000dde:	f003 ffd2 	bl	8004d86 <HAL_GPIO_WritePin>
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40011800 	.word	0x40011800
 8000dec:	40011000 	.word	0x40011000

08000df0 <ButtonPadCallback>:

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
int ButtonPadCallback(int GPIO_Pin) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <ButtonPadCallback+0x2c>)
 8000e00:	f003 ffaa 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10a      	bne.n	8000e24 <ButtonPadCallback+0x34>
		previousMillis = HAL_GetTick();
 8000e0e:	f002 f9b9 	bl	8003184 <HAL_GetTick>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a02      	ldr	r2, [pc, #8]	; (8000e20 <ButtonPadCallback+0x30>)
 8000e16:	6013      	str	r3, [r2, #0]
		return 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	e14c      	b.n	80010b6 <ButtonPadCallback+0x2c6>
 8000e1c:	40011800 	.word	0x40011800
 8000e20:	2000076c 	.word	0x2000076c
	}

	currentMillis = HAL_GetTick();
 8000e24:	f002 f9ae 	bl	8003184 <HAL_GetTick>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4aa5      	ldr	r2, [pc, #660]	; (80010c0 <ButtonPadCallback+0x2d0>)
 8000e2c:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 8000e2e:	4ba5      	ldr	r3, [pc, #660]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 8000e34:	4ba2      	ldr	r3, [pc, #648]	; (80010c0 <ButtonPadCallback+0x2d0>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4ba3      	ldr	r3, [pc, #652]	; (80010c8 <ButtonPadCallback+0x2d8>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b14      	cmp	r3, #20
 8000e40:	f240 8133 	bls.w	80010aa <ButtonPadCallback+0x2ba>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8000e44:	4ba1      	ldr	r3, [pc, #644]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e46:	220f      	movs	r2, #15
 8000e48:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000e4a:	4ba0      	ldr	r3, [pc, #640]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e50:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	4b9d      	ldr	r3, [pc, #628]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8000e5c:	499b      	ldr	r1, [pc, #620]	; (80010cc <ButtonPadCallback+0x2dc>)
 8000e5e:	489c      	ldr	r0, [pc, #624]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e60:	f003 fde6 	bl	8004a30 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2110      	movs	r1, #16
 8000e68:	4899      	ldr	r0, [pc, #612]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e6a:	f003 ff8c 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2120      	movs	r1, #32
 8000e72:	4897      	ldr	r0, [pc, #604]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e74:	f003 ff87 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2140      	movs	r1, #64	; 0x40
 8000e7c:	4894      	ldr	r0, [pc, #592]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e7e:	f003 ff82 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e88:	4892      	ldr	r0, [pc, #584]	; (80010d4 <ButtonPadCallback+0x2e4>)
 8000e8a:	f003 ff7c 	bl	8004d86 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 8000e8e:	2101      	movs	r1, #1
 8000e90:	488f      	ldr	r0, [pc, #572]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000e92:	f003 ff61 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d005      	beq.n	8000ea8 <ButtonPadCallback+0xb8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d102      	bne.n	8000ea8 <ButtonPadCallback+0xb8>
 8000ea2:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	4889      	ldr	r0, [pc, #548]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000eac:	f003 ff54 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <ButtonPadCallback+0xd2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d102      	bne.n	8000ec2 <ButtonPadCallback+0xd2>
 8000ebc:	4b81      	ldr	r3, [pc, #516]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	4882      	ldr	r0, [pc, #520]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000ec6:	f003 ff47 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d005      	beq.n	8000edc <ButtonPadCallback+0xec>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d102      	bne.n	8000edc <ButtonPadCallback+0xec>
 8000ed6:	4b7b      	ldr	r3, [pc, #492]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ed8:	220e      	movs	r2, #14
 8000eda:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 8000edc:	2108      	movs	r1, #8
 8000ede:	487c      	ldr	r0, [pc, #496]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000ee0:	f003 ff3a 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <ButtonPadCallback+0x106>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d102      	bne.n	8000ef6 <ButtonPadCallback+0x106>
 8000ef0:	4b74      	ldr	r3, [pc, #464]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000ef2:	220d      	movs	r2, #13
 8000ef4:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4875      	ldr	r0, [pc, #468]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000efc:	f003 ff43 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2120      	movs	r1, #32
 8000f04:	4872      	ldr	r0, [pc, #456]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f06:	f003 ff3e 	bl	8004d86 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	4870      	ldr	r0, [pc, #448]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f0e:	f003 ff23 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <ButtonPadCallback+0x134>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <ButtonPadCallback+0x134>
 8000f1e:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f20:	220c      	movs	r2, #12
 8000f22:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 8000f24:	2102      	movs	r1, #2
 8000f26:	486a      	ldr	r0, [pc, #424]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f28:	f003 ff16 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <ButtonPadCallback+0x14e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d102      	bne.n	8000f3e <ButtonPadCallback+0x14e>
 8000f38:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f3a:	220b      	movs	r2, #11
 8000f3c:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 8000f3e:	2104      	movs	r1, #4
 8000f40:	4863      	ldr	r0, [pc, #396]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f42:	f003 ff09 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <ButtonPadCallback+0x168>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d102      	bne.n	8000f58 <ButtonPadCallback+0x168>
 8000f52:	4b5c      	ldr	r3, [pc, #368]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f54:	220a      	movs	r2, #10
 8000f56:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 8000f58:	2108      	movs	r1, #8
 8000f5a:	485d      	ldr	r0, [pc, #372]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f5c:	f003 fefc 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <ButtonPadCallback+0x182>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b08      	cmp	r3, #8
 8000f6a:	d102      	bne.n	8000f72 <ButtonPadCallback+0x182>
 8000f6c:	4b55      	ldr	r3, [pc, #340]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f6e:	2209      	movs	r2, #9
 8000f70:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2120      	movs	r1, #32
 8000f76:	4856      	ldr	r0, [pc, #344]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f78:	f003 ff05 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2140      	movs	r1, #64	; 0x40
 8000f80:	4853      	ldr	r0, [pc, #332]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f82:	f003 ff00 	bl	8004d86 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 8000f86:	2101      	movs	r1, #1
 8000f88:	4851      	ldr	r0, [pc, #324]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000f8a:	f003 fee5 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <ButtonPadCallback+0x1b0>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <ButtonPadCallback+0x1b0>
 8000f9a:	4b4a      	ldr	r3, [pc, #296]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	484b      	ldr	r0, [pc, #300]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000fa4:	f003 fed8 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d005      	beq.n	8000fba <ButtonPadCallback+0x1ca>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d102      	bne.n	8000fba <ButtonPadCallback+0x1ca>
 8000fb4:	4b43      	ldr	r3, [pc, #268]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4844      	ldr	r0, [pc, #272]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000fbe:	f003 fecb 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <ButtonPadCallback+0x1e4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d102      	bne.n	8000fd4 <ButtonPadCallback+0x1e4>
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000fd0:	2206      	movs	r2, #6
 8000fd2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	483e      	ldr	r0, [pc, #248]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000fd8:	f003 febe 	bl	8004d58 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <ButtonPadCallback+0x1fe>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b08      	cmp	r3, #8
 8000fe6:	d102      	bne.n	8000fee <ButtonPadCallback+0x1fe>
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8000fea:	2205      	movs	r2, #5
 8000fec:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2140      	movs	r1, #64	; 0x40
 8000ff2:	4837      	ldr	r0, [pc, #220]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8000ff4:	f003 fec7 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffe:	4835      	ldr	r0, [pc, #212]	; (80010d4 <ButtonPadCallback+0x2e4>)
 8001000:	f003 fec1 	bl	8004d86 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 8001004:	2101      	movs	r1, #1
 8001006:	4832      	ldr	r0, [pc, #200]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001008:	f003 fea6 	bl	8004d58 <HAL_GPIO_ReadPin>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <ButtonPadCallback+0x22e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d102      	bne.n	800101e <ButtonPadCallback+0x22e>
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <ButtonPadCallback+0x2d4>)
 800101a:	2204      	movs	r2, #4
 800101c:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 800101e:	2102      	movs	r1, #2
 8001020:	482b      	ldr	r0, [pc, #172]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001022:	f003 fe99 	bl	8004d58 <HAL_GPIO_ReadPin>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <ButtonPadCallback+0x248>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d102      	bne.n	8001038 <ButtonPadCallback+0x248>
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8001034:	2203      	movs	r2, #3
 8001036:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 8001038:	2104      	movs	r1, #4
 800103a:	4825      	ldr	r0, [pc, #148]	; (80010d0 <ButtonPadCallback+0x2e0>)
 800103c:	f003 fe8c 	bl	8004d58 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d005      	beq.n	8001052 <ButtonPadCallback+0x262>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b04      	cmp	r3, #4
 800104a:	d102      	bne.n	8001052 <ButtonPadCallback+0x262>
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <ButtonPadCallback+0x2d4>)
 800104e:	2202      	movs	r2, #2
 8001050:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 8001052:	2108      	movs	r1, #8
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001056:	f003 fe7f 	bl	8004d58 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <ButtonPadCallback+0x27c>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b08      	cmp	r3, #8
 8001064:	d102      	bne.n	800106c <ButtonPadCallback+0x27c>
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <ButtonPadCallback+0x2d4>)
 8001068:	2201      	movs	r2, #1
 800106a:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	2110      	movs	r1, #16
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001072:	f003 fe88 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	2120      	movs	r1, #32
 800107a:	4815      	ldr	r0, [pc, #84]	; (80010d0 <ButtonPadCallback+0x2e0>)
 800107c:	f003 fe83 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001080:	2201      	movs	r2, #1
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <ButtonPadCallback+0x2e0>)
 8001086:	f003 fe7e 	bl	8004d86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	4810      	ldr	r0, [pc, #64]	; (80010d4 <ButtonPadCallback+0x2e4>)
 8001092:	f003 fe78 	bl	8004d86 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <ButtonPadCallback+0x2dc>)
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <ButtonPadCallback+0x2e8>)
 800109a:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <ButtonPadCallback+0x2dc>)
 800109e:	2202      	movs	r2, #2
 80010a0:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 80010a2:	490a      	ldr	r1, [pc, #40]	; (80010cc <ButtonPadCallback+0x2dc>)
 80010a4:	480a      	ldr	r0, [pc, #40]	; (80010d0 <ButtonPadCallback+0x2e0>)
 80010a6:	f003 fcc3 	bl	8004a30 <HAL_GPIO_Init>
	}

	previousMillis = currentMillis;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <ButtonPadCallback+0x2d0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <ButtonPadCallback+0x2d8>)
 80010b0:	6013      	str	r3, [r2, #0]
	return keyPressed;
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <ButtonPadCallback+0x2d4>)
 80010b4:	881b      	ldrh	r3, [r3, #0]

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000770 	.word	0x20000770
 80010c4:	20000774 	.word	0x20000774
 80010c8:	2000076c 	.word	0x2000076c
 80010cc:	2000075c 	.word	0x2000075c
 80010d0:	40011800 	.word	0x40011800
 80010d4:	40011000 	.word	0x40011000
 80010d8:	10310000 	.word	0x10310000

080010dc <DrumThreshWrite>:
	}
	f_close(&file);

}

void DrumThreshWrite() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80010e2:	af00      	add	r7, sp, #0
	FIL file;
	int temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	2203      	movs	r2, #3
 80010ea:	4952      	ldr	r1, [pc, #328]	; (8001234 <DrumThreshWrite+0x158>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00f fe35 	bl	8010d5c <f_open>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	if (fresult == FR_OK) {
 80010f8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d13c      	bne.n	800117a <DrumThreshWrite+0x9e>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001100:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <DrumThreshWrite+0x15c>)
 8001102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001104:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001108:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <DrumThreshWrite+0x15c>)
 8001110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001112:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001116:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <DrumThreshWrite+0x15c>)
 800111e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001122:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001126:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <DrumThreshWrite+0x15c>)
 800112e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001132:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001136:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800113a:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 800113c:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <DrumThreshWrite+0x15c>)
 800113e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <DrumThreshWrite+0x15c>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	441a      	add	r2, r3
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <DrumThreshWrite+0x15c>)
 8001148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114c:	441a      	add	r2, r3
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <DrumThreshWrite+0x15c>)
 8001150:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001154:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001156:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800115a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800115e:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001160:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001164:	f107 0118 	add.w	r1, r7, #24
 8001168:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800116c:	2214      	movs	r2, #20
 800116e:	f010 f87a 	bl	8011266 <f_write>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001178:	e051      	b.n	800121e <DrumThreshWrite+0x142>
	} else if (fresult == FR_NO_FILE) {
 800117a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800117e:	2b04      	cmp	r3, #4
 8001180:	d145      	bne.n	800120e <DrumThreshWrite+0x132>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 8001182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001186:	2206      	movs	r2, #6
 8001188:	492a      	ldr	r1, [pc, #168]	; (8001234 <DrumThreshWrite+0x158>)
 800118a:	4618      	mov	r0, r3
 800118c:	f00f fde6 	bl	8010d5c <f_open>
 8001190:	4603      	mov	r3, r0
 8001192:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <DrumThreshWrite+0x15c>)
 8001198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800119a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800119e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <DrumThreshWrite+0x15c>)
 80011a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <DrumThreshWrite+0x15c>)
 80011b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80011b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <DrumThreshWrite+0x15c>)
 80011c4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80011c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011d0:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <DrumThreshWrite+0x15c>)
 80011d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <DrumThreshWrite+0x15c>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	441a      	add	r2, r3
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <DrumThreshWrite+0x15c>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	441a      	add	r2, r3
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <DrumThreshWrite+0x15c>)
 80011e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80011ea:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80011ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80011f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80011f4:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 80011f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fa:	1d39      	adds	r1, r7, #4
 80011fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001200:	2214      	movs	r2, #20
 8001202:	f010 f830 	bl	8011266 <f_write>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 800120c:	e007      	b.n	800121e <DrumThreshWrite+0x142>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 800120e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <DrumThreshWrite+0x160>)
 8001214:	2113      	movs	r1, #19
 8001216:	2000      	movs	r0, #0
 8001218:	f000 fcaa 	bl	8001b70 <LCD_Print>
 800121c:	e7fe      	b.n	800121c <DrumThreshWrite+0x140>
	}
	f_close(&file);
 800121e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001222:	4618      	mov	r0, r3
 8001224:	f010 fadf 	bl	80117e6 <f_close>
}
 8001228:	bf00      	nop
 800122a:	f507 7718 	add.w	r7, r7, #608	; 0x260
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	08016840 	.word	0x08016840
 8001238:	20000788 	.word	0x20000788
 800123c:	08016894 	.word	0x08016894

08001240 <DrumUpdate>:
	}
	free(values);

}

void DrumUpdate(uint16_t activations) { // actiavtions: bitwise representation
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124a:	b672      	cpsid	i
}
 800124c:	bf00      	nop

	__disable_irq();

	int i = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	DrumStruct* drum = drums;
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <DrumUpdate+0xbc>)
 8001254:	60bb      	str	r3, [r7, #8]
	for (; i < 4; i++, drum++) {
 8001256:	e048      	b.n	80012ea <DrumUpdate+0xaa>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh || ((activations >> i) & 1)) {
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001262:	429a      	cmp	r2, r3
 8001264:	d807      	bhi.n	8001276 <DrumUpdate+0x36>
 8001266:	88fa      	ldrh	r2, [r7, #6]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	fa42 f303 	asr.w	r3, r2, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d011      	beq.n	800129a <DrumUpdate+0x5a>
			if (drum->state == DRUM_IDLE) {
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	7a1b      	ldrb	r3, [r3, #8]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d104      	bne.n	8001288 <DrumUpdate+0x48>
				AddDrum(drum->sound); // play the sound
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	785b      	ldrb	r3, [r3, #1]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fc70 	bl	8000b68 <AddDrum>
			}
			drum->state = DRUM_HIT;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	2201      	movs	r2, #1
 800128c:	721a      	strb	r2, [r3, #8]
			drum->last_tick = HAL_GetTick();
 800128e:	f001 ff79 	bl	8003184 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	e011      	b.n	80012be <DrumUpdate+0x7e>
		} else {
			if (drum->state != DRUM_IDLE) {
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	7a1b      	ldrb	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00d      	beq.n	80012be <DrumUpdate+0x7e>
				drum->state = DRUM_COOLDOWN;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2202      	movs	r2, #2
 80012a6:	721a      	strb	r2, [r3, #8]
				if (/* drum->state == DRUM_COOLDOWN
					&& */HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 80012a8:	f001 ff6c 	bl	8003184 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	1ad3      	subs	r3, r2, r3
				if (/* drum->state == DRUM_COOLDOWN
 80012b4:	2b14      	cmp	r3, #20
 80012b6:	d902      	bls.n	80012be <DrumUpdate+0x7e>
					drum->state = DRUM_IDLE;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2200      	movs	r2, #0
 80012bc:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (*(drum->sensor_value_pt) > drum_max_val[i]) {
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	490e      	ldr	r1, [pc, #56]	; (8001300 <DrumUpdate+0xc0>)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d906      	bls.n	80012de <DrumUpdate+0x9e>
			drum_max_val[i] = *(drum->sensor_value_pt);
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	490a      	ldr	r1, [pc, #40]	; (8001300 <DrumUpdate+0xc0>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 4; i++, drum++) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3330      	adds	r3, #48	; 0x30
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	ddb3      	ble.n	8001258 <DrumUpdate+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 80012f0:	b662      	cpsie	i
}
 80012f2:	bf00      	nop
		}
	}

	__enable_irq();
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000788 	.word	0x20000788
 8001300:	20000848 	.word	0x20000848

08001304 <ButtonPad_DrumCalibration>:

//	LCD_Print(0, (*r)++, "%3d", drums[0].state);

}

void ButtonPad_DrumCalibration(int keyPressed) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	switch (keyPressed) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	2b07      	cmp	r3, #7
 8001312:	d866      	bhi.n	80013e2 <ButtonPad_DrumCalibration+0xde>
 8001314:	a201      	add	r2, pc, #4	; (adr r2, 800131c <ButtonPad_DrumCalibration+0x18>)
 8001316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131a:	bf00      	nop
 800131c:	0800133d 	.word	0x0800133d
 8001320:	08001345 	.word	0x08001345
 8001324:	0800134d 	.word	0x0800134d
 8001328:	08001355 	.word	0x08001355
 800132c:	0800135d 	.word	0x0800135d
 8001330:	0800138f 	.word	0x0800138f
 8001334:	080013c1 	.word	0x080013c1
 8001338:	080013dd 	.word	0x080013dd
		case 1: AddDrum(DRUM_DON); break;
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fc13 	bl	8000b68 <AddDrum>
 8001342:	e04e      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 2: AddDrum(DRUM_KA); break;
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fc0f 	bl	8000b68 <AddDrum>
 800134a:	e04a      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 3: DrumUpdate(1); break;
 800134c:	2001      	movs	r0, #1
 800134e:	f7ff ff77 	bl	8001240 <DrumUpdate>
 8001352:	e046      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 4: DrumUpdate(2); break;
 8001354:	2002      	movs	r0, #2
 8001356:	f7ff ff73 	bl	8001240 <DrumUpdate>
 800135a:	e042      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 5: drums[drum_calibrate_number].sensor_thresh += 10; break;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 8001364:	460b      	mov	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	440b      	add	r3, r1
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	3328      	adds	r3, #40	; 0x28
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	4610      	mov	r0, r2
 8001378:	f103 020a 	add.w	r2, r3, #10
 800137c:	491c      	ldr	r1, [pc, #112]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 800137e:	4603      	mov	r3, r0
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4403      	add	r3, r0
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	440b      	add	r3, r1
 8001388:	3328      	adds	r3, #40	; 0x28
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e029      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 6: drums[drum_calibrate_number].sensor_thresh -= 10; break;
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 8001396:	460b      	mov	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	4413      	add	r3, r2
 80013a0:	3328      	adds	r3, #40	; 0x28
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a11      	ldr	r2, [pc, #68]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 80013a6:	8812      	ldrh	r2, [r2, #0]
 80013a8:	4610      	mov	r0, r2
 80013aa:	f1a3 020a 	sub.w	r2, r3, #10
 80013ae:	4910      	ldr	r1, [pc, #64]	; (80013f0 <ButtonPad_DrumCalibration+0xec>)
 80013b0:	4603      	mov	r3, r0
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4403      	add	r3, r0
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	440b      	add	r3, r1
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e010      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 7: drum_calibrate_number = (drum_calibrate_number + 1) % NUM_DRUMS; break;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	425a      	negs	r2, r3
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	f002 0203 	and.w	r2, r2, #3
 80013d0:	bf58      	it	pl
 80013d2:	4253      	negpl	r3, r2
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <ButtonPad_DrumCalibration+0xe8>)
 80013d8:	801a      	strh	r2, [r3, #0]
 80013da:	e002      	b.n	80013e2 <ButtonPad_DrumCalibration+0xde>
		case 8: DrumThreshWrite(); break;
 80013dc:	f7ff fe7e 	bl	80010dc <DrumThreshWrite>
 80013e0:	bf00      	nop
	}
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000858 	.word	0x20000858
 80013f0:	20000788 	.word	0x20000788

080013f4 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <ILI9341_Send_Command+0x34>)
 8001406:	f003 fcbe 	bl	8004d86 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800140a:	2200      	movs	r2, #0
 800140c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <ILI9341_Send_Command+0x34>)
 8001412:	f003 fcb8 	bl	8004d86 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f95d 	bl	80016d8 <ILI9341_SPI_Send>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40010c00 	.word	0x40010c00

0800142c <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <ILI9341_Send_Data+0x34>)
 800143e:	f003 fca2 	bl	8004d86 <HAL_GPIO_WritePin>
	DC_DATA;
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <ILI9341_Send_Data+0x34>)
 800144a:	f003 fc9c 	bl	8004d86 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f000 f941 	bl	80016d8 <ILI9341_SPI_Send>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40010c00 	.word	0x40010c00

08001464 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8001468:	f000 f900 	bl	800166c <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 800146c:	f000 f958 	bl	8001720 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff ffbf 	bl	80013f4 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8001476:	20cb      	movs	r0, #203	; 0xcb
 8001478:	f7ff ffbc 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800147c:	2039      	movs	r0, #57	; 0x39
 800147e:	f7ff ffd5 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8001482:	202c      	movs	r0, #44	; 0x2c
 8001484:	f7ff ffd2 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff ffcf 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800148e:	2034      	movs	r0, #52	; 0x34
 8001490:	f7ff ffcc 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001494:	2002      	movs	r0, #2
 8001496:	f7ff ffc9 	bl	800142c <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800149a:	20cf      	movs	r0, #207	; 0xcf
 800149c:	f7ff ffaa 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ffc3 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80014a6:	20c1      	movs	r0, #193	; 0xc1
 80014a8:	f7ff ffc0 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 80014ac:	2030      	movs	r0, #48	; 0x30
 80014ae:	f7ff ffbd 	bl	800142c <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 80014b2:	20e8      	movs	r0, #232	; 0xe8
 80014b4:	f7ff ff9e 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80014b8:	2085      	movs	r0, #133	; 0x85
 80014ba:	f7ff ffb7 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014be:	2000      	movs	r0, #0
 80014c0:	f7ff ffb4 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80014c4:	2078      	movs	r0, #120	; 0x78
 80014c6:	f7ff ffb1 	bl	800142c <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80014ca:	20ea      	movs	r0, #234	; 0xea
 80014cc:	f7ff ff92 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f7ff ffab 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff ffa8 	bl	800142c <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80014dc:	20ed      	movs	r0, #237	; 0xed
 80014de:	f7ff ff89 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80014e2:	2064      	movs	r0, #100	; 0x64
 80014e4:	f7ff ffa2 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f7ff ff9f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80014ee:	2012      	movs	r0, #18
 80014f0:	f7ff ff9c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80014f4:	2081      	movs	r0, #129	; 0x81
 80014f6:	f7ff ff99 	bl	800142c <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80014fa:	20f7      	movs	r0, #247	; 0xf7
 80014fc:	f7ff ff7a 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8001500:	2020      	movs	r0, #32
 8001502:	f7ff ff93 	bl	800142c <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8001506:	20c0      	movs	r0, #192	; 0xc0
 8001508:	f7ff ff74 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800150c:	2010      	movs	r0, #16
 800150e:	f7ff ff8d 	bl	800142c <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8001512:	20c1      	movs	r0, #193	; 0xc1
 8001514:	f7ff ff6e 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001518:	2010      	movs	r0, #16
 800151a:	f7ff ff87 	bl	800142c <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 800151e:	20c5      	movs	r0, #197	; 0xc5
 8001520:	f7ff ff68 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001524:	203e      	movs	r0, #62	; 0x3e
 8001526:	f7ff ff81 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800152a:	2028      	movs	r0, #40	; 0x28
 800152c:	f7ff ff7e 	bl	800142c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8001530:	20c7      	movs	r0, #199	; 0xc7
 8001532:	f7ff ff5f 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8001536:	2086      	movs	r0, #134	; 0x86
 8001538:	f7ff ff78 	bl	800142c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 800153c:	2036      	movs	r0, #54	; 0x36
 800153e:	f7ff ff59 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8001542:	2048      	movs	r0, #72	; 0x48
 8001544:	f7ff ff72 	bl	800142c <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8001548:	203a      	movs	r0, #58	; 0x3a
 800154a:	f7ff ff53 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800154e:	2055      	movs	r0, #85	; 0x55
 8001550:	f7ff ff6c 	bl	800142c <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001554:	20b1      	movs	r0, #177	; 0xb1
 8001556:	f7ff ff4d 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff ff66 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8001560:	2018      	movs	r0, #24
 8001562:	f7ff ff63 	bl	800142c <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8001566:	20b6      	movs	r0, #182	; 0xb6
 8001568:	f7ff ff44 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800156c:	2008      	movs	r0, #8
 800156e:	f7ff ff5d 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8001572:	2082      	movs	r0, #130	; 0x82
 8001574:	f7ff ff5a 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8001578:	2027      	movs	r0, #39	; 0x27
 800157a:	f7ff ff57 	bl	800142c <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800157e:	20f2      	movs	r0, #242	; 0xf2
 8001580:	f7ff ff38 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff ff51 	bl	800142c <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800158a:	2026      	movs	r0, #38	; 0x26
 800158c:	f7ff ff32 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff ff4b 	bl	800142c <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8001596:	20e0      	movs	r0, #224	; 0xe0
 8001598:	f7ff ff2c 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800159c:	200f      	movs	r0, #15
 800159e:	f7ff ff45 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80015a2:	2031      	movs	r0, #49	; 0x31
 80015a4:	f7ff ff42 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 80015a8:	202b      	movs	r0, #43	; 0x2b
 80015aa:	f7ff ff3f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80015ae:	200c      	movs	r0, #12
 80015b0:	f7ff ff3c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015b4:	200e      	movs	r0, #14
 80015b6:	f7ff ff39 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80015ba:	2008      	movs	r0, #8
 80015bc:	f7ff ff36 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80015c0:	204e      	movs	r0, #78	; 0x4e
 80015c2:	f7ff ff33 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80015c6:	20f1      	movs	r0, #241	; 0xf1
 80015c8:	f7ff ff30 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80015cc:	2037      	movs	r0, #55	; 0x37
 80015ce:	f7ff ff2d 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80015d2:	2007      	movs	r0, #7
 80015d4:	f7ff ff2a 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80015d8:	2010      	movs	r0, #16
 80015da:	f7ff ff27 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015de:	2003      	movs	r0, #3
 80015e0:	f7ff ff24 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015e4:	200e      	movs	r0, #14
 80015e6:	f7ff ff21 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80015ea:	2009      	movs	r0, #9
 80015ec:	f7ff ff1e 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff1b 	bl	800142c <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80015f6:	20e1      	movs	r0, #225	; 0xe1
 80015f8:	f7ff fefc 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff ff15 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001602:	200e      	movs	r0, #14
 8001604:	f7ff ff12 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8001608:	2014      	movs	r0, #20
 800160a:	f7ff ff0f 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff ff0c 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001614:	2011      	movs	r0, #17
 8001616:	f7ff ff09 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800161a:	2007      	movs	r0, #7
 800161c:	f7ff ff06 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001620:	2031      	movs	r0, #49	; 0x31
 8001622:	f7ff ff03 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001626:	20c1      	movs	r0, #193	; 0xc1
 8001628:	f7ff ff00 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 800162c:	2048      	movs	r0, #72	; 0x48
 800162e:	f7ff fefd 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001632:	2008      	movs	r0, #8
 8001634:	f7ff fefa 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001638:	200f      	movs	r0, #15
 800163a:	f7ff fef7 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800163e:	200c      	movs	r0, #12
 8001640:	f7ff fef4 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001644:	2031      	movs	r0, #49	; 0x31
 8001646:	f7ff fef1 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800164a:	2036      	movs	r0, #54	; 0x36
 800164c:	f7ff feee 	bl	800142c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001650:	200f      	movs	r0, #15
 8001652:	f7ff feeb 	bl	800142c <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8001656:	2011      	movs	r0, #17
 8001658:	f7ff fecc 	bl	80013f4 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800165c:	2029      	movs	r0, #41	; 0x29
 800165e:	f7ff fec9 	bl	80013f4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8001662:	202c      	movs	r0, #44	; 0x2c
 8001664:	f7ff fee2 	bl	800142c <ILI9341_Send_Data>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <ILI9341_SPI_Init+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800167c:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016b8:	220a      	movs	r2, #10
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <ILI9341_SPI_Init+0x64>)
 80016be:	f007 f958 	bl	8008972 <HAL_SPI_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80016c8:	f001 f844 	bl	8002754 <Error_Handler>
	}
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	2000085c 	.word	0x2000085c
 80016d4:	40003800 	.word	0x40003800

080016d8 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80016e2:	1df9      	adds	r1, r7, #7
 80016e4:	2301      	movs	r3, #1
 80016e6:	2201      	movs	r2, #1
 80016e8:	4803      	ldr	r0, [pc, #12]	; (80016f8 <ILI9341_SPI_Send+0x20>)
 80016ea:	f007 f9c6 	bl	8008a7a <HAL_SPI_Transmit>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000085c 	.word	0x2000085c

080016fc <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b29a      	uxth	r2, r3
 800170a:	230a      	movs	r3, #10
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <ILI9341_SPI_Send_Multiple+0x20>)
 8001710:	f007 f9b3 	bl	8008a7a <HAL_SPI_Transmit>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	2000085c 	.word	0x2000085c

08001720 <ILI9341_Reset>:

void ILI9341_Reset() {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	RESET_ON;
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4810      	ldr	r0, [pc, #64]	; (800176c <ILI9341_Reset+0x4c>)
 800172c:	f003 fb2b 	bl	8004d86 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001730:	2032      	movs	r0, #50	; 0x32
 8001732:	f001 fd31 	bl	8003198 <HAL_Delay>
	RESET_OFF;
 8001736:	2201      	movs	r2, #1
 8001738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800173c:	480b      	ldr	r0, [pc, #44]	; (800176c <ILI9341_Reset+0x4c>)
 800173e:	f003 fb22 	bl	8004d86 <HAL_GPIO_WritePin>
	CS_ON;
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001748:	4808      	ldr	r0, [pc, #32]	; (800176c <ILI9341_Reset+0x4c>)
 800174a:	f003 fb1c 	bl	8004d86 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800174e:	2032      	movs	r0, #50	; 0x32
 8001750:	f001 fd22 	bl	8003198 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fe4d 	bl	80013f4 <ILI9341_Send_Command>
	CS_OFF;
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <ILI9341_Reset+0x4c>)
 8001762:	f003 fb10 	bl	8004d86 <HAL_GPIO_WritePin>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40010c00 	.word	0x40010c00

08001770 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800177a:	2036      	movs	r0, #54	; 0x36
 800177c:	f7ff fe3a 	bl	80013f4 <ILI9341_Send_Command>
	switch (rotation) {
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d836      	bhi.n	80017f4 <ILI9341_Set_Rotation+0x84>
 8001786:	a201      	add	r2, pc, #4	; (adr r2, 800178c <ILI9341_Set_Rotation+0x1c>)
 8001788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178c:	0800179d 	.word	0x0800179d
 8001790:	080017b3 	.word	0x080017b3
 8001794:	080017c9 	.word	0x080017c9
 8001798:	080017df 	.word	0x080017df
	case 0:
		ILI9341_Send_Data(0x48);
 800179c:	2048      	movs	r0, #72	; 0x48
 800179e:	f7ff fe45 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 240;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017a4:	22f0      	movs	r2, #240	; 0xf0
 80017a6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ae:	601a      	str	r2, [r3, #0]
		break;
 80017b0:	e020      	b.n	80017f4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80017b2:	2028      	movs	r0, #40	; 0x28
 80017b4:	f7ff fe3a 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 320;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017c2:	22f0      	movs	r2, #240	; 0xf0
 80017c4:	601a      	str	r2, [r3, #0]
		break;
 80017c6:	e015      	b.n	80017f4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80017c8:	2088      	movs	r0, #136	; 0x88
 80017ca:	f7ff fe2f 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 240;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017d0:	22f0      	movs	r2, #240	; 0xf0
 80017d2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017d4:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017da:	601a      	str	r2, [r3, #0]
		break;
 80017dc:	e00a      	b.n	80017f4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80017de:	20e8      	movs	r0, #232	; 0xe8
 80017e0:	f7ff fe24 	bl	800142c <ILI9341_Send_Data>
		X_SIZE = 320;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <ILI9341_Set_Rotation+0x8c>)
 80017e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ea:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <ILI9341_Set_Rotation+0x90>)
 80017ee:	22f0      	movs	r2, #240	; 0xf0
 80017f0:	601a      	str	r2, [r3, #0]
		break;
 80017f2:	bf00      	nop
	}
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000008 	.word	0x20000008
 8001800:	2000000c 	.word	0x2000000c

08001804 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001816:	4817      	ldr	r0, [pc, #92]	; (8001874 <ILI9341_SPI_Send_32+0x70>)
 8001818:	f003 fab5 	bl	8004d86 <HAL_GPIO_WritePin>
	DC_COMMAND;
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <ILI9341_SPI_Send_32+0x70>)
 8001824:	f003 faaf 	bl	8004d86 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff54 	bl	80016d8 <ILI9341_SPI_Send>

	DC_DATA;
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001836:	480f      	ldr	r0, [pc, #60]	; (8001874 <ILI9341_SPI_Send_32+0x70>)
 8001838:	f003 faa5 	bl	8004d86 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	0e1b      	lsrs	r3, r3, #24
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff48 	bl	80016d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff42 	bl	80016d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b2db      	uxtb	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff3c 	bl	80016d8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff37 	bl	80016d8 <ILI9341_SPI_Send>

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010c00 	.word	0x40010c00

08001878 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001898:	6979      	ldr	r1, [r7, #20]
 800189a:	202a      	movs	r0, #42	; 0x2a
 800189c:	f7ff ffb2 	bl	8001804 <ILI9341_SPI_Send_32>
	t = y1;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	617b      	str	r3, [r7, #20]
	t |= y2;
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80018b2:	6979      	ldr	r1, [r7, #20]
 80018b4:	202b      	movs	r0, #43	; 0x2b
 80018b6:	f7ff ffa5 	bl	8001804 <ILI9341_SPI_Send_32>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 80018c2:	b590      	push	{r4, r7, lr}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4604      	mov	r4, r0
 80018ca:	4608      	mov	r0, r1
 80018cc:	4611      	mov	r1, r2
 80018ce:	461a      	mov	r2, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	80fb      	strh	r3, [r7, #6]
 80018d4:	4603      	mov	r3, r0
 80018d6:	80bb      	strh	r3, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 80018e0:	88f8      	ldrh	r0, [r7, #6]
 80018e2:	88b9      	ldrh	r1, [r7, #4]
 80018e4:	88fa      	ldrh	r2, [r7, #6]
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	4413      	add	r3, r2
 80018ea:	3b01      	subs	r3, #1
 80018ec:	461c      	mov	r4, r3
 80018ee:	88ba      	ldrh	r2, [r7, #4]
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4622      	mov	r2, r4
 80018f8:	f7ff ffbe 	bl	8001878 <ILI9341_Set_Address>
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}

08001904 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001914:	202c      	movs	r0, #44	; 0x2c
 8001916:	f7ff fd6d 	bl	80013f4 <ILI9341_Send_Command>

	CS_ON;
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001920:	482a      	ldr	r0, [pc, #168]	; (80019cc <LCD_FillWindow+0xc8>)
 8001922:	f003 fa30 	bl	8004d86 <HAL_GPIO_WritePin>
	DC_DATA;
 8001926:	2201      	movs	r2, #1
 8001928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192c:	4827      	ldr	r0, [pc, #156]	; (80019cc <LCD_FillWindow+0xc8>)
 800192e:	f003 fa2a 	bl	8004d86 <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <LCD_FillWindow+0xcc>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	2b3f      	cmp	r3, #63	; 0x3f
 8001942:	dc01      	bgt.n	8001948 <LCD_FillWindow+0x44>
 8001944:	2340      	movs	r3, #64	; 0x40
 8001946:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2bf0      	cmp	r3, #240	; 0xf0
 800194c:	dd01      	ble.n	8001952 <LCD_FillWindow+0x4e>
 800194e:	23f0      	movs	r3, #240	; 0xf0
 8001950:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	b29b      	uxth	r3, r3
 8001958:	461a      	mov	r2, r3
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b29b      	uxth	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f012 f955 	bl	8013c18 <malloc>
 800196e:	4603      	mov	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	e009      	b.n	800198c <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	b292      	uxth	r2, r2
 8001984:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	3301      	adds	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001994:	e009      	b.n	80019aa <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4619      	mov	r1, r3
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff fead 	bl	80016fc <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d8f1      	bhi.n	8001996 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff fe9f 	bl	80016fc <ILI9341_SPI_Send_Multiple>

	free(array);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f012 f932 	bl	8013c28 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	cccccccd 	.word	0xcccccccd

080019d4 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4604      	mov	r4, r0
 80019dc:	4608      	mov	r0, r1
 80019de:	4611      	mov	r1, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	80fb      	strh	r3, [r7, #6]
 80019e6:	4603      	mov	r3, r0
 80019e8:	80bb      	strh	r3, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	807b      	strh	r3, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019f2:	883b      	ldrh	r3, [r7, #0]
 80019f4:	887a      	ldrh	r2, [r7, #2]
 80019f6:	88b9      	ldrh	r1, [r7, #4]
 80019f8:	88f8      	ldrh	r0, [r7, #6]
 80019fa:	f7ff ff62 	bl	80018c2 <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	883a      	ldrh	r2, [r7, #0]
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	8b3b      	ldrh	r3, [r7, #24]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	f7ff ff79 	bl	8001904 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd90      	pop	{r4, r7, pc}
	...

08001a1c <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <LCD_FillScreen+0x2c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <LCD_FillScreen+0x30>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b299      	uxth	r1, r3
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	460b      	mov	r3, r1
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff ffca 	bl	80019d4 <LCD_DrawFilledRectangle>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	3b20      	subs	r3, #32
 8001a66:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a68:	88b9      	ldrh	r1, [r7, #4]
 8001a6a:	88f8      	ldrh	r0, [r7, #6]
 8001a6c:	2310      	movs	r3, #16
 8001a6e:	2208      	movs	r2, #8
 8001a70:	f7ff ff27 	bl	80018c2 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8001a74:	202c      	movs	r0, #44	; 0x2c
 8001a76:	f7ff fcbd 	bl	80013f4 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8001a7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a7e:	f012 f8cb 	bl	8013c18 <malloc>
 8001a82:	4603      	mov	r3, r0
 8001a84:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75bb      	strb	r3, [r7, #22]
 8001a8e:	e026      	b.n	8001ade <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	7dbb      	ldrb	r3, [r7, #22]
 8001a94:	491c      	ldr	r1, [pc, #112]	; (8001b08 <LCD_DrawChar+0xb8>)
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	440a      	add	r2, r1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	757b      	strb	r3, [r7, #21]
 8001aa4:	e015      	b.n	8001ad2 <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8001aa6:	7dfb      	ldrb	r3, [r7, #23]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	e003      	b.n	8001ac0 <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abe:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
			pt++;
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	3302      	adds	r3, #2
 8001aca:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001acc:	7d7b      	ldrb	r3, [r7, #21]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	757b      	strb	r3, [r7, #21]
 8001ad2:	7d7b      	ldrb	r3, [r7, #21]
 8001ad4:	2b07      	cmp	r3, #7
 8001ad6:	d9e6      	bls.n	8001aa6 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001ad8:	7dbb      	ldrb	r3, [r7, #22]
 8001ada:	3301      	adds	r3, #1
 8001adc:	75bb      	strb	r3, [r7, #22]
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d9d5      	bls.n	8001a90 <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aea:	4808      	ldr	r0, [pc, #32]	; (8001b0c <LCD_DrawChar+0xbc>)
 8001aec:	f003 f94b 	bl	8004d86 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8001af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af4:	68b8      	ldr	r0, [r7, #8]
 8001af6:	f7ff fe01 	bl	80016fc <ILI9341_SPI_Send_Multiple>
	free(array);
 8001afa:	68b8      	ldr	r0, [r7, #8]
 8001afc:	f012 f894 	bl	8013c28 <free>
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	0802f5a8 	.word	0x0802f5a8
 8001b0c:	40010c00 	.word	0x40010c00

08001b10 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	603a      	str	r2, [r7, #0]
 8001b1a:	80fb      	strh	r3, [r7, #6]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001b20:	e01d      	b.n	8001b5e <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001b22:	88fb      	ldrh	r3, [r7, #6]
 8001b24:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001b28:	d904      	bls.n	8001b34 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	3310      	adds	r3, #16
 8001b32:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001b3a:	d903      	bls.n	8001b44 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	88b9      	ldrh	r1, [r7, #4]
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff7f 	bl	8001a50 <LCD_DrawChar>

		pStr ++;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1dd      	bne.n	8001b22 <LCD_DrawString+0x12>

	}

}
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8001b70:	b40c      	push	{r2, r3}
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b08e      	sub	sp, #56	; 0x38
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	460a      	mov	r2, r1
 8001b7c:	80fb      	strh	r3, [r7, #6]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 8001b82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b86:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8001b88:	f107 000c 	add.w	r0, r7, #12
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b90:	2128      	movs	r1, #40	; 0x28
 8001b92:	f012 fe21 	bl	80147d8 <vsniprintf>
 8001b96:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8001b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	b298      	uxth	r0, r3
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f107 020c 	add.w	r2, r7, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7ff ffae 	bl	8001b10 <LCD_DrawString>
 8001bb4:	e000      	b.n	8001bb8 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8001bb6:	bf00      	nop
}
 8001bb8:	3738      	adds	r7, #56	; 0x38
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bc0:	b002      	add	sp, #8
 8001bc2:	4770      	bx	lr

08001bc4 <UpdateHIDClassConfig>:

extern int16_t USB_CUSTOM_HID_CONFIG_DESC_SIZ;

extern int16_t USB_CUSTOM_HID_DESC_SIZ;

static void UpdateHIDClassConfig(HID_ClassConfigStruct* cfg) {
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
    USBD_CUSTOM_HID_CfgFSDesc = cfg->CfgFSDesc;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <UpdateHIDClassConfig+0x48>)
 8001bd2:	6013      	str	r3, [r2, #0]
    USBD_CUSTOM_HID_CfgHSDesc = cfg->CfgHSDesc;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a0d      	ldr	r2, [pc, #52]	; (8001c10 <UpdateHIDClassConfig+0x4c>)
 8001bda:	6013      	str	r3, [r2, #0]
    USBD_CUSTOM_HID_OtherSpeedCfgDesc = cfg->OtherSpeedCfgDesc;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <UpdateHIDClassConfig+0x50>)
 8001be2:	6013      	str	r3, [r2, #0]
    USB_CUSTOM_HID_CONFIG_DESC_SIZ = cfg->size_CfgDesc;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	899b      	ldrh	r3, [r3, #12]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <UpdateHIDClassConfig+0x54>)
 8001bec:	801a      	strh	r2, [r3, #0]

    USBD_CUSTOM_HID_Desc = cfg->Desc;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <UpdateHIDClassConfig+0x58>)
 8001bf4:	6013      	str	r3, [r2, #0]
    USB_CUSTOM_HID_DESC_SIZ = cfg->size_Desc;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	8a9b      	ldrh	r3, [r3, #20]
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <UpdateHIDClassConfig+0x5c>)
 8001bfe:	801a      	strh	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20001c80 	.word	0x20001c80
 8001c10:	20001c84 	.word	0x20001c84
 8001c14:	20001c88 	.word	0x20001c88
 8001c18:	20001c90 	.word	0x20001c90
 8001c1c:	20001c8c 	.word	0x20001c8c
 8001c20:	20001c92 	.word	0x20001c92

08001c24 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8001c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8001c36:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8001c50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <UpdateHIDItfConfig>:

extern uint16_t USBD_CUSTOM_HID_REPORT_DESC_SIZE;

extern USBD_CUSTOM_HID_ItfTypeDef USBD_CustomHID_fops_FS;

static void UpdateHIDItfConfig(HID_ItfConfigStruct* cfg) {
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	CUSTOM_HID_ReportDesc_FS = cfg->ReportDesc_FS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <UpdateHIDItfConfig+0x3c>)
 8001c6a:	6013      	str	r3, [r2, #0]
	USBD_CUSTOM_HID_REPORT_DESC_SIZE = cfg->size_ReportDesc;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	889a      	ldrh	r2, [r3, #4]
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <UpdateHIDItfConfig+0x40>)
 8001c72:	801a      	strh	r2, [r3, #0]

	// need to reinit the whole thing
	USBD_CustomHID_fops_FS = (USBD_CUSTOM_HID_ItfTypeDef) {
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <UpdateHIDItfConfig+0x3c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c7e:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <UpdateHIDItfConfig+0x48>)
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c84:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <UpdateHIDItfConfig+0x4c>)
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <UpdateHIDItfConfig+0x44>)
 8001c8a:	4a08      	ldr	r2, [pc, #32]	; (8001cac <UpdateHIDItfConfig+0x50>)
 8001c8c:	60da      	str	r2, [r3, #12]
								  CUSTOM_HID_ReportDesc_FS,
								  CUSTOM_HID_Init_FS,
								  CUSTOM_HID_DeInit_FS,
								  CUSTOM_HID_OutEvent_FS
								};
}
 8001c8e:	bf00      	nop
 8001c90:	371c      	adds	r7, #28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20002074 	.word	0x20002074
 8001c9c:	20002078 	.word	0x20002078
 8001ca0:	2000207c 	.word	0x2000207c
 8001ca4:	08001c25 	.word	0x08001c25
 8001ca8:	08001c33 	.word	0x08001c33
 8001cac:	08001c41 	.word	0x08001c41

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
uint32_t adc_processed_until = 0;

uint32_t adc_buffer_length = 0;
uint32_t itr_tick = 0;
int16_t errors[4];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x26>
//		keyboardhid.KEYCODE4 = drums[3].state >= DRUM_HIT ? 0x0e : 0x00;  // press 'k'
//		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
//		}
	}

	else if (htim == &htim4) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d106      	bne.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x26>
		mix_interrupt_counts++;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001cd0:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 8001cd2:	f7fe ffb1 	bl	8000c38 <PrecomputeMix>
	}
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000b94 	.word	0x20000b94
 8001ce4:	20000bdc 	.word	0x20000bdc
 8001ce8:	20000cb0 	.word	0x20000cb0

08001cec <HAL_GPIO_EXTI_Callback>:

uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
	int keyPressed = ButtonPadCallback(GPIO_Pin);
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f879 	bl	8000df0 <ButtonPadCallback>
 8001cfe:	60f8      	str	r0, [r7, #12]
	ButtonPad_DrumCalibration(keyPressed);
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f7ff faff 	bl	8001304 <ButtonPad_DrumCalibration>
	btn_callbacks++;
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x30>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x30>)
 8001d10:	801a      	strh	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20001c58 	.word	0x20001c58

08001d20 <HAL_UART_RxCpltCallback>:

uint8_t Rx_data[1] = {0};
uint16_t Rx_buff[6] = {0};
int Rx_length = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
//	Rx_length += 1;
	if (Rx_length < 2) {
 8001d28:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	dc13      	bgt.n	8001d58 <HAL_UART_RxCpltCallback+0x38>
		if (*Rx_data != 0xFF) {
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_UART_RxCpltCallback+0xb8>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2bff      	cmp	r3, #255	; 0xff
 8001d36:	d003      	beq.n	8001d40 <HAL_UART_RxCpltCallback+0x20>
			Rx_length = 0;
 8001d38:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	e040      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0xa2>
		} else {
			((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	4923      	ldr	r1, [pc, #140]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d48:	600a      	str	r2, [r1, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <HAL_UART_RxCpltCallback+0xb8>)
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e034      	b.n	8001dc2 <HAL_UART_RxCpltCallback+0xa2>
		}
	} else {
		((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	491d      	ldr	r1, [pc, #116]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d60:	600a      	str	r2, [r1, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001d66:	4413      	add	r3, r2
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_UART_RxCpltCallback+0xb8>)
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
		if (Rx_length == 12) {
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d125      	bne.n	8001dc2 <HAL_UART_RxCpltCallback+0xa2>
			if (Rx_buff[1] + Rx_buff[2] + Rx_buff[3] + Rx_buff[4] == Rx_buff[5]) {
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001d78:	885b      	ldrh	r3, [r3, #2]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001d7e:	889b      	ldrh	r3, [r3, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a16      	ldr	r2, [pc, #88]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001d84:	88d2      	ldrh	r2, [r2, #6]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001d8a:	8912      	ldrh	r2, [r2, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001d90:	8952      	ldrh	r2, [r2, #10]
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d112      	bne.n	8001dbc <HAL_UART_RxCpltCallback+0x9c>
				for (int i = 0; i < 4; i++) {
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e00c      	b.n	8001db6 <HAL_UART_RxCpltCallback+0x96>
					drum_sensor_values[i] = Rx_buff[i+1];
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_UART_RxCpltCallback+0xbc>)
 8001da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001da6:	4619      	mov	r1, r3
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_UART_RxCpltCallback+0xc0>)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	ddef      	ble.n	8001d9c <HAL_UART_RxCpltCallback+0x7c>
				}
			}
			Rx_length = 0;
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <HAL_UART_RxCpltCallback+0xb4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4904      	ldr	r1, [pc, #16]	; (8001dd8 <HAL_UART_RxCpltCallback+0xb8>)
 8001dc6:	4807      	ldr	r0, [pc, #28]	; (8001de4 <HAL_UART_RxCpltCallback+0xc4>)
 8001dc8:	f007 fe14 	bl	80099f4 <HAL_UART_Receive_IT>
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20001c6c 	.word	0x20001c6c
 8001dd8:	20001c5c 	.word	0x20001c5c
 8001ddc:	20001c60 	.word	0x20001c60
 8001de0:	20000778 	.word	0x20000778
 8001de4:	20000c24 	.word	0x20000c24

08001de8 <HAL_UART_TxCpltCallback>:

int isSent = 1;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	isSent = 1;
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <HAL_UART_TxCpltCallback+0x18>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
//	countinterrupt++;
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000080 	.word	0x20000080

08001e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	f5ad 6dff 	sub.w	sp, sp, #2040	; 0x7f8
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e0c:	f001 f962 	bl	80030d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  UpdateHIDClassConfig(&Keyboard_ClassConfig);
 8001e10:	486d      	ldr	r0, [pc, #436]	; (8001fc8 <main+0x1c4>)
 8001e12:	f7ff fed7 	bl	8001bc4 <UpdateHIDClassConfig>
  UpdateHIDItfConfig(&Keyboard_ItfConfig);
 8001e16:	486d      	ldr	r0, [pc, #436]	; (8001fcc <main+0x1c8>)
 8001e18:	f7ff ff20 	bl	8001c5c <UpdateHIDItfConfig>
//  UpdateHIDClassConfig(&Switch_ClassConfig);
//  UpdateHIDItfConfig(&Switch_ItfConfig);
  MX_USB_DEVICE_Init();
 8001e1c:	f011 fa0c 	bl	8013238 <MX_USB_DEVICE_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e20:	f000 f8e4 	bl	8001fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e24:	f000 fbc8 	bl	80025b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e28:	f000 fb84 	bl	8002534 <MX_DMA_Init>
  MX_SPI2_Init();
 8001e2c:	f000 fa38 	bl	80022a0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001e30:	f000 fab8 	bl	80023a4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001e34:	f000 f93a 	bl	80020ac <MX_ADC1_Init>
  MX_SDIO_SD_Init();
 8001e38:	f000 f9da 	bl	80021f0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001e3c:	f00b fd50 	bl	800d8e0 <MX_FATFS_Init>
  MX_DAC_Init();
 8001e40:	f000 f974 	bl	800212c <MX_DAC_Init>
  MX_I2C1_Init();
 8001e44:	f000 f9a6 	bl	8002194 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001e48:	f000 fa60 	bl	800230c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001e4c:	f000 faf8 	bl	8002440 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001e50:	f000 fb46 	bl	80024e0 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001e54:	f000 f9ec 	bl	8002230 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8001e58:	485d      	ldr	r0, [pc, #372]	; (8001fd0 <main+0x1cc>)
 8001e5a:	f001 fd9f 	bl	800399c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)values_adc,1000);
 8001e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e62:	495c      	ldr	r1, [pc, #368]	; (8001fd4 <main+0x1d0>)
 8001e64:	485a      	ldr	r0, [pc, #360]	; (8001fd0 <main+0x1cc>)
 8001e66:	f001 faa5 	bl	80033b4 <HAL_ADC_Start_DMA>
  // 1.125MHz * 239.5 cycles * 4 = 0.85 ms
//  HAL_UART_Receive_IT (&huart1, Rx_data, 1);

	ButtonPadInit();
 8001e6a:	f7fe ffa3 	bl	8000db4 <ButtonPadInit>

	ILI9341_Init();
 8001e6e:	f7ff faf9 	bl	8001464 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 8001e72:	2002      	movs	r0, #2
 8001e74:	f7ff fc7c 	bl	8001770 <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8001e78:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001e7c:	f7ff fdce 	bl	8001a1c <LCD_FillScreen>

//	DrumInit();

//	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
//
	TIM3->PSC = 720 - 1;
 8001e80:	4b55      	ldr	r3, [pc, #340]	; (8001fd8 <main+0x1d4>)
 8001e82:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
//	TIM3->ARR = 50 * 50 - 1; // 400Hz
	TIM3->ARR = 50 - 1; // 2000Hz
 8001e88:	4b53      	ldr	r3, [pc, #332]	; (8001fd8 <main+0x1d4>)
 8001e8a:	2231      	movs	r2, #49	; 0x31
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



	long last_ticks = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
	long tft_last_ticks = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
	long ticks = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
	int num_hits = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
	int hit_state = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
//		while (1) {}
//	}


	uint32_t reset_ticks;
	uint16_t temp = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8a7 37de 	strh.w	r3, [r7, #2014]	; 0x7de
//		sprintf(tx_buff, "adc0: %5d\n  ", (int) hadc1.DMA_Handle->Instance->CNDTR);
//		sprintf(tx_buff, "adc0: togaw\n  ",);
//		sprintf(tx_buff, "adc0: %5d\n  ", (int) values_adc[0]);

//		HAL_UART_Transmit(&huart1, tx_buff, ((char*) tx_buff_u16) - tx_buff + 4, 1000);
		if (isSent == 1)
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <main+0x1d8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d174      	bne.n	8001fa4 <main+0x1a0>
			// 9 MHz = 9 * 10^6 data points per second
			// 9M / (239.5 + 12.5) / 40 = 892.8
			// 9 *10^6 / (239.5 + 12.5) / 5 = 7142
			// 9 *10^6 / (239.5 + 12.5) / 2 = 11904
			char tx_buff[2000];
			tx_buff[0] = 's';
 8001eba:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001ebe:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001ec2:	2273      	movs	r2, #115	; 0x73
 8001ec4:	701a      	strb	r2, [r3, #0]
			tx_buff[1] = 't';
 8001ec6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001eca:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001ece:	2274      	movs	r2, #116	; 0x74
 8001ed0:	705a      	strb	r2, [r3, #1]
			tx_buff[2] = 'a';
 8001ed2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001ed6:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001eda:	2261      	movs	r2, #97	; 0x61
 8001edc:	709a      	strb	r2, [r3, #2]
			tx_buff[3] = 't';
 8001ede:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 8001ee2:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8001ee6:	2274      	movs	r2, #116	; 0x74
 8001ee8:	70da      	strb	r2, [r3, #3]
			int skip_count = 5;
 8001eea:	2305      	movs	r3, #5
 8001eec:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
			int adc_transferred_until = 1000 - hadc1.DMA_Handle->Instance->CNDTR;
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <main+0x1cc>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001efc:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
			char* tx_buff_u16 = tx_buff + 4;
 8001f00:	463b      	mov	r3, r7
 8001f02:	3304      	adds	r3, #4
 8001f04:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
			while (adc_processed_until / skip_count != adc_transferred_until / skip_count) {
 8001f08:	e01c      	b.n	8001f44 <main+0x140>
					*(tx_buff_u16++) = (uint8_t) (values_adc[adc_processed_until] >> 2);
 8001f0a:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <main+0x1dc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a31      	ldr	r2, [pc, #196]	; (8001fd4 <main+0x1d0>)
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	0899      	lsrs	r1, r3, #2
 8001f16:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	f8c7 27f0 	str.w	r2, [r7, #2032]	; 0x7f0
 8001f20:	b2ca      	uxtb	r2, r1
 8001f22:	701a      	strb	r2, [r3, #0]
				adc_processed_until = (adc_processed_until + skip_count) % 1000;
 8001f24:	4b2e      	ldr	r3, [pc, #184]	; (8001fe0 <main+0x1dc>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8001f2c:	441a      	add	r2, r3
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <main+0x1e0>)
 8001f30:	fba3 1302 	umull	r1, r3, r3, r2
 8001f34:	099b      	lsrs	r3, r3, #6
 8001f36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a27      	ldr	r2, [pc, #156]	; (8001fe0 <main+0x1dc>)
 8001f42:	6013      	str	r3, [r2, #0]
			while (adc_processed_until / skip_count != adc_transferred_until / skip_count) {
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <main+0x1dc>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	; 0x7d4
 8001f54:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	; 0x7d8
 8001f58:	fb91 f2f2 	sdiv	r2, r1, r2
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d1d4      	bne.n	8001f0a <main+0x106>
			}
			*(((char *) tx_buff_u16) + 0) = 'e';
 8001f60:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8001f64:	2265      	movs	r2, #101	; 0x65
 8001f66:	701a      	strb	r2, [r3, #0]
			*(((char *) tx_buff_u16) + 1) = 'n';
 8001f68:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	226e      	movs	r2, #110	; 0x6e
 8001f70:	701a      	strb	r2, [r3, #0]
			*(((char *) tx_buff_u16) + 2) = 'd';
 8001f72:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8001f76:	3302      	adds	r3, #2
 8001f78:	2264      	movs	r2, #100	; 0x64
 8001f7a:	701a      	strb	r2, [r3, #0]
			*(((char *) tx_buff_u16) + 3) = 'e';
 8001f7c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8001f80:	3303      	adds	r3, #3
 8001f82:	2265      	movs	r2, #101	; 0x65
 8001f84:	701a      	strb	r2, [r3, #0]

			  HAL_UART_Transmit_DMA(&huart1, tx_buff, ((char*) tx_buff_u16) - tx_buff + 4);
 8001f86:	463b      	mov	r3, r7
 8001f88:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	; 0x7f0
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	463b      	mov	r3, r7
 8001f96:	4619      	mov	r1, r3
 8001f98:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <main+0x1e4>)
 8001f9a:	f007 fd51 	bl	8009a40 <HAL_UART_Transmit_DMA>
			  isSent = 0;
 8001f9e:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <main+0x1d8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
//			for (int i = 0; i < 4; i++) {
//				max_reading[i] = 0;
//			}
//		}
//
		int r = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
		if (HAL_GetTick() - tft_last_ticks > 100) {
 8001faa:	f001 f8eb 	bl	8003184 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	; 0x7f4
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	f67f af7b 	bls.w	8001eb2 <main+0xae>
			// 129 6 8704 0 63/86
			// 33 9 512 0 1
			 *
			 */

			tft_last_ticks = HAL_GetTick();
 8001fbc:	f001 f8e2 	bl	8003184 <HAL_GetTick>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
	while (1) {
 8001fc6:	e774      	b.n	8001eb2 <main+0xae>
 8001fc8:	0802fb98 	.word	0x0802fb98
 8001fcc:	0802fbb8 	.word	0x0802fbb8
 8001fd0:	200008b4 	.word	0x200008b4
 8001fd4:	20000cb4 	.word	0x20000cb4
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	20000080 	.word	0x20000080
 8001fe0:	20001c54 	.word	0x20001c54
 8001fe4:	10624dd3 	.word	0x10624dd3
 8001fe8:	20000c24 	.word	0x20000c24

08001fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b096      	sub	sp, #88	; 0x58
 8001ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff6:	2228      	movs	r2, #40	; 0x28
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f011 fe2a 	bl	8013c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002010:	1d3b      	adds	r3, r7, #4
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]
 800201e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002020:	2301      	movs	r3, #1
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800202e:	2301      	movs	r3, #1
 8002030:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002032:	2302      	movs	r3, #2
 8002034:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800203c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002040:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fd6a 	bl	8006b20 <HAL_RCC_OscConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002052:	f000 fb7f 	bl	8002754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002056:	230f      	movs	r3, #15
 8002058:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205a:	2302      	movs	r3, #2
 800205c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	2102      	movs	r1, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f004 ffd5 	bl	8007024 <HAL_RCC_ClockConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002080:	f000 fb68 	bl	8002754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002084:	2312      	movs	r3, #18
 8002086:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800208c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4618      	mov	r0, r3
 8002096:	f005 f953 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80020a0:	f000 fb58 	bl	8002754 <Error_Handler>
  }
}
 80020a4:	bf00      	nop
 80020a6:	3758      	adds	r7, #88	; 0x58
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <MX_ADC1_Init+0x78>)
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <MX_ADC1_Init+0x7c>)
 80020c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020c2:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_ADC1_Init+0x78>)
 80020c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <MX_ADC1_Init+0x78>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_ADC1_Init+0x78>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d6:	4b13      	ldr	r3, [pc, #76]	; (8002124 <MX_ADC1_Init+0x78>)
 80020d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80020dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_ADC1_Init+0x78>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_ADC1_Init+0x78>)
 80020e6:	2204      	movs	r2, #4
 80020e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <MX_ADC1_Init+0x78>)
 80020ec:	f001 f878 	bl	80031e0 <HAL_ADC_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020f6:	f000 fb2d 	bl	8002754 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020fe:	2301      	movs	r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5; // ADC_SAMPLETIME_13CYCLES_5; // ADC_SAMPLETIME_239CYCLES_5;
 8002102:	2307      	movs	r3, #7
 8002104:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4806      	ldr	r0, [pc, #24]	; (8002124 <MX_ADC1_Init+0x78>)
 800210c:	f001 fa4c 	bl	80035a8 <HAL_ADC_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002116:	f000 fb1d 	bl	8002754 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200008b4 	.word	0x200008b4
 8002128:	40012400 	.word	0x40012400

0800212c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002132:	463b      	mov	r3, r7
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_DAC_Init+0x60>)
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <MX_DAC_Init+0x64>)
 800213e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002140:	4812      	ldr	r0, [pc, #72]	; (800218c <MX_DAC_Init+0x60>)
 8002142:	f001 fde6 	bl	8003d12 <HAL_DAC_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800214c:	f000 fb02 	bl	8002754 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002150:	2324      	movs	r3, #36	; 0x24
 8002152:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002158:	463b      	mov	r3, r7
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	480b      	ldr	r0, [pc, #44]	; (800218c <MX_DAC_Init+0x60>)
 8002160:	f001 ff02 	bl	8003f68 <HAL_DAC_ConfigChannel>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800216a:	f000 faf3 	bl	8002754 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800216e:	463b      	mov	r3, r7
 8002170:	2210      	movs	r2, #16
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_DAC_Init+0x60>)
 8002176:	f001 fef7 	bl	8003f68 <HAL_DAC_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002180:	f000 fae8 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000928 	.word	0x20000928
 8002190:	40007400 	.word	0x40007400

08002194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002198:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <MX_I2C1_Init+0x50>)
 800219a:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <MX_I2C1_Init+0x54>)
 800219c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <MX_I2C1_Init+0x58>)
 80021a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <MX_I2C1_Init+0x50>)
 80021d2:	f002 fe09 	bl	8004de8 <HAL_I2C_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021dc:	f000 faba 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200009c4 	.word	0x200009c4
 80021e8:	40005400 	.word	0x40005400
 80021ec:	000186a0 	.word	0x000186a0

080021f0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_SDIO_SD_Init+0x38>)
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <MX_SDIO_SD_Init+0x3c>)
 80021f8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <MX_SDIO_SD_Init+0x38>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_SDIO_SD_Init+0x38>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002206:	4b08      	ldr	r3, [pc, #32]	; (8002228 <MX_SDIO_SD_Init+0x38>)
 8002208:	2200      	movs	r2, #0
 800220a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_SDIO_SD_Init+0x38>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <MX_SDIO_SD_Init+0x38>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <MX_SDIO_SD_Init+0x38>)
 800221a:	2264      	movs	r2, #100	; 0x64
 800221c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000a18 	.word	0x20000a18
 800222c:	40018000 	.word	0x40018000

08002230 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002234:	4b18      	ldr	r3, [pc, #96]	; (8002298 <MX_SPI1_Init+0x68>)
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <MX_SPI1_Init+0x6c>)
 8002238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <MX_SPI1_Init+0x68>)
 800223c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <MX_SPI1_Init+0x68>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <MX_SPI1_Init+0x68>)
 800224a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800224e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <MX_SPI1_Init+0x68>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <MX_SPI1_Init+0x68>)
 8002258:	2200      	movs	r2, #0
 800225a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800225c:	4b0e      	ldr	r3, [pc, #56]	; (8002298 <MX_SPI1_Init+0x68>)
 800225e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002262:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <MX_SPI1_Init+0x68>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <MX_SPI1_Init+0x68>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002270:	4b09      	ldr	r3, [pc, #36]	; (8002298 <MX_SPI1_Init+0x68>)
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <MX_SPI1_Init+0x68>)
 8002278:	2200      	movs	r2, #0
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <MX_SPI1_Init+0x68>)
 800227e:	220a      	movs	r2, #10
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <MX_SPI1_Init+0x68>)
 8002284:	f006 fb75 	bl	8008972 <HAL_SPI_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800228e:	f000 fa61 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000a9c 	.word	0x20000a9c
 800229c:	40013000 	.word	0x40013000

080022a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <MX_SPI2_Init+0x64>)
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <MX_SPI2_Init+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_SPI2_Init+0x64>)
 80022ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_SPI2_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <MX_SPI2_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_SPI2_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_SPI2_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_SPI2_Init+0x64>)
 80022cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_SPI2_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <MX_SPI2_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_SPI2_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <MX_SPI2_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_SPI2_Init+0x64>)
 80022ec:	220a      	movs	r2, #10
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022f0:	4804      	ldr	r0, [pc, #16]	; (8002304 <MX_SPI2_Init+0x64>)
 80022f2:	f006 fb3e 	bl	8008972 <HAL_SPI_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022fc:	f000 fa2a 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000af4 	.word	0x20000af4
 8002308:	40003800 	.word	0x40003800

0800230c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002320:	463b      	mov	r3, r7
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <MX_TIM2_Init+0x94>)
 800232a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800232e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <MX_TIM2_Init+0x94>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <MX_TIM2_Init+0x94>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <MX_TIM2_Init+0x94>)
 800233e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002342:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <MX_TIM2_Init+0x94>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234a:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <MX_TIM2_Init+0x94>)
 800234c:	2200      	movs	r2, #0
 800234e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002350:	4813      	ldr	r0, [pc, #76]	; (80023a0 <MX_TIM2_Init+0x94>)
 8002352:	f006 fd7b 	bl	8008e4c <HAL_TIM_Base_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800235c:	f000 f9fa 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002366:	f107 0308 	add.w	r3, r7, #8
 800236a:	4619      	mov	r1, r3
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <MX_TIM2_Init+0x94>)
 800236e:	f006 ffa3 	bl	80092b8 <HAL_TIM_ConfigClockSource>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002378:	f000 f9ec 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800237c:	2320      	movs	r3, #32
 800237e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <MX_TIM2_Init+0x94>)
 800238a:	f007 fa65 	bl	8009858 <HAL_TIMEx_MasterConfigSynchronization>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002394:	f000 f9de 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002398:	bf00      	nop
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20000b4c 	.word	0x20000b4c

080023a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	463b      	mov	r3, r7
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <MX_TIM3_Init+0x94>)
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <MX_TIM3_Init+0x98>)
 80023c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <MX_TIM3_Init+0x94>)
 80023c8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80023cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_TIM3_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_TIM3_Init+0x94>)
 80023d6:	2231      	movs	r2, #49	; 0x31
 80023d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_TIM3_Init+0x94>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <MX_TIM3_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023e6:	4814      	ldr	r0, [pc, #80]	; (8002438 <MX_TIM3_Init+0x94>)
 80023e8:	f006 fd30 	bl	8008e4c <HAL_TIM_Base_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80023f2:	f000 f9af 	bl	8002754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023fc:	f107 0308 	add.w	r3, r7, #8
 8002400:	4619      	mov	r1, r3
 8002402:	480d      	ldr	r0, [pc, #52]	; (8002438 <MX_TIM3_Init+0x94>)
 8002404:	f006 ff58 	bl	80092b8 <HAL_TIM_ConfigClockSource>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800240e:	f000 f9a1 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800241a:	463b      	mov	r3, r7
 800241c:	4619      	mov	r1, r3
 800241e:	4806      	ldr	r0, [pc, #24]	; (8002438 <MX_TIM3_Init+0x94>)
 8002420:	f007 fa1a 	bl	8009858 <HAL_TIMEx_MasterConfigSynchronization>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800242a:	f000 f993 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000b94 	.word	0x20000b94
 800243c:	40000400 	.word	0x40000400

08002440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <MX_TIM4_Init+0x98>)
 8002460:	4a1e      	ldr	r2, [pc, #120]	; (80024dc <MX_TIM4_Init+0x9c>)
 8002462:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <MX_TIM4_Init+0x98>)
 8002466:	2200      	movs	r2, #0
 8002468:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <MX_TIM4_Init+0x98>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <MX_TIM4_Init+0x98>)
 8002472:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002476:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002478:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_TIM4_Init+0x98>)
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247e:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_TIM4_Init+0x98>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002484:	4814      	ldr	r0, [pc, #80]	; (80024d8 <MX_TIM4_Init+0x98>)
 8002486:	f006 fce1 	bl	8008e4c <HAL_TIM_Base_Init>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002490:	f000 f960 	bl	8002754 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002494:	2305      	movs	r3, #5
 8002496:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002498:	2310      	movs	r3, #16
 800249a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	4619      	mov	r1, r3
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <MX_TIM4_Init+0x98>)
 80024a4:	f006 ffcf 	bl	8009446 <HAL_TIM_SlaveConfigSynchro>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80024ae:	f000 f951 	bl	8002754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <MX_TIM4_Init+0x98>)
 80024c0:	f007 f9ca 	bl	8009858 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80024ca:	f000 f943 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000bdc 	.word	0x20000bdc
 80024dc:	40000800 	.word	0x40000800

080024e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <MX_USART1_UART_Init+0x50>)
 80024e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_USART1_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002506:	220c      	movs	r2, #12
 8002508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <MX_USART1_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_USART1_UART_Init+0x4c>)
 8002518:	f007 fa1c 	bl	8009954 <HAL_UART_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002522:	f000 f917 	bl	8002754 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000c24 	.word	0x20000c24
 8002530:	40013800 	.word	0x40013800

08002534 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <MX_DMA_Init+0x80>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <MX_DMA_Init+0x80>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6153      	str	r3, [r2, #20]
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <MX_DMA_Init+0x80>)
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <MX_DMA_Init+0x80>)
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <MX_DMA_Init+0x80>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6153      	str	r3, [r2, #20]
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <MX_DMA_Init+0x80>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2105      	movs	r1, #5
 800256e:	200b      	movs	r0, #11
 8002570:	f001 fb99 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002574:	200b      	movs	r0, #11
 8002576:	f001 fbb2 	bl	8003cde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2105      	movs	r1, #5
 800257e:	200e      	movs	r0, #14
 8002580:	f001 fb91 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002584:	200e      	movs	r0, #14
 8002586:	f001 fbaa 	bl	8003cde <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 5, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2105      	movs	r1, #5
 800258e:	203a      	movs	r0, #58	; 0x3a
 8002590:	f001 fb89 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002594:	203a      	movs	r0, #58	; 0x3a
 8002596:	f001 fba2 	bl	8003cde <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 5, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2105      	movs	r1, #5
 800259e:	203b      	movs	r0, #59	; 0x3b
 80025a0:	f001 fb81 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80025a4:	203b      	movs	r0, #59	; 0x3b
 80025a6:	f001 fb9a 	bl	8003cde <HAL_NVIC_EnableIRQ>

}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000

080025b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	f107 0318 	add.w	r3, r7, #24
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025cc:	4b5c      	ldr	r3, [pc, #368]	; (8002740 <MX_GPIO_Init+0x188>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a5b      	ldr	r2, [pc, #364]	; (8002740 <MX_GPIO_Init+0x188>)
 80025d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <MX_GPIO_Init+0x188>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <MX_GPIO_Init+0x188>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a55      	ldr	r2, [pc, #340]	; (8002740 <MX_GPIO_Init+0x188>)
 80025ea:	f043 0310 	orr.w	r3, r3, #16
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <MX_GPIO_Init+0x188>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <MX_GPIO_Init+0x188>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a4f      	ldr	r2, [pc, #316]	; (8002740 <MX_GPIO_Init+0x188>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b4d      	ldr	r3, [pc, #308]	; (8002740 <MX_GPIO_Init+0x188>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002614:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <MX_GPIO_Init+0x188>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a49      	ldr	r2, [pc, #292]	; (8002740 <MX_GPIO_Init+0x188>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b47      	ldr	r3, [pc, #284]	; (8002740 <MX_GPIO_Init+0x188>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800262c:	4b44      	ldr	r3, [pc, #272]	; (8002740 <MX_GPIO_Init+0x188>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4a43      	ldr	r2, [pc, #268]	; (8002740 <MX_GPIO_Init+0x188>)
 8002632:	f043 0320 	orr.w	r3, r3, #32
 8002636:	6193      	str	r3, [r2, #24]
 8002638:	4b41      	ldr	r3, [pc, #260]	; (8002740 <MX_GPIO_Init+0x188>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002644:	2200      	movs	r2, #0
 8002646:	f64f 0170 	movw	r1, #63600	; 0xf870
 800264a:	483e      	ldr	r0, [pc, #248]	; (8002744 <MX_GPIO_Init+0x18c>)
 800264c:	f002 fb9b 	bl	8004d86 <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8002656:	483c      	ldr	r0, [pc, #240]	; (8002748 <MX_GPIO_Init+0x190>)
 8002658:	f002 fb95 	bl	8004d86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002662:	483a      	ldr	r0, [pc, #232]	; (800274c <MX_GPIO_Init+0x194>)
 8002664:	f002 fb8f 	bl	8004d86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8002668:	230f      	movs	r3, #15
 800266a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <MX_GPIO_Init+0x198>)
 800266e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002670:	2302      	movs	r3, #2
 8002672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	4619      	mov	r1, r3
 800267a:	4832      	ldr	r0, [pc, #200]	; (8002744 <MX_GPIO_Init+0x18c>)
 800267c:	f002 f9d8 	bl	8004a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002680:	f64f 0370 	movw	r3, #63600	; 0xf870
 8002684:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002686:	2301      	movs	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2302      	movs	r3, #2
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002692:	f107 0318 	add.w	r3, r7, #24
 8002696:	4619      	mov	r1, r3
 8002698:	482a      	ldr	r0, [pc, #168]	; (8002744 <MX_GPIO_Init+0x18c>)
 800269a:	f002 f9c9 	bl	8004a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800269e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2302      	movs	r3, #2
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	f107 0318 	add.w	r3, r7, #24
 80026b4:	4619      	mov	r1, r3
 80026b6:	4824      	ldr	r0, [pc, #144]	; (8002748 <MX_GPIO_Init+0x190>)
 80026b8:	f002 f9ba 	bl	8004a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80026bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ca:	2302      	movs	r3, #2
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ce:	f107 0318 	add.w	r3, r7, #24
 80026d2:	4619      	mov	r1, r3
 80026d4:	481d      	ldr	r0, [pc, #116]	; (800274c <MX_GPIO_Init+0x194>)
 80026d6:	f002 f9ab 	bl	8004a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 0318 	add.w	r3, r7, #24
 80026ee:	4619      	mov	r1, r3
 80026f0:	4815      	ldr	r0, [pc, #84]	; (8002748 <MX_GPIO_Init+0x190>)
 80026f2:	f002 f99d 	bl	8004a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2105      	movs	r1, #5
 80026fa:	2006      	movs	r0, #6
 80026fc:	f001 fad3 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002700:	2006      	movs	r0, #6
 8002702:	f001 faec 	bl	8003cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2105      	movs	r1, #5
 800270a:	2007      	movs	r0, #7
 800270c:	f001 facb 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002710:	2007      	movs	r0, #7
 8002712:	f001 fae4 	bl	8003cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2105      	movs	r1, #5
 800271a:	2008      	movs	r0, #8
 800271c:	f001 fac3 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002720:	2008      	movs	r0, #8
 8002722:	f001 fadc 	bl	8003cde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2105      	movs	r1, #5
 800272a:	2009      	movs	r0, #9
 800272c:	f001 fabb 	bl	8003ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002730:	2009      	movs	r0, #9
 8002732:	f001 fad4 	bl	8003cde <HAL_NVIC_EnableIRQ>

}
 8002736:	bf00      	nop
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	40011800 	.word	0x40011800
 8002748:	40011000 	.word	0x40011000
 800274c:	40010c00 	.word	0x40010c00
 8002750:	10310000 	.word	0x10310000

08002754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002758:	b672      	cpsid	i
}
 800275a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800275c:	e7fe      	b.n	800275c <Error_Handler+0x8>
	...

08002760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_MspInit+0x4c>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_MspInit+0x4c>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6193      	str	r3, [r2, #24]
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_MspInit+0x4c>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_MspInit+0x4c>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_MspInit+0x4c>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_MspInit+0x4c>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	210f      	movs	r1, #15
 800279a:	f06f 0001 	mvn.w	r0, #1
 800279e:	f001 fa82 	bl	8003ca6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a28      	ldr	r2, [pc, #160]	; (800286c <HAL_ADC_MspInit+0xbc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d149      	bne.n	8002864 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HAL_ADC_MspInit+0xc0>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a26      	ldr	r2, [pc, #152]	; (8002870 <HAL_ADC_MspInit+0xc0>)
 80027d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b24      	ldr	r3, [pc, #144]	; (8002870 <HAL_ADC_MspInit+0xc0>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	4b21      	ldr	r3, [pc, #132]	; (8002870 <HAL_ADC_MspInit+0xc0>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_ADC_MspInit+0xc0>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6193      	str	r3, [r2, #24]
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_ADC_MspInit+0xc0>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002800:	230f      	movs	r3, #15
 8002802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002804:	2303      	movs	r3, #3
 8002806:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0310 	add.w	r3, r7, #16
 800280c:	4619      	mov	r1, r3
 800280e:	4819      	ldr	r0, [pc, #100]	; (8002874 <HAL_ADC_MspInit+0xc4>)
 8002810:	f002 f90e 	bl	8004a30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 8002816:	4a19      	ldr	r2, [pc, #100]	; (800287c <HAL_ADC_MspInit+0xcc>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002820:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 8002828:	2280      	movs	r2, #128	; 0x80
 800282a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 800282e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002832:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 8002836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 800283e:	2220      	movs	r2, #32
 8002840:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 8002844:	2200      	movs	r2, #0
 8002846:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 800284a:	f001 fc6d 	bl	8004128 <HAL_DMA_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002854:	f7ff ff7e 	bl	8002754 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 800285c:	621a      	str	r2, [r3, #32]
 800285e:	4a06      	ldr	r2, [pc, #24]	; (8002878 <HAL_ADC_MspInit+0xc8>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40012400 	.word	0x40012400
 8002870:	40021000 	.word	0x40021000
 8002874:	40010800 	.word	0x40010800
 8002878:	200008e4 	.word	0x200008e4
 800287c:	40020008 	.word	0x40020008

08002880 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <HAL_DAC_MspInit+0x110>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d172      	bne.n	8002986 <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80028a0:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <HAL_DAC_MspInit+0x114>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4a3b      	ldr	r2, [pc, #236]	; (8002994 <HAL_DAC_MspInit+0x114>)
 80028a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028aa:	61d3      	str	r3, [r2, #28]
 80028ac:	4b39      	ldr	r3, [pc, #228]	; (8002994 <HAL_DAC_MspInit+0x114>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_DAC_MspInit+0x114>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <HAL_DAC_MspInit+0x114>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b33      	ldr	r3, [pc, #204]	; (8002994 <HAL_DAC_MspInit+0x114>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028d0:	2330      	movs	r3, #48	; 0x30
 80028d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028d4:	2303      	movs	r3, #3
 80028d6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4619      	mov	r1, r3
 80028de:	482e      	ldr	r0, [pc, #184]	; (8002998 <HAL_DAC_MspInit+0x118>)
 80028e0:	f002 f8a6 	bl	8004a30 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_DAC_MspInit+0x11c>)
 80028e6:	4a2e      	ldr	r2, [pc, #184]	; (80029a0 <HAL_DAC_MspInit+0x120>)
 80028e8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_DAC_MspInit+0x11c>)
 80028ec:	2210      	movs	r2, #16
 80028ee:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f0:	4b2a      	ldr	r3, [pc, #168]	; (800299c <HAL_DAC_MspInit+0x11c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_DAC_MspInit+0x11c>)
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_DAC_MspInit+0x11c>)
 80028fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002902:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_DAC_MspInit+0x11c>)
 8002906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290a:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 800290c:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_DAC_MspInit+0x11c>)
 800290e:	2220      	movs	r2, #32
 8002910:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_DAC_MspInit+0x11c>)
 8002914:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002918:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800291a:	4820      	ldr	r0, [pc, #128]	; (800299c <HAL_DAC_MspInit+0x11c>)
 800291c:	f001 fc04 	bl	8004128 <HAL_DMA_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8002926:	f7ff ff15 	bl	8002754 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1b      	ldr	r2, [pc, #108]	; (800299c <HAL_DAC_MspInit+0x11c>)
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_DAC_MspInit+0x11c>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_DAC_MspInit+0x128>)
 800293a:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800293c:	4b19      	ldr	r3, [pc, #100]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 800293e:	2210      	movs	r2, #16
 8002940:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 8002950:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002954:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002956:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 8002958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800295c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 8002960:	2220      	movs	r2, #32
 8002962:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 800296a:	480e      	ldr	r0, [pc, #56]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 800296c:	f001 fbdc 	bl	8004128 <HAL_DMA_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 8002976:	f7ff feed 	bl	8002754 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_DAC_MspInit+0x124>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002986:	bf00      	nop
 8002988:	3720      	adds	r7, #32
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40007400 	.word	0x40007400
 8002994:	40021000 	.word	0x40021000
 8002998:	40010800 	.word	0x40010800
 800299c:	2000093c 	.word	0x2000093c
 80029a0:	40020430 	.word	0x40020430
 80029a4:	20000980 	.word	0x20000980
 80029a8:	40020444 	.word	0x40020444

080029ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	f107 0310 	add.w	r3, r7, #16
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <HAL_I2C_MspInit+0x70>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d123      	bne.n	8002a14 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <HAL_I2C_MspInit+0x74>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_I2C_MspInit+0x74>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6193      	str	r3, [r2, #24]
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_I2C_MspInit+0x74>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029e4:	23c0      	movs	r3, #192	; 0xc0
 80029e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029e8:	2312      	movs	r3, #18
 80029ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ec:	2303      	movs	r3, #3
 80029ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	4619      	mov	r1, r3
 80029f6:	480b      	ldr	r0, [pc, #44]	; (8002a24 <HAL_I2C_MspInit+0x78>)
 80029f8:	f002 f81a 	bl	8004a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_I2C_MspInit+0x74>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_I2C_MspInit+0x74>)
 8002a02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a06:	61d3      	str	r3, [r2, #28]
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_I2C_MspInit+0x74>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a14:	bf00      	nop
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40005400 	.word	0x40005400
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40010c00 	.word	0x40010c00

08002a28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0318 	add.w	r3, r7, #24
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a22      	ldr	r2, [pc, #136]	; (8002acc <HAL_SD_MspInit+0xa4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d13c      	bne.n	8002ac2 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a52:	6153      	str	r3, [r2, #20]
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a60:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a66:	f043 0310 	orr.w	r3, r3, #16
 8002a6a:	6193      	str	r3, [r2, #24]
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a7e:	f043 0320 	orr.w	r3, r3, #32
 8002a82:	6193      	str	r3, [r2, #24]
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_SD_MspInit+0xa8>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002a90:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002a94:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9e:	f107 0318 	add.w	r3, r7, #24
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480b      	ldr	r0, [pc, #44]	; (8002ad4 <HAL_SD_MspInit+0xac>)
 8002aa6:	f001 ffc3 	bl	8004a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aaa:	2304      	movs	r3, #4
 8002aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ab6:	f107 0318 	add.w	r3, r7, #24
 8002aba:	4619      	mov	r1, r3
 8002abc:	4806      	ldr	r0, [pc, #24]	; (8002ad8 <HAL_SD_MspInit+0xb0>)
 8002abe:	f001 ffb7 	bl	8004a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3728      	adds	r7, #40	; 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40018000 	.word	0x40018000
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40011000 	.word	0x40011000
 8002ad8:	40011400 	.word	0x40011400

08002adc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <HAL_SPI_MspInit+0x148>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d157      	bne.n	8002bac <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002afc:	4b4a      	ldr	r3, [pc, #296]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	4a49      	ldr	r2, [pc, #292]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b06:	6193      	str	r3, [r2, #24]
 8002b08:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a43      	ldr	r2, [pc, #268]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	4a3d      	ldr	r2, [pc, #244]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b32:	f043 0308 	orr.w	r3, r3, #8
 8002b36:	6193      	str	r3, [r2, #24]
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	4619      	mov	r1, r3
 8002b58:	4834      	ldr	r0, [pc, #208]	; (8002c2c <HAL_SPI_MspInit+0x150>)
 8002b5a:	f001 ff69 	bl	8004a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002b5e:	2328      	movs	r3, #40	; 0x28
 8002b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	482f      	ldr	r0, [pc, #188]	; (8002c30 <HAL_SPI_MspInit+0x154>)
 8002b72:	f001 ff5d 	bl	8004a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b76:	2310      	movs	r3, #16
 8002b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	4829      	ldr	r0, [pc, #164]	; (8002c30 <HAL_SPI_MspInit+0x154>)
 8002b8a:	f001 ff51 	bl	8004a30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_SPI_MspInit+0x158>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba4:	4a23      	ldr	r2, [pc, #140]	; (8002c34 <HAL_SPI_MspInit+0x158>)
 8002ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002baa:	e036      	b.n	8002c1a <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <HAL_SPI_MspInit+0x15c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d131      	bne.n	8002c1a <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc0:	61d3      	str	r3, [r2, #28]
 8002bc2:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	4a15      	ldr	r2, [pc, #84]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6193      	str	r3, [r2, #24]
 8002bda:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <HAL_SPI_MspInit+0x14c>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002be6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	480d      	ldr	r0, [pc, #52]	; (8002c30 <HAL_SPI_MspInit+0x154>)
 8002bfc:	f001 ff18 	bl	8004a30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4806      	ldr	r0, [pc, #24]	; (8002c30 <HAL_SPI_MspInit+0x154>)
 8002c16:	f001 ff0b 	bl	8004a30 <HAL_GPIO_Init>
}
 8002c1a:	bf00      	nop
 8002c1c:	3730      	adds	r7, #48	; 0x30
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40013000 	.word	0x40013000
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40010800 	.word	0x40010800
 8002c30:	40010c00 	.word	0x40010c00
 8002c34:	40010000 	.word	0x40010000
 8002c38:	40003800 	.word	0x40003800

08002c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	61d3      	str	r3, [r2, #28]
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c66:	e032      	b.n	8002cce <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_TIM_Base_MspInit+0xa0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d114      	bne.n	8002c9c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	61d3      	str	r3, [r2, #28]
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	201d      	movs	r0, #29
 8002c90:	f001 f809 	bl	8003ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c94:	201d      	movs	r0, #29
 8002c96:	f001 f822 	bl	8003cde <HAL_NVIC_EnableIRQ>
}
 8002c9a:	e018      	b.n	8002cce <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_TIM_Base_MspInit+0xa4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d113      	bne.n	8002cce <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a0b      	ldr	r2, [pc, #44]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	61d3      	str	r3, [r2, #28]
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2105      	movs	r1, #5
 8002cc2:	201e      	movs	r0, #30
 8002cc4:	f000 ffef 	bl	8003ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cc8:	201e      	movs	r0, #30
 8002cca:	f001 f808 	bl	8003cde <HAL_NVIC_EnableIRQ>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b088      	sub	sp, #32
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 0310 	add.w	r3, r7, #16
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a33      	ldr	r2, [pc, #204]	; (8002dcc <HAL_UART_MspInit+0xe8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d15f      	bne.n	8002dc4 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1c:	4b2c      	ldr	r3, [pc, #176]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d22:	f043 0304 	orr.w	r3, r3, #4
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <HAL_UART_MspInit+0xec>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d42:	f107 0310 	add.w	r3, r7, #16
 8002d46:	4619      	mov	r1, r3
 8002d48:	4822      	ldr	r0, [pc, #136]	; (8002dd4 <HAL_UART_MspInit+0xf0>)
 8002d4a:	f001 fe71 	bl	8004a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0310 	add.w	r3, r7, #16
 8002d60:	4619      	mov	r1, r3
 8002d62:	481c      	ldr	r0, [pc, #112]	; (8002dd4 <HAL_UART_MspInit+0xf0>)
 8002d64:	f001 fe64 	bl	8004a30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_UART_MspInit+0xf8>)
 8002d6c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d70:	2210      	movs	r2, #16
 8002d72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7a:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d98:	480f      	ldr	r0, [pc, #60]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002d9a:	f001 f9c5 	bl	8004128 <HAL_DMA_Init>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002da4:	f7ff fcd6 	bl	8002754 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <HAL_UART_MspInit+0xf4>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002db4:	2200      	movs	r2, #0
 8002db6:	2105      	movs	r1, #5
 8002db8:	2025      	movs	r0, #37	; 0x25
 8002dba:	f000 ff74 	bl	8003ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dbe:	2025      	movs	r0, #37	; 0x25
 8002dc0:	f000 ff8d 	bl	8003cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002dc4:	bf00      	nop
 8002dc6:	3720      	adds	r7, #32
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40010800 	.word	0x40010800
 8002dd8:	20000c6c 	.word	0x20000c6c
 8002ddc:	40020044 	.word	0x40020044

08002de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <NMI_Handler+0x4>

08002de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <HardFault_Handler+0x4>

08002dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <MemManage_Handler+0x4>

08002df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df6:	e7fe      	b.n	8002df6 <BusFault_Handler+0x4>

08002df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <UsageFault_Handler+0x4>

08002dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e0e:	f000 f9a7 	bl	8003160 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e12:	f00f fed3 	bl	8012bbc <xTaskGetSchedulerState>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d001      	beq.n	8002e20 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e1c:	f010 f9ac 	bl	8013178 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f001 ffc5 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002e36:	2002      	movs	r0, #2
 8002e38:	f001 ffbe 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002e44:	2004      	movs	r0, #4
 8002e46:	f001 ffb7 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002e52:	2008      	movs	r0, #8
 8002e54:	f001 ffb0 	bl	8004db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <DMA1_Channel1_IRQHandler+0x10>)
 8002e62:	f001 fb7b 	bl	800455c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200008e4 	.word	0x200008e4

08002e70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e74:	4802      	ldr	r0, [pc, #8]	; (8002e80 <DMA1_Channel4_IRQHandler+0x10>)
 8002e76:	f001 fb71 	bl	800455c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000c6c 	.word	0x20000c6c

08002e84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002e88:	4802      	ldr	r0, [pc, #8]	; (8002e94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002e8a:	f002 fa16 	bl	80052ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000228c 	.word	0x2000228c

08002e98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <TIM3_IRQHandler+0x10>)
 8002e9e:	f006 f903 	bl	80090a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000b94 	.word	0x20000b94

08002eac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002eb0:	4802      	ldr	r0, [pc, #8]	; (8002ebc <TIM4_IRQHandler+0x10>)
 8002eb2:	f006 f8f9 	bl	80090a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000bdc 	.word	0x20000bdc

08002ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <USART1_IRQHandler+0x10>)
 8002ec6:	f006 fe2b 	bl	8009b20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000c24 	.word	0x20000c24

08002ed4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <DMA2_Channel3_IRQHandler+0x10>)
 8002eda:	f001 fb3f 	bl	800455c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000093c 	.word	0x2000093c

08002ee8 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <DMA2_Channel4_5_IRQHandler+0x10>)
 8002eee:	f001 fb35 	bl	800455c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000980 	.word	0x20000980

08002efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	return 1;
 8002f00:	2301      	movs	r3, #1
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <_kill>:

int _kill(int pid, int sig)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f14:	f010 fd5c 	bl	80139d0 <__errno>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2216      	movs	r2, #22
 8002f1c:	601a      	str	r2, [r3, #0]
	return -1;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <_exit>:

void _exit (int status)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f32:	f04f 31ff 	mov.w	r1, #4294967295
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffe7 	bl	8002f0a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f3c:	e7fe      	b.n	8002f3c <_exit+0x12>

08002f3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	e00a      	b.n	8002f66 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f50:	f3af 8000 	nop.w
 8002f54:	4601      	mov	r1, r0
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	60ba      	str	r2, [r7, #8]
 8002f5c:	b2ca      	uxtb	r2, r1
 8002f5e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	3301      	adds	r3, #1
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	dbf0      	blt.n	8002f50 <_read+0x12>
	}

return len;
 8002f6e:	687b      	ldr	r3, [r7, #4]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e009      	b.n	8002f9e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	60ba      	str	r2, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	dbf1      	blt.n	8002f8a <_write+0x12>
	}
	return len;
 8002fa6:	687b      	ldr	r3, [r7, #4]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_close>:

int _close(int file)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	return -1;
 8002fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fd6:	605a      	str	r2, [r3, #4]
	return 0;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <_isatty>:

int _isatty(int file)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	return 1;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
	return 0;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003018:	4a14      	ldr	r2, [pc, #80]	; (800306c <_sbrk+0x5c>)
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <_sbrk+0x60>)
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <_sbrk+0x64>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <_sbrk+0x64>)
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <_sbrk+0x68>)
 8003030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003032:	4b10      	ldr	r3, [pc, #64]	; (8003074 <_sbrk+0x64>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	429a      	cmp	r2, r3
 800303e:	d207      	bcs.n	8003050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003040:	f010 fcc6 	bl	80139d0 <__errno>
 8003044:	4603      	mov	r3, r0
 8003046:	220c      	movs	r2, #12
 8003048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
 800304e:	e009      	b.n	8003064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <_sbrk+0x64>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	4a05      	ldr	r2, [pc, #20]	; (8003074 <_sbrk+0x64>)
 8003060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20010000 	.word	0x20010000
 8003070:	00000400 	.word	0x00000400
 8003074:	20001c70 	.word	0x20001c70
 8003078:	200025a8 	.word	0x200025a8

0800307c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003088:	f7ff fff8 	bl	800307c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800308c:	480b      	ldr	r0, [pc, #44]	; (80030bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800308e:	490c      	ldr	r1, [pc, #48]	; (80030c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003090:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003094:	e002      	b.n	800309c <LoopCopyDataInit>

08003096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800309a:	3304      	adds	r3, #4

0800309c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800309c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800309e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a0:	d3f9      	bcc.n	8003096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030a4:	4c09      	ldr	r4, [pc, #36]	; (80030cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030a8:	e001      	b.n	80030ae <LoopFillZerobss>

080030aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ac:	3204      	adds	r2, #4

080030ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b0:	d3fb      	bcc.n	80030aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030b2:	f010 fd89 	bl	8013bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030b6:	f7fe fea5 	bl	8001e04 <main>
  bx lr
 80030ba:	4770      	bx	lr
  ldr r0, =_sdata
 80030bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030c0:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 80030c4:	08030074 	.word	0x08030074
  ldr r2, =_sbss
 80030c8:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 80030cc:	200025a8 	.word	0x200025a8

080030d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030d0:	e7fe      	b.n	80030d0 <ADC1_2_IRQHandler>
	...

080030d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x28>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x28>)
 80030de:	f043 0310 	orr.w	r3, r3, #16
 80030e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 fdd3 	bl	8003c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	200f      	movs	r0, #15
 80030ec:	f000 f808 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7ff fb36 	bl	8002760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000

08003100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x54>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_InitTick+0x58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fdeb 	bl	8003cfa <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00e      	b.n	800314c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d80a      	bhi.n	800314a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	2200      	movs	r2, #0
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	f000 fdb3 	bl	8003ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_InitTick+0x5c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000084 	.word	0x20000084
 8003158:	2000008c 	.word	0x2000008c
 800315c:	20000088 	.word	0x20000088

08003160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <HAL_IncTick+0x1c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_IncTick+0x20>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a03      	ldr	r2, [pc, #12]	; (8003180 <HAL_IncTick+0x20>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	2000008c 	.word	0x2000008c
 8003180:	20001c74 	.word	0x20001c74

08003184 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;
 8003188:	4b02      	ldr	r3, [pc, #8]	; (8003194 <HAL_GetTick+0x10>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	20001c74 	.word	0x20001c74

08003198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a0:	f7ff fff0 	bl	8003184 <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d005      	beq.n	80031be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_Delay+0x44>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031be:	bf00      	nop
 80031c0:	f7ff ffe0 	bl	8003184 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d8f7      	bhi.n	80031c0 <HAL_Delay+0x28>
  {
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	2000008c 	.word	0x2000008c

080031e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0ce      	b.n	80033a0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	d109      	bne.n	8003224 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fac6 	bl	80027b0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fb11 	bl	800384c <ADC_ConversionStop_Disable>
 800322a:	4603      	mov	r3, r0
 800322c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b00      	cmp	r3, #0
 8003238:	f040 80a9 	bne.w	800338e <HAL_ADC_Init+0x1ae>
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 80a5 	bne.w	800338e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800324c:	f023 0302 	bic.w	r3, r3, #2
 8003250:	f043 0202 	orr.w	r2, r3, #2
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4951      	ldr	r1, [pc, #324]	; (80033a8 <HAL_ADC_Init+0x1c8>)
 8003262:	428b      	cmp	r3, r1
 8003264:	d10a      	bne.n	800327c <HAL_ADC_Init+0x9c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800326e:	d002      	beq.n	8003276 <HAL_ADC_Init+0x96>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	e004      	b.n	8003280 <HAL_ADC_Init+0xa0>
 8003276:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800327a:	e001      	b.n	8003280 <HAL_ADC_Init+0xa0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003280:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7b1b      	ldrb	r3, [r3, #12]
 8003286:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003288:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4313      	orrs	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003298:	d003      	beq.n	80032a2 <HAL_ADC_Init+0xc2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_ADC_Init+0xc8>
 80032a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032a6:	e000      	b.n	80032aa <HAL_ADC_Init+0xca>
 80032a8:	2300      	movs	r3, #0
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7d1b      	ldrb	r3, [r3, #20]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d119      	bne.n	80032ec <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7b1b      	ldrb	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d109      	bne.n	80032d4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	035a      	lsls	r2, r3, #13
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	e00b      	b.n	80032ec <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_ADC_Init+0x1cc>)
 8003308:	4013      	ands	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	430b      	orrs	r3, r1
 8003312:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d003      	beq.n	8003326 <HAL_ADC_Init+0x146>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d104      	bne.n	8003330 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	3b01      	subs	r3, #1
 800332c:	051b      	lsls	r3, r3, #20
 800332e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	430a      	orrs	r2, r1
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_ADC_Init+0x1d0>)
 800334c:	4013      	ands	r3, r2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	429a      	cmp	r2, r3
 8003352:	d10b      	bne.n	800336c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800336a:	e018      	b.n	800339e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	f023 0312 	bic.w	r3, r3, #18
 8003374:	f043 0210 	orr.w	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800338c:	e007      	b.n	800339e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40013c00 	.word	0x40013c00
 80033ac:	ffe1f7fd 	.word	0xffe1f7fd
 80033b0:	ff1f0efe 	.word	0xff1f0efe

080033b4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a64      	ldr	r2, [pc, #400]	; (800355c <HAL_ADC_Start_DMA+0x1a8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_Start_DMA+0x24>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a63      	ldr	r2, [pc, #396]	; (8003560 <HAL_ADC_Start_DMA+0x1ac>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d106      	bne.n	80033e6 <HAL_ADC_Start_DMA+0x32>
 80033d8:	4b60      	ldr	r3, [pc, #384]	; (800355c <HAL_ADC_Start_DMA+0x1a8>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 80b3 	bne.w	800354c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_Start_DMA+0x40>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e0ae      	b.n	8003552 <HAL_ADC_Start_DMA+0x19e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 f9cb 	bl	8003798 <ADC_Enable>
 8003402:	4603      	mov	r3, r0
 8003404:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 809a 	bne.w	8003542 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_ADC_Start_DMA+0x1ac>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d105      	bne.n	8003438 <HAL_ADC_Start_DMA+0x84>
 800342c:	4b4b      	ldr	r3, [pc, #300]	; (800355c <HAL_ADC_Start_DMA+0x1a8>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d115      	bne.n	8003464 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344e:	2b00      	cmp	r3, #0
 8003450:	d026      	beq.n	80034a0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800345a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003462:	e01d      	b.n	80034a0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a39      	ldr	r2, [pc, #228]	; (800355c <HAL_ADC_Start_DMA+0x1a8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_ADC_Start_DMA+0xd0>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a38      	ldr	r2, [pc, #224]	; (8003560 <HAL_ADC_Start_DMA+0x1ac>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <HAL_ADC_Start_DMA+0xec>
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <HAL_ADC_Start_DMA+0x1a8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003498:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	f023 0206 	bic.w	r2, r3, #6
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80034b8:	e002      	b.n	80034c0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a25      	ldr	r2, [pc, #148]	; (8003564 <HAL_ADC_Start_DMA+0x1b0>)
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <HAL_ADC_Start_DMA+0x1b4>)
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a23      	ldr	r2, [pc, #140]	; (800356c <HAL_ADC_Start_DMA+0x1b8>)
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0202 	mvn.w	r2, #2
 80034e8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a18      	ldr	r0, [r3, #32]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	334c      	adds	r3, #76	; 0x4c
 8003504:	4619      	mov	r1, r3
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f000 fe83 	bl	8004214 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003518:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800351c:	d108      	bne.n	8003530 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800352c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800352e:	e00f      	b.n	8003550 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800353e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003540:	e006      	b.n	8003550 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800354a:	e001      	b.n	8003550 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003550:	7dfb      	ldrb	r3, [r7, #23]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40012400 	.word	0x40012400
 8003560:	40012800 	.word	0x40012800
 8003564:	080038cf 	.word	0x080038cf
 8003568:	0800394b 	.word	0x0800394b
 800356c:	08003967 	.word	0x08003967

08003570 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x20>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e0dc      	b.n	8003782 <HAL_ADC_ConfigChannel+0x1da>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b06      	cmp	r3, #6
 80035d6:	d81c      	bhi.n	8003612 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	3b05      	subs	r3, #5
 80035ea:	221f      	movs	r2, #31
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	4019      	ands	r1, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b05      	subs	r3, #5
 8003604:	fa00 f203 	lsl.w	r2, r0, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	635a      	str	r2, [r3, #52]	; 0x34
 8003610:	e03c      	b.n	800368c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d81c      	bhi.n	8003654 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	3b23      	subs	r3, #35	; 0x23
 800362c:	221f      	movs	r2, #31
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	4019      	ands	r1, r3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	3b23      	subs	r3, #35	; 0x23
 8003646:	fa00 f203 	lsl.w	r2, r0, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
 8003652:	e01b      	b.n	800368c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b41      	subs	r3, #65	; 0x41
 8003666:	221f      	movs	r2, #31
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	4019      	ands	r1, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	3b41      	subs	r3, #65	; 0x41
 8003680:	fa00 f203 	lsl.w	r2, r0, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b09      	cmp	r3, #9
 8003692:	d91c      	bls.n	80036ce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68d9      	ldr	r1, [r3, #12]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	3b1e      	subs	r3, #30
 80036a6:	2207      	movs	r2, #7
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	4019      	ands	r1, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6898      	ldr	r0, [r3, #8]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	3b1e      	subs	r3, #30
 80036c0:	fa00 f203 	lsl.w	r2, r0, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	e019      	b.n	8003702 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6919      	ldr	r1, [r3, #16]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	2207      	movs	r2, #7
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	4019      	ands	r1, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6898      	ldr	r0, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	fa00 f203 	lsl.w	r2, r0, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b10      	cmp	r3, #16
 8003708:	d003      	beq.n	8003712 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800370e:	2b11      	cmp	r3, #17
 8003710:	d132      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1d      	ldr	r2, [pc, #116]	; (800378c <HAL_ADC_ConfigChannel+0x1e4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d125      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d126      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003738:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b10      	cmp	r3, #16
 8003740:	d11a      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_ADC_ConfigChannel+0x1e8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a13      	ldr	r2, [pc, #76]	; (8003794 <HAL_ADC_ConfigChannel+0x1ec>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	0c9a      	lsrs	r2, r3, #18
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003758:	e002      	b.n	8003760 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3b01      	subs	r3, #1
 800375e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f9      	bne.n	800375a <HAL_ADC_ConfigChannel+0x1b2>
 8003766:	e007      	b.n	8003778 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012400 	.word	0x40012400
 8003790:	20000084 	.word	0x20000084
 8003794:	431bde83 	.word	0x431bde83

08003798 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d040      	beq.n	8003838 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037c6:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <ADC_Enable+0xac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <ADC_Enable+0xb0>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	0c9b      	lsrs	r3, r3, #18
 80037d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037d4:	e002      	b.n	80037dc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f9      	bne.n	80037d6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037e2:	f7ff fccf 	bl	8003184 <HAL_GetTick>
 80037e6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80037e8:	e01f      	b.n	800382a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037ea:	f7ff fccb 	bl	8003184 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d918      	bls.n	800382a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d011      	beq.n	800382a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	f043 0210 	orr.w	r2, r3, #16
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e007      	b.n	800383a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d1d8      	bne.n	80037ea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000084 	.word	0x20000084
 8003848:	431bde83 	.word	0x431bde83

0800384c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b01      	cmp	r3, #1
 8003864:	d12e      	bne.n	80038c4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003876:	f7ff fc85 	bl	8003184 <HAL_GetTick>
 800387a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800387c:	e01b      	b.n	80038b6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800387e:	f7ff fc81 	bl	8003184 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d914      	bls.n	80038b6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10d      	bne.n	80038b6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f043 0210 	orr.w	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f043 0201 	orr.w	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e007      	b.n	80038c6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d0dc      	beq.n	800387e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d127      	bne.n	8003938 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80038fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003902:	d115      	bne.n	8003930 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff fe1d 	bl	8003570 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003936:	e004      	b.n	8003942 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff fe12 	bl	8003582 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	f043 0204 	orr.w	r2, r3, #4
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f7ff fe01 	bl	8003594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_ADCEx_Calibration_Start+0x1e>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e097      	b.n	8003aea <HAL_ADCEx_Calibration_Start+0x14e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff42 	bl	800384c <ADC_ConversionStop_Disable>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fee3 	bl	8003798 <ADC_Enable>
 80039d2:	4603      	mov	r3, r0
 80039d4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 8081 	bne.w	8003ae0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039e6:	f023 0302 	bic.w	r3, r3, #2
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80039f2:	4b40      	ldr	r3, [pc, #256]	; (8003af4 <HAL_ADCEx_Calibration_Start+0x158>)
 80039f4:	681c      	ldr	r4, [r3, #0]
 80039f6:	2002      	movs	r0, #2
 80039f8:	f003 fd58 	bl	80074ac <HAL_RCCEx_GetPeriphCLKFreq>
 80039fc:	4603      	mov	r3, r0
 80039fe:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003a02:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003a04:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003a06:	e002      	b.n	8003a0e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1f9      	bne.n	8003a08 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0208 	orr.w	r2, r2, #8
 8003a22:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a24:	f7ff fbae 	bl	8003184 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a2a:	e01b      	b.n	8003a64 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a2c:	f7ff fbaa 	bl	8003184 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b0a      	cmp	r3, #10
 8003a38:	d914      	bls.n	8003a64 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00d      	beq.n	8003a64 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	f023 0312 	bic.w	r3, r3, #18
 8003a50:	f043 0210 	orr.w	r2, r3, #16
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e042      	b.n	8003aea <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1dc      	bne.n	8003a2c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0204 	orr.w	r2, r2, #4
 8003a80:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003a82:	f7ff fb7f 	bl	8003184 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a88:	e01b      	b.n	8003ac2 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003a8a:	f7ff fb7b 	bl	8003184 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b0a      	cmp	r3, #10
 8003a96:	d914      	bls.n	8003ac2 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	f023 0312 	bic.w	r3, r3, #18
 8003aae:	f043 0210 	orr.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e013      	b.n	8003aea <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1dc      	bne.n	8003a8a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	f023 0303 	bic.w	r3, r3, #3
 8003ad8:	f043 0201 	orr.w	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000084 	.word	0x20000084

08003af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2a:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4906      	ldr	r1, [pc, #24]	; (8003b90 <__NVIC_EnableIRQ+0x34>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	e000e100 	.word	0xe000e100

08003b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	6039      	str	r1, [r7, #0]
 8003b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db0a      	blt.n	8003bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	490c      	ldr	r1, [pc, #48]	; (8003be0 <__NVIC_SetPriority+0x4c>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bbc:	e00a      	b.n	8003bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4908      	ldr	r1, [pc, #32]	; (8003be4 <__NVIC_SetPriority+0x50>)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	0112      	lsls	r2, r2, #4
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	761a      	strb	r2, [r3, #24]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	e000e100 	.word	0xe000e100
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f1c3 0307 	rsb	r3, r3, #7
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf28      	it	cs
 8003c06:	2304      	movcs	r3, #4
 8003c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d902      	bls.n	8003c18 <NVIC_EncodePriority+0x30>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3b03      	subs	r3, #3
 8003c16:	e000      	b.n	8003c1a <NVIC_EncodePriority+0x32>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	43d9      	mvns	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	4313      	orrs	r3, r2
         );
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3724      	adds	r7, #36	; 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c5c:	d301      	bcc.n	8003c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e00f      	b.n	8003c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <SysTick_Config+0x40>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c6a:	210f      	movs	r1, #15
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	f7ff ff90 	bl	8003b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <SysTick_Config+0x40>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <SysTick_Config+0x40>)
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000e010 	.word	0xe000e010

08003c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff2d 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb8:	f7ff ff42 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff ff90 	bl	8003be8 <NVIC_EncodePriority>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff5f 	bl	8003b94 <__NVIC_SetPriority>
}
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff35 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ffa2 	bl	8003c4c <SysTick_Config>
 8003d08:	4603      	mov	r3, r0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e014      	b.n	8003d4e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	791b      	ldrb	r3, [r3, #4]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fe fda3 	bl	8002880 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e092      	b.n	8003e96 <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	795b      	ldrb	r3, [r3, #5]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_DAC_Start_DMA+0x24>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e08c      	b.n	8003e96 <HAL_DAC_Start_DMA+0x13e>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2202      	movs	r2, #2
 8003d86:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d129      	bne.n	8003de2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4a43      	ldr	r2, [pc, #268]	; (8003ea0 <HAL_DAC_Start_DMA+0x148>)
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4a42      	ldr	r2, [pc, #264]	; (8003ea4 <HAL_DAC_Start_DMA+0x14c>)
 8003d9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4a41      	ldr	r2, [pc, #260]	; (8003ea8 <HAL_DAC_Start_DMA+0x150>)
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003db4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_DAC_Start_DMA+0x6c>
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d005      	beq.n	8003dce <HAL_DAC_Start_DMA+0x76>
 8003dc2:	e009      	b.n	8003dd8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	613b      	str	r3, [r7, #16]
        break;
 8003dcc:	e033      	b.n	8003e36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	613b      	str	r3, [r7, #16]
        break;
 8003dd6:	e02e      	b.n	8003e36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3310      	adds	r3, #16
 8003dde:	613b      	str	r3, [r7, #16]
        break;
 8003de0:	e029      	b.n	8003e36 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	4a31      	ldr	r2, [pc, #196]	; (8003eac <HAL_DAC_Start_DMA+0x154>)
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4a30      	ldr	r2, [pc, #192]	; (8003eb0 <HAL_DAC_Start_DMA+0x158>)
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <HAL_DAC_Start_DMA+0x15c>)
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_DAC_Start_DMA+0xc0>
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d005      	beq.n	8003e22 <HAL_DAC_Start_DMA+0xca>
 8003e16:	e009      	b.n	8003e2c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3314      	adds	r3, #20
 8003e1e:	613b      	str	r3, [r7, #16]
        break;
 8003e20:	e009      	b.n	8003e36 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3318      	adds	r3, #24
 8003e28:	613b      	str	r3, [r7, #16]
        break;
 8003e2a:	e004      	b.n	8003e36 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	331c      	adds	r3, #28
 8003e32:	613b      	str	r3, [r7, #16]
        break;
 8003e34:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6898      	ldr	r0, [r3, #8]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	f000 f9e5 	bl	8004214 <HAL_DMA_Start_IT>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	75fb      	strb	r3, [r7, #23]
 8003e4e:	e008      	b.n	8003e62 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68d8      	ldr	r0, [r3, #12]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	f000 f9db 	bl	8004214 <HAL_DMA_Start_IT>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10c      	bne.n	8003e88 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e005      	b.n	8003e94 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f043 0204 	orr.w	r2, r3, #4
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	08004019 	.word	0x08004019
 8003ea4:	0800403b 	.word	0x0800403b
 8003ea8:	08004057 	.word	0x08004057
 8003eac:	080040bb 	.word	0x080040bb
 8003eb0:	080040dd 	.word	0x080040dd
 8003eb4:	080040f9 	.word	0x080040f9

08003eb8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e02e      	b.n	8003f2a <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6819      	ldr	r1, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43da      	mvns	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	400a      	ands	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d105      	bne.n	8003f18 <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f9df 	bl	80042d4 <HAL_DMA_Abort>
 8003f16:	e004      	b.n	8003f22 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f9d9 	bl	80042d4 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_DAC_ConfigChannel+0x1c>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e042      	b.n	800400e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	795b      	ldrb	r3, [r3, #5]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_DAC_ConfigChannel+0x2c>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e03c      	b.n	800400e <HAL_DAC_ConfigChannel+0xa6>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	22c0      	movs	r2, #192	; 0xc0
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800400c:	7ffb      	ldrb	r3, [r7, #31]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr

08004018 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff ff83 	bl	8003f32 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2201      	movs	r2, #1
 8004030:	711a      	strb	r2, [r3, #4]
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff ff7b 	bl	8003f44 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800404e:	bf00      	nop
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ff70 	bl	8003f56 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	711a      	strb	r2, [r3, #4]
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	bc80      	pop	{r7}
 8004094:	4770      	bx	lr

08004096 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff ffdb 	bl	8004084 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	711a      	strb	r2, [r3, #4]
}
 80040d4:	bf00      	nop
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff ffd3 	bl	8004096 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f043 0204 	orr.w	r2, r3, #4
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff ffc8 	bl	80040a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	711a      	strb	r2, [r3, #4]
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e059      	b.n	80041f2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <HAL_DMA_Init+0xd4>)
 8004146:	429a      	cmp	r2, r3
 8004148:	d80f      	bhi.n	800416a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <HAL_DMA_Init+0xd8>)
 8004152:	4413      	add	r3, r2
 8004154:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <HAL_DMA_Init+0xdc>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	009a      	lsls	r2, r3, #2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a28      	ldr	r2, [pc, #160]	; (8004208 <HAL_DMA_Init+0xe0>)
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c
 8004168:	e00e      	b.n	8004188 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	4b26      	ldr	r3, [pc, #152]	; (800420c <HAL_DMA_Init+0xe4>)
 8004172:	4413      	add	r3, r2
 8004174:	4a23      	ldr	r2, [pc, #140]	; (8004204 <HAL_DMA_Init+0xdc>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	009a      	lsls	r2, r3, #2
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a22      	ldr	r2, [pc, #136]	; (8004210 <HAL_DMA_Init+0xe8>)
 8004186:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800419e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr
 80041fc:	40020407 	.word	0x40020407
 8004200:	bffdfff8 	.word	0xbffdfff8
 8004204:	cccccccd 	.word	0xcccccccd
 8004208:	40020000 	.word	0x40020000
 800420c:	bffdfbf8 	.word	0xbffdfbf8
 8004210:	40020400 	.word	0x40020400

08004214 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_DMA_Start_IT+0x20>
 8004230:	2302      	movs	r3, #2
 8004232:	e04b      	b.n	80042cc <HAL_DMA_Start_IT+0xb8>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	d13a      	bne.n	80042be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fbb1 	bl	80049d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 020e 	orr.w	r2, r2, #14
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e00f      	b.n	80042ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 020a 	orr.w	r2, r2, #10
 80042aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	e005      	b.n	80042ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
 80042c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2204      	movs	r2, #4
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e020      	b.n	8004340 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 020e 	bic.w	r2, r2, #14
 800430c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0201 	bic.w	r2, r2, #1
 800431c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr
	...

0800434c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d005      	beq.n	8004370 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2204      	movs	r2, #4
 8004368:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e0d6      	b.n	800451e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 020e 	bic.w	r2, r2, #14
 800437e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	4b64      	ldr	r3, [pc, #400]	; (8004528 <HAL_DMA_Abort_IT+0x1dc>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d958      	bls.n	800444e <HAL_DMA_Abort_IT+0x102>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a62      	ldr	r2, [pc, #392]	; (800452c <HAL_DMA_Abort_IT+0x1e0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d04f      	beq.n	8004446 <HAL_DMA_Abort_IT+0xfa>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a61      	ldr	r2, [pc, #388]	; (8004530 <HAL_DMA_Abort_IT+0x1e4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d048      	beq.n	8004442 <HAL_DMA_Abort_IT+0xf6>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5f      	ldr	r2, [pc, #380]	; (8004534 <HAL_DMA_Abort_IT+0x1e8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d040      	beq.n	800443c <HAL_DMA_Abort_IT+0xf0>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5e      	ldr	r2, [pc, #376]	; (8004538 <HAL_DMA_Abort_IT+0x1ec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d038      	beq.n	8004436 <HAL_DMA_Abort_IT+0xea>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5c      	ldr	r2, [pc, #368]	; (800453c <HAL_DMA_Abort_IT+0x1f0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d030      	beq.n	8004430 <HAL_DMA_Abort_IT+0xe4>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5b      	ldr	r2, [pc, #364]	; (8004540 <HAL_DMA_Abort_IT+0x1f4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d028      	beq.n	800442a <HAL_DMA_Abort_IT+0xde>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_DMA_Abort_IT+0x1dc>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d020      	beq.n	8004424 <HAL_DMA_Abort_IT+0xd8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a57      	ldr	r2, [pc, #348]	; (8004544 <HAL_DMA_Abort_IT+0x1f8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d019      	beq.n	8004420 <HAL_DMA_Abort_IT+0xd4>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a55      	ldr	r2, [pc, #340]	; (8004548 <HAL_DMA_Abort_IT+0x1fc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d012      	beq.n	800441c <HAL_DMA_Abort_IT+0xd0>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a54      	ldr	r2, [pc, #336]	; (800454c <HAL_DMA_Abort_IT+0x200>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00a      	beq.n	8004416 <HAL_DMA_Abort_IT+0xca>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a52      	ldr	r2, [pc, #328]	; (8004550 <HAL_DMA_Abort_IT+0x204>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d102      	bne.n	8004410 <HAL_DMA_Abort_IT+0xc4>
 800440a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800440e:	e01b      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004414:	e018      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800441a:	e015      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 800441c:	2310      	movs	r3, #16
 800441e:	e013      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004420:	2301      	movs	r3, #1
 8004422:	e011      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004428:	e00e      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 800442a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800442e:	e00b      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004430:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004434:	e008      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800443a:	e005      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 800443c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004440:	e002      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004442:	2310      	movs	r3, #16
 8004444:	e000      	b.n	8004448 <HAL_DMA_Abort_IT+0xfc>
 8004446:	2301      	movs	r3, #1
 8004448:	4a42      	ldr	r2, [pc, #264]	; (8004554 <HAL_DMA_Abort_IT+0x208>)
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e057      	b.n	80044fe <HAL_DMA_Abort_IT+0x1b2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a36      	ldr	r2, [pc, #216]	; (800452c <HAL_DMA_Abort_IT+0x1e0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d04f      	beq.n	80044f8 <HAL_DMA_Abort_IT+0x1ac>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a34      	ldr	r2, [pc, #208]	; (8004530 <HAL_DMA_Abort_IT+0x1e4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d048      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x1a8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a33      	ldr	r2, [pc, #204]	; (8004534 <HAL_DMA_Abort_IT+0x1e8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d040      	beq.n	80044ee <HAL_DMA_Abort_IT+0x1a2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a31      	ldr	r2, [pc, #196]	; (8004538 <HAL_DMA_Abort_IT+0x1ec>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d038      	beq.n	80044e8 <HAL_DMA_Abort_IT+0x19c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a30      	ldr	r2, [pc, #192]	; (800453c <HAL_DMA_Abort_IT+0x1f0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d030      	beq.n	80044e2 <HAL_DMA_Abort_IT+0x196>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <HAL_DMA_Abort_IT+0x1f4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d028      	beq.n	80044dc <HAL_DMA_Abort_IT+0x190>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_DMA_Abort_IT+0x1dc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d020      	beq.n	80044d6 <HAL_DMA_Abort_IT+0x18a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2a      	ldr	r2, [pc, #168]	; (8004544 <HAL_DMA_Abort_IT+0x1f8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d019      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x186>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_DMA_Abort_IT+0x1fc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d012      	beq.n	80044ce <HAL_DMA_Abort_IT+0x182>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a27      	ldr	r2, [pc, #156]	; (800454c <HAL_DMA_Abort_IT+0x200>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00a      	beq.n	80044c8 <HAL_DMA_Abort_IT+0x17c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a26      	ldr	r2, [pc, #152]	; (8004550 <HAL_DMA_Abort_IT+0x204>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d102      	bne.n	80044c2 <HAL_DMA_Abort_IT+0x176>
 80044bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c0:	e01b      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c6:	e018      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044cc:	e015      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044ce:	2310      	movs	r3, #16
 80044d0:	e013      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e011      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044da:	e00e      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044e0:	e00b      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e6:	e008      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ec:	e005      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044f2:	e002      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044f4:	2310      	movs	r3, #16
 80044f6:	e000      	b.n	80044fa <HAL_DMA_Abort_IT+0x1ae>
 80044f8:	2301      	movs	r3, #1
 80044fa:	4a17      	ldr	r2, [pc, #92]	; (8004558 <HAL_DMA_Abort_IT+0x20c>)
 80044fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
    } 
  }
  return status;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40020080 	.word	0x40020080
 800452c:	40020008 	.word	0x40020008
 8004530:	4002001c 	.word	0x4002001c
 8004534:	40020030 	.word	0x40020030
 8004538:	40020044 	.word	0x40020044
 800453c:	40020058 	.word	0x40020058
 8004540:	4002006c 	.word	0x4002006c
 8004544:	40020408 	.word	0x40020408
 8004548:	4002041c 	.word	0x4002041c
 800454c:	40020430 	.word	0x40020430
 8004550:	40020444 	.word	0x40020444
 8004554:	40020400 	.word	0x40020400
 8004558:	40020000 	.word	0x40020000

0800455c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	2204      	movs	r2, #4
 800457a:	409a      	lsls	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80f1 	beq.w	8004768 <HAL_DMA_IRQHandler+0x20c>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80eb 	beq.w	8004768 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <HAL_DMA_IRQHandler+0x1d8>)
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d958      	bls.n	800466e <HAL_DMA_IRQHandler+0x112>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a5d      	ldr	r2, [pc, #372]	; (8004738 <HAL_DMA_IRQHandler+0x1dc>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d04f      	beq.n	8004666 <HAL_DMA_IRQHandler+0x10a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a5c      	ldr	r2, [pc, #368]	; (800473c <HAL_DMA_IRQHandler+0x1e0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d048      	beq.n	8004662 <HAL_DMA_IRQHandler+0x106>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a5a      	ldr	r2, [pc, #360]	; (8004740 <HAL_DMA_IRQHandler+0x1e4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d040      	beq.n	800465c <HAL_DMA_IRQHandler+0x100>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a59      	ldr	r2, [pc, #356]	; (8004744 <HAL_DMA_IRQHandler+0x1e8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d038      	beq.n	8004656 <HAL_DMA_IRQHandler+0xfa>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a57      	ldr	r2, [pc, #348]	; (8004748 <HAL_DMA_IRQHandler+0x1ec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d030      	beq.n	8004650 <HAL_DMA_IRQHandler+0xf4>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a56      	ldr	r2, [pc, #344]	; (800474c <HAL_DMA_IRQHandler+0x1f0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d028      	beq.n	800464a <HAL_DMA_IRQHandler+0xee>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a4d      	ldr	r2, [pc, #308]	; (8004734 <HAL_DMA_IRQHandler+0x1d8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d020      	beq.n	8004644 <HAL_DMA_IRQHandler+0xe8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_DMA_IRQHandler+0x1f4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d019      	beq.n	8004640 <HAL_DMA_IRQHandler+0xe4>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a50      	ldr	r2, [pc, #320]	; (8004754 <HAL_DMA_IRQHandler+0x1f8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d012      	beq.n	800463c <HAL_DMA_IRQHandler+0xe0>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a4f      	ldr	r2, [pc, #316]	; (8004758 <HAL_DMA_IRQHandler+0x1fc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00a      	beq.n	8004636 <HAL_DMA_IRQHandler+0xda>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a4d      	ldr	r2, [pc, #308]	; (800475c <HAL_DMA_IRQHandler+0x200>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d102      	bne.n	8004630 <HAL_DMA_IRQHandler+0xd4>
 800462a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800462e:	e01b      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004630:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004634:	e018      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800463a:	e015      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	e013      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004640:	2304      	movs	r3, #4
 8004642:	e011      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004644:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004648:	e00e      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 800464a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800464e:	e00b      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004650:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004654:	e008      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800465a:	e005      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 800465c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004660:	e002      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004662:	2340      	movs	r3, #64	; 0x40
 8004664:	e000      	b.n	8004668 <HAL_DMA_IRQHandler+0x10c>
 8004666:	2304      	movs	r3, #4
 8004668:	4a3d      	ldr	r2, [pc, #244]	; (8004760 <HAL_DMA_IRQHandler+0x204>)
 800466a:	6053      	str	r3, [r2, #4]
 800466c:	e057      	b.n	800471e <HAL_DMA_IRQHandler+0x1c2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a31      	ldr	r2, [pc, #196]	; (8004738 <HAL_DMA_IRQHandler+0x1dc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d04f      	beq.n	8004718 <HAL_DMA_IRQHandler+0x1bc>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a2f      	ldr	r2, [pc, #188]	; (800473c <HAL_DMA_IRQHandler+0x1e0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d048      	beq.n	8004714 <HAL_DMA_IRQHandler+0x1b8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2e      	ldr	r2, [pc, #184]	; (8004740 <HAL_DMA_IRQHandler+0x1e4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d040      	beq.n	800470e <HAL_DMA_IRQHandler+0x1b2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a2c      	ldr	r2, [pc, #176]	; (8004744 <HAL_DMA_IRQHandler+0x1e8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d038      	beq.n	8004708 <HAL_DMA_IRQHandler+0x1ac>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2b      	ldr	r2, [pc, #172]	; (8004748 <HAL_DMA_IRQHandler+0x1ec>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d030      	beq.n	8004702 <HAL_DMA_IRQHandler+0x1a6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a29      	ldr	r2, [pc, #164]	; (800474c <HAL_DMA_IRQHandler+0x1f0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d028      	beq.n	80046fc <HAL_DMA_IRQHandler+0x1a0>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a21      	ldr	r2, [pc, #132]	; (8004734 <HAL_DMA_IRQHandler+0x1d8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d020      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x19a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a25      	ldr	r2, [pc, #148]	; (8004750 <HAL_DMA_IRQHandler+0x1f4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d019      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x196>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_DMA_IRQHandler+0x1f8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d012      	beq.n	80046ee <HAL_DMA_IRQHandler+0x192>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a22      	ldr	r2, [pc, #136]	; (8004758 <HAL_DMA_IRQHandler+0x1fc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00a      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x18c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <HAL_DMA_IRQHandler+0x200>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d102      	bne.n	80046e2 <HAL_DMA_IRQHandler+0x186>
 80046dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046e0:	e01b      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 80046e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046e6:	e018      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 80046e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ec:	e015      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 80046ee:	2340      	movs	r3, #64	; 0x40
 80046f0:	e013      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 80046f2:	2304      	movs	r3, #4
 80046f4:	e011      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 80046f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046fa:	e00e      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 80046fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004700:	e00b      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 8004702:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004706:	e008      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 8004708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800470c:	e005      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 800470e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004712:	e002      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 8004714:	2340      	movs	r3, #64	; 0x40
 8004716:	e000      	b.n	800471a <HAL_DMA_IRQHandler+0x1be>
 8004718:	2304      	movs	r3, #4
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <HAL_DMA_IRQHandler+0x208>)
 800471c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 8136 	beq.w	8004994 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004730:	e130      	b.n	8004994 <HAL_DMA_IRQHandler+0x438>
 8004732:	bf00      	nop
 8004734:	40020080 	.word	0x40020080
 8004738:	40020008 	.word	0x40020008
 800473c:	4002001c 	.word	0x4002001c
 8004740:	40020030 	.word	0x40020030
 8004744:	40020044 	.word	0x40020044
 8004748:	40020058 	.word	0x40020058
 800474c:	4002006c 	.word	0x4002006c
 8004750:	40020408 	.word	0x40020408
 8004754:	4002041c 	.word	0x4002041c
 8004758:	40020430 	.word	0x40020430
 800475c:	40020444 	.word	0x40020444
 8004760:	40020400 	.word	0x40020400
 8004764:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	2202      	movs	r2, #2
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80dd 	beq.w	8004934 <HAL_DMA_IRQHandler+0x3d8>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80d7 	beq.w	8004934 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 020a 	bic.w	r2, r2, #10
 80047a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	4b7b      	ldr	r3, [pc, #492]	; (80049a0 <HAL_DMA_IRQHandler+0x444>)
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d958      	bls.n	800486a <HAL_DMA_IRQHandler+0x30e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a79      	ldr	r2, [pc, #484]	; (80049a4 <HAL_DMA_IRQHandler+0x448>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04f      	beq.n	8004862 <HAL_DMA_IRQHandler+0x306>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a78      	ldr	r2, [pc, #480]	; (80049a8 <HAL_DMA_IRQHandler+0x44c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d048      	beq.n	800485e <HAL_DMA_IRQHandler+0x302>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a76      	ldr	r2, [pc, #472]	; (80049ac <HAL_DMA_IRQHandler+0x450>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d040      	beq.n	8004858 <HAL_DMA_IRQHandler+0x2fc>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a75      	ldr	r2, [pc, #468]	; (80049b0 <HAL_DMA_IRQHandler+0x454>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d038      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2f6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a73      	ldr	r2, [pc, #460]	; (80049b4 <HAL_DMA_IRQHandler+0x458>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d030      	beq.n	800484c <HAL_DMA_IRQHandler+0x2f0>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a72      	ldr	r2, [pc, #456]	; (80049b8 <HAL_DMA_IRQHandler+0x45c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d028      	beq.n	8004846 <HAL_DMA_IRQHandler+0x2ea>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a69      	ldr	r2, [pc, #420]	; (80049a0 <HAL_DMA_IRQHandler+0x444>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d020      	beq.n	8004840 <HAL_DMA_IRQHandler+0x2e4>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a6e      	ldr	r2, [pc, #440]	; (80049bc <HAL_DMA_IRQHandler+0x460>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d019      	beq.n	800483c <HAL_DMA_IRQHandler+0x2e0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6c      	ldr	r2, [pc, #432]	; (80049c0 <HAL_DMA_IRQHandler+0x464>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d012      	beq.n	8004838 <HAL_DMA_IRQHandler+0x2dc>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a6b      	ldr	r2, [pc, #428]	; (80049c4 <HAL_DMA_IRQHandler+0x468>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00a      	beq.n	8004832 <HAL_DMA_IRQHandler+0x2d6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a69      	ldr	r2, [pc, #420]	; (80049c8 <HAL_DMA_IRQHandler+0x46c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d102      	bne.n	800482c <HAL_DMA_IRQHandler+0x2d0>
 8004826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800482a:	e01b      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 800482c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004830:	e018      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 8004832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004836:	e015      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 8004838:	2320      	movs	r3, #32
 800483a:	e013      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 800483c:	2302      	movs	r3, #2
 800483e:	e011      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 8004840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004844:	e00e      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 8004846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800484a:	e00b      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 800484c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004850:	e008      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 8004852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004856:	e005      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 8004858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800485c:	e002      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 800485e:	2320      	movs	r3, #32
 8004860:	e000      	b.n	8004864 <HAL_DMA_IRQHandler+0x308>
 8004862:	2302      	movs	r3, #2
 8004864:	4a59      	ldr	r2, [pc, #356]	; (80049cc <HAL_DMA_IRQHandler+0x470>)
 8004866:	6053      	str	r3, [r2, #4]
 8004868:	e057      	b.n	800491a <HAL_DMA_IRQHandler+0x3be>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <HAL_DMA_IRQHandler+0x448>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d04f      	beq.n	8004914 <HAL_DMA_IRQHandler+0x3b8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a4b      	ldr	r2, [pc, #300]	; (80049a8 <HAL_DMA_IRQHandler+0x44c>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d048      	beq.n	8004910 <HAL_DMA_IRQHandler+0x3b4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a4a      	ldr	r2, [pc, #296]	; (80049ac <HAL_DMA_IRQHandler+0x450>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d040      	beq.n	800490a <HAL_DMA_IRQHandler+0x3ae>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a48      	ldr	r2, [pc, #288]	; (80049b0 <HAL_DMA_IRQHandler+0x454>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d038      	beq.n	8004904 <HAL_DMA_IRQHandler+0x3a8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a47      	ldr	r2, [pc, #284]	; (80049b4 <HAL_DMA_IRQHandler+0x458>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d030      	beq.n	80048fe <HAL_DMA_IRQHandler+0x3a2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a45      	ldr	r2, [pc, #276]	; (80049b8 <HAL_DMA_IRQHandler+0x45c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d028      	beq.n	80048f8 <HAL_DMA_IRQHandler+0x39c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <HAL_DMA_IRQHandler+0x444>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d020      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x396>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a41      	ldr	r2, [pc, #260]	; (80049bc <HAL_DMA_IRQHandler+0x460>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d019      	beq.n	80048ee <HAL_DMA_IRQHandler+0x392>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <HAL_DMA_IRQHandler+0x464>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d012      	beq.n	80048ea <HAL_DMA_IRQHandler+0x38e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3e      	ldr	r2, [pc, #248]	; (80049c4 <HAL_DMA_IRQHandler+0x468>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00a      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x388>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a3d      	ldr	r2, [pc, #244]	; (80049c8 <HAL_DMA_IRQHandler+0x46c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d102      	bne.n	80048de <HAL_DMA_IRQHandler+0x382>
 80048d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048dc:	e01b      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 80048de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e2:	e018      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 80048e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048e8:	e015      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 80048ea:	2320      	movs	r3, #32
 80048ec:	e013      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e011      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 80048f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048f6:	e00e      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 80048f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048fc:	e00b      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 80048fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004902:	e008      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 8004904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004908:	e005      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 800490a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800490e:	e002      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 8004910:	2320      	movs	r3, #32
 8004912:	e000      	b.n	8004916 <HAL_DMA_IRQHandler+0x3ba>
 8004914:	2302      	movs	r3, #2
 8004916:	4a2e      	ldr	r2, [pc, #184]	; (80049d0 <HAL_DMA_IRQHandler+0x474>)
 8004918:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d034      	beq.n	8004994 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004932:	e02f      	b.n	8004994 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	2208      	movs	r2, #8
 800493a:	409a      	lsls	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d028      	beq.n	8004996 <HAL_DMA_IRQHandler+0x43a>
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b00      	cmp	r3, #0
 800494c:	d023      	beq.n	8004996 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 020e 	bic.w	r2, r2, #14
 800495c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	2101      	movs	r1, #1
 8004968:	fa01 f202 	lsl.w	r2, r1, r2
 800496c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
    }
  }
  return;
 8004994:	bf00      	nop
 8004996:	bf00      	nop
}
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40020080 	.word	0x40020080
 80049a4:	40020008 	.word	0x40020008
 80049a8:	4002001c 	.word	0x4002001c
 80049ac:	40020030 	.word	0x40020030
 80049b0:	40020044 	.word	0x40020044
 80049b4:	40020058 	.word	0x40020058
 80049b8:	4002006c 	.word	0x4002006c
 80049bc:	40020408 	.word	0x40020408
 80049c0:	4002041c 	.word	0x4002041c
 80049c4:	40020430 	.word	0x40020430
 80049c8:	40020444 	.word	0x40020444
 80049cc:	40020400 	.word	0x40020400
 80049d0:	40020000 	.word	0x40020000

080049d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	2101      	movs	r1, #1
 80049ec:	fa01 f202 	lsl.w	r2, r1, r2
 80049f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d108      	bne.n	8004a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a12:	e007      	b.n	8004a24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr
	...

08004a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b08b      	sub	sp, #44	; 0x2c
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a42:	e179      	b.n	8004d38 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004a44:	2201      	movs	r2, #1
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	f040 8168 	bne.w	8004d32 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	4a96      	ldr	r2, [pc, #600]	; (8004cc0 <HAL_GPIO_Init+0x290>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d05e      	beq.n	8004b2a <HAL_GPIO_Init+0xfa>
 8004a6c:	4a94      	ldr	r2, [pc, #592]	; (8004cc0 <HAL_GPIO_Init+0x290>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d875      	bhi.n	8004b5e <HAL_GPIO_Init+0x12e>
 8004a72:	4a94      	ldr	r2, [pc, #592]	; (8004cc4 <HAL_GPIO_Init+0x294>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d058      	beq.n	8004b2a <HAL_GPIO_Init+0xfa>
 8004a78:	4a92      	ldr	r2, [pc, #584]	; (8004cc4 <HAL_GPIO_Init+0x294>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d86f      	bhi.n	8004b5e <HAL_GPIO_Init+0x12e>
 8004a7e:	4a92      	ldr	r2, [pc, #584]	; (8004cc8 <HAL_GPIO_Init+0x298>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d052      	beq.n	8004b2a <HAL_GPIO_Init+0xfa>
 8004a84:	4a90      	ldr	r2, [pc, #576]	; (8004cc8 <HAL_GPIO_Init+0x298>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d869      	bhi.n	8004b5e <HAL_GPIO_Init+0x12e>
 8004a8a:	4a90      	ldr	r2, [pc, #576]	; (8004ccc <HAL_GPIO_Init+0x29c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d04c      	beq.n	8004b2a <HAL_GPIO_Init+0xfa>
 8004a90:	4a8e      	ldr	r2, [pc, #568]	; (8004ccc <HAL_GPIO_Init+0x29c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d863      	bhi.n	8004b5e <HAL_GPIO_Init+0x12e>
 8004a96:	4a8e      	ldr	r2, [pc, #568]	; (8004cd0 <HAL_GPIO_Init+0x2a0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d046      	beq.n	8004b2a <HAL_GPIO_Init+0xfa>
 8004a9c:	4a8c      	ldr	r2, [pc, #560]	; (8004cd0 <HAL_GPIO_Init+0x2a0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d85d      	bhi.n	8004b5e <HAL_GPIO_Init+0x12e>
 8004aa2:	2b12      	cmp	r3, #18
 8004aa4:	d82a      	bhi.n	8004afc <HAL_GPIO_Init+0xcc>
 8004aa6:	2b12      	cmp	r3, #18
 8004aa8:	d859      	bhi.n	8004b5e <HAL_GPIO_Init+0x12e>
 8004aaa:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <HAL_GPIO_Init+0x80>)
 8004aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab0:	08004b2b 	.word	0x08004b2b
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004b17 	.word	0x08004b17
 8004abc:	08004b59 	.word	0x08004b59
 8004ac0:	08004b5f 	.word	0x08004b5f
 8004ac4:	08004b5f 	.word	0x08004b5f
 8004ac8:	08004b5f 	.word	0x08004b5f
 8004acc:	08004b5f 	.word	0x08004b5f
 8004ad0:	08004b5f 	.word	0x08004b5f
 8004ad4:	08004b5f 	.word	0x08004b5f
 8004ad8:	08004b5f 	.word	0x08004b5f
 8004adc:	08004b5f 	.word	0x08004b5f
 8004ae0:	08004b5f 	.word	0x08004b5f
 8004ae4:	08004b5f 	.word	0x08004b5f
 8004ae8:	08004b5f 	.word	0x08004b5f
 8004aec:	08004b5f 	.word	0x08004b5f
 8004af0:	08004b5f 	.word	0x08004b5f
 8004af4:	08004b0d 	.word	0x08004b0d
 8004af8:	08004b21 	.word	0x08004b21
 8004afc:	4a75      	ldr	r2, [pc, #468]	; (8004cd4 <HAL_GPIO_Init+0x2a4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b02:	e02c      	b.n	8004b5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	623b      	str	r3, [r7, #32]
          break;
 8004b0a:	e029      	b.n	8004b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	3304      	adds	r3, #4
 8004b12:	623b      	str	r3, [r7, #32]
          break;
 8004b14:	e024      	b.n	8004b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	623b      	str	r3, [r7, #32]
          break;
 8004b1e:	e01f      	b.n	8004b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	330c      	adds	r3, #12
 8004b26:	623b      	str	r3, [r7, #32]
          break;
 8004b28:	e01a      	b.n	8004b60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b32:	2304      	movs	r3, #4
 8004b34:	623b      	str	r3, [r7, #32]
          break;
 8004b36:	e013      	b.n	8004b60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b40:	2308      	movs	r3, #8
 8004b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	69fa      	ldr	r2, [r7, #28]
 8004b48:	611a      	str	r2, [r3, #16]
          break;
 8004b4a:	e009      	b.n	8004b60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69fa      	ldr	r2, [r7, #28]
 8004b54:	615a      	str	r2, [r3, #20]
          break;
 8004b56:	e003      	b.n	8004b60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	623b      	str	r3, [r7, #32]
          break;
 8004b5c:	e000      	b.n	8004b60 <HAL_GPIO_Init+0x130>
          break;
 8004b5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2bff      	cmp	r3, #255	; 0xff
 8004b64:	d801      	bhi.n	8004b6a <HAL_GPIO_Init+0x13a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	e001      	b.n	8004b6e <HAL_GPIO_Init+0x13e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2bff      	cmp	r3, #255	; 0xff
 8004b74:	d802      	bhi.n	8004b7c <HAL_GPIO_Init+0x14c>
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	e002      	b.n	8004b82 <HAL_GPIO_Init+0x152>
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	3b08      	subs	r3, #8
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	210f      	movs	r1, #15
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b90:	43db      	mvns	r3, r3
 8004b92:	401a      	ands	r2, r3
 8004b94:	6a39      	ldr	r1, [r7, #32]
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 80c1 	beq.w	8004d32 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <HAL_GPIO_Init+0x2a8>)
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	4a48      	ldr	r2, [pc, #288]	; (8004cd8 <HAL_GPIO_Init+0x2a8>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6193      	str	r3, [r2, #24]
 8004bbc:	4b46      	ldr	r3, [pc, #280]	; (8004cd8 <HAL_GPIO_Init+0x2a8>)
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004bc8:	4a44      	ldr	r2, [pc, #272]	; (8004cdc <HAL_GPIO_Init+0x2ac>)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	3302      	adds	r3, #2
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	220f      	movs	r2, #15
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4013      	ands	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a3c      	ldr	r2, [pc, #240]	; (8004ce0 <HAL_GPIO_Init+0x2b0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d01f      	beq.n	8004c34 <HAL_GPIO_Init+0x204>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a3b      	ldr	r2, [pc, #236]	; (8004ce4 <HAL_GPIO_Init+0x2b4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d019      	beq.n	8004c30 <HAL_GPIO_Init+0x200>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3a      	ldr	r2, [pc, #232]	; (8004ce8 <HAL_GPIO_Init+0x2b8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <HAL_GPIO_Init+0x1fc>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a39      	ldr	r2, [pc, #228]	; (8004cec <HAL_GPIO_Init+0x2bc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00d      	beq.n	8004c28 <HAL_GPIO_Init+0x1f8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <HAL_GPIO_Init+0x2c0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <HAL_GPIO_Init+0x1f4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a37      	ldr	r2, [pc, #220]	; (8004cf4 <HAL_GPIO_Init+0x2c4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d101      	bne.n	8004c20 <HAL_GPIO_Init+0x1f0>
 8004c1c:	2305      	movs	r3, #5
 8004c1e:	e00a      	b.n	8004c36 <HAL_GPIO_Init+0x206>
 8004c20:	2306      	movs	r3, #6
 8004c22:	e008      	b.n	8004c36 <HAL_GPIO_Init+0x206>
 8004c24:	2304      	movs	r3, #4
 8004c26:	e006      	b.n	8004c36 <HAL_GPIO_Init+0x206>
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e004      	b.n	8004c36 <HAL_GPIO_Init+0x206>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e002      	b.n	8004c36 <HAL_GPIO_Init+0x206>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <HAL_GPIO_Init+0x206>
 8004c34:	2300      	movs	r3, #0
 8004c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c38:	f002 0203 	and.w	r2, r2, #3
 8004c3c:	0092      	lsls	r2, r2, #2
 8004c3e:	4093      	lsls	r3, r2
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004c46:	4925      	ldr	r1, [pc, #148]	; (8004cdc <HAL_GPIO_Init+0x2ac>)
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d006      	beq.n	8004c6e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	4924      	ldr	r1, [pc, #144]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]
 8004c6c:	e006      	b.n	8004c7c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004c6e:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	4920      	ldr	r1, [pc, #128]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	491a      	ldr	r1, [pc, #104]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60cb      	str	r3, [r1, #12]
 8004c94:	e006      	b.n	8004ca4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d025      	beq.n	8004cfc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004cb0:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4910      	ldr	r1, [pc, #64]	; (8004cf8 <HAL_GPIO_Init+0x2c8>)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
 8004cbc:	e025      	b.n	8004d0a <HAL_GPIO_Init+0x2da>
 8004cbe:	bf00      	nop
 8004cc0:	10320000 	.word	0x10320000
 8004cc4:	10310000 	.word	0x10310000
 8004cc8:	10220000 	.word	0x10220000
 8004ccc:	10210000 	.word	0x10210000
 8004cd0:	10120000 	.word	0x10120000
 8004cd4:	10110000 	.word	0x10110000
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40010800 	.word	0x40010800
 8004ce4:	40010c00 	.word	0x40010c00
 8004ce8:	40011000 	.word	0x40011000
 8004cec:	40011400 	.word	0x40011400
 8004cf0:	40011800 	.word	0x40011800
 8004cf4:	40011c00 	.word	0x40011c00
 8004cf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_GPIO_Init+0x324>)
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	43db      	mvns	r3, r3
 8004d04:	4913      	ldr	r1, [pc, #76]	; (8004d54 <HAL_GPIO_Init+0x324>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_GPIO_Init+0x324>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	490e      	ldr	r1, [pc, #56]	; (8004d54 <HAL_GPIO_Init+0x324>)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]
 8004d22:	e006      	b.n	8004d32 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_GPIO_Init+0x324>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	4909      	ldr	r1, [pc, #36]	; (8004d54 <HAL_GPIO_Init+0x324>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	3301      	adds	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f47f ae7e 	bne.w	8004a44 <HAL_GPIO_Init+0x14>
  }
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	372c      	adds	r7, #44	; 0x2c
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	40010400 	.word	0x40010400

08004d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d002      	beq.n	8004d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
 8004d74:	e001      	b.n	8004d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	807b      	strh	r3, [r7, #2]
 8004d92:	4613      	mov	r3, r2
 8004d94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d96:	787b      	ldrb	r3, [r7, #1]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d9c:	887a      	ldrh	r2, [r7, #2]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004da2:	e003      	b.n	8004dac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004da4:	887b      	ldrh	r3, [r7, #2]
 8004da6:	041a      	lsls	r2, r3, #16
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	611a      	str	r2, [r3, #16]
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
	...

08004db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dc4:	695a      	ldr	r2, [r3, #20]
 8004dc6:	88fb      	ldrh	r3, [r7, #6]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004dce:	4a05      	ldr	r2, [pc, #20]	; (8004de4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fc ff88 	bl	8001cec <HAL_GPIO_EXTI_Callback>
  }
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40010400 	.word	0x40010400

08004de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e12b      	b.n	8005052 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d106      	bne.n	8004e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fd fdcc 	bl	80029ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f002 fa32 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
 8004e50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4a81      	ldr	r2, [pc, #516]	; (800505c <HAL_I2C_Init+0x274>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d807      	bhi.n	8004e6c <HAL_I2C_Init+0x84>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a80      	ldr	r2, [pc, #512]	; (8005060 <HAL_I2C_Init+0x278>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	bf94      	ite	ls
 8004e64:	2301      	movls	r3, #1
 8004e66:	2300      	movhi	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	e006      	b.n	8004e7a <HAL_I2C_Init+0x92>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a7d      	ldr	r2, [pc, #500]	; (8005064 <HAL_I2C_Init+0x27c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	bf94      	ite	ls
 8004e74:	2301      	movls	r3, #1
 8004e76:	2300      	movhi	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e0e7      	b.n	8005052 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a78      	ldr	r2, [pc, #480]	; (8005068 <HAL_I2C_Init+0x280>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0c9b      	lsrs	r3, r3, #18
 8004e8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a6a      	ldr	r2, [pc, #424]	; (800505c <HAL_I2C_Init+0x274>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d802      	bhi.n	8004ebc <HAL_I2C_Init+0xd4>
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	e009      	b.n	8004ed0 <HAL_I2C_Init+0xe8>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
 8004ec6:	4a69      	ldr	r2, [pc, #420]	; (800506c <HAL_I2C_Init+0x284>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	099b      	lsrs	r3, r3, #6
 8004ece:	3301      	adds	r3, #1
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ee2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	495c      	ldr	r1, [pc, #368]	; (800505c <HAL_I2C_Init+0x274>)
 8004eec:	428b      	cmp	r3, r1
 8004eee:	d819      	bhi.n	8004f24 <HAL_I2C_Init+0x13c>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	1e59      	subs	r1, r3, #1
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004efe:	1c59      	adds	r1, r3, #1
 8004f00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f04:	400b      	ands	r3, r1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_I2C_Init+0x138>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1e59      	subs	r1, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1e:	e051      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004f20:	2304      	movs	r3, #4
 8004f22:	e04f      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d111      	bne.n	8004f50 <HAL_I2C_Init+0x168>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	1e58      	subs	r0, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6859      	ldr	r1, [r3, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	440b      	add	r3, r1
 8004f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e012      	b.n	8004f76 <HAL_I2C_Init+0x18e>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1e58      	subs	r0, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6859      	ldr	r1, [r3, #4]
 8004f58:	460b      	mov	r3, r1
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	0099      	lsls	r1, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f66:	3301      	adds	r3, #1
 8004f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Init+0x196>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e022      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10e      	bne.n	8004fa4 <HAL_I2C_Init+0x1bc>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1e58      	subs	r0, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	440b      	add	r3, r1
 8004f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa2:	e00f      	b.n	8004fc4 <HAL_I2C_Init+0x1dc>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1e58      	subs	r0, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	0099      	lsls	r1, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	6809      	ldr	r1, [r1, #0]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ff2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6911      	ldr	r1, [r2, #16]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68d2      	ldr	r2, [r2, #12]
 8004ffe:	4311      	orrs	r1, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	430b      	orrs	r3, r1
 8005006:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	000186a0 	.word	0x000186a0
 8005060:	001e847f 	.word	0x001e847f
 8005064:	003d08ff 	.word	0x003d08ff
 8005068:	431bde83 	.word	0x431bde83
 800506c:	10624dd3 	.word	0x10624dd3

08005070 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005072:	b08b      	sub	sp, #44	; 0x2c
 8005074:	af06      	add	r7, sp, #24
 8005076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0f1      	b.n	8005266 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f00e fa0c 	bl	80134b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2203      	movs	r2, #3
 80050a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f006 f8a3 	bl	800b1f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	687e      	ldr	r6, [r7, #4]
 80050b6:	466d      	mov	r5, sp
 80050b8:	f106 0410 	add.w	r4, r6, #16
 80050bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	1d33      	adds	r3, r6, #4
 80050c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050c8:	6838      	ldr	r0, [r7, #0]
 80050ca:	f006 f86d 	bl	800b1a8 <USB_CoreInit>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d005      	beq.n	80050e0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0c2      	b.n	8005266 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f006 f89e 	bl	800b228 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ec:	2300      	movs	r3, #0
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e040      	b.n	8005174 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	440b      	add	r3, r1
 8005102:	3301      	adds	r3, #1
 8005104:	2201      	movs	r2, #1
 8005106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	440b      	add	r3, r1
 8005118:	7bfa      	ldrb	r2, [r7, #15]
 800511a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	440b      	add	r3, r1
 800512c:	3303      	adds	r3, #3
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	440b      	add	r3, r1
 8005140:	3338      	adds	r3, #56	; 0x38
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005146:	7bfa      	ldrb	r2, [r7, #15]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	440b      	add	r3, r1
 8005154:	333c      	adds	r3, #60	; 0x3c
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800515a:	7bfa      	ldrb	r2, [r7, #15]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	440b      	add	r3, r1
 8005168:	3340      	adds	r3, #64	; 0x40
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	3301      	adds	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	7bfa      	ldrb	r2, [r7, #15]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3b9      	bcc.n	80050f2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	e044      	b.n	800520e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051ac:	7bfa      	ldrb	r2, [r7, #15]
 80051ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051b0:	7bfa      	ldrb	r2, [r7, #15]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	440b      	add	r3, r1
 80051be:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051c6:	7bfa      	ldrb	r2, [r7, #15]
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	440b      	add	r3, r1
 80051d4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051f2:	7bfa      	ldrb	r2, [r7, #15]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	440b      	add	r3, r1
 8005200:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005208:	7bfb      	ldrb	r3, [r7, #15]
 800520a:	3301      	adds	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	429a      	cmp	r2, r3
 8005216:	d3b5      	bcc.n	8005184 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	687e      	ldr	r6, [r7, #4]
 8005220:	466d      	mov	r5, sp
 8005222:	f106 0410 	add.w	r4, r6, #16
 8005226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	1d33      	adds	r3, r6, #4
 8005230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f006 f804 	bl	800b240 <USB_DevInit>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e00d      	b.n	8005266 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f008 fa85 	bl	800d76e <USB_DevDisconnect>

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800526e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b082      	sub	sp, #8
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <HAL_PCD_Start+0x16>
 8005280:	2302      	movs	r3, #2
 8005282:	e016      	b.n	80052b2 <HAL_PCD_Start+0x44>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f005 ff99 	bl	800b1c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005296:	2101      	movs	r1, #1
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f00e fb62 	bl	8013962 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f008 fa59 	bl	800d75a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f008 fa5b 	bl	800d782 <USB_ReadInterrupts>
 80052cc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fb04 	bl	80058e6 <PCD_EP_ISR_Handler>

    return;
 80052de:	e119      	b.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d013      	beq.n	8005312 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fc:	b292      	uxth	r2, r2
 80052fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f00e f951 	bl	80135aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005308:	2100      	movs	r1, #0
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f905 	bl	800551a <HAL_PCD_SetAddress>

    return;
 8005310:	e100      	b.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00c      	beq.n	8005336 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800532e:	b292      	uxth	r2, r2
 8005330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005334:	e0ee      	b.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005348:	b29a      	uxth	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005352:	b292      	uxth	r2, r2
 8005354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005358:	e0dc      	b.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d027      	beq.n	80053b4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800536c:	b29a      	uxth	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0204 	bic.w	r2, r2, #4
 8005376:	b292      	uxth	r2, r2
 8005378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0208 	bic.w	r2, r2, #8
 800538e:	b292      	uxth	r2, r2
 8005390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f00e f941 	bl	801361c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ac:	b292      	uxth	r2, r2
 80053ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053b2:	e0af      	b.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8083 	beq.w	80054c6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80053c0:	2300      	movs	r3, #0
 80053c2:	77fb      	strb	r3, [r7, #31]
 80053c4:	e010      	b.n	80053e8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	7ffb      	ldrb	r3, [r7, #31]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	441a      	add	r2, r3
 80053d2:	7ffb      	ldrb	r3, [r7, #31]
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	b292      	uxth	r2, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	3320      	adds	r3, #32
 80053dc:	443b      	add	r3, r7
 80053de:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80053e2:	7ffb      	ldrb	r3, [r7, #31]
 80053e4:	3301      	adds	r3, #1
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	7ffb      	ldrb	r3, [r7, #31]
 80053ea:	2b07      	cmp	r3, #7
 80053ec:	d9eb      	bls.n	80053c6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	b292      	uxth	r2, r2
 8005402:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800540e:	b29a      	uxth	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0201 	bic.w	r2, r2, #1
 8005418:	b292      	uxth	r2, r2
 800541a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800541e:	bf00      	nop
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005428:	b29b      	uxth	r3, r3
 800542a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f6      	beq.n	8005420 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800543a:	b29a      	uxth	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005444:	b292      	uxth	r2, r2
 8005446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800544a:	2300      	movs	r3, #0
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e00f      	b.n	8005470 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	4611      	mov	r1, r2
 8005458:	7ffa      	ldrb	r2, [r7, #31]
 800545a:	0092      	lsls	r2, r2, #2
 800545c:	440a      	add	r2, r1
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	3320      	adds	r3, #32
 8005462:	443b      	add	r3, r7
 8005464:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005468:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800546a:	7ffb      	ldrb	r3, [r7, #31]
 800546c:	3301      	adds	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	7ffb      	ldrb	r3, [r7, #31]
 8005472:	2b07      	cmp	r3, #7
 8005474:	d9ec      	bls.n	8005450 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0208 	orr.w	r2, r2, #8
 8005488:	b292      	uxth	r2, r2
 800548a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a0:	b292      	uxth	r2, r2
 80054a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0204 	orr.w	r2, r2, #4
 80054b8:	b292      	uxth	r2, r2
 80054ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f00e f892 	bl	80135e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80054c4:	e026      	b.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00f      	beq.n	80054f0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054d8:	b29a      	uxth	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054e2:	b292      	uxth	r2, r2
 80054e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f00e f850 	bl	801358e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80054ee:	e011      	b.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800550c:	b292      	uxth	r2, r2
 800550e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005512:	bf00      	nop
  }
}
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_PCD_SetAddress+0x1a>
 8005530:	2302      	movs	r3, #2
 8005532:	e013      	b.n	800555c <HAL_PCD_SetAddress+0x42>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	4611      	mov	r1, r2
 800554c:	4618      	mov	r0, r3
 800554e:	f008 f8f1 	bl	800d734 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	70fb      	strb	r3, [r7, #3]
 8005576:	460b      	mov	r3, r1
 8005578:	803b      	strh	r3, [r7, #0]
 800557a:	4613      	mov	r3, r2
 800557c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005586:	2b00      	cmp	r3, #0
 8005588:	da0e      	bge.n	80055a8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800558a:	78fb      	ldrb	r3, [r7, #3]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	705a      	strb	r2, [r3, #1]
 80055a6:	e00e      	b.n	80055c6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 0207 	and.w	r2, r3, #7
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055d2:	883a      	ldrh	r2, [r7, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	78ba      	ldrb	r2, [r7, #2]
 80055dc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055de:	78bb      	ldrb	r3, [r7, #2]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d102      	bne.n	80055ea <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_PCD_EP_Open+0x94>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e00e      	b.n	8005616 <HAL_PCD_EP_Open+0xb2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68f9      	ldr	r1, [r7, #12]
 8005606:	4618      	mov	r0, r3
 8005608:	f005 fe3a 	bl	800b280 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005614:	7afb      	ldrb	r3, [r7, #11]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	460b      	mov	r3, r1
 8005628:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800562a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800562e:	2b00      	cmp	r3, #0
 8005630:	da0e      	bge.n	8005650 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	705a      	strb	r2, [r3, #1]
 800564e:	e00e      	b.n	800566e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 0207 	and.w	r2, r3, #7
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4413      	add	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	b2da      	uxtb	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_PCD_EP_Close+0x6a>
 8005684:	2302      	movs	r3, #2
 8005686:	e00e      	b.n	80056a6 <HAL_PCD_EP_Close+0x88>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	4618      	mov	r0, r3
 8005698:	f006 f9b2 	bl	800ba00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	460b      	mov	r3, r1
 80056bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056be:	7afb      	ldrb	r3, [r7, #11]
 80056c0:	f003 0207 	and.w	r2, r3, #7
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	2200      	movs	r2, #0
 80056e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ee:	7afb      	ldrb	r3, [r7, #11]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6979      	ldr	r1, [r7, #20]
 8005700:	4618      	mov	r0, r3
 8005702:	f006 fb69 	bl	800bdd8 <USB_EPStartXfer>

  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	607a      	str	r2, [r7, #4]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	460b      	mov	r3, r1
 800571e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005720:	7afb      	ldrb	r3, [r7, #11]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2201      	movs	r2, #1
 800575a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800575c:	7afb      	ldrb	r3, [r7, #11]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	b2da      	uxtb	r2, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6979      	ldr	r1, [r7, #20]
 800576e:	4618      	mov	r0, r3
 8005770:	f006 fb32 	bl	800bdd8 <USB_EPStartXfer>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	f003 0207 	and.w	r2, r3, #7
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d901      	bls.n	800579c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e04c      	b.n	8005836 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800579c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	da0e      	bge.n	80057c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	705a      	strb	r2, [r3, #1]
 80057c0:	e00c      	b.n	80057dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057c2:	78fa      	ldrb	r2, [r7, #3]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4413      	add	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_PCD_EP_SetStall+0x7e>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e01c      	b.n	8005836 <HAL_PCD_EP_SetStall+0xb8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	4618      	mov	r0, r3
 800580c:	f007 fe95 	bl	800d53a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005824:	4619      	mov	r1, r3
 8005826:	4610      	mov	r0, r2
 8005828:	f007 ffba 	bl	800d7a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d901      	bls.n	800585c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e040      	b.n	80058de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800585c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005860:	2b00      	cmp	r3, #0
 8005862:	da0e      	bge.n	8005882 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	705a      	strb	r2, [r3, #1]
 8005880:	e00e      	b.n	80058a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	f003 0207 	and.w	r2, r3, #7
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_PCD_EP_ClrStall+0x82>
 80058bc:	2302      	movs	r3, #2
 80058be:	e00e      	b.n	80058de <HAL_PCD_EP_ClrStall+0xa0>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68f9      	ldr	r1, [r7, #12]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f007 fe83 	bl	800d5da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b096      	sub	sp, #88	; 0x58
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058ee:	e3bf      	b.n	8006070 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80058fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800590a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 8179 	bne.w	8005c06 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b00      	cmp	r3, #0
 800591e:	d152      	bne.n	80059c6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	81fb      	strh	r3, [r7, #14]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	89fb      	ldrh	r3, [r7, #14]
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3328      	adds	r3, #40	; 0x28
 8005948:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005952:	b29b      	uxth	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	3302      	adds	r3, #2
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005974:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	441a      	add	r2, r3
 8005980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005982:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005984:	2100      	movs	r1, #0
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f00d fde7 	bl	801355a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 836b 	beq.w	8006070 <PCD_EP_ISR_Handler+0x78a>
 800599a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f040 8366 	bne.w	8006070 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	b292      	uxth	r2, r2
 80059b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80059c4:	e354      	b.n	8006070 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059cc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80059d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80059dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d034      	beq.n	8005a4e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	4413      	add	r3, r2
 80059f8:	3306      	adds	r3, #6
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6812      	ldr	r2, [r2, #0]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a20:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f007 ff0c 	bl	800d840 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a34:	4013      	ands	r3, r2
 8005a36:	823b      	strh	r3, [r7, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	8a3a      	ldrh	r2, [r7, #16]
 8005a3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a42:	b292      	uxth	r2, r2
 8005a44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f00d fd5a 	bl	8013500 <HAL_PCD_SetupStageCallback>
 8005a4c:	e310      	b.n	8006070 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005a4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f280 830c 	bge.w	8006070 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a64:	4013      	ands	r3, r2
 8005a66:	83fb      	strh	r3, [r7, #30]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	8bfa      	ldrh	r2, [r7, #30]
 8005a6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a72:	b292      	uxth	r2, r2
 8005a74:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	4413      	add	r3, r2
 8005a8a:	3306      	adds	r3, #6
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d019      	beq.n	8005ade <PCD_EP_ISR_Handler+0x1f8>
 8005aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d015      	beq.n	8005ade <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab8:	6959      	ldr	r1, [r3, #20]
 8005aba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005abc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f007 febc 	bl	800d840 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	441a      	add	r2, r3
 8005ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f00d fd23 	bl	8013524 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005ae8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 82bd 	bne.w	8006070 <PCD_EP_ISR_Handler+0x78a>
 8005af6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005afa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005afe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b02:	f000 82b5 	beq.w	8006070 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3c:	d91d      	bls.n	8005b7a <PCD_EP_ISR_Handler+0x294>
 8005b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	647b      	str	r3, [r7, #68]	; 0x44
 8005b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d102      	bne.n	8005b58 <PCD_EP_ISR_Handler+0x272>
 8005b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b54:	3b01      	subs	r3, #1
 8005b56:	647b      	str	r3, [r7, #68]	; 0x44
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	029b      	lsls	r3, r3, #10
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	4313      	orrs	r3, r2
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e026      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x2e2>
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <PCD_EP_ISR_Handler+0x2b2>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e017      	b.n	8005bc8 <PCD_EP_ISR_Handler+0x2e2>
 8005b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <PCD_EP_ISR_Handler+0x2cc>
 8005bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bae:	3301      	adds	r3, #1
 8005bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd8:	827b      	strh	r3, [r7, #18]
 8005bda:	8a7b      	ldrh	r3, [r7, #18]
 8005bdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005be0:	827b      	strh	r3, [r7, #18]
 8005be2:	8a7b      	ldrh	r3, [r7, #18]
 8005be4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005be8:	827b      	strh	r3, [r7, #18]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	8a7b      	ldrh	r3, [r7, #18]
 8005bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8013      	strh	r3, [r2, #0]
 8005c04:	e234      	b.n	8006070 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c1a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f280 80fc 	bge.w	8005e1c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005c52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c56:	b292      	uxth	r2, r2
 8005c58:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005c5a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c72:	7b1b      	ldrb	r3, [r3, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d125      	bne.n	8005cc4 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3306      	adds	r3, #6
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	6812      	ldr	r2, [r2, #0]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ca0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005ca4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8092 	beq.w	8005dd2 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb4:	6959      	ldr	r1, [r3, #20]
 8005cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb8:	88da      	ldrh	r2, [r3, #6]
 8005cba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005cbe:	f007 fdbf 	bl	800d840 <USB_ReadPMA>
 8005cc2:	e086      	b.n	8005dd2 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cc6:	78db      	ldrb	r3, [r3, #3]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d10a      	bne.n	8005ce2 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005ccc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f9d9 	bl	800608c <HAL_PCD_EP_DB_Receive>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005ce0:	e077      	b.n	8005dd2 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d024      	beq.n	8005d8a <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	4413      	add	r3, r2
 8005d54:	3302      	adds	r3, #2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d68:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005d6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02e      	beq.n	8005dd2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7a:	6959      	ldr	r1, [r3, #20]
 8005d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7e:	891a      	ldrh	r2, [r3, #8]
 8005d80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d84:	f007 fd5c 	bl	800d840 <USB_ReadPMA>
 8005d88:	e023      	b.n	8005dd2 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3306      	adds	r3, #6
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005db2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005db6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc4:	6959      	ldr	r1, [r3, #20]
 8005dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dc8:	895a      	ldrh	r2, [r3, #10]
 8005dca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005dce:	f007 fd37 	bl	800d840 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dd4:	69da      	ldr	r2, [r3, #28]
 8005dd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005dda:	441a      	add	r2, r3
 8005ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005de8:	441a      	add	r2, r3
 8005dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <PCD_EP_ISR_Handler+0x51c>
 8005df6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d206      	bcs.n	8005e10 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f00d fb8b 	bl	8013524 <HAL_PCD_DataOutStageCallback>
 8005e0e:	e005      	b.n	8005e1c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e16:	4618      	mov	r0, r3
 8005e18:	f005 ffde 	bl	800bdd8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8123 	beq.w	8006070 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	461a      	mov	r2, r3
 8005e62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e7c:	78db      	ldrb	r3, [r3, #3]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	f040 80a2 	bne.w	8005fc8 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8005e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e86:	2200      	movs	r2, #0
 8005e88:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8c:	7b1b      	ldrb	r3, [r3, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f000 8093 	beq.w	8005fba <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d046      	beq.n	8005f2e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ea2:	785b      	ldrb	r3, [r3, #1]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d126      	bne.n	8005ef6 <PCD_EP_ISR_Handler+0x610>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	4413      	add	r3, r2
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	011a      	lsls	r2, r3, #4
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ece:	623b      	str	r3, [r7, #32]
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e061      	b.n	8005fba <PCD_EP_ISR_Handler+0x6d4>
 8005ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef8:	785b      	ldrb	r3, [r3, #1]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d15d      	bne.n	8005fba <PCD_EP_ISR_Handler+0x6d4>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	4413      	add	r3, r2
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	011a      	lsls	r2, r3, #4
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	4413      	add	r3, r2
 8005f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	2200      	movs	r2, #0
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e045      	b.n	8005fba <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d126      	bne.n	8005f8a <PCD_EP_ISR_Handler+0x6a4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	4413      	add	r3, r2
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
 8005f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	011a      	lsls	r2, r3, #4
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e017      	b.n	8005fba <PCD_EP_ISR_Handler+0x6d4>
 8005f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8c:	785b      	ldrb	r3, [r3, #1]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d113      	bne.n	8005fba <PCD_EP_ISR_Handler+0x6d4>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa0:	4413      	add	r3, r2
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	011a      	lsls	r2, r3, #4
 8005faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fac:	4413      	add	r3, r2
 8005fae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f00d faca 	bl	801355a <HAL_PCD_DataInStageCallback>
 8005fc6:	e053      	b.n	8006070 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005fc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d146      	bne.n	8006062 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3302      	adds	r3, #2
 8005fea:	005b      	lsls	r3, r3, #1
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ffc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006008:	429a      	cmp	r2, r3
 800600a:	d907      	bls.n	800601c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800600c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600e:	699a      	ldr	r2, [r3, #24]
 8006010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006014:	1ad2      	subs	r2, r2, r3
 8006016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006018:	619a      	str	r2, [r3, #24]
 800601a:	e002      	b.n	8006022 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	2200      	movs	r2, #0
 8006020:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800602a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f00d fa92 	bl	801355a <HAL_PCD_DataInStageCallback>
 8006036:	e01b      	b.n	8006070 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603a:	695a      	ldr	r2, [r3, #20]
 800603c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006040:	441a      	add	r2, r3
 8006042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006044:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800604e:	441a      	add	r2, r3
 8006050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006052:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800605a:	4618      	mov	r0, r3
 800605c:	f005 febc 	bl	800bdd8 <USB_EPStartXfer>
 8006060:	e006      	b.n	8006070 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006062:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006066:	461a      	mov	r2, r3
 8006068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f91b 	bl	80062a6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006078:	b29b      	uxth	r3, r3
 800607a:	b21b      	sxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	f6ff ac37 	blt.w	80058f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3758      	adds	r7, #88	; 0x58
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800609a:	88fb      	ldrh	r3, [r7, #6]
 800609c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d07e      	beq.n	80061a2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	3302      	adds	r3, #2
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	8b7b      	ldrh	r3, [r7, #26]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d306      	bcc.n	80060e6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	699a      	ldr	r2, [r3, #24]
 80060dc:	8b7b      	ldrh	r3, [r7, #26]
 80060de:	1ad2      	subs	r2, r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	619a      	str	r2, [r3, #24]
 80060e4:	e002      	b.n	80060ec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d123      	bne.n	800613c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	833b      	strh	r3, [r7, #24]
 8006110:	8b3b      	ldrh	r3, [r7, #24]
 8006112:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006116:	833b      	strh	r3, [r7, #24]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	8b3b      	ldrh	r3, [r7, #24]
 8006128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006138:	b29b      	uxth	r3, r3
 800613a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d01f      	beq.n	8006186 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	b29b      	uxth	r3, r3
 8006158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006160:	82fb      	strh	r3, [r7, #22]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	441a      	add	r2, r3
 8006170:	8afb      	ldrh	r3, [r7, #22]
 8006172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800617a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800617e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006182:	b29b      	uxth	r3, r3
 8006184:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006186:	8b7b      	ldrh	r3, [r7, #26]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8087 	beq.w	800629c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6959      	ldr	r1, [r3, #20]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	891a      	ldrh	r2, [r3, #8]
 800619a:	8b7b      	ldrh	r3, [r7, #26]
 800619c:	f007 fb50 	bl	800d840 <USB_ReadPMA>
 80061a0:	e07c      	b.n	800629c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	3306      	adds	r3, #6
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	8b7b      	ldrh	r3, [r7, #26]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d306      	bcc.n	80061e4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	8b7b      	ldrh	r3, [r7, #26]
 80061dc:	1ad2      	subs	r2, r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	619a      	str	r2, [r3, #24]
 80061e2:	e002      	b.n	80061ea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d123      	bne.n	800623a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620c:	83fb      	strh	r3, [r7, #30]
 800620e:	8bfb      	ldrh	r3, [r7, #30]
 8006210:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006214:	83fb      	strh	r3, [r7, #30]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	8bfb      	ldrh	r3, [r7, #30]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11f      	bne.n	8006284 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	881b      	ldrh	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800625a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625e:	83bb      	strh	r3, [r7, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	441a      	add	r2, r3
 800626e:	8bbb      	ldrh	r3, [r7, #28]
 8006270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800627c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006280:	b29b      	uxth	r3, r3
 8006282:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006284:	8b7b      	ldrh	r3, [r7, #26]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d008      	beq.n	800629c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6959      	ldr	r1, [r3, #20]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	895a      	ldrh	r2, [r3, #10]
 8006296:	8b7b      	ldrh	r3, [r7, #26]
 8006298:	f007 fad2 	bl	800d840 <USB_ReadPMA>
    }
  }

  return count;
 800629c:	8b7b      	ldrh	r3, [r7, #26]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b0a4      	sub	sp, #144	; 0x90
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	4613      	mov	r3, r2
 80062b2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80062b4:	88fb      	ldrh	r3, [r7, #6]
 80062b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 81dd 	beq.w	800667a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	3302      	adds	r3, #2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d907      	bls.n	8006308 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006300:	1ad2      	subs	r2, r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	619a      	str	r2, [r3, #24]
 8006306:	e002      	b.n	800630e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2200      	movs	r2, #0
 800630c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f040 80b9 	bne.w	800648a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d126      	bne.n	800636e <HAL_PCD_EP_DB_Transmit+0xc8>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800632e:	b29b      	uxth	r3, r3
 8006330:	461a      	mov	r2, r3
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	4413      	add	r3, r2
 8006336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	011a      	lsls	r2, r3, #4
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	4413      	add	r3, r2
 8006342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006352:	b29a      	uxth	r2, r3
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006366:	b29a      	uxth	r2, r3
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e01a      	b.n	80063a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d116      	bne.n	80063a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638a:	4413      	add	r3, r2
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	011a      	lsls	r2, r3, #4
 8006394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006396:	4413      	add	r3, r2
 8006398:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800639c:	633b      	str	r3, [r7, #48]	; 0x30
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	2200      	movs	r2, #0
 80063a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d126      	bne.n	8006400 <HAL_PCD_EP_DB_Transmit+0x15a>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	011a      	lsls	r2, r3, #4
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	801a      	strh	r2, [r3, #0]
 80063fe:	e017      	b.n	8006430 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d113      	bne.n	8006430 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006410:	b29b      	uxth	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	4413      	add	r3, r2
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	011a      	lsls	r2, r3, #4
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	4413      	add	r3, r2
 8006424:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2200      	movs	r2, #0
 800642e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f00d f88f 	bl	801355a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 82fc 	beq.w	8006a40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	82fb      	strh	r3, [r7, #22]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	8afb      	ldrh	r3, [r7, #22]
 8006474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006484:	b29b      	uxth	r3, r3
 8006486:	8013      	strh	r3, [r2, #0]
 8006488:	e2da      	b.n	8006a40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d021      	beq.n	80064d8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	441a      	add	r2, r3
 80064c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064de:	2b01      	cmp	r3, #1
 80064e0:	f040 82ae 	bne.w	8006a40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	695a      	ldr	r2, [r3, #20]
 80064e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80064ec:	441a      	add	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80064fa:	441a      	add	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	429a      	cmp	r2, r3
 800650a:	d30b      	bcc.n	8006524 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	6a1a      	ldr	r2, [r3, #32]
 8006518:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800651c:	1ad2      	subs	r2, r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	621a      	str	r2, [r3, #32]
 8006522:	e017      	b.n	8006554 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d108      	bne.n	800653e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800652c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006530:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800653c:	e00a      	b.n	8006554 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2200      	movs	r2, #0
 8006552:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d165      	bne.n	8006628 <HAL_PCD_EP_DB_Transmit+0x382>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006570:	4413      	add	r3, r2
 8006572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	011a      	lsls	r2, r3, #4
 800657a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657c:	4413      	add	r3, r2
 800657e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006582:	63bb      	str	r3, [r7, #56]	; 0x38
 8006584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800658e:	b29a      	uxth	r2, r3
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006598:	2b3e      	cmp	r3, #62	; 0x3e
 800659a:	d91d      	bls.n	80065d8 <HAL_PCD_EP_DB_Transmit+0x332>
 800659c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a8:	f003 031f 	and.w	r3, r3, #31
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <HAL_PCD_EP_DB_Transmit+0x310>
 80065b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b2:	3b01      	subs	r3, #1
 80065b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	881b      	ldrh	r3, [r3, #0]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065be:	b29b      	uxth	r3, r3
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	4313      	orrs	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	e044      	b.n	8006662 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80065d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <HAL_PCD_EP_DB_Transmit+0x350>
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e035      	b.n	8006662 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80065f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80065fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <HAL_PCD_EP_DB_Transmit+0x36a>
 800660a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660c:	3301      	adds	r3, #1
 800660e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b29a      	uxth	r2, r3
 8006616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29b      	uxth	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b29a      	uxth	r2, r3
 8006622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	e01c      	b.n	8006662 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d118      	bne.n	8006662 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	647b      	str	r3, [r7, #68]	; 0x44
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006644:	4413      	add	r3, r2
 8006646:	647b      	str	r3, [r7, #68]	; 0x44
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	011a      	lsls	r2, r3, #4
 800664e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006650:	4413      	add	r3, r2
 8006652:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006656:	643b      	str	r3, [r7, #64]	; 0x40
 8006658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800665c:	b29a      	uxth	r2, r3
 800665e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006660:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6818      	ldr	r0, [r3, #0]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	6959      	ldr	r1, [r3, #20]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	891a      	ldrh	r2, [r3, #8]
 800666e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006672:	b29b      	uxth	r3, r3
 8006674:	f007 f89f 	bl	800d7b6 <USB_WritePMA>
 8006678:	e1e2      	b.n	8006a40 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006682:	b29b      	uxth	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	4413      	add	r3, r2
 800668e:	3306      	adds	r3, #6
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	699a      	ldr	r2, [r3, #24]
 80066aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d307      	bcc.n	80066c2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	619a      	str	r2, [r3, #24]
 80066c0:	e002      	b.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 80c0 	bne.w	8006852 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	785b      	ldrb	r3, [r3, #1]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d126      	bne.n	8006728 <HAL_PCD_EP_DB_Transmit+0x482>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066ee:	4413      	add	r3, r2
 80066f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	011a      	lsls	r2, r3, #4
 80066f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066fa:	4413      	add	r3, r2
 80066fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006700:	67bb      	str	r3, [r7, #120]	; 0x78
 8006702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670c:	b29a      	uxth	r2, r3
 800670e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	b29b      	uxth	r3, r3
 8006718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006720:	b29a      	uxth	r2, r3
 8006722:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	e01a      	b.n	800675e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d116      	bne.n	800675e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	667b      	str	r3, [r7, #100]	; 0x64
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673e:	b29b      	uxth	r3, r3
 8006740:	461a      	mov	r2, r3
 8006742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006744:	4413      	add	r3, r2
 8006746:	667b      	str	r3, [r7, #100]	; 0x64
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	011a      	lsls	r2, r3, #4
 800674e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006750:	4413      	add	r3, r2
 8006752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006756:	663b      	str	r3, [r7, #96]	; 0x60
 8006758:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800675a:	2200      	movs	r2, #0
 800675c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	677b      	str	r3, [r7, #116]	; 0x74
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d12b      	bne.n	80067c4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677a:	b29b      	uxth	r3, r3
 800677c:	461a      	mov	r2, r3
 800677e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006780:	4413      	add	r3, r2
 8006782:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	011a      	lsls	r2, r3, #4
 800678a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678c:	4413      	add	r3, r2
 800678e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067c0:	801a      	strh	r2, [r3, #0]
 80067c2:	e017      	b.n	80067f4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d113      	bne.n	80067f4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067da:	4413      	add	r3, r2
 80067dc:	677b      	str	r3, [r7, #116]	; 0x74
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	011a      	lsls	r2, r3, #4
 80067e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e6:	4413      	add	r3, r2
 80067e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067ec:	673b      	str	r3, [r7, #112]	; 0x70
 80067ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067f0:	2200      	movs	r2, #0
 80067f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4619      	mov	r1, r3
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f00c fead 	bl	801355a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006806:	2b00      	cmp	r3, #0
 8006808:	f040 811a 	bne.w	8006a40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006826:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
 8006850:	e0f6      	b.n	8006a40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d121      	bne.n	80068a0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	b29b      	uxth	r3, r3
 800686e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800688c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689c:	b29b      	uxth	r3, r3
 800689e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	f040 80ca 	bne.w	8006a40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80068b4:	441a      	add	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	69da      	ldr	r2, [r3, #28]
 80068be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80068c2:	441a      	add	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6a1a      	ldr	r2, [r3, #32]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d30b      	bcc.n	80068ec <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6a1a      	ldr	r2, [r3, #32]
 80068e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068e4:	1ad2      	subs	r2, r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	621a      	str	r2, [r3, #32]
 80068ea:	e017      	b.n	800691c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d108      	bne.n	8006906 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80068f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80068f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006904:	e00a      	b.n	800691c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	657b      	str	r3, [r7, #84]	; 0x54
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d165      	bne.n	80069f6 <HAL_PCD_EP_DB_Transmit+0x750>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006938:	b29b      	uxth	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693e:	4413      	add	r3, r2
 8006940:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	011a      	lsls	r2, r3, #4
 8006948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694a:	4413      	add	r3, r2
 800694c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006950:	65bb      	str	r3, [r7, #88]	; 0x58
 8006952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695c:	b29a      	uxth	r2, r3
 800695e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006960:	801a      	strh	r2, [r3, #0]
 8006962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006966:	2b3e      	cmp	r3, #62	; 0x3e
 8006968:	d91d      	bls.n	80069a6 <HAL_PCD_EP_DB_Transmit+0x700>
 800696a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	66bb      	str	r3, [r7, #104]	; 0x68
 8006972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <HAL_PCD_EP_DB_Transmit+0x6de>
 800697e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006980:	3b01      	subs	r3, #1
 8006982:	66bb      	str	r3, [r7, #104]	; 0x68
 8006984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29a      	uxth	r2, r3
 800698a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800698c:	b29b      	uxth	r3, r3
 800698e:	029b      	lsls	r3, r3, #10
 8006990:	b29b      	uxth	r3, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	b29b      	uxth	r3, r3
 8006996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800699a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e041      	b.n	8006a2a <HAL_PCD_EP_DB_Transmit+0x784>
 80069a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <HAL_PCD_EP_DB_Transmit+0x71e>
 80069ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069bc:	b29a      	uxth	r2, r3
 80069be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c0:	801a      	strh	r2, [r3, #0]
 80069c2:	e032      	b.n	8006a2a <HAL_PCD_EP_DB_Transmit+0x784>
 80069c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069c8:	085b      	lsrs	r3, r3, #1
 80069ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80069cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_PCD_EP_DB_Transmit+0x738>
 80069d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069da:	3301      	adds	r3, #1
 80069dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80069de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	029b      	lsls	r3, r3, #10
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e019      	b.n	8006a2a <HAL_PCD_EP_DB_Transmit+0x784>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d115      	bne.n	8006a2a <HAL_PCD_EP_DB_Transmit+0x784>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0c:	4413      	add	r3, r2
 8006a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	011a      	lsls	r2, r3, #4
 8006a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a18:	4413      	add	r3, r2
 8006a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6959      	ldr	r1, [r3, #20]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	895a      	ldrh	r2, [r3, #10]
 8006a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f006 febb 	bl	800d7b6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	881b      	ldrh	r3, [r3, #0]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5a:	82bb      	strh	r3, [r7, #20]
 8006a5c:	8abb      	ldrh	r3, [r7, #20]
 8006a5e:	f083 0310 	eor.w	r3, r3, #16
 8006a62:	82bb      	strh	r3, [r7, #20]
 8006a64:	8abb      	ldrh	r3, [r7, #20]
 8006a66:	f083 0320 	eor.w	r3, r3, #32
 8006a6a:	82bb      	strh	r3, [r7, #20]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	461a      	mov	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	441a      	add	r2, r3
 8006a7a:	8abb      	ldrh	r3, [r7, #20]
 8006a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3790      	adds	r7, #144	; 0x90
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	607b      	str	r3, [r7, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	817b      	strh	r3, [r7, #10]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006aac:	897b      	ldrh	r3, [r7, #10]
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00b      	beq.n	8006ad0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ab8:	897b      	ldrh	r3, [r7, #10]
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e009      	b.n	8006ae4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006ad0:	897a      	ldrh	r2, [r7, #10]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d107      	bne.n	8006afa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2200      	movs	r2, #0
 8006aee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	80da      	strh	r2, [r3, #6]
 8006af8:	e00b      	b.n	8006b12 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	2201      	movs	r2, #1
 8006afe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr
	...

08006b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d101      	bne.n	8006b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e272      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 8087 	beq.w	8006c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b40:	4b92      	ldr	r3, [pc, #584]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 030c 	and.w	r3, r3, #12
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d00c      	beq.n	8006b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b4c:	4b8f      	ldr	r3, [pc, #572]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 030c 	and.w	r3, r3, #12
 8006b54:	2b08      	cmp	r3, #8
 8006b56:	d112      	bne.n	8006b7e <HAL_RCC_OscConfig+0x5e>
 8006b58:	4b8c      	ldr	r3, [pc, #560]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d10b      	bne.n	8006b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b66:	4b89      	ldr	r3, [pc, #548]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d06c      	beq.n	8006c4c <HAL_RCC_OscConfig+0x12c>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d168      	bne.n	8006c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e24c      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b86:	d106      	bne.n	8006b96 <HAL_RCC_OscConfig+0x76>
 8006b88:	4b80      	ldr	r3, [pc, #512]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a7f      	ldr	r2, [pc, #508]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	e02e      	b.n	8006bf4 <HAL_RCC_OscConfig+0xd4>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x98>
 8006b9e:	4b7b      	ldr	r3, [pc, #492]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a7a      	ldr	r2, [pc, #488]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	4b78      	ldr	r3, [pc, #480]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a77      	ldr	r2, [pc, #476]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e01d      	b.n	8006bf4 <HAL_RCC_OscConfig+0xd4>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bc0:	d10c      	bne.n	8006bdc <HAL_RCC_OscConfig+0xbc>
 8006bc2:	4b72      	ldr	r3, [pc, #456]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a71      	ldr	r2, [pc, #452]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	4b6f      	ldr	r3, [pc, #444]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a6e      	ldr	r2, [pc, #440]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e00b      	b.n	8006bf4 <HAL_RCC_OscConfig+0xd4>
 8006bdc:	4b6b      	ldr	r3, [pc, #428]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a6a      	ldr	r2, [pc, #424]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	4b68      	ldr	r3, [pc, #416]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a67      	ldr	r2, [pc, #412]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d013      	beq.n	8006c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fc fac2 	bl	8003184 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c04:	f7fc fabe 	bl	8003184 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	; 0x64
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e200      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c16:	4b5d      	ldr	r3, [pc, #372]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0f0      	beq.n	8006c04 <HAL_RCC_OscConfig+0xe4>
 8006c22:	e014      	b.n	8006c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c24:	f7fc faae 	bl	8003184 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c2c:	f7fc faaa 	bl	8003184 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e1ec      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c3e:	4b53      	ldr	r3, [pc, #332]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1f0      	bne.n	8006c2c <HAL_RCC_OscConfig+0x10c>
 8006c4a:	e000      	b.n	8006c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d063      	beq.n	8006d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c5a:	4b4c      	ldr	r3, [pc, #304]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f003 030c 	and.w	r3, r3, #12
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c66:	4b49      	ldr	r3, [pc, #292]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f003 030c 	and.w	r3, r3, #12
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d11c      	bne.n	8006cac <HAL_RCC_OscConfig+0x18c>
 8006c72:	4b46      	ldr	r3, [pc, #280]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d116      	bne.n	8006cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c7e:	4b43      	ldr	r3, [pc, #268]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_RCC_OscConfig+0x176>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d001      	beq.n	8006c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e1c0      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c96:	4b3d      	ldr	r3, [pc, #244]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4939      	ldr	r1, [pc, #228]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006caa:	e03a      	b.n	8006d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d020      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cb4:	4b36      	ldr	r3, [pc, #216]	; (8006d90 <HAL_RCC_OscConfig+0x270>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cba:	f7fc fa63 	bl	8003184 <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc2:	f7fc fa5f 	bl	8003184 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e1a1      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cd4:	4b2d      	ldr	r3, [pc, #180]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0f0      	beq.n	8006cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce0:	4b2a      	ldr	r3, [pc, #168]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	4927      	ldr	r1, [pc, #156]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	600b      	str	r3, [r1, #0]
 8006cf4:	e015      	b.n	8006d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cf6:	4b26      	ldr	r3, [pc, #152]	; (8006d90 <HAL_RCC_OscConfig+0x270>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfc:	f7fc fa42 	bl	8003184 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d04:	f7fc fa3e 	bl	8003184 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e180      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d16:	4b1d      	ldr	r3, [pc, #116]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03a      	beq.n	8006da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d019      	beq.n	8006d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d36:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <HAL_RCC_OscConfig+0x274>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3c:	f7fc fa22 	bl	8003184 <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d44:	f7fc fa1e 	bl	8003184 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e160      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <HAL_RCC_OscConfig+0x26c>)
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d0f0      	beq.n	8006d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d62:	2001      	movs	r0, #1
 8006d64:	f000 face 	bl	8007304 <RCC_Delay>
 8006d68:	e01c      	b.n	8006da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d6a:	4b0a      	ldr	r3, [pc, #40]	; (8006d94 <HAL_RCC_OscConfig+0x274>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d70:	f7fc fa08 	bl	8003184 <HAL_GetTick>
 8006d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d76:	e00f      	b.n	8006d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d78:	f7fc fa04 	bl	8003184 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d908      	bls.n	8006d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e146      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
 8006d8a:	bf00      	nop
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	42420000 	.word	0x42420000
 8006d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d98:	4b92      	ldr	r3, [pc, #584]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e9      	bne.n	8006d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80a6 	beq.w	8006efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006db2:	2300      	movs	r3, #0
 8006db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006db6:	4b8b      	ldr	r3, [pc, #556]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10d      	bne.n	8006dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dc2:	4b88      	ldr	r3, [pc, #544]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	4a87      	ldr	r2, [pc, #540]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dcc:	61d3      	str	r3, [r2, #28]
 8006dce:	4b85      	ldr	r3, [pc, #532]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dde:	4b82      	ldr	r3, [pc, #520]	; (8006fe8 <HAL_RCC_OscConfig+0x4c8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d118      	bne.n	8006e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dea:	4b7f      	ldr	r3, [pc, #508]	; (8006fe8 <HAL_RCC_OscConfig+0x4c8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a7e      	ldr	r2, [pc, #504]	; (8006fe8 <HAL_RCC_OscConfig+0x4c8>)
 8006df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006df6:	f7fc f9c5 	bl	8003184 <HAL_GetTick>
 8006dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dfc:	e008      	b.n	8006e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dfe:	f7fc f9c1 	bl	8003184 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b64      	cmp	r3, #100	; 0x64
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e103      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e10:	4b75      	ldr	r3, [pc, #468]	; (8006fe8 <HAL_RCC_OscConfig+0x4c8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f0      	beq.n	8006dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d106      	bne.n	8006e32 <HAL_RCC_OscConfig+0x312>
 8006e24:	4b6f      	ldr	r3, [pc, #444]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	4a6e      	ldr	r2, [pc, #440]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	6213      	str	r3, [r2, #32]
 8006e30:	e02d      	b.n	8006e8e <HAL_RCC_OscConfig+0x36e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCC_OscConfig+0x334>
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	4a69      	ldr	r2, [pc, #420]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	6213      	str	r3, [r2, #32]
 8006e46:	4b67      	ldr	r3, [pc, #412]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	4a66      	ldr	r2, [pc, #408]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e4c:	f023 0304 	bic.w	r3, r3, #4
 8006e50:	6213      	str	r3, [r2, #32]
 8006e52:	e01c      	b.n	8006e8e <HAL_RCC_OscConfig+0x36e>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d10c      	bne.n	8006e76 <HAL_RCC_OscConfig+0x356>
 8006e5c:	4b61      	ldr	r3, [pc, #388]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	4a60      	ldr	r2, [pc, #384]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e62:	f043 0304 	orr.w	r3, r3, #4
 8006e66:	6213      	str	r3, [r2, #32]
 8006e68:	4b5e      	ldr	r3, [pc, #376]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	4a5d      	ldr	r2, [pc, #372]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	6213      	str	r3, [r2, #32]
 8006e74:	e00b      	b.n	8006e8e <HAL_RCC_OscConfig+0x36e>
 8006e76:	4b5b      	ldr	r3, [pc, #364]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	4a5a      	ldr	r2, [pc, #360]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e7c:	f023 0301 	bic.w	r3, r3, #1
 8006e80:	6213      	str	r3, [r2, #32]
 8006e82:	4b58      	ldr	r3, [pc, #352]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	4a57      	ldr	r2, [pc, #348]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006e88:	f023 0304 	bic.w	r3, r3, #4
 8006e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d015      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e96:	f7fc f975 	bl	8003184 <HAL_GetTick>
 8006e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e9c:	e00a      	b.n	8006eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e9e:	f7fc f971 	bl	8003184 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d901      	bls.n	8006eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e0b1      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eb4:	4b4b      	ldr	r3, [pc, #300]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0ee      	beq.n	8006e9e <HAL_RCC_OscConfig+0x37e>
 8006ec0:	e014      	b.n	8006eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ec2:	f7fc f95f 	bl	8003184 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fc f95b 	bl	8003184 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e09b      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ee0:	4b40      	ldr	r3, [pc, #256]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1ee      	bne.n	8006eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d105      	bne.n	8006efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef2:	4b3c      	ldr	r3, [pc, #240]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	4a3b      	ldr	r2, [pc, #236]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 8087 	beq.w	8007016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f08:	4b36      	ldr	r3, [pc, #216]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f003 030c 	and.w	r3, r3, #12
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d061      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d146      	bne.n	8006faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f1c:	4b33      	ldr	r3, [pc, #204]	; (8006fec <HAL_RCC_OscConfig+0x4cc>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f22:	f7fc f92f 	bl	8003184 <HAL_GetTick>
 8006f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f28:	e008      	b.n	8006f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f2a:	f7fc f92b 	bl	8003184 <HAL_GetTick>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d901      	bls.n	8006f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e06d      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f3c:	4b29      	ldr	r3, [pc, #164]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f0      	bne.n	8006f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f50:	d108      	bne.n	8006f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f52:	4b24      	ldr	r3, [pc, #144]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	4921      	ldr	r1, [pc, #132]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f64:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a19      	ldr	r1, [r3, #32]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	430b      	orrs	r3, r1
 8006f76:	491b      	ldr	r1, [pc, #108]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <HAL_RCC_OscConfig+0x4cc>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f82:	f7fc f8ff 	bl	8003184 <HAL_GetTick>
 8006f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f88:	e008      	b.n	8006f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f8a:	f7fc f8fb 	bl	8003184 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d901      	bls.n	8006f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e03d      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006f9c:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0f0      	beq.n	8006f8a <HAL_RCC_OscConfig+0x46a>
 8006fa8:	e035      	b.n	8007016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006faa:	4b10      	ldr	r3, [pc, #64]	; (8006fec <HAL_RCC_OscConfig+0x4cc>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fc f8e8 	bl	8003184 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb8:	f7fc f8e4 	bl	8003184 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e026      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <HAL_RCC_OscConfig+0x4c4>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x498>
 8006fd6:	e01e      	b.n	8007016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e019      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	40007000 	.word	0x40007000
 8006fec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ff0:	4b0b      	ldr	r3, [pc, #44]	; (8007020 <HAL_RCC_OscConfig+0x500>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	429a      	cmp	r2, r3
 8007002:	d106      	bne.n	8007012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800700e:	429a      	cmp	r2, r3
 8007010:	d001      	beq.n	8007016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40021000 	.word	0x40021000

08007024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e0d0      	b.n	80071da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007038:	4b6a      	ldr	r3, [pc, #424]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d910      	bls.n	8007068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007046:	4b67      	ldr	r3, [pc, #412]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f023 0207 	bic.w	r2, r3, #7
 800704e:	4965      	ldr	r1, [pc, #404]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	4313      	orrs	r3, r2
 8007054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007056:	4b63      	ldr	r3, [pc, #396]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0307 	and.w	r3, r3, #7
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d001      	beq.n	8007068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0b8      	b.n	80071da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d020      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007080:	4b59      	ldr	r3, [pc, #356]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4a58      	ldr	r2, [pc, #352]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800708a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0308 	and.w	r3, r3, #8
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007098:	4b53      	ldr	r3, [pc, #332]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	4a52      	ldr	r2, [pc, #328]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 800709e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80070a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070a4:	4b50      	ldr	r3, [pc, #320]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	494d      	ldr	r1, [pc, #308]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d040      	beq.n	8007144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d107      	bne.n	80070da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ca:	4b47      	ldr	r3, [pc, #284]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d115      	bne.n	8007102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e07f      	b.n	80071da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d107      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070e2:	4b41      	ldr	r3, [pc, #260]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e073      	b.n	80071da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f2:	4b3d      	ldr	r3, [pc, #244]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e06b      	b.n	80071da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007102:	4b39      	ldr	r3, [pc, #228]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f023 0203 	bic.w	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4936      	ldr	r1, [pc, #216]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007110:	4313      	orrs	r3, r2
 8007112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007114:	f7fc f836 	bl	8003184 <HAL_GetTick>
 8007118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711a:	e00a      	b.n	8007132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800711c:	f7fc f832 	bl	8003184 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f241 3288 	movw	r2, #5000	; 0x1388
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e053      	b.n	80071da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007132:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f003 020c 	and.w	r2, r3, #12
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	429a      	cmp	r2, r3
 8007142:	d1eb      	bne.n	800711c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007144:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0307 	and.w	r3, r3, #7
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d210      	bcs.n	8007174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007152:	4b24      	ldr	r3, [pc, #144]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f023 0207 	bic.w	r2, r3, #7
 800715a:	4922      	ldr	r1, [pc, #136]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	4313      	orrs	r3, r2
 8007160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007162:	4b20      	ldr	r3, [pc, #128]	; (80071e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	429a      	cmp	r2, r3
 800716e:	d001      	beq.n	8007174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e032      	b.n	80071da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007180:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4916      	ldr	r1, [pc, #88]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 800718e:	4313      	orrs	r3, r2
 8007190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d009      	beq.n	80071b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	490e      	ldr	r1, [pc, #56]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071b2:	f000 f821 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80071b6:	4602      	mov	r2, r0
 80071b8:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <HAL_RCC_ClockConfig+0x1c4>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	091b      	lsrs	r3, r3, #4
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	490a      	ldr	r1, [pc, #40]	; (80071ec <HAL_RCC_ClockConfig+0x1c8>)
 80071c4:	5ccb      	ldrb	r3, [r1, r3]
 80071c6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ca:	4a09      	ldr	r2, [pc, #36]	; (80071f0 <HAL_RCC_ClockConfig+0x1cc>)
 80071cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071ce:	4b09      	ldr	r3, [pc, #36]	; (80071f4 <HAL_RCC_ClockConfig+0x1d0>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fb ff94 	bl	8003100 <HAL_InitTick>

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40022000 	.word	0x40022000
 80071e8:	40021000 	.word	0x40021000
 80071ec:	0802fbc0 	.word	0x0802fbc0
 80071f0:	20000084 	.word	0x20000084
 80071f4:	20000088 	.word	0x20000088

080071f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	2300      	movs	r3, #0
 8007204:	60bb      	str	r3, [r7, #8]
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	2300      	movs	r3, #0
 800720c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007212:	4b1e      	ldr	r3, [pc, #120]	; (800728c <HAL_RCC_GetSysClockFreq+0x94>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 030c 	and.w	r3, r3, #12
 800721e:	2b04      	cmp	r3, #4
 8007220:	d002      	beq.n	8007228 <HAL_RCC_GetSysClockFreq+0x30>
 8007222:	2b08      	cmp	r3, #8
 8007224:	d003      	beq.n	800722e <HAL_RCC_GetSysClockFreq+0x36>
 8007226:	e027      	b.n	8007278 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007228:	4b19      	ldr	r3, [pc, #100]	; (8007290 <HAL_RCC_GetSysClockFreq+0x98>)
 800722a:	613b      	str	r3, [r7, #16]
      break;
 800722c:	e027      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	0c9b      	lsrs	r3, r3, #18
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	4a17      	ldr	r2, [pc, #92]	; (8007294 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007238:	5cd3      	ldrb	r3, [r2, r3]
 800723a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d010      	beq.n	8007268 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007246:	4b11      	ldr	r3, [pc, #68]	; (800728c <HAL_RCC_GetSysClockFreq+0x94>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	0c5b      	lsrs	r3, r3, #17
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007252:	5cd3      	ldrb	r3, [r2, r3]
 8007254:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a0d      	ldr	r2, [pc, #52]	; (8007290 <HAL_RCC_GetSysClockFreq+0x98>)
 800725a:	fb03 f202 	mul.w	r2, r3, r2
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	e004      	b.n	8007272 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a0c      	ldr	r2, [pc, #48]	; (800729c <HAL_RCC_GetSysClockFreq+0xa4>)
 800726c:	fb02 f303 	mul.w	r3, r2, r3
 8007270:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	613b      	str	r3, [r7, #16]
      break;
 8007276:	e002      	b.n	800727e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007278:	4b05      	ldr	r3, [pc, #20]	; (8007290 <HAL_RCC_GetSysClockFreq+0x98>)
 800727a:	613b      	str	r3, [r7, #16]
      break;
 800727c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800727e:	693b      	ldr	r3, [r7, #16]
}
 8007280:	4618      	mov	r0, r3
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	bc80      	pop	{r7}
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40021000 	.word	0x40021000
 8007290:	007a1200 	.word	0x007a1200
 8007294:	0802fbd8 	.word	0x0802fbd8
 8007298:	0802fbe8 	.word	0x0802fbe8
 800729c:	003d0900 	.word	0x003d0900

080072a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a4:	4b02      	ldr	r3, [pc, #8]	; (80072b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80072a6:	681b      	ldr	r3, [r3, #0]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bc80      	pop	{r7}
 80072ae:	4770      	bx	lr
 80072b0:	20000084 	.word	0x20000084

080072b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072b8:	f7ff fff2 	bl	80072a0 <HAL_RCC_GetHCLKFreq>
 80072bc:	4602      	mov	r2, r0
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	0a1b      	lsrs	r3, r3, #8
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	4903      	ldr	r1, [pc, #12]	; (80072d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ca:	5ccb      	ldrb	r3, [r1, r3]
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40021000 	.word	0x40021000
 80072d8:	0802fbd0 	.word	0x0802fbd0

080072dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072e0:	f7ff ffde 	bl	80072a0 <HAL_RCC_GetHCLKFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	0adb      	lsrs	r3, r3, #11
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4903      	ldr	r1, [pc, #12]	; (8007300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40021000 	.word	0x40021000
 8007300:	0802fbd0 	.word	0x0802fbd0

08007304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <RCC_Delay+0x34>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0a      	ldr	r2, [pc, #40]	; (800733c <RCC_Delay+0x38>)
 8007312:	fba2 2303 	umull	r2, r3, r2, r3
 8007316:	0a5b      	lsrs	r3, r3, #9
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007320:	bf00      	nop
  }
  while (Delay --);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	1e5a      	subs	r2, r3, #1
 8007326:	60fa      	str	r2, [r7, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1f9      	bne.n	8007320 <RCC_Delay+0x1c>
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr
 8007338:	20000084 	.word	0x20000084
 800733c:	10624dd3 	.word	0x10624dd3

08007340 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d07d      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800735c:	2300      	movs	r3, #0
 800735e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007360:	4b4f      	ldr	r3, [pc, #316]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10d      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800736c:	4b4c      	ldr	r3, [pc, #304]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	4a4b      	ldr	r2, [pc, #300]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007376:	61d3      	str	r3, [r2, #28]
 8007378:	4b49      	ldr	r3, [pc, #292]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007384:	2301      	movs	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007388:	4b46      	ldr	r3, [pc, #280]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d118      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007394:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a42      	ldr	r2, [pc, #264]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800739a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800739e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073a0:	f7fb fef0 	bl	8003184 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073a6:	e008      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a8:	f7fb feec 	bl	8003184 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b64      	cmp	r3, #100	; 0x64
 80073b4:	d901      	bls.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e06d      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ba:	4b3a      	ldr	r3, [pc, #232]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d02e      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d027      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073e4:	4b2e      	ldr	r3, [pc, #184]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073f4:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80073fa:	4a29      	ldr	r2, [pc, #164]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d014      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800740a:	f7fb febb 	bl	8003184 <HAL_GetTick>
 800740e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007410:	e00a      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007412:	f7fb feb7 	bl	8003184 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007420:	4293      	cmp	r3, r2
 8007422:	d901      	bls.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e036      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007428:	4b1d      	ldr	r3, [pc, #116]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0ee      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007434:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	4917      	ldr	r1, [pc, #92]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007442:	4313      	orrs	r3, r2
 8007444:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d105      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800744c:	4b14      	ldr	r3, [pc, #80]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	4a13      	ldr	r2, [pc, #76]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007456:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d008      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007464:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	490b      	ldr	r1, [pc, #44]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007472:	4313      	orrs	r3, r2
 8007474:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b00      	cmp	r3, #0
 8007480:	d008      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007482:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	4904      	ldr	r1, [pc, #16]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007490:	4313      	orrs	r3, r2
 8007492:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3718      	adds	r7, #24
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40007000 	.word	0x40007000
 80074a8:	42420440 	.word	0x42420440

080074ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	2300      	movs	r3, #0
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	2b0f      	cmp	r3, #15
 80074ce:	f200 80af 	bhi.w	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080075af 	.word	0x080075af
 80074dc:	08007615 	.word	0x08007615
 80074e0:	08007631 	.word	0x08007631
 80074e4:	0800759f 	.word	0x0800759f
 80074e8:	08007631 	.word	0x08007631
 80074ec:	08007631 	.word	0x08007631
 80074f0:	08007631 	.word	0x08007631
 80074f4:	080075a7 	.word	0x080075a7
 80074f8:	08007631 	.word	0x08007631
 80074fc:	08007631 	.word	0x08007631
 8007500:	08007631 	.word	0x08007631
 8007504:	08007631 	.word	0x08007631
 8007508:	08007631 	.word	0x08007631
 800750c:	08007631 	.word	0x08007631
 8007510:	08007631 	.word	0x08007631
 8007514:	08007519 	.word	0x08007519
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007518:	4b4a      	ldr	r3, [pc, #296]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800751e:	4b49      	ldr	r3, [pc, #292]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 8084 	beq.w	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	0c9b      	lsrs	r3, r3, #18
 8007530:	f003 030f 	and.w	r3, r3, #15
 8007534:	4a44      	ldr	r2, [pc, #272]	; (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007536:	5cd3      	ldrb	r3, [r2, r3]
 8007538:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d015      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007544:	4b3f      	ldr	r3, [pc, #252]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	0c5b      	lsrs	r3, r3, #17
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	4a3f      	ldr	r2, [pc, #252]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8007550:	5cd3      	ldrb	r3, [r2, r3]
 8007552:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00d      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800755e:	4a3c      	ldr	r2, [pc, #240]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	fbb2 f2f3 	udiv	r2, r2, r3
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	fb02 f303 	mul.w	r3, r2, r3
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	e004      	b.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	4a38      	ldr	r2, [pc, #224]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007574:	fb02 f303 	mul.w	r3, r2, r3
 8007578:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800757a:	4b32      	ldr	r3, [pc, #200]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007586:	d102      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800758c:	e052      	b.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	4a31      	ldr	r2, [pc, #196]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007594:	fba2 2303 	umull	r2, r3, r2, r3
 8007598:	085b      	lsrs	r3, r3, #1
 800759a:	61bb      	str	r3, [r7, #24]
      break;
 800759c:	e04a      	b.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800759e:	f7ff fe2b 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80075a2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80075a4:	e049      	b.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80075a6:	f7ff fe27 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80075aa:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80075ac:	e045      	b.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80075ae:	4b25      	ldr	r3, [pc, #148]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075be:	d108      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 0302 	and.w	r3, r3, #2
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80075ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e01f      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075dc:	d109      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80075e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80075ea:	f649 4340 	movw	r3, #40000	; 0x9c40
 80075ee:	61bb      	str	r3, [r7, #24]
 80075f0:	e00f      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fc:	d11c      	bne.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80075fe:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800760a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800760e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007610:	e012      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007612:	e011      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007614:	f7ff fe62 	bl	80072dc <HAL_RCC_GetPCLK2Freq>
 8007618:	4602      	mov	r2, r0
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	0b9b      	lsrs	r3, r3, #14
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	3301      	adds	r3, #1
 8007626:	005b      	lsls	r3, r3, #1
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	61bb      	str	r3, [r7, #24]
      break;
 800762e:	e004      	b.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8007630:	bf00      	nop
 8007632:	e002      	b.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007634:	bf00      	nop
 8007636:	e000      	b.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007638:	bf00      	nop
    }
  }
  return (frequency);
 800763a:	69bb      	ldr	r3, [r7, #24]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	40021000 	.word	0x40021000
 8007648:	0802fbec 	.word	0x0802fbec
 800764c:	0802fbfc 	.word	0x0802fbfc
 8007650:	007a1200 	.word	0x007a1200
 8007654:	003d0900 	.word	0x003d0900
 8007658:	aaaaaaab 	.word	0xaaaaaaab

0800765c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e022      	b.n	80076b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d105      	bne.n	8007686 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f7fb f9d1 	bl	8002a28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f814 	bl	80076bc <HAL_SD_InitCard>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e00a      	b.n	80076b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076bc:	b5b0      	push	{r4, r5, r7, lr}
 80076be:	b08e      	sub	sp, #56	; 0x38
 80076c0:	af04      	add	r7, sp, #16
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80076d8:	2376      	movs	r3, #118	; 0x76
 80076da:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681d      	ldr	r5, [r3, #0]
 80076e0:	466c      	mov	r4, sp
 80076e2:	f107 0314 	add.w	r3, r7, #20
 80076e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076f4:	4628      	mov	r0, r5
 80076f6:	f002 fff1 	bl	800a6dc <SDIO_Init>
 80076fa:	4603      	mov	r3, r0
 80076fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e04f      	b.n	80077ac <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800770c:	4b29      	ldr	r3, [pc, #164]	; (80077b4 <HAL_SD_InitCard+0xf8>)
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4618      	mov	r0, r3
 8007718:	f003 f826 	bl	800a768 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800771c:	4b25      	ldr	r3, [pc, #148]	; (80077b4 <HAL_SD_InitCard+0xf8>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007722:	2002      	movs	r0, #2
 8007724:	f7fb fd38 	bl	8003198 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ff03 	bl	8008534 <SD_PowerON>
 800772e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e02e      	b.n	80077ac <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fe22 	bl	8008398 <SD_InitCard>
 8007754:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00b      	beq.n	8007774 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e01b      	b.n	80077ac <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800777c:	4618      	mov	r0, r3
 800777e:	f003 f87f 	bl	800a880 <SDMMC_CmdBlockLength>
 8007782:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007784:	6a3b      	ldr	r3, [r7, #32]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00f      	beq.n	80077aa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a0a      	ldr	r2, [pc, #40]	; (80077b8 <HAL_SD_InitCard+0xfc>)
 8007790:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e000      	b.n	80077ac <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3728      	adds	r7, #40	; 0x28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bdb0      	pop	{r4, r5, r7, pc}
 80077b4:	423000a0 	.word	0x423000a0
 80077b8:	004005ff 	.word	0x004005ff

080077bc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b092      	sub	sp, #72	; 0x48
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077ca:	f7fb fcdb 	bl	8003184 <HAL_GetTick>
 80077ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e1bd      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	f040 81b0 	bne.w	8007b5c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	441a      	add	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780c:	429a      	cmp	r2, r3
 800780e:	d907      	bls.n	8007820 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e1a4      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2203      	movs	r2, #3
 8007824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2200      	movs	r2, #0
 800782e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007834:	2b01      	cmp	r3, #1
 8007836:	d002      	beq.n	800783e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	025b      	lsls	r3, r3, #9
 800783c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	025b      	lsls	r3, r3, #9
 8007848:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800784a:	2390      	movs	r3, #144	; 0x90
 800784c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800784e:	2302      	movs	r3, #2
 8007850:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007852:	2300      	movs	r3, #0
 8007854:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007856:	2301      	movs	r3, #1
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f107 0214 	add.w	r2, r7, #20
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f002 ffe0 	bl	800a82a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d90a      	bls.n	8007886 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2202      	movs	r2, #2
 8007874:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800787c:	4618      	mov	r0, r3
 800787e:	f003 f843 	bl	800a908 <SDMMC_CmdReadMultiBlock>
 8007882:	6478      	str	r0, [r7, #68]	; 0x44
 8007884:	e009      	b.n	800789a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007892:	4618      	mov	r0, r3
 8007894:	f003 f816 	bl	800a8c4 <SDMMC_CmdReadSingleBlock>
 8007898:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800789a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789c:	2b00      	cmp	r3, #0
 800789e:	d012      	beq.n	80078c6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a7a      	ldr	r2, [pc, #488]	; (8007a90 <HAL_SD_ReadBlocks+0x2d4>)
 80078a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ae:	431a      	orrs	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e151      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80078ca:	e061      	b.n	8007990 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d03c      	beq.n	8007954 <HAL_SD_ReadBlocks+0x198>
 80078da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d039      	beq.n	8007954 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80078e0:	2300      	movs	r3, #0
 80078e2:	643b      	str	r3, [r7, #64]	; 0x40
 80078e4:	e033      	b.n	800794e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f002 ff20 	bl	800a730 <SDIO_ReadFIFO>
 80078f0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80078fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fc:	3301      	adds	r3, #1
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007902:	3b01      	subs	r3, #1
 8007904:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	b2da      	uxtb	r2, r3
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007912:	3301      	adds	r3, #1
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007918:	3b01      	subs	r3, #1
 800791a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	0c1b      	lsrs	r3, r3, #16
 8007920:	b2da      	uxtb	r2, r3
 8007922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007924:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007928:	3301      	adds	r3, #1
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800792c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792e:	3b01      	subs	r3, #1
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	0e1b      	lsrs	r3, r3, #24
 8007936:	b2da      	uxtb	r2, r3
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800793c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793e:	3301      	adds	r3, #1
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007944:	3b01      	subs	r3, #1
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800794a:	3301      	adds	r3, #1
 800794c:	643b      	str	r3, [r7, #64]	; 0x40
 800794e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007950:	2b07      	cmp	r3, #7
 8007952:	d9c8      	bls.n	80078e6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007954:	f7fb fc16 	bl	8003184 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007960:	429a      	cmp	r2, r3
 8007962:	d902      	bls.n	800796a <HAL_SD_ReadBlocks+0x1ae>
 8007964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007966:	2b00      	cmp	r3, #0
 8007968:	d112      	bne.n	8007990 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a48      	ldr	r2, [pc, #288]	; (8007a90 <HAL_SD_ReadBlocks+0x2d4>)
 8007970:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007976:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e0ec      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007996:	f240 332a 	movw	r3, #810	; 0x32a
 800799a:	4013      	ands	r3, r2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d095      	beq.n	80078cc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d022      	beq.n	80079f4 <HAL_SD_ReadBlocks+0x238>
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d91f      	bls.n	80079f4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d01b      	beq.n	80079f4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f003 f807 	bl	800a9d4 <SDMMC_CmdStopTransfer>
 80079c6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80079c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d012      	beq.n	80079f4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2f      	ldr	r2, [pc, #188]	; (8007a90 <HAL_SD_ReadBlocks+0x2d4>)
 80079d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079dc:	431a      	orrs	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e0ba      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d012      	beq.n	8007a28 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a22      	ldr	r2, [pc, #136]	; (8007a90 <HAL_SD_ReadBlocks+0x2d4>)
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	f043 0208 	orr.w	r2, r3, #8
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e0a0      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d012      	beq.n	8007a5c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a15      	ldr	r2, [pc, #84]	; (8007a90 <HAL_SD_ReadBlocks+0x2d4>)
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	f043 0202 	orr.w	r2, r3, #2
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e086      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d063      	beq.n	8007b32 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a08      	ldr	r2, [pc, #32]	; (8007a90 <HAL_SD_ReadBlocks+0x2d4>)
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	f043 0220 	orr.w	r2, r3, #32
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e06c      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
 8007a90:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f002 fe49 	bl	800a730 <SDIO_ReadFIFO>
 8007a9e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	3301      	adds	r3, #1
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	0a1b      	lsrs	r3, r3, #8
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007adc:	3b01      	subs	r3, #1
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	0e1b      	lsrs	r3, r3, #24
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aec:	3301      	adds	r3, #1
 8007aee:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af2:	3b01      	subs	r3, #1
 8007af4:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007af6:	f7fb fb45 	bl	8003184 <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d902      	bls.n	8007b0c <HAL_SD_ReadBlocks+0x350>
 8007b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d112      	bne.n	8007b32 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a18      	ldr	r2, [pc, #96]	; (8007b74 <HAL_SD_ReadBlocks+0x3b8>)
 8007b12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e01b      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <HAL_SD_ReadBlocks+0x38a>
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1a6      	bne.n	8007a94 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	e006      	b.n	8007b6a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
  }
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3748      	adds	r7, #72	; 0x48
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	004005ff 	.word	0x004005ff

08007b78 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b092      	sub	sp, #72	; 0x48
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b86:	f7fb fafd 	bl	8003184 <HAL_GetTick>
 8007b8a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d107      	bne.n	8007baa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e166      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	f040 8159 	bne.w	8007e6a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	441a      	add	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d907      	bls.n	8007bdc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e14d      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2203      	movs	r2, #3
 8007be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2200      	movs	r2, #0
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d002      	beq.n	8007bfa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf6:	025b      	lsls	r3, r3, #9
 8007bf8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	025b      	lsls	r3, r3, #9
 8007c04:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007c06:	2390      	movs	r3, #144	; 0x90
 8007c08:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007c12:	2301      	movs	r3, #1
 8007c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f107 0218 	add.w	r2, r7, #24
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4618      	mov	r0, r3
 8007c22:	f002 fe02 	bl	800a82a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d90a      	bls.n	8007c42 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2220      	movs	r2, #32
 8007c30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f002 fea9 	bl	800a990 <SDMMC_CmdWriteMultiBlock>
 8007c3e:	6478      	str	r0, [r7, #68]	; 0x44
 8007c40:	e009      	b.n	8007c56 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2210      	movs	r2, #16
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 fe7c 	bl	800a94c <SDMMC_CmdWriteSingleBlock>
 8007c54:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d012      	beq.n	8007c82 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a87      	ldr	r2, [pc, #540]	; (8007e80 <HAL_SD_WriteBlocks+0x308>)
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0fa      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007c86:	e065      	b.n	8007d54 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d040      	beq.n	8007d18 <HAL_SD_WriteBlocks+0x1a0>
 8007c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d03d      	beq.n	8007d18 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007ca0:	e037      	b.n	8007d12 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007caa:	3301      	adds	r3, #1
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	021a      	lsls	r2, r3, #8
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	041a      	lsls	r2, r3, #16
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cda:	3301      	adds	r3, #1
 8007cdc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	061a      	lsls	r2, r3, #24
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f107 0214 	add.w	r2, r7, #20
 8007d04:	4611      	mov	r1, r2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f002 fd1e 	bl	800a748 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d0e:	3301      	adds	r3, #1
 8007d10:	643b      	str	r3, [r7, #64]	; 0x40
 8007d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d14:	2b07      	cmp	r3, #7
 8007d16:	d9c4      	bls.n	8007ca2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007d18:	f7fb fa34 	bl	8003184 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d902      	bls.n	8007d2e <HAL_SD_WriteBlocks+0x1b6>
 8007d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d112      	bne.n	8007d54 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a53      	ldr	r2, [pc, #332]	; (8007e80 <HAL_SD_WriteBlocks+0x308>)
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e091      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d5a:	f240 331a 	movw	r3, #794	; 0x31a
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d091      	beq.n	8007c88 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d022      	beq.n	8007db8 <HAL_SD_WriteBlocks+0x240>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d91f      	bls.n	8007db8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d01b      	beq.n	8007db8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f002 fe25 	bl	800a9d4 <SDMMC_CmdStopTransfer>
 8007d8a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d012      	beq.n	8007db8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a3a      	ldr	r2, [pc, #232]	; (8007e80 <HAL_SD_WriteBlocks+0x308>)
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da0:	431a      	orrs	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e05f      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d012      	beq.n	8007dec <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a2d      	ldr	r2, [pc, #180]	; (8007e80 <HAL_SD_WriteBlocks+0x308>)
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	f043 0208 	orr.w	r2, r3, #8
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e045      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d012      	beq.n	8007e20 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a20      	ldr	r2, [pc, #128]	; (8007e80 <HAL_SD_WriteBlocks+0x308>)
 8007e00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	f043 0202 	orr.w	r2, r3, #2
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e02b      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d012      	beq.n	8007e54 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a13      	ldr	r2, [pc, #76]	; (8007e80 <HAL_SD_WriteBlocks+0x308>)
 8007e34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f043 0210 	orr.w	r2, r3, #16
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e011      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	e006      	b.n	8007e78 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3748      	adds	r7, #72	; 0x48
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	004005ff 	.word	0x004005ff

08007e84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e92:	0f9b      	lsrs	r3, r3, #30
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9e:	0e9b      	lsrs	r3, r3, #26
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eb0:	0e1b      	lsrs	r3, r3, #24
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ece:	0a1b      	lsrs	r3, r3, #8
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee4:	0d1b      	lsrs	r3, r3, #20
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	f003 030f 	and.w	r3, r3, #15
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f02:	0bdb      	lsrs	r3, r3, #15
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f14:	0b9b      	lsrs	r3, r3, #14
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f26:	0b5b      	lsrs	r3, r3, #13
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f38:	0b1b      	lsrs	r3, r3, #12
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d163      	bne.n	800801c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f58:	009a      	lsls	r2, r3, #2
 8007f5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f5e:	4013      	ands	r3, r2
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f64:	0f92      	lsrs	r2, r2, #30
 8007f66:	431a      	orrs	r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f70:	0edb      	lsrs	r3, r3, #27
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0307 	and.w	r3, r3, #7
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f82:	0e1b      	lsrs	r3, r3, #24
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f94:	0d5b      	lsrs	r3, r3, #21
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa6:	0c9b      	lsrs	r3, r3, #18
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb8:	0bdb      	lsrs	r3, r3, #15
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	7e1b      	ldrb	r3, [r3, #24]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	3302      	adds	r3, #2
 8007fdc:	2201      	movs	r2, #1
 8007fde:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007fe6:	fb03 f202 	mul.w	r2, r3, r2
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	7a1b      	ldrb	r3, [r3, #8]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	409a      	lsls	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008008:	0a52      	lsrs	r2, r2, #9
 800800a:	fb03 f202 	mul.w	r2, r3, r2
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008018:	661a      	str	r2, [r3, #96]	; 0x60
 800801a:	e031      	b.n	8008080 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008020:	2b01      	cmp	r3, #1
 8008022:	d11d      	bne.n	8008060 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008032:	0c1b      	lsrs	r3, r3, #16
 8008034:	431a      	orrs	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	3301      	adds	r3, #1
 8008040:	029a      	lsls	r2, r3, #10
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008054:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	661a      	str	r2, [r3, #96]	; 0x60
 800805e:	e00f      	b.n	8008080 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a58      	ldr	r2, [pc, #352]	; (80081c8 <HAL_SD_GetCardCSD+0x344>)
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e09d      	b.n	80081bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008084:	0b9b      	lsrs	r3, r3, #14
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	b2da      	uxtb	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008096:	09db      	lsrs	r3, r3, #7
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b8:	0fdb      	lsrs	r3, r3, #31
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c4:	0f5b      	lsrs	r3, r3, #29
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0303 	and.w	r3, r3, #3
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	0e9b      	lsrs	r3, r3, #26
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e8:	0d9b      	lsrs	r3, r3, #22
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fa:	0d5b      	lsrs	r3, r3, #21
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	b2da      	uxtb	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	0c1b      	lsrs	r3, r3, #16
 8008118:	b2db      	uxtb	r3, r3
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	b2da      	uxtb	r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	0bdb      	lsrs	r3, r3, #15
 800812c:	b2db      	uxtb	r3, r3
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	b2da      	uxtb	r2, r3
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	0b9b      	lsrs	r3, r3, #14
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008152:	0b5b      	lsrs	r3, r3, #13
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	b2da      	uxtb	r2, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008166:	0b1b      	lsrs	r3, r3, #12
 8008168:	b2db      	uxtb	r3, r3
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	b2da      	uxtb	r2, r3
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817a:	0a9b      	lsrs	r3, r3, #10
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	b2da      	uxtb	r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081aa:	b2da      	uxtb	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	004005ff 	.word	0x004005ff

080081cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	bc80      	pop	{r7}
 8008220:	4770      	bx	lr
	...

08008224 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008224:	b5b0      	push	{r4, r5, r7, lr}
 8008226:	b08e      	sub	sp, #56	; 0x38
 8008228:	af04      	add	r7, sp, #16
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2203      	movs	r2, #3
 8008238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008240:	2b03      	cmp	r3, #3
 8008242:	d02e      	beq.n	80082a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d106      	bne.n	800825a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	639a      	str	r2, [r3, #56]	; 0x38
 8008258:	e029      	b.n	80082ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008260:	d10a      	bne.n	8008278 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa1c 	bl	80086a0 <SD_WideBus_Enable>
 8008268:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
 8008276:	e01a      	b.n	80082ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10a      	bne.n	8008294 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa59 	bl	8008736 <SD_WideBus_Disable>
 8008284:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	431a      	orrs	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
 8008292:	e00c      	b.n	80082ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008298:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	639a      	str	r2, [r3, #56]	; 0x38
 80082a0:	e005      	b.n	80082ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a26      	ldr	r2, [pc, #152]	; (8008354 <HAL_SD_ConfigWideBusOperation+0x130>)
 80082bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80082cc:	e01f      	b.n	800830e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	695b      	ldr	r3, [r3, #20]
 80082e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681d      	ldr	r5, [r3, #0]
 80082f4:	466c      	mov	r4, sp
 80082f6:	f107 0314 	add.w	r3, r7, #20
 80082fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008302:	f107 0308 	add.w	r3, r7, #8
 8008306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008308:	4628      	mov	r0, r5
 800830a:	f002 f9e7 	bl	800a6dc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008316:	4618      	mov	r0, r3
 8008318:	f002 fab2 	bl	800a880 <SDMMC_CmdBlockLength>
 800831c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00c      	beq.n	800833e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <HAL_SD_ConfigWideBusOperation+0x130>)
 800832a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800834a:	4618      	mov	r0, r3
 800834c:	3728      	adds	r7, #40	; 0x28
 800834e:	46bd      	mov	sp, r7
 8008350:	bdb0      	pop	{r4, r5, r7, pc}
 8008352:	bf00      	nop
 8008354:	004005ff 	.word	0x004005ff

08008358 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f970 	bl	8008650 <SD_SendStatus>
 8008370:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	431a      	orrs	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	0a5b      	lsrs	r3, r3, #9
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800838e:	693b      	ldr	r3, [r7, #16]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008398:	b5b0      	push	{r4, r5, r7, lr}
 800839a:	b094      	sub	sp, #80	; 0x50
 800839c:	af04      	add	r7, sp, #16
 800839e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80083a0:	2301      	movs	r3, #1
 80083a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f002 f9ea 	bl	800a782 <SDIO_GetPowerState>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80083b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80083b8:	e0b8      	b.n	800852c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d02f      	beq.n	8008422 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f002 fc0e 	bl	800abe8 <SDMMC_CmdSendCID>
 80083cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80083d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d6:	e0a9      	b.n	800852c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2100      	movs	r1, #0
 80083de:	4618      	mov	r0, r3
 80083e0:	f002 fa11 	bl	800a806 <SDIO_GetResponse>
 80083e4:	4602      	mov	r2, r0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2104      	movs	r1, #4
 80083f0:	4618      	mov	r0, r3
 80083f2:	f002 fa08 	bl	800a806 <SDIO_GetResponse>
 80083f6:	4602      	mov	r2, r0
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2108      	movs	r1, #8
 8008402:	4618      	mov	r0, r3
 8008404:	f002 f9ff 	bl	800a806 <SDIO_GetResponse>
 8008408:	4602      	mov	r2, r0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	210c      	movs	r1, #12
 8008414:	4618      	mov	r0, r3
 8008416:	f002 f9f6 	bl	800a806 <SDIO_GetResponse>
 800841a:	4602      	mov	r2, r0
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008426:	2b03      	cmp	r3, #3
 8008428:	d00d      	beq.n	8008446 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f107 020e 	add.w	r2, r7, #14
 8008432:	4611      	mov	r1, r2
 8008434:	4618      	mov	r0, r3
 8008436:	f002 fc14 	bl	800ac62 <SDMMC_CmdSetRelAdd>
 800843a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <SD_InitCard+0xae>
    {
      return errorstate;
 8008442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008444:	e072      	b.n	800852c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844a:	2b03      	cmp	r3, #3
 800844c:	d036      	beq.n	80084bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800844e:	89fb      	ldrh	r3, [r7, #14]
 8008450:	461a      	mov	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845e:	041b      	lsls	r3, r3, #16
 8008460:	4619      	mov	r1, r3
 8008462:	4610      	mov	r0, r2
 8008464:	f002 fbde 	bl	800ac24 <SDMMC_CmdSendCSD>
 8008468:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008472:	e05b      	b.n	800852c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f002 f9c3 	bl	800a806 <SDIO_GetResponse>
 8008480:	4602      	mov	r2, r0
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2104      	movs	r1, #4
 800848c:	4618      	mov	r0, r3
 800848e:	f002 f9ba 	bl	800a806 <SDIO_GetResponse>
 8008492:	4602      	mov	r2, r0
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2108      	movs	r1, #8
 800849e:	4618      	mov	r0, r3
 80084a0:	f002 f9b1 	bl	800a806 <SDIO_GetResponse>
 80084a4:	4602      	mov	r2, r0
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	210c      	movs	r1, #12
 80084b0:	4618      	mov	r0, r3
 80084b2:	f002 f9a8 	bl	800a806 <SDIO_GetResponse>
 80084b6:	4602      	mov	r2, r0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2104      	movs	r1, #4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f002 f99f 	bl	800a806 <SDIO_GetResponse>
 80084c8:	4603      	mov	r3, r0
 80084ca:	0d1a      	lsrs	r2, r3, #20
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80084d0:	f107 0310 	add.w	r3, r7, #16
 80084d4:	4619      	mov	r1, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff fcd4 	bl	8007e84 <HAL_SD_GetCardCSD>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084e6:	e021      	b.n	800852c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6819      	ldr	r1, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f0:	041b      	lsls	r3, r3, #16
 80084f2:	2200      	movs	r2, #0
 80084f4:	461c      	mov	r4, r3
 80084f6:	4615      	mov	r5, r2
 80084f8:	4622      	mov	r2, r4
 80084fa:	462b      	mov	r3, r5
 80084fc:	4608      	mov	r0, r1
 80084fe:	f002 fa8b 	bl	800aa18 <SDMMC_CmdSelDesel>
 8008502:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <SD_InitCard+0x176>
  {
    return errorstate;
 800850a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850c:	e00e      	b.n	800852c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681d      	ldr	r5, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	466c      	mov	r4, sp
 8008516:	f103 0210 	add.w	r2, r3, #16
 800851a:	ca07      	ldmia	r2, {r0, r1, r2}
 800851c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008520:	3304      	adds	r3, #4
 8008522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008524:	4628      	mov	r0, r5
 8008526:	f002 f8d9 	bl	800a6dc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3740      	adds	r7, #64	; 0x40
 8008530:	46bd      	mov	sp, r7
 8008532:	bdb0      	pop	{r4, r5, r7, pc}

08008534 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800853c:	2300      	movs	r3, #0
 800853e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008540:	2300      	movs	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	2300      	movs	r3, #0
 8008546:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f002 fa86 	bl	800aa5e <SDMMC_CmdGoIdleState>
 8008552:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <SD_PowerON+0x2a>
  {
    return errorstate;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	e072      	b.n	8008644 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f002 fa99 	bl	800aa9a <SDMMC_CmdOperCond>
 8008568:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00d      	beq.n	800858c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f002 fa6f 	bl	800aa5e <SDMMC_CmdGoIdleState>
 8008580:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	e05b      	b.n	8008644 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008596:	2b01      	cmp	r3, #1
 8008598:	d137      	bne.n	800860a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2100      	movs	r1, #0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 fa99 	bl	800aad8 <SDMMC_CmdAppCommand>
 80085a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d02d      	beq.n	800860a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085b2:	e047      	b.n	8008644 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f002 fa8c 	bl	800aad8 <SDMMC_CmdAppCommand>
 80085c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <SD_PowerON+0x98>
    {
      return errorstate;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	e03b      	b.n	8008644 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	491e      	ldr	r1, [pc, #120]	; (800864c <SD_PowerON+0x118>)
 80085d2:	4618      	mov	r0, r3
 80085d4:	f002 faa2 	bl	800ab1c <SDMMC_CmdAppOperCommand>
 80085d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085e4:	e02e      	b.n	8008644 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f002 f90a 	bl	800a806 <SDIO_GetResponse>
 80085f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	0fdb      	lsrs	r3, r3, #31
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <SD_PowerON+0xcc>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e000      	b.n	8008602 <SD_PowerON+0xce>
 8008600:	2300      	movs	r3, #0
 8008602:	613b      	str	r3, [r7, #16]

    count++;
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	3301      	adds	r3, #1
 8008608:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008610:	4293      	cmp	r3, r2
 8008612:	d802      	bhi.n	800861a <SD_PowerON+0xe6>
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0cc      	beq.n	80085b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008620:	4293      	cmp	r3, r2
 8008622:	d902      	bls.n	800862a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008628:	e00c      	b.n	8008644 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	645a      	str	r2, [r3, #68]	; 0x44
 800863a:	e002      	b.n	8008642 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	c1100000 	.word	0xc1100000

08008650 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008664:	e018      	b.n	8008698 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866e:	041b      	lsls	r3, r3, #16
 8008670:	4619      	mov	r1, r3
 8008672:	4610      	mov	r0, r2
 8008674:	f002 fb16 	bl	800aca4 <SDMMC_CmdSendStatus>
 8008678:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	e009      	b.n	8008698 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f002 f8bb 	bl	800a806 <SDIO_GetResponse>
 8008690:	4602      	mov	r2, r0
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80086a8:	2300      	movs	r3, #0
 80086aa:	60fb      	str	r3, [r7, #12]
 80086ac:	2300      	movs	r3, #0
 80086ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f002 f8a5 	bl	800a806 <SDIO_GetResponse>
 80086bc:	4603      	mov	r3, r0
 80086be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086c6:	d102      	bne.n	80086ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086cc:	e02f      	b.n	800872e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f879 	bl	80087cc <SD_FindSCR>
 80086da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	e023      	b.n	800872e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01c      	beq.n	800872a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	041b      	lsls	r3, r3, #16
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f002 f9eb 	bl	800aad8 <SDMMC_CmdAppCommand>
 8008702:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	e00f      	b.n	800872e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2102      	movs	r1, #2
 8008714:	4618      	mov	r0, r3
 8008716:	f002 fa24 	bl	800ab62 <SDMMC_CmdBusWidth>
 800871a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	e003      	b.n	800872e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008726:	2300      	movs	r3, #0
 8008728:	e001      	b.n	800872e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800872a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b086      	sub	sp, #24
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	2300      	movs	r3, #0
 8008744:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2100      	movs	r1, #0
 800874c:	4618      	mov	r0, r3
 800874e:	f002 f85a 	bl	800a806 <SDIO_GetResponse>
 8008752:	4603      	mov	r3, r0
 8008754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800875c:	d102      	bne.n	8008764 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800875e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008762:	e02f      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008764:	f107 030c 	add.w	r3, r7, #12
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f82e 	bl	80087cc <SD_FindSCR>
 8008770:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	e023      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d01c      	beq.n	80087c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878e:	041b      	lsls	r3, r3, #16
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f002 f9a0 	bl	800aad8 <SDMMC_CmdAppCommand>
 8008798:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	e00f      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f002 f9d9 	bl	800ab62 <SDMMC_CmdBusWidth>
 80087b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d001      	beq.n	80087bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	e003      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087bc:	2300      	movs	r3, #0
 80087be:	e001      	b.n	80087c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80087cc:	b590      	push	{r4, r7, lr}
 80087ce:	b08f      	sub	sp, #60	; 0x3c
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80087d6:	f7fa fcd5 	bl	8003184 <HAL_GetTick>
 80087da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80087e0:	2300      	movs	r3, #0
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2108      	movs	r1, #8
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 f844 	bl	800a880 <SDMMC_CmdBlockLength>
 80087f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	e0b2      	b.n	800896a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880c:	041b      	lsls	r3, r3, #16
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f002 f961 	bl	800aad8 <SDMMC_CmdAppCommand>
 8008816:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <SD_FindSCR+0x56>
  {
    return errorstate;
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	e0a3      	b.n	800896a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008828:	2308      	movs	r3, #8
 800882a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800882c:	2330      	movs	r3, #48	; 0x30
 800882e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008830:	2302      	movs	r3, #2
 8008832:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008834:	2300      	movs	r3, #0
 8008836:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008838:	2301      	movs	r3, #1
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f107 0210 	add.w	r2, r7, #16
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f001 ffef 	bl	800a82a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f002 f9a8 	bl	800aba6 <SDMMC_CmdSendSCR>
 8008856:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02a      	beq.n	80088b4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	e083      	b.n	800896a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00f      	beq.n	8008890 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	f107 0208 	add.w	r2, r7, #8
 800887c:	18d4      	adds	r4, r2, r3
 800887e:	4608      	mov	r0, r1
 8008880:	f001 ff56 	bl	800a730 <SDIO_ReadFIFO>
 8008884:	4603      	mov	r3, r0
 8008886:	6023      	str	r3, [r4, #0]
      index++;
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	3301      	adds	r3, #1
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
 800888e:	e006      	b.n	800889e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d012      	beq.n	80088c4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800889e:	f7fa fc71 	bl	8003184 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d102      	bne.n	80088b4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80088ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088b2:	e05a      	b.n	800896a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0cf      	beq.n	8008862 <SD_FindSCR+0x96>
 80088c2:	e000      	b.n	80088c6 <SD_FindSCR+0xfa>
      break;
 80088c4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088cc:	f003 0308 	and.w	r3, r3, #8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2208      	movs	r2, #8
 80088da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80088dc:	2308      	movs	r3, #8
 80088de:	e044      	b.n	800896a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2202      	movs	r2, #2
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80088f6:	2302      	movs	r3, #2
 80088f8:	e037      	b.n	800896a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d005      	beq.n	8008914 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2220      	movs	r2, #32
 800890e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008910:	2320      	movs	r3, #32
 8008912:	e02a      	b.n	800896a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f240 523a 	movw	r2, #1338	; 0x53a
 800891c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	061a      	lsls	r2, r3, #24
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800892a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	0a1b      	lsrs	r3, r3, #8
 8008930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008934:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	0e1b      	lsrs	r3, r3, #24
 800893a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	601a      	str	r2, [r3, #0]
    scr++;
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	3304      	adds	r3, #4
 8008944:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	061a      	lsls	r2, r3, #24
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008952:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800895c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	0e1b      	lsrs	r3, r3, #24
 8008962:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	373c      	adds	r7, #60	; 0x3c
 800896e:	46bd      	mov	sp, r7
 8008970:	bd90      	pop	{r4, r7, pc}

08008972 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e076      	b.n	8008a72 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008994:	d009      	beq.n	80089aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	61da      	str	r2, [r3, #28]
 800899c:	e005      	b.n	80089aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7fa f889 	bl	8002adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2e:	ea42 0103 	orr.w	r1, r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	0c1a      	lsrs	r2, r3, #16
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f002 0204 	and.w	r2, r2, #4
 8008a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b088      	sub	sp, #32
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	603b      	str	r3, [r7, #0]
 8008a86:	4613      	mov	r3, r2
 8008a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d101      	bne.n	8008a9c <HAL_SPI_Transmit+0x22>
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e12d      	b.n	8008cf8 <HAL_SPI_Transmit+0x27e>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aa4:	f7fa fb6e 	bl	8003184 <HAL_GetTick>
 8008aa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d002      	beq.n	8008ac0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008aba:	2302      	movs	r3, #2
 8008abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008abe:	e116      	b.n	8008cee <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_SPI_Transmit+0x52>
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ad0:	e10d      	b.n	8008cee <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	88fa      	ldrh	r2, [r7, #6]
 8008aea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	88fa      	ldrh	r2, [r7, #6]
 8008af0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b18:	d10f      	bne.n	8008b3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b44:	2b40      	cmp	r3, #64	; 0x40
 8008b46:	d007      	beq.n	8008b58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b60:	d14f      	bne.n	8008c02 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_SPI_Transmit+0xf6>
 8008b6a:	8afb      	ldrh	r3, [r7, #22]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d142      	bne.n	8008bf6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b74:	881a      	ldrh	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b80:	1c9a      	adds	r2, r3, #2
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b94:	e02f      	b.n	8008bf6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d112      	bne.n	8008bca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	881a      	ldrh	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb4:	1c9a      	adds	r2, r3, #2
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bc8:	e015      	b.n	8008bf6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bca:	f7fa fadb 	bl	8003184 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d803      	bhi.n	8008be2 <HAL_SPI_Transmit+0x168>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be0:	d102      	bne.n	8008be8 <HAL_SPI_Transmit+0x16e>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008bf4:	e07b      	b.n	8008cee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1ca      	bne.n	8008b96 <HAL_SPI_Transmit+0x11c>
 8008c00:	e050      	b.n	8008ca4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <HAL_SPI_Transmit+0x196>
 8008c0a:	8afb      	ldrh	r3, [r7, #22]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d144      	bne.n	8008c9a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	330c      	adds	r3, #12
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3b01      	subs	r3, #1
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008c36:	e030      	b.n	8008c9a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d113      	bne.n	8008c6e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	7812      	ldrb	r2, [r2, #0]
 8008c52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b01      	subs	r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c6c:	e015      	b.n	8008c9a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c6e:	f7fa fa89 	bl	8003184 <HAL_GetTick>
 8008c72:	4602      	mov	r2, r0
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d803      	bhi.n	8008c86 <HAL_SPI_Transmit+0x20c>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c84:	d102      	bne.n	8008c8c <HAL_SPI_Transmit+0x212>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d106      	bne.n	8008c9a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008c98:	e029      	b.n	8008cee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1c9      	bne.n	8008c38 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f8b1 	bl	8008e10 <SPI_EndRxTxTransaction>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e003      	b.n	8008cee <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3720      	adds	r7, #32
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d10:	f7fa fa38 	bl	8003184 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d20:	f7fa fa30 	bl	8003184 <HAL_GetTick>
 8008d24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d26:	4b39      	ldr	r3, [pc, #228]	; (8008e0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	015b      	lsls	r3, r3, #5
 8008d2c:	0d1b      	lsrs	r3, r3, #20
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	fb02 f303 	mul.w	r3, r2, r3
 8008d34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d36:	e054      	b.n	8008de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d050      	beq.n	8008de2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d40:	f7fa fa20 	bl	8003184 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d902      	bls.n	8008d56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d13d      	bne.n	8008dd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d6e:	d111      	bne.n	8008d94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d78:	d004      	beq.n	8008d84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d82:	d107      	bne.n	8008d94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d9c:	d10f      	bne.n	8008dbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e017      	b.n	8008e02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4013      	ands	r3, r2
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	bf0c      	ite	eq
 8008df2:	2301      	moveq	r3, #1
 8008df4:	2300      	movne	r3, #0
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	461a      	mov	r2, r3
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d19b      	bne.n	8008d38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3720      	adds	r7, #32
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000084 	.word	0x20000084

08008e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2200      	movs	r2, #0
 8008e24:	2180      	movs	r1, #128	; 0x80
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7ff ff6a 	bl	8008d00 <SPI_WaitFlagStateUntilTimeout>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d007      	beq.n	8008e42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e36:	f043 0220 	orr.w	r2, r3, #32
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e000      	b.n	8008e44 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d101      	bne.n	8008e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e041      	b.n	8008ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7f9 fee2 	bl	8002c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f000 fb42 	bl	8009514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d001      	beq.n	8008f04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e03c      	b.n	8008f7e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a1d      	ldr	r2, [pc, #116]	; (8008f88 <HAL_TIM_Base_Start+0x9c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <HAL_TIM_Base_Start+0x5c>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a1c      	ldr	r2, [pc, #112]	; (8008f8c <HAL_TIM_Base_Start+0xa0>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_TIM_Base_Start+0x5c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f28:	d00e      	beq.n	8008f48 <HAL_TIM_Base_Start+0x5c>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a18      	ldr	r2, [pc, #96]	; (8008f90 <HAL_TIM_Base_Start+0xa4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_TIM_Base_Start+0x5c>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a16      	ldr	r2, [pc, #88]	; (8008f94 <HAL_TIM_Base_Start+0xa8>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIM_Base_Start+0x5c>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a15      	ldr	r2, [pc, #84]	; (8008f98 <HAL_TIM_Base_Start+0xac>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d111      	bne.n	8008f6c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	f003 0307 	and.w	r3, r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d010      	beq.n	8008f7c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	e007      	b.n	8008f7c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0201 	orr.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bc80      	pop	{r7}
 8008f86:	4770      	bx	lr
 8008f88:	40012c00 	.word	0x40012c00
 8008f8c:	40013400 	.word	0x40013400
 8008f90:	40000400 	.word	0x40000400
 8008f94:	40000800 	.word	0x40000800
 8008f98:	40000c00 	.word	0x40000c00

08008f9c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6a1a      	ldr	r2, [r3, #32]
 8008faa:	f241 1311 	movw	r3, #4369	; 0x1111
 8008fae:	4013      	ands	r3, r2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10f      	bne.n	8008fd4 <HAL_TIM_Base_Stop+0x38>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6a1a      	ldr	r2, [r3, #32]
 8008fba:	f240 4344 	movw	r3, #1092	; 0x444
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d107      	bne.n	8008fd4 <HAL_TIM_Base_Stop+0x38>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0201 	bic.w	r2, r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d001      	beq.n	8009000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e044      	b.n	800908a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0201 	orr.w	r2, r2, #1
 8009016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a1d      	ldr	r2, [pc, #116]	; (8009094 <HAL_TIM_Base_Start_IT+0xac>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d018      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0x6c>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1c      	ldr	r2, [pc, #112]	; (8009098 <HAL_TIM_Base_Start_IT+0xb0>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d013      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0x6c>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009034:	d00e      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0x6c>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a18      	ldr	r2, [pc, #96]	; (800909c <HAL_TIM_Base_Start_IT+0xb4>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d009      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0x6c>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <HAL_TIM_Base_Start_IT+0xb8>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d004      	beq.n	8009054 <HAL_TIM_Base_Start_IT+0x6c>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d111      	bne.n	8009078 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b06      	cmp	r3, #6
 8009064:	d010      	beq.n	8009088 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f042 0201 	orr.w	r2, r2, #1
 8009074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009076:	e007      	b.n	8009088 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	bc80      	pop	{r7}
 8009092:	4770      	bx	lr
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40013400 	.word	0x40013400
 800909c:	40000400 	.word	0x40000400
 80090a0:	40000800 	.word	0x40000800
 80090a4:	40000c00 	.word	0x40000c00

080090a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0302 	and.w	r3, r3, #2
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d122      	bne.n	8009104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d11b      	bne.n	8009104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0202 	mvn.w	r2, #2
 80090d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f9f6 	bl	80094dc <HAL_TIM_IC_CaptureCallback>
 80090f0:	e005      	b.n	80090fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9e9 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f9f8 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b04      	cmp	r3, #4
 8009110:	d122      	bne.n	8009158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b04      	cmp	r3, #4
 800911e:	d11b      	bne.n	8009158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f06f 0204 	mvn.w	r2, #4
 8009128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2202      	movs	r2, #2
 800912e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f9cc 	bl	80094dc <HAL_TIM_IC_CaptureCallback>
 8009144:	e005      	b.n	8009152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f9bf 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9ce 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b08      	cmp	r3, #8
 8009164:	d122      	bne.n	80091ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0308 	and.w	r3, r3, #8
 8009170:	2b08      	cmp	r3, #8
 8009172:	d11b      	bne.n	80091ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f06f 0208 	mvn.w	r2, #8
 800917c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2204      	movs	r2, #4
 8009182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f003 0303 	and.w	r3, r3, #3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f9a2 	bl	80094dc <HAL_TIM_IC_CaptureCallback>
 8009198:	e005      	b.n	80091a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f995 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f9a4 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b10      	cmp	r3, #16
 80091b8:	d122      	bne.n	8009200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d11b      	bne.n	8009200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f06f 0210 	mvn.w	r2, #16
 80091d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2208      	movs	r2, #8
 80091d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f978 	bl	80094dc <HAL_TIM_IC_CaptureCallback>
 80091ec:	e005      	b.n	80091fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f96b 	bl	80094ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f97a 	bl	80094ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b01      	cmp	r3, #1
 800920c:	d10e      	bne.n	800922c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f003 0301 	and.w	r3, r3, #1
 8009218:	2b01      	cmp	r3, #1
 800921a:	d107      	bne.n	800922c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f06f 0201 	mvn.w	r2, #1
 8009224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7f8 fd42 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009236:	2b80      	cmp	r3, #128	; 0x80
 8009238:	d10e      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009244:	2b80      	cmp	r3, #128	; 0x80
 8009246:	d107      	bne.n	8009258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fb75 	bl	8009942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009262:	2b40      	cmp	r3, #64	; 0x40
 8009264:	d10e      	bne.n	8009284 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009270:	2b40      	cmp	r3, #64	; 0x40
 8009272:	d107      	bne.n	8009284 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800927c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f93e 	bl	8009500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0320 	and.w	r3, r3, #32
 800928e:	2b20      	cmp	r3, #32
 8009290:	d10e      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f003 0320 	and.w	r3, r3, #32
 800929c:	2b20      	cmp	r3, #32
 800929e:	d107      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f06f 0220 	mvn.w	r2, #32
 80092a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fb40 	bl	8009930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092b0:	bf00      	nop
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d101      	bne.n	80092d4 <HAL_TIM_ConfigClockSource+0x1c>
 80092d0:	2302      	movs	r3, #2
 80092d2:	e0b4      	b.n	800943e <HAL_TIM_ConfigClockSource+0x186>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800930c:	d03e      	beq.n	800938c <HAL_TIM_ConfigClockSource+0xd4>
 800930e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009312:	f200 8087 	bhi.w	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 8009316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800931a:	f000 8086 	beq.w	800942a <HAL_TIM_ConfigClockSource+0x172>
 800931e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009322:	d87f      	bhi.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 8009324:	2b70      	cmp	r3, #112	; 0x70
 8009326:	d01a      	beq.n	800935e <HAL_TIM_ConfigClockSource+0xa6>
 8009328:	2b70      	cmp	r3, #112	; 0x70
 800932a:	d87b      	bhi.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 800932c:	2b60      	cmp	r3, #96	; 0x60
 800932e:	d050      	beq.n	80093d2 <HAL_TIM_ConfigClockSource+0x11a>
 8009330:	2b60      	cmp	r3, #96	; 0x60
 8009332:	d877      	bhi.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 8009334:	2b50      	cmp	r3, #80	; 0x50
 8009336:	d03c      	beq.n	80093b2 <HAL_TIM_ConfigClockSource+0xfa>
 8009338:	2b50      	cmp	r3, #80	; 0x50
 800933a:	d873      	bhi.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 800933c:	2b40      	cmp	r3, #64	; 0x40
 800933e:	d058      	beq.n	80093f2 <HAL_TIM_ConfigClockSource+0x13a>
 8009340:	2b40      	cmp	r3, #64	; 0x40
 8009342:	d86f      	bhi.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 8009344:	2b30      	cmp	r3, #48	; 0x30
 8009346:	d064      	beq.n	8009412 <HAL_TIM_ConfigClockSource+0x15a>
 8009348:	2b30      	cmp	r3, #48	; 0x30
 800934a:	d86b      	bhi.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 800934c:	2b20      	cmp	r3, #32
 800934e:	d060      	beq.n	8009412 <HAL_TIM_ConfigClockSource+0x15a>
 8009350:	2b20      	cmp	r3, #32
 8009352:	d867      	bhi.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
 8009354:	2b00      	cmp	r3, #0
 8009356:	d05c      	beq.n	8009412 <HAL_TIM_ConfigClockSource+0x15a>
 8009358:	2b10      	cmp	r3, #16
 800935a:	d05a      	beq.n	8009412 <HAL_TIM_ConfigClockSource+0x15a>
 800935c:	e062      	b.n	8009424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6899      	ldr	r1, [r3, #8]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f000 fa53 	bl	8009818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68ba      	ldr	r2, [r7, #8]
 8009388:	609a      	str	r2, [r3, #8]
      break;
 800938a:	e04f      	b.n	800942c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6818      	ldr	r0, [r3, #0]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	6899      	ldr	r1, [r3, #8]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	f000 fa3c 	bl	8009818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ae:	609a      	str	r2, [r3, #8]
      break;
 80093b0:	e03c      	b.n	800942c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	6859      	ldr	r1, [r3, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	461a      	mov	r2, r3
 80093c0:	f000 f9b3 	bl	800972a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2150      	movs	r1, #80	; 0x50
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fa0a 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 80093d0:	e02c      	b.n	800942c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	6859      	ldr	r1, [r3, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	461a      	mov	r2, r3
 80093e0:	f000 f9d1 	bl	8009786 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	2160      	movs	r1, #96	; 0x60
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f9fa 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 80093f0:	e01c      	b.n	800942c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	6859      	ldr	r1, [r3, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	461a      	mov	r2, r3
 8009400:	f000 f993 	bl	800972a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2140      	movs	r1, #64	; 0x40
 800940a:	4618      	mov	r0, r3
 800940c:	f000 f9ea 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 8009410:	e00c      	b.n	800942c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f000 f9e1 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 8009422:	e003      	b.n	800942c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
      break;
 8009428:	e000      	b.n	800942c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800942a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
 800944e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009456:	2b01      	cmp	r3, #1
 8009458:	d101      	bne.n	800945e <HAL_TIM_SlaveConfigSynchro+0x18>
 800945a:	2302      	movs	r3, #2
 800945c:	e031      	b.n	80094c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f8c9 	bl	8009608 <TIM_SlaveTimer_SetConfig>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d009      	beq.n	8009490 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e018      	b.n	80094c2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800949e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68da      	ldr	r2, [r3, #12]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80094ae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr

080094dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e4:	bf00      	nop
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr

080094ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ee:	b480      	push	{r7}
 80094f0:	b083      	sub	sp, #12
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094f6:	bf00      	nop
 80094f8:	370c      	adds	r7, #12
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bc80      	pop	{r7}
 80094fe:	4770      	bx	lr

08009500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr
	...

08009514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a33      	ldr	r2, [pc, #204]	; (80095f4 <TIM_Base_SetConfig+0xe0>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d013      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a32      	ldr	r2, [pc, #200]	; (80095f8 <TIM_Base_SetConfig+0xe4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00f      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800953a:	d00b      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a2f      	ldr	r2, [pc, #188]	; (80095fc <TIM_Base_SetConfig+0xe8>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d007      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a2e      	ldr	r2, [pc, #184]	; (8009600 <TIM_Base_SetConfig+0xec>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a2d      	ldr	r2, [pc, #180]	; (8009604 <TIM_Base_SetConfig+0xf0>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d108      	bne.n	8009566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a22      	ldr	r2, [pc, #136]	; (80095f4 <TIM_Base_SetConfig+0xe0>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d013      	beq.n	8009596 <TIM_Base_SetConfig+0x82>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a21      	ldr	r2, [pc, #132]	; (80095f8 <TIM_Base_SetConfig+0xe4>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <TIM_Base_SetConfig+0x82>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800957c:	d00b      	beq.n	8009596 <TIM_Base_SetConfig+0x82>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <TIM_Base_SetConfig+0xe8>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d007      	beq.n	8009596 <TIM_Base_SetConfig+0x82>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a1d      	ldr	r2, [pc, #116]	; (8009600 <TIM_Base_SetConfig+0xec>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_Base_SetConfig+0x82>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a1c      	ldr	r2, [pc, #112]	; (8009604 <TIM_Base_SetConfig+0xf0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d108      	bne.n	80095a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800959c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a09      	ldr	r2, [pc, #36]	; (80095f4 <TIM_Base_SetConfig+0xe0>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d003      	beq.n	80095dc <TIM_Base_SetConfig+0xc8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a08      	ldr	r2, [pc, #32]	; (80095f8 <TIM_Base_SetConfig+0xe4>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d103      	bne.n	80095e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	615a      	str	r2, [r3, #20]
}
 80095ea:	bf00      	nop
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr
 80095f4:	40012c00 	.word	0x40012c00
 80095f8:	40013400 	.word	0x40013400
 80095fc:	40000400 	.word	0x40000400
 8009600:	40000800 	.word	0x40000800
 8009604:	40000c00 	.word	0x40000c00

08009608 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009624:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f023 0307 	bic.w	r3, r3, #7
 8009636:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	4313      	orrs	r3, r2
 8009640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	2b70      	cmp	r3, #112	; 0x70
 8009650:	d01a      	beq.n	8009688 <TIM_SlaveTimer_SetConfig+0x80>
 8009652:	2b70      	cmp	r3, #112	; 0x70
 8009654:	d860      	bhi.n	8009718 <TIM_SlaveTimer_SetConfig+0x110>
 8009656:	2b60      	cmp	r3, #96	; 0x60
 8009658:	d054      	beq.n	8009704 <TIM_SlaveTimer_SetConfig+0xfc>
 800965a:	2b60      	cmp	r3, #96	; 0x60
 800965c:	d85c      	bhi.n	8009718 <TIM_SlaveTimer_SetConfig+0x110>
 800965e:	2b50      	cmp	r3, #80	; 0x50
 8009660:	d046      	beq.n	80096f0 <TIM_SlaveTimer_SetConfig+0xe8>
 8009662:	2b50      	cmp	r3, #80	; 0x50
 8009664:	d858      	bhi.n	8009718 <TIM_SlaveTimer_SetConfig+0x110>
 8009666:	2b40      	cmp	r3, #64	; 0x40
 8009668:	d019      	beq.n	800969e <TIM_SlaveTimer_SetConfig+0x96>
 800966a:	2b40      	cmp	r3, #64	; 0x40
 800966c:	d854      	bhi.n	8009718 <TIM_SlaveTimer_SetConfig+0x110>
 800966e:	2b30      	cmp	r3, #48	; 0x30
 8009670:	d055      	beq.n	800971e <TIM_SlaveTimer_SetConfig+0x116>
 8009672:	2b30      	cmp	r3, #48	; 0x30
 8009674:	d850      	bhi.n	8009718 <TIM_SlaveTimer_SetConfig+0x110>
 8009676:	2b20      	cmp	r3, #32
 8009678:	d051      	beq.n	800971e <TIM_SlaveTimer_SetConfig+0x116>
 800967a:	2b20      	cmp	r3, #32
 800967c:	d84c      	bhi.n	8009718 <TIM_SlaveTimer_SetConfig+0x110>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d04d      	beq.n	800971e <TIM_SlaveTimer_SetConfig+0x116>
 8009682:	2b10      	cmp	r3, #16
 8009684:	d04b      	beq.n	800971e <TIM_SlaveTimer_SetConfig+0x116>
 8009686:	e047      	b.n	8009718 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	68d9      	ldr	r1, [r3, #12]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	f000 f8be 	bl	8009818 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800969c:	e040      	b.n	8009720 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d101      	bne.n	80096aa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e03b      	b.n	8009722 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	6a1b      	ldr	r3, [r3, #32]
 80096b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a1a      	ldr	r2, [r3, #32]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0201 	bic.w	r2, r2, #1
 80096c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	011b      	lsls	r3, r3, #4
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	4313      	orrs	r3, r2
 80096dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	621a      	str	r2, [r3, #32]
      break;
 80096ee:	e017      	b.n	8009720 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	6899      	ldr	r1, [r3, #8]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	461a      	mov	r2, r3
 80096fe:	f000 f814 	bl	800972a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009702:	e00d      	b.n	8009720 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6818      	ldr	r0, [r3, #0]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	6899      	ldr	r1, [r3, #8]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	461a      	mov	r2, r3
 8009712:	f000 f838 	bl	8009786 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009716:	e003      	b.n	8009720 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	75fb      	strb	r3, [r7, #23]
      break;
 800971c:	e000      	b.n	8009720 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800971e:	bf00      	nop
  }

  return status;
 8009720:	7dfb      	ldrb	r3, [r7, #23]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800972a:	b480      	push	{r7}
 800972c:	b087      	sub	sp, #28
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a1b      	ldr	r3, [r3, #32]
 800973a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6a1b      	ldr	r3, [r3, #32]
 8009740:	f023 0201 	bic.w	r2, r3, #1
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	011b      	lsls	r3, r3, #4
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	4313      	orrs	r3, r2
 800975e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f023 030a 	bic.w	r3, r3, #10
 8009766:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009768:	697a      	ldr	r2, [r7, #20]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4313      	orrs	r3, r2
 800976e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	621a      	str	r2, [r3, #32]
}
 800977c:	bf00      	nop
 800977e:	371c      	adds	r7, #28
 8009780:	46bd      	mov	sp, r7
 8009782:	bc80      	pop	{r7}
 8009784:	4770      	bx	lr

08009786 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009786:	b480      	push	{r7}
 8009788:	b087      	sub	sp, #28
 800978a:	af00      	add	r7, sp, #0
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	f023 0210 	bic.w	r2, r3, #16
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	031b      	lsls	r3, r3, #12
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	621a      	str	r2, [r3, #32]
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc80      	pop	{r7}
 80097e2:	4770      	bx	lr

080097e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4313      	orrs	r3, r2
 8009802:	f043 0307 	orr.w	r3, r3, #7
 8009806:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	609a      	str	r2, [r3, #8]
}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	bc80      	pop	{r7}
 8009816:	4770      	bx	lr

08009818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009818:	b480      	push	{r7}
 800981a:	b087      	sub	sp, #28
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	021a      	lsls	r2, r3, #8
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	431a      	orrs	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4313      	orrs	r3, r2
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	609a      	str	r2, [r3, #8]
}
 800984c:	bf00      	nop
 800984e:	371c      	adds	r7, #28
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr
	...

08009858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009868:	2b01      	cmp	r3, #1
 800986a:	d101      	bne.n	8009870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800986c:	2302      	movs	r3, #2
 800986e:	e050      	b.n	8009912 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2202      	movs	r2, #2
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a1b      	ldr	r2, [pc, #108]	; (800991c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d018      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a19      	ldr	r2, [pc, #100]	; (8009920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d013      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c6:	d00e      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a15      	ldr	r2, [pc, #84]	; (8009924 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d009      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a14      	ldr	r2, [pc, #80]	; (8009928 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d004      	beq.n	80098e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a12      	ldr	r2, [pc, #72]	; (800992c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d10c      	bne.n	8009900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	bc80      	pop	{r7}
 800991a:	4770      	bx	lr
 800991c:	40012c00 	.word	0x40012c00
 8009920:	40013400 	.word	0x40013400
 8009924:	40000400 	.word	0x40000400
 8009928:	40000800 	.word	0x40000800
 800992c:	40000c00 	.word	0x40000c00

08009930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	bc80      	pop	{r7}
 8009940:	4770      	bx	lr

08009942 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	bc80      	pop	{r7}
 8009952:	4770      	bx	lr

08009954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e042      	b.n	80099ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d106      	bne.n	8009980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7f9 f9b2 	bl	8002ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2224      	movs	r2, #36	; 0x24
 8009984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fe11 	bl	800a5c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691a      	ldr	r2, [r3, #16]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	695a      	ldr	r2, [r3, #20]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d112      	bne.n	8009a34 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <HAL_UART_Receive_IT+0x26>
 8009a14:	88fb      	ldrh	r3, [r7, #6]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e00b      	b.n	8009a36 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009a24:	88fb      	ldrh	r3, [r7, #6]
 8009a26:	461a      	mov	r2, r3
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fbcc 	bl	800a1c8 <UART_Start_Receive_IT>
 8009a30:	4603      	mov	r3, r0
 8009a32:	e000      	b.n	8009a36 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009a34:	2302      	movs	r3, #2
  }
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08c      	sub	sp, #48	; 0x30
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d156      	bne.n	8009b08 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <HAL_UART_Transmit_DMA+0x26>
 8009a60:	88fb      	ldrh	r3, [r7, #6]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d101      	bne.n	8009a6a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e04f      	b.n	8009b0a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	88fa      	ldrh	r2, [r7, #6]
 8009a74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	88fa      	ldrh	r2, [r7, #6]
 8009a7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2221      	movs	r2, #33	; 0x21
 8009a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	4a21      	ldr	r2, [pc, #132]	; (8009b14 <HAL_UART_Transmit_DMA+0xd4>)
 8009a90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a96:	4a20      	ldr	r2, [pc, #128]	; (8009b18 <HAL_UART_Transmit_DMA+0xd8>)
 8009a98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	4a1f      	ldr	r2, [pc, #124]	; (8009b1c <HAL_UART_Transmit_DMA+0xdc>)
 8009aa0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8009aaa:	f107 0308 	add.w	r3, r7, #8
 8009aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	6819      	ldr	r1, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	3304      	adds	r3, #4
 8009abe:	461a      	mov	r2, r3
 8009ac0:	88fb      	ldrh	r3, [r7, #6]
 8009ac2:	f7fa fba7 	bl	8004214 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ace:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3314      	adds	r3, #20
 8009ad6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	e853 3f00 	ldrex	r3, [r3]
 8009ade:	617b      	str	r3, [r7, #20]
   return(result);
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	3314      	adds	r3, #20
 8009aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af0:	627a      	str	r2, [r7, #36]	; 0x24
 8009af2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6a39      	ldr	r1, [r7, #32]
 8009af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009af8:	e841 2300 	strex	r3, r2, [r1]
 8009afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1e5      	bne.n	8009ad0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	e000      	b.n	8009b0a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009b08:	2302      	movs	r3, #2
  }
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3730      	adds	r7, #48	; 0x30
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	0800a07f 	.word	0x0800a07f
 8009b18:	0800a119 	.word	0x0800a119
 8009b1c:	0800a135 	.word	0x0800a135

08009b20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b0ba      	sub	sp, #232	; 0xe8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b56:	f003 030f 	and.w	r3, r3, #15
 8009b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10f      	bne.n	8009b86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d009      	beq.n	8009b86 <HAL_UART_IRQHandler+0x66>
 8009b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fc5f 	bl	800a442 <UART_Receive_IT>
      return;
 8009b84:	e25b      	b.n	800a03e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80de 	beq.w	8009d4c <HAL_UART_IRQHandler+0x22c>
 8009b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d106      	bne.n	8009baa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ba0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 80d1 	beq.w	8009d4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00b      	beq.n	8009bce <HAL_UART_IRQHandler+0xae>
 8009bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc6:	f043 0201 	orr.w	r2, r3, #1
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bd2:	f003 0304 	and.w	r3, r3, #4
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <HAL_UART_IRQHandler+0xd2>
 8009bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d005      	beq.n	8009bf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	f043 0202 	orr.w	r2, r3, #2
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <HAL_UART_IRQHandler+0xf6>
 8009bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d005      	beq.n	8009c16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0e:	f043 0204 	orr.w	r2, r3, #4
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c1a:	f003 0308 	and.w	r3, r3, #8
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d011      	beq.n	8009c46 <HAL_UART_IRQHandler+0x126>
 8009c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c26:	f003 0320 	and.w	r3, r3, #32
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d105      	bne.n	8009c3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3e:	f043 0208 	orr.w	r2, r3, #8
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f000 81f2 	beq.w	800a034 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d008      	beq.n	8009c6e <HAL_UART_IRQHandler+0x14e>
 8009c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c60:	f003 0320 	and.w	r3, r3, #32
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d002      	beq.n	8009c6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fbea 	bl	800a442 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	695b      	ldr	r3, [r3, #20]
 8009c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bf14      	ite	ne
 8009c7c:	2301      	movne	r3, #1
 8009c7e:	2300      	moveq	r3, #0
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8a:	f003 0308 	and.w	r3, r3, #8
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d103      	bne.n	8009c9a <HAL_UART_IRQHandler+0x17a>
 8009c92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d04f      	beq.n	8009d3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 faf4 	bl	800a288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d041      	beq.n	8009d32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3314      	adds	r3, #20
 8009cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3314      	adds	r3, #20
 8009cd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009cda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ce6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009cea:	e841 2300 	strex	r3, r2, [r1]
 8009cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1d9      	bne.n	8009cae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d013      	beq.n	8009d2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	4a7e      	ldr	r2, [pc, #504]	; (8009f00 <HAL_UART_IRQHandler+0x3e0>)
 8009d08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fa fb1c 	bl	800434c <HAL_DMA_Abort_IT>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d016      	beq.n	8009d48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009d24:	4610      	mov	r0, r2
 8009d26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d28:	e00e      	b.n	8009d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 f993 	bl	800a056 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d30:	e00a      	b.n	8009d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f98f 	bl	800a056 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d38:	e006      	b.n	8009d48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f98b 	bl	800a056 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009d46:	e175      	b.n	800a034 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d48:	bf00      	nop
    return;
 8009d4a:	e173      	b.n	800a034 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	f040 814f 	bne.w	8009ff4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8148 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d68:	f003 0310 	and.w	r3, r3, #16
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8141 	beq.w	8009ff4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d72:	2300      	movs	r3, #0
 8009d74:	60bb      	str	r3, [r7, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60bb      	str	r3, [r7, #8]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	60bb      	str	r3, [r7, #8]
 8009d86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	695b      	ldr	r3, [r3, #20]
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 80b6 	beq.w	8009f04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009da4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8145 	beq.w	800a038 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009db6:	429a      	cmp	r2, r3
 8009db8:	f080 813e 	bcs.w	800a038 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	f000 8088 	beq.w	8009ee0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	330c      	adds	r3, #12
 8009dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	330c      	adds	r3, #12
 8009df8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009dfc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1d9      	bne.n	8009dd0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3314      	adds	r3, #20
 8009e22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e26:	e853 3f00 	ldrex	r3, [r3]
 8009e2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e2e:	f023 0301 	bic.w	r3, r3, #1
 8009e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3314      	adds	r3, #20
 8009e3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e1      	bne.n	8009e1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3314      	adds	r3, #20
 8009e5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3314      	adds	r3, #20
 8009e78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e84:	e841 2300 	strex	r3, r2, [r1]
 8009e88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e3      	bne.n	8009e58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	330c      	adds	r3, #12
 8009ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eb0:	f023 0310 	bic.w	r3, r3, #16
 8009eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	330c      	adds	r3, #12
 8009ebe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009ec2:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ec4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ec8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009eca:	e841 2300 	strex	r3, r2, [r1]
 8009ece:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1e3      	bne.n	8009e9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fa f9fa 	bl	80042d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f8b6 	bl	800a068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009efc:	e09c      	b.n	800a038 <HAL_UART_IRQHandler+0x518>
 8009efe:	bf00      	nop
 8009f00:	0800a34d 	.word	0x0800a34d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 808e 	beq.w	800a03c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 8089 	beq.w	800a03c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	330c      	adds	r3, #12
 8009f30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	330c      	adds	r3, #12
 8009f4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009f4e:	647a      	str	r2, [r7, #68]	; 0x44
 8009f50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f56:	e841 2300 	strex	r3, r2, [r1]
 8009f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1e3      	bne.n	8009f2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3314      	adds	r3, #20
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	623b      	str	r3, [r7, #32]
   return(result);
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	f023 0301 	bic.w	r3, r3, #1
 8009f78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3314      	adds	r3, #20
 8009f82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f86:	633a      	str	r2, [r7, #48]	; 0x30
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	e841 2300 	strex	r3, r2, [r1]
 8009f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e3      	bne.n	8009f62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	330c      	adds	r3, #12
 8009fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	e853 3f00 	ldrex	r3, [r3]
 8009fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0310 	bic.w	r3, r3, #16
 8009fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	330c      	adds	r3, #12
 8009fc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009fcc:	61fa      	str	r2, [r7, #28]
 8009fce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	69b9      	ldr	r1, [r7, #24]
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e3      	bne.n	8009fa8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fe6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f83b 	bl	800a068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009ff2:	e023      	b.n	800a03c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <HAL_UART_IRQHandler+0x4f4>
 800a000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d003      	beq.n	800a014 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f9b1 	bl	800a374 <UART_Transmit_IT>
    return;
 800a012:	e014      	b.n	800a03e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00e      	beq.n	800a03e <HAL_UART_IRQHandler+0x51e>
 800a020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f9f0 	bl	800a412 <UART_EndTransmit_IT>
    return;
 800a032:	e004      	b.n	800a03e <HAL_UART_IRQHandler+0x51e>
    return;
 800a034:	bf00      	nop
 800a036:	e002      	b.n	800a03e <HAL_UART_IRQHandler+0x51e>
      return;
 800a038:	bf00      	nop
 800a03a:	e000      	b.n	800a03e <HAL_UART_IRQHandler+0x51e>
      return;
 800a03c:	bf00      	nop
  }
}
 800a03e:	37e8      	adds	r7, #232	; 0xe8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr

0800a056 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	bc80      	pop	{r7}
 800a066:	4770      	bx	lr

0800a068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	bc80      	pop	{r7}
 800a07c:	4770      	bx	lr

0800a07e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b090      	sub	sp, #64	; 0x40
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b00      	cmp	r3, #0
 800a098:	d137      	bne.n	800a10a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09c:	2200      	movs	r2, #0
 800a09e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3314      	adds	r3, #20
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	e853 3f00 	ldrex	r3, [r3]
 800a0ae:	623b      	str	r3, [r7, #32]
   return(result);
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0b6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3314      	adds	r3, #20
 800a0be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0c0:	633a      	str	r2, [r7, #48]	; 0x30
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c8:	e841 2300 	strex	r3, r2, [r1]
 800a0cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1e5      	bne.n	800a0a0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	330c      	adds	r3, #12
 800a0da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0f4:	61fa      	str	r2, [r7, #28]
 800a0f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	69b9      	ldr	r1, [r7, #24]
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	617b      	str	r3, [r7, #20]
   return(result);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e5      	bne.n	800a0d4 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a108:	e002      	b.n	800a110 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a10a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a10c:	f7f7 fe6c 	bl	8001de8 <HAL_UART_TxCpltCallback>
}
 800a110:	bf00      	nop
 800a112:	3740      	adds	r7, #64	; 0x40
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff ff8c 	bl	800a044 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a12c:	bf00      	nop
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	695b      	ldr	r3, [r3, #20]
 800a14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a150:	2b00      	cmp	r3, #0
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b21      	cmp	r3, #33	; 0x21
 800a166:	d108      	bne.n	800a17a <UART_DMAError+0x46>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2200      	movs	r2, #0
 800a172:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a174:	68b8      	ldr	r0, [r7, #8]
 800a176:	f000 f860 	bl	800a23a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	695b      	ldr	r3, [r3, #20]
 800a180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b22      	cmp	r3, #34	; 0x22
 800a19a:	d108      	bne.n	800a1ae <UART_DMAError+0x7a>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d005      	beq.n	800a1ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a1a8:	68b8      	ldr	r0, [r7, #8]
 800a1aa:	f000 f86d 	bl	800a288 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	f043 0210 	orr.w	r2, r3, #16
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1ba:	68b8      	ldr	r0, [r7, #8]
 800a1bc:	f7ff ff4b 	bl	800a056 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1c0:	bf00      	nop
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	88fa      	ldrh	r2, [r7, #6]
 800a1e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	88fa      	ldrh	r2, [r7, #6]
 800a1e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2222      	movs	r2, #34	; 0x22
 800a1f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a20c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	695a      	ldr	r2, [r3, #20]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f042 0201 	orr.w	r2, r2, #1
 800a21c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68da      	ldr	r2, [r3, #12]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f042 0220 	orr.w	r2, r2, #32
 800a22c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	bc80      	pop	{r7}
 800a238:	4770      	bx	lr

0800a23a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b089      	sub	sp, #36	; 0x24
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	330c      	adds	r3, #12
 800a248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	60bb      	str	r3, [r7, #8]
   return(result);
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a258:	61fb      	str	r3, [r7, #28]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	330c      	adds	r3, #12
 800a260:	69fa      	ldr	r2, [r7, #28]
 800a262:	61ba      	str	r2, [r7, #24]
 800a264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	6979      	ldr	r1, [r7, #20]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	613b      	str	r3, [r7, #16]
   return(result);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e5      	bne.n	800a242 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800a27e:	bf00      	nop
 800a280:	3724      	adds	r7, #36	; 0x24
 800a282:	46bd      	mov	sp, r7
 800a284:	bc80      	pop	{r7}
 800a286:	4770      	bx	lr

0800a288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a288:	b480      	push	{r7}
 800a28a:	b095      	sub	sp, #84	; 0x54
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	330c      	adds	r3, #12
 800a296:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29a:	e853 3f00 	ldrex	r3, [r3]
 800a29e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	330c      	adds	r3, #12
 800a2ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2b0:	643a      	str	r2, [r7, #64]	; 0x40
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e5      	bne.n	800a290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3314      	adds	r3, #20
 800a2ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	e853 3f00 	ldrex	r3, [r3]
 800a2d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	f023 0301 	bic.w	r3, r3, #1
 800a2da:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3314      	adds	r3, #20
 800a2e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ec:	e841 2300 	strex	r3, r2, [r1]
 800a2f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e5      	bne.n	800a2c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d119      	bne.n	800a334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	330c      	adds	r3, #12
 800a306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	e853 3f00 	ldrex	r3, [r3]
 800a30e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f023 0310 	bic.w	r3, r3, #16
 800a316:	647b      	str	r3, [r7, #68]	; 0x44
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	330c      	adds	r3, #12
 800a31e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a320:	61ba      	str	r2, [r7, #24]
 800a322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a324:	6979      	ldr	r1, [r7, #20]
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	e841 2300 	strex	r3, r2, [r1]
 800a32c:	613b      	str	r3, [r7, #16]
   return(result);
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e5      	bne.n	800a300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2220      	movs	r2, #32
 800a338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a342:	bf00      	nop
 800a344:	3754      	adds	r7, #84	; 0x54
 800a346:	46bd      	mov	sp, r7
 800a348:	bc80      	pop	{r7}
 800a34a:	4770      	bx	lr

0800a34c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a366:	68f8      	ldr	r0, [r7, #12]
 800a368:	f7ff fe75 	bl	800a056 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a36c:	bf00      	nop
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b21      	cmp	r3, #33	; 0x21
 800a386:	d13e      	bne.n	800a406 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a390:	d114      	bne.n	800a3bc <UART_Transmit_IT+0x48>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d110      	bne.n	800a3bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a3ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	1c9a      	adds	r2, r3, #2
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	621a      	str	r2, [r3, #32]
 800a3ba:	e008      	b.n	800a3ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a1b      	ldr	r3, [r3, #32]
 800a3c0:	1c59      	adds	r1, r3, #1
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6211      	str	r1, [r2, #32]
 800a3c6:	781a      	ldrb	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10f      	bne.n	800a402 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a400:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	e000      	b.n	800a408 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a406:	2302      	movs	r3, #2
  }
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bc80      	pop	{r7}
 800a410:	4770      	bx	lr

0800a412 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b082      	sub	sp, #8
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a428:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7f7 fcd8 	bl	8001de8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b08c      	sub	sp, #48	; 0x30
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b22      	cmp	r3, #34	; 0x22
 800a454:	f040 80ae 	bne.w	800a5b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a460:	d117      	bne.n	800a492 <UART_Receive_IT+0x50>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d113      	bne.n	800a492 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a46a:	2300      	movs	r3, #0
 800a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a472:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a480:	b29a      	uxth	r2, r3
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	1c9a      	adds	r2, r3, #2
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28
 800a490:	e026      	b.n	800a4e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a496:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4a4:	d007      	beq.n	800a4b6 <UART_Receive_IT+0x74>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <UART_Receive_IT+0x82>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d106      	bne.n	800a4c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	e008      	b.n	800a4d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d15d      	bne.n	800a5b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0220 	bic.w	r2, r2, #32
 800a502:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	695a      	ldr	r2, [r3, #20]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0201 	bic.w	r2, r2, #1
 800a522:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2220      	movs	r2, #32
 800a528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	2b01      	cmp	r3, #1
 800a538:	d135      	bne.n	800a5a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	330c      	adds	r3, #12
 800a546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	e853 3f00 	ldrex	r3, [r3]
 800a54e:	613b      	str	r3, [r7, #16]
   return(result);
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f023 0310 	bic.w	r3, r3, #16
 800a556:	627b      	str	r3, [r7, #36]	; 0x24
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	330c      	adds	r3, #12
 800a55e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a560:	623a      	str	r2, [r7, #32]
 800a562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a564:	69f9      	ldr	r1, [r7, #28]
 800a566:	6a3a      	ldr	r2, [r7, #32]
 800a568:	e841 2300 	strex	r3, r2, [r1]
 800a56c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1e5      	bne.n	800a540 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0310 	and.w	r3, r3, #16
 800a57e:	2b10      	cmp	r3, #16
 800a580:	d10a      	bne.n	800a598 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	60fb      	str	r3, [r7, #12]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7ff fd62 	bl	800a068 <HAL_UARTEx_RxEventCallback>
 800a5a4:	e002      	b.n	800a5ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7f7 fbba 	bl	8001d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	e002      	b.n	800a5b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e000      	b.n	800a5b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a5b4:	2302      	movs	r3, #2
  }
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3730      	adds	r7, #48	; 0x30
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	431a      	orrs	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a5fa:	f023 030c 	bic.w	r3, r3, #12
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	6812      	ldr	r2, [r2, #0]
 800a602:	68b9      	ldr	r1, [r7, #8]
 800a604:	430b      	orrs	r3, r1
 800a606:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	699a      	ldr	r2, [r3, #24]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	430a      	orrs	r2, r1
 800a61c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a2c      	ldr	r2, [pc, #176]	; (800a6d4 <UART_SetConfig+0x114>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d103      	bne.n	800a630 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a628:	f7fc fe58 	bl	80072dc <HAL_RCC_GetPCLK2Freq>
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	e002      	b.n	800a636 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a630:	f7fc fe40 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
 800a634:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4613      	mov	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4413      	add	r3, r2
 800a63e:	009a      	lsls	r2, r3, #2
 800a640:	441a      	add	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64c:	4a22      	ldr	r2, [pc, #136]	; (800a6d8 <UART_SetConfig+0x118>)
 800a64e:	fba2 2303 	umull	r2, r3, r2, r3
 800a652:	095b      	lsrs	r3, r3, #5
 800a654:	0119      	lsls	r1, r3, #4
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	009a      	lsls	r2, r3, #2
 800a660:	441a      	add	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	fbb2 f2f3 	udiv	r2, r2, r3
 800a66c:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <UART_SetConfig+0x118>)
 800a66e:	fba3 0302 	umull	r0, r3, r3, r2
 800a672:	095b      	lsrs	r3, r3, #5
 800a674:	2064      	movs	r0, #100	; 0x64
 800a676:	fb00 f303 	mul.w	r3, r0, r3
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	3332      	adds	r3, #50	; 0x32
 800a680:	4a15      	ldr	r2, [pc, #84]	; (800a6d8 <UART_SetConfig+0x118>)
 800a682:	fba2 2303 	umull	r2, r3, r2, r3
 800a686:	095b      	lsrs	r3, r3, #5
 800a688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a68c:	4419      	add	r1, r3
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	4613      	mov	r3, r2
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	009a      	lsls	r2, r3, #2
 800a698:	441a      	add	r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <UART_SetConfig+0x118>)
 800a6a6:	fba3 0302 	umull	r0, r3, r3, r2
 800a6aa:	095b      	lsrs	r3, r3, #5
 800a6ac:	2064      	movs	r0, #100	; 0x64
 800a6ae:	fb00 f303 	mul.w	r3, r0, r3
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	3332      	adds	r3, #50	; 0x32
 800a6b8:	4a07      	ldr	r2, [pc, #28]	; (800a6d8 <UART_SetConfig+0x118>)
 800a6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	f003 020f 	and.w	r2, r3, #15
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	440a      	add	r2, r1
 800a6ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a6cc:	bf00      	nop
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	40013800 	.word	0x40013800
 800a6d8:	51eb851f 	.word	0x51eb851f

0800a6dc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a6dc:	b084      	sub	sp, #16
 800a6de:	b480      	push	{r7}
 800a6e0:	b085      	sub	sp, #20
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
 800a6e6:	f107 001c 	add.w	r0, r7, #28
 800a6ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a6f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a6f6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a6fa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a6fe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a702:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a706:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a716:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	431a      	orrs	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3714      	adds	r7, #20
 800a728:	46bd      	mov	sp, r7
 800a72a:	bc80      	pop	{r7}
 800a72c:	b004      	add	sp, #16
 800a72e:	4770      	bx	lr

0800a730 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	bc80      	pop	{r7}
 800a746:	4770      	bx	lr

0800a748 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	bc80      	pop	{r7}
 800a766:	4770      	bx	lr

0800a768 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2203      	movs	r2, #3
 800a774:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bc80      	pop	{r7}
 800a780:	4770      	bx	lr

0800a782 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0303 	and.w	r3, r3, #3
}
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	bc80      	pop	{r7}
 800a79a:	4770      	bx	lr

0800a79c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a7ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a7c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a7c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a7d6:	f023 030f 	bic.w	r3, r3, #15
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr

0800a7ee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a7ee:	b480      	push	{r7}
 800a7f0:	b083      	sub	sp, #12
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	b2db      	uxtb	r3, r3
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	bc80      	pop	{r7}
 800a804:	4770      	bx	lr

0800a806 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3314      	adds	r3, #20
 800a814:	461a      	mov	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	4413      	add	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
}  
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr

0800a82a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b085      	sub	sp, #20
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a850:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a856:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a85c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4313      	orrs	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a868:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	431a      	orrs	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a874:	2300      	movs	r3, #0

}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bc80      	pop	{r7}
 800a87e:	4770      	bx	lr

0800a880 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a88e:	2310      	movs	r3, #16
 800a890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a892:	2340      	movs	r3, #64	; 0x40
 800a894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a89a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a89e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8a0:	f107 0308 	add.w	r3, r7, #8
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff ff78 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a8ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8b0:	2110      	movs	r1, #16
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fa18 	bl	800ace8 <SDMMC_GetCmdResp1>
 800a8b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8ba:	69fb      	ldr	r3, [r7, #28]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a8d2:	2311      	movs	r3, #17
 800a8d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8d6:	2340      	movs	r3, #64	; 0x40
 800a8d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8e4:	f107 0308 	add.w	r3, r7, #8
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff ff56 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f4:	2111      	movs	r1, #17
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f9f6 	bl	800ace8 <SDMMC_GetCmdResp1>
 800a8fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8fe:	69fb      	ldr	r3, [r7, #28]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a916:	2312      	movs	r3, #18
 800a918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a91a:	2340      	movs	r3, #64	; 0x40
 800a91c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a91e:	2300      	movs	r3, #0
 800a920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a926:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a928:	f107 0308 	add.w	r3, r7, #8
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f7ff ff34 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a934:	f241 3288 	movw	r2, #5000	; 0x1388
 800a938:	2112      	movs	r1, #18
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f9d4 	bl	800ace8 <SDMMC_GetCmdResp1>
 800a940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a942:	69fb      	ldr	r3, [r7, #28]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3720      	adds	r7, #32
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a95a:	2318      	movs	r3, #24
 800a95c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a95e:	2340      	movs	r3, #64	; 0x40
 800a960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a962:	2300      	movs	r3, #0
 800a964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a96a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f7ff ff12 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a978:	f241 3288 	movw	r2, #5000	; 0x1388
 800a97c:	2118      	movs	r1, #24
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f9b2 	bl	800ace8 <SDMMC_GetCmdResp1>
 800a984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a986:	69fb      	ldr	r3, [r7, #28]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a99e:	2319      	movs	r3, #25
 800a9a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9a2:	2340      	movs	r3, #64	; 0x40
 800a9a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9b0:	f107 0308 	add.w	r3, r7, #8
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff fef0 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a9bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c0:	2119      	movs	r1, #25
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f990 	bl	800ace8 <SDMMC_GetCmdResp1>
 800a9c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ca:	69fb      	ldr	r3, [r7, #28]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3720      	adds	r7, #32
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a9e0:	230c      	movs	r3, #12
 800a9e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9e4:	2340      	movs	r3, #64	; 0x40
 800a9e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9f2:	f107 0308 	add.w	r3, r7, #8
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f7ff fecf 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a9fe:	4a05      	ldr	r2, [pc, #20]	; (800aa14 <SDMMC_CmdStopTransfer+0x40>)
 800aa00:	210c      	movs	r1, #12
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f970 	bl	800ace8 <SDMMC_GetCmdResp1>
 800aa08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3720      	adds	r7, #32
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	05f5e100 	.word	0x05f5e100

0800aa18 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08a      	sub	sp, #40	; 0x28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aa28:	2307      	movs	r3, #7
 800aa2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa2c:	2340      	movs	r3, #64	; 0x40
 800aa2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa38:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa3a:	f107 0310 	add.w	r3, r7, #16
 800aa3e:	4619      	mov	r1, r3
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f7ff feab 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800aa46:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa4a:	2107      	movs	r1, #7
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 f94b 	bl	800ace8 <SDMMC_GetCmdResp1>
 800aa52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3728      	adds	r7, #40	; 0x28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b088      	sub	sp, #32
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa72:	2300      	movs	r3, #0
 800aa74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa7c:	f107 0308 	add.w	r3, r7, #8
 800aa80:	4619      	mov	r1, r3
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fe8a 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fb63 	bl	800b154 <SDMMC_GetCmdError>
 800aa8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa90:	69fb      	ldr	r3, [r7, #28]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3720      	adds	r7, #32
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b088      	sub	sp, #32
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aaa2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aaa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aaa8:	2308      	movs	r3, #8
 800aaaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaac:	2340      	movs	r3, #64	; 0x40
 800aaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aab0:	2300      	movs	r3, #0
 800aab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaba:	f107 0308 	add.w	r3, r7, #8
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f7ff fe6b 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 faf6 	bl	800b0b8 <SDMMC_GetCmdResp7>
 800aacc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aace:	69fb      	ldr	r3, [r7, #28]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3720      	adds	r7, #32
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aae6:	2337      	movs	r3, #55	; 0x37
 800aae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaea:	2340      	movs	r3, #64	; 0x40
 800aaec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aaf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aaf8:	f107 0308 	add.w	r3, r7, #8
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff fe4c 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ab04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab08:	2137      	movs	r1, #55	; 0x37
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f8ec 	bl	800ace8 <SDMMC_GetCmdResp1>
 800ab10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab12:	69fb      	ldr	r3, [r7, #28]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3720      	adds	r7, #32
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b088      	sub	sp, #32
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ab32:	2329      	movs	r3, #41	; 0x29
 800ab34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab36:	2340      	movs	r3, #64	; 0x40
 800ab38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab44:	f107 0308 	add.w	r3, r7, #8
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe26 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 f9ff 	bl	800af54 <SDMMC_GetCmdResp3>
 800ab56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab58:	69fb      	ldr	r3, [r7, #28]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3720      	adds	r7, #32
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b088      	sub	sp, #32
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ab70:	2306      	movs	r3, #6
 800ab72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab74:	2340      	movs	r3, #64	; 0x40
 800ab76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab82:	f107 0308 	add.w	r3, r7, #8
 800ab86:	4619      	mov	r1, r3
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f7ff fe07 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ab8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab92:	2106      	movs	r1, #6
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f8a7 	bl	800ace8 <SDMMC_GetCmdResp1>
 800ab9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab9c:	69fb      	ldr	r3, [r7, #28]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3720      	adds	r7, #32
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b088      	sub	sp, #32
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800abae:	2300      	movs	r3, #0
 800abb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800abb2:	2333      	movs	r3, #51	; 0x33
 800abb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abb6:	2340      	movs	r3, #64	; 0x40
 800abb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abba:	2300      	movs	r3, #0
 800abbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abc4:	f107 0308 	add.w	r3, r7, #8
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f7ff fde6 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800abd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd4:	2133      	movs	r1, #51	; 0x33
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 f886 	bl	800ace8 <SDMMC_GetCmdResp1>
 800abdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abde:	69fb      	ldr	r3, [r7, #28]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3720      	adds	r7, #32
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b088      	sub	sp, #32
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800abf4:	2302      	movs	r3, #2
 800abf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800abf8:	23c0      	movs	r3, #192	; 0xc0
 800abfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac06:	f107 0308 	add.w	r3, r7, #8
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff fdc5 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f956 	bl	800aec4 <SDMMC_GetCmdResp2>
 800ac18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac1a:	69fb      	ldr	r3, [r7, #28]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3720      	adds	r7, #32
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ac32:	2309      	movs	r3, #9
 800ac34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ac36:	23c0      	movs	r3, #192	; 0xc0
 800ac38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff fda6 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f937 	bl	800aec4 <SDMMC_GetCmdResp2>
 800ac56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac58:	69fb      	ldr	r3, [r7, #28]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3720      	adds	r7, #32
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b088      	sub	sp, #32
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ac70:	2303      	movs	r3, #3
 800ac72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac74:	2340      	movs	r3, #64	; 0x40
 800ac76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac82:	f107 0308 	add.w	r3, r7, #8
 800ac86:	4619      	mov	r1, r3
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7ff fd87 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	2103      	movs	r1, #3
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f99a 	bl	800afcc <SDMMC_GetCmdResp6>
 800ac98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac9a:	69fb      	ldr	r3, [r7, #28]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800acb2:	230d      	movs	r3, #13
 800acb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acb6:	2340      	movs	r3, #64	; 0x40
 800acb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acba:	2300      	movs	r3, #0
 800acbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800acbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acc4:	f107 0308 	add.w	r3, r7, #8
 800acc8:	4619      	mov	r1, r3
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f7ff fd66 	bl	800a79c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800acd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd4:	210d      	movs	r1, #13
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f806 	bl	800ace8 <SDMMC_GetCmdResp1>
 800acdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acde:	69fb      	ldr	r3, [r7, #28]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3720      	adds	r7, #32
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	460b      	mov	r3, r1
 800acf2:	607a      	str	r2, [r7, #4]
 800acf4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800acf6:	4b70      	ldr	r3, [pc, #448]	; (800aeb8 <SDMMC_GetCmdResp1+0x1d0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a70      	ldr	r2, [pc, #448]	; (800aebc <SDMMC_GetCmdResp1+0x1d4>)
 800acfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ad00:	0a5a      	lsrs	r2, r3, #9
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	fb02 f303 	mul.w	r3, r2, r3
 800ad08:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	1e5a      	subs	r2, r3, #1
 800ad0e:	61fa      	str	r2, [r7, #28]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d102      	bne.n	800ad1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad18:	e0c9      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad1e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d0ef      	beq.n	800ad0a <SDMMC_GetCmdResp1+0x22>
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1ea      	bne.n	800ad0a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2204      	movs	r2, #4
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad46:	2304      	movs	r3, #4
 800ad48:	e0b1      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e0a6      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	22c5      	movs	r2, #197	; 0xc5
 800ad64:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7ff fd41 	bl	800a7ee <SDIO_GetCommandResponse>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461a      	mov	r2, r3
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d001      	beq.n	800ad7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e099      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad7a:	2100      	movs	r1, #0
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f7ff fd42 	bl	800a806 <SDIO_GetResponse>
 800ad82:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	4b4e      	ldr	r3, [pc, #312]	; (800aec0 <SDMMC_GetCmdResp1+0x1d8>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e08d      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	da02      	bge.n	800ad9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ad98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad9c:	e087      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d001      	beq.n	800adac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	e080      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800adb6:	2380      	movs	r3, #128	; 0x80
 800adb8:	e079      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800adc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adc8:	e071      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800add4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800add8:	e069      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ade4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade8:	e061      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800adf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adf8:	e059      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae08:	e051      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae18:	e049      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ae24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae28:	e041      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ae34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae38:	e039      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae48:	e031      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae58:	e029      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae68:	e021      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae78:	e019      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ae88:	e011      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ae94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ae98:	e009      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f003 0308 	and.w	r3, r3, #8
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aea4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aea8:	e001      	b.n	800aeae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aeaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3720      	adds	r7, #32
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000084 	.word	0x20000084
 800aebc:	10624dd3 	.word	0x10624dd3
 800aec0:	fdffe008 	.word	0xfdffe008

0800aec4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aecc:	4b1f      	ldr	r3, [pc, #124]	; (800af4c <SDMMC_GetCmdResp2+0x88>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a1f      	ldr	r2, [pc, #124]	; (800af50 <SDMMC_GetCmdResp2+0x8c>)
 800aed2:	fba2 2303 	umull	r2, r3, r2, r3
 800aed6:	0a5b      	lsrs	r3, r3, #9
 800aed8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aedc:	fb02 f303 	mul.w	r3, r2, r3
 800aee0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	1e5a      	subs	r2, r3, #1
 800aee6:	60fa      	str	r2, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d102      	bne.n	800aef2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aeec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aef0:	e026      	b.n	800af40 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d0ef      	beq.n	800aee2 <SDMMC_GetCmdResp2+0x1e>
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1ea      	bne.n	800aee2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2204      	movs	r2, #4
 800af1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af1e:	2304      	movs	r3, #4
 800af20:	e00e      	b.n	800af40 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	f003 0301 	and.w	r3, r3, #1
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d004      	beq.n	800af38 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af34:	2301      	movs	r3, #1
 800af36:	e003      	b.n	800af40 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	22c5      	movs	r2, #197	; 0xc5
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	bc80      	pop	{r7}
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	20000084 	.word	0x20000084
 800af50:	10624dd3 	.word	0x10624dd3

0800af54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af5c:	4b19      	ldr	r3, [pc, #100]	; (800afc4 <SDMMC_GetCmdResp3+0x70>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a19      	ldr	r2, [pc, #100]	; (800afc8 <SDMMC_GetCmdResp3+0x74>)
 800af62:	fba2 2303 	umull	r2, r3, r2, r3
 800af66:	0a5b      	lsrs	r3, r3, #9
 800af68:	f241 3288 	movw	r2, #5000	; 0x1388
 800af6c:	fb02 f303 	mul.w	r3, r2, r3
 800af70:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	1e5a      	subs	r2, r3, #1
 800af76:	60fa      	str	r2, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af80:	e01b      	b.n	800afba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af86:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0ef      	beq.n	800af72 <SDMMC_GetCmdResp3+0x1e>
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1ea      	bne.n	800af72 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d004      	beq.n	800afb2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2204      	movs	r2, #4
 800afac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afae:	2304      	movs	r3, #4
 800afb0:	e003      	b.n	800afba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	22c5      	movs	r2, #197	; 0xc5
 800afb6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bc80      	pop	{r7}
 800afc2:	4770      	bx	lr
 800afc4:	20000084 	.word	0x20000084
 800afc8:	10624dd3 	.word	0x10624dd3

0800afcc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	460b      	mov	r3, r1
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afda:	4b35      	ldr	r3, [pc, #212]	; (800b0b0 <SDMMC_GetCmdResp6+0xe4>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a35      	ldr	r2, [pc, #212]	; (800b0b4 <SDMMC_GetCmdResp6+0xe8>)
 800afe0:	fba2 2303 	umull	r2, r3, r2, r3
 800afe4:	0a5b      	lsrs	r3, r3, #9
 800afe6:	f241 3288 	movw	r2, #5000	; 0x1388
 800afea:	fb02 f303 	mul.w	r3, r2, r3
 800afee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	1e5a      	subs	r2, r3, #1
 800aff4:	61fa      	str	r2, [r7, #28]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d102      	bne.n	800b000 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800affa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800affe:	e052      	b.n	800b0a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b004:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d0ef      	beq.n	800aff0 <SDMMC_GetCmdResp6+0x24>
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1ea      	bne.n	800aff0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	d004      	beq.n	800b030 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2204      	movs	r2, #4
 800b02a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b02c:	2304      	movs	r3, #4
 800b02e:	e03a      	b.n	800b0a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b034:	f003 0301 	and.w	r3, r3, #1
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d004      	beq.n	800b046 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2201      	movs	r2, #1
 800b040:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b042:	2301      	movs	r3, #1
 800b044:	e02f      	b.n	800b0a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f7ff fbd1 	bl	800a7ee <SDIO_GetCommandResponse>
 800b04c:	4603      	mov	r3, r0
 800b04e:	461a      	mov	r2, r3
 800b050:	7afb      	ldrb	r3, [r7, #11]
 800b052:	4293      	cmp	r3, r2
 800b054:	d001      	beq.n	800b05a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b056:	2301      	movs	r3, #1
 800b058:	e025      	b.n	800b0a6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	22c5      	movs	r2, #197	; 0xc5
 800b05e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b060:	2100      	movs	r1, #0
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7ff fbcf 	bl	800a806 <SDIO_GetResponse>
 800b068:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d106      	bne.n	800b082 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	0c1b      	lsrs	r3, r3, #16
 800b078:	b29a      	uxth	r2, r3
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b07e:	2300      	movs	r3, #0
 800b080:	e011      	b.n	800b0a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b08c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b090:	e009      	b.n	800b0a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b09c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0a0:	e001      	b.n	800b0a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3720      	adds	r7, #32
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000084 	.word	0x20000084
 800b0b4:	10624dd3 	.word	0x10624dd3

0800b0b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0c0:	4b22      	ldr	r3, [pc, #136]	; (800b14c <SDMMC_GetCmdResp7+0x94>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a22      	ldr	r2, [pc, #136]	; (800b150 <SDMMC_GetCmdResp7+0x98>)
 800b0c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ca:	0a5b      	lsrs	r3, r3, #9
 800b0cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0d0:	fb02 f303 	mul.w	r3, r2, r3
 800b0d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	1e5a      	subs	r2, r3, #1
 800b0da:	60fa      	str	r2, [r7, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d102      	bne.n	800b0e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0e4:	e02c      	b.n	800b140 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0ef      	beq.n	800b0d6 <SDMMC_GetCmdResp7+0x1e>
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1ea      	bne.n	800b0d6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d004      	beq.n	800b116 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2204      	movs	r2, #4
 800b110:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b112:	2304      	movs	r3, #4
 800b114:	e014      	b.n	800b140 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d004      	beq.n	800b12c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b128:	2301      	movs	r3, #1
 800b12a:	e009      	b.n	800b140 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2240      	movs	r2, #64	; 0x40
 800b13c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b13e:	2300      	movs	r3, #0
  
}
 800b140:	4618      	mov	r0, r3
 800b142:	3714      	adds	r7, #20
 800b144:	46bd      	mov	sp, r7
 800b146:	bc80      	pop	{r7}
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	20000084 	.word	0x20000084
 800b150:	10624dd3 	.word	0x10624dd3

0800b154 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b15c:	4b10      	ldr	r3, [pc, #64]	; (800b1a0 <SDMMC_GetCmdError+0x4c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a10      	ldr	r2, [pc, #64]	; (800b1a4 <SDMMC_GetCmdError+0x50>)
 800b162:	fba2 2303 	umull	r2, r3, r2, r3
 800b166:	0a5b      	lsrs	r3, r3, #9
 800b168:	f241 3288 	movw	r2, #5000	; 0x1388
 800b16c:	fb02 f303 	mul.w	r3, r2, r3
 800b170:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	1e5a      	subs	r2, r3, #1
 800b176:	60fa      	str	r2, [r7, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b17c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b180:	e009      	b.n	800b196 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d0f1      	beq.n	800b172 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	22c5      	movs	r2, #197	; 0xc5
 800b192:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bc80      	pop	{r7}
 800b19e:	4770      	bx	lr
 800b1a0:	20000084 	.word	0x20000084
 800b1a4:	10624dd3 	.word	0x10624dd3

0800b1a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	b480      	push	{r7}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	f107 0014 	add.w	r0, r7, #20
 800b1b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bc80      	pop	{r7}
 800b1c4:	b004      	add	sp, #16
 800b1c6:	4770      	bx	lr

0800b1c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b1d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800b1dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bc80      	pop	{r7}
 800b1f2:	4770      	bx	lr

0800b1f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b1fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800b200:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b208:	b29a      	uxth	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	43db      	mvns	r3, r3
 800b210:	b29b      	uxth	r3, r3
 800b212:	4013      	ands	r3, r2
 800b214:	b29a      	uxth	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	bc80      	pop	{r7}
 800b226:	4770      	bx	lr

0800b228 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	370c      	adds	r7, #12
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bc80      	pop	{r7}
 800b23e:	4770      	bx	lr

0800b240 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b240:	b084      	sub	sp, #16
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	f107 0014 	add.w	r0, r7, #20
 800b24e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	bc80      	pop	{r7}
 800b27c:	b004      	add	sp, #16
 800b27e:	4770      	bx	lr

0800b280 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b280:	b480      	push	{r7}
 800b282:	b09d      	sub	sp, #116	; 0x74
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b28a:	2300      	movs	r3, #0
 800b28c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b2a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	78db      	ldrb	r3, [r3, #3]
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d81f      	bhi.n	800b2f2 <USB_ActivateEndpoint+0x72>
 800b2b2:	a201      	add	r2, pc, #4	; (adr r2, 800b2b8 <USB_ActivateEndpoint+0x38>)
 800b2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b8:	0800b2c9 	.word	0x0800b2c9
 800b2bc:	0800b2e5 	.word	0x0800b2e5
 800b2c0:	0800b2fb 	.word	0x0800b2fb
 800b2c4:	0800b2d7 	.word	0x0800b2d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b2c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b2cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b2d4:	e012      	b.n	800b2fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b2d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b2da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b2de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b2e2:	e00b      	b.n	800b2fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b2e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b2e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b2f0:	e004      	b.n	800b2fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b2f8:	e000      	b.n	800b2fc <USB_ActivateEndpoint+0x7c>
      break;
 800b2fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	441a      	add	r2, r3
 800b306:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b30a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b30e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b334:	b29a      	uxth	r2, r3
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	4313      	orrs	r3, r2
 800b33e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	441a      	add	r2, r3
 800b34c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b360:	b29b      	uxth	r3, r3
 800b362:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	7b1b      	ldrb	r3, [r3, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f040 8178 	bne.w	800b65e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	785b      	ldrb	r3, [r3, #1]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8084 	beq.w	800b480 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	61bb      	str	r3, [r7, #24]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b382:	b29b      	uxth	r3, r3
 800b384:	461a      	mov	r2, r3
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	4413      	add	r3, r2
 800b38a:	61bb      	str	r3, [r7, #24]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	011a      	lsls	r2, r3, #4
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b39a:	617b      	str	r3, [r7, #20]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	88db      	ldrh	r3, [r3, #6]
 800b3a0:	085b      	lsrs	r3, r3, #1
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4413      	add	r3, r2
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	827b      	strh	r3, [r7, #18]
 800b3ba:	8a7b      	ldrh	r3, [r7, #18]
 800b3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d01b      	beq.n	800b3fc <USB_ActivateEndpoint+0x17c>
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	881b      	ldrh	r3, [r3, #0]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3da:	823b      	strh	r3, [r7, #16]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	441a      	add	r2, r3
 800b3e6:	8a3b      	ldrh	r3, [r7, #16]
 800b3e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	78db      	ldrb	r3, [r3, #3]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d020      	beq.n	800b446 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	881b      	ldrh	r3, [r3, #0]
 800b410:	b29b      	uxth	r3, r3
 800b412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b41a:	81bb      	strh	r3, [r7, #12]
 800b41c:	89bb      	ldrh	r3, [r7, #12]
 800b41e:	f083 0320 	eor.w	r3, r3, #32
 800b422:	81bb      	strh	r3, [r7, #12]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	441a      	add	r2, r3
 800b42e:	89bb      	ldrh	r3, [r7, #12]
 800b430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b440:	b29b      	uxth	r3, r3
 800b442:	8013      	strh	r3, [r2, #0]
 800b444:	e2d5      	b.n	800b9f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	881b      	ldrh	r3, [r3, #0]
 800b452:	b29b      	uxth	r3, r3
 800b454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b45c:	81fb      	strh	r3, [r7, #14]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	441a      	add	r2, r3
 800b468:	89fb      	ldrh	r3, [r7, #14]
 800b46a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b46e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	8013      	strh	r3, [r2, #0]
 800b47e:	e2b8      	b.n	800b9f2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	633b      	str	r3, [r7, #48]	; 0x30
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	461a      	mov	r2, r3
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	4413      	add	r3, r2
 800b492:	633b      	str	r3, [r7, #48]	; 0x30
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	011a      	lsls	r2, r3, #4
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800b4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	88db      	ldrh	r3, [r3, #6]
 800b4a8:	085b      	lsrs	r3, r3, #1
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c4:	4413      	add	r3, r2
 800b4c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	011a      	lsls	r2, r3, #4
 800b4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d0:	4413      	add	r3, r2
 800b4d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b4d6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	801a      	strh	r2, [r3, #0]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	2b3e      	cmp	r3, #62	; 0x3e
 800b4ee:	d91d      	bls.n	800b52c <USB_ActivateEndpoint+0x2ac>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	095b      	lsrs	r3, r3, #5
 800b4f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	f003 031f 	and.w	r3, r3, #31
 800b500:	2b00      	cmp	r3, #0
 800b502:	d102      	bne.n	800b50a <USB_ActivateEndpoint+0x28a>
 800b504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b506:	3b01      	subs	r3, #1
 800b508:	66bb      	str	r3, [r7, #104]	; 0x68
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b512:	b29b      	uxth	r3, r3
 800b514:	029b      	lsls	r3, r3, #10
 800b516:	b29b      	uxth	r3, r3
 800b518:	4313      	orrs	r3, r2
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b524:	b29a      	uxth	r2, r3
 800b526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b528:	801a      	strh	r2, [r3, #0]
 800b52a:	e026      	b.n	800b57a <USB_ActivateEndpoint+0x2fa>
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <USB_ActivateEndpoint+0x2ca>
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b53e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b542:	b29a      	uxth	r2, r3
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b546:	801a      	strh	r2, [r3, #0]
 800b548:	e017      	b.n	800b57a <USB_ActivateEndpoint+0x2fa>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	085b      	lsrs	r3, r3, #1
 800b550:	66bb      	str	r3, [r7, #104]	; 0x68
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <USB_ActivateEndpoint+0x2e4>
 800b55e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b560:	3301      	adds	r3, #1
 800b562:	66bb      	str	r3, [r7, #104]	; 0x68
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	b29a      	uxth	r2, r3
 800b56a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	029b      	lsls	r3, r3, #10
 800b570:	b29b      	uxth	r3, r3
 800b572:	4313      	orrs	r3, r2
 800b574:	b29a      	uxth	r2, r3
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	881b      	ldrh	r3, [r3, #0]
 800b586:	847b      	strh	r3, [r7, #34]	; 0x22
 800b588:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b58a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d01b      	beq.n	800b5ca <USB_ActivateEndpoint+0x34a>
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	4413      	add	r3, r2
 800b59c:	881b      	ldrh	r3, [r3, #0]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a8:	843b      	strh	r3, [r7, #32]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	441a      	add	r2, r3
 800b5b4:	8c3b      	ldrh	r3, [r7, #32]
 800b5b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d124      	bne.n	800b61c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	881b      	ldrh	r3, [r3, #0]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e8:	83bb      	strh	r3, [r7, #28]
 800b5ea:	8bbb      	ldrh	r3, [r7, #28]
 800b5ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b5f0:	83bb      	strh	r3, [r7, #28]
 800b5f2:	8bbb      	ldrh	r3, [r7, #28]
 800b5f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b5f8:	83bb      	strh	r3, [r7, #28]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	441a      	add	r2, r3
 800b604:	8bbb      	ldrh	r3, [r7, #28]
 800b606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b60a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b60e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b616:	b29b      	uxth	r3, r3
 800b618:	8013      	strh	r3, [r2, #0]
 800b61a:	e1ea      	b.n	800b9f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4413      	add	r3, r2
 800b626:	881b      	ldrh	r3, [r3, #0]
 800b628:	b29b      	uxth	r3, r3
 800b62a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b632:	83fb      	strh	r3, [r7, #30]
 800b634:	8bfb      	ldrh	r3, [r7, #30]
 800b636:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b63a:	83fb      	strh	r3, [r7, #30]
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	441a      	add	r2, r3
 800b646:	8bfb      	ldrh	r3, [r7, #30]
 800b648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b64c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b658:	b29b      	uxth	r3, r3
 800b65a:	8013      	strh	r3, [r2, #0]
 800b65c:	e1c9      	b.n	800b9f2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	78db      	ldrb	r3, [r3, #3]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d11e      	bne.n	800b6a4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	b29b      	uxth	r3, r3
 800b674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b67c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	441a      	add	r2, r3
 800b68a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b68e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b696:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	8013      	strh	r3, [r2, #0]
 800b6a2:	e01d      	b.n	800b6e0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	881b      	ldrh	r3, [r3, #0]
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	441a      	add	r2, r3
 800b6c8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b6cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6f0:	4413      	add	r3, r2
 800b6f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	011a      	lsls	r2, r3, #4
 800b6fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b702:	65bb      	str	r3, [r7, #88]	; 0x58
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	891b      	ldrh	r3, [r3, #8]
 800b708:	085b      	lsrs	r3, r3, #1
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	005b      	lsls	r3, r3, #1
 800b70e:	b29a      	uxth	r2, r3
 800b710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b712:	801a      	strh	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	657b      	str	r3, [r7, #84]	; 0x54
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b71e:	b29b      	uxth	r3, r3
 800b720:	461a      	mov	r2, r3
 800b722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b724:	4413      	add	r3, r2
 800b726:	657b      	str	r3, [r7, #84]	; 0x54
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	011a      	lsls	r2, r3, #4
 800b72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b730:	4413      	add	r3, r2
 800b732:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800b736:	653b      	str	r3, [r7, #80]	; 0x50
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	895b      	ldrh	r3, [r3, #10]
 800b73c:	085b      	lsrs	r3, r3, #1
 800b73e:	b29b      	uxth	r3, r3
 800b740:	005b      	lsls	r3, r3, #1
 800b742:	b29a      	uxth	r2, r3
 800b744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b746:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	785b      	ldrb	r3, [r3, #1]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f040 8093 	bne.w	800b878 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	881b      	ldrh	r3, [r3, #0]
 800b75e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d01b      	beq.n	800b7a6 <USB_ActivateEndpoint+0x526>
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4413      	add	r3, r2
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b784:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	441a      	add	r2, r3
 800b790:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b79a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b7b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d01b      	beq.n	800b7f6 <USB_ActivateEndpoint+0x576>
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7d4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	441a      	add	r2, r3
 800b7e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b7e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	b29b      	uxth	r3, r3
 800b804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80c:	873b      	strh	r3, [r7, #56]	; 0x38
 800b80e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b810:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b814:	873b      	strh	r3, [r7, #56]	; 0x38
 800b816:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b818:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b81c:	873b      	strh	r3, [r7, #56]	; 0x38
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	781b      	ldrb	r3, [r3, #0]
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	441a      	add	r2, r3
 800b828:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b82a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b82e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	4413      	add	r3, r2
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b854:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	441a      	add	r2, r3
 800b860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b86a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b86e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b872:	b29b      	uxth	r3, r3
 800b874:	8013      	strh	r3, [r2, #0]
 800b876:	e0bc      	b.n	800b9f2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b88c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01d      	beq.n	800b8d0 <USB_ActivateEndpoint+0x650>
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	881b      	ldrh	r3, [r3, #0]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	441a      	add	r2, r3
 800b8b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b8bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b8c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b8e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01d      	beq.n	800b928 <USB_ActivateEndpoint+0x6a8>
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b902:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	441a      	add	r2, r3
 800b910:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b91c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b920:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b924:	b29b      	uxth	r3, r3
 800b926:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	78db      	ldrb	r3, [r3, #3]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d024      	beq.n	800b97a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b946:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b94a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b94e:	f083 0320 	eor.w	r3, r3, #32
 800b952:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	441a      	add	r2, r3
 800b960:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b96c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b974:	b29b      	uxth	r3, r3
 800b976:	8013      	strh	r3, [r2, #0]
 800b978:	e01d      	b.n	800b9b6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	881b      	ldrh	r3, [r3, #0]
 800b986:	b29b      	uxth	r3, r3
 800b988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b98c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b990:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	441a      	add	r2, r3
 800b99e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b9a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	441a      	add	r2, r3
 800b9da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b9de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b9f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3774      	adds	r7, #116	; 0x74
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bc80      	pop	{r7}
 800b9fe:	4770      	bx	lr

0800ba00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b08d      	sub	sp, #52	; 0x34
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	7b1b      	ldrb	r3, [r3, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f040 808e 	bne.w	800bb30 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	785b      	ldrb	r3, [r3, #1]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d044      	beq.n	800baa6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4413      	add	r3, r2
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	81bb      	strh	r3, [r7, #12]
 800ba2a:	89bb      	ldrh	r3, [r7, #12]
 800ba2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d01b      	beq.n	800ba6c <USB_DeactivateEndpoint+0x6c>
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba4a:	817b      	strh	r3, [r7, #10]
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	441a      	add	r2, r3
 800ba56:	897b      	ldrh	r3, [r7, #10]
 800ba58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	881b      	ldrh	r3, [r3, #0]
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba82:	813b      	strh	r3, [r7, #8]
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	441a      	add	r2, r3
 800ba8e:	893b      	ldrh	r3, [r7, #8]
 800ba90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	8013      	strh	r3, [r2, #0]
 800baa4:	e192      	b.n	800bdcc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	827b      	strh	r3, [r7, #18]
 800bab4:	8a7b      	ldrh	r3, [r7, #18]
 800bab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d01b      	beq.n	800baf6 <USB_DeactivateEndpoint+0xf6>
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bad4:	823b      	strh	r3, [r7, #16]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	441a      	add	r2, r3
 800bae0:	8a3b      	ldrh	r3, [r7, #16]
 800bae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800baee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800baf6:	687a      	ldr	r2, [r7, #4]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4413      	add	r3, r2
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb0c:	81fb      	strh	r3, [r7, #14]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	441a      	add	r2, r3
 800bb18:	89fb      	ldrh	r3, [r7, #14]
 800bb1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	8013      	strh	r3, [r2, #0]
 800bb2e:	e14d      	b.n	800bdcc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	785b      	ldrb	r3, [r3, #1]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f040 80a5 	bne.w	800bc84 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	843b      	strh	r3, [r7, #32]
 800bb48:	8c3b      	ldrh	r3, [r7, #32]
 800bb4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d01b      	beq.n	800bb8a <USB_DeactivateEndpoint+0x18a>
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	881b      	ldrh	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb68:	83fb      	strh	r3, [r7, #30]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	441a      	add	r2, r3
 800bb74:	8bfb      	ldrh	r3, [r7, #30]
 800bb76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bb82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	83bb      	strh	r3, [r7, #28]
 800bb98:	8bbb      	ldrh	r3, [r7, #28]
 800bb9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d01b      	beq.n	800bbda <USB_DeactivateEndpoint+0x1da>
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	881b      	ldrh	r3, [r3, #0]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbb8:	837b      	strh	r3, [r7, #26]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	441a      	add	r2, r3
 800bbc4:	8b7b      	ldrh	r3, [r7, #26]
 800bbc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbf0:	833b      	strh	r3, [r7, #24]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	441a      	add	r2, r3
 800bbfc:	8b3b      	ldrh	r3, [r7, #24]
 800bbfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc0a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc28:	82fb      	strh	r3, [r7, #22]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	441a      	add	r2, r3
 800bc34:	8afb      	ldrh	r3, [r7, #22]
 800bc36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc60:	82bb      	strh	r3, [r7, #20]
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	441a      	add	r2, r3
 800bc6c:	8abb      	ldrh	r3, [r7, #20]
 800bc6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	8013      	strh	r3, [r2, #0]
 800bc82:	e0a3      	b.n	800bdcc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	881b      	ldrh	r3, [r3, #0]
 800bc90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d01b      	beq.n	800bcd4 <USB_DeactivateEndpoint+0x2d4>
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	441a      	add	r2, r3
 800bcbe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bcc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	4413      	add	r3, r2
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bce2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01b      	beq.n	800bd24 <USB_DeactivateEndpoint+0x324>
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	781b      	ldrb	r3, [r3, #0]
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	4413      	add	r3, r2
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd02:	853b      	strh	r3, [r7, #40]	; 0x28
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	441a      	add	r2, r3
 800bd0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd3a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	441a      	add	r2, r3
 800bd46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bd48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4413      	add	r3, r2
 800bd66:	881b      	ldrh	r3, [r3, #0]
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd72:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	441a      	add	r2, r3
 800bd7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdaa:	847b      	strh	r3, [r7, #34]	; 0x22
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	441a      	add	r2, r3
 800bdb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3734      	adds	r7, #52	; 0x34
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bc80      	pop	{r7}
 800bdd6:	4770      	bx	lr

0800bdd8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b0c2      	sub	sp, #264	; 0x108
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde6:	6018      	str	r0, [r3, #0]
 800bde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdf0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bdf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	785b      	ldrb	r3, [r3, #1]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	f040 86b7 	bne.w	800cb72 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800be04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	699a      	ldr	r2, [r3, #24]
 800be10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d908      	bls.n	800be32 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800be20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800be30:	e007      	b.n	800be42 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800be32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	699b      	ldr	r3, [r3, #24]
 800be3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800be42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	7b1b      	ldrb	r3, [r3, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d13a      	bne.n	800bec8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800be52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6959      	ldr	r1, [r3, #20]
 800be5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	88da      	ldrh	r2, [r3, #6]
 800be6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be6e:	b29b      	uxth	r3, r3
 800be70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800be74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800be78:	6800      	ldr	r0, [r0, #0]
 800be7a:	f001 fc9c 	bl	800d7b6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800be7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	613b      	str	r3, [r7, #16]
 800be8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be98:	b29b      	uxth	r3, r3
 800be9a:	461a      	mov	r2, r3
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	4413      	add	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	011a      	lsls	r2, r3, #4
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	4413      	add	r3, r2
 800beb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bebe:	b29a      	uxth	r2, r3
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	801a      	strh	r2, [r3, #0]
 800bec4:	f000 be1f 	b.w	800cb06 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800bec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800becc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	78db      	ldrb	r3, [r3, #3]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	f040 8462 	bne.w	800c79e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800beda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6a1a      	ldr	r2, [r3, #32]
 800bee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	f240 83df 	bls.w	800c6b6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800befc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800bf22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	441a      	add	r2, r3
 800bf3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bf40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bf4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800bf54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	6a1a      	ldr	r2, [r3, #32]
 800bf60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf64:	1ad2      	subs	r2, r2, r3
 800bf66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bf72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	881b      	ldrh	r3, [r3, #0]
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 81c7 	beq.w	800c328 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	633b      	str	r3, [r7, #48]	; 0x30
 800bfa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	785b      	ldrb	r3, [r3, #1]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d177      	bne.n	800c0a6 <USB_EPStartXfer+0x2ce>
 800bfb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	4413      	add	r3, r2
 800bfd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	011a      	lsls	r2, r3, #4
 800bfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfea:	4413      	add	r3, r2
 800bfec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bff0:	627b      	str	r3, [r7, #36]	; 0x24
 800bff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c000:	801a      	strh	r2, [r3, #0]
 800c002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c006:	2b3e      	cmp	r3, #62	; 0x3e
 800c008:	d921      	bls.n	800c04e <USB_EPStartXfer+0x276>
 800c00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c00e:	095b      	lsrs	r3, r3, #5
 800c010:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c018:	f003 031f 	and.w	r3, r3, #31
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d104      	bne.n	800c02a <USB_EPStartXfer+0x252>
 800c020:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c024:	3b01      	subs	r3, #1
 800c026:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	881b      	ldrh	r3, [r3, #0]
 800c02e:	b29a      	uxth	r2, r3
 800c030:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c034:	b29b      	uxth	r3, r3
 800c036:	029b      	lsls	r3, r3, #10
 800c038:	b29b      	uxth	r3, r3
 800c03a:	4313      	orrs	r3, r2
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c046:	b29a      	uxth	r2, r3
 800c048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04a:	801a      	strh	r2, [r3, #0]
 800c04c:	e050      	b.n	800c0f0 <USB_EPStartXfer+0x318>
 800c04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10a      	bne.n	800c06c <USB_EPStartXfer+0x294>
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c064:	b29a      	uxth	r2, r3
 800c066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c068:	801a      	strh	r2, [r3, #0]
 800c06a:	e041      	b.n	800c0f0 <USB_EPStartXfer+0x318>
 800c06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c070:	085b      	lsrs	r3, r3, #1
 800c072:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <USB_EPStartXfer+0x2b4>
 800c082:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c086:	3301      	adds	r3, #1
 800c088:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	b29a      	uxth	r2, r3
 800c092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c096:	b29b      	uxth	r3, r3
 800c098:	029b      	lsls	r3, r3, #10
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	4313      	orrs	r3, r2
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	801a      	strh	r2, [r3, #0]
 800c0a4:	e024      	b.n	800c0f0 <USB_EPStartXfer+0x318>
 800c0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	785b      	ldrb	r3, [r3, #1]
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d11c      	bne.n	800c0f0 <USB_EPStartXfer+0x318>
 800c0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	4413      	add	r3, r2
 800c0cc:	633b      	str	r3, [r7, #48]	; 0x30
 800c0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	011a      	lsls	r2, r3, #4
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	4413      	add	r3, r2
 800c0e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	895b      	ldrh	r3, [r3, #10]
 800c0fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	6959      	ldr	r1, [r3, #20]
 800c10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c110:	b29b      	uxth	r3, r3
 800c112:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c116:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c11a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c11e:	6800      	ldr	r0, [r0, #0]
 800c120:	f001 fb49 	bl	800d7b6 <USB_WritePMA>
            ep->xfer_buff += len;
 800c124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	695a      	ldr	r2, [r3, #20]
 800c130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c134:	441a      	add	r2, r3
 800c136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	6a1a      	ldr	r2, [r3, #32]
 800c14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d90f      	bls.n	800c17e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800c15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6a1a      	ldr	r2, [r3, #32]
 800c16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	621a      	str	r2, [r3, #32]
 800c17c:	e00e      	b.n	800c19c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800c17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2200      	movs	r2, #0
 800c19a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	785b      	ldrb	r3, [r3, #1]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d177      	bne.n	800c29c <USB_EPStartXfer+0x4c4>
 800c1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	61bb      	str	r3, [r7, #24]
 800c1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	011a      	lsls	r2, r3, #4
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	b29b      	uxth	r3, r3
 800c1ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	801a      	strh	r2, [r3, #0]
 800c1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1fc:	2b3e      	cmp	r3, #62	; 0x3e
 800c1fe:	d921      	bls.n	800c244 <USB_EPStartXfer+0x46c>
 800c200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c204:	095b      	lsrs	r3, r3, #5
 800c206:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c20e:	f003 031f 	and.w	r3, r3, #31
 800c212:	2b00      	cmp	r3, #0
 800c214:	d104      	bne.n	800c220 <USB_EPStartXfer+0x448>
 800c216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c21a:	3b01      	subs	r3, #1
 800c21c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	b29a      	uxth	r2, r3
 800c226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	029b      	lsls	r3, r3, #10
 800c22e:	b29b      	uxth	r3, r3
 800c230:	4313      	orrs	r3, r2
 800c232:	b29b      	uxth	r3, r3
 800c234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	801a      	strh	r2, [r3, #0]
 800c242:	e056      	b.n	800c2f2 <USB_EPStartXfer+0x51a>
 800c244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <USB_EPStartXfer+0x48a>
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	881b      	ldrh	r3, [r3, #0]
 800c250:	b29b      	uxth	r3, r3
 800c252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	801a      	strh	r2, [r3, #0]
 800c260:	e047      	b.n	800c2f2 <USB_EPStartXfer+0x51a>
 800c262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c266:	085b      	lsrs	r3, r3, #1
 800c268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d004      	beq.n	800c282 <USB_EPStartXfer+0x4aa>
 800c278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c27c:	3301      	adds	r3, #1
 800c27e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	881b      	ldrh	r3, [r3, #0]
 800c286:	b29a      	uxth	r2, r3
 800c288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	029b      	lsls	r3, r3, #10
 800c290:	b29b      	uxth	r3, r3
 800c292:	4313      	orrs	r3, r2
 800c294:	b29a      	uxth	r2, r3
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	801a      	strh	r2, [r3, #0]
 800c29a:	e02a      	b.n	800c2f2 <USB_EPStartXfer+0x51a>
 800c29c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	785b      	ldrb	r3, [r3, #1]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d122      	bne.n	800c2f2 <USB_EPStartXfer+0x51a>
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	623b      	str	r3, [r7, #32]
 800c2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	623b      	str	r3, [r7, #32]
 800c2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	011a      	lsls	r2, r3, #4
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c2e6:	61fb      	str	r3, [r7, #28]
 800c2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	891b      	ldrh	r3, [r3, #8]
 800c2fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6959      	ldr	r1, [r3, #20]
 800c30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c312:	b29b      	uxth	r3, r3
 800c314:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c318:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c31c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c320:	6800      	ldr	r0, [r0, #0]
 800c322:	f001 fa48 	bl	800d7b6 <USB_WritePMA>
 800c326:	e3ee      	b.n	800cb06 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c32c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d177      	bne.n	800c428 <USB_EPStartXfer+0x650>
 800c338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c33c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	64bb      	str	r3, [r7, #72]	; 0x48
 800c344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c348:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c352:	b29b      	uxth	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c358:	4413      	add	r3, r2
 800c35a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	011a      	lsls	r2, r3, #4
 800c36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c36c:	4413      	add	r3, r2
 800c36e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c372:	647b      	str	r3, [r7, #68]	; 0x44
 800c374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c37e:	b29a      	uxth	r2, r3
 800c380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c382:	801a      	strh	r2, [r3, #0]
 800c384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c388:	2b3e      	cmp	r3, #62	; 0x3e
 800c38a:	d921      	bls.n	800c3d0 <USB_EPStartXfer+0x5f8>
 800c38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c390:	095b      	lsrs	r3, r3, #5
 800c392:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c39a:	f003 031f 	and.w	r3, r3, #31
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d104      	bne.n	800c3ac <USB_EPStartXfer+0x5d4>
 800c3a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	029b      	lsls	r3, r3, #10
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3cc:	801a      	strh	r2, [r3, #0]
 800c3ce:	e056      	b.n	800c47e <USB_EPStartXfer+0x6a6>
 800c3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d10a      	bne.n	800c3ee <USB_EPStartXfer+0x616>
 800c3d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3da:	881b      	ldrh	r3, [r3, #0]
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c3e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c3e6:	b29a      	uxth	r2, r3
 800c3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3ea:	801a      	strh	r2, [r3, #0]
 800c3ec:	e047      	b.n	800c47e <USB_EPStartXfer+0x6a6>
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3f2:	085b      	lsrs	r3, r3, #1
 800c3f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d004      	beq.n	800c40e <USB_EPStartXfer+0x636>
 800c404:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c408:	3301      	adds	r3, #1
 800c40a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	b29a      	uxth	r2, r3
 800c414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c418:	b29b      	uxth	r3, r3
 800c41a:	029b      	lsls	r3, r3, #10
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	4313      	orrs	r3, r2
 800c420:	b29a      	uxth	r2, r3
 800c422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c424:	801a      	strh	r2, [r3, #0]
 800c426:	e02a      	b.n	800c47e <USB_EPStartXfer+0x6a6>
 800c428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c42c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	785b      	ldrb	r3, [r3, #1]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d122      	bne.n	800c47e <USB_EPStartXfer+0x6a6>
 800c438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	653b      	str	r3, [r7, #80]	; 0x50
 800c444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c452:	b29b      	uxth	r3, r3
 800c454:	461a      	mov	r2, r3
 800c456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c458:	4413      	add	r3, r2
 800c45a:	653b      	str	r3, [r7, #80]	; 0x50
 800c45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	011a      	lsls	r2, r3, #4
 800c46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c46c:	4413      	add	r3, r2
 800c46e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c472:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c478:	b29a      	uxth	r2, r3
 800c47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c47c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	891b      	ldrh	r3, [r3, #8]
 800c48a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	6959      	ldr	r1, [r3, #20]
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c4a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c4a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c4ac:	6800      	ldr	r0, [r0, #0]
 800c4ae:	f001 f982 	bl	800d7b6 <USB_WritePMA>
            ep->xfer_buff += len;
 800c4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	695a      	ldr	r2, [r3, #20]
 800c4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c2:	441a      	add	r2, r3
 800c4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6a1a      	ldr	r2, [r3, #32]
 800c4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d90f      	bls.n	800c50c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	6a1a      	ldr	r2, [r3, #32]
 800c4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4fc:	1ad2      	subs	r2, r2, r3
 800c4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	621a      	str	r2, [r3, #32]
 800c50a:	e00e      	b.n	800c52a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	6a1b      	ldr	r3, [r3, #32]
 800c518:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2200      	movs	r2, #0
 800c528:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c52e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	643b      	str	r3, [r7, #64]	; 0x40
 800c536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c53a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	785b      	ldrb	r3, [r3, #1]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d177      	bne.n	800c636 <USB_EPStartXfer+0x85e>
 800c546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c54a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	63bb      	str	r3, [r7, #56]	; 0x38
 800c552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c560:	b29b      	uxth	r3, r3
 800c562:	461a      	mov	r2, r3
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	4413      	add	r3, r2
 800c568:	63bb      	str	r3, [r7, #56]	; 0x38
 800c56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c56e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	011a      	lsls	r2, r3, #4
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	4413      	add	r3, r2
 800c57c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c580:	637b      	str	r3, [r7, #52]	; 0x34
 800c582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c584:	881b      	ldrh	r3, [r3, #0]
 800c586:	b29b      	uxth	r3, r3
 800c588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c590:	801a      	strh	r2, [r3, #0]
 800c592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c596:	2b3e      	cmp	r3, #62	; 0x3e
 800c598:	d921      	bls.n	800c5de <USB_EPStartXfer+0x806>
 800c59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c59e:	095b      	lsrs	r3, r3, #5
 800c5a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a8:	f003 031f 	and.w	r3, r3, #31
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d104      	bne.n	800c5ba <USB_EPStartXfer+0x7e2>
 800c5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5bc:	881b      	ldrh	r3, [r3, #0]
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	029b      	lsls	r3, r3, #10
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5da:	801a      	strh	r2, [r3, #0]
 800c5dc:	e050      	b.n	800c680 <USB_EPStartXfer+0x8a8>
 800c5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10a      	bne.n	800c5fc <USB_EPStartXfer+0x824>
 800c5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e8:	881b      	ldrh	r3, [r3, #0]
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f8:	801a      	strh	r2, [r3, #0]
 800c5fa:	e041      	b.n	800c680 <USB_EPStartXfer+0x8a8>
 800c5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c600:	085b      	lsrs	r3, r3, #1
 800c602:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c60a:	f003 0301 	and.w	r3, r3, #1
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d004      	beq.n	800c61c <USB_EPStartXfer+0x844>
 800c612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c616:	3301      	adds	r3, #1
 800c618:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	881b      	ldrh	r3, [r3, #0]
 800c620:	b29a      	uxth	r2, r3
 800c622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c626:	b29b      	uxth	r3, r3
 800c628:	029b      	lsls	r3, r3, #10
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	4313      	orrs	r3, r2
 800c62e:	b29a      	uxth	r2, r3
 800c630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c632:	801a      	strh	r2, [r3, #0]
 800c634:	e024      	b.n	800c680 <USB_EPStartXfer+0x8a8>
 800c636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	785b      	ldrb	r3, [r3, #1]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d11c      	bne.n	800c680 <USB_EPStartXfer+0x8a8>
 800c646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c654:	b29b      	uxth	r3, r3
 800c656:	461a      	mov	r2, r3
 800c658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c65a:	4413      	add	r3, r2
 800c65c:	643b      	str	r3, [r7, #64]	; 0x40
 800c65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	011a      	lsls	r2, r3, #4
 800c66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c66e:	4413      	add	r3, r2
 800c670:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c674:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c67a:	b29a      	uxth	r2, r3
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	895b      	ldrh	r3, [r3, #10]
 800c68c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	6959      	ldr	r1, [r3, #20]
 800c69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c6a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c6aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c6ae:	6800      	ldr	r0, [r0, #0]
 800c6b0:	f001 f881 	bl	800d7b6 <USB_WritePMA>
 800c6b4:	e227      	b.n	800cb06 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	881b      	ldrh	r3, [r3, #0]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c6e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	441a      	add	r2, r3
 800c70a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c70e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c71a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c71e:	b29b      	uxth	r3, r3
 800c720:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	461a      	mov	r2, r3
 800c740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c742:	4413      	add	r3, r2
 800c744:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	011a      	lsls	r2, r3, #4
 800c754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c756:	4413      	add	r3, r2
 800c758:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c75c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c762:	b29a      	uxth	r2, r3
 800c764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c766:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c76c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	891b      	ldrh	r3, [r3, #8]
 800c774:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6959      	ldr	r1, [r3, #20]
 800c784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c788:	b29b      	uxth	r3, r3
 800c78a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c78e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c792:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c796:	6800      	ldr	r0, [r0, #0]
 800c798:	f001 f80d 	bl	800d7b6 <USB_WritePMA>
 800c79c:	e1b3      	b.n	800cb06 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c79e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6a1a      	ldr	r2, [r3, #32]
 800c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ae:	1ad2      	subs	r2, r2, r3
 800c7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	4413      	add	r3, r2
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 80c6 	beq.w	800c970 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	673b      	str	r3, [r7, #112]	; 0x70
 800c7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	785b      	ldrb	r3, [r3, #1]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d177      	bne.n	800c8f0 <USB_EPStartXfer+0xb18>
 800c800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	461a      	mov	r2, r3
 800c81e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c820:	4413      	add	r3, r2
 800c822:	66bb      	str	r3, [r7, #104]	; 0x68
 800c824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	011a      	lsls	r2, r3, #4
 800c832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c834:	4413      	add	r3, r2
 800c836:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c83a:	667b      	str	r3, [r7, #100]	; 0x64
 800c83c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	b29b      	uxth	r3, r3
 800c842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c846:	b29a      	uxth	r2, r3
 800c848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c84a:	801a      	strh	r2, [r3, #0]
 800c84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c850:	2b3e      	cmp	r3, #62	; 0x3e
 800c852:	d921      	bls.n	800c898 <USB_EPStartXfer+0xac0>
 800c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c858:	095b      	lsrs	r3, r3, #5
 800c85a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c862:	f003 031f 	and.w	r3, r3, #31
 800c866:	2b00      	cmp	r3, #0
 800c868:	d104      	bne.n	800c874 <USB_EPStartXfer+0xa9c>
 800c86a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c86e:	3b01      	subs	r3, #1
 800c870:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	b29a      	uxth	r2, r3
 800c87a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c87e:	b29b      	uxth	r3, r3
 800c880:	029b      	lsls	r3, r3, #10
 800c882:	b29b      	uxth	r3, r3
 800c884:	4313      	orrs	r3, r2
 800c886:	b29b      	uxth	r3, r3
 800c888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c88c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c890:	b29a      	uxth	r2, r3
 800c892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c894:	801a      	strh	r2, [r3, #0]
 800c896:	e050      	b.n	800c93a <USB_EPStartXfer+0xb62>
 800c898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10a      	bne.n	800c8b6 <USB_EPStartXfer+0xade>
 800c8a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8a2:	881b      	ldrh	r3, [r3, #0]
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8b2:	801a      	strh	r2, [r3, #0]
 800c8b4:	e041      	b.n	800c93a <USB_EPStartXfer+0xb62>
 800c8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ba:	085b      	lsrs	r3, r3, #1
 800c8bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d004      	beq.n	800c8d6 <USB_EPStartXfer+0xafe>
 800c8cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c8d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	029b      	lsls	r3, r3, #10
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8ec:	801a      	strh	r2, [r3, #0]
 800c8ee:	e024      	b.n	800c93a <USB_EPStartXfer+0xb62>
 800c8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	785b      	ldrb	r3, [r3, #1]
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d11c      	bne.n	800c93a <USB_EPStartXfer+0xb62>
 800c900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c90e:	b29b      	uxth	r3, r3
 800c910:	461a      	mov	r2, r3
 800c912:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c914:	4413      	add	r3, r2
 800c916:	673b      	str	r3, [r7, #112]	; 0x70
 800c918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	011a      	lsls	r2, r3, #4
 800c926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c928:	4413      	add	r3, r2
 800c92a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c92e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c934:	b29a      	uxth	r2, r3
 800c936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c938:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	895b      	ldrh	r3, [r3, #10]
 800c946:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	6959      	ldr	r1, [r3, #20]
 800c956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c960:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c964:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c968:	6800      	ldr	r0, [r0, #0]
 800c96a:	f000 ff24 	bl	800d7b6 <USB_WritePMA>
 800c96e:	e0ca      	b.n	800cb06 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	785b      	ldrb	r3, [r3, #1]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d177      	bne.n	800ca70 <USB_EPStartXfer+0xc98>
 800c980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	461a      	mov	r2, r3
 800c99e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9a0:	4413      	add	r3, r2
 800c9a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	011a      	lsls	r2, r3, #4
 800c9b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c9ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800c9bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9be:	881b      	ldrh	r3, [r3, #0]
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9ca:	801a      	strh	r2, [r3, #0]
 800c9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9d0:	2b3e      	cmp	r3, #62	; 0x3e
 800c9d2:	d921      	bls.n	800ca18 <USB_EPStartXfer+0xc40>
 800c9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9d8:	095b      	lsrs	r3, r3, #5
 800c9da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9e2:	f003 031f 	and.w	r3, r3, #31
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d104      	bne.n	800c9f4 <USB_EPStartXfer+0xc1c>
 800c9ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c9ee:	3b01      	subs	r3, #1
 800c9f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c9f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	029b      	lsls	r3, r3, #10
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	4313      	orrs	r3, r2
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca14:	801a      	strh	r2, [r3, #0]
 800ca16:	e05c      	b.n	800cad2 <USB_EPStartXfer+0xcfa>
 800ca18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10a      	bne.n	800ca36 <USB_EPStartXfer+0xc5e>
 800ca20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca22:	881b      	ldrh	r3, [r3, #0]
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca2e:	b29a      	uxth	r2, r3
 800ca30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca32:	801a      	strh	r2, [r3, #0]
 800ca34:	e04d      	b.n	800cad2 <USB_EPStartXfer+0xcfa>
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca3a:	085b      	lsrs	r3, r3, #1
 800ca3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d004      	beq.n	800ca56 <USB_EPStartXfer+0xc7e>
 800ca4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ca50:	3301      	adds	r3, #1
 800ca52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ca56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca58:	881b      	ldrh	r3, [r3, #0]
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	029b      	lsls	r3, r3, #10
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	4313      	orrs	r3, r2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca6c:	801a      	strh	r2, [r3, #0]
 800ca6e:	e030      	b.n	800cad2 <USB_EPStartXfer+0xcfa>
 800ca70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	785b      	ldrb	r3, [r3, #1]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d128      	bne.n	800cad2 <USB_EPStartXfer+0xcfa>
 800ca80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ca8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	461a      	mov	r2, r3
 800caa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800caa4:	4413      	add	r3, r2
 800caa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800caaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	011a      	lsls	r2, r3, #4
 800cab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cabc:	4413      	add	r3, r2
 800cabe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caca:	b29a      	uxth	r2, r3
 800cacc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cad0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	891b      	ldrh	r3, [r3, #8]
 800cade:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	6959      	ldr	r1, [r3, #20]
 800caee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800caf8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cafc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cb00:	6800      	ldr	r0, [r0, #0]
 800cb02:	f000 fe58 	bl	800d7b6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4413      	add	r3, r2
 800cb20:	881b      	ldrh	r3, [r3, #0]
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb2c:	817b      	strh	r3, [r7, #10]
 800cb2e:	897b      	ldrh	r3, [r7, #10]
 800cb30:	f083 0310 	eor.w	r3, r3, #16
 800cb34:	817b      	strh	r3, [r7, #10]
 800cb36:	897b      	ldrh	r3, [r7, #10]
 800cb38:	f083 0320 	eor.w	r3, r3, #32
 800cb3c:	817b      	strh	r3, [r7, #10]
 800cb3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	441a      	add	r2, r3
 800cb58:	897b      	ldrh	r3, [r7, #10]
 800cb5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	8013      	strh	r3, [r2, #0]
 800cb6e:	f000 bcde 	b.w	800d52e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cb72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	7b1b      	ldrb	r3, [r3, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	f040 80bb 	bne.w	800ccfa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	699a      	ldr	r2, [r3, #24]
 800cb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d917      	bls.n	800cbd0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800cba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	691b      	ldr	r3, [r3, #16]
 800cbac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800cbb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	699a      	ldr	r2, [r3, #24]
 800cbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbc0:	1ad2      	subs	r2, r2, r3
 800cbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	619a      	str	r2, [r3, #24]
 800cbce:	e00e      	b.n	800cbee <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800cbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	699b      	ldr	r3, [r3, #24]
 800cbdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800cbe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2200      	movs	r2, #0
 800cbec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cbfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc12:	4413      	add	r3, r2
 800cc14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	011a      	lsls	r2, r3, #4
 800cc26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cc30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cc34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc38:	881b      	ldrh	r3, [r3, #0]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc40:	b29a      	uxth	r2, r3
 800cc42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc46:	801a      	strh	r2, [r3, #0]
 800cc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc4c:	2b3e      	cmp	r3, #62	; 0x3e
 800cc4e:	d924      	bls.n	800cc9a <USB_EPStartXfer+0xec2>
 800cc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc54:	095b      	lsrs	r3, r3, #5
 800cc56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc5e:	f003 031f 	and.w	r3, r3, #31
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d104      	bne.n	800cc70 <USB_EPStartXfer+0xe98>
 800cc66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cc70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	029b      	lsls	r3, r3, #10
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	4313      	orrs	r3, r2
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc94:	801a      	strh	r2, [r3, #0]
 800cc96:	f000 bc10 	b.w	800d4ba <USB_EPStartXfer+0x16e2>
 800cc9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d10c      	bne.n	800ccbc <USB_EPStartXfer+0xee4>
 800cca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cca6:	881b      	ldrh	r3, [r3, #0]
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ccb8:	801a      	strh	r2, [r3, #0]
 800ccba:	e3fe      	b.n	800d4ba <USB_EPStartXfer+0x16e2>
 800ccbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccc0:	085b      	lsrs	r3, r3, #1
 800ccc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ccc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d004      	beq.n	800ccdc <USB_EPStartXfer+0xf04>
 800ccd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ccdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cce0:	881b      	ldrh	r3, [r3, #0]
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	029b      	lsls	r3, r3, #10
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ccf6:	801a      	strh	r2, [r3, #0]
 800ccf8:	e3df      	b.n	800d4ba <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ccfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	78db      	ldrb	r3, [r3, #3]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	f040 8218 	bne.w	800d13c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cd0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	785b      	ldrb	r3, [r3, #1]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f040 809d 	bne.w	800ce58 <USB_EPStartXfer+0x1080>
 800cd1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd42:	4413      	add	r3, r2
 800cd44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	011a      	lsls	r2, r3, #4
 800cd56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd5a:	4413      	add	r3, r2
 800cd5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cd60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cd64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cd76:	801a      	strh	r2, [r3, #0]
 800cd78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	2b3e      	cmp	r3, #62	; 0x3e
 800cd86:	d92b      	bls.n	800cde0 <USB_EPStartXfer+0x1008>
 800cd88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	691b      	ldr	r3, [r3, #16]
 800cd94:	095b      	lsrs	r3, r3, #5
 800cd96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	f003 031f 	and.w	r3, r3, #31
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d104      	bne.n	800cdb8 <USB_EPStartXfer+0xfe0>
 800cdae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cdb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cdbc:	881b      	ldrh	r3, [r3, #0]
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	029b      	lsls	r3, r3, #10
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cddc:	801a      	strh	r2, [r3, #0]
 800cdde:	e070      	b.n	800cec2 <USB_EPStartXfer+0x10ea>
 800cde0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cde4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10c      	bne.n	800ce0a <USB_EPStartXfer+0x1032>
 800cdf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cdf4:	881b      	ldrh	r3, [r3, #0]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce06:	801a      	strh	r2, [r3, #0]
 800ce08:	e05b      	b.n	800cec2 <USB_EPStartXfer+0x10ea>
 800ce0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	691b      	ldr	r3, [r3, #16]
 800ce16:	085b      	lsrs	r3, r3, #1
 800ce18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	691b      	ldr	r3, [r3, #16]
 800ce28:	f003 0301 	and.w	r3, r3, #1
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d004      	beq.n	800ce3a <USB_EPStartXfer+0x1062>
 800ce30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce34:	3301      	adds	r3, #1
 800ce36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	029b      	lsls	r3, r3, #10
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ce54:	801a      	strh	r2, [r3, #0]
 800ce56:	e034      	b.n	800cec2 <USB_EPStartXfer+0x10ea>
 800ce58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	785b      	ldrb	r3, [r3, #1]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d12c      	bne.n	800cec2 <USB_EPStartXfer+0x10ea>
 800ce68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	461a      	mov	r2, r3
 800ce88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce8c:	4413      	add	r3, r2
 800ce8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	011a      	lsls	r2, r3, #4
 800cea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cea4:	4413      	add	r3, r2
 800cea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ceaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ceae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cec0:	801a      	strh	r2, [r3, #0]
 800cec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cec6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ced0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	785b      	ldrb	r3, [r3, #1]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f040 809d 	bne.w	800d01c <USB_EPStartXfer+0x1244>
 800cee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	461a      	mov	r2, r3
 800cf02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf06:	4413      	add	r3, r2
 800cf08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	011a      	lsls	r2, r3, #4
 800cf1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf1e:	4413      	add	r3, r2
 800cf20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cf24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cf28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf2c:	881b      	ldrh	r3, [r3, #0]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf3a:	801a      	strh	r2, [r3, #0]
 800cf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	2b3e      	cmp	r3, #62	; 0x3e
 800cf4a:	d92b      	bls.n	800cfa4 <USB_EPStartXfer+0x11cc>
 800cf4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	095b      	lsrs	r3, r3, #5
 800cf5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	691b      	ldr	r3, [r3, #16]
 800cf6a:	f003 031f 	and.w	r3, r3, #31
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d104      	bne.n	800cf7c <USB_EPStartXfer+0x11a4>
 800cf72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf76:	3b01      	subs	r3, #1
 800cf78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cf7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf80:	881b      	ldrh	r3, [r3, #0]
 800cf82:	b29a      	uxth	r2, r3
 800cf84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	029b      	lsls	r3, r3, #10
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf9a:	b29a      	uxth	r2, r3
 800cf9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfa0:	801a      	strh	r2, [r3, #0]
 800cfa2:	e069      	b.n	800d078 <USB_EPStartXfer+0x12a0>
 800cfa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	691b      	ldr	r3, [r3, #16]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d10c      	bne.n	800cfce <USB_EPStartXfer+0x11f6>
 800cfb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfb8:	881b      	ldrh	r3, [r3, #0]
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfc4:	b29a      	uxth	r2, r3
 800cfc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cfca:	801a      	strh	r2, [r3, #0]
 800cfcc:	e054      	b.n	800d078 <USB_EPStartXfer+0x12a0>
 800cfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	085b      	lsrs	r3, r3, #1
 800cfdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cfe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d004      	beq.n	800cffe <USB_EPStartXfer+0x1226>
 800cff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cff8:	3301      	adds	r3, #1
 800cffa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d002:	881b      	ldrh	r3, [r3, #0]
 800d004:	b29a      	uxth	r2, r3
 800d006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	029b      	lsls	r3, r3, #10
 800d00e:	b29b      	uxth	r3, r3
 800d010:	4313      	orrs	r3, r2
 800d012:	b29a      	uxth	r2, r3
 800d014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d018:	801a      	strh	r2, [r3, #0]
 800d01a:	e02d      	b.n	800d078 <USB_EPStartXfer+0x12a0>
 800d01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	785b      	ldrb	r3, [r3, #1]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d125      	bne.n	800d078 <USB_EPStartXfer+0x12a0>
 800d02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	461a      	mov	r2, r3
 800d03e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d042:	4413      	add	r3, r2
 800d044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	011a      	lsls	r2, r3, #4
 800d056:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d05a:	4413      	add	r3, r2
 800d05c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	b29a      	uxth	r2, r3
 800d072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d076:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d07c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	69db      	ldr	r3, [r3, #28]
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 8218 	beq.w	800d4ba <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d08e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d0aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d0ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d005      	beq.n	800d0c2 <USB_EPStartXfer+0x12ea>
 800d0b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10d      	bne.n	800d0de <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d0c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d0c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f040 81f5 	bne.w	800d4ba <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d0d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f040 81ee 	bne.w	800d4ba <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	009b      	lsls	r3, r3, #2
 800d0f6:	4413      	add	r3, r2
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d104:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d10c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	441a      	add	r2, r3
 800d122:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d12a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d12e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d132:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d136:	b29b      	uxth	r3, r3
 800d138:	8013      	strh	r3, [r2, #0]
 800d13a:	e1be      	b.n	800d4ba <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	78db      	ldrb	r3, [r3, #3]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	f040 81b4 	bne.w	800d4b6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	699a      	ldr	r2, [r3, #24]
 800d15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d15e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	429a      	cmp	r2, r3
 800d168:	d917      	bls.n	800d19a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800d16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	699a      	ldr	r2, [r3, #24]
 800d186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d18a:	1ad2      	subs	r2, r2, r3
 800d18c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	619a      	str	r2, [r3, #24]
 800d198:	e00e      	b.n	800d1b8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800d19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	785b      	ldrb	r3, [r3, #1]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f040 8085 	bne.w	800d2d4 <USB_EPStartXfer+0x14fc>
 800d1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d1ee:	4413      	add	r3, r2
 800d1f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	011a      	lsls	r2, r3, #4
 800d202:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d206:	4413      	add	r3, r2
 800d208:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d20c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	b29b      	uxth	r3, r3
 800d218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d222:	801a      	strh	r2, [r3, #0]
 800d224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d228:	2b3e      	cmp	r3, #62	; 0x3e
 800d22a:	d923      	bls.n	800d274 <USB_EPStartXfer+0x149c>
 800d22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d230:	095b      	lsrs	r3, r3, #5
 800d232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d23a:	f003 031f 	and.w	r3, r3, #31
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d104      	bne.n	800d24c <USB_EPStartXfer+0x1474>
 800d242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d246:	3b01      	subs	r3, #1
 800d248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d24c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d250:	881b      	ldrh	r3, [r3, #0]
 800d252:	b29a      	uxth	r2, r3
 800d254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d258:	b29b      	uxth	r3, r3
 800d25a:	029b      	lsls	r3, r3, #10
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	4313      	orrs	r3, r2
 800d260:	b29b      	uxth	r3, r3
 800d262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d270:	801a      	strh	r2, [r3, #0]
 800d272:	e060      	b.n	800d336 <USB_EPStartXfer+0x155e>
 800d274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10c      	bne.n	800d296 <USB_EPStartXfer+0x14be>
 800d27c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	b29b      	uxth	r3, r3
 800d284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d292:	801a      	strh	r2, [r3, #0]
 800d294:	e04f      	b.n	800d336 <USB_EPStartXfer+0x155e>
 800d296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d29a:	085b      	lsrs	r3, r3, #1
 800d29c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d004      	beq.n	800d2b6 <USB_EPStartXfer+0x14de>
 800d2ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d2b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2ba:	881b      	ldrh	r3, [r3, #0]
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	029b      	lsls	r3, r3, #10
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2d0:	801a      	strh	r2, [r3, #0]
 800d2d2:	e030      	b.n	800d336 <USB_EPStartXfer+0x155e>
 800d2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	785b      	ldrb	r3, [r3, #1]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d128      	bne.n	800d336 <USB_EPStartXfer+0x155e>
 800d2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d300:	b29b      	uxth	r3, r3
 800d302:	461a      	mov	r2, r3
 800d304:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d308:	4413      	add	r3, r2
 800d30a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	011a      	lsls	r2, r3, #4
 800d31c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d320:	4413      	add	r3, r2
 800d322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d326:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d32e:	b29a      	uxth	r2, r3
 800d330:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d334:	801a      	strh	r2, [r3, #0]
 800d336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d33a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	785b      	ldrb	r3, [r3, #1]
 800d350:	2b00      	cmp	r3, #0
 800d352:	f040 8085 	bne.w	800d460 <USB_EPStartXfer+0x1688>
 800d356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d35a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d368:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d372:	b29b      	uxth	r3, r3
 800d374:	461a      	mov	r2, r3
 800d376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d37a:	4413      	add	r3, r2
 800d37c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	011a      	lsls	r2, r3, #4
 800d38e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d392:	4413      	add	r3, r2
 800d394:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d39c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d3a0:	881b      	ldrh	r3, [r3, #0]
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d3ae:	801a      	strh	r2, [r3, #0]
 800d3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3b4:	2b3e      	cmp	r3, #62	; 0x3e
 800d3b6:	d923      	bls.n	800d400 <USB_EPStartXfer+0x1628>
 800d3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3bc:	095b      	lsrs	r3, r3, #5
 800d3be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3c6:	f003 031f 	and.w	r3, r3, #31
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d104      	bne.n	800d3d8 <USB_EPStartXfer+0x1600>
 800d3ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d3d2:	3b01      	subs	r3, #1
 800d3d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d3d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	029b      	lsls	r3, r3, #10
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d3fc:	801a      	strh	r2, [r3, #0]
 800d3fe:	e05c      	b.n	800d4ba <USB_EPStartXfer+0x16e2>
 800d400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10c      	bne.n	800d422 <USB_EPStartXfer+0x164a>
 800d408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d40c:	881b      	ldrh	r3, [r3, #0]
 800d40e:	b29b      	uxth	r3, r3
 800d410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d418:	b29a      	uxth	r2, r3
 800d41a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d41e:	801a      	strh	r2, [r3, #0]
 800d420:	e04b      	b.n	800d4ba <USB_EPStartXfer+0x16e2>
 800d422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d426:	085b      	lsrs	r3, r3, #1
 800d428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d430:	f003 0301 	and.w	r3, r3, #1
 800d434:	2b00      	cmp	r3, #0
 800d436:	d004      	beq.n	800d442 <USB_EPStartXfer+0x166a>
 800d438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d43c:	3301      	adds	r3, #1
 800d43e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d446:	881b      	ldrh	r3, [r3, #0]
 800d448:	b29a      	uxth	r2, r3
 800d44a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d44e:	b29b      	uxth	r3, r3
 800d450:	029b      	lsls	r3, r3, #10
 800d452:	b29b      	uxth	r3, r3
 800d454:	4313      	orrs	r3, r2
 800d456:	b29a      	uxth	r2, r3
 800d458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d45c:	801a      	strh	r2, [r3, #0]
 800d45e:	e02c      	b.n	800d4ba <USB_EPStartXfer+0x16e2>
 800d460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	785b      	ldrb	r3, [r3, #1]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d124      	bne.n	800d4ba <USB_EPStartXfer+0x16e2>
 800d470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d47e:	b29b      	uxth	r3, r3
 800d480:	461a      	mov	r2, r3
 800d482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d486:	4413      	add	r3, r2
 800d488:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	011a      	lsls	r2, r3, #4
 800d49a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d49e:	4413      	add	r3, r2
 800d4a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d4a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d4b2:	801a      	strh	r2, [r3, #0]
 800d4b4:	e001      	b.n	800d4ba <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	e03a      	b.n	800d530 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	4413      	add	r3, r2
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d4dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d4e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d4e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d4ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d4f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d4f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d4f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	441a      	add	r2, r3
 800d516:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d51a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d51e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d53a:	b480      	push	{r7}
 800d53c:	b085      	sub	sp, #20
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	785b      	ldrb	r3, [r3, #1]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d020      	beq.n	800d58e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	781b      	ldrb	r3, [r3, #0]
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	881b      	ldrh	r3, [r3, #0]
 800d558:	b29b      	uxth	r3, r3
 800d55a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d55e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d562:	81bb      	strh	r3, [r7, #12]
 800d564:	89bb      	ldrh	r3, [r7, #12]
 800d566:	f083 0310 	eor.w	r3, r3, #16
 800d56a:	81bb      	strh	r3, [r7, #12]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	441a      	add	r2, r3
 800d576:	89bb      	ldrh	r3, [r7, #12]
 800d578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d57c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d588:	b29b      	uxth	r3, r3
 800d58a:	8013      	strh	r3, [r2, #0]
 800d58c:	e01f      	b.n	800d5ce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	781b      	ldrb	r3, [r3, #0]
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	881b      	ldrh	r3, [r3, #0]
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5a4:	81fb      	strh	r3, [r7, #14]
 800d5a6:	89fb      	ldrh	r3, [r7, #14]
 800d5a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d5ac:	81fb      	strh	r3, [r7, #14]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	441a      	add	r2, r3
 800d5b8:	89fb      	ldrh	r3, [r7, #14]
 800d5ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bc80      	pop	{r7}
 800d5d8:	4770      	bx	lr

0800d5da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5da:	b480      	push	{r7}
 800d5dc:	b087      	sub	sp, #28
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	7b1b      	ldrb	r3, [r3, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f040 809d 	bne.w	800d728 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	785b      	ldrb	r3, [r3, #1]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d04c      	beq.n	800d690 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	881b      	ldrh	r3, [r3, #0]
 800d602:	823b      	strh	r3, [r7, #16]
 800d604:	8a3b      	ldrh	r3, [r7, #16]
 800d606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d01b      	beq.n	800d646 <USB_EPClearStall+0x6c>
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4413      	add	r3, r2
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d624:	81fb      	strh	r3, [r7, #14]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	441a      	add	r2, r3
 800d630:	89fb      	ldrh	r3, [r7, #14]
 800d632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d63a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d63e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d642:	b29b      	uxth	r3, r3
 800d644:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	78db      	ldrb	r3, [r3, #3]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d06c      	beq.n	800d728 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d664:	81bb      	strh	r3, [r7, #12]
 800d666:	89bb      	ldrh	r3, [r7, #12]
 800d668:	f083 0320 	eor.w	r3, r3, #32
 800d66c:	81bb      	strh	r3, [r7, #12]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	441a      	add	r2, r3
 800d678:	89bb      	ldrh	r3, [r7, #12]
 800d67a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d67e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	8013      	strh	r3, [r2, #0]
 800d68e:	e04b      	b.n	800d728 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	881b      	ldrh	r3, [r3, #0]
 800d69c:	82fb      	strh	r3, [r7, #22]
 800d69e:	8afb      	ldrh	r3, [r7, #22]
 800d6a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d01b      	beq.n	800d6e0 <USB_EPClearStall+0x106>
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4413      	add	r3, r2
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6be:	82bb      	strh	r3, [r7, #20]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	441a      	add	r2, r3
 800d6ca:	8abb      	ldrh	r3, [r7, #20]
 800d6cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	4413      	add	r3, r2
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6f6:	827b      	strh	r3, [r7, #18]
 800d6f8:	8a7b      	ldrh	r3, [r7, #18]
 800d6fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d6fe:	827b      	strh	r3, [r7, #18]
 800d700:	8a7b      	ldrh	r3, [r7, #18]
 800d702:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d706:	827b      	strh	r3, [r7, #18]
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	009b      	lsls	r3, r3, #2
 800d710:	441a      	add	r2, r3
 800d712:	8a7b      	ldrh	r3, [r7, #18]
 800d714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d71c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d724:	b29b      	uxth	r3, r3
 800d726:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	371c      	adds	r7, #28
 800d72e:	46bd      	mov	sp, r7
 800d730:	bc80      	pop	{r7}
 800d732:	4770      	bx	lr

0800d734 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2280      	movs	r2, #128	; 0x80
 800d74a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	370c      	adds	r7, #12
 800d754:	46bd      	mov	sp, r7
 800d756:	bc80      	pop	{r7}
 800d758:	4770      	bx	lr

0800d75a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d75a:	b480      	push	{r7}
 800d75c:	b083      	sub	sp, #12
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	bc80      	pop	{r7}
 800d76c:	4770      	bx	lr

0800d76e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bc80      	pop	{r7}
 800d780:	4770      	bx	lr

0800d782 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d782:	b480      	push	{r7}
 800d784:	b085      	sub	sp, #20
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d790:	b29b      	uxth	r3, r3
 800d792:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d794:	68fb      	ldr	r3, [r7, #12]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bc80      	pop	{r7}
 800d79e:	4770      	bx	lr

0800d7a0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bc80      	pop	{r7}
 800d7b4:	4770      	bx	lr

0800d7b6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b08b      	sub	sp, #44	; 0x2c
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	60f8      	str	r0, [r7, #12]
 800d7be:	60b9      	str	r1, [r7, #8]
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	460b      	mov	r3, r1
 800d7c6:	80fb      	strh	r3, [r7, #6]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d7cc:	88bb      	ldrh	r3, [r7, #4]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	085b      	lsrs	r3, r3, #1
 800d7d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d7dc:	88fb      	ldrh	r3, [r7, #6]
 800d7de:	005a      	lsls	r2, r3, #1
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ee:	e01e      	b.n	800d82e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	021b      	lsls	r3, r3, #8
 800d7fe:	b21a      	sxth	r2, r3
 800d800:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d804:	4313      	orrs	r3, r2
 800d806:	b21b      	sxth	r3, r3
 800d808:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	8a7a      	ldrh	r2, [r7, #18]
 800d80e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d810:	6a3b      	ldr	r3, [r7, #32]
 800d812:	3302      	adds	r3, #2
 800d814:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d816:	6a3b      	ldr	r3, [r7, #32]
 800d818:	3302      	adds	r3, #2
 800d81a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	3301      	adds	r3, #1
 800d820:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	3301      	adds	r3, #1
 800d826:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	3b01      	subs	r3, #1
 800d82c:	627b      	str	r3, [r7, #36]	; 0x24
 800d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d830:	2b00      	cmp	r3, #0
 800d832:	d1dd      	bne.n	800d7f0 <USB_WritePMA+0x3a>
  }
}
 800d834:	bf00      	nop
 800d836:	bf00      	nop
 800d838:	372c      	adds	r7, #44	; 0x2c
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bc80      	pop	{r7}
 800d83e:	4770      	bx	lr

0800d840 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d840:	b480      	push	{r7}
 800d842:	b08b      	sub	sp, #44	; 0x2c
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	4611      	mov	r1, r2
 800d84c:	461a      	mov	r2, r3
 800d84e:	460b      	mov	r3, r1
 800d850:	80fb      	strh	r3, [r7, #6]
 800d852:	4613      	mov	r3, r2
 800d854:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d856:	88bb      	ldrh	r3, [r7, #4]
 800d858:	085b      	lsrs	r3, r3, #1
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d866:	88fb      	ldrh	r3, [r7, #6]
 800d868:	005a      	lsls	r2, r3, #1
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	4413      	add	r3, r2
 800d86e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d872:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
 800d878:	e01b      	b.n	800d8b2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	881b      	ldrh	r3, [r3, #0]
 800d87e:	b29b      	uxth	r3, r3
 800d880:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d882:	6a3b      	ldr	r3, [r7, #32]
 800d884:	3302      	adds	r3, #2
 800d886:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	3301      	adds	r3, #1
 800d894:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	0a1b      	lsrs	r3, r3, #8
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	3302      	adds	r3, #2
 800d8aa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1e0      	bne.n	800d87a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d8b8:	88bb      	ldrh	r3, [r7, #4]
 800d8ba:	f003 0301 	and.w	r3, r3, #1
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d007      	beq.n	800d8d4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800d8c4:	6a3b      	ldr	r3, [r7, #32]
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	701a      	strb	r2, [r3, #0]
  }
}
 800d8d4:	bf00      	nop
 800d8d6:	372c      	adds	r7, #44	; 0x2c
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bc80      	pop	{r7}
 800d8dc:	4770      	bx	lr
	...

0800d8e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d8e4:	4904      	ldr	r1, [pc, #16]	; (800d8f8 <MX_FATFS_Init+0x18>)
 800d8e6:	4805      	ldr	r0, [pc, #20]	; (800d8fc <MX_FATFS_Init+0x1c>)
 800d8e8:	f003 fff8 	bl	80118dc <FATFS_LinkDriver>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	4b03      	ldr	r3, [pc, #12]	; (800d900 <MX_FATFS_Init+0x20>)
 800d8f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d8f4:	bf00      	nop
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20001c7c 	.word	0x20001c7c
 800d8fc:	0802fc80 	.word	0x0802fc80
 800d900:	20001c78 	.word	0x20001c78

0800d904 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d908:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bc80      	pop	{r7}
 800d910:	4770      	bx	lr
	...

0800d914 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d91a:	2300      	movs	r3, #0
 800d91c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d91e:	f000 f879 	bl	800da14 <BSP_SD_IsDetected>
 800d922:	4603      	mov	r3, r0
 800d924:	2b01      	cmp	r3, #1
 800d926:	d001      	beq.n	800d92c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e012      	b.n	800d952 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d92c:	480b      	ldr	r0, [pc, #44]	; (800d95c <BSP_SD_Init+0x48>)
 800d92e:	f7f9 fe95 	bl	800765c <HAL_SD_Init>
 800d932:	4603      	mov	r3, r0
 800d934:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d109      	bne.n	800d950 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d93c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d940:	4806      	ldr	r0, [pc, #24]	; (800d95c <BSP_SD_Init+0x48>)
 800d942:	f7fa fc6f 	bl	8008224 <HAL_SD_ConfigWideBusOperation>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d94c:	2301      	movs	r3, #1
 800d94e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d950:	79fb      	ldrb	r3, [r7, #7]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	bf00      	nop
 800d95c:	20000a18 	.word	0x20000a18

0800d960 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b088      	sub	sp, #32
 800d964:	af02      	add	r7, sp, #8
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
 800d96c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d96e:	2300      	movs	r3, #0
 800d970:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	68f9      	ldr	r1, [r7, #12]
 800d97c:	4806      	ldr	r0, [pc, #24]	; (800d998 <BSP_SD_ReadBlocks+0x38>)
 800d97e:	f7f9 ff1d 	bl	80077bc <HAL_SD_ReadBlocks>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20000a18 	.word	0x20000a18

0800d99c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b088      	sub	sp, #32
 800d9a0:	af02      	add	r7, sp, #8
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68ba      	ldr	r2, [r7, #8]
 800d9b6:	68f9      	ldr	r1, [r7, #12]
 800d9b8:	4806      	ldr	r0, [pc, #24]	; (800d9d4 <BSP_SD_WriteBlocks+0x38>)
 800d9ba:	f7fa f8dd 	bl	8007b78 <HAL_SD_WriteBlocks>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d001      	beq.n	800d9c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
 800d9d2:	bf00      	nop
 800d9d4:	20000a18 	.word	0x20000a18

0800d9d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d9dc:	4805      	ldr	r0, [pc, #20]	; (800d9f4 <BSP_SD_GetCardState+0x1c>)
 800d9de:	f7fa fcbb 	bl	8008358 <HAL_SD_GetCardState>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b04      	cmp	r3, #4
 800d9e6:	bf14      	ite	ne
 800d9e8:	2301      	movne	r3, #1
 800d9ea:	2300      	moveq	r3, #0
 800d9ec:	b2db      	uxtb	r3, r3
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20000a18 	.word	0x20000a18

0800d9f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800da00:	6879      	ldr	r1, [r7, #4]
 800da02:	4803      	ldr	r0, [pc, #12]	; (800da10 <BSP_SD_GetCardInfo+0x18>)
 800da04:	f7fa fbe2 	bl	80081cc <HAL_SD_GetCardInfo>
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	20000a18 	.word	0x20000a18

0800da14 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800da1a:	2301      	movs	r3, #1
 800da1c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800da1e:	79fb      	ldrb	r3, [r7, #7]
 800da20:	b2db      	uxtb	r3, r3
}
 800da22:	4618      	mov	r0, r3
 800da24:	370c      	adds	r7, #12
 800da26:	46bd      	mov	sp, r7
 800da28:	bc80      	pop	{r7}
 800da2a:	4770      	bx	lr

0800da2c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	460b      	mov	r3, r1
 800da36:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800da38:	2300      	movs	r3, #0
 800da3a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800da3c:	2340      	movs	r3, #64	; 0x40
 800da3e:	2203      	movs	r2, #3
 800da40:	2181      	movs	r1, #129	; 0x81
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f005 fe63 	bl	801370e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800da4e:	2340      	movs	r3, #64	; 0x40
 800da50:	2203      	movs	r2, #3
 800da52:	2102      	movs	r1, #2
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f005 fe5a 	bl	801370e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2201      	movs	r2, #1
 800da5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800da62:	2018      	movs	r0, #24
 800da64:	f005 ff68 	bl	8013938 <USBD_static_malloc>
 800da68:	4602      	mov	r2, r0
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da76:	2b00      	cmp	r3, #0
 800da78:	d102      	bne.n	800da80 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800da7a:	2301      	movs	r3, #1
 800da7c:	73fb      	strb	r3, [r7, #15]
 800da7e:	e011      	b.n	800daa4 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da86:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	2200      	movs	r2, #0
 800da8c:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	2302      	movs	r3, #2
 800da9c:	2102      	movs	r1, #2
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f005 ff26 	bl	80138f0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b082      	sub	sp, #8
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800daba:	2181      	movs	r1, #129	; 0x81
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f005 fe4c 	bl	801375a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800dac8:	2102      	movs	r1, #2
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f005 fe45 	bl	801375a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00e      	beq.n	800db00 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dae8:	689b      	ldr	r3, [r3, #8]
 800daea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daf2:	4618      	mov	r0, r3
 800daf4:	f005 ff2c 	bl	8013950 <USBD_static_free>
    pdev->pClassData = NULL;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b088      	sub	sp, #32
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db1c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800db1e:	2300      	movs	r3, #0
 800db20:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800db26:	2300      	movs	r3, #0
 800db28:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db36:	2b00      	cmp	r3, #0
 800db38:	d051      	beq.n	800dbde <USBD_CUSTOM_HID_Setup+0xd2>
 800db3a:	2b20      	cmp	r3, #32
 800db3c:	f040 80e1 	bne.w	800dd02 <USBD_CUSTOM_HID_Setup+0x1f6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	785b      	ldrb	r3, [r3, #1]
 800db44:	3b02      	subs	r3, #2
 800db46:	2b09      	cmp	r3, #9
 800db48:	d841      	bhi.n	800dbce <USBD_CUSTOM_HID_Setup+0xc2>
 800db4a:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <USBD_CUSTOM_HID_Setup+0x44>)
 800db4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db50:	0800dba9 	.word	0x0800dba9
 800db54:	0800db87 	.word	0x0800db87
 800db58:	0800dbcf 	.word	0x0800dbcf
 800db5c:	0800dbcf 	.word	0x0800dbcf
 800db60:	0800dbcf 	.word	0x0800dbcf
 800db64:	0800dbcf 	.word	0x0800dbcf
 800db68:	0800dbcf 	.word	0x0800dbcf
 800db6c:	0800dbb9 	.word	0x0800dbb9
 800db70:	0800db97 	.word	0x0800db97
 800db74:	0800db79 	.word	0x0800db79
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	885b      	ldrh	r3, [r3, #2]
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	461a      	mov	r2, r3
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	605a      	str	r2, [r3, #4]
          break;
 800db84:	e02a      	b.n	800dbdc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	3304      	adds	r3, #4
 800db8a:	2201      	movs	r2, #1
 800db8c:	4619      	mov	r1, r3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f001 f995 	bl	800eebe <USBD_CtlSendData>
          break;
 800db94:	e022      	b.n	800dbdc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	885b      	ldrh	r3, [r3, #2]
 800db9a:	0a1b      	lsrs	r3, r3, #8
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	461a      	mov	r2, r3
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	609a      	str	r2, [r3, #8]
          break;
 800dba6:	e019      	b.n	800dbdc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	3308      	adds	r3, #8
 800dbac:	2201      	movs	r2, #1
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 f984 	bl	800eebe <USBD_CtlSendData>
          break;
 800dbb6:	e011      	b.n	800dbdc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800dbbe:	6939      	ldr	r1, [r7, #16]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	88db      	ldrh	r3, [r3, #6]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f001 f9a7 	bl	800ef1a <USBD_CtlPrepareRx>
          break;
 800dbcc:	e006      	b.n	800dbdc <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f001 f90a 	bl	800edea <USBD_CtlError>
          ret = USBD_FAIL;
 800dbd6:	2302      	movs	r3, #2
 800dbd8:	75fb      	strb	r3, [r7, #23]
          break;
 800dbda:	bf00      	nop
      }
      break;
 800dbdc:	e098      	b.n	800dd10 <USBD_CUSTOM_HID_Setup+0x204>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	2b0b      	cmp	r3, #11
 800dbe4:	f200 8085 	bhi.w	800dcf2 <USBD_CUSTOM_HID_Setup+0x1e6>
 800dbe8:	a201      	add	r2, pc, #4	; (adr r2, 800dbf0 <USBD_CUSTOM_HID_Setup+0xe4>)
 800dbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbee:	bf00      	nop
 800dbf0:	0800dc21 	.word	0x0800dc21
 800dbf4:	0800dcf3 	.word	0x0800dcf3
 800dbf8:	0800dcf3 	.word	0x0800dcf3
 800dbfc:	0800dcf3 	.word	0x0800dcf3
 800dc00:	0800dcf3 	.word	0x0800dcf3
 800dc04:	0800dcf3 	.word	0x0800dcf3
 800dc08:	0800dc49 	.word	0x0800dc49
 800dc0c:	0800dcf3 	.word	0x0800dcf3
 800dc10:	0800dcf3 	.word	0x0800dcf3
 800dc14:	0800dcf3 	.word	0x0800dcf3
 800dc18:	0800dca5 	.word	0x0800dca5
 800dc1c:	0800dccd 	.word	0x0800dccd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d107      	bne.n	800dc3a <USBD_CUSTOM_HID_Setup+0x12e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800dc2a:	f107 030e 	add.w	r3, r7, #14
 800dc2e:	2202      	movs	r2, #2
 800dc30:	4619      	mov	r1, r3
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f001 f943 	bl	800eebe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dc38:	e062      	b.n	800dd00 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800dc3a:	6839      	ldr	r1, [r7, #0]
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f001 f8d4 	bl	800edea <USBD_CtlError>
            ret = USBD_FAIL;
 800dc42:	2302      	movs	r3, #2
 800dc44:	75fb      	strb	r3, [r7, #23]
          break;
 800dc46:	e05b      	b.n	800dd00 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	885b      	ldrh	r3, [r3, #2]
 800dc4c:	0a1b      	lsrs	r3, r3, #8
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	2b22      	cmp	r3, #34	; 0x22
 800dc52:	d10d      	bne.n	800dc70 <USBD_CUSTOM_HID_Setup+0x164>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	88da      	ldrh	r2, [r3, #6]
 800dc58:	4b30      	ldr	r3, [pc, #192]	; (800dd1c <USBD_CUSTOM_HID_Setup+0x210>)
 800dc5a:	881b      	ldrh	r3, [r3, #0]
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	bf28      	it	cs
 800dc60:	4613      	movcs	r3, r2
 800dc62:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	61bb      	str	r3, [r7, #24]
 800dc6e:	e012      	b.n	800dc96 <USBD_CUSTOM_HID_Setup+0x18a>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	885b      	ldrh	r3, [r3, #2]
 800dc74:	0a1b      	lsrs	r3, r3, #8
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	2b21      	cmp	r3, #33	; 0x21
 800dc7a:	d10c      	bne.n	800dc96 <USBD_CUSTOM_HID_Setup+0x18a>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800dc7c:	4b28      	ldr	r3, [pc, #160]	; (800dd20 <USBD_CUSTOM_HID_Setup+0x214>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	88db      	ldrh	r3, [r3, #6]
 800dc86:	461a      	mov	r2, r3
 800dc88:	4b26      	ldr	r3, [pc, #152]	; (800dd24 <USBD_CUSTOM_HID_Setup+0x218>)
 800dc8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	bfa8      	it	ge
 800dc92:	4613      	movge	r3, r2
 800dc94:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800dc96:	8bfb      	ldrh	r3, [r7, #30]
 800dc98:	461a      	mov	r2, r3
 800dc9a:	69b9      	ldr	r1, [r7, #24]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f001 f90e 	bl	800eebe <USBD_CtlSendData>
          break;
 800dca2:	e02d      	b.n	800dd00 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcaa:	2b03      	cmp	r3, #3
 800dcac:	d107      	bne.n	800dcbe <USBD_CUSTOM_HID_Setup+0x1b2>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	330c      	adds	r3, #12
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f001 f901 	bl	800eebe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dcbc:	e020      	b.n	800dd00 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f001 f892 	bl	800edea <USBD_CtlError>
            ret = USBD_FAIL;
 800dcc6:	2302      	movs	r3, #2
 800dcc8:	75fb      	strb	r3, [r7, #23]
          break;
 800dcca:	e019      	b.n	800dd00 <USBD_CUSTOM_HID_Setup+0x1f4>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d106      	bne.n	800dce4 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	885b      	ldrh	r3, [r3, #2]
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	461a      	mov	r2, r3
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dce2:	e00d      	b.n	800dd00 <USBD_CUSTOM_HID_Setup+0x1f4>
            USBD_CtlError(pdev, req);
 800dce4:	6839      	ldr	r1, [r7, #0]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f001 f87f 	bl	800edea <USBD_CtlError>
            ret = USBD_FAIL;
 800dcec:	2302      	movs	r3, #2
 800dcee:	75fb      	strb	r3, [r7, #23]
          break;
 800dcf0:	e006      	b.n	800dd00 <USBD_CUSTOM_HID_Setup+0x1f4>

        default:
          USBD_CtlError(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f001 f878 	bl	800edea <USBD_CtlError>
          ret = USBD_FAIL;
 800dcfa:	2302      	movs	r3, #2
 800dcfc:	75fb      	strb	r3, [r7, #23]
          break;
 800dcfe:	bf00      	nop
      }
      break;
 800dd00:	e006      	b.n	800dd10 <USBD_CUSTOM_HID_Setup+0x204>

    default:
      USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f001 f870 	bl	800edea <USBD_CtlError>
      ret = USBD_FAIL;
 800dd0a:	2302      	movs	r3, #2
 800dd0c:	75fb      	strb	r3, [r7, #23]
      break;
 800dd0e:	bf00      	nop
  }
  return ret;
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3720      	adds	r7, #32
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20002078 	.word	0x20002078
 800dd20:	20001c8c 	.word	0x20001c8c
 800dd24:	20001c92 	.word	0x20001c92

0800dd28 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800dd30:	4b06      	ldr	r3, [pc, #24]	; (800dd4c <USBD_CUSTOM_HID_GetFSCfgDesc+0x24>)
 800dd32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800dd3c:	4b04      	ldr	r3, [pc, #16]	; (800dd50 <USBD_CUSTOM_HID_GetFSCfgDesc+0x28>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	370c      	adds	r7, #12
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bc80      	pop	{r7}
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	20001c90 	.word	0x20001c90
 800dd50:	20001c80 	.word	0x20001c80

0800dd54 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b083      	sub	sp, #12
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800dd5c:	4b06      	ldr	r3, [pc, #24]	; (800dd78 <USBD_CUSTOM_HID_GetHSCfgDesc+0x24>)
 800dd5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800dd68:	4b04      	ldr	r3, [pc, #16]	; (800dd7c <USBD_CUSTOM_HID_GetHSCfgDesc+0x28>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bc80      	pop	{r7}
 800dd74:	4770      	bx	lr
 800dd76:	bf00      	nop
 800dd78:	20001c90 	.word	0x20001c90
 800dd7c:	20001c84 	.word	0x20001c84

0800dd80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
//  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
  *length = USB_CUSTOM_HID_CONFIG_DESC_SIZ;
 800dd88:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x24>)
 800dd8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800dd94:	4b04      	ldr	r3, [pc, #16]	; (800dda8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x28>)
 800dd96:	681b      	ldr	r3, [r3, #0]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bc80      	pop	{r7}
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	20001c90 	.word	0x20001c90
 800dda8:	20001c88 	.word	0x20001c88

0800ddac <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	370c      	adds	r7, #12
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bc80      	pop	{r7}
 800ddcc:	4770      	bx	lr

0800ddce <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b084      	sub	sp, #16
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde0:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	7810      	ldrb	r0, [r2, #0]
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	7852      	ldrb	r2, [r2, #1]
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	2102      	movs	r1, #2
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f005 fd77 	bl	80138f0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de1a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d10c      	bne.n	800de3e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	7810      	ldrb	r0, [r2, #0]
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	7852      	ldrb	r2, [r2, #1]
 800de34:	4611      	mov	r1, r2
 800de36:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2200      	movs	r2, #0
 800de3c:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	220a      	movs	r2, #10
 800de54:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800de56:	4b03      	ldr	r3, [pc, #12]	; (800de64 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bc80      	pop	{r7}
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	20000090 	.word	0x20000090

0800de68 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800de68:	b480      	push	{r7}
 800de6a:	b085      	sub	sp, #20
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800de72:	2302      	movs	r3, #2
 800de74:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d005      	beq.n	800de88 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	683a      	ldr	r2, [r7, #0]
 800de80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800de84:	2300      	movs	r3, #0
 800de86:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800de88:	7bfb      	ldrb	r3, [r7, #15]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3714      	adds	r7, #20
 800de8e:	46bd      	mov	sp, r7
 800de90:	bc80      	pop	{r7}
 800de92:	4770      	bx	lr

0800de94 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	4613      	mov	r3, r2
 800dea0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dea8:	2302      	movs	r3, #2
 800deaa:	e01a      	b.n	800dee2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d003      	beq.n	800debe <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d003      	beq.n	800decc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2201      	movs	r2, #1
 800ded0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	79fa      	ldrb	r2, [r7, #7]
 800ded8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f005 fbac 	bl	8013638 <USBD_LL_Init>

  return USBD_OK;
 800dee0:	2300      	movs	r3, #0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3710      	adds	r7, #16
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800deea:	b480      	push	{r7}
 800deec:	b085      	sub	sp, #20
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
 800def2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800def4:	2300      	movs	r3, #0
 800def6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	73fb      	strb	r3, [r7, #15]
 800df0a:	e001      	b.n	800df10 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800df0c:	2302      	movs	r3, #2
 800df0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800df10:	7bfb      	ldrb	r3, [r7, #15]
}
 800df12:	4618      	mov	r0, r3
 800df14:	3714      	adds	r7, #20
 800df16:	46bd      	mov	sp, r7
 800df18:	bc80      	pop	{r7}
 800df1a:	4770      	bx	lr

0800df1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f005 fbd7 	bl	80136d8 <USBD_LL_Start>

  return USBD_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	370c      	adds	r7, #12
 800df42:	46bd      	mov	sp, r7
 800df44:	bc80      	pop	{r7}
 800df46:	4770      	bx	lr

0800df48 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800df54:	2302      	movs	r3, #2
 800df56:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00c      	beq.n	800df7c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	78fa      	ldrb	r2, [r7, #3]
 800df6c:	4611      	mov	r1, r2
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	4798      	blx	r3
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d101      	bne.n	800df7c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b082      	sub	sp, #8
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
 800df8e:	460b      	mov	r3, r1
 800df90:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	78fa      	ldrb	r2, [r7, #3]
 800df9c:	4611      	mov	r1, r2
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	4798      	blx	r3

  return USBD_OK;
 800dfa2:	2300      	movs	r3, #0
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f000 fed7 	bl	800ed72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dfe0:	f003 031f 	and.w	r3, r3, #31
 800dfe4:	2b02      	cmp	r3, #2
 800dfe6:	d016      	beq.n	800e016 <USBD_LL_SetupStage+0x6a>
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d81c      	bhi.n	800e026 <USBD_LL_SetupStage+0x7a>
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d002      	beq.n	800dff6 <USBD_LL_SetupStage+0x4a>
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d008      	beq.n	800e006 <USBD_LL_SetupStage+0x5a>
 800dff4:	e017      	b.n	800e026 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800dffc:	4619      	mov	r1, r3
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 f9ca 	bl	800e398 <USBD_StdDevReq>
      break;
 800e004:	e01a      	b.n	800e03c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e00c:	4619      	mov	r1, r3
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 fa2c 	bl	800e46c <USBD_StdItfReq>
      break;
 800e014:	e012      	b.n	800e03c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800e01c:	4619      	mov	r1, r3
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 fa6c 	bl	800e4fc <USBD_StdEPReq>
      break;
 800e024:	e00a      	b.n	800e03c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e02c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e030:	b2db      	uxtb	r3, r3
 800e032:	4619      	mov	r1, r3
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f005 fbaf 	bl	8013798 <USBD_LL_StallEP>
      break;
 800e03a:	bf00      	nop
  }

  return USBD_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b086      	sub	sp, #24
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	60f8      	str	r0, [r7, #12]
 800e04e:	460b      	mov	r3, r1
 800e050:	607a      	str	r2, [r7, #4]
 800e052:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e054:	7afb      	ldrb	r3, [r7, #11]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d14b      	bne.n	800e0f2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e060:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e068:	2b03      	cmp	r3, #3
 800e06a:	d134      	bne.n	800e0d6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	68da      	ldr	r2, [r3, #12]
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	691b      	ldr	r3, [r3, #16]
 800e074:	429a      	cmp	r2, r3
 800e076:	d919      	bls.n	800e0ac <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	68da      	ldr	r2, [r3, #12]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	1ad2      	subs	r2, r2, r3
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	68da      	ldr	r2, [r3, #12]
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e08e:	429a      	cmp	r2, r3
 800e090:	d203      	bcs.n	800e09a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800e096:	b29b      	uxth	r3, r3
 800e098:	e002      	b.n	800e0a0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e09e:	b29b      	uxth	r3, r3
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	6879      	ldr	r1, [r7, #4]
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f000 ff56 	bl	800ef56 <USBD_CtlContinueRx>
 800e0aa:	e038      	b.n	800e11e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00a      	beq.n	800e0ce <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d105      	bne.n	800e0ce <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 ff53 	bl	800ef7a <USBD_CtlSendStatus>
 800e0d4:	e023      	b.n	800e11e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e0dc:	2b05      	cmp	r3, #5
 800e0de:	d11e      	bne.n	800e11e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	68f8      	ldr	r0, [r7, #12]
 800e0ec:	f005 fb54 	bl	8013798 <USBD_LL_StallEP>
 800e0f0:	e015      	b.n	800e11e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00d      	beq.n	800e11a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e104:	2b03      	cmp	r3, #3
 800e106:	d108      	bne.n	800e11a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e10e:	699b      	ldr	r3, [r3, #24]
 800e110:	7afa      	ldrb	r2, [r7, #11]
 800e112:	4611      	mov	r1, r2
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	4798      	blx	r3
 800e118:	e001      	b.n	800e11e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e11a:	2302      	movs	r3, #2
 800e11c:	e000      	b.n	800e120 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800e11e:	2300      	movs	r3, #0
}
 800e120:	4618      	mov	r0, r3
 800e122:	3718      	adds	r7, #24
 800e124:	46bd      	mov	sp, r7
 800e126:	bd80      	pop	{r7, pc}

0800e128 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	460b      	mov	r3, r1
 800e132:	607a      	str	r2, [r7, #4]
 800e134:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e136:	7afb      	ldrb	r3, [r7, #11]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d17f      	bne.n	800e23c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3314      	adds	r3, #20
 800e140:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d15c      	bne.n	800e206 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	68da      	ldr	r2, [r3, #12]
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	429a      	cmp	r2, r3
 800e156:	d915      	bls.n	800e184 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	68da      	ldr	r2, [r3, #12]
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	1ad2      	subs	r2, r2, r3
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	68db      	ldr	r3, [r3, #12]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	461a      	mov	r2, r3
 800e16e:	6879      	ldr	r1, [r7, #4]
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 fec0 	bl	800eef6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e176:	2300      	movs	r3, #0
 800e178:	2200      	movs	r2, #0
 800e17a:	2100      	movs	r1, #0
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f005 fbb7 	bl	80138f0 <USBD_LL_PrepareReceive>
 800e182:	e04e      	b.n	800e222 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	697a      	ldr	r2, [r7, #20]
 800e18a:	6912      	ldr	r2, [r2, #16]
 800e18c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e190:	fb01 f202 	mul.w	r2, r1, r2
 800e194:	1a9b      	subs	r3, r3, r2
 800e196:	2b00      	cmp	r3, #0
 800e198:	d11c      	bne.n	800e1d4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	689a      	ldr	r2, [r3, #8]
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d316      	bcc.n	800e1d4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	689a      	ldr	r2, [r3, #8]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d20f      	bcs.n	800e1d4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 fe9c 	bl	800eef6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2100      	movs	r1, #0
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f005 fb8f 	bl	80138f0 <USBD_LL_PrepareReceive>
 800e1d2:	e026      	b.n	800e222 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00a      	beq.n	800e1f6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e1e6:	2b03      	cmp	r3, #3
 800e1e8:	d105      	bne.n	800e1f6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e1f6:	2180      	movs	r1, #128	; 0x80
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f005 facd 	bl	8013798 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f000 fece 	bl	800efa0 <USBD_CtlReceiveStatus>
 800e204:	e00d      	b.n	800e222 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d004      	beq.n	800e21a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e216:	2b00      	cmp	r3, #0
 800e218:	d103      	bne.n	800e222 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e21a:	2180      	movs	r1, #128	; 0x80
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f005 fabb 	bl	8013798 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d11d      	bne.n	800e268 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f7ff fe81 	bl	800df34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e23a:	e015      	b.n	800e268 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00d      	beq.n	800e264 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e24e:	2b03      	cmp	r3, #3
 800e250:	d108      	bne.n	800e264 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e258:	695b      	ldr	r3, [r3, #20]
 800e25a:	7afa      	ldrb	r2, [r7, #11]
 800e25c:	4611      	mov	r1, r2
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	4798      	blx	r3
 800e262:	e001      	b.n	800e268 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e264:	2302      	movs	r3, #2
 800e266:	e000      	b.n	800e26a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3718      	adds	r7, #24
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b082      	sub	sp, #8
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e27a:	2340      	movs	r3, #64	; 0x40
 800e27c:	2200      	movs	r2, #0
 800e27e:	2100      	movs	r1, #0
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f005 fa44 	bl	801370e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2201      	movs	r2, #1
 800e28a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2240      	movs	r2, #64	; 0x40
 800e292:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e296:	2340      	movs	r3, #64	; 0x40
 800e298:	2200      	movs	r2, #0
 800e29a:	2180      	movs	r1, #128	; 0x80
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f005 fa36 	bl	801370e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2240      	movs	r2, #64	; 0x40
 800e2ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d009      	beq.n	800e2ea <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	6852      	ldr	r2, [r2, #4]
 800e2e2:	b2d2      	uxtb	r2, r2
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	4798      	blx	r3
  }

  return USBD_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	78fa      	ldrb	r2, [r7, #3]
 800e304:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bc80      	pop	{r7}
 800e310:	4770      	bx	lr

0800e312 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e312:	b480      	push	{r7}
 800e314:	b083      	sub	sp, #12
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2204      	movs	r2, #4
 800e32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	bc80      	pop	{r7}
 800e338:	4770      	bx	lr

0800e33a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b083      	sub	sp, #12
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e348:	2b04      	cmp	r3, #4
 800e34a:	d105      	bne.n	800e358 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	370c      	adds	r7, #12
 800e35e:	46bd      	mov	sp, r7
 800e360:	bc80      	pop	{r7}
 800e362:	4770      	bx	lr

0800e364 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e372:	2b03      	cmp	r3, #3
 800e374:	d10b      	bne.n	800e38e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e37c:	69db      	ldr	r3, [r3, #28]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d005      	beq.n	800e38e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e3ae:	2b40      	cmp	r3, #64	; 0x40
 800e3b0:	d005      	beq.n	800e3be <USBD_StdDevReq+0x26>
 800e3b2:	2b40      	cmp	r3, #64	; 0x40
 800e3b4:	d84f      	bhi.n	800e456 <USBD_StdDevReq+0xbe>
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d009      	beq.n	800e3ce <USBD_StdDevReq+0x36>
 800e3ba:	2b20      	cmp	r3, #32
 800e3bc:	d14b      	bne.n	800e456 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	6839      	ldr	r1, [r7, #0]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	4798      	blx	r3
      break;
 800e3cc:	e048      	b.n	800e460 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	785b      	ldrb	r3, [r3, #1]
 800e3d2:	2b09      	cmp	r3, #9
 800e3d4:	d839      	bhi.n	800e44a <USBD_StdDevReq+0xb2>
 800e3d6:	a201      	add	r2, pc, #4	; (adr r2, 800e3dc <USBD_StdDevReq+0x44>)
 800e3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3dc:	0800e42d 	.word	0x0800e42d
 800e3e0:	0800e441 	.word	0x0800e441
 800e3e4:	0800e44b 	.word	0x0800e44b
 800e3e8:	0800e437 	.word	0x0800e437
 800e3ec:	0800e44b 	.word	0x0800e44b
 800e3f0:	0800e40f 	.word	0x0800e40f
 800e3f4:	0800e405 	.word	0x0800e405
 800e3f8:	0800e44b 	.word	0x0800e44b
 800e3fc:	0800e423 	.word	0x0800e423
 800e400:	0800e419 	.word	0x0800e419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f9dc 	bl	800e7c4 <USBD_GetDescriptor>
          break;
 800e40c:	e022      	b.n	800e454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fb3f 	bl	800ea94 <USBD_SetAddress>
          break;
 800e416:	e01d      	b.n	800e454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800e418:	6839      	ldr	r1, [r7, #0]
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fb7e 	bl	800eb1c <USBD_SetConfig>
          break;
 800e420:	e018      	b.n	800e454 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fc07 	bl	800ec38 <USBD_GetConfig>
          break;
 800e42a:	e013      	b.n	800e454 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e42c:	6839      	ldr	r1, [r7, #0]
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fc37 	bl	800eca2 <USBD_GetStatus>
          break;
 800e434:	e00e      	b.n	800e454 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e436:	6839      	ldr	r1, [r7, #0]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fc65 	bl	800ed08 <USBD_SetFeature>
          break;
 800e43e:	e009      	b.n	800e454 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e440:	6839      	ldr	r1, [r7, #0]
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fc74 	bl	800ed30 <USBD_ClrFeature>
          break;
 800e448:	e004      	b.n	800e454 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800e44a:	6839      	ldr	r1, [r7, #0]
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 fccc 	bl	800edea <USBD_CtlError>
          break;
 800e452:	bf00      	nop
      }
      break;
 800e454:	e004      	b.n	800e460 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800e456:	6839      	ldr	r1, [r7, #0]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fcc6 	bl	800edea <USBD_CtlError>
      break;
 800e45e:	bf00      	nop
  }

  return ret;
 800e460:	7bfb      	ldrb	r3, [r7, #15]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop

0800e46c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e476:	2300      	movs	r3, #0
 800e478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e482:	2b40      	cmp	r3, #64	; 0x40
 800e484:	d005      	beq.n	800e492 <USBD_StdItfReq+0x26>
 800e486:	2b40      	cmp	r3, #64	; 0x40
 800e488:	d82e      	bhi.n	800e4e8 <USBD_StdItfReq+0x7c>
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d001      	beq.n	800e492 <USBD_StdItfReq+0x26>
 800e48e:	2b20      	cmp	r3, #32
 800e490:	d12a      	bne.n	800e4e8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e498:	3b01      	subs	r3, #1
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d81d      	bhi.n	800e4da <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	889b      	ldrh	r3, [r3, #4]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d813      	bhi.n	800e4d0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	4798      	blx	r3
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	88db      	ldrh	r3, [r3, #6]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d110      	bne.n	800e4e4 <USBD_StdItfReq+0x78>
 800e4c2:	7bfb      	ldrb	r3, [r7, #15]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10d      	bne.n	800e4e4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fd56 	bl	800ef7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e4ce:	e009      	b.n	800e4e4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 fc89 	bl	800edea <USBD_CtlError>
          break;
 800e4d8:	e004      	b.n	800e4e4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fc84 	bl	800edea <USBD_CtlError>
          break;
 800e4e2:	e000      	b.n	800e4e6 <USBD_StdItfReq+0x7a>
          break;
 800e4e4:	bf00      	nop
      }
      break;
 800e4e6:	e004      	b.n	800e4f2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fc7d 	bl	800edea <USBD_CtlError>
      break;
 800e4f0:	bf00      	nop
  }

  return USBD_OK;
 800e4f2:	2300      	movs	r3, #0
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}

0800e4fc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b084      	sub	sp, #16
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e506:	2300      	movs	r3, #0
 800e508:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	889b      	ldrh	r3, [r3, #4]
 800e50e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e518:	2b40      	cmp	r3, #64	; 0x40
 800e51a:	d007      	beq.n	800e52c <USBD_StdEPReq+0x30>
 800e51c:	2b40      	cmp	r3, #64	; 0x40
 800e51e:	f200 8146 	bhi.w	800e7ae <USBD_StdEPReq+0x2b2>
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00a      	beq.n	800e53c <USBD_StdEPReq+0x40>
 800e526:	2b20      	cmp	r3, #32
 800e528:	f040 8141 	bne.w	800e7ae <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	4798      	blx	r3
      break;
 800e53a:	e13d      	b.n	800e7b8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e544:	2b20      	cmp	r3, #32
 800e546:	d10a      	bne.n	800e55e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	6839      	ldr	r1, [r7, #0]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	4798      	blx	r3
 800e556:	4603      	mov	r3, r0
 800e558:	73fb      	strb	r3, [r7, #15]

        return ret;
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
 800e55c:	e12d      	b.n	800e7ba <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	785b      	ldrb	r3, [r3, #1]
 800e562:	2b03      	cmp	r3, #3
 800e564:	d007      	beq.n	800e576 <USBD_StdEPReq+0x7a>
 800e566:	2b03      	cmp	r3, #3
 800e568:	f300 811b 	bgt.w	800e7a2 <USBD_StdEPReq+0x2a6>
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d072      	beq.n	800e656 <USBD_StdEPReq+0x15a>
 800e570:	2b01      	cmp	r3, #1
 800e572:	d03a      	beq.n	800e5ea <USBD_StdEPReq+0xee>
 800e574:	e115      	b.n	800e7a2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d002      	beq.n	800e586 <USBD_StdEPReq+0x8a>
 800e580:	2b03      	cmp	r3, #3
 800e582:	d015      	beq.n	800e5b0 <USBD_StdEPReq+0xb4>
 800e584:	e02b      	b.n	800e5de <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e586:	7bbb      	ldrb	r3, [r7, #14]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d00c      	beq.n	800e5a6 <USBD_StdEPReq+0xaa>
 800e58c:	7bbb      	ldrb	r3, [r7, #14]
 800e58e:	2b80      	cmp	r3, #128	; 0x80
 800e590:	d009      	beq.n	800e5a6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800e592:	7bbb      	ldrb	r3, [r7, #14]
 800e594:	4619      	mov	r1, r3
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f005 f8fe 	bl	8013798 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800e59c:	2180      	movs	r1, #128	; 0x80
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f005 f8fa 	bl	8013798 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5a4:	e020      	b.n	800e5e8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 fc1e 	bl	800edea <USBD_CtlError>
              break;
 800e5ae:	e01b      	b.n	800e5e8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	885b      	ldrh	r3, [r3, #2]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10e      	bne.n	800e5d6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00b      	beq.n	800e5d6 <USBD_StdEPReq+0xda>
 800e5be:	7bbb      	ldrb	r3, [r7, #14]
 800e5c0:	2b80      	cmp	r3, #128	; 0x80
 800e5c2:	d008      	beq.n	800e5d6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	88db      	ldrh	r3, [r3, #6]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d104      	bne.n	800e5d6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800e5cc:	7bbb      	ldrb	r3, [r7, #14]
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f005 f8e1 	bl	8013798 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fccf 	bl	800ef7a <USBD_CtlSendStatus>

              break;
 800e5dc:	e004      	b.n	800e5e8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800e5de:	6839      	ldr	r1, [r7, #0]
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 fc02 	bl	800edea <USBD_CtlError>
              break;
 800e5e6:	bf00      	nop
          }
          break;
 800e5e8:	e0e0      	b.n	800e7ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d002      	beq.n	800e5fa <USBD_StdEPReq+0xfe>
 800e5f4:	2b03      	cmp	r3, #3
 800e5f6:	d015      	beq.n	800e624 <USBD_StdEPReq+0x128>
 800e5f8:	e026      	b.n	800e648 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5fa:	7bbb      	ldrb	r3, [r7, #14]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00c      	beq.n	800e61a <USBD_StdEPReq+0x11e>
 800e600:	7bbb      	ldrb	r3, [r7, #14]
 800e602:	2b80      	cmp	r3, #128	; 0x80
 800e604:	d009      	beq.n	800e61a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800e606:	7bbb      	ldrb	r3, [r7, #14]
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f005 f8c4 	bl	8013798 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800e610:	2180      	movs	r1, #128	; 0x80
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f005 f8c0 	bl	8013798 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e618:	e01c      	b.n	800e654 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 fbe4 	bl	800edea <USBD_CtlError>
              break;
 800e622:	e017      	b.n	800e654 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	885b      	ldrh	r3, [r3, #2]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d112      	bne.n	800e652 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e62c:	7bbb      	ldrb	r3, [r7, #14]
 800e62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e632:	2b00      	cmp	r3, #0
 800e634:	d004      	beq.n	800e640 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800e636:	7bbb      	ldrb	r3, [r7, #14]
 800e638:	4619      	mov	r1, r3
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f005 f8cb 	bl	80137d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 fc9a 	bl	800ef7a <USBD_CtlSendStatus>
              }
              break;
 800e646:	e004      	b.n	800e652 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fbcd 	bl	800edea <USBD_CtlError>
              break;
 800e650:	e000      	b.n	800e654 <USBD_StdEPReq+0x158>
              break;
 800e652:	bf00      	nop
          }
          break;
 800e654:	e0aa      	b.n	800e7ac <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e65c:	2b02      	cmp	r3, #2
 800e65e:	d002      	beq.n	800e666 <USBD_StdEPReq+0x16a>
 800e660:	2b03      	cmp	r3, #3
 800e662:	d032      	beq.n	800e6ca <USBD_StdEPReq+0x1ce>
 800e664:	e097      	b.n	800e796 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d007      	beq.n	800e67c <USBD_StdEPReq+0x180>
 800e66c:	7bbb      	ldrb	r3, [r7, #14]
 800e66e:	2b80      	cmp	r3, #128	; 0x80
 800e670:	d004      	beq.n	800e67c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800e672:	6839      	ldr	r1, [r7, #0]
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 fbb8 	bl	800edea <USBD_CtlError>
                break;
 800e67a:	e091      	b.n	800e7a0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e67c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e680:	2b00      	cmp	r3, #0
 800e682:	da0b      	bge.n	800e69c <USBD_StdEPReq+0x1a0>
 800e684:	7bbb      	ldrb	r3, [r7, #14]
 800e686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e68a:	4613      	mov	r3, r2
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4413      	add	r3, r2
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	3310      	adds	r3, #16
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	4413      	add	r3, r2
 800e698:	3304      	adds	r3, #4
 800e69a:	e00b      	b.n	800e6b4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e69c:	7bbb      	ldrb	r3, [r7, #14]
 800e69e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	4413      	add	r3, r2
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e6ae:	687a      	ldr	r2, [r7, #4]
 800e6b0:	4413      	add	r3, r2
 800e6b2:	3304      	adds	r3, #4
 800e6b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	2202      	movs	r2, #2
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f000 fbfb 	bl	800eebe <USBD_CtlSendData>
              break;
 800e6c8:	e06a      	b.n	800e7a0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e6ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	da11      	bge.n	800e6f6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e6d2:	7bbb      	ldrb	r3, [r7, #14]
 800e6d4:	f003 020f 	and.w	r2, r3, #15
 800e6d8:	6879      	ldr	r1, [r7, #4]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	4413      	add	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	440b      	add	r3, r1
 800e6e4:	3318      	adds	r3, #24
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d117      	bne.n	800e71c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fb7b 	bl	800edea <USBD_CtlError>
                  break;
 800e6f4:	e054      	b.n	800e7a0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e6f6:	7bbb      	ldrb	r3, [r7, #14]
 800e6f8:	f003 020f 	and.w	r2, r3, #15
 800e6fc:	6879      	ldr	r1, [r7, #4]
 800e6fe:	4613      	mov	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4413      	add	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	440b      	add	r3, r1
 800e708:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d104      	bne.n	800e71c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 fb68 	bl	800edea <USBD_CtlError>
                  break;
 800e71a:	e041      	b.n	800e7a0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e71c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e720:	2b00      	cmp	r3, #0
 800e722:	da0b      	bge.n	800e73c <USBD_StdEPReq+0x240>
 800e724:	7bbb      	ldrb	r3, [r7, #14]
 800e726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e72a:	4613      	mov	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	3310      	adds	r3, #16
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	4413      	add	r3, r2
 800e738:	3304      	adds	r3, #4
 800e73a:	e00b      	b.n	800e754 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e73c:	7bbb      	ldrb	r3, [r7, #14]
 800e73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e742:	4613      	mov	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	4413      	add	r3, r2
 800e752:	3304      	adds	r3, #4
 800e754:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e756:	7bbb      	ldrb	r3, [r7, #14]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d002      	beq.n	800e762 <USBD_StdEPReq+0x266>
 800e75c:	7bbb      	ldrb	r3, [r7, #14]
 800e75e:	2b80      	cmp	r3, #128	; 0x80
 800e760:	d103      	bne.n	800e76a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	2200      	movs	r2, #0
 800e766:	601a      	str	r2, [r3, #0]
 800e768:	e00e      	b.n	800e788 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800e76a:	7bbb      	ldrb	r3, [r7, #14]
 800e76c:	4619      	mov	r1, r3
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f005 f850 	bl	8013814 <USBD_LL_IsStallEP>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d003      	beq.n	800e782 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	2201      	movs	r2, #1
 800e77e:	601a      	str	r2, [r3, #0]
 800e780:	e002      	b.n	800e788 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	2200      	movs	r2, #0
 800e786:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2202      	movs	r2, #2
 800e78c:	4619      	mov	r1, r3
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fb95 	bl	800eebe <USBD_CtlSendData>
              break;
 800e794:	e004      	b.n	800e7a0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800e796:	6839      	ldr	r1, [r7, #0]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fb26 	bl	800edea <USBD_CtlError>
              break;
 800e79e:	bf00      	nop
          }
          break;
 800e7a0:	e004      	b.n	800e7ac <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800e7a2:	6839      	ldr	r1, [r7, #0]
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 fb20 	bl	800edea <USBD_CtlError>
          break;
 800e7aa:	bf00      	nop
      }
      break;
 800e7ac:	e004      	b.n	800e7b8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fb1a 	bl	800edea <USBD_CtlError>
      break;
 800e7b6:	bf00      	nop
  }

  return ret;
 800e7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
	...

0800e7c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	885b      	ldrh	r3, [r3, #2]
 800e7de:	0a1b      	lsrs	r3, r3, #8
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	3b01      	subs	r3, #1
 800e7e4:	2b06      	cmp	r3, #6
 800e7e6:	f200 8128 	bhi.w	800ea3a <USBD_GetDescriptor+0x276>
 800e7ea:	a201      	add	r2, pc, #4	; (adr r2, 800e7f0 <USBD_GetDescriptor+0x2c>)
 800e7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f0:	0800e80d 	.word	0x0800e80d
 800e7f4:	0800e825 	.word	0x0800e825
 800e7f8:	0800e865 	.word	0x0800e865
 800e7fc:	0800ea3b 	.word	0x0800ea3b
 800e800:	0800ea3b 	.word	0x0800ea3b
 800e804:	0800e9db 	.word	0x0800e9db
 800e808:	0800ea07 	.word	0x0800ea07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	7c12      	ldrb	r2, [r2, #16]
 800e818:	f107 0108 	add.w	r1, r7, #8
 800e81c:	4610      	mov	r0, r2
 800e81e:	4798      	blx	r3
 800e820:	60f8      	str	r0, [r7, #12]
      break;
 800e822:	e112      	b.n	800ea4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	7c1b      	ldrb	r3, [r3, #16]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10d      	bne.n	800e848 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e834:	f107 0208 	add.w	r2, r7, #8
 800e838:	4610      	mov	r0, r2
 800e83a:	4798      	blx	r3
 800e83c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3301      	adds	r3, #1
 800e842:	2202      	movs	r2, #2
 800e844:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e846:	e100      	b.n	800ea4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	f107 0208 	add.w	r2, r7, #8
 800e854:	4610      	mov	r0, r2
 800e856:	4798      	blx	r3
 800e858:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	3301      	adds	r3, #1
 800e85e:	2202      	movs	r2, #2
 800e860:	701a      	strb	r2, [r3, #0]
      break;
 800e862:	e0f2      	b.n	800ea4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	885b      	ldrh	r3, [r3, #2]
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	2b05      	cmp	r3, #5
 800e86c:	f200 80ac 	bhi.w	800e9c8 <USBD_GetDescriptor+0x204>
 800e870:	a201      	add	r2, pc, #4	; (adr r2, 800e878 <USBD_GetDescriptor+0xb4>)
 800e872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e876:	bf00      	nop
 800e878:	0800e891 	.word	0x0800e891
 800e87c:	0800e8c5 	.word	0x0800e8c5
 800e880:	0800e8f9 	.word	0x0800e8f9
 800e884:	0800e92d 	.word	0x0800e92d
 800e888:	0800e961 	.word	0x0800e961
 800e88c:	0800e995 	.word	0x0800e995
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00b      	beq.n	800e8b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	7c12      	ldrb	r2, [r2, #16]
 800e8a8:	f107 0108 	add.w	r1, r7, #8
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	4798      	blx	r3
 800e8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8b2:	e091      	b.n	800e9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8b4:	6839      	ldr	r1, [r7, #0]
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 fa97 	bl	800edea <USBD_CtlError>
            err++;
 800e8bc:	7afb      	ldrb	r3, [r7, #11]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800e8c2:	e089      	b.n	800e9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e8ca:	689b      	ldr	r3, [r3, #8]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00b      	beq.n	800e8e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	687a      	ldr	r2, [r7, #4]
 800e8da:	7c12      	ldrb	r2, [r2, #16]
 800e8dc:	f107 0108 	add.w	r1, r7, #8
 800e8e0:	4610      	mov	r0, r2
 800e8e2:	4798      	blx	r3
 800e8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8e6:	e077      	b.n	800e9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e8e8:	6839      	ldr	r1, [r7, #0]
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f000 fa7d 	bl	800edea <USBD_CtlError>
            err++;
 800e8f0:	7afb      	ldrb	r3, [r7, #11]
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800e8f6:	e06f      	b.n	800e9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00b      	beq.n	800e91c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	687a      	ldr	r2, [r7, #4]
 800e90e:	7c12      	ldrb	r2, [r2, #16]
 800e910:	f107 0108 	add.w	r1, r7, #8
 800e914:	4610      	mov	r0, r2
 800e916:	4798      	blx	r3
 800e918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e91a:	e05d      	b.n	800e9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e91c:	6839      	ldr	r1, [r7, #0]
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 fa63 	bl	800edea <USBD_CtlError>
            err++;
 800e924:	7afb      	ldrb	r3, [r7, #11]
 800e926:	3301      	adds	r3, #1
 800e928:	72fb      	strb	r3, [r7, #11]
          break;
 800e92a:	e055      	b.n	800e9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00b      	beq.n	800e950 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	7c12      	ldrb	r2, [r2, #16]
 800e944:	f107 0108 	add.w	r1, r7, #8
 800e948:	4610      	mov	r0, r2
 800e94a:	4798      	blx	r3
 800e94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e94e:	e043      	b.n	800e9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 fa49 	bl	800edea <USBD_CtlError>
            err++;
 800e958:	7afb      	ldrb	r3, [r7, #11]
 800e95a:	3301      	adds	r3, #1
 800e95c:	72fb      	strb	r3, [r7, #11]
          break;
 800e95e:	e03b      	b.n	800e9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e966:	695b      	ldr	r3, [r3, #20]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d00b      	beq.n	800e984 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e972:	695b      	ldr	r3, [r3, #20]
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	7c12      	ldrb	r2, [r2, #16]
 800e978:	f107 0108 	add.w	r1, r7, #8
 800e97c:	4610      	mov	r0, r2
 800e97e:	4798      	blx	r3
 800e980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e982:	e029      	b.n	800e9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e984:	6839      	ldr	r1, [r7, #0]
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 fa2f 	bl	800edea <USBD_CtlError>
            err++;
 800e98c:	7afb      	ldrb	r3, [r7, #11]
 800e98e:	3301      	adds	r3, #1
 800e990:	72fb      	strb	r3, [r7, #11]
          break;
 800e992:	e021      	b.n	800e9d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d00b      	beq.n	800e9b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e9a6:	699b      	ldr	r3, [r3, #24]
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	7c12      	ldrb	r2, [r2, #16]
 800e9ac:	f107 0108 	add.w	r1, r7, #8
 800e9b0:	4610      	mov	r0, r2
 800e9b2:	4798      	blx	r3
 800e9b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9b6:	e00f      	b.n	800e9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9b8:	6839      	ldr	r1, [r7, #0]
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 fa15 	bl	800edea <USBD_CtlError>
            err++;
 800e9c0:	7afb      	ldrb	r3, [r7, #11]
 800e9c2:	3301      	adds	r3, #1
 800e9c4:	72fb      	strb	r3, [r7, #11]
          break;
 800e9c6:	e007      	b.n	800e9d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e9c8:	6839      	ldr	r1, [r7, #0]
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 fa0d 	bl	800edea <USBD_CtlError>
          err++;
 800e9d0:	7afb      	ldrb	r3, [r7, #11]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800e9d6:	e038      	b.n	800ea4a <USBD_GetDescriptor+0x286>
 800e9d8:	e037      	b.n	800ea4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	7c1b      	ldrb	r3, [r3, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d109      	bne.n	800e9f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ea:	f107 0208 	add.w	r2, r7, #8
 800e9ee:	4610      	mov	r0, r2
 800e9f0:	4798      	blx	r3
 800e9f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e9f4:	e029      	b.n	800ea4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 f9f6 	bl	800edea <USBD_CtlError>
        err++;
 800e9fe:	7afb      	ldrb	r3, [r7, #11]
 800ea00:	3301      	adds	r3, #1
 800ea02:	72fb      	strb	r3, [r7, #11]
      break;
 800ea04:	e021      	b.n	800ea4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	7c1b      	ldrb	r3, [r3, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d10d      	bne.n	800ea2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea16:	f107 0208 	add.w	r2, r7, #8
 800ea1a:	4610      	mov	r0, r2
 800ea1c:	4798      	blx	r3
 800ea1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	3301      	adds	r3, #1
 800ea24:	2207      	movs	r2, #7
 800ea26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea28:	e00f      	b.n	800ea4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 f9dc 	bl	800edea <USBD_CtlError>
        err++;
 800ea32:	7afb      	ldrb	r3, [r7, #11]
 800ea34:	3301      	adds	r3, #1
 800ea36:	72fb      	strb	r3, [r7, #11]
      break;
 800ea38:	e007      	b.n	800ea4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ea3a:	6839      	ldr	r1, [r7, #0]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 f9d4 	bl	800edea <USBD_CtlError>
      err++;
 800ea42:	7afb      	ldrb	r3, [r7, #11]
 800ea44:	3301      	adds	r3, #1
 800ea46:	72fb      	strb	r3, [r7, #11]
      break;
 800ea48:	bf00      	nop
  }

  if (err != 0U)
 800ea4a:	7afb      	ldrb	r3, [r7, #11]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d11c      	bne.n	800ea8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ea50:	893b      	ldrh	r3, [r7, #8]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d011      	beq.n	800ea7a <USBD_GetDescriptor+0x2b6>
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	88db      	ldrh	r3, [r3, #6]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00d      	beq.n	800ea7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	88da      	ldrh	r2, [r3, #6]
 800ea62:	893b      	ldrh	r3, [r7, #8]
 800ea64:	4293      	cmp	r3, r2
 800ea66:	bf28      	it	cs
 800ea68:	4613      	movcs	r3, r2
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ea6e:	893b      	ldrh	r3, [r7, #8]
 800ea70:	461a      	mov	r2, r3
 800ea72:	68f9      	ldr	r1, [r7, #12]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fa22 	bl	800eebe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	88db      	ldrh	r3, [r3, #6]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d104      	bne.n	800ea8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fa79 	bl	800ef7a <USBD_CtlSendStatus>
 800ea88:	e000      	b.n	800ea8c <USBD_GetDescriptor+0x2c8>
    return;
 800ea8a:	bf00      	nop
    }
  }
}
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop

0800ea94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	889b      	ldrh	r3, [r3, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d130      	bne.n	800eb08 <USBD_SetAddress+0x74>
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	88db      	ldrh	r3, [r3, #6]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d12c      	bne.n	800eb08 <USBD_SetAddress+0x74>
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	885b      	ldrh	r3, [r3, #2]
 800eab2:	2b7f      	cmp	r3, #127	; 0x7f
 800eab4:	d828      	bhi.n	800eb08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	885b      	ldrh	r3, [r3, #2]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eac0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	d104      	bne.n	800ead6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800eacc:	6839      	ldr	r1, [r7, #0]
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f98b 	bl	800edea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ead4:	e01d      	b.n	800eb12 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	7bfa      	ldrb	r2, [r7, #15]
 800eada:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eade:	7bfb      	ldrb	r3, [r7, #15]
 800eae0:	4619      	mov	r1, r3
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f004 fec2 	bl	801386c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f000 fa46 	bl	800ef7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eaee:	7bfb      	ldrb	r3, [r7, #15]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d004      	beq.n	800eafe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eafc:	e009      	b.n	800eb12 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2201      	movs	r2, #1
 800eb02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb06:	e004      	b.n	800eb12 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 f96d 	bl	800edea <USBD_CtlError>
  }
}
 800eb10:	bf00      	nop
 800eb12:	bf00      	nop
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
	...

0800eb1c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	885b      	ldrh	r3, [r3, #2]
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	4b41      	ldr	r3, [pc, #260]	; (800ec34 <USBD_SetConfig+0x118>)
 800eb2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eb30:	4b40      	ldr	r3, [pc, #256]	; (800ec34 <USBD_SetConfig+0x118>)
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d904      	bls.n	800eb42 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800eb38:	6839      	ldr	r1, [r7, #0]
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 f955 	bl	800edea <USBD_CtlError>
 800eb40:	e075      	b.n	800ec2e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d002      	beq.n	800eb52 <USBD_SetConfig+0x36>
 800eb4c:	2b03      	cmp	r3, #3
 800eb4e:	d023      	beq.n	800eb98 <USBD_SetConfig+0x7c>
 800eb50:	e062      	b.n	800ec18 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800eb52:	4b38      	ldr	r3, [pc, #224]	; (800ec34 <USBD_SetConfig+0x118>)
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d01a      	beq.n	800eb90 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800eb5a:	4b36      	ldr	r3, [pc, #216]	; (800ec34 <USBD_SetConfig+0x118>)
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2203      	movs	r2, #3
 800eb68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800eb6c:	4b31      	ldr	r3, [pc, #196]	; (800ec34 <USBD_SetConfig+0x118>)
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	4619      	mov	r1, r3
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff f9e8 	bl	800df48 <USBD_SetClassConfig>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	d104      	bne.n	800eb88 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 f932 	bl	800edea <USBD_CtlError>
            return;
 800eb86:	e052      	b.n	800ec2e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f000 f9f6 	bl	800ef7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800eb8e:	e04e      	b.n	800ec2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 f9f2 	bl	800ef7a <USBD_CtlSendStatus>
        break;
 800eb96:	e04a      	b.n	800ec2e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800eb98:	4b26      	ldr	r3, [pc, #152]	; (800ec34 <USBD_SetConfig+0x118>)
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d112      	bne.n	800ebc6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2202      	movs	r2, #2
 800eba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800eba8:	4b22      	ldr	r3, [pc, #136]	; (800ec34 <USBD_SetConfig+0x118>)
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	461a      	mov	r2, r3
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ebb2:	4b20      	ldr	r3, [pc, #128]	; (800ec34 <USBD_SetConfig+0x118>)
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7ff f9e4 	bl	800df86 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800ebbe:	6878      	ldr	r0, [r7, #4]
 800ebc0:	f000 f9db 	bl	800ef7a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ebc4:	e033      	b.n	800ec2e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800ebc6:	4b1b      	ldr	r3, [pc, #108]	; (800ec34 <USBD_SetConfig+0x118>)
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d01d      	beq.n	800ec10 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	4619      	mov	r1, r3
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff f9d2 	bl	800df86 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ebe2:	4b14      	ldr	r3, [pc, #80]	; (800ec34 <USBD_SetConfig+0x118>)
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ebec:	4b11      	ldr	r3, [pc, #68]	; (800ec34 <USBD_SetConfig+0x118>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7ff f9a8 	bl	800df48 <USBD_SetClassConfig>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b02      	cmp	r3, #2
 800ebfc:	d104      	bne.n	800ec08 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800ebfe:	6839      	ldr	r1, [r7, #0]
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 f8f2 	bl	800edea <USBD_CtlError>
            return;
 800ec06:	e012      	b.n	800ec2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f9b6 	bl	800ef7a <USBD_CtlSendStatus>
        break;
 800ec0e:	e00e      	b.n	800ec2e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 f9b2 	bl	800ef7a <USBD_CtlSendStatus>
        break;
 800ec16:	e00a      	b.n	800ec2e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 f8e5 	bl	800edea <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ec20:	4b04      	ldr	r3, [pc, #16]	; (800ec34 <USBD_SetConfig+0x118>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	4619      	mov	r1, r3
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f7ff f9ad 	bl	800df86 <USBD_ClrClassConfig>
        break;
 800ec2c:	bf00      	nop
    }
  }
}
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	20001c94 	.word	0x20001c94

0800ec38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	88db      	ldrh	r3, [r3, #6]
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d004      	beq.n	800ec54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ec4a:	6839      	ldr	r1, [r7, #0]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f8cc 	bl	800edea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ec52:	e022      	b.n	800ec9a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	dc02      	bgt.n	800ec64 <USBD_GetConfig+0x2c>
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	dc03      	bgt.n	800ec6a <USBD_GetConfig+0x32>
 800ec62:	e015      	b.n	800ec90 <USBD_GetConfig+0x58>
 800ec64:	2b03      	cmp	r3, #3
 800ec66:	d00b      	beq.n	800ec80 <USBD_GetConfig+0x48>
 800ec68:	e012      	b.n	800ec90 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3308      	adds	r3, #8
 800ec74:	2201      	movs	r2, #1
 800ec76:	4619      	mov	r1, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f920 	bl	800eebe <USBD_CtlSendData>
        break;
 800ec7e:	e00c      	b.n	800ec9a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	3304      	adds	r3, #4
 800ec84:	2201      	movs	r2, #1
 800ec86:	4619      	mov	r1, r3
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f000 f918 	bl	800eebe <USBD_CtlSendData>
        break;
 800ec8e:	e004      	b.n	800ec9a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 f8a9 	bl	800edea <USBD_CtlError>
        break;
 800ec98:	bf00      	nop
}
 800ec9a:	bf00      	nop
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b082      	sub	sp, #8
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	2b02      	cmp	r3, #2
 800ecb6:	d81e      	bhi.n	800ecf6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	88db      	ldrh	r3, [r3, #6]
 800ecbc:	2b02      	cmp	r3, #2
 800ecbe:	d004      	beq.n	800ecca <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f000 f891 	bl	800edea <USBD_CtlError>
        break;
 800ecc8:	e01a      	b.n	800ed00 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d005      	beq.n	800ece6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	f043 0202 	orr.w	r2, r3, #2
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	330c      	adds	r3, #12
 800ecea:	2202      	movs	r2, #2
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 f8e5 	bl	800eebe <USBD_CtlSendData>
      break;
 800ecf4:	e004      	b.n	800ed00 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f876 	bl	800edea <USBD_CtlError>
      break;
 800ecfe:	bf00      	nop
  }
}
 800ed00:	bf00      	nop
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	885b      	ldrh	r3, [r3, #2]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d106      	bne.n	800ed28 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f000 f929 	bl	800ef7a <USBD_CtlSendStatus>
  }
}
 800ed28:	bf00      	nop
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed40:	3b01      	subs	r3, #1
 800ed42:	2b02      	cmp	r3, #2
 800ed44:	d80b      	bhi.n	800ed5e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	885b      	ldrh	r3, [r3, #2]
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d10c      	bne.n	800ed68 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 f90f 	bl	800ef7a <USBD_CtlSendStatus>
      }
      break;
 800ed5c:	e004      	b.n	800ed68 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 f842 	bl	800edea <USBD_CtlError>
      break;
 800ed66:	e000      	b.n	800ed6a <USBD_ClrFeature+0x3a>
      break;
 800ed68:	bf00      	nop
  }
}
 800ed6a:	bf00      	nop
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed72:	b480      	push	{r7}
 800ed74:	b083      	sub	sp, #12
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	781a      	ldrb	r2, [r3, #0]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	785a      	ldrb	r2, [r3, #1]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	3302      	adds	r3, #2
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	3303      	adds	r3, #3
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	021b      	lsls	r3, r3, #8
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4413      	add	r3, r2
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	3304      	adds	r3, #4
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	b29a      	uxth	r2, r3
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	3305      	adds	r3, #5
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	021b      	lsls	r3, r3, #8
 800edba:	b29b      	uxth	r3, r3
 800edbc:	4413      	add	r3, r2
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	3306      	adds	r3, #6
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	b29a      	uxth	r2, r3
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	3307      	adds	r3, #7
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	021b      	lsls	r3, r3, #8
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	4413      	add	r3, r2
 800edda:	b29a      	uxth	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	80da      	strh	r2, [r3, #6]

}
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bc80      	pop	{r7}
 800ede8:	4770      	bx	lr

0800edea <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b082      	sub	sp, #8
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800edf4:	2180      	movs	r1, #128	; 0x80
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f004 fcce 	bl	8013798 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800edfc:	2100      	movs	r1, #0
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f004 fcca 	bl	8013798 <USBD_LL_StallEP>
}
 800ee04:	bf00      	nop
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d032      	beq.n	800ee88 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f000 f834 	bl	800ee90 <USBD_GetLen>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ee36:	7dfb      	ldrb	r3, [r7, #23]
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	75fa      	strb	r2, [r7, #23]
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	4413      	add	r3, r2
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	7812      	ldrb	r2, [r2, #0]
 800ee46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ee48:	7dfb      	ldrb	r3, [r7, #23]
 800ee4a:	1c5a      	adds	r2, r3, #1
 800ee4c:	75fa      	strb	r2, [r7, #23]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	4413      	add	r3, r2
 800ee54:	2203      	movs	r2, #3
 800ee56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ee58:	e012      	b.n	800ee80 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	60fa      	str	r2, [r7, #12]
 800ee60:	7dfa      	ldrb	r2, [r7, #23]
 800ee62:	1c51      	adds	r1, r2, #1
 800ee64:	75f9      	strb	r1, [r7, #23]
 800ee66:	4611      	mov	r1, r2
 800ee68:	68ba      	ldr	r2, [r7, #8]
 800ee6a:	440a      	add	r2, r1
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ee70:	7dfb      	ldrb	r3, [r7, #23]
 800ee72:	1c5a      	adds	r2, r3, #1
 800ee74:	75fa      	strb	r2, [r7, #23]
 800ee76:	461a      	mov	r2, r3
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e8      	bne.n	800ee5a <USBD_GetString+0x4e>
    }
  }
}
 800ee88:	bf00      	nop
 800ee8a:	3718      	adds	r7, #24
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee90:	b480      	push	{r7}
 800ee92:	b085      	sub	sp, #20
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ee9c:	e005      	b.n	800eeaa <USBD_GetLen+0x1a>
  {
    len++;
 800ee9e:	7bfb      	ldrb	r3, [r7, #15]
 800eea0:	3301      	adds	r3, #1
 800eea2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	3301      	adds	r3, #1
 800eea8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1f5      	bne.n	800ee9e <USBD_GetLen+0xe>
  }

  return len;
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3714      	adds	r7, #20
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bc80      	pop	{r7}
 800eebc:	4770      	bx	lr

0800eebe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b084      	sub	sp, #16
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	60f8      	str	r0, [r7, #12]
 800eec6:	60b9      	str	r1, [r7, #8]
 800eec8:	4613      	mov	r3, r2
 800eeca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2202      	movs	r2, #2
 800eed0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eed4:	88fa      	ldrh	r2, [r7, #6]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800eeda:	88fa      	ldrh	r2, [r7, #6]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eee0:	88fb      	ldrh	r3, [r7, #6]
 800eee2:	68ba      	ldr	r2, [r7, #8]
 800eee4:	2100      	movs	r1, #0
 800eee6:	68f8      	ldr	r0, [r7, #12]
 800eee8:	f004 fcdf 	bl	80138aa <USBD_LL_Transmit>

  return USBD_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}

0800eef6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800eef6:	b580      	push	{r7, lr}
 800eef8:	b084      	sub	sp, #16
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	60f8      	str	r0, [r7, #12]
 800eefe:	60b9      	str	r1, [r7, #8]
 800ef00:	4613      	mov	r3, r2
 800ef02:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ef04:	88fb      	ldrh	r3, [r7, #6]
 800ef06:	68ba      	ldr	r2, [r7, #8]
 800ef08:	2100      	movs	r1, #0
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f004 fccd 	bl	80138aa <USBD_LL_Transmit>

  return USBD_OK;
 800ef10:	2300      	movs	r3, #0
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}

0800ef1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	60f8      	str	r0, [r7, #12]
 800ef22:	60b9      	str	r1, [r7, #8]
 800ef24:	4613      	mov	r3, r2
 800ef26:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2203      	movs	r2, #3
 800ef2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ef30:	88fa      	ldrh	r2, [r7, #6]
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ef38:	88fa      	ldrh	r2, [r7, #6]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef40:	88fb      	ldrh	r3, [r7, #6]
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	2100      	movs	r1, #0
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f004 fcd2 	bl	80138f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	60f8      	str	r0, [r7, #12]
 800ef5e:	60b9      	str	r1, [r7, #8]
 800ef60:	4613      	mov	r3, r2
 800ef62:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef64:	88fb      	ldrh	r3, [r7, #6]
 800ef66:	68ba      	ldr	r2, [r7, #8]
 800ef68:	2100      	movs	r1, #0
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f004 fcc0 	bl	80138f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}

0800ef7a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef7a:	b580      	push	{r7, lr}
 800ef7c:	b082      	sub	sp, #8
 800ef7e:	af00      	add	r7, sp, #0
 800ef80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2204      	movs	r2, #4
 800ef86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2100      	movs	r1, #0
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f004 fc8a 	bl	80138aa <USBD_LL_Transmit>

  return USBD_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2205      	movs	r2, #5
 800efac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800efb0:	2300      	movs	r3, #0
 800efb2:	2200      	movs	r2, #0
 800efb4:	2100      	movs	r1, #0
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f004 fc9a 	bl	80138f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3708      	adds	r7, #8
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800efd2:	79fb      	ldrb	r3, [r7, #7]
 800efd4:	4a08      	ldr	r2, [pc, #32]	; (800eff8 <disk_status+0x30>)
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4413      	add	r3, r2
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	79fa      	ldrb	r2, [r7, #7]
 800efe0:	4905      	ldr	r1, [pc, #20]	; (800eff8 <disk_status+0x30>)
 800efe2:	440a      	add	r2, r1
 800efe4:	7a12      	ldrb	r2, [r2, #8]
 800efe6:	4610      	mov	r0, r2
 800efe8:	4798      	blx	r3
 800efea:	4603      	mov	r3, r0
 800efec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800efee:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	20001cb8 	.word	0x20001cb8

0800effc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b084      	sub	sp, #16
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f006:	2300      	movs	r3, #0
 800f008:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800f00a:	79fb      	ldrb	r3, [r7, #7]
 800f00c:	4a0d      	ldr	r2, [pc, #52]	; (800f044 <disk_initialize+0x48>)
 800f00e:	5cd3      	ldrb	r3, [r2, r3]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d111      	bne.n	800f038 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800f014:	79fb      	ldrb	r3, [r7, #7]
 800f016:	4a0b      	ldr	r2, [pc, #44]	; (800f044 <disk_initialize+0x48>)
 800f018:	2101      	movs	r1, #1
 800f01a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f01c:	79fb      	ldrb	r3, [r7, #7]
 800f01e:	4a09      	ldr	r2, [pc, #36]	; (800f044 <disk_initialize+0x48>)
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	79fa      	ldrb	r2, [r7, #7]
 800f02a:	4906      	ldr	r1, [pc, #24]	; (800f044 <disk_initialize+0x48>)
 800f02c:	440a      	add	r2, r1
 800f02e:	7a12      	ldrb	r2, [r2, #8]
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
 800f034:	4603      	mov	r3, r0
 800f036:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f038:	7bfb      	ldrb	r3, [r7, #15]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	20001cb8 	.word	0x20001cb8

0800f048 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f048:	b590      	push	{r4, r7, lr}
 800f04a:	b087      	sub	sp, #28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60b9      	str	r1, [r7, #8]
 800f050:	607a      	str	r2, [r7, #4]
 800f052:	603b      	str	r3, [r7, #0]
 800f054:	4603      	mov	r3, r0
 800f056:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f058:	7bfb      	ldrb	r3, [r7, #15]
 800f05a:	4a0a      	ldr	r2, [pc, #40]	; (800f084 <disk_read+0x3c>)
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4413      	add	r3, r2
 800f060:	685b      	ldr	r3, [r3, #4]
 800f062:	689c      	ldr	r4, [r3, #8]
 800f064:	7bfb      	ldrb	r3, [r7, #15]
 800f066:	4a07      	ldr	r2, [pc, #28]	; (800f084 <disk_read+0x3c>)
 800f068:	4413      	add	r3, r2
 800f06a:	7a18      	ldrb	r0, [r3, #8]
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	68b9      	ldr	r1, [r7, #8]
 800f072:	47a0      	blx	r4
 800f074:	4603      	mov	r3, r0
 800f076:	75fb      	strb	r3, [r7, #23]
  return res;
 800f078:	7dfb      	ldrb	r3, [r7, #23]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	371c      	adds	r7, #28
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd90      	pop	{r4, r7, pc}
 800f082:	bf00      	nop
 800f084:	20001cb8 	.word	0x20001cb8

0800f088 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f088:	b590      	push	{r4, r7, lr}
 800f08a:	b087      	sub	sp, #28
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60b9      	str	r1, [r7, #8]
 800f090:	607a      	str	r2, [r7, #4]
 800f092:	603b      	str	r3, [r7, #0]
 800f094:	4603      	mov	r3, r0
 800f096:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	4a0a      	ldr	r2, [pc, #40]	; (800f0c4 <disk_write+0x3c>)
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	4413      	add	r3, r2
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	68dc      	ldr	r4, [r3, #12]
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
 800f0a6:	4a07      	ldr	r2, [pc, #28]	; (800f0c4 <disk_write+0x3c>)
 800f0a8:	4413      	add	r3, r2
 800f0aa:	7a18      	ldrb	r0, [r3, #8]
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	68b9      	ldr	r1, [r7, #8]
 800f0b2:	47a0      	blx	r4
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	75fb      	strb	r3, [r7, #23]
  return res;
 800f0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	371c      	adds	r7, #28
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd90      	pop	{r4, r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	20001cb8 	.word	0x20001cb8

0800f0c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	603a      	str	r2, [r7, #0]
 800f0d2:	71fb      	strb	r3, [r7, #7]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f0d8:	79fb      	ldrb	r3, [r7, #7]
 800f0da:	4a09      	ldr	r2, [pc, #36]	; (800f100 <disk_ioctl+0x38>)
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4413      	add	r3, r2
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	691b      	ldr	r3, [r3, #16]
 800f0e4:	79fa      	ldrb	r2, [r7, #7]
 800f0e6:	4906      	ldr	r1, [pc, #24]	; (800f100 <disk_ioctl+0x38>)
 800f0e8:	440a      	add	r2, r1
 800f0ea:	7a10      	ldrb	r0, [r2, #8]
 800f0ec:	79b9      	ldrb	r1, [r7, #6]
 800f0ee:	683a      	ldr	r2, [r7, #0]
 800f0f0:	4798      	blx	r3
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	73fb      	strb	r3, [r7, #15]
  return res;
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3710      	adds	r7, #16
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	20001cb8 	.word	0x20001cb8

0800f104 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f104:	b480      	push	{r7}
 800f106:	b087      	sub	sp, #28
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800f118:	e007      	b.n	800f12a <mem_cpy+0x26>
		*d++ = *s++;
 800f11a:	693a      	ldr	r2, [r7, #16]
 800f11c:	1c53      	adds	r3, r2, #1
 800f11e:	613b      	str	r3, [r7, #16]
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	1c59      	adds	r1, r3, #1
 800f124:	6179      	str	r1, [r7, #20]
 800f126:	7812      	ldrb	r2, [r2, #0]
 800f128:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	1e5a      	subs	r2, r3, #1
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1f2      	bne.n	800f11a <mem_cpy+0x16>
}
 800f134:	bf00      	nop
 800f136:	bf00      	nop
 800f138:	371c      	adds	r7, #28
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bc80      	pop	{r7}
 800f13e:	4770      	bx	lr

0800f140 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f140:	b480      	push	{r7}
 800f142:	b087      	sub	sp, #28
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800f150:	e005      	b.n	800f15e <mem_set+0x1e>
		*d++ = (BYTE)val;
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	617a      	str	r2, [r7, #20]
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	b2d2      	uxtb	r2, r2
 800f15c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	1e5a      	subs	r2, r3, #1
 800f162:	607a      	str	r2, [r7, #4]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d1f4      	bne.n	800f152 <mem_set+0x12>
}
 800f168:	bf00      	nop
 800f16a:	bf00      	nop
 800f16c:	371c      	adds	r7, #28
 800f16e:	46bd      	mov	sp, r7
 800f170:	bc80      	pop	{r7}
 800f172:	4770      	bx	lr

0800f174 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800f174:	b480      	push	{r7}
 800f176:	b089      	sub	sp, #36	; 0x24
 800f178:	af00      	add	r7, sp, #0
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	61fb      	str	r3, [r7, #28]
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f188:	2300      	movs	r3, #0
 800f18a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800f18c:	bf00      	nop
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	1e5a      	subs	r2, r3, #1
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00d      	beq.n	800f1b4 <mem_cmp+0x40>
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	1c5a      	adds	r2, r3, #1
 800f19c:	61fa      	str	r2, [r7, #28]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	1c5a      	adds	r2, r3, #1
 800f1a6:	61ba      	str	r2, [r7, #24]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	1acb      	subs	r3, r1, r3
 800f1ac:	617b      	str	r3, [r7, #20]
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d0ec      	beq.n	800f18e <mem_cmp+0x1a>
	return r;
 800f1b4:	697b      	ldr	r3, [r7, #20]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3724      	adds	r7, #36	; 0x24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bc80      	pop	{r7}
 800f1be:	4770      	bx	lr

0800f1c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f1ca:	e002      	b.n	800f1d2 <chk_chr+0x12>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	607b      	str	r3, [r7, #4]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	781b      	ldrb	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d005      	beq.n	800f1e6 <chk_chr+0x26>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d1f2      	bne.n	800f1cc <chk_chr+0xc>
	return *str;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	781b      	ldrb	r3, [r3, #0]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bc80      	pop	{r7}
 800f1f2:	4770      	bx	lr

0800f1f4 <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f202:	4618      	mov	r0, r3
 800f204:	f002 fc68 	bl	8011ad8 <ff_req_grant>
 800f208:	4603      	mov	r3, r0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	460b      	mov	r3, r1
 800f21c:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d011      	beq.n	800f248 <unlock_fs+0x36>
 800f224:	78fb      	ldrb	r3, [r7, #3]
 800f226:	2b0c      	cmp	r3, #12
 800f228:	d00e      	beq.n	800f248 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 800f22a:	78fb      	ldrb	r3, [r7, #3]
 800f22c:	2b0b      	cmp	r3, #11
 800f22e:	d00b      	beq.n	800f248 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 800f230:	78fb      	ldrb	r3, [r7, #3]
 800f232:	2b09      	cmp	r3, #9
 800f234:	d008      	beq.n	800f248 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 800f236:	78fb      	ldrb	r3, [r7, #3]
 800f238:	2b0f      	cmp	r3, #15
 800f23a:	d005      	beq.n	800f248 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800f242:	4618      	mov	r0, r3
 800f244:	f002 fc5d 	bl	8011b02 <ff_rel_grant>
	}
}
 800f248:	bf00      	nop
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f25a:	2300      	movs	r3, #0
 800f25c:	60bb      	str	r3, [r7, #8]
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	e038      	b.n	800f2d6 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800f264:	492f      	ldr	r1, [pc, #188]	; (800f324 <chk_lock+0xd4>)
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	4613      	mov	r3, r2
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	4413      	add	r3, r2
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	440b      	add	r3, r1
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d029      	beq.n	800f2cc <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800f278:	492a      	ldr	r1, [pc, #168]	; (800f324 <chk_lock+0xd4>)
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	4613      	mov	r3, r2
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	4413      	add	r3, r2
 800f282:	009b      	lsls	r3, r3, #2
 800f284:	440b      	add	r3, r1
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f28e:	429a      	cmp	r2, r3
 800f290:	d11e      	bne.n	800f2d0 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800f292:	4924      	ldr	r1, [pc, #144]	; (800f324 <chk_lock+0xd4>)
 800f294:	68fa      	ldr	r2, [r7, #12]
 800f296:	4613      	mov	r3, r2
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	4413      	add	r3, r2
 800f29c:	009b      	lsls	r3, r3, #2
 800f29e:	440b      	add	r3, r1
 800f2a0:	3304      	adds	r3, #4
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d110      	bne.n	800f2d0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800f2ae:	491d      	ldr	r1, [pc, #116]	; (800f324 <chk_lock+0xd4>)
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	4613      	mov	r3, r2
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	4413      	add	r3, r2
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	440b      	add	r3, r1
 800f2bc:	3308      	adds	r3, #8
 800f2be:	881a      	ldrh	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d102      	bne.n	800f2d0 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800f2ca:	e007      	b.n	800f2dc <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	60fb      	str	r3, [r7, #12]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d9c3      	bls.n	800f264 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d109      	bne.n	800f2f6 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d102      	bne.n	800f2ee <chk_lock+0x9e>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d101      	bne.n	800f2f2 <chk_lock+0xa2>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e013      	b.n	800f31a <chk_lock+0xca>
 800f2f2:	2312      	movs	r3, #18
 800f2f4:	e011      	b.n	800f31a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10b      	bne.n	800f314 <chk_lock+0xc4>
 800f2fc:	4909      	ldr	r1, [pc, #36]	; (800f324 <chk_lock+0xd4>)
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	4613      	mov	r3, r2
 800f302:	005b      	lsls	r3, r3, #1
 800f304:	4413      	add	r3, r2
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	440b      	add	r3, r1
 800f30a:	330a      	adds	r3, #10
 800f30c:	881b      	ldrh	r3, [r3, #0]
 800f30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f312:	d101      	bne.n	800f318 <chk_lock+0xc8>
 800f314:	2310      	movs	r3, #16
 800f316:	e000      	b.n	800f31a <chk_lock+0xca>
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	bc80      	pop	{r7}
 800f322:	4770      	bx	lr
 800f324:	20001ca0 	.word	0x20001ca0

0800f328 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f32e:	2300      	movs	r3, #0
 800f330:	607b      	str	r3, [r7, #4]
 800f332:	e002      	b.n	800f33a <enq_lock+0x12>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	3301      	adds	r3, #1
 800f338:	607b      	str	r3, [r7, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d809      	bhi.n	800f354 <enq_lock+0x2c>
 800f340:	490a      	ldr	r1, [pc, #40]	; (800f36c <enq_lock+0x44>)
 800f342:	687a      	ldr	r2, [r7, #4]
 800f344:	4613      	mov	r3, r2
 800f346:	005b      	lsls	r3, r3, #1
 800f348:	4413      	add	r3, r2
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	440b      	add	r3, r1
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1ef      	bne.n	800f334 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b02      	cmp	r3, #2
 800f358:	bf14      	ite	ne
 800f35a:	2301      	movne	r3, #1
 800f35c:	2300      	moveq	r3, #0
 800f35e:	b2db      	uxtb	r3, r3
}
 800f360:	4618      	mov	r0, r3
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	bc80      	pop	{r7}
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop
 800f36c:	20001ca0 	.word	0x20001ca0

0800f370 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f370:	b480      	push	{r7}
 800f372:	b085      	sub	sp, #20
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f37a:	2300      	movs	r3, #0
 800f37c:	60fb      	str	r3, [r7, #12]
 800f37e:	e02b      	b.n	800f3d8 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800f380:	4955      	ldr	r1, [pc, #340]	; (800f4d8 <inc_lock+0x168>)
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	4613      	mov	r3, r2
 800f386:	005b      	lsls	r3, r3, #1
 800f388:	4413      	add	r3, r2
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	440b      	add	r3, r1
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f396:	429a      	cmp	r2, r3
 800f398:	d11b      	bne.n	800f3d2 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800f39a:	494f      	ldr	r1, [pc, #316]	; (800f4d8 <inc_lock+0x168>)
 800f39c:	68fa      	ldr	r2, [r7, #12]
 800f39e:	4613      	mov	r3, r2
 800f3a0:	005b      	lsls	r3, r3, #1
 800f3a2:	4413      	add	r3, r2
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	440b      	add	r3, r1
 800f3a8:	3304      	adds	r3, #4
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d10d      	bne.n	800f3d2 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800f3b6:	4948      	ldr	r1, [pc, #288]	; (800f4d8 <inc_lock+0x168>)
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	4613      	mov	r3, r2
 800f3bc:	005b      	lsls	r3, r3, #1
 800f3be:	4413      	add	r3, r2
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	440b      	add	r3, r1
 800f3c4:	3308      	adds	r3, #8
 800f3c6:	881a      	ldrh	r2, [r3, #0]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d006      	beq.n	800f3e0 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3301      	adds	r3, #1
 800f3d6:	60fb      	str	r3, [r7, #12]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b01      	cmp	r3, #1
 800f3dc:	d9d0      	bls.n	800f380 <inc_lock+0x10>
 800f3de:	e000      	b.n	800f3e2 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800f3e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2b02      	cmp	r3, #2
 800f3e6:	d145      	bne.n	800f474 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	60fb      	str	r3, [r7, #12]
 800f3ec:	e002      	b.n	800f3f4 <inc_lock+0x84>
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	60fb      	str	r3, [r7, #12]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d809      	bhi.n	800f40e <inc_lock+0x9e>
 800f3fa:	4937      	ldr	r1, [pc, #220]	; (800f4d8 <inc_lock+0x168>)
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	4613      	mov	r3, r2
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	4413      	add	r3, r2
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	440b      	add	r3, r1
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1ef      	bne.n	800f3ee <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2b02      	cmp	r3, #2
 800f412:	d101      	bne.n	800f418 <inc_lock+0xa8>
 800f414:	2300      	movs	r3, #0
 800f416:	e05a      	b.n	800f4ce <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800f41e:	482e      	ldr	r0, [pc, #184]	; (800f4d8 <inc_lock+0x168>)
 800f420:	68fa      	ldr	r2, [r7, #12]
 800f422:	4613      	mov	r3, r2
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	4413      	add	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4403      	add	r3, r0
 800f42c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800f434:	4828      	ldr	r0, [pc, #160]	; (800f4d8 <inc_lock+0x168>)
 800f436:	68fa      	ldr	r2, [r7, #12]
 800f438:	4613      	mov	r3, r2
 800f43a:	005b      	lsls	r3, r3, #1
 800f43c:	4413      	add	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4403      	add	r3, r0
 800f442:	3304      	adds	r3, #4
 800f444:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800f44c:	4922      	ldr	r1, [pc, #136]	; (800f4d8 <inc_lock+0x168>)
 800f44e:	68fa      	ldr	r2, [r7, #12]
 800f450:	4613      	mov	r3, r2
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	4413      	add	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	440b      	add	r3, r1
 800f45a:	3308      	adds	r3, #8
 800f45c:	4602      	mov	r2, r0
 800f45e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800f460:	491d      	ldr	r1, [pc, #116]	; (800f4d8 <inc_lock+0x168>)
 800f462:	68fa      	ldr	r2, [r7, #12]
 800f464:	4613      	mov	r3, r2
 800f466:	005b      	lsls	r3, r3, #1
 800f468:	4413      	add	r3, r2
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	440b      	add	r3, r1
 800f46e:	330a      	adds	r3, #10
 800f470:	2200      	movs	r2, #0
 800f472:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00c      	beq.n	800f494 <inc_lock+0x124>
 800f47a:	4917      	ldr	r1, [pc, #92]	; (800f4d8 <inc_lock+0x168>)
 800f47c:	68fa      	ldr	r2, [r7, #12]
 800f47e:	4613      	mov	r3, r2
 800f480:	005b      	lsls	r3, r3, #1
 800f482:	4413      	add	r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	440b      	add	r3, r1
 800f488:	330a      	adds	r3, #10
 800f48a:	881b      	ldrh	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d001      	beq.n	800f494 <inc_lock+0x124>
 800f490:	2300      	movs	r3, #0
 800f492:	e01c      	b.n	800f4ce <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d10b      	bne.n	800f4b2 <inc_lock+0x142>
 800f49a:	490f      	ldr	r1, [pc, #60]	; (800f4d8 <inc_lock+0x168>)
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	4413      	add	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	440b      	add	r3, r1
 800f4a8:	330a      	adds	r3, #10
 800f4aa:	881b      	ldrh	r3, [r3, #0]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	b299      	uxth	r1, r3
 800f4b0:	e001      	b.n	800f4b6 <inc_lock+0x146>
 800f4b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f4b6:	4808      	ldr	r0, [pc, #32]	; (800f4d8 <inc_lock+0x168>)
 800f4b8:	68fa      	ldr	r2, [r7, #12]
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	005b      	lsls	r3, r3, #1
 800f4be:	4413      	add	r3, r2
 800f4c0:	009b      	lsls	r3, r3, #2
 800f4c2:	4403      	add	r3, r0
 800f4c4:	330a      	adds	r3, #10
 800f4c6:	460a      	mov	r2, r1
 800f4c8:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3301      	adds	r3, #1
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3714      	adds	r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bc80      	pop	{r7}
 800f4d6:	4770      	bx	lr
 800f4d8:	20001ca0 	.word	0x20001ca0

0800f4dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	607b      	str	r3, [r7, #4]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d82e      	bhi.n	800f54e <dec_lock+0x72>
		n = Files[i].ctr;
 800f4f0:	491b      	ldr	r1, [pc, #108]	; (800f560 <dec_lock+0x84>)
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	005b      	lsls	r3, r3, #1
 800f4f8:	4413      	add	r3, r2
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	440b      	add	r3, r1
 800f4fe:	330a      	adds	r3, #10
 800f500:	881b      	ldrh	r3, [r3, #0]
 800f502:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f504:	89fb      	ldrh	r3, [r7, #14]
 800f506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f50a:	d101      	bne.n	800f510 <dec_lock+0x34>
 800f50c:	2300      	movs	r3, #0
 800f50e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800f510:	89fb      	ldrh	r3, [r7, #14]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d002      	beq.n	800f51c <dec_lock+0x40>
 800f516:	89fb      	ldrh	r3, [r7, #14]
 800f518:	3b01      	subs	r3, #1
 800f51a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f51c:	4910      	ldr	r1, [pc, #64]	; (800f560 <dec_lock+0x84>)
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	4613      	mov	r3, r2
 800f522:	005b      	lsls	r3, r3, #1
 800f524:	4413      	add	r3, r2
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	440b      	add	r3, r1
 800f52a:	330a      	adds	r3, #10
 800f52c:	89fa      	ldrh	r2, [r7, #14]
 800f52e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f530:	89fb      	ldrh	r3, [r7, #14]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d108      	bne.n	800f548 <dec_lock+0x6c>
 800f536:	490a      	ldr	r1, [pc, #40]	; (800f560 <dec_lock+0x84>)
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	4613      	mov	r3, r2
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	4413      	add	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	440b      	add	r3, r1
 800f544:	2200      	movs	r2, #0
 800f546:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f548:	2300      	movs	r3, #0
 800f54a:	737b      	strb	r3, [r7, #13]
 800f54c:	e001      	b.n	800f552 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f54e:	2302      	movs	r3, #2
 800f550:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f552:	7b7b      	ldrb	r3, [r7, #13]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	bc80      	pop	{r7}
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	20001ca0 	.word	0x20001ca0

0800f564 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f564:	b480      	push	{r7}
 800f566:	b085      	sub	sp, #20
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f56c:	2300      	movs	r3, #0
 800f56e:	60fb      	str	r3, [r7, #12]
 800f570:	e016      	b.n	800f5a0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f572:	4910      	ldr	r1, [pc, #64]	; (800f5b4 <clear_lock+0x50>)
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	4613      	mov	r3, r2
 800f578:	005b      	lsls	r3, r3, #1
 800f57a:	4413      	add	r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	440b      	add	r3, r1
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	429a      	cmp	r2, r3
 800f586:	d108      	bne.n	800f59a <clear_lock+0x36>
 800f588:	490a      	ldr	r1, [pc, #40]	; (800f5b4 <clear_lock+0x50>)
 800f58a:	68fa      	ldr	r2, [r7, #12]
 800f58c:	4613      	mov	r3, r2
 800f58e:	005b      	lsls	r3, r3, #1
 800f590:	4413      	add	r3, r2
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	440b      	add	r3, r1
 800f596:	2200      	movs	r2, #0
 800f598:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	3301      	adds	r3, #1
 800f59e:	60fb      	str	r3, [r7, #12]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d9e5      	bls.n	800f572 <clear_lock+0xe>
	}
}
 800f5a6:	bf00      	nop
 800f5a8:	bf00      	nop
 800f5aa:	3714      	adds	r7, #20
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bc80      	pop	{r7}
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	20001ca0 	.word	0x20001ca0

0800f5b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d038      	beq.n	800f640 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800f5d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800f5dc:	6879      	ldr	r1, [r7, #4]
 800f5de:	2301      	movs	r3, #1
 800f5e0:	697a      	ldr	r2, [r7, #20]
 800f5e2:	f7ff fd51 	bl	800f088 <disk_write>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d002      	beq.n	800f5f2 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	73fb      	strb	r3, [r7, #15]
 800f5f0:	e026      	b.n	800f640 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800f600:	697a      	ldr	r2, [r7, #20]
 800f602:	1ad2      	subs	r2, r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d218      	bcs.n	800f640 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800f614:	613b      	str	r3, [r7, #16]
 800f616:	e010      	b.n	800f63a <sync_window+0x82>
					wsect += fs->fsize;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800f61e:	697a      	ldr	r2, [r7, #20]
 800f620:	4413      	add	r3, r2
 800f622:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800f62a:	6879      	ldr	r1, [r7, #4]
 800f62c:	2301      	movs	r3, #1
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	f7ff fd2a 	bl	800f088 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	3b01      	subs	r3, #1
 800f638:	613b      	str	r3, [r7, #16]
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d8eb      	bhi.n	800f618 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800f640:	7bfb      	ldrb	r3, [r7, #15]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3718      	adds	r7, #24
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800f64a:	b580      	push	{r7, lr}
 800f64c:	b084      	sub	sp, #16
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
 800f652:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f654:	2300      	movs	r3, #0
 800f656:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 800f65e:	683a      	ldr	r2, [r7, #0]
 800f660:	429a      	cmp	r2, r3
 800f662:	d01b      	beq.n	800f69c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f7ff ffa7 	bl	800f5b8 <sync_window>
 800f66a:	4603      	mov	r3, r0
 800f66c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f66e:	7bfb      	ldrb	r3, [r7, #15]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d113      	bne.n	800f69c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800f67a:	6879      	ldr	r1, [r7, #4]
 800f67c:	2301      	movs	r3, #1
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	f7ff fce2 	bl	800f048 <disk_read>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d004      	beq.n	800f694 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f68a:	f04f 33ff 	mov.w	r3, #4294967295
 800f68e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f690:	2301      	movs	r3, #1
 800f692:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800f69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b084      	sub	sp, #16
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f7ff ff82 	bl	800f5b8 <sync_window>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f6b8:	7bfb      	ldrb	r3, [r7, #15]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f040 809b 	bne.w	800f7f6 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f6c6:	2b03      	cmp	r3, #3
 800f6c8:	f040 8088 	bne.w	800f7dc <sync_fs+0x136>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	f040 8082 	bne.w	800f7dc <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6de:	2100      	movs	r1, #0
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff fd2d 	bl	800f140 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2255      	movs	r2, #85	; 0x55
 800f6ea:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	22aa      	movs	r2, #170	; 0xaa
 800f6f2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2252      	movs	r2, #82	; 0x52
 800f6fa:	701a      	strb	r2, [r3, #0]
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2252      	movs	r2, #82	; 0x52
 800f700:	705a      	strb	r2, [r3, #1]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2261      	movs	r2, #97	; 0x61
 800f706:	709a      	strb	r2, [r3, #2]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2241      	movs	r2, #65	; 0x41
 800f70c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	2272      	movs	r2, #114	; 0x72
 800f712:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2272      	movs	r2, #114	; 0x72
 800f71a:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2241      	movs	r2, #65	; 0x41
 800f722:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2261      	movs	r2, #97	; 0x61
 800f72a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f734:	b2da      	uxtb	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f742:	b29b      	uxth	r3, r3
 800f744:	0a1b      	lsrs	r3, r3, #8
 800f746:	b29b      	uxth	r3, r3
 800f748:	b2da      	uxtb	r2, r3
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f756:	0c1b      	lsrs	r3, r3, #16
 800f758:	b2da      	uxtb	r2, r3
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f766:	0e1b      	lsrs	r3, r3, #24
 800f768:	b2da      	uxtb	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f776:	b2da      	uxtb	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f784:	b29b      	uxth	r3, r3
 800f786:	0a1b      	lsrs	r3, r3, #8
 800f788:	b29b      	uxth	r3, r3
 800f78a:	b2da      	uxtb	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f798:	0c1b      	lsrs	r3, r3, #16
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f7a8:	0e1b      	lsrs	r3, r3, #24
 800f7aa:	b2da      	uxtb	r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800f7b8:	1c5a      	adds	r2, r3, #1
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800f7c6:	6879      	ldr	r1, [r7, #4]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	f7ff fc5a 	bl	800f088 <disk_write>
			fs->fsi_flag = 0;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	2100      	movs	r1, #0
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fc6e 	bl	800f0c8 <disk_ioctl>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d001      	beq.n	800f7f6 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f800:	b480      	push	{r7}
 800f802:	b083      	sub	sp, #12
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	3b02      	subs	r3, #2
 800f80e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f816:	3b02      	subs	r3, #2
 800f818:	683a      	ldr	r2, [r7, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d301      	bcc.n	800f822 <clust2sect+0x22>
 800f81e:	2300      	movs	r3, #0
 800f820:	e00a      	b.n	800f838 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f828:	461a      	mov	r2, r3
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	fb03 f202 	mul.w	r2, r3, r2
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800f836:	4413      	add	r3, r2
}
 800f838:	4618      	mov	r0, r3
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bc80      	pop	{r7}
 800f840:	4770      	bx	lr

0800f842 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b086      	sub	sp, #24
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d905      	bls.n	800f85e <get_fat+0x1c>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f858:	683a      	ldr	r2, [r7, #0]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d302      	bcc.n	800f864 <get_fat+0x22>
		val = 1;	/* Internal error */
 800f85e:	2301      	movs	r3, #1
 800f860:	617b      	str	r3, [r7, #20]
 800f862:	e0a3      	b.n	800f9ac <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f864:	f04f 33ff 	mov.w	r3, #4294967295
 800f868:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f870:	2b03      	cmp	r3, #3
 800f872:	d068      	beq.n	800f946 <get_fat+0x104>
 800f874:	2b03      	cmp	r3, #3
 800f876:	f300 808f 	bgt.w	800f998 <get_fat+0x156>
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d002      	beq.n	800f884 <get_fat+0x42>
 800f87e:	2b02      	cmp	r3, #2
 800f880:	d040      	beq.n	800f904 <get_fat+0xc2>
 800f882:	e089      	b.n	800f998 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	60fb      	str	r3, [r7, #12]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	085b      	lsrs	r3, r3, #1
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	4413      	add	r3, r2
 800f890:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	0a5b      	lsrs	r3, r3, #9
 800f89c:	4413      	add	r3, r2
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f7ff fed2 	bl	800f64a <move_window>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d178      	bne.n	800f99e <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	1c5a      	adds	r2, r3, #1
 800f8b0:	60fa      	str	r2, [r7, #12]
 800f8b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	5cd3      	ldrb	r3, [r2, r3]
 800f8ba:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	0a5b      	lsrs	r3, r3, #9
 800f8c6:	4413      	add	r3, r2
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7ff febd 	bl	800f64a <move_window>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d165      	bne.n	800f9a2 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	5cd3      	ldrb	r3, [r2, r3]
 800f8e0:	021b      	lsls	r3, r3, #8
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	f003 0301 	and.w	r3, r3, #1
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d002      	beq.n	800f8fa <get_fat+0xb8>
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	091b      	lsrs	r3, r3, #4
 800f8f8:	e002      	b.n	800f900 <get_fat+0xbe>
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f900:	617b      	str	r3, [r7, #20]
			break;
 800f902:	e053      	b.n	800f9ac <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	0a1b      	lsrs	r3, r3, #8
 800f90e:	4413      	add	r3, r2
 800f910:	4619      	mov	r1, r3
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f7ff fe99 	bl	800f64a <move_window>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d143      	bne.n	800f9a6 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	005b      	lsls	r3, r3, #1
 800f922:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	4413      	add	r3, r2
 800f92a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	3301      	adds	r3, #1
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	021b      	lsls	r3, r3, #8
 800f934:	b21a      	sxth	r2, r3
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	b21b      	sxth	r3, r3
 800f93c:	4313      	orrs	r3, r2
 800f93e:	b21b      	sxth	r3, r3
 800f940:	b29b      	uxth	r3, r3
 800f942:	617b      	str	r3, [r7, #20]
			break;
 800f944:	e032      	b.n	800f9ac <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	09db      	lsrs	r3, r3, #7
 800f950:	4413      	add	r3, r2
 800f952:	4619      	mov	r1, r3
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7ff fe78 	bl	800f64a <move_window>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d124      	bne.n	800f9aa <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	4413      	add	r3, r2
 800f96c:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	3303      	adds	r3, #3
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	061a      	lsls	r2, r3, #24
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	3302      	adds	r3, #2
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	041b      	lsls	r3, r3, #16
 800f97e:	4313      	orrs	r3, r2
 800f980:	693a      	ldr	r2, [r7, #16]
 800f982:	3201      	adds	r2, #1
 800f984:	7812      	ldrb	r2, [r2, #0]
 800f986:	0212      	lsls	r2, r2, #8
 800f988:	4313      	orrs	r3, r2
 800f98a:	693a      	ldr	r2, [r7, #16]
 800f98c:	7812      	ldrb	r2, [r2, #0]
 800f98e:	4313      	orrs	r3, r2
 800f990:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f994:	617b      	str	r3, [r7, #20]
			break;
 800f996:	e009      	b.n	800f9ac <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800f998:	2301      	movs	r3, #1
 800f99a:	617b      	str	r3, [r7, #20]
 800f99c:	e006      	b.n	800f9ac <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f99e:	bf00      	nop
 800f9a0:	e004      	b.n	800f9ac <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9a2:	bf00      	nop
 800f9a4:	e002      	b.n	800f9ac <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f9a6:	bf00      	nop
 800f9a8:	e000      	b.n	800f9ac <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9aa:	bf00      	nop
		}
	}

	return val;
 800f9ac:	697b      	ldr	r3, [r7, #20]
}
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	3718      	adds	r7, #24
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b088      	sub	sp, #32
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	60f8      	str	r0, [r7, #12]
 800f9be:	60b9      	str	r1, [r7, #8]
 800f9c0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d905      	bls.n	800f9d4 <put_fat+0x1e>
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d302      	bcc.n	800f9da <put_fat+0x24>
		res = FR_INT_ERR;
 800f9d4:	2302      	movs	r3, #2
 800f9d6:	77fb      	strb	r3, [r7, #31]
 800f9d8:	e0f6      	b.n	800fbc8 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f9e0:	2b03      	cmp	r3, #3
 800f9e2:	f000 809e 	beq.w	800fb22 <put_fat+0x16c>
 800f9e6:	2b03      	cmp	r3, #3
 800f9e8:	f300 80e4 	bgt.w	800fbb4 <put_fat+0x1fe>
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d002      	beq.n	800f9f6 <put_fat+0x40>
 800f9f0:	2b02      	cmp	r3, #2
 800f9f2:	d06f      	beq.n	800fad4 <put_fat+0x11e>
 800f9f4:	e0de      	b.n	800fbb4 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	085b      	lsrs	r3, r3, #1
 800f9fe:	697a      	ldr	r2, [r7, #20]
 800fa00:	4413      	add	r3, r2
 800fa02:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	0a5b      	lsrs	r3, r3, #9
 800fa0e:	4413      	add	r3, r2
 800fa10:	4619      	mov	r1, r3
 800fa12:	68f8      	ldr	r0, [r7, #12]
 800fa14:	f7ff fe19 	bl	800f64a <move_window>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fa1c:	7ffb      	ldrb	r3, [r7, #31]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f040 80cb 	bne.w	800fbba <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	1c5a      	adds	r2, r3, #1
 800fa28:	617a      	str	r2, [r7, #20]
 800fa2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa2e:	68fa      	ldr	r2, [r7, #12]
 800fa30:	4413      	add	r3, r2
 800fa32:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	f003 0301 	and.w	r3, r3, #1
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00d      	beq.n	800fa5a <put_fat+0xa4>
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	b25b      	sxtb	r3, r3
 800fa44:	f003 030f 	and.w	r3, r3, #15
 800fa48:	b25a      	sxtb	r2, r3
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	011b      	lsls	r3, r3, #4
 800fa50:	b25b      	sxtb	r3, r3
 800fa52:	4313      	orrs	r3, r2
 800fa54:	b25b      	sxtb	r3, r3
 800fa56:	b2db      	uxtb	r3, r3
 800fa58:	e001      	b.n	800fa5e <put_fat+0xa8>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	69ba      	ldr	r2, [r7, #24]
 800fa60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2201      	movs	r2, #1
 800fa66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	0a5b      	lsrs	r3, r3, #9
 800fa74:	4413      	add	r3, r2
 800fa76:	4619      	mov	r1, r3
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f7ff fde6 	bl	800f64a <move_window>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fa82:	7ffb      	ldrb	r3, [r7, #31]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f040 809a 	bne.w	800fbbe <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d003      	beq.n	800faa8 <put_fat+0xf2>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	091b      	lsrs	r3, r3, #4
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	e00e      	b.n	800fac6 <put_fat+0x110>
 800faa8:	69bb      	ldr	r3, [r7, #24]
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	b25b      	sxtb	r3, r3
 800faae:	f023 030f 	bic.w	r3, r3, #15
 800fab2:	b25a      	sxtb	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	0a1b      	lsrs	r3, r3, #8
 800fab8:	b25b      	sxtb	r3, r3
 800faba:	f003 030f 	and.w	r3, r3, #15
 800fabe:	b25b      	sxtb	r3, r3
 800fac0:	4313      	orrs	r3, r2
 800fac2:	b25b      	sxtb	r3, r3
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	69ba      	ldr	r2, [r7, #24]
 800fac8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2201      	movs	r2, #1
 800face:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800fad2:	e079      	b.n	800fbc8 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	0a1b      	lsrs	r3, r3, #8
 800fade:	4413      	add	r3, r2
 800fae0:	4619      	mov	r1, r3
 800fae2:	68f8      	ldr	r0, [r7, #12]
 800fae4:	f7ff fdb1 	bl	800f64a <move_window>
 800fae8:	4603      	mov	r3, r0
 800faea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800faec:	7ffb      	ldrb	r3, [r7, #31]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d167      	bne.n	800fbc2 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	4413      	add	r3, r2
 800fafe:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	69bb      	ldr	r3, [r7, #24]
 800fb06:	701a      	strb	r2, [r3, #0]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	0a1b      	lsrs	r3, r3, #8
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	69bb      	ldr	r3, [r7, #24]
 800fb12:	3301      	adds	r3, #1
 800fb14:	b2d2      	uxtb	r2, r2
 800fb16:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800fb20:	e052      	b.n	800fbc8 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	09db      	lsrs	r3, r3, #7
 800fb2c:	4413      	add	r3, r2
 800fb2e:	4619      	mov	r1, r3
 800fb30:	68f8      	ldr	r0, [r7, #12]
 800fb32:	f7ff fd8a 	bl	800f64a <move_window>
 800fb36:	4603      	mov	r3, r0
 800fb38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb3a:	7ffb      	ldrb	r3, [r7, #31]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d142      	bne.n	800fbc6 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	4413      	add	r3, r2
 800fb4c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	3303      	adds	r3, #3
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	061a      	lsls	r2, r3, #24
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	3302      	adds	r3, #2
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	041b      	lsls	r3, r3, #16
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	69ba      	ldr	r2, [r7, #24]
 800fb62:	3201      	adds	r2, #1
 800fb64:	7812      	ldrb	r2, [r2, #0]
 800fb66:	0212      	lsls	r2, r2, #8
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	69ba      	ldr	r2, [r7, #24]
 800fb6c:	7812      	ldrb	r2, [r2, #0]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	4313      	orrs	r3, r2
 800fb78:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	b2da      	uxtb	r2, r3
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	701a      	strb	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	0a1b      	lsrs	r3, r3, #8
 800fb88:	b29a      	uxth	r2, r3
 800fb8a:	69bb      	ldr	r3, [r7, #24]
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	b2d2      	uxtb	r2, r2
 800fb90:	701a      	strb	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	0c1a      	lsrs	r2, r3, #16
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	3302      	adds	r3, #2
 800fb9a:	b2d2      	uxtb	r2, r2
 800fb9c:	701a      	strb	r2, [r3, #0]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	0e1a      	lsrs	r2, r3, #24
 800fba2:	69bb      	ldr	r3, [r7, #24]
 800fba4:	3303      	adds	r3, #3
 800fba6:	b2d2      	uxtb	r2, r2
 800fba8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2201      	movs	r2, #1
 800fbae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800fbb2:	e009      	b.n	800fbc8 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	77fb      	strb	r3, [r7, #31]
 800fbb8:	e006      	b.n	800fbc8 <put_fat+0x212>
			if (res != FR_OK) break;
 800fbba:	bf00      	nop
 800fbbc:	e004      	b.n	800fbc8 <put_fat+0x212>
			if (res != FR_OK) break;
 800fbbe:	bf00      	nop
 800fbc0:	e002      	b.n	800fbc8 <put_fat+0x212>
			if (res != FR_OK) break;
 800fbc2:	bf00      	nop
 800fbc4:	e000      	b.n	800fbc8 <put_fat+0x212>
			if (res != FR_OK) break;
 800fbc6:	bf00      	nop
		}
	}

	return res;
 800fbc8:	7ffb      	ldrb	r3, [r7, #31]
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3720      	adds	r7, #32
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b084      	sub	sp, #16
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d905      	bls.n	800fbee <remove_chain+0x1c>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d302      	bcc.n	800fbf4 <remove_chain+0x22>
		res = FR_INT_ERR;
 800fbee:	2302      	movs	r3, #2
 800fbf0:	73fb      	strb	r3, [r7, #15]
 800fbf2:	e043      	b.n	800fc7c <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800fbf8:	e036      	b.n	800fc68 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800fbfa:	6839      	ldr	r1, [r7, #0]
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff fe20 	bl	800f842 <get_fat>
 800fc02:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d035      	beq.n	800fc76 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d102      	bne.n	800fc16 <remove_chain+0x44>
 800fc10:	2302      	movs	r3, #2
 800fc12:	73fb      	strb	r3, [r7, #15]
 800fc14:	e032      	b.n	800fc7c <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc1c:	d102      	bne.n	800fc24 <remove_chain+0x52>
 800fc1e:	2301      	movs	r3, #1
 800fc20:	73fb      	strb	r3, [r7, #15]
 800fc22:	e02b      	b.n	800fc7c <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800fc24:	2200      	movs	r2, #0
 800fc26:	6839      	ldr	r1, [r7, #0]
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7ff fec4 	bl	800f9b6 <put_fat>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800fc32:	7bfb      	ldrb	r3, [r7, #15]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d120      	bne.n	800fc7a <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc42:	d00f      	beq.n	800fc64 <remove_chain+0x92>
				fs->free_clust++;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fc4a:	1c5a      	adds	r2, r3, #1
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				fs->fsi_flag |= 1;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800fc58:	f043 0301 	orr.w	r3, r3, #1
 800fc5c:	b2da      	uxtb	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d3c2      	bcc.n	800fbfa <remove_chain+0x28>
 800fc74:	e002      	b.n	800fc7c <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800fc76:	bf00      	nop
 800fc78:	e000      	b.n	800fc7c <remove_chain+0xaa>
			if (res != FR_OK) break;
 800fc7a:	bf00      	nop
		}
	}

	return res;
 800fc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3710      	adds	r7, #16
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}

0800fc86 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800fc86:	b580      	push	{r7, lr}
 800fc88:	b086      	sub	sp, #24
 800fc8a:	af00      	add	r7, sp, #0
 800fc8c:	6078      	str	r0, [r7, #4]
 800fc8e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10f      	bne.n	800fcb6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800fc9c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d005      	beq.n	800fcb0 <create_chain+0x2a>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d31c      	bcc.n	800fcea <create_chain+0x64>
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	613b      	str	r3, [r7, #16]
 800fcb4:	e019      	b.n	800fcea <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800fcb6:	6839      	ldr	r1, [r7, #0]
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f7ff fdc2 	bl	800f842 <get_fat>
 800fcbe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d801      	bhi.n	800fcca <create_chain+0x44>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	e076      	b.n	800fdb8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcd0:	d101      	bne.n	800fcd6 <create_chain+0x50>
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	e070      	b.n	800fdb8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fcdc:	68ba      	ldr	r2, [r7, #8]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d201      	bcs.n	800fce6 <create_chain+0x60>
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	e068      	b.n	800fdb8 <create_chain+0x132>
		scl = clst;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fcfa:	697a      	ldr	r2, [r7, #20]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d307      	bcc.n	800fd10 <create_chain+0x8a>
			ncl = 2;
 800fd00:	2302      	movs	r3, #2
 800fd02:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800fd04:	697a      	ldr	r2, [r7, #20]
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d901      	bls.n	800fd10 <create_chain+0x8a>
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	e053      	b.n	800fdb8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800fd10:	6979      	ldr	r1, [r7, #20]
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f7ff fd95 	bl	800f842 <get_fat>
 800fd18:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d00e      	beq.n	800fd3e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd26:	d002      	beq.n	800fd2e <create_chain+0xa8>
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d101      	bne.n	800fd32 <create_chain+0xac>
			return cs;
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	e042      	b.n	800fdb8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800fd32:	697a      	ldr	r2, [r7, #20]
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d1d9      	bne.n	800fcee <create_chain+0x68>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	e03c      	b.n	800fdb8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800fd3e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800fd40:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800fd44:	6979      	ldr	r1, [r7, #20]
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7ff fe35 	bl	800f9b6 <put_fat>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800fd50:	7bfb      	ldrb	r3, [r7, #15]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d109      	bne.n	800fd6a <create_chain+0xe4>
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d006      	beq.n	800fd6a <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800fd5c:	697a      	ldr	r2, [r7, #20]
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7ff fe28 	bl	800f9b6 <put_fat>
 800fd66:	4603      	mov	r3, r0
 800fd68:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800fd6a:	7bfb      	ldrb	r3, [r7, #15]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d11a      	bne.n	800fda6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	697a      	ldr	r2, [r7, #20]
 800fd74:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		if (fs->free_clust != 0xFFFFFFFF) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd82:	d018      	beq.n	800fdb6 <create_chain+0x130>
			fs->free_clust--;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd8a:	1e5a      	subs	r2, r3, #1
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			fs->fsi_flag |= 1;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800fd98:	f043 0301 	orr.w	r3, r3, #1
 800fd9c:	b2da      	uxtb	r2, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800fda4:	e007      	b.n	800fdb6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800fda6:	7bfb      	ldrb	r3, [r7, #15]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d102      	bne.n	800fdb2 <create_chain+0x12c>
 800fdac:	f04f 33ff 	mov.w	r3, #4294967295
 800fdb0:	e000      	b.n	800fdb4 <create_chain+0x12e>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800fdb6:	697b      	ldr	r3, [r7, #20]
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	3718      	adds	r7, #24
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}

0800fdc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800fdd0:	3304      	adds	r3, #4
 800fdd2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	0a5b      	lsrs	r3, r3, #9
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800fdde:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800fde2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fde6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	1d1a      	adds	r2, r3, #4
 800fdec:	613a      	str	r2, [r7, #16]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d101      	bne.n	800fdfc <clmt_clust+0x3c>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	e010      	b.n	800fe1e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800fdfc:	697a      	ldr	r2, [r7, #20]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d307      	bcc.n	800fe14 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800fe04:	697a      	ldr	r2, [r7, #20]
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	617b      	str	r3, [r7, #20]
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	3304      	adds	r3, #4
 800fe10:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fe12:	e7e9      	b.n	800fde8 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800fe14:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	681a      	ldr	r2, [r3, #0]
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	4413      	add	r3, r2
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	371c      	adds	r7, #28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bc80      	pop	{r7}
 800fe26:	4770      	bx	lr

0800fe28 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b086      	sub	sp, #24
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800fe42:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d007      	beq.n	800fe5a <dir_sdi+0x32>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fe54:	697a      	ldr	r2, [r7, #20]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d301      	bcc.n	800fe5e <dir_sdi+0x36>
		return FR_INT_ERR;
 800fe5a:	2302      	movs	r3, #2
 800fe5c:	e074      	b.n	800ff48 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d10c      	bne.n	800fe7e <dir_sdi+0x56>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe6a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d105      	bne.n	800fe7e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe78:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800fe7c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d111      	bne.n	800fea8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fe8a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800fe8e:	461a      	mov	r2, r3
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d301      	bcc.n	800fe9a <dir_sdi+0x72>
			return FR_INT_ERR;
 800fe96:	2302      	movs	r3, #2
 800fe98:	e056      	b.n	800ff48 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fea0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800fea4:	613b      	str	r3, [r7, #16]
 800fea6:	e032      	b.n	800ff0e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800feae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800feb2:	011b      	lsls	r3, r3, #4
 800feb4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800feb6:	e01e      	b.n	800fef6 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800febe:	6979      	ldr	r1, [r7, #20]
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7ff fcbe 	bl	800f842 <get_fat>
 800fec6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fece:	d101      	bne.n	800fed4 <dir_sdi+0xac>
 800fed0:	2301      	movs	r3, #1
 800fed2:	e039      	b.n	800ff48 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d907      	bls.n	800feea <dir_sdi+0xc2>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fee0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fee4:	697a      	ldr	r2, [r7, #20]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d301      	bcc.n	800feee <dir_sdi+0xc6>
				return FR_INT_ERR;
 800feea:	2302      	movs	r3, #2
 800feec:	e02c      	b.n	800ff48 <dir_sdi+0x120>
			idx -= ic;
 800feee:	683a      	ldr	r2, [r7, #0]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800fef6:	683a      	ldr	r2, [r7, #0]
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d2dc      	bcs.n	800feb8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff04:	6979      	ldr	r1, [r7, #20]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7ff fc7a 	bl	800f800 <clust2sect>
 800ff0c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	697a      	ldr	r2, [r7, #20]
 800ff12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d101      	bne.n	800ff20 <dir_sdi+0xf8>
 800ff1c:	2302      	movs	r3, #2
 800ff1e:	e013      	b.n	800ff48 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	091a      	lsrs	r2, r3, #4
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	441a      	add	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff34:	461a      	mov	r2, r3
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	f003 030f 	and.w	r3, r3, #15
 800ff3c:	015b      	lsls	r3, r3, #5
 800ff3e:	441a      	add	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800ff46:	2300      	movs	r3, #0
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3718      	adds	r7, #24
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	bd80      	pop	{r7, pc}

0800ff50 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ff50:	b590      	push	{r4, r7, lr}
 800ff52:	b087      	sub	sp, #28
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800ff60:	3301      	adds	r3, #1
 800ff62:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d004      	beq.n	800ff76 <dir_next+0x26>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d101      	bne.n	800ff7a <dir_next+0x2a>
		return FR_NO_FILE;
 800ff76:	2304      	movs	r3, #4
 800ff78:	e0dd      	b.n	8010136 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f003 030f 	and.w	r3, r3, #15
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f040 80c6 	bne.w	8010112 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ff8c:	1c5a      	adds	r2, r3, #1
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d10b      	bne.n	800ffb6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ffa4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	4293      	cmp	r3, r2
 800ffae:	f0c0 80b0 	bcc.w	8010112 <dir_next+0x1c2>
				return FR_NO_FILE;
 800ffb2:	2304      	movs	r3, #4
 800ffb4:	e0bf      	b.n	8010136 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	091b      	lsrs	r3, r3, #4
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ffc0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ffc4:	3a01      	subs	r2, #1
 800ffc6:	4013      	ands	r3, r2
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f040 80a2 	bne.w	8010112 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4610      	mov	r0, r2
 800ffde:	f7ff fc30 	bl	800f842 <get_fat>
 800ffe2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	d801      	bhi.n	800ffee <dir_next+0x9e>
 800ffea:	2302      	movs	r3, #2
 800ffec:	e0a3      	b.n	8010136 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fff4:	d101      	bne.n	800fffa <dir_next+0xaa>
 800fff6:	2301      	movs	r3, #1
 800fff8:	e09d      	b.n	8010136 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010000:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	429a      	cmp	r2, r3
 8010008:	d374      	bcc.n	80100f4 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d101      	bne.n	8010014 <dir_next+0xc4>
 8010010:	2304      	movs	r3, #4
 8010012:	e090      	b.n	8010136 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010020:	4619      	mov	r1, r3
 8010022:	4610      	mov	r0, r2
 8010024:	f7ff fe2f 	bl	800fc86 <create_chain>
 8010028:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d101      	bne.n	8010034 <dir_next+0xe4>
 8010030:	2307      	movs	r3, #7
 8010032:	e080      	b.n	8010136 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d101      	bne.n	801003e <dir_next+0xee>
 801003a:	2302      	movs	r3, #2
 801003c:	e07b      	b.n	8010136 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 801003e:	697b      	ldr	r3, [r7, #20]
 8010040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010044:	d101      	bne.n	801004a <dir_next+0xfa>
 8010046:	2301      	movs	r3, #1
 8010048:	e075      	b.n	8010136 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff fab1 	bl	800f5b8 <sync_window>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <dir_next+0x110>
 801005c:	2301      	movs	r3, #1
 801005e:	e06a      	b.n	8010136 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010066:	f44f 7200 	mov.w	r2, #512	; 0x200
 801006a:	2100      	movs	r1, #0
 801006c:	4618      	mov	r0, r3
 801006e:	f7ff f867 	bl	800f140 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 801007e:	6979      	ldr	r1, [r7, #20]
 8010080:	4610      	mov	r0, r2
 8010082:	f7ff fbbd 	bl	800f800 <clust2sect>
 8010086:	4603      	mov	r3, r0
 8010088:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 801008c:	2300      	movs	r3, #0
 801008e:	613b      	str	r3, [r7, #16]
 8010090:	e01b      	b.n	80100ca <dir_next+0x17a>
						dp->fs->wflag = 1;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010098:	2201      	movs	r2, #1
 801009a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7ff fa87 	bl	800f5b8 <sync_window>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d001      	beq.n	80100b4 <dir_next+0x164>
 80100b0:	2301      	movs	r3, #1
 80100b2:	e040      	b.n	8010136 <dir_next+0x1e6>
						dp->fs->winsect++;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80100ba:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80100be:	3201      	adds	r2, #1
 80100c0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	3301      	adds	r3, #1
 80100c8:	613b      	str	r3, [r7, #16]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80100d0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80100d4:	461a      	mov	r2, r3
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	4293      	cmp	r3, r2
 80100da:	d3da      	bcc.n	8010092 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80100e2:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80100ec:	693a      	ldr	r2, [r7, #16]
 80100ee:	1a8a      	subs	r2, r1, r2
 80100f0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	697a      	ldr	r2, [r7, #20]
 80100f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010102:	6979      	ldr	r1, [r7, #20]
 8010104:	4618      	mov	r0, r3
 8010106:	f7ff fb7b 	bl	800f800 <clust2sect>
 801010a:	4602      	mov	r2, r0
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	b29a      	uxth	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010122:	461a      	mov	r2, r3
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f003 030f 	and.w	r3, r3, #15
 801012a:	015b      	lsls	r3, r3, #5
 801012c:	441a      	add	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8010134:	2300      	movs	r3, #0
}
 8010136:	4618      	mov	r0, r3
 8010138:	371c      	adds	r7, #28
 801013a:	46bd      	mov	sp, r7
 801013c:	bd90      	pop	{r4, r7, pc}

0801013e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b084      	sub	sp, #16
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
 8010146:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8010148:	2100      	movs	r1, #0
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f7ff fe6c 	bl	800fe28 <dir_sdi>
 8010150:	4603      	mov	r3, r0
 8010152:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d131      	bne.n	80101be <dir_alloc+0x80>
		n = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801016a:	4619      	mov	r1, r3
 801016c:	4610      	mov	r0, r2
 801016e:	f7ff fa6c 	bl	800f64a <move_window>
 8010172:	4603      	mov	r3, r0
 8010174:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010176:	7bfb      	ldrb	r3, [r7, #15]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d11f      	bne.n	80101bc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	2be5      	cmp	r3, #229	; 0xe5
 8010186:	d005      	beq.n	8010194 <dir_alloc+0x56>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d107      	bne.n	80101a4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	3301      	adds	r3, #1
 8010198:	60bb      	str	r3, [r7, #8]
 801019a:	68ba      	ldr	r2, [r7, #8]
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d102      	bne.n	80101a8 <dir_alloc+0x6a>
 80101a2:	e00c      	b.n	80101be <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80101a4:	2300      	movs	r3, #0
 80101a6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80101a8:	2101      	movs	r1, #1
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7ff fed0 	bl	800ff50 <dir_next>
 80101b0:	4603      	mov	r3, r0
 80101b2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80101b4:	7bfb      	ldrb	r3, [r7, #15]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d0d1      	beq.n	801015e <dir_alloc+0x20>
 80101ba:	e000      	b.n	80101be <dir_alloc+0x80>
			if (res != FR_OK) break;
 80101bc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80101be:	7bfb      	ldrb	r3, [r7, #15]
 80101c0:	2b04      	cmp	r3, #4
 80101c2:	d101      	bne.n	80101c8 <dir_alloc+0x8a>
 80101c4:	2307      	movs	r3, #7
 80101c6:	73fb      	strb	r3, [r7, #15]
	return res;
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80101d2:	b480      	push	{r7}
 80101d4:	b085      	sub	sp, #20
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
 80101da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	331b      	adds	r3, #27
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	021b      	lsls	r3, r3, #8
 80101e4:	b21a      	sxth	r2, r3
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	331a      	adds	r3, #26
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	b21b      	sxth	r3, r3
 80101ee:	4313      	orrs	r3, r2
 80101f0:	b21b      	sxth	r3, r3
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d10f      	bne.n	8010220 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	3315      	adds	r3, #21
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	021b      	lsls	r3, r3, #8
 8010208:	b21a      	sxth	r2, r3
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	3314      	adds	r3, #20
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	b21b      	sxth	r3, r3
 8010212:	4313      	orrs	r3, r2
 8010214:	b21b      	sxth	r3, r3
 8010216:	b29b      	uxth	r3, r3
 8010218:	041b      	lsls	r3, r3, #16
 801021a:	68fa      	ldr	r2, [r7, #12]
 801021c:	4313      	orrs	r3, r2
 801021e:	60fb      	str	r3, [r7, #12]

	return cl;
 8010220:	68fb      	ldr	r3, [r7, #12]
}
 8010222:	4618      	mov	r0, r3
 8010224:	3714      	adds	r7, #20
 8010226:	46bd      	mov	sp, r7
 8010228:	bc80      	pop	{r7}
 801022a:	4770      	bx	lr

0801022c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 801022c:	b480      	push	{r7}
 801022e:	b083      	sub	sp, #12
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
 8010234:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	331a      	adds	r3, #26
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	b2d2      	uxtb	r2, r2
 801023e:	701a      	strb	r2, [r3, #0]
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	b29b      	uxth	r3, r3
 8010244:	0a1b      	lsrs	r3, r3, #8
 8010246:	b29a      	uxth	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	331b      	adds	r3, #27
 801024c:	b2d2      	uxtb	r2, r2
 801024e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8010250:	683b      	ldr	r3, [r7, #0]
 8010252:	0c1a      	lsrs	r2, r3, #16
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	3314      	adds	r3, #20
 8010258:	b2d2      	uxtb	r2, r2
 801025a:	701a      	strb	r2, [r3, #0]
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	0c1b      	lsrs	r3, r3, #16
 8010260:	b29b      	uxth	r3, r3
 8010262:	0a1b      	lsrs	r3, r3, #8
 8010264:	b29a      	uxth	r2, r3
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	3315      	adds	r3, #21
 801026a:	b2d2      	uxtb	r2, r2
 801026c:	701a      	strb	r2, [r3, #0]
}
 801026e:	bf00      	nop
 8010270:	370c      	adds	r7, #12
 8010272:	46bd      	mov	sp, r7
 8010274:	bc80      	pop	{r7}
 8010276:	4770      	bx	lr

08010278 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010280:	2100      	movs	r1, #0
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f7ff fdd0 	bl	800fe28 <dir_sdi>
 8010288:	4603      	mov	r3, r0
 801028a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801028c:	7dfb      	ldrb	r3, [r7, #23]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <dir_find+0x1e>
 8010292:	7dfb      	ldrb	r3, [r7, #23]
 8010294:	e03b      	b.n	801030e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80102a2:	4619      	mov	r1, r3
 80102a4:	4610      	mov	r0, r2
 80102a6:	f7ff f9d0 	bl	800f64a <move_window>
 80102aa:	4603      	mov	r3, r0
 80102ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80102ae:	7dfb      	ldrb	r3, [r7, #23]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d128      	bne.n	8010306 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80102ba:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80102c2:	7bfb      	ldrb	r3, [r7, #15]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d102      	bne.n	80102ce <dir_find+0x56>
 80102c8:	2304      	movs	r3, #4
 80102ca:	75fb      	strb	r3, [r7, #23]
 80102cc:	e01e      	b.n	801030c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	330b      	adds	r3, #11
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	f003 0308 	and.w	r3, r3, #8
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d10a      	bne.n	80102f2 <dir_find+0x7a>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80102e2:	220b      	movs	r2, #11
 80102e4:	4619      	mov	r1, r3
 80102e6:	6938      	ldr	r0, [r7, #16]
 80102e8:	f7fe ff44 	bl	800f174 <mem_cmp>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00b      	beq.n	801030a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80102f2:	2100      	movs	r1, #0
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7ff fe2b 	bl	800ff50 <dir_next>
 80102fa:	4603      	mov	r3, r0
 80102fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80102fe:	7dfb      	ldrb	r3, [r7, #23]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d0c8      	beq.n	8010296 <dir_find+0x1e>
 8010304:	e002      	b.n	801030c <dir_find+0x94>
		if (res != FR_OK) break;
 8010306:	bf00      	nop
 8010308:	e000      	b.n	801030c <dir_find+0x94>
			break;
 801030a:	bf00      	nop

	return res;
 801030c:	7dfb      	ldrb	r3, [r7, #23]
}
 801030e:	4618      	mov	r0, r3
 8010310:	3718      	adds	r7, #24
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b084      	sub	sp, #16
 801031a:	af00      	add	r7, sp, #0
 801031c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801031e:	2101      	movs	r1, #1
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f7ff ff0c 	bl	801013e <dir_alloc>
 8010326:	4603      	mov	r3, r0
 8010328:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 801032a:	7bfb      	ldrb	r3, [r7, #15]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d126      	bne.n	801037e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801033c:	4619      	mov	r1, r3
 801033e:	4610      	mov	r0, r2
 8010340:	f7ff f983 	bl	800f64a <move_window>
 8010344:	4603      	mov	r3, r0
 8010346:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010348:	7bfb      	ldrb	r3, [r7, #15]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d117      	bne.n	801037e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010354:	2220      	movs	r2, #32
 8010356:	2100      	movs	r1, #0
 8010358:	4618      	mov	r0, r3
 801035a:	f7fe fef1 	bl	800f140 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801036a:	220b      	movs	r2, #11
 801036c:	4619      	mov	r1, r3
 801036e:	f7fe fec9 	bl	800f104 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010378:	2201      	movs	r2, #1
 801037a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 801037e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b088      	sub	sp, #32
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	60fb      	str	r3, [r7, #12]
 8010398:	e002      	b.n	80103a0 <create_name+0x18>
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	3301      	adds	r3, #1
 801039e:	60fb      	str	r3, [r7, #12]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	2b2f      	cmp	r3, #47	; 0x2f
 80103a6:	d0f8      	beq.n	801039a <create_name+0x12>
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	2b5c      	cmp	r3, #92	; 0x5c
 80103ae:	d0f4      	beq.n	801039a <create_name+0x12>
	sfn = dp->fn;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80103b6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80103b8:	220b      	movs	r2, #11
 80103ba:	2120      	movs	r1, #32
 80103bc:	68b8      	ldr	r0, [r7, #8]
 80103be:	f7fe febf 	bl	800f140 <mem_set>
	si = i = b = 0; ni = 8;
 80103c2:	2300      	movs	r3, #0
 80103c4:	77fb      	strb	r3, [r7, #31]
 80103c6:	2300      	movs	r3, #0
 80103c8:	613b      	str	r3, [r7, #16]
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	617b      	str	r3, [r7, #20]
 80103ce:	2308      	movs	r3, #8
 80103d0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	1c5a      	adds	r2, r3, #1
 80103d6:	617a      	str	r2, [r7, #20]
 80103d8:	68fa      	ldr	r2, [r7, #12]
 80103da:	4413      	add	r3, r2
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80103e0:	7fbb      	ldrb	r3, [r7, #30]
 80103e2:	2b20      	cmp	r3, #32
 80103e4:	d953      	bls.n	801048e <create_name+0x106>
 80103e6:	7fbb      	ldrb	r3, [r7, #30]
 80103e8:	2b2f      	cmp	r3, #47	; 0x2f
 80103ea:	d050      	beq.n	801048e <create_name+0x106>
 80103ec:	7fbb      	ldrb	r3, [r7, #30]
 80103ee:	2b5c      	cmp	r3, #92	; 0x5c
 80103f0:	d04d      	beq.n	801048e <create_name+0x106>
		if (c == '.' || i >= ni) {
 80103f2:	7fbb      	ldrb	r3, [r7, #30]
 80103f4:	2b2e      	cmp	r3, #46	; 0x2e
 80103f6:	d003      	beq.n	8010400 <create_name+0x78>
 80103f8:	693a      	ldr	r2, [r7, #16]
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d30f      	bcc.n	8010420 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	2b08      	cmp	r3, #8
 8010404:	d102      	bne.n	801040c <create_name+0x84>
 8010406:	7fbb      	ldrb	r3, [r7, #30]
 8010408:	2b2e      	cmp	r3, #46	; 0x2e
 801040a:	d001      	beq.n	8010410 <create_name+0x88>
 801040c:	2306      	movs	r3, #6
 801040e:	e073      	b.n	80104f8 <create_name+0x170>
			i = 8; ni = 11;
 8010410:	2308      	movs	r3, #8
 8010412:	613b      	str	r3, [r7, #16]
 8010414:	230b      	movs	r3, #11
 8010416:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8010418:	7ffb      	ldrb	r3, [r7, #31]
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	77fb      	strb	r3, [r7, #31]
 801041e:	e035      	b.n	801048c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010420:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010424:	2b00      	cmp	r3, #0
 8010426:	da08      	bge.n	801043a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8010428:	7ffb      	ldrb	r3, [r7, #31]
 801042a:	f043 0303 	orr.w	r3, r3, #3
 801042e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010430:	7fbb      	ldrb	r3, [r7, #30]
 8010432:	3b80      	subs	r3, #128	; 0x80
 8010434:	4a32      	ldr	r2, [pc, #200]	; (8010500 <create_name+0x178>)
 8010436:	5cd3      	ldrb	r3, [r2, r3]
 8010438:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 801043a:	7fbb      	ldrb	r3, [r7, #30]
 801043c:	4619      	mov	r1, r3
 801043e:	4831      	ldr	r0, [pc, #196]	; (8010504 <create_name+0x17c>)
 8010440:	f7fe febe 	bl	800f1c0 <chk_chr>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <create_name+0xc6>
				return FR_INVALID_NAME;
 801044a:	2306      	movs	r3, #6
 801044c:	e054      	b.n	80104f8 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 801044e:	7fbb      	ldrb	r3, [r7, #30]
 8010450:	2b40      	cmp	r3, #64	; 0x40
 8010452:	d907      	bls.n	8010464 <create_name+0xdc>
 8010454:	7fbb      	ldrb	r3, [r7, #30]
 8010456:	2b5a      	cmp	r3, #90	; 0x5a
 8010458:	d804      	bhi.n	8010464 <create_name+0xdc>
				b |= 2;
 801045a:	7ffb      	ldrb	r3, [r7, #31]
 801045c:	f043 0302 	orr.w	r3, r3, #2
 8010460:	77fb      	strb	r3, [r7, #31]
 8010462:	e00c      	b.n	801047e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8010464:	7fbb      	ldrb	r3, [r7, #30]
 8010466:	2b60      	cmp	r3, #96	; 0x60
 8010468:	d909      	bls.n	801047e <create_name+0xf6>
 801046a:	7fbb      	ldrb	r3, [r7, #30]
 801046c:	2b7a      	cmp	r3, #122	; 0x7a
 801046e:	d806      	bhi.n	801047e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8010470:	7ffb      	ldrb	r3, [r7, #31]
 8010472:	f043 0301 	orr.w	r3, r3, #1
 8010476:	77fb      	strb	r3, [r7, #31]
 8010478:	7fbb      	ldrb	r3, [r7, #30]
 801047a:	3b20      	subs	r3, #32
 801047c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	613a      	str	r2, [r7, #16]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	4413      	add	r3, r2
 8010488:	7fba      	ldrb	r2, [r7, #30]
 801048a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801048c:	e7a1      	b.n	80103d2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	441a      	add	r2, r3
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8010498:	7fbb      	ldrb	r3, [r7, #30]
 801049a:	2b20      	cmp	r3, #32
 801049c:	d801      	bhi.n	80104a2 <create_name+0x11a>
 801049e:	2304      	movs	r3, #4
 80104a0:	e000      	b.n	80104a4 <create_name+0x11c>
 80104a2:	2300      	movs	r3, #0
 80104a4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d101      	bne.n	80104b0 <create_name+0x128>
 80104ac:	2306      	movs	r3, #6
 80104ae:	e023      	b.n	80104f8 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	2be5      	cmp	r3, #229	; 0xe5
 80104b6:	d102      	bne.n	80104be <create_name+0x136>
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	2205      	movs	r2, #5
 80104bc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	2b08      	cmp	r3, #8
 80104c2:	d102      	bne.n	80104ca <create_name+0x142>
 80104c4:	7ffb      	ldrb	r3, [r7, #31]
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80104ca:	7ffb      	ldrb	r3, [r7, #31]
 80104cc:	f003 0303 	and.w	r3, r3, #3
 80104d0:	2b01      	cmp	r3, #1
 80104d2:	d103      	bne.n	80104dc <create_name+0x154>
 80104d4:	7fbb      	ldrb	r3, [r7, #30]
 80104d6:	f043 0310 	orr.w	r3, r3, #16
 80104da:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80104dc:	7ffb      	ldrb	r3, [r7, #31]
 80104de:	f003 030c 	and.w	r3, r3, #12
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	d103      	bne.n	80104ee <create_name+0x166>
 80104e6:	7fbb      	ldrb	r3, [r7, #30]
 80104e8:	f043 0308 	orr.w	r3, r3, #8
 80104ec:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	330b      	adds	r3, #11
 80104f2:	7fba      	ldrb	r2, [r7, #30]
 80104f4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80104f6:	2300      	movs	r3, #0
#endif
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3720      	adds	r7, #32
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	0802fc00 	.word	0x0802fc00
 8010504:	08016914 	.word	0x08016914

08010508 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	2b2f      	cmp	r3, #47	; 0x2f
 8010518:	d003      	beq.n	8010522 <follow_path+0x1a>
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	2b5c      	cmp	r3, #92	; 0x5c
 8010520:	d102      	bne.n	8010528 <follow_path+0x20>
		path++;
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	3301      	adds	r3, #1
 8010526:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	2b1f      	cmp	r3, #31
 8010536:	d80a      	bhi.n	801054e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8010538:	2100      	movs	r1, #0
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff fc74 	bl	800fe28 <dir_sdi>
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2200      	movs	r2, #0
 8010548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801054c:	e045      	b.n	80105da <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801054e:	463b      	mov	r3, r7
 8010550:	4619      	mov	r1, r3
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f7ff ff18 	bl	8010388 <create_name>
 8010558:	4603      	mov	r3, r0
 801055a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d136      	bne.n	80105d0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7ff fe88 	bl	8010278 <dir_find>
 8010568:	4603      	mov	r3, r0
 801056a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010572:	7adb      	ldrb	r3, [r3, #11]
 8010574:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8010576:	7bfb      	ldrb	r3, [r7, #15]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00a      	beq.n	8010592 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801057c:	7bfb      	ldrb	r3, [r7, #15]
 801057e:	2b04      	cmp	r3, #4
 8010580:	d128      	bne.n	80105d4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010582:	7bbb      	ldrb	r3, [r7, #14]
 8010584:	f003 0304 	and.w	r3, r3, #4
 8010588:	2b00      	cmp	r3, #0
 801058a:	d123      	bne.n	80105d4 <follow_path+0xcc>
 801058c:	2305      	movs	r3, #5
 801058e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8010590:	e020      	b.n	80105d4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010592:	7bbb      	ldrb	r3, [r7, #14]
 8010594:	f003 0304 	and.w	r3, r3, #4
 8010598:	2b00      	cmp	r3, #0
 801059a:	d11d      	bne.n	80105d8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80105a2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	330b      	adds	r3, #11
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	f003 0310 	and.w	r3, r3, #16
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d102      	bne.n	80105b8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80105b2:	2305      	movs	r3, #5
 80105b4:	73fb      	strb	r3, [r7, #15]
 80105b6:	e010      	b.n	80105da <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105be:	68b9      	ldr	r1, [r7, #8]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7ff fe06 	bl	80101d2 <ld_clust>
 80105c6:	4602      	mov	r2, r0
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80105ce:	e7be      	b.n	801054e <follow_path+0x46>
			if (res != FR_OK) break;
 80105d0:	bf00      	nop
 80105d2:	e002      	b.n	80105da <follow_path+0xd2>
				break;
 80105d4:	bf00      	nop
 80105d6:	e000      	b.n	80105da <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80105d8:	bf00      	nop
		}
	}

	return res;
 80105da:	7bfb      	ldrb	r3, [r7, #15]
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3710      	adds	r7, #16
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}

080105e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b087      	sub	sp, #28
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80105ec:	f04f 33ff 	mov.w	r3, #4294967295
 80105f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d031      	beq.n	801065e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	617b      	str	r3, [r7, #20]
 8010600:	e002      	b.n	8010608 <get_ldnumber+0x24>
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	3301      	adds	r3, #1
 8010606:	617b      	str	r3, [r7, #20]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	781b      	ldrb	r3, [r3, #0]
 801060c:	2b20      	cmp	r3, #32
 801060e:	d903      	bls.n	8010618 <get_ldnumber+0x34>
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	781b      	ldrb	r3, [r3, #0]
 8010614:	2b3a      	cmp	r3, #58	; 0x3a
 8010616:	d1f4      	bne.n	8010602 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	2b3a      	cmp	r3, #58	; 0x3a
 801061e:	d11c      	bne.n	801065a <get_ldnumber+0x76>
			tp = *path;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	60fa      	str	r2, [r7, #12]
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	3b30      	subs	r3, #48	; 0x30
 8010630:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	2b09      	cmp	r3, #9
 8010636:	d80e      	bhi.n	8010656 <get_ldnumber+0x72>
 8010638:	68fa      	ldr	r2, [r7, #12]
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	429a      	cmp	r2, r3
 801063e:	d10a      	bne.n	8010656 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d107      	bne.n	8010656 <get_ldnumber+0x72>
					vol = (int)i;
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	3301      	adds	r3, #1
 801064e:	617b      	str	r3, [r7, #20]
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	697a      	ldr	r2, [r7, #20]
 8010654:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	e002      	b.n	8010660 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801065a:	2300      	movs	r3, #0
 801065c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801065e:	693b      	ldr	r3, [r7, #16]
}
 8010660:	4618      	mov	r0, r3
 8010662:	371c      	adds	r7, #28
 8010664:	46bd      	mov	sp, r7
 8010666:	bc80      	pop	{r7}
 8010668:	4770      	bx	lr
	...

0801066c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f04f 32ff 	mov.w	r2, #4294967295
 8010684:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8010688:	6839      	ldr	r1, [r7, #0]
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f7fe ffdd 	bl	800f64a <move_window>
 8010690:	4603      	mov	r3, r0
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <check_fs+0x2e>
		return 3;
 8010696:	2303      	movs	r3, #3
 8010698:	e04a      	b.n	8010730 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80106a0:	3301      	adds	r3, #1
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	021b      	lsls	r3, r3, #8
 80106a6:	b21a      	sxth	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80106ae:	b21b      	sxth	r3, r3
 80106b0:	4313      	orrs	r3, r2
 80106b2:	b21b      	sxth	r3, r3
 80106b4:	4a20      	ldr	r2, [pc, #128]	; (8010738 <check_fs+0xcc>)
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d001      	beq.n	80106be <check_fs+0x52>
		return 2;
 80106ba:	2302      	movs	r3, #2
 80106bc:	e038      	b.n	8010730 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	3336      	adds	r3, #54	; 0x36
 80106c2:	3303      	adds	r3, #3
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	061a      	lsls	r2, r3, #24
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	3336      	adds	r3, #54	; 0x36
 80106cc:	3302      	adds	r3, #2
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	041b      	lsls	r3, r3, #16
 80106d2:	4313      	orrs	r3, r2
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	3236      	adds	r2, #54	; 0x36
 80106d8:	3201      	adds	r2, #1
 80106da:	7812      	ldrb	r2, [r2, #0]
 80106dc:	0212      	lsls	r2, r2, #8
 80106de:	4313      	orrs	r3, r2
 80106e0:	687a      	ldr	r2, [r7, #4]
 80106e2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80106e6:	4313      	orrs	r3, r2
 80106e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80106ec:	4a13      	ldr	r2, [pc, #76]	; (801073c <check_fs+0xd0>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d101      	bne.n	80106f6 <check_fs+0x8a>
		return 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	e01c      	b.n	8010730 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	3352      	adds	r3, #82	; 0x52
 80106fa:	3303      	adds	r3, #3
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	061a      	lsls	r2, r3, #24
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	3352      	adds	r3, #82	; 0x52
 8010704:	3302      	adds	r3, #2
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	041b      	lsls	r3, r3, #16
 801070a:	4313      	orrs	r3, r2
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	3252      	adds	r2, #82	; 0x52
 8010710:	3201      	adds	r2, #1
 8010712:	7812      	ldrb	r2, [r2, #0]
 8010714:	0212      	lsls	r2, r2, #8
 8010716:	4313      	orrs	r3, r2
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 801071e:	4313      	orrs	r3, r2
 8010720:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010724:	4a05      	ldr	r2, [pc, #20]	; (801073c <check_fs+0xd0>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d101      	bne.n	801072e <check_fs+0xc2>
		return 0;
 801072a:	2300      	movs	r3, #0
 801072c:	e000      	b.n	8010730 <check_fs+0xc4>

	return 1;
 801072e:	2301      	movs	r3, #1
}
 8010730:	4618      	mov	r0, r3
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	ffffaa55 	.word	0xffffaa55
 801073c:	00544146 	.word	0x00544146

08010740 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b096      	sub	sp, #88	; 0x58
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	4613      	mov	r3, r2
 801074c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2200      	movs	r2, #0
 8010752:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010754:	68b8      	ldr	r0, [r7, #8]
 8010756:	f7ff ff45 	bl	80105e4 <get_ldnumber>
 801075a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801075c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801075e:	2b00      	cmp	r3, #0
 8010760:	da01      	bge.n	8010766 <find_volume+0x26>
 8010762:	230b      	movs	r3, #11
 8010764:	e2b0      	b.n	8010cc8 <find_volume+0x588>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010766:	4aa1      	ldr	r2, [pc, #644]	; (80109ec <find_volume+0x2ac>)
 8010768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801076a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801076e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010772:	2b00      	cmp	r3, #0
 8010774:	d101      	bne.n	801077a <find_volume+0x3a>
 8010776:	230c      	movs	r3, #12
 8010778:	e2a6      	b.n	8010cc8 <find_volume+0x588>

	ENTER_FF(fs);						/* Lock the volume */
 801077a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801077c:	f7fe fd3a 	bl	800f1f4 <lock_fs>
 8010780:	4603      	mov	r3, r0
 8010782:	2b00      	cmp	r3, #0
 8010784:	d101      	bne.n	801078a <find_volume+0x4a>
 8010786:	230f      	movs	r3, #15
 8010788:	e29e      	b.n	8010cc8 <find_volume+0x588>
	*rfs = fs;							/* Return pointer to the file system object */
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801078e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8010790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010792:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010796:	2b00      	cmp	r3, #0
 8010798:	d01b      	beq.n	80107d2 <find_volume+0x92>
		stat = disk_status(fs->drv);
 801079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80107a0:	4618      	mov	r0, r3
 80107a2:	f7fe fc11 	bl	800efc8 <disk_status>
 80107a6:	4603      	mov	r3, r0
 80107a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80107ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107b0:	f003 0301 	and.w	r3, r3, #1
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d10c      	bne.n	80107d2 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80107b8:	79fb      	ldrb	r3, [r7, #7]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d007      	beq.n	80107ce <find_volume+0x8e>
 80107be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107c2:	f003 0304 	and.w	r3, r3, #4
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 80107ca:	230a      	movs	r3, #10
 80107cc:	e27c      	b.n	8010cc8 <find_volume+0x588>
			return FR_OK;				/* The file system object is valid */
 80107ce:	2300      	movs	r3, #0
 80107d0:	e27a      	b.n	8010cc8 <find_volume+0x588>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80107d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d4:	2200      	movs	r2, #0
 80107d6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80107da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80107e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fe fc06 	bl	800effc <disk_initialize>
 80107f0:	4603      	mov	r3, r0
 80107f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80107f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107fa:	f003 0301 	and.w	r3, r3, #1
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d001      	beq.n	8010806 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010802:	2303      	movs	r3, #3
 8010804:	e260      	b.n	8010cc8 <find_volume+0x588>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8010806:	79fb      	ldrb	r3, [r7, #7]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d007      	beq.n	801081c <find_volume+0xdc>
 801080c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010810:	f003 0304 	and.w	r3, r3, #4
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8010818:	230a      	movs	r3, #10
 801081a:	e255      	b.n	8010cc8 <find_volume+0x588>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 801081c:	2300      	movs	r3, #0
 801081e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8010820:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010822:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010824:	f7ff ff22 	bl	801066c <check_fs>
 8010828:	4603      	mov	r3, r0
 801082a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 801082e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010832:	2b01      	cmp	r3, #1
 8010834:	d153      	bne.n	80108de <find_volume+0x19e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010836:	2300      	movs	r3, #0
 8010838:	643b      	str	r3, [r7, #64]	; 0x40
 801083a:	e028      	b.n	801088e <find_volume+0x14e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 801083c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801083e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010840:	011b      	lsls	r3, r3, #4
 8010842:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010846:	4413      	add	r3, r2
 8010848:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	3304      	adds	r3, #4
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d012      	beq.n	801087a <find_volume+0x13a>
 8010854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010856:	330b      	adds	r3, #11
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	061a      	lsls	r2, r3, #24
 801085c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085e:	330a      	adds	r3, #10
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	041b      	lsls	r3, r3, #16
 8010864:	4313      	orrs	r3, r2
 8010866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010868:	3209      	adds	r2, #9
 801086a:	7812      	ldrb	r2, [r2, #0]
 801086c:	0212      	lsls	r2, r2, #8
 801086e:	4313      	orrs	r3, r2
 8010870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010872:	3208      	adds	r2, #8
 8010874:	7812      	ldrb	r2, [r2, #0]
 8010876:	431a      	orrs	r2, r3
 8010878:	e000      	b.n	801087c <find_volume+0x13c>
 801087a:	2200      	movs	r2, #0
 801087c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801087e:	009b      	lsls	r3, r3, #2
 8010880:	3358      	adds	r3, #88	; 0x58
 8010882:	443b      	add	r3, r7
 8010884:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8010888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801088a:	3301      	adds	r3, #1
 801088c:	643b      	str	r3, [r7, #64]	; 0x40
 801088e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010890:	2b03      	cmp	r3, #3
 8010892:	d9d3      	bls.n	801083c <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8010894:	2300      	movs	r3, #0
 8010896:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <find_volume+0x164>
 801089e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108a0:	3b01      	subs	r3, #1
 80108a2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80108a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	3358      	adds	r3, #88	; 0x58
 80108aa:	443b      	add	r3, r7
 80108ac:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80108b0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80108b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d005      	beq.n	80108c4 <find_volume+0x184>
 80108b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80108ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108bc:	f7ff fed6 	bl	801066c <check_fs>
 80108c0:	4603      	mov	r3, r0
 80108c2:	e000      	b.n	80108c6 <find_volume+0x186>
 80108c4:	2302      	movs	r3, #2
 80108c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80108ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d005      	beq.n	80108de <find_volume+0x19e>
 80108d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108d4:	3301      	adds	r3, #1
 80108d6:	643b      	str	r3, [r7, #64]	; 0x40
 80108d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108da:	2b03      	cmp	r3, #3
 80108dc:	d9e2      	bls.n	80108a4 <find_volume+0x164>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80108de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108e2:	2b03      	cmp	r3, #3
 80108e4:	d101      	bne.n	80108ea <find_volume+0x1aa>
 80108e6:	2301      	movs	r3, #1
 80108e8:	e1ee      	b.n	8010cc8 <find_volume+0x588>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80108ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d001      	beq.n	80108f6 <find_volume+0x1b6>
 80108f2:	230d      	movs	r3, #13
 80108f4:	e1e8      	b.n	8010cc8 <find_volume+0x588>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80108f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f8:	7b1b      	ldrb	r3, [r3, #12]
 80108fa:	021b      	lsls	r3, r3, #8
 80108fc:	b21a      	sxth	r2, r3
 80108fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010900:	7adb      	ldrb	r3, [r3, #11]
 8010902:	b21b      	sxth	r3, r3
 8010904:	4313      	orrs	r3, r2
 8010906:	b21b      	sxth	r3, r3
 8010908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801090c:	d001      	beq.n	8010912 <find_volume+0x1d2>
		return FR_NO_FILESYSTEM;
 801090e:	230d      	movs	r3, #13
 8010910:	e1da      	b.n	8010cc8 <find_volume+0x588>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	7ddb      	ldrb	r3, [r3, #23]
 8010916:	021b      	lsls	r3, r3, #8
 8010918:	b21a      	sxth	r2, r3
 801091a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091c:	7d9b      	ldrb	r3, [r3, #22]
 801091e:	b21b      	sxth	r3, r3
 8010920:	4313      	orrs	r3, r2
 8010922:	b21b      	sxth	r3, r3
 8010924:	b29b      	uxth	r3, r3
 8010926:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8010928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801092a:	2b00      	cmp	r3, #0
 801092c:	d112      	bne.n	8010954 <find_volume+0x214>
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010934:	061a      	lsls	r2, r3, #24
 8010936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010938:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801093c:	041b      	lsls	r3, r3, #16
 801093e:	4313      	orrs	r3, r2
 8010940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010942:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8010946:	0212      	lsls	r2, r2, #8
 8010948:	4313      	orrs	r3, r2
 801094a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801094c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8010950:	4313      	orrs	r3, r2
 8010952:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8010954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010958:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 801095c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095e:	7c1a      	ldrb	r2, [r3, #16]
 8010960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010962:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8010966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010968:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 801096c:	2b01      	cmp	r3, #1
 801096e:	d006      	beq.n	801097e <find_volume+0x23e>
 8010970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010972:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8010976:	2b02      	cmp	r3, #2
 8010978:	d001      	beq.n	801097e <find_volume+0x23e>
		return FR_NO_FILESYSTEM;
 801097a:	230d      	movs	r3, #13
 801097c:	e1a4      	b.n	8010cc8 <find_volume+0x588>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 801097e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010980:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8010984:	461a      	mov	r2, r3
 8010986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010988:	fb02 f303 	mul.w	r3, r2, r3
 801098c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 801098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010990:	7b5a      	ldrb	r2, [r3, #13]
 8010992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010994:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8010998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d00a      	beq.n	80109b8 <find_volume+0x278>
 80109a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80109a8:	461a      	mov	r2, r3
 80109aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ac:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80109b0:	3b01      	subs	r3, #1
 80109b2:	4013      	ands	r3, r2
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d001      	beq.n	80109bc <find_volume+0x27c>
		return FR_NO_FILESYSTEM;
 80109b8:	230d      	movs	r3, #13
 80109ba:	e185      	b.n	8010cc8 <find_volume+0x588>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80109bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109be:	7c9b      	ldrb	r3, [r3, #18]
 80109c0:	021b      	lsls	r3, r3, #8
 80109c2:	b21a      	sxth	r2, r3
 80109c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c6:	7c5b      	ldrb	r3, [r3, #17]
 80109c8:	b21b      	sxth	r3, r3
 80109ca:	4313      	orrs	r3, r2
 80109cc:	b21b      	sxth	r3, r3
 80109ce:	b29a      	uxth	r2, r3
 80109d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80109d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80109dc:	f003 030f 	and.w	r3, r3, #15
 80109e0:	b29b      	uxth	r3, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d004      	beq.n	80109f0 <find_volume+0x2b0>
		return FR_NO_FILESYSTEM;
 80109e6:	230d      	movs	r3, #13
 80109e8:	e16e      	b.n	8010cc8 <find_volume+0x588>
 80109ea:	bf00      	nop
 80109ec:	20001c98 	.word	0x20001c98

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80109f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f2:	7d1b      	ldrb	r3, [r3, #20]
 80109f4:	021b      	lsls	r3, r3, #8
 80109f6:	b21a      	sxth	r2, r3
 80109f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fa:	7cdb      	ldrb	r3, [r3, #19]
 80109fc:	b21b      	sxth	r3, r3
 80109fe:	4313      	orrs	r3, r2
 8010a00:	b21b      	sxth	r3, r3
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8010a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d112      	bne.n	8010a32 <find_volume+0x2f2>
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8010a12:	061a      	lsls	r2, r3, #24
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8010a1a:	041b      	lsls	r3, r3, #16
 8010a1c:	4313      	orrs	r3, r2
 8010a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a20:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8010a24:	0212      	lsls	r2, r2, #8
 8010a26:	4313      	orrs	r3, r2
 8010a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a2a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8010a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a34:	7bdb      	ldrb	r3, [r3, #15]
 8010a36:	021b      	lsls	r3, r3, #8
 8010a38:	b21a      	sxth	r2, r3
 8010a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3c:	7b9b      	ldrb	r3, [r3, #14]
 8010a3e:	b21b      	sxth	r3, r3
 8010a40:	4313      	orrs	r3, r2
 8010a42:	b21b      	sxth	r3, r3
 8010a44:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8010a46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d101      	bne.n	8010a50 <find_volume+0x310>
 8010a4c:	230d      	movs	r3, #13
 8010a4e:	e13b      	b.n	8010cc8 <find_volume+0x588>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8010a50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a54:	4413      	add	r3, r2
 8010a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a58:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8010a5c:	0912      	lsrs	r2, r2, #4
 8010a5e:	b292      	uxth	r2, r2
 8010a60:	4413      	add	r3, r2
 8010a62:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010a64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d201      	bcs.n	8010a70 <find_volume+0x330>
 8010a6c:	230d      	movs	r3, #13
 8010a6e:	e12b      	b.n	8010cc8 <find_volume+0x588>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8010a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a74:	1ad3      	subs	r3, r2, r3
 8010a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a78:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a80:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8010a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d101      	bne.n	8010a8c <find_volume+0x34c>
 8010a88:	230d      	movs	r3, #13
 8010a8a:	e11d      	b.n	8010cc8 <find_volume+0x588>
	fmt = FS_FAT12;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8010a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a94:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d902      	bls.n	8010aa2 <find_volume+0x362>
 8010a9c:	2302      	movs	r3, #2
 8010a9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d902      	bls.n	8010ab2 <find_volume+0x372>
 8010aac:	2303      	movs	r3, #3
 8010aae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8010ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab4:	1c9a      	adds	r2, r3, #2
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ac0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8010ac4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ac8:	441a      	add	r2, r3
 8010aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010acc:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8010ad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad4:	441a      	add	r2, r3
 8010ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8010adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ae0:	2b03      	cmp	r3, #3
 8010ae2:	d121      	bne.n	8010b28 <find_volume+0x3e8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d001      	beq.n	8010af2 <find_volume+0x3b2>
 8010aee:	230d      	movs	r3, #13
 8010af0:	e0ea      	b.n	8010cc8 <find_volume+0x588>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8010af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010af8:	061a      	lsls	r2, r3, #24
 8010afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8010b00:	041b      	lsls	r3, r3, #16
 8010b02:	4313      	orrs	r3, r2
 8010b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b06:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8010b0a:	0212      	lsls	r2, r2, #8
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b10:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8010b14:	431a      	orrs	r2, r3
 8010b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b18:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	647b      	str	r3, [r7, #68]	; 0x44
 8010b26:	e025      	b.n	8010b74 <find_volume+0x434>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8010b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d101      	bne.n	8010b36 <find_volume+0x3f6>
 8010b32:	230d      	movs	r3, #13
 8010b34:	e0c8      	b.n	8010cc8 <find_volume+0x588>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8010b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b3e:	441a      	add	r2, r3
 8010b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b42:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010b46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	d104      	bne.n	8010b58 <find_volume+0x418>
 8010b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b50:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	e00c      	b.n	8010b72 <find_volume+0x432>
 8010b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010b5e:	4613      	mov	r3, r2
 8010b60:	005b      	lsls	r3, r3, #1
 8010b62:	4413      	add	r3, r2
 8010b64:	085a      	lsrs	r2, r3, #1
 8010b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b68:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b6c:	f003 0301 	and.w	r3, r3, #1
 8010b70:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8010b72:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8010b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8010b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b7c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010b80:	0a5b      	lsrs	r3, r3, #9
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d201      	bcs.n	8010b8a <find_volume+0x44a>
		return FR_NO_FILESYSTEM;
 8010b86:	230d      	movs	r3, #13
 8010b88:	e09e      	b.n	8010cc8 <find_volume+0x588>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8010b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8010b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b96:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8010ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba2:	2280      	movs	r2, #128	; 0x80
 8010ba4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8010ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010bac:	2b03      	cmp	r3, #3
 8010bae:	d177      	bne.n	8010ca0 <find_volume+0x560>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8010bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010bb6:	021b      	lsls	r3, r3, #8
 8010bb8:	b21a      	sxth	r2, r3
 8010bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bbc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010bc0:	b21b      	sxth	r3, r3
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	b21b      	sxth	r3, r3
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	d16a      	bne.n	8010ca0 <find_volume+0x560>
		&& move_window(fs, bsect + 1) == FR_OK)
 8010bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bcc:	3301      	adds	r3, #1
 8010bce:	4619      	mov	r1, r3
 8010bd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010bd2:	f7fe fd3a 	bl	800f64a <move_window>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d161      	bne.n	8010ca0 <find_volume+0x560>
	{
		fs->fsi_flag = 0;
 8010bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bde:	2200      	movs	r2, #0
 8010be0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8010bea:	021b      	lsls	r3, r3, #8
 8010bec:	b21a      	sxth	r2, r3
 8010bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8010bf4:	b21b      	sxth	r3, r3
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	b21b      	sxth	r3, r3
 8010bfa:	4a35      	ldr	r2, [pc, #212]	; (8010cd0 <find_volume+0x590>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d14f      	bne.n	8010ca0 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8010c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c02:	78db      	ldrb	r3, [r3, #3]
 8010c04:	061a      	lsls	r2, r3, #24
 8010c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c08:	789b      	ldrb	r3, [r3, #2]
 8010c0a:	041b      	lsls	r3, r3, #16
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c10:	7852      	ldrb	r2, [r2, #1]
 8010c12:	0212      	lsls	r2, r2, #8
 8010c14:	4313      	orrs	r3, r2
 8010c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c18:	7812      	ldrb	r2, [r2, #0]
 8010c1a:	4313      	orrs	r3, r2
 8010c1c:	4a2d      	ldr	r2, [pc, #180]	; (8010cd4 <find_volume+0x594>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d13e      	bne.n	8010ca0 <find_volume+0x560>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8010c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c24:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8010c28:	061a      	lsls	r2, r3, #24
 8010c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c2c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8010c30:	041b      	lsls	r3, r3, #16
 8010c32:	4313      	orrs	r3, r2
 8010c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c36:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8010c3a:	0212      	lsls	r2, r2, #8
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c40:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8010c44:	4313      	orrs	r3, r2
 8010c46:	4a24      	ldr	r2, [pc, #144]	; (8010cd8 <find_volume+0x598>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d129      	bne.n	8010ca0 <find_volume+0x560>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8010c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8010c52:	061a      	lsls	r2, r3, #24
 8010c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c56:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8010c5a:	041b      	lsls	r3, r3, #16
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c60:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8010c64:	0212      	lsls	r2, r2, #8
 8010c66:	4313      	orrs	r3, r2
 8010c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c6a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8010c6e:	431a      	orrs	r2, r3
 8010c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8010c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c78:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8010c7c:	061a      	lsls	r2, r3, #24
 8010c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c80:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8010c84:	041b      	lsls	r3, r3, #16
 8010c86:	4313      	orrs	r3, r2
 8010c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c8a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8010c8e:	0212      	lsls	r2, r2, #8
 8010c90:	4313      	orrs	r3, r2
 8010c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c94:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8010c98:	431a      	orrs	r2, r3
 8010c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010ca6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8010caa:	4b0c      	ldr	r3, [pc, #48]	; (8010cdc <find_volume+0x59c>)
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	b29a      	uxth	r2, r3
 8010cb2:	4b0a      	ldr	r3, [pc, #40]	; (8010cdc <find_volume+0x59c>)
 8010cb4:	801a      	strh	r2, [r3, #0]
 8010cb6:	4b09      	ldr	r3, [pc, #36]	; (8010cdc <find_volume+0x59c>)
 8010cb8:	881a      	ldrh	r2, [r3, #0]
 8010cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8010cc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010cc2:	f7fe fc4f 	bl	800f564 <clear_lock>
#endif

	return FR_OK;
 8010cc6:	2300      	movs	r3, #0
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3758      	adds	r7, #88	; 0x58
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	ffffaa55 	.word	0xffffaa55
 8010cd4:	41615252 	.word	0x41615252
 8010cd8:	61417272 	.word	0x61417272
 8010cdc:	20001c9c 	.word	0x20001c9c

08010ce0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d022      	beq.n	8010d38 <validate+0x58>
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01d      	beq.n	8010d38 <validate+0x58>
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d02:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d016      	beq.n	8010d38 <validate+0x58>
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d10:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d10c      	bne.n	8010d38 <validate+0x58>
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d24:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7fe f94d 	bl	800efc8 <disk_status>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	f003 0301 	and.w	r3, r3, #1
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d001      	beq.n	8010d3c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8010d38:	2309      	movs	r3, #9
 8010d3a:	e00b      	b.n	8010d54 <validate+0x74>

	ENTER_FF(fil->fs);		/* Lock file system */
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fe fa56 	bl	800f1f4 <lock_fs>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d101      	bne.n	8010d52 <validate+0x72>
 8010d4e:	230f      	movs	r3, #15
 8010d50:	e000      	b.n	8010d54 <validate+0x74>

	return FR_OK;
 8010d52:	2300      	movs	r3, #0
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3710      	adds	r7, #16
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010d68:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010d6c:	6018      	str	r0, [r3, #0]
 8010d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010d72:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010d76:	6019      	str	r1, [r3, #0]
 8010d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010d7c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010d80:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8010d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010d86:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <f_open+0x38>
 8010d90:	2309      	movs	r3, #9
 8010d92:	e263      	b.n	801125c <f_open+0x500>
	fp->fs = 0;			/* Clear file object */
 8010d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010d98:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	2200      	movs	r2, #0
 8010da0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8010da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010da8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010dac:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8010db0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010db4:	7812      	ldrb	r2, [r2, #0]
 8010db6:	f002 021f 	and.w	r2, r2, #31
 8010dba:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8010dbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010dc0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010dc4:	781b      	ldrb	r3, [r3, #0]
 8010dc6:	f023 0301 	bic.w	r3, r3, #1
 8010dca:	b2da      	uxtb	r2, r3
 8010dcc:	f107 0108 	add.w	r1, r7, #8
 8010dd0:	f107 0320 	add.w	r3, r7, #32
 8010dd4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff fcb1 	bl	8010740 <find_volume>
 8010dde:	4603      	mov	r3, r0
 8010de0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8010de4:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f040 8229 	bne.w	8011240 <f_open+0x4e4>
		INIT_BUF(dj);
 8010dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010df2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010df6:	f107 0214 	add.w	r2, r7, #20
 8010dfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8010dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010e02:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8010e06:	681a      	ldr	r2, [r3, #0]
 8010e08:	f107 0320 	add.w	r3, r7, #32
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7ff fb7a 	bl	8010508 <follow_path>
 8010e14:	4603      	mov	r3, r0
 8010e16:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8010e1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010e1e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010e22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e26:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010e2a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d11d      	bne.n	8010e6e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8010e32:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d103      	bne.n	8010e42 <f_open+0xe6>
				res = FR_INVALID_NAME;
 8010e3a:	2306      	movs	r3, #6
 8010e3c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8010e40:	e015      	b.n	8010e6e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010e46:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010e4a:	781b      	ldrb	r3, [r3, #0]
 8010e4c:	f023 0301 	bic.w	r3, r3, #1
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	bf14      	ite	ne
 8010e54:	2301      	movne	r3, #1
 8010e56:	2300      	moveq	r3, #0
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	f107 0320 	add.w	r3, r7, #32
 8010e60:	4611      	mov	r1, r2
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fe f9f4 	bl	800f250 <chk_lock>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010e6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010e72:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	f003 031c 	and.w	r3, r3, #28
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f000 80e6 	beq.w	801104e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8010e82:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d027      	beq.n	8010eda <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8010e8a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010e8e:	2b04      	cmp	r3, #4
 8010e90:	d10e      	bne.n	8010eb0 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010e92:	f7fe fa49 	bl	800f328 <enq_lock>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d006      	beq.n	8010eaa <f_open+0x14e>
 8010e9c:	f107 0320 	add.w	r3, r7, #32
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7ff fa38 	bl	8010316 <dir_register>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	e000      	b.n	8010eac <f_open+0x150>
 8010eaa:	2312      	movs	r3, #18
 8010eac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010eb4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010eb8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8010ebc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010ec0:	7812      	ldrb	r2, [r2, #0]
 8010ec2:	f042 0208 	orr.w	r2, r2, #8
 8010ec6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8010ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010ecc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010ed0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ed4:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8010ed8:	e017      	b.n	8010f0a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010eda:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010ede:	330b      	adds	r3, #11
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	f003 0311 	and.w	r3, r3, #17
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d003      	beq.n	8010ef2 <f_open+0x196>
					res = FR_DENIED;
 8010eea:	2307      	movs	r3, #7
 8010eec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8010ef0:	e00b      	b.n	8010f0a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8010ef2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010ef6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	f003 0304 	and.w	r3, r3, #4
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <f_open+0x1ae>
						res = FR_EXIST;
 8010f04:	2308      	movs	r3, #8
 8010f06:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010f0a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	f040 80c1 	bne.w	8011096 <f_open+0x33a>
 8010f14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010f18:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	f003 0308 	and.w	r3, r3, #8
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f000 80b7 	beq.w	8011096 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8010f28:	f7fc fcec 	bl	800d904 <get_fattime>
 8010f2c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8010f30:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f34:	330e      	adds	r3, #14
 8010f36:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8010f3a:	b2d2      	uxtb	r2, r2
 8010f3c:	701a      	strb	r2, [r3, #0]
 8010f3e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	0a1b      	lsrs	r3, r3, #8
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f4c:	330f      	adds	r3, #15
 8010f4e:	b2d2      	uxtb	r2, r2
 8010f50:	701a      	strb	r2, [r3, #0]
 8010f52:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8010f56:	0c1a      	lsrs	r2, r3, #16
 8010f58:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f5c:	3310      	adds	r3, #16
 8010f5e:	b2d2      	uxtb	r2, r2
 8010f60:	701a      	strb	r2, [r3, #0]
 8010f62:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8010f66:	0e1a      	lsrs	r2, r3, #24
 8010f68:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f6c:	3311      	adds	r3, #17
 8010f6e:	b2d2      	uxtb	r2, r2
 8010f70:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8010f72:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f76:	330b      	adds	r3, #11
 8010f78:	2200      	movs	r2, #0
 8010f7a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8010f7c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f80:	331c      	adds	r3, #28
 8010f82:	2200      	movs	r2, #0
 8010f84:	701a      	strb	r2, [r3, #0]
 8010f86:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f8a:	331d      	adds	r3, #29
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	701a      	strb	r2, [r3, #0]
 8010f90:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f94:	331e      	adds	r3, #30
 8010f96:	2200      	movs	r2, #0
 8010f98:	701a      	strb	r2, [r3, #0]
 8010f9a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010f9e:	331f      	adds	r3, #31
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8010fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010fa8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010fb0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f7ff f90c 	bl	80101d2 <ld_clust>
 8010fba:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8010fbe:	2100      	movs	r1, #0
 8010fc0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8010fc4:	f7ff f932 	bl	801022c <st_clust>
				dj.fs->wflag = 1;
 8010fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010fcc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010fd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8010fda:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d059      	beq.n	8011096 <f_open+0x33a>
					dw = dj.fs->winsect;
 8010fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010fe6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010fea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010fee:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8010ff2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8010ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010ffa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010ffe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011002:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8011006:	4618      	mov	r0, r3
 8011008:	f7fe fde3 	bl	800fbd2 <remove_chain>
 801100c:	4603      	mov	r3, r0
 801100e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8011012:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011016:	2b00      	cmp	r3, #0
 8011018:	d13d      	bne.n	8011096 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801101a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801101e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011022:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011026:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801102a:	3a01      	subs	r2, #1
 801102c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
						res = move_window(dj.fs, dw);
 8011030:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011034:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011038:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801103c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8011040:	4618      	mov	r0, r3
 8011042:	f7fe fb02 	bl	800f64a <move_window>
 8011046:	4603      	mov	r3, r0
 8011048:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801104c:	e023      	b.n	8011096 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 801104e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011052:	2b00      	cmp	r3, #0
 8011054:	d11f      	bne.n	8011096 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8011056:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801105a:	330b      	adds	r3, #11
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	f003 0310 	and.w	r3, r3, #16
 8011062:	2b00      	cmp	r3, #0
 8011064:	d003      	beq.n	801106e <f_open+0x312>
					res = FR_NO_FILE;
 8011066:	2304      	movs	r3, #4
 8011068:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801106c:	e013      	b.n	8011096 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801106e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011072:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	f003 0302 	and.w	r3, r3, #2
 801107c:	2b00      	cmp	r3, #0
 801107e:	d00a      	beq.n	8011096 <f_open+0x33a>
 8011080:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011084:	330b      	adds	r3, #11
 8011086:	781b      	ldrb	r3, [r3, #0]
 8011088:	f003 0301 	and.w	r3, r3, #1
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <f_open+0x33a>
						res = FR_DENIED;
 8011090:	2307      	movs	r3, #7
 8011092:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8011096:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801109a:	2b00      	cmp	r3, #0
 801109c:	d153      	bne.n	8011146 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801109e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80110a2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	f003 0308 	and.w	r3, r3, #8
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d00b      	beq.n	80110c8 <f_open+0x36c>
				mode |= FA__WRITTEN;
 80110b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80110b4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80110b8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80110bc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80110c0:	7812      	ldrb	r2, [r2, #0]
 80110c2:	f042 0220 	orr.w	r2, r2, #32
 80110c6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80110c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80110cc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80110d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80110d4:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80110d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80110dc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80110e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80110ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80110f4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80110fc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	f023 0301 	bic.w	r3, r3, #1
 8011106:	2b00      	cmp	r3, #0
 8011108:	bf14      	ite	ne
 801110a:	2301      	movne	r3, #1
 801110c:	2300      	moveq	r3, #0
 801110e:	b2db      	uxtb	r3, r3
 8011110:	461a      	mov	r2, r3
 8011112:	f107 0320 	add.w	r3, r7, #32
 8011116:	4611      	mov	r1, r2
 8011118:	4618      	mov	r0, r3
 801111a:	f7fe f929 	bl	800f370 <inc_lock>
 801111e:	4602      	mov	r2, r0
 8011120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011124:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 801112e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011132:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801113c:	2b00      	cmp	r3, #0
 801113e:	d102      	bne.n	8011146 <f_open+0x3ea>
 8011140:	2302      	movs	r3, #2
 8011142:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8011146:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801114a:	2b00      	cmp	r3, #0
 801114c:	d178      	bne.n	8011240 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 801114e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011152:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801115c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011160:	7812      	ldrb	r2, [r2, #0]
 8011162:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8011166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801116a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2200      	movs	r2, #0
 8011172:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8011176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801117a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801117e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011182:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011186:	4618      	mov	r0, r3
 8011188:	f7ff f823 	bl	80101d2 <ld_clust>
 801118c:	4602      	mov	r2, r0
 801118e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011192:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 801119c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80111a0:	331f      	adds	r3, #31
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	061a      	lsls	r2, r3, #24
 80111a6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80111aa:	331e      	adds	r3, #30
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	041b      	lsls	r3, r3, #16
 80111b0:	4313      	orrs	r3, r2
 80111b2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80111b6:	321d      	adds	r2, #29
 80111b8:	7812      	ldrb	r2, [r2, #0]
 80111ba:	0212      	lsls	r2, r2, #8
 80111bc:	4313      	orrs	r3, r2
 80111be:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80111c2:	321c      	adds	r2, #28
 80111c4:	7812      	ldrb	r2, [r2, #0]
 80111c6:	431a      	orrs	r2, r3
 80111c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80111cc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 80111d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80111da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2200      	movs	r2, #0
 80111e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 80111e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80111ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2200      	movs	r2, #0
 80111f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80111f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80111fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2200      	movs	r2, #0
 8011202:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8011206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801120a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801120e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011212:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011216:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8011220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011224:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801122e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011236:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8011240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011244:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011248:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801124c:	f897 224f 	ldrb.w	r2, [r7, #591]	; 0x24f
 8011250:	4611      	mov	r1, r2
 8011252:	4618      	mov	r0, r3
 8011254:	f7fd ffdd 	bl	800f212 <unlock_fs>
 8011258:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 801125c:	4618      	mov	r0, r3
 801125e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011266:	b580      	push	{r7, lr}
 8011268:	b08a      	sub	sp, #40	; 0x28
 801126a:	af00      	add	r7, sp, #0
 801126c:	60f8      	str	r0, [r7, #12]
 801126e:	60b9      	str	r1, [r7, #8]
 8011270:	607a      	str	r2, [r7, #4]
 8011272:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	2200      	movs	r2, #0
 801127c:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7ff fd2e 	bl	8010ce0 <validate>
 8011284:	4603      	mov	r3, r0
 8011286:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8011288:	7dfb      	ldrb	r3, [r7, #23]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d009      	beq.n	80112a2 <f_write+0x3c>
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011294:	7dfa      	ldrb	r2, [r7, #23]
 8011296:	4611      	mov	r1, r2
 8011298:	4618      	mov	r0, r3
 801129a:	f7fd ffba 	bl	800f212 <unlock_fs>
 801129e:	7dfb      	ldrb	r3, [r7, #23]
 80112a0:	e1d4      	b.n	801164c <f_write+0x3e6>
	if (fp->err)							/* Check error */
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00d      	beq.n	80112c8 <f_write+0x62>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80112b8:	4619      	mov	r1, r3
 80112ba:	4610      	mov	r0, r2
 80112bc:	f7fd ffa9 	bl	800f212 <unlock_fs>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80112c6:	e1c1      	b.n	801164c <f_write+0x3e6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80112ce:	f003 0302 	and.w	r3, r3, #2
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d108      	bne.n	80112e8 <f_write+0x82>
		LEAVE_FF(fp->fs, FR_DENIED);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80112dc:	2107      	movs	r1, #7
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fd ff97 	bl	800f212 <unlock_fs>
 80112e4:	2307      	movs	r3, #7
 80112e6:	e1b1      	b.n	801164c <f_write+0x3e6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	441a      	add	r2, r3
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80112f8:	429a      	cmp	r2, r3
 80112fa:	f080 8182 	bcs.w	8011602 <f_write+0x39c>
 80112fe:	2300      	movs	r3, #0
 8011300:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8011302:	e17e      	b.n	8011602 <f_write+0x39c>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801130a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801130e:	2b00      	cmp	r3, #0
 8011310:	f040 813e 	bne.w	8011590 <f_write+0x32a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801131a:	0a5b      	lsrs	r3, r3, #9
 801131c:	b2da      	uxtb	r2, r3
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011324:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011328:	3b01      	subs	r3, #1
 801132a:	b2db      	uxtb	r3, r3
 801132c:	4013      	ands	r3, r2
 801132e:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8011330:	7dbb      	ldrb	r3, [r7, #22]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d15f      	bne.n	80113f6 <f_write+0x190>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801133c:	2b00      	cmp	r3, #0
 801133e:	d10f      	bne.n	8011360 <f_write+0xfa>
					clst = fp->sclust;		/* Follow from the origin */
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011346:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8011348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134a:	2b00      	cmp	r3, #0
 801134c:	d121      	bne.n	8011392 <f_write+0x12c>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011354:	2100      	movs	r1, #0
 8011356:	4618      	mov	r0, r3
 8011358:	f7fe fc95 	bl	800fc86 <create_chain>
 801135c:	6278      	str	r0, [r7, #36]	; 0x24
 801135e:	e018      	b.n	8011392 <f_write+0x12c>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8011366:	2b00      	cmp	r3, #0
 8011368:	d008      	beq.n	801137c <f_write+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011370:	4619      	mov	r1, r3
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f7fe fd24 	bl	800fdc0 <clmt_clust>
 8011378:	6278      	str	r0, [r7, #36]	; 0x24
 801137a:	e00a      	b.n	8011392 <f_write+0x12c>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011388:	4619      	mov	r1, r3
 801138a:	4610      	mov	r0, r2
 801138c:	f7fe fc7b 	bl	800fc86 <create_chain>
 8011390:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011394:	2b00      	cmp	r3, #0
 8011396:	f000 8139 	beq.w	801160c <f_write+0x3a6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139c:	2b01      	cmp	r3, #1
 801139e:	d10c      	bne.n	80113ba <f_write+0x154>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2202      	movs	r2, #2
 80113a4:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113ae:	2102      	movs	r1, #2
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fd ff2e 	bl	800f212 <unlock_fs>
 80113b6:	2302      	movs	r3, #2
 80113b8:	e148      	b.n	801164c <f_write+0x3e6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80113ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c0:	d10c      	bne.n	80113dc <f_write+0x176>
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2201      	movs	r2, #1
 80113c6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113d0:	2101      	movs	r1, #1
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fd ff1d 	bl	800f212 <unlock_fs>
 80113d8:	2301      	movs	r3, #1
 80113da:	e137      	b.n	801164c <f_write+0x3e6>
				fp->clust = clst;			/* Update current cluster */
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d103      	bne.n	80113f6 <f_write+0x190>
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80113fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011400:	2b00      	cmp	r3, #0
 8011402:	d024      	beq.n	801144e <f_write+0x1e8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801140a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801140e:	68f9      	ldr	r1, [r7, #12]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011416:	2301      	movs	r3, #1
 8011418:	f7fd fe36 	bl	800f088 <disk_write>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d00c      	beq.n	801143c <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2201      	movs	r2, #1
 8011426:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011430:	2101      	movs	r1, #1
 8011432:	4618      	mov	r0, r3
 8011434:	f7fd feed 	bl	800f212 <unlock_fs>
 8011438:	2301      	movs	r3, #1
 801143a:	e107      	b.n	801164c <f_write+0x3e6>
				fp->flag &= ~FA__DIRTY;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011446:	b2da      	uxtb	r2, r3
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801145a:	4619      	mov	r1, r3
 801145c:	4610      	mov	r0, r2
 801145e:	f7fe f9cf 	bl	800f800 <clust2sect>
 8011462:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d10c      	bne.n	8011484 <f_write+0x21e>
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2202      	movs	r2, #2
 801146e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011478:	2102      	movs	r1, #2
 801147a:	4618      	mov	r0, r3
 801147c:	f7fd fec9 	bl	800f212 <unlock_fs>
 8011480:	2302      	movs	r3, #2
 8011482:	e0e3      	b.n	801164c <f_write+0x3e6>
			sect += csect;
 8011484:	7dbb      	ldrb	r3, [r7, #22]
 8011486:	693a      	ldr	r2, [r7, #16]
 8011488:	4413      	add	r3, r2
 801148a:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	0a5b      	lsrs	r3, r3, #9
 8011490:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d04f      	beq.n	8011538 <f_write+0x2d2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8011498:	7dba      	ldrb	r2, [r7, #22]
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	4413      	add	r3, r2
 801149e:	68fa      	ldr	r2, [r7, #12]
 80114a0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80114a4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d908      	bls.n	80114be <f_write+0x258>
					cc = fp->fs->csize - csect;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114b2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80114b6:	461a      	mov	r2, r3
 80114b8:	7dbb      	ldrb	r3, [r7, #22]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114c4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	693a      	ldr	r2, [r7, #16]
 80114cc:	69b9      	ldr	r1, [r7, #24]
 80114ce:	f7fd fddb 	bl	800f088 <disk_write>
 80114d2:	4603      	mov	r3, r0
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00c      	beq.n	80114f2 <f_write+0x28c>
					ABORT(fp->fs, FR_DISK_ERR);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2201      	movs	r2, #1
 80114dc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114e6:	2101      	movs	r1, #1
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7fd fe92 	bl	800f212 <unlock_fs>
 80114ee:	2301      	movs	r3, #1
 80114f0:	e0ac      	b.n	801164c <f_write+0x3e6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	69fa      	ldr	r2, [r7, #28]
 80114fe:	429a      	cmp	r2, r3
 8011500:	d916      	bls.n	8011530 <f_write+0x2ca>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8011502:	68f8      	ldr	r0, [r7, #12]
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	025b      	lsls	r3, r3, #9
 8011510:	69ba      	ldr	r2, [r7, #24]
 8011512:	4413      	add	r3, r2
 8011514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011518:	4619      	mov	r1, r3
 801151a:	f7fd fdf3 	bl	800f104 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011528:	b2da      	uxtb	r2, r3
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	025b      	lsls	r3, r3, #9
 8011534:	623b      	str	r3, [r7, #32]
				continue;
 8011536:	e04e      	b.n	80115d6 <f_write+0x370>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801153e:	693a      	ldr	r2, [r7, #16]
 8011540:	429a      	cmp	r2, r3
 8011542:	d021      	beq.n	8011588 <f_write+0x322>
				if (fp->fptr < fp->fsize &&
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011550:	429a      	cmp	r2, r3
 8011552:	d219      	bcs.n	8011588 <f_write+0x322>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801155a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801155e:	68f9      	ldr	r1, [r7, #12]
 8011560:	2301      	movs	r3, #1
 8011562:	693a      	ldr	r2, [r7, #16]
 8011564:	f7fd fd70 	bl	800f048 <disk_read>
 8011568:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00c      	beq.n	8011588 <f_write+0x322>
						ABORT(fp->fs, FR_DISK_ERR);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2201      	movs	r2, #1
 8011572:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801157c:	2101      	movs	r1, #1
 801157e:	4618      	mov	r0, r3
 8011580:	f7fd fe47 	bl	800f212 <unlock_fs>
 8011584:	2301      	movs	r3, #1
 8011586:	e061      	b.n	801164c <f_write+0x3e6>
			}
#endif
			fp->dsect = sect;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	693a      	ldr	r2, [r7, #16]
 801158c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801159a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801159e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80115a0:	6a3a      	ldr	r2, [r7, #32]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d901      	bls.n	80115ac <f_write+0x346>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80115b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80115b6:	68fa      	ldr	r2, [r7, #12]
 80115b8:	4413      	add	r3, r2
 80115ba:	6a3a      	ldr	r2, [r7, #32]
 80115bc:	69b9      	ldr	r1, [r7, #24]
 80115be:	4618      	mov	r0, r3
 80115c0:	f7fd fda0 	bl	800f104 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80115ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80115ce:	b2da      	uxtb	r2, r3
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80115d6:	69ba      	ldr	r2, [r7, #24]
 80115d8:	6a3b      	ldr	r3, [r7, #32]
 80115da:	4413      	add	r3, r2
 80115dc:	61bb      	str	r3, [r7, #24]
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80115e4:	6a3b      	ldr	r3, [r7, #32]
 80115e6:	441a      	add	r2, r3
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	681a      	ldr	r2, [r3, #0]
 80115f2:	6a3b      	ldr	r3, [r7, #32]
 80115f4:	441a      	add	r2, r3
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	601a      	str	r2, [r3, #0]
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	6a3b      	ldr	r3, [r7, #32]
 80115fe:	1ad3      	subs	r3, r2, r3
 8011600:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	f47f ae7d 	bne.w	8011304 <f_write+0x9e>
 801160a:	e000      	b.n	801160e <f_write+0x3a8>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801160c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801161a:	429a      	cmp	r2, r3
 801161c:	d905      	bls.n	801162a <f_write+0x3c4>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011630:	f043 0320 	orr.w	r3, r3, #32
 8011634:	b2da      	uxtb	r2, r3
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011642:	2100      	movs	r1, #0
 8011644:	4618      	mov	r0, r3
 8011646:	f7fd fde4 	bl	800f212 <unlock_fs>
 801164a:	2300      	movs	r3, #0
}
 801164c:	4618      	mov	r0, r3
 801164e:	3728      	adds	r7, #40	; 0x28
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b086      	sub	sp, #24
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f7ff fb3f 	bl	8010ce0 <validate>
 8011662:	4603      	mov	r3, r0
 8011664:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011666:	7dfb      	ldrb	r3, [r7, #23]
 8011668:	2b00      	cmp	r3, #0
 801166a:	f040 80af 	bne.w	80117cc <f_sync+0x178>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011674:	f003 0320 	and.w	r3, r3, #32
 8011678:	2b00      	cmp	r3, #0
 801167a:	f000 80a7 	beq.w	80117cc <f_sync+0x178>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8011684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011688:	2b00      	cmp	r3, #0
 801168a:	d020      	beq.n	80116ce <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011692:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8011696:	6879      	ldr	r1, [r7, #4]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801169e:	2301      	movs	r3, #1
 80116a0:	f7fd fcf2 	bl	800f088 <disk_write>
 80116a4:	4603      	mov	r3, r0
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d008      	beq.n	80116bc <f_sync+0x68>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80116b0:	2101      	movs	r1, #1
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7fd fdad 	bl	800f212 <unlock_fs>
 80116b8:	2301      	movs	r3, #1
 80116ba:	e090      	b.n	80117de <f_sync+0x18a>
				fp->flag &= ~FA__DIRTY;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80116c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80116da:	4619      	mov	r1, r3
 80116dc:	4610      	mov	r0, r2
 80116de:	f7fd ffb4 	bl	800f64a <move_window>
 80116e2:	4603      	mov	r3, r0
 80116e4:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80116e6:	7dfb      	ldrb	r3, [r7, #23]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d16f      	bne.n	80117cc <f_sync+0x178>
				dir = fp->dir_ptr;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80116f2:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80116f4:	693b      	ldr	r3, [r7, #16]
 80116f6:	330b      	adds	r3, #11
 80116f8:	781a      	ldrb	r2, [r3, #0]
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	330b      	adds	r3, #11
 80116fe:	f042 0220 	orr.w	r2, r2, #32
 8011702:	b2d2      	uxtb	r2, r2
 8011704:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	331c      	adds	r3, #28
 8011710:	b2d2      	uxtb	r2, r2
 8011712:	701a      	strb	r2, [r3, #0]
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801171a:	b29b      	uxth	r3, r3
 801171c:	0a1b      	lsrs	r3, r3, #8
 801171e:	b29a      	uxth	r2, r3
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	331d      	adds	r3, #29
 8011724:	b2d2      	uxtb	r2, r2
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801172e:	0c1a      	lsrs	r2, r3, #16
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	331e      	adds	r3, #30
 8011734:	b2d2      	uxtb	r2, r2
 8011736:	701a      	strb	r2, [r3, #0]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801173e:	0e1a      	lsrs	r2, r3, #24
 8011740:	693b      	ldr	r3, [r7, #16]
 8011742:	331f      	adds	r3, #31
 8011744:	b2d2      	uxtb	r2, r2
 8011746:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801174e:	4619      	mov	r1, r3
 8011750:	6938      	ldr	r0, [r7, #16]
 8011752:	f7fe fd6b 	bl	801022c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8011756:	f7fc f8d5 	bl	800d904 <get_fattime>
 801175a:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	3316      	adds	r3, #22
 8011760:	68fa      	ldr	r2, [r7, #12]
 8011762:	b2d2      	uxtb	r2, r2
 8011764:	701a      	strb	r2, [r3, #0]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	b29b      	uxth	r3, r3
 801176a:	0a1b      	lsrs	r3, r3, #8
 801176c:	b29a      	uxth	r2, r3
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	3317      	adds	r3, #23
 8011772:	b2d2      	uxtb	r2, r2
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	0c1a      	lsrs	r2, r3, #16
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	3318      	adds	r3, #24
 801177e:	b2d2      	uxtb	r2, r2
 8011780:	701a      	strb	r2, [r3, #0]
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	0e1a      	lsrs	r2, r3, #24
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	3319      	adds	r3, #25
 801178a:	b2d2      	uxtb	r2, r2
 801178c:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	3312      	adds	r3, #18
 8011792:	2200      	movs	r2, #0
 8011794:	701a      	strb	r2, [r3, #0]
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	3313      	adds	r3, #19
 801179a:	2200      	movs	r2, #0
 801179c:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80117a4:	f023 0320 	bic.w	r3, r3, #32
 80117a8:	b2da      	uxtb	r2, r3
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80117b6:	2201      	movs	r2, #1
 80117b8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fd ff6f 	bl	800f6a6 <sync_fs>
 80117c8:	4603      	mov	r3, r0
 80117ca:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80117d2:	7dfa      	ldrb	r2, [r7, #23]
 80117d4:	4611      	mov	r1, r2
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fd fd1b 	bl	800f212 <unlock_fs>
 80117dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3718      	adds	r7, #24
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b084      	sub	sp, #16
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f7ff ff30 	bl	8011654 <f_sync>
 80117f4:	4603      	mov	r3, r0
 80117f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80117f8:	7bfb      	ldrb	r3, [r7, #15]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d11e      	bne.n	801183c <f_close+0x56>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f7ff fa6e 	bl	8010ce0 <validate>
 8011804:	4603      	mov	r3, r0
 8011806:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011808:	7bfb      	ldrb	r3, [r7, #15]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d116      	bne.n	801183c <f_close+0x56>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011814:	60bb      	str	r3, [r7, #8]
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801181c:	4618      	mov	r0, r3
 801181e:	f7fd fe5d 	bl	800f4dc <dec_lock>
 8011822:	4603      	mov	r3, r0
 8011824:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011826:	7bfb      	ldrb	r3, [r7, #15]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d103      	bne.n	8011834 <f_close+0x4e>
#endif
				fp->fs = 0;				/* Invalidate file object */
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	2200      	movs	r2, #0
 8011830:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011834:	2100      	movs	r1, #0
 8011836:	68b8      	ldr	r0, [r7, #8]
 8011838:	f7fd fceb 	bl	800f212 <unlock_fs>
#endif
		}
	}
	return res;
 801183c:	7bfb      	ldrb	r3, [r7, #15]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
	...

08011848 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011848:	b480      	push	{r7}
 801184a:	b087      	sub	sp, #28
 801184c:	af00      	add	r7, sp, #0
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	4613      	mov	r3, r2
 8011854:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011856:	2301      	movs	r3, #1
 8011858:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801185a:	2300      	movs	r3, #0
 801185c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801185e:	4b1e      	ldr	r3, [pc, #120]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 8011860:	7a5b      	ldrb	r3, [r3, #9]
 8011862:	b2db      	uxtb	r3, r3
 8011864:	2b01      	cmp	r3, #1
 8011866:	d831      	bhi.n	80118cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011868:	4b1b      	ldr	r3, [pc, #108]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 801186a:	7a5b      	ldrb	r3, [r3, #9]
 801186c:	b2db      	uxtb	r3, r3
 801186e:	461a      	mov	r2, r3
 8011870:	4b19      	ldr	r3, [pc, #100]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 8011872:	2100      	movs	r1, #0
 8011874:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8011876:	4b18      	ldr	r3, [pc, #96]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 8011878:	7a5b      	ldrb	r3, [r3, #9]
 801187a:	b2db      	uxtb	r3, r3
 801187c:	4a16      	ldr	r2, [pc, #88]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 801187e:	009b      	lsls	r3, r3, #2
 8011880:	4413      	add	r3, r2
 8011882:	68fa      	ldr	r2, [r7, #12]
 8011884:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8011886:	4b14      	ldr	r3, [pc, #80]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 8011888:	7a5b      	ldrb	r3, [r3, #9]
 801188a:	b2db      	uxtb	r3, r3
 801188c:	461a      	mov	r2, r3
 801188e:	4b12      	ldr	r3, [pc, #72]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 8011890:	4413      	add	r3, r2
 8011892:	79fa      	ldrb	r2, [r7, #7]
 8011894:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011896:	4b10      	ldr	r3, [pc, #64]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 8011898:	7a5b      	ldrb	r3, [r3, #9]
 801189a:	b2db      	uxtb	r3, r3
 801189c:	1c5a      	adds	r2, r3, #1
 801189e:	b2d1      	uxtb	r1, r2
 80118a0:	4a0d      	ldr	r2, [pc, #52]	; (80118d8 <FATFS_LinkDriverEx+0x90>)
 80118a2:	7251      	strb	r1, [r2, #9]
 80118a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80118a6:	7dbb      	ldrb	r3, [r7, #22]
 80118a8:	3330      	adds	r3, #48	; 0x30
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	68bb      	ldr	r3, [r7, #8]
 80118ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	3301      	adds	r3, #1
 80118b4:	223a      	movs	r2, #58	; 0x3a
 80118b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	3302      	adds	r3, #2
 80118bc:	222f      	movs	r2, #47	; 0x2f
 80118be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118c0:	68bb      	ldr	r3, [r7, #8]
 80118c2:	3303      	adds	r3, #3
 80118c4:	2200      	movs	r2, #0
 80118c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118c8:	2300      	movs	r3, #0
 80118ca:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80118cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	371c      	adds	r7, #28
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bc80      	pop	{r7}
 80118d6:	4770      	bx	lr
 80118d8:	20001cb8 	.word	0x20001cb8

080118dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118e6:	2200      	movs	r2, #0
 80118e8:	6839      	ldr	r1, [r7, #0]
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7ff ffac 	bl	8011848 <FATFS_LinkDriverEx>
 80118f0:	4603      	mov	r3, r0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3708      	adds	r7, #8
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
	...

080118fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b082      	sub	sp, #8
 8011900:	af00      	add	r7, sp, #0
 8011902:	4603      	mov	r3, r0
 8011904:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011906:	4b0b      	ldr	r3, [pc, #44]	; (8011934 <SD_initialize+0x38>)
 8011908:	2201      	movs	r2, #1
 801190a:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 801190c:	f7fc f802 	bl	800d914 <BSP_SD_Init>
 8011910:	4603      	mov	r3, r0
 8011912:	2b00      	cmp	r3, #0
 8011914:	d107      	bne.n	8011926 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011916:	4b07      	ldr	r3, [pc, #28]	; (8011934 <SD_initialize+0x38>)
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	b2db      	uxtb	r3, r3
 801191c:	f023 0301 	bic.w	r3, r3, #1
 8011920:	b2da      	uxtb	r2, r3
 8011922:	4b04      	ldr	r3, [pc, #16]	; (8011934 <SD_initialize+0x38>)
 8011924:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011926:	4b03      	ldr	r3, [pc, #12]	; (8011934 <SD_initialize+0x38>)
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	b2db      	uxtb	r3, r3
}
 801192c:	4618      	mov	r0, r3
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}
 8011934:	200000d4 	.word	0x200000d4

08011938 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011942:	4b0b      	ldr	r3, [pc, #44]	; (8011970 <SD_status+0x38>)
 8011944:	2201      	movs	r2, #1
 8011946:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011948:	f7fc f846 	bl	800d9d8 <BSP_SD_GetCardState>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d107      	bne.n	8011962 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011952:	4b07      	ldr	r3, [pc, #28]	; (8011970 <SD_status+0x38>)
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	b2db      	uxtb	r3, r3
 8011958:	f023 0301 	bic.w	r3, r3, #1
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b04      	ldr	r3, [pc, #16]	; (8011970 <SD_status+0x38>)
 8011960:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8011962:	4b03      	ldr	r3, [pc, #12]	; (8011970 <SD_status+0x38>)
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	b2db      	uxtb	r3, r3
}
 8011968:	4618      	mov	r0, r3
 801196a:	3708      	adds	r7, #8
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	200000d4 	.word	0x200000d4

08011974 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b086      	sub	sp, #24
 8011978:	af00      	add	r7, sp, #0
 801197a:	60b9      	str	r1, [r7, #8]
 801197c:	607a      	str	r2, [r7, #4]
 801197e:	603b      	str	r3, [r7, #0]
 8011980:	4603      	mov	r3, r0
 8011982:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011984:	2301      	movs	r3, #1
 8011986:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8011988:	4b0f      	ldr	r3, [pc, #60]	; (80119c8 <SD_read+0x54>)
 801198a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 801198c:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <SD_read+0x58>)
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	6879      	ldr	r1, [r7, #4]
 8011992:	68b8      	ldr	r0, [r7, #8]
 8011994:	f7fb ffe4 	bl	800d960 <BSP_SD_ReadBlocks>
 8011998:	4603      	mov	r3, r0
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10e      	bne.n	80119bc <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801199e:	e006      	b.n	80119ae <SD_read+0x3a>
    {
      if (timeout-- == 0)
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	1e5a      	subs	r2, r3, #1
 80119a4:	613a      	str	r2, [r7, #16]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d101      	bne.n	80119ae <SD_read+0x3a>
      {
        return RES_ERROR;
 80119aa:	2301      	movs	r3, #1
 80119ac:	e007      	b.n	80119be <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80119ae:	f7fc f813 	bl	800d9d8 <BSP_SD_GetCardState>
 80119b2:	4603      	mov	r3, r0
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1f3      	bne.n	80119a0 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 80119b8:	2300      	movs	r3, #0
 80119ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80119bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3718      	adds	r7, #24
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	000186a0 	.word	0x000186a0
 80119cc:	05f5e100 	.word	0x05f5e100

080119d0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b086      	sub	sp, #24
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	60b9      	str	r1, [r7, #8]
 80119d8:	607a      	str	r2, [r7, #4]
 80119da:	603b      	str	r3, [r7, #0]
 80119dc:	4603      	mov	r3, r0
 80119de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80119e0:	2301      	movs	r3, #1
 80119e2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80119e4:	4b0f      	ldr	r3, [pc, #60]	; (8011a24 <SD_write+0x54>)
 80119e6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80119e8:	4b0f      	ldr	r3, [pc, #60]	; (8011a28 <SD_write+0x58>)
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	6879      	ldr	r1, [r7, #4]
 80119ee:	68b8      	ldr	r0, [r7, #8]
 80119f0:	f7fb ffd4 	bl	800d99c <BSP_SD_WriteBlocks>
 80119f4:	4603      	mov	r3, r0
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d10e      	bne.n	8011a18 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80119fa:	e006      	b.n	8011a0a <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	1e5a      	subs	r2, r3, #1
 8011a00:	613a      	str	r2, [r7, #16]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d101      	bne.n	8011a0a <SD_write+0x3a>
      {
        return RES_ERROR;
 8011a06:	2301      	movs	r3, #1
 8011a08:	e007      	b.n	8011a1a <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011a0a:	f7fb ffe5 	bl	800d9d8 <BSP_SD_GetCardState>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d1f3      	bne.n	80119fc <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8011a14:	2300      	movs	r3, #0
 8011a16:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8011a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3718      	adds	r7, #24
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	000186a0 	.word	0x000186a0
 8011a28:	05f5e100 	.word	0x05f5e100

08011a2c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b08c      	sub	sp, #48	; 0x30
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	4603      	mov	r3, r0
 8011a34:	603a      	str	r2, [r7, #0]
 8011a36:	71fb      	strb	r3, [r7, #7]
 8011a38:	460b      	mov	r3, r1
 8011a3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011a42:	4b24      	ldr	r3, [pc, #144]	; (8011ad4 <SD_ioctl+0xa8>)
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	f003 0301 	and.w	r3, r3, #1
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d001      	beq.n	8011a54 <SD_ioctl+0x28>
 8011a50:	2303      	movs	r3, #3
 8011a52:	e03b      	b.n	8011acc <SD_ioctl+0xa0>
  
  switch (cmd)
 8011a54:	79bb      	ldrb	r3, [r7, #6]
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d833      	bhi.n	8011ac2 <SD_ioctl+0x96>
 8011a5a:	a201      	add	r2, pc, #4	; (adr r2, 8011a60 <SD_ioctl+0x34>)
 8011a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a60:	08011a71 	.word	0x08011a71
 8011a64:	08011a79 	.word	0x08011a79
 8011a68:	08011a91 	.word	0x08011a91
 8011a6c:	08011aab 	.word	0x08011aab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a76:	e027      	b.n	8011ac8 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a78:	f107 030c 	add.w	r3, r7, #12
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fb ffbb 	bl	800d9f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a8e:	e01b      	b.n	8011ac8 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a90:	f107 030c 	add.w	r3, r7, #12
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fb ffaf 	bl	800d9f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011aa8:	e00e      	b.n	8011ac8 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011aaa:	f107 030c 	add.w	r3, r7, #12
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fb ffa2 	bl	800d9f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8011ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011aba:	2300      	movs	r3, #0
 8011abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011ac0:	e002      	b.n	8011ac8 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8011ac2:	2304      	movs	r3, #4
 8011ac4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8011ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3730      	adds	r7, #48	; 0x30
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	200000d4 	.word	0x200000d4

08011ad8 <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b084      	sub	sp, #16
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011ae4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 f827 	bl	8011b3c <osSemaphoreWait>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d101      	bne.n	8011af8 <ff_req_grant+0x20>
  {
    ret = 1;
 8011af4:	2301      	movs	r3, #1
 8011af6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8011af8:	68fb      	ldr	r3, [r7, #12]
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3710      	adds	r7, #16
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b082      	sub	sp, #8
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f000 f864 	bl	8011bd8 <osSemaphoreRelease>
}
 8011b10:	bf00      	nop
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}

08011b18 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b083      	sub	sp, #12
 8011b1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b1e:	f3ef 8305 	mrs	r3, IPSR
 8011b22:	607b      	str	r3, [r7, #4]
  return(result);
 8011b24:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	bf14      	ite	ne
 8011b2a:	2301      	movne	r3, #1
 8011b2c:	2300      	moveq	r3, #0
 8011b2e:	b2db      	uxtb	r3, r3
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bc80      	pop	{r7}
 8011b38:	4770      	bx	lr
	...

08011b3c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b084      	sub	sp, #16
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011b46:	2300      	movs	r3, #0
 8011b48:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d101      	bne.n	8011b54 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011b50:	2380      	movs	r3, #128	; 0x80
 8011b52:	e03a      	b.n	8011bca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011b54:	2300      	movs	r3, #0
 8011b56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b5e:	d103      	bne.n	8011b68 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011b60:	f04f 33ff 	mov.w	r3, #4294967295
 8011b64:	60fb      	str	r3, [r7, #12]
 8011b66:	e009      	b.n	8011b7c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d006      	beq.n	8011b7c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d101      	bne.n	8011b7c <osSemaphoreWait+0x40>
      ticks = 1;
 8011b78:	2301      	movs	r3, #1
 8011b7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011b7c:	f7ff ffcc 	bl	8011b18 <inHandlerMode>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d017      	beq.n	8011bb6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011b86:	f107 0308 	add.w	r3, r7, #8
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f000 fb74 	bl	801227c <xQueueReceiveFromISR>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d001      	beq.n	8011b9e <osSemaphoreWait+0x62>
      return osErrorOS;
 8011b9a:	23ff      	movs	r3, #255	; 0xff
 8011b9c:	e015      	b.n	8011bca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d011      	beq.n	8011bc8 <osSemaphoreWait+0x8c>
 8011ba4:	4b0b      	ldr	r3, [pc, #44]	; (8011bd4 <osSemaphoreWait+0x98>)
 8011ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011baa:	601a      	str	r2, [r3, #0]
 8011bac:	f3bf 8f4f 	dsb	sy
 8011bb0:	f3bf 8f6f 	isb	sy
 8011bb4:	e008      	b.n	8011bc8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011bb6:	68f9      	ldr	r1, [r7, #12]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f000 fa53 	bl	8012064 <xQueueSemaphoreTake>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d001      	beq.n	8011bc8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011bc4:	23ff      	movs	r3, #255	; 0xff
 8011bc6:	e000      	b.n	8011bca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3710      	adds	r7, #16
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	e000ed04 	.word	0xe000ed04

08011bd8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011be0:	2300      	movs	r3, #0
 8011be2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011be4:	2300      	movs	r3, #0
 8011be6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011be8:	f7ff ff96 	bl	8011b18 <inHandlerMode>
 8011bec:	4603      	mov	r3, r0
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d016      	beq.n	8011c20 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011bf2:	f107 0308 	add.w	r3, r7, #8
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f000 f9a5 	bl	8011f48 <xQueueGiveFromISR>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	2b01      	cmp	r3, #1
 8011c02:	d001      	beq.n	8011c08 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011c04:	23ff      	movs	r3, #255	; 0xff
 8011c06:	e017      	b.n	8011c38 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d013      	beq.n	8011c36 <osSemaphoreRelease+0x5e>
 8011c0e:	4b0c      	ldr	r3, [pc, #48]	; (8011c40 <osSemaphoreRelease+0x68>)
 8011c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c14:	601a      	str	r2, [r3, #0]
 8011c16:	f3bf 8f4f 	dsb	sy
 8011c1a:	f3bf 8f6f 	isb	sy
 8011c1e:	e00a      	b.n	8011c36 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011c20:	2300      	movs	r3, #0
 8011c22:	2200      	movs	r2, #0
 8011c24:	2100      	movs	r1, #0
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f000 f890 	bl	8011d4c <xQueueGenericSend>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b01      	cmp	r3, #1
 8011c30:	d001      	beq.n	8011c36 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011c32:	23ff      	movs	r3, #255	; 0xff
 8011c34:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011c36:	68fb      	ldr	r3, [r7, #12]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}
 8011c40:	e000ed04 	.word	0xe000ed04

08011c44 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011c44:	b480      	push	{r7}
 8011c46:	b085      	sub	sp, #20
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	68fa      	ldr	r2, [r7, #12]
 8011c58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	689a      	ldr	r2, [r3, #8]
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	689b      	ldr	r3, [r3, #8]
 8011c66:	683a      	ldr	r2, [r7, #0]
 8011c68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	683a      	ldr	r2, [r7, #0]
 8011c6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	601a      	str	r2, [r3, #0]
}
 8011c80:	bf00      	nop
 8011c82:	3714      	adds	r7, #20
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bc80      	pop	{r7}
 8011c88:	4770      	bx	lr

08011c8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011c8a:	b480      	push	{r7}
 8011c8c:	b085      	sub	sp, #20
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
 8011c92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca0:	d103      	bne.n	8011caa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	691b      	ldr	r3, [r3, #16]
 8011ca6:	60fb      	str	r3, [r7, #12]
 8011ca8:	e00c      	b.n	8011cc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	3308      	adds	r3, #8
 8011cae:	60fb      	str	r3, [r7, #12]
 8011cb0:	e002      	b.n	8011cb8 <vListInsert+0x2e>
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	60fb      	str	r3, [r7, #12]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d2f6      	bcs.n	8011cb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	685a      	ldr	r2, [r3, #4]
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	683a      	ldr	r2, [r7, #0]
 8011cd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	68fa      	ldr	r2, [r7, #12]
 8011cd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	683a      	ldr	r2, [r7, #0]
 8011cde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	1c5a      	adds	r2, r3, #1
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	601a      	str	r2, [r3, #0]
}
 8011cf0:	bf00      	nop
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bc80      	pop	{r7}
 8011cf8:	4770      	bx	lr

08011cfa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011cfa:	b480      	push	{r7}
 8011cfc:	b085      	sub	sp, #20
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	691b      	ldr	r3, [r3, #16]
 8011d06:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	6892      	ldr	r2, [r2, #8]
 8011d10:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	689b      	ldr	r3, [r3, #8]
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	6852      	ldr	r2, [r2, #4]
 8011d1a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	685b      	ldr	r3, [r3, #4]
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d103      	bne.n	8011d2e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	689a      	ldr	r2, [r3, #8]
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2200      	movs	r2, #0
 8011d32:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	1e5a      	subs	r2, r3, #1
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3714      	adds	r7, #20
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bc80      	pop	{r7}
 8011d4a:	4770      	bx	lr

08011d4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b08e      	sub	sp, #56	; 0x38
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
 8011d58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d10a      	bne.n	8011d7e <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011d7a:	bf00      	nop
 8011d7c:	e7fe      	b.n	8011d7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d103      	bne.n	8011d8c <xQueueGenericSend+0x40>
 8011d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d101      	bne.n	8011d90 <xQueueGenericSend+0x44>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e000      	b.n	8011d92 <xQueueGenericSend+0x46>
 8011d90:	2300      	movs	r3, #0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d10a      	bne.n	8011dac <xQueueGenericSend+0x60>
	__asm volatile
 8011d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d9a:	f383 8811 	msr	BASEPRI, r3
 8011d9e:	f3bf 8f6f 	isb	sy
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011da8:	bf00      	nop
 8011daa:	e7fe      	b.n	8011daa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	d103      	bne.n	8011dba <xQueueGenericSend+0x6e>
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d101      	bne.n	8011dbe <xQueueGenericSend+0x72>
 8011dba:	2301      	movs	r3, #1
 8011dbc:	e000      	b.n	8011dc0 <xQueueGenericSend+0x74>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d10a      	bne.n	8011dda <xQueueGenericSend+0x8e>
	__asm volatile
 8011dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc8:	f383 8811 	msr	BASEPRI, r3
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	f3bf 8f4f 	dsb	sy
 8011dd4:	623b      	str	r3, [r7, #32]
}
 8011dd6:	bf00      	nop
 8011dd8:	e7fe      	b.n	8011dd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011dda:	f000 feef 	bl	8012bbc <xTaskGetSchedulerState>
 8011dde:	4603      	mov	r3, r0
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <xQueueGenericSend+0x9e>
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d101      	bne.n	8011dee <xQueueGenericSend+0xa2>
 8011dea:	2301      	movs	r3, #1
 8011dec:	e000      	b.n	8011df0 <xQueueGenericSend+0xa4>
 8011dee:	2300      	movs	r3, #0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d10a      	bne.n	8011e0a <xQueueGenericSend+0xbe>
	__asm volatile
 8011df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df8:	f383 8811 	msr	BASEPRI, r3
 8011dfc:	f3bf 8f6f 	isb	sy
 8011e00:	f3bf 8f4f 	dsb	sy
 8011e04:	61fb      	str	r3, [r7, #28]
}
 8011e06:	bf00      	nop
 8011e08:	e7fe      	b.n	8011e08 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e0a:	f001 f935 	bl	8013078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d302      	bcc.n	8011e20 <xQueueGenericSend+0xd4>
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	d129      	bne.n	8011e74 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011e20:	683a      	ldr	r2, [r7, #0]
 8011e22:	68b9      	ldr	r1, [r7, #8]
 8011e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e26:	f000 fac0 	bl	80123aa <prvCopyDataToQueue>
 8011e2a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d010      	beq.n	8011e56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e36:	3324      	adds	r3, #36	; 0x24
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f000 fdb5 	bl	80129a8 <xTaskRemoveFromEventList>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d013      	beq.n	8011e6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011e44:	4b3f      	ldr	r3, [pc, #252]	; (8011f44 <xQueueGenericSend+0x1f8>)
 8011e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e4a:	601a      	str	r2, [r3, #0]
 8011e4c:	f3bf 8f4f 	dsb	sy
 8011e50:	f3bf 8f6f 	isb	sy
 8011e54:	e00a      	b.n	8011e6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d007      	beq.n	8011e6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e5c:	4b39      	ldr	r3, [pc, #228]	; (8011f44 <xQueueGenericSend+0x1f8>)
 8011e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e62:	601a      	str	r2, [r3, #0]
 8011e64:	f3bf 8f4f 	dsb	sy
 8011e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e6c:	f001 f934 	bl	80130d8 <vPortExitCritical>
				return pdPASS;
 8011e70:	2301      	movs	r3, #1
 8011e72:	e063      	b.n	8011f3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d103      	bne.n	8011e82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e7a:	f001 f92d 	bl	80130d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e7e:	2300      	movs	r3, #0
 8011e80:	e05c      	b.n	8011f3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d106      	bne.n	8011e96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e88:	f107 0314 	add.w	r3, r7, #20
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f000 fded 	bl	8012a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e92:	2301      	movs	r3, #1
 8011e94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e96:	f001 f91f 	bl	80130d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e9a:	f000 fb97 	bl	80125cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e9e:	f001 f8eb 	bl	8013078 <vPortEnterCritical>
 8011ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ea8:	b25b      	sxtb	r3, r3
 8011eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eae:	d103      	bne.n	8011eb8 <xQueueGenericSend+0x16c>
 8011eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ebe:	b25b      	sxtb	r3, r3
 8011ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ec4:	d103      	bne.n	8011ece <xQueueGenericSend+0x182>
 8011ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec8:	2200      	movs	r2, #0
 8011eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ece:	f001 f903 	bl	80130d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ed2:	1d3a      	adds	r2, r7, #4
 8011ed4:	f107 0314 	add.w	r3, r7, #20
 8011ed8:	4611      	mov	r1, r2
 8011eda:	4618      	mov	r0, r3
 8011edc:	f000 fddc 	bl	8012a98 <xTaskCheckForTimeOut>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d124      	bne.n	8011f30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ee8:	f000 fb57 	bl	801259a <prvIsQueueFull>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d018      	beq.n	8011f24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ef4:	3310      	adds	r3, #16
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	4611      	mov	r1, r2
 8011efa:	4618      	mov	r0, r3
 8011efc:	f000 fd30 	bl	8012960 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f02:	f000 fae2 	bl	80124ca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011f06:	f000 fb6f 	bl	80125e8 <xTaskResumeAll>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	f47f af7c 	bne.w	8011e0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011f12:	4b0c      	ldr	r3, [pc, #48]	; (8011f44 <xQueueGenericSend+0x1f8>)
 8011f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f18:	601a      	str	r2, [r3, #0]
 8011f1a:	f3bf 8f4f 	dsb	sy
 8011f1e:	f3bf 8f6f 	isb	sy
 8011f22:	e772      	b.n	8011e0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f26:	f000 fad0 	bl	80124ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f2a:	f000 fb5d 	bl	80125e8 <xTaskResumeAll>
 8011f2e:	e76c      	b.n	8011e0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f32:	f000 faca 	bl	80124ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f36:	f000 fb57 	bl	80125e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011f3a:	2300      	movs	r3, #0
		}
	}
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3738      	adds	r7, #56	; 0x38
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	e000ed04 	.word	0xe000ed04

08011f48 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b08e      	sub	sp, #56	; 0x38
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10a      	bne.n	8011f72 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f60:	f383 8811 	msr	BASEPRI, r3
 8011f64:	f3bf 8f6f 	isb	sy
 8011f68:	f3bf 8f4f 	dsb	sy
 8011f6c:	623b      	str	r3, [r7, #32]
}
 8011f6e:	bf00      	nop
 8011f70:	e7fe      	b.n	8011f70 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d00a      	beq.n	8011f90 <xQueueGiveFromISR+0x48>
	__asm volatile
 8011f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7e:	f383 8811 	msr	BASEPRI, r3
 8011f82:	f3bf 8f6f 	isb	sy
 8011f86:	f3bf 8f4f 	dsb	sy
 8011f8a:	61fb      	str	r3, [r7, #28]
}
 8011f8c:	bf00      	nop
 8011f8e:	e7fe      	b.n	8011f8e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d103      	bne.n	8011fa0 <xQueueGiveFromISR+0x58>
 8011f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d101      	bne.n	8011fa4 <xQueueGiveFromISR+0x5c>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e000      	b.n	8011fa6 <xQueueGiveFromISR+0x5e>
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d10a      	bne.n	8011fc0 <xQueueGiveFromISR+0x78>
	__asm volatile
 8011faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fae:	f383 8811 	msr	BASEPRI, r3
 8011fb2:	f3bf 8f6f 	isb	sy
 8011fb6:	f3bf 8f4f 	dsb	sy
 8011fba:	61bb      	str	r3, [r7, #24]
}
 8011fbc:	bf00      	nop
 8011fbe:	e7fe      	b.n	8011fbe <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011fc0:	f001 f8fc 	bl	80131bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011fc4:	f3ef 8211 	mrs	r2, BASEPRI
 8011fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fcc:	f383 8811 	msr	BASEPRI, r3
 8011fd0:	f3bf 8f6f 	isb	sy
 8011fd4:	f3bf 8f4f 	dsb	sy
 8011fd8:	617a      	str	r2, [r7, #20]
 8011fda:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011fdc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011fde:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fe4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011fec:	429a      	cmp	r2, r3
 8011fee:	d22b      	bcs.n	8012048 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ffc:	1c5a      	adds	r2, r3, #1
 8011ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012000:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012002:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801200a:	d112      	bne.n	8012032 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012010:	2b00      	cmp	r3, #0
 8012012:	d016      	beq.n	8012042 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012016:	3324      	adds	r3, #36	; 0x24
 8012018:	4618      	mov	r0, r3
 801201a:	f000 fcc5 	bl	80129a8 <xTaskRemoveFromEventList>
 801201e:	4603      	mov	r3, r0
 8012020:	2b00      	cmp	r3, #0
 8012022:	d00e      	beq.n	8012042 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00b      	beq.n	8012042 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	2201      	movs	r2, #1
 801202e:	601a      	str	r2, [r3, #0]
 8012030:	e007      	b.n	8012042 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012036:	3301      	adds	r3, #1
 8012038:	b2db      	uxtb	r3, r3
 801203a:	b25a      	sxtb	r2, r3
 801203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012042:	2301      	movs	r3, #1
 8012044:	637b      	str	r3, [r7, #52]	; 0x34
 8012046:	e001      	b.n	801204c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012048:	2300      	movs	r3, #0
 801204a:	637b      	str	r3, [r7, #52]	; 0x34
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012056:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801205a:	4618      	mov	r0, r3
 801205c:	3738      	adds	r7, #56	; 0x38
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}
	...

08012064 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b08e      	sub	sp, #56	; 0x38
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801206e:	2300      	movs	r3, #0
 8012070:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012076:	2300      	movs	r3, #0
 8012078:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801207a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10a      	bne.n	8012096 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012084:	f383 8811 	msr	BASEPRI, r3
 8012088:	f3bf 8f6f 	isb	sy
 801208c:	f3bf 8f4f 	dsb	sy
 8012090:	623b      	str	r3, [r7, #32]
}
 8012092:	bf00      	nop
 8012094:	e7fe      	b.n	8012094 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00a      	beq.n	80120b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a2:	f383 8811 	msr	BASEPRI, r3
 80120a6:	f3bf 8f6f 	isb	sy
 80120aa:	f3bf 8f4f 	dsb	sy
 80120ae:	61fb      	str	r3, [r7, #28]
}
 80120b0:	bf00      	nop
 80120b2:	e7fe      	b.n	80120b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80120b4:	f000 fd82 	bl	8012bbc <xTaskGetSchedulerState>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d102      	bne.n	80120c4 <xQueueSemaphoreTake+0x60>
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d101      	bne.n	80120c8 <xQueueSemaphoreTake+0x64>
 80120c4:	2301      	movs	r3, #1
 80120c6:	e000      	b.n	80120ca <xQueueSemaphoreTake+0x66>
 80120c8:	2300      	movs	r3, #0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10a      	bne.n	80120e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	61bb      	str	r3, [r7, #24]
}
 80120e0:	bf00      	nop
 80120e2:	e7fe      	b.n	80120e2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80120e4:	f000 ffc8 	bl	8013078 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80120e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80120ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d024      	beq.n	801213e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80120f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f6:	1e5a      	subs	r2, r3, #1
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80120fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d104      	bne.n	801210e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012104:	f000 ff24 	bl	8012f50 <pvTaskIncrementMutexHeldCount>
 8012108:	4602      	mov	r2, r0
 801210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	691b      	ldr	r3, [r3, #16]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00f      	beq.n	8012136 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012118:	3310      	adds	r3, #16
 801211a:	4618      	mov	r0, r3
 801211c:	f000 fc44 	bl	80129a8 <xTaskRemoveFromEventList>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d007      	beq.n	8012136 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012126:	4b54      	ldr	r3, [pc, #336]	; (8012278 <xQueueSemaphoreTake+0x214>)
 8012128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801212c:	601a      	str	r2, [r3, #0]
 801212e:	f3bf 8f4f 	dsb	sy
 8012132:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012136:	f000 ffcf 	bl	80130d8 <vPortExitCritical>
				return pdPASS;
 801213a:	2301      	movs	r3, #1
 801213c:	e097      	b.n	801226e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d111      	bne.n	8012168 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	2b00      	cmp	r3, #0
 8012148:	d00a      	beq.n	8012160 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
 801215a:	617b      	str	r3, [r7, #20]
}
 801215c:	bf00      	nop
 801215e:	e7fe      	b.n	801215e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012160:	f000 ffba 	bl	80130d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012164:	2300      	movs	r3, #0
 8012166:	e082      	b.n	801226e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801216e:	f107 030c 	add.w	r3, r7, #12
 8012172:	4618      	mov	r0, r3
 8012174:	f000 fc7a 	bl	8012a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012178:	2301      	movs	r3, #1
 801217a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801217c:	f000 ffac 	bl	80130d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012180:	f000 fa24 	bl	80125cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012184:	f000 ff78 	bl	8013078 <vPortEnterCritical>
 8012188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801218e:	b25b      	sxtb	r3, r3
 8012190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012194:	d103      	bne.n	801219e <xQueueSemaphoreTake+0x13a>
 8012196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012198:	2200      	movs	r2, #0
 801219a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80121a4:	b25b      	sxtb	r3, r3
 80121a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121aa:	d103      	bne.n	80121b4 <xQueueSemaphoreTake+0x150>
 80121ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ae:	2200      	movs	r2, #0
 80121b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80121b4:	f000 ff90 	bl	80130d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80121b8:	463a      	mov	r2, r7
 80121ba:	f107 030c 	add.w	r3, r7, #12
 80121be:	4611      	mov	r1, r2
 80121c0:	4618      	mov	r0, r3
 80121c2:	f000 fc69 	bl	8012a98 <xTaskCheckForTimeOut>
 80121c6:	4603      	mov	r3, r0
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d132      	bne.n	8012232 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80121cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121ce:	f000 f9ce 	bl	801256e <prvIsQueueEmpty>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d026      	beq.n	8012226 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80121d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d109      	bne.n	80121f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80121e0:	f000 ff4a 	bl	8013078 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80121e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e6:	685b      	ldr	r3, [r3, #4]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f000 fd05 	bl	8012bf8 <xTaskPriorityInherit>
 80121ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80121f0:	f000 ff72 	bl	80130d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80121f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121f6:	3324      	adds	r3, #36	; 0x24
 80121f8:	683a      	ldr	r2, [r7, #0]
 80121fa:	4611      	mov	r1, r2
 80121fc:	4618      	mov	r0, r3
 80121fe:	f000 fbaf 	bl	8012960 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012204:	f000 f961 	bl	80124ca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012208:	f000 f9ee 	bl	80125e8 <xTaskResumeAll>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	f47f af68 	bne.w	80120e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012214:	4b18      	ldr	r3, [pc, #96]	; (8012278 <xQueueSemaphoreTake+0x214>)
 8012216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801221a:	601a      	str	r2, [r3, #0]
 801221c:	f3bf 8f4f 	dsb	sy
 8012220:	f3bf 8f6f 	isb	sy
 8012224:	e75e      	b.n	80120e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012228:	f000 f94f 	bl	80124ca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801222c:	f000 f9dc 	bl	80125e8 <xTaskResumeAll>
 8012230:	e758      	b.n	80120e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012234:	f000 f949 	bl	80124ca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012238:	f000 f9d6 	bl	80125e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801223c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801223e:	f000 f996 	bl	801256e <prvIsQueueEmpty>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	f43f af4d 	beq.w	80120e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00d      	beq.n	801226c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012250:	f000 ff12 	bl	8013078 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012256:	f000 f891 	bl	801237c <prvGetDisinheritPriorityAfterTimeout>
 801225a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012262:	4618      	mov	r0, r3
 8012264:	f000 fdd4 	bl	8012e10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012268:	f000 ff36 	bl	80130d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801226c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801226e:	4618      	mov	r0, r3
 8012270:	3738      	adds	r7, #56	; 0x38
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	e000ed04 	.word	0xe000ed04

0801227c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b08e      	sub	sp, #56	; 0x38
 8012280:	af00      	add	r7, sp, #0
 8012282:	60f8      	str	r0, [r7, #12]
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228e:	2b00      	cmp	r3, #0
 8012290:	d10a      	bne.n	80122a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012296:	f383 8811 	msr	BASEPRI, r3
 801229a:	f3bf 8f6f 	isb	sy
 801229e:	f3bf 8f4f 	dsb	sy
 80122a2:	623b      	str	r3, [r7, #32]
}
 80122a4:	bf00      	nop
 80122a6:	e7fe      	b.n	80122a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d103      	bne.n	80122b6 <xQueueReceiveFromISR+0x3a>
 80122ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d101      	bne.n	80122ba <xQueueReceiveFromISR+0x3e>
 80122b6:	2301      	movs	r3, #1
 80122b8:	e000      	b.n	80122bc <xQueueReceiveFromISR+0x40>
 80122ba:	2300      	movs	r3, #0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d10a      	bne.n	80122d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80122c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	61fb      	str	r3, [r7, #28]
}
 80122d2:	bf00      	nop
 80122d4:	e7fe      	b.n	80122d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80122d6:	f000 ff71 	bl	80131bc <vPortValidateInterruptPriority>
	__asm volatile
 80122da:	f3ef 8211 	mrs	r2, BASEPRI
 80122de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e2:	f383 8811 	msr	BASEPRI, r3
 80122e6:	f3bf 8f6f 	isb	sy
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	61ba      	str	r2, [r7, #24]
 80122f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80122f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80122f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d02f      	beq.n	8012362 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012304:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801230c:	68b9      	ldr	r1, [r7, #8]
 801230e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012310:	f000 f8b5 	bl	801247e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012316:	1e5a      	subs	r2, r3, #1
 8012318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801231a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801231c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012324:	d112      	bne.n	801234c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012328:	691b      	ldr	r3, [r3, #16]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d016      	beq.n	801235c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012330:	3310      	adds	r3, #16
 8012332:	4618      	mov	r0, r3
 8012334:	f000 fb38 	bl	80129a8 <xTaskRemoveFromEventList>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00e      	beq.n	801235c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00b      	beq.n	801235c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2201      	movs	r2, #1
 8012348:	601a      	str	r2, [r3, #0]
 801234a:	e007      	b.n	801235c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801234c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012350:	3301      	adds	r3, #1
 8012352:	b2db      	uxtb	r3, r3
 8012354:	b25a      	sxtb	r2, r3
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801235c:	2301      	movs	r3, #1
 801235e:	637b      	str	r3, [r7, #52]	; 0x34
 8012360:	e001      	b.n	8012366 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012362:	2300      	movs	r3, #0
 8012364:	637b      	str	r3, [r7, #52]	; 0x34
 8012366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012368:	613b      	str	r3, [r7, #16]
	__asm volatile
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	f383 8811 	msr	BASEPRI, r3
}
 8012370:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012374:	4618      	mov	r0, r3
 8012376:	3738      	adds	r7, #56	; 0x38
 8012378:	46bd      	mov	sp, r7
 801237a:	bd80      	pop	{r7, pc}

0801237c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801237c:	b480      	push	{r7}
 801237e:	b085      	sub	sp, #20
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012388:	2b00      	cmp	r3, #0
 801238a:	d006      	beq.n	801239a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f1c3 0307 	rsb	r3, r3, #7
 8012396:	60fb      	str	r3, [r7, #12]
 8012398:	e001      	b.n	801239e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801239a:	2300      	movs	r3, #0
 801239c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801239e:	68fb      	ldr	r3, [r7, #12]
	}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3714      	adds	r7, #20
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bc80      	pop	{r7}
 80123a8:	4770      	bx	lr

080123aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b086      	sub	sp, #24
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	60f8      	str	r0, [r7, #12]
 80123b2:	60b9      	str	r1, [r7, #8]
 80123b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80123b6:	2300      	movs	r3, #0
 80123b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d10d      	bne.n	80123e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d14d      	bne.n	801246c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	685b      	ldr	r3, [r3, #4]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f000 fc95 	bl	8012d04 <xTaskPriorityDisinherit>
 80123da:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2200      	movs	r2, #0
 80123e0:	605a      	str	r2, [r3, #4]
 80123e2:	e043      	b.n	801246c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d119      	bne.n	801241e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	6898      	ldr	r0, [r3, #8]
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f2:	461a      	mov	r2, r3
 80123f4:	68b9      	ldr	r1, [r7, #8]
 80123f6:	f001 fc1f 	bl	8013c38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	689a      	ldr	r2, [r3, #8]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012402:	441a      	add	r2, r3
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	689a      	ldr	r2, [r3, #8]
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	429a      	cmp	r2, r3
 8012412:	d32b      	bcc.n	801246c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	609a      	str	r2, [r3, #8]
 801241c:	e026      	b.n	801246c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	68d8      	ldr	r0, [r3, #12]
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012426:	461a      	mov	r2, r3
 8012428:	68b9      	ldr	r1, [r7, #8]
 801242a:	f001 fc05 	bl	8013c38 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	68da      	ldr	r2, [r3, #12]
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012436:	425b      	negs	r3, r3
 8012438:	441a      	add	r2, r3
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	68da      	ldr	r2, [r3, #12]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	429a      	cmp	r2, r3
 8012448:	d207      	bcs.n	801245a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	685a      	ldr	r2, [r3, #4]
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012452:	425b      	negs	r3, r3
 8012454:	441a      	add	r2, r3
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2b02      	cmp	r3, #2
 801245e:	d105      	bne.n	801246c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d002      	beq.n	801246c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012466:	693b      	ldr	r3, [r7, #16]
 8012468:	3b01      	subs	r3, #1
 801246a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	1c5a      	adds	r2, r3, #1
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012474:	697b      	ldr	r3, [r7, #20]
}
 8012476:	4618      	mov	r0, r3
 8012478:	3718      	adds	r7, #24
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}

0801247e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801247e:	b580      	push	{r7, lr}
 8012480:	b082      	sub	sp, #8
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
 8012486:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801248c:	2b00      	cmp	r3, #0
 801248e:	d018      	beq.n	80124c2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	68da      	ldr	r2, [r3, #12]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012498:	441a      	add	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	68da      	ldr	r2, [r3, #12]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d303      	bcc.n	80124b2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	68d9      	ldr	r1, [r3, #12]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124ba:	461a      	mov	r2, r3
 80124bc:	6838      	ldr	r0, [r7, #0]
 80124be:	f001 fbbb 	bl	8013c38 <memcpy>
	}
}
 80124c2:	bf00      	nop
 80124c4:	3708      	adds	r7, #8
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}

080124ca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b084      	sub	sp, #16
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80124d2:	f000 fdd1 	bl	8013078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124dc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80124de:	e011      	b.n	8012504 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d012      	beq.n	801250e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	3324      	adds	r3, #36	; 0x24
 80124ec:	4618      	mov	r0, r3
 80124ee:	f000 fa5b 	bl	80129a8 <xTaskRemoveFromEventList>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d001      	beq.n	80124fc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80124f8:	f000 fb30 	bl	8012b5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80124fc:	7bfb      	ldrb	r3, [r7, #15]
 80124fe:	3b01      	subs	r3, #1
 8012500:	b2db      	uxtb	r3, r3
 8012502:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012508:	2b00      	cmp	r3, #0
 801250a:	dce9      	bgt.n	80124e0 <prvUnlockQueue+0x16>
 801250c:	e000      	b.n	8012510 <prvUnlockQueue+0x46>
					break;
 801250e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	22ff      	movs	r2, #255	; 0xff
 8012514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012518:	f000 fdde 	bl	80130d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801251c:	f000 fdac 	bl	8013078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012526:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012528:	e011      	b.n	801254e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	691b      	ldr	r3, [r3, #16]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d012      	beq.n	8012558 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	3310      	adds	r3, #16
 8012536:	4618      	mov	r0, r3
 8012538:	f000 fa36 	bl	80129a8 <xTaskRemoveFromEventList>
 801253c:	4603      	mov	r3, r0
 801253e:	2b00      	cmp	r3, #0
 8012540:	d001      	beq.n	8012546 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012542:	f000 fb0b 	bl	8012b5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012546:	7bbb      	ldrb	r3, [r7, #14]
 8012548:	3b01      	subs	r3, #1
 801254a:	b2db      	uxtb	r3, r3
 801254c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801254e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012552:	2b00      	cmp	r3, #0
 8012554:	dce9      	bgt.n	801252a <prvUnlockQueue+0x60>
 8012556:	e000      	b.n	801255a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012558:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	22ff      	movs	r2, #255	; 0xff
 801255e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012562:	f000 fdb9 	bl	80130d8 <vPortExitCritical>
}
 8012566:	bf00      	nop
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801256e:	b580      	push	{r7, lr}
 8012570:	b084      	sub	sp, #16
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012576:	f000 fd7f 	bl	8013078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801257e:	2b00      	cmp	r3, #0
 8012580:	d102      	bne.n	8012588 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012582:	2301      	movs	r3, #1
 8012584:	60fb      	str	r3, [r7, #12]
 8012586:	e001      	b.n	801258c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012588:	2300      	movs	r3, #0
 801258a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801258c:	f000 fda4 	bl	80130d8 <vPortExitCritical>

	return xReturn;
 8012590:	68fb      	ldr	r3, [r7, #12]
}
 8012592:	4618      	mov	r0, r3
 8012594:	3710      	adds	r7, #16
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801259a:	b580      	push	{r7, lr}
 801259c:	b084      	sub	sp, #16
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80125a2:	f000 fd69 	bl	8013078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d102      	bne.n	80125b8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80125b2:	2301      	movs	r3, #1
 80125b4:	60fb      	str	r3, [r7, #12]
 80125b6:	e001      	b.n	80125bc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80125b8:	2300      	movs	r3, #0
 80125ba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80125bc:	f000 fd8c 	bl	80130d8 <vPortExitCritical>

	return xReturn;
 80125c0:	68fb      	ldr	r3, [r7, #12]
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3710      	adds	r7, #16
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80125cc:	b480      	push	{r7}
 80125ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80125d0:	4b04      	ldr	r3, [pc, #16]	; (80125e4 <vTaskSuspendAll+0x18>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	3301      	adds	r3, #1
 80125d6:	4a03      	ldr	r2, [pc, #12]	; (80125e4 <vTaskSuspendAll+0x18>)
 80125d8:	6013      	str	r3, [r2, #0]
}
 80125da:	bf00      	nop
 80125dc:	46bd      	mov	sp, r7
 80125de:	bc80      	pop	{r7}
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	20001da4 	.word	0x20001da4

080125e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80125ee:	2300      	movs	r3, #0
 80125f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80125f2:	2300      	movs	r3, #0
 80125f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80125f6:	4b41      	ldr	r3, [pc, #260]	; (80126fc <xTaskResumeAll+0x114>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d10a      	bne.n	8012614 <xTaskResumeAll+0x2c>
	__asm volatile
 80125fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012602:	f383 8811 	msr	BASEPRI, r3
 8012606:	f3bf 8f6f 	isb	sy
 801260a:	f3bf 8f4f 	dsb	sy
 801260e:	603b      	str	r3, [r7, #0]
}
 8012610:	bf00      	nop
 8012612:	e7fe      	b.n	8012612 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012614:	f000 fd30 	bl	8013078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012618:	4b38      	ldr	r3, [pc, #224]	; (80126fc <xTaskResumeAll+0x114>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	3b01      	subs	r3, #1
 801261e:	4a37      	ldr	r2, [pc, #220]	; (80126fc <xTaskResumeAll+0x114>)
 8012620:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012622:	4b36      	ldr	r3, [pc, #216]	; (80126fc <xTaskResumeAll+0x114>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d161      	bne.n	80126ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801262a:	4b35      	ldr	r3, [pc, #212]	; (8012700 <xTaskResumeAll+0x118>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d05d      	beq.n	80126ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012632:	e02e      	b.n	8012692 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012634:	4b33      	ldr	r3, [pc, #204]	; (8012704 <xTaskResumeAll+0x11c>)
 8012636:	68db      	ldr	r3, [r3, #12]
 8012638:	68db      	ldr	r3, [r3, #12]
 801263a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	3318      	adds	r3, #24
 8012640:	4618      	mov	r0, r3
 8012642:	f7ff fb5a 	bl	8011cfa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	3304      	adds	r3, #4
 801264a:	4618      	mov	r0, r3
 801264c:	f7ff fb55 	bl	8011cfa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012654:	2201      	movs	r2, #1
 8012656:	409a      	lsls	r2, r3
 8012658:	4b2b      	ldr	r3, [pc, #172]	; (8012708 <xTaskResumeAll+0x120>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	4313      	orrs	r3, r2
 801265e:	4a2a      	ldr	r2, [pc, #168]	; (8012708 <xTaskResumeAll+0x120>)
 8012660:	6013      	str	r3, [r2, #0]
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012666:	4613      	mov	r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	4413      	add	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	4a27      	ldr	r2, [pc, #156]	; (801270c <xTaskResumeAll+0x124>)
 8012670:	441a      	add	r2, r3
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	3304      	adds	r3, #4
 8012676:	4619      	mov	r1, r3
 8012678:	4610      	mov	r0, r2
 801267a:	f7ff fae3 	bl	8011c44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012682:	4b23      	ldr	r3, [pc, #140]	; (8012710 <xTaskResumeAll+0x128>)
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012688:	429a      	cmp	r2, r3
 801268a:	d302      	bcc.n	8012692 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801268c:	4b21      	ldr	r3, [pc, #132]	; (8012714 <xTaskResumeAll+0x12c>)
 801268e:	2201      	movs	r2, #1
 8012690:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012692:	4b1c      	ldr	r3, [pc, #112]	; (8012704 <xTaskResumeAll+0x11c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d1cc      	bne.n	8012634 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d001      	beq.n	80126a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80126a0:	f000 fa68 	bl	8012b74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80126a4:	4b1c      	ldr	r3, [pc, #112]	; (8012718 <xTaskResumeAll+0x130>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d010      	beq.n	80126d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80126b0:	f000 f836 	bl	8012720 <xTaskIncrementTick>
 80126b4:	4603      	mov	r3, r0
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d002      	beq.n	80126c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80126ba:	4b16      	ldr	r3, [pc, #88]	; (8012714 <xTaskResumeAll+0x12c>)
 80126bc:	2201      	movs	r2, #1
 80126be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	3b01      	subs	r3, #1
 80126c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d1f1      	bne.n	80126b0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80126cc:	4b12      	ldr	r3, [pc, #72]	; (8012718 <xTaskResumeAll+0x130>)
 80126ce:	2200      	movs	r2, #0
 80126d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80126d2:	4b10      	ldr	r3, [pc, #64]	; (8012714 <xTaskResumeAll+0x12c>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d009      	beq.n	80126ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80126da:	2301      	movs	r3, #1
 80126dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80126de:	4b0f      	ldr	r3, [pc, #60]	; (801271c <xTaskResumeAll+0x134>)
 80126e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126e4:	601a      	str	r2, [r3, #0]
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80126ee:	f000 fcf3 	bl	80130d8 <vPortExitCritical>

	return xAlreadyYielded;
 80126f2:	68bb      	ldr	r3, [r7, #8]
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3710      	adds	r7, #16
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	20001da4 	.word	0x20001da4
 8012700:	20001d84 	.word	0x20001d84
 8012704:	20001d5c 	.word	0x20001d5c
 8012708:	20001d8c 	.word	0x20001d8c
 801270c:	20001cc8 	.word	0x20001cc8
 8012710:	20001cc4 	.word	0x20001cc4
 8012714:	20001d98 	.word	0x20001d98
 8012718:	20001d94 	.word	0x20001d94
 801271c:	e000ed04 	.word	0xe000ed04

08012720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b086      	sub	sp, #24
 8012724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012726:	2300      	movs	r3, #0
 8012728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801272a:	4b51      	ldr	r3, [pc, #324]	; (8012870 <xTaskIncrementTick+0x150>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	f040 808d 	bne.w	801284e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012734:	4b4f      	ldr	r3, [pc, #316]	; (8012874 <xTaskIncrementTick+0x154>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	3301      	adds	r3, #1
 801273a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801273c:	4a4d      	ldr	r2, [pc, #308]	; (8012874 <xTaskIncrementTick+0x154>)
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d120      	bne.n	801278a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012748:	4b4b      	ldr	r3, [pc, #300]	; (8012878 <xTaskIncrementTick+0x158>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d00a      	beq.n	8012768 <xTaskIncrementTick+0x48>
	__asm volatile
 8012752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012756:	f383 8811 	msr	BASEPRI, r3
 801275a:	f3bf 8f6f 	isb	sy
 801275e:	f3bf 8f4f 	dsb	sy
 8012762:	603b      	str	r3, [r7, #0]
}
 8012764:	bf00      	nop
 8012766:	e7fe      	b.n	8012766 <xTaskIncrementTick+0x46>
 8012768:	4b43      	ldr	r3, [pc, #268]	; (8012878 <xTaskIncrementTick+0x158>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	60fb      	str	r3, [r7, #12]
 801276e:	4b43      	ldr	r3, [pc, #268]	; (801287c <xTaskIncrementTick+0x15c>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	4a41      	ldr	r2, [pc, #260]	; (8012878 <xTaskIncrementTick+0x158>)
 8012774:	6013      	str	r3, [r2, #0]
 8012776:	4a41      	ldr	r2, [pc, #260]	; (801287c <xTaskIncrementTick+0x15c>)
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	6013      	str	r3, [r2, #0]
 801277c:	4b40      	ldr	r3, [pc, #256]	; (8012880 <xTaskIncrementTick+0x160>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	3301      	adds	r3, #1
 8012782:	4a3f      	ldr	r2, [pc, #252]	; (8012880 <xTaskIncrementTick+0x160>)
 8012784:	6013      	str	r3, [r2, #0]
 8012786:	f000 f9f5 	bl	8012b74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801278a:	4b3e      	ldr	r3, [pc, #248]	; (8012884 <xTaskIncrementTick+0x164>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	693a      	ldr	r2, [r7, #16]
 8012790:	429a      	cmp	r2, r3
 8012792:	d34d      	bcc.n	8012830 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012794:	4b38      	ldr	r3, [pc, #224]	; (8012878 <xTaskIncrementTick+0x158>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d101      	bne.n	80127a2 <xTaskIncrementTick+0x82>
 801279e:	2301      	movs	r3, #1
 80127a0:	e000      	b.n	80127a4 <xTaskIncrementTick+0x84>
 80127a2:	2300      	movs	r3, #0
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d004      	beq.n	80127b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127a8:	4b36      	ldr	r3, [pc, #216]	; (8012884 <xTaskIncrementTick+0x164>)
 80127aa:	f04f 32ff 	mov.w	r2, #4294967295
 80127ae:	601a      	str	r2, [r3, #0]
					break;
 80127b0:	e03e      	b.n	8012830 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80127b2:	4b31      	ldr	r3, [pc, #196]	; (8012878 <xTaskIncrementTick+0x158>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	68db      	ldr	r3, [r3, #12]
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80127c2:	693a      	ldr	r2, [r7, #16]
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d203      	bcs.n	80127d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80127ca:	4a2e      	ldr	r2, [pc, #184]	; (8012884 <xTaskIncrementTick+0x164>)
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6013      	str	r3, [r2, #0]
						break;
 80127d0:	e02e      	b.n	8012830 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	3304      	adds	r3, #4
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7ff fa8f 	bl	8011cfa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d004      	beq.n	80127ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	3318      	adds	r3, #24
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7ff fa86 	bl	8011cfa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f2:	2201      	movs	r2, #1
 80127f4:	409a      	lsls	r2, r3
 80127f6:	4b24      	ldr	r3, [pc, #144]	; (8012888 <xTaskIncrementTick+0x168>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4313      	orrs	r3, r2
 80127fc:	4a22      	ldr	r2, [pc, #136]	; (8012888 <xTaskIncrementTick+0x168>)
 80127fe:	6013      	str	r3, [r2, #0]
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012804:	4613      	mov	r3, r2
 8012806:	009b      	lsls	r3, r3, #2
 8012808:	4413      	add	r3, r2
 801280a:	009b      	lsls	r3, r3, #2
 801280c:	4a1f      	ldr	r2, [pc, #124]	; (801288c <xTaskIncrementTick+0x16c>)
 801280e:	441a      	add	r2, r3
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	3304      	adds	r3, #4
 8012814:	4619      	mov	r1, r3
 8012816:	4610      	mov	r0, r2
 8012818:	f7ff fa14 	bl	8011c44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012820:	4b1b      	ldr	r3, [pc, #108]	; (8012890 <xTaskIncrementTick+0x170>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012826:	429a      	cmp	r2, r3
 8012828:	d3b4      	bcc.n	8012794 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801282a:	2301      	movs	r3, #1
 801282c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801282e:	e7b1      	b.n	8012794 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012830:	4b17      	ldr	r3, [pc, #92]	; (8012890 <xTaskIncrementTick+0x170>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012836:	4915      	ldr	r1, [pc, #84]	; (801288c <xTaskIncrementTick+0x16c>)
 8012838:	4613      	mov	r3, r2
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	4413      	add	r3, r2
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	440b      	add	r3, r1
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2b01      	cmp	r3, #1
 8012846:	d907      	bls.n	8012858 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8012848:	2301      	movs	r3, #1
 801284a:	617b      	str	r3, [r7, #20]
 801284c:	e004      	b.n	8012858 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801284e:	4b11      	ldr	r3, [pc, #68]	; (8012894 <xTaskIncrementTick+0x174>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	3301      	adds	r3, #1
 8012854:	4a0f      	ldr	r2, [pc, #60]	; (8012894 <xTaskIncrementTick+0x174>)
 8012856:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012858:	4b0f      	ldr	r3, [pc, #60]	; (8012898 <xTaskIncrementTick+0x178>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d001      	beq.n	8012864 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8012860:	2301      	movs	r3, #1
 8012862:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012864:	697b      	ldr	r3, [r7, #20]
}
 8012866:	4618      	mov	r0, r3
 8012868:	3718      	adds	r7, #24
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	20001da4 	.word	0x20001da4
 8012874:	20001d88 	.word	0x20001d88
 8012878:	20001d54 	.word	0x20001d54
 801287c:	20001d58 	.word	0x20001d58
 8012880:	20001d9c 	.word	0x20001d9c
 8012884:	20001da0 	.word	0x20001da0
 8012888:	20001d8c 	.word	0x20001d8c
 801288c:	20001cc8 	.word	0x20001cc8
 8012890:	20001cc4 	.word	0x20001cc4
 8012894:	20001d94 	.word	0x20001d94
 8012898:	20001d98 	.word	0x20001d98

0801289c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801289c:	b480      	push	{r7}
 801289e:	b087      	sub	sp, #28
 80128a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80128a2:	4b29      	ldr	r3, [pc, #164]	; (8012948 <vTaskSwitchContext+0xac>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d003      	beq.n	80128b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80128aa:	4b28      	ldr	r3, [pc, #160]	; (801294c <vTaskSwitchContext+0xb0>)
 80128ac:	2201      	movs	r2, #1
 80128ae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80128b0:	e044      	b.n	801293c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80128b2:	4b26      	ldr	r3, [pc, #152]	; (801294c <vTaskSwitchContext+0xb0>)
 80128b4:	2200      	movs	r2, #0
 80128b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80128b8:	4b25      	ldr	r3, [pc, #148]	; (8012950 <vTaskSwitchContext+0xb4>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	fab3 f383 	clz	r3, r3
 80128c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80128c6:	7afb      	ldrb	r3, [r7, #11]
 80128c8:	f1c3 031f 	rsb	r3, r3, #31
 80128cc:	617b      	str	r3, [r7, #20]
 80128ce:	4921      	ldr	r1, [pc, #132]	; (8012954 <vTaskSwitchContext+0xb8>)
 80128d0:	697a      	ldr	r2, [r7, #20]
 80128d2:	4613      	mov	r3, r2
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	4413      	add	r3, r2
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	440b      	add	r3, r1
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d10a      	bne.n	80128f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80128e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e6:	f383 8811 	msr	BASEPRI, r3
 80128ea:	f3bf 8f6f 	isb	sy
 80128ee:	f3bf 8f4f 	dsb	sy
 80128f2:	607b      	str	r3, [r7, #4]
}
 80128f4:	bf00      	nop
 80128f6:	e7fe      	b.n	80128f6 <vTaskSwitchContext+0x5a>
 80128f8:	697a      	ldr	r2, [r7, #20]
 80128fa:	4613      	mov	r3, r2
 80128fc:	009b      	lsls	r3, r3, #2
 80128fe:	4413      	add	r3, r2
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	4a14      	ldr	r2, [pc, #80]	; (8012954 <vTaskSwitchContext+0xb8>)
 8012904:	4413      	add	r3, r2
 8012906:	613b      	str	r3, [r7, #16]
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	685a      	ldr	r2, [r3, #4]
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	605a      	str	r2, [r3, #4]
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	685a      	ldr	r2, [r3, #4]
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	3308      	adds	r3, #8
 801291a:	429a      	cmp	r2, r3
 801291c:	d104      	bne.n	8012928 <vTaskSwitchContext+0x8c>
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	685a      	ldr	r2, [r3, #4]
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	605a      	str	r2, [r3, #4]
 8012928:	693b      	ldr	r3, [r7, #16]
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	68db      	ldr	r3, [r3, #12]
 801292e:	4a0a      	ldr	r2, [pc, #40]	; (8012958 <vTaskSwitchContext+0xbc>)
 8012930:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012932:	4b09      	ldr	r3, [pc, #36]	; (8012958 <vTaskSwitchContext+0xbc>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	334c      	adds	r3, #76	; 0x4c
 8012938:	4a08      	ldr	r2, [pc, #32]	; (801295c <vTaskSwitchContext+0xc0>)
 801293a:	6013      	str	r3, [r2, #0]
}
 801293c:	bf00      	nop
 801293e:	371c      	adds	r7, #28
 8012940:	46bd      	mov	sp, r7
 8012942:	bc80      	pop	{r7}
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	20001da4 	.word	0x20001da4
 801294c:	20001d98 	.word	0x20001d98
 8012950:	20001d8c 	.word	0x20001d8c
 8012954:	20001cc8 	.word	0x20001cc8
 8012958:	20001cc4 	.word	0x20001cc4
 801295c:	2000012c 	.word	0x2000012c

08012960 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b084      	sub	sp, #16
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10a      	bne.n	8012986 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012974:	f383 8811 	msr	BASEPRI, r3
 8012978:	f3bf 8f6f 	isb	sy
 801297c:	f3bf 8f4f 	dsb	sy
 8012980:	60fb      	str	r3, [r7, #12]
}
 8012982:	bf00      	nop
 8012984:	e7fe      	b.n	8012984 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012986:	4b07      	ldr	r3, [pc, #28]	; (80129a4 <vTaskPlaceOnEventList+0x44>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	3318      	adds	r3, #24
 801298c:	4619      	mov	r1, r3
 801298e:	6878      	ldr	r0, [r7, #4]
 8012990:	f7ff f97b 	bl	8011c8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012994:	2101      	movs	r1, #1
 8012996:	6838      	ldr	r0, [r7, #0]
 8012998:	f000 faee 	bl	8012f78 <prvAddCurrentTaskToDelayedList>
}
 801299c:	bf00      	nop
 801299e:	3710      	adds	r7, #16
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}
 80129a4:	20001cc4 	.word	0x20001cc4

080129a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b086      	sub	sp, #24
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	68db      	ldr	r3, [r3, #12]
 80129b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d10a      	bne.n	80129d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80129be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c2:	f383 8811 	msr	BASEPRI, r3
 80129c6:	f3bf 8f6f 	isb	sy
 80129ca:	f3bf 8f4f 	dsb	sy
 80129ce:	60fb      	str	r3, [r7, #12]
}
 80129d0:	bf00      	nop
 80129d2:	e7fe      	b.n	80129d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	3318      	adds	r3, #24
 80129d8:	4618      	mov	r0, r3
 80129da:	f7ff f98e 	bl	8011cfa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129de:	4b1d      	ldr	r3, [pc, #116]	; (8012a54 <xTaskRemoveFromEventList+0xac>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d11c      	bne.n	8012a20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	3304      	adds	r3, #4
 80129ea:	4618      	mov	r0, r3
 80129ec:	f7ff f985 	bl	8011cfa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f4:	2201      	movs	r2, #1
 80129f6:	409a      	lsls	r2, r3
 80129f8:	4b17      	ldr	r3, [pc, #92]	; (8012a58 <xTaskRemoveFromEventList+0xb0>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	4313      	orrs	r3, r2
 80129fe:	4a16      	ldr	r2, [pc, #88]	; (8012a58 <xTaskRemoveFromEventList+0xb0>)
 8012a00:	6013      	str	r3, [r2, #0]
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a06:	4613      	mov	r3, r2
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	4413      	add	r3, r2
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	4a13      	ldr	r2, [pc, #76]	; (8012a5c <xTaskRemoveFromEventList+0xb4>)
 8012a10:	441a      	add	r2, r3
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	3304      	adds	r3, #4
 8012a16:	4619      	mov	r1, r3
 8012a18:	4610      	mov	r0, r2
 8012a1a:	f7ff f913 	bl	8011c44 <vListInsertEnd>
 8012a1e:	e005      	b.n	8012a2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	3318      	adds	r3, #24
 8012a24:	4619      	mov	r1, r3
 8012a26:	480e      	ldr	r0, [pc, #56]	; (8012a60 <xTaskRemoveFromEventList+0xb8>)
 8012a28:	f7ff f90c 	bl	8011c44 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a30:	4b0c      	ldr	r3, [pc, #48]	; (8012a64 <xTaskRemoveFromEventList+0xbc>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d905      	bls.n	8012a46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012a3e:	4b0a      	ldr	r3, [pc, #40]	; (8012a68 <xTaskRemoveFromEventList+0xc0>)
 8012a40:	2201      	movs	r2, #1
 8012a42:	601a      	str	r2, [r3, #0]
 8012a44:	e001      	b.n	8012a4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012a46:	2300      	movs	r3, #0
 8012a48:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012a4a:	697b      	ldr	r3, [r7, #20]
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	3718      	adds	r7, #24
 8012a50:	46bd      	mov	sp, r7
 8012a52:	bd80      	pop	{r7, pc}
 8012a54:	20001da4 	.word	0x20001da4
 8012a58:	20001d8c 	.word	0x20001d8c
 8012a5c:	20001cc8 	.word	0x20001cc8
 8012a60:	20001d5c 	.word	0x20001d5c
 8012a64:	20001cc4 	.word	0x20001cc4
 8012a68:	20001d98 	.word	0x20001d98

08012a6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012a6c:	b480      	push	{r7}
 8012a6e:	b083      	sub	sp, #12
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012a74:	4b06      	ldr	r3, [pc, #24]	; (8012a90 <vTaskInternalSetTimeOutState+0x24>)
 8012a76:	681a      	ldr	r2, [r3, #0]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012a7c:	4b05      	ldr	r3, [pc, #20]	; (8012a94 <vTaskInternalSetTimeOutState+0x28>)
 8012a7e:	681a      	ldr	r2, [r3, #0]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	605a      	str	r2, [r3, #4]
}
 8012a84:	bf00      	nop
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bc80      	pop	{r7}
 8012a8c:	4770      	bx	lr
 8012a8e:	bf00      	nop
 8012a90:	20001d9c 	.word	0x20001d9c
 8012a94:	20001d88 	.word	0x20001d88

08012a98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b088      	sub	sp, #32
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d10a      	bne.n	8012abe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aac:	f383 8811 	msr	BASEPRI, r3
 8012ab0:	f3bf 8f6f 	isb	sy
 8012ab4:	f3bf 8f4f 	dsb	sy
 8012ab8:	613b      	str	r3, [r7, #16]
}
 8012aba:	bf00      	nop
 8012abc:	e7fe      	b.n	8012abc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d10a      	bne.n	8012ada <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac8:	f383 8811 	msr	BASEPRI, r3
 8012acc:	f3bf 8f6f 	isb	sy
 8012ad0:	f3bf 8f4f 	dsb	sy
 8012ad4:	60fb      	str	r3, [r7, #12]
}
 8012ad6:	bf00      	nop
 8012ad8:	e7fe      	b.n	8012ad8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012ada:	f000 facd 	bl	8013078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012ade:	4b1d      	ldr	r3, [pc, #116]	; (8012b54 <xTaskCheckForTimeOut+0xbc>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	69ba      	ldr	r2, [r7, #24]
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012af6:	d102      	bne.n	8012afe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012af8:	2300      	movs	r3, #0
 8012afa:	61fb      	str	r3, [r7, #28]
 8012afc:	e023      	b.n	8012b46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681a      	ldr	r2, [r3, #0]
 8012b02:	4b15      	ldr	r3, [pc, #84]	; (8012b58 <xTaskCheckForTimeOut+0xc0>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d007      	beq.n	8012b1a <xTaskCheckForTimeOut+0x82>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	69ba      	ldr	r2, [r7, #24]
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d302      	bcc.n	8012b1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012b14:	2301      	movs	r3, #1
 8012b16:	61fb      	str	r3, [r7, #28]
 8012b18:	e015      	b.n	8012b46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012b1a:	683b      	ldr	r3, [r7, #0]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	697a      	ldr	r2, [r7, #20]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d20b      	bcs.n	8012b3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	1ad2      	subs	r2, r2, r3
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7ff ff9b 	bl	8012a6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012b36:	2300      	movs	r3, #0
 8012b38:	61fb      	str	r3, [r7, #28]
 8012b3a:	e004      	b.n	8012b46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	2200      	movs	r2, #0
 8012b40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012b42:	2301      	movs	r3, #1
 8012b44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012b46:	f000 fac7 	bl	80130d8 <vPortExitCritical>

	return xReturn;
 8012b4a:	69fb      	ldr	r3, [r7, #28]
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3720      	adds	r7, #32
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	20001d88 	.word	0x20001d88
 8012b58:	20001d9c 	.word	0x20001d9c

08012b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012b60:	4b03      	ldr	r3, [pc, #12]	; (8012b70 <vTaskMissedYield+0x14>)
 8012b62:	2201      	movs	r2, #1
 8012b64:	601a      	str	r2, [r3, #0]
}
 8012b66:	bf00      	nop
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bc80      	pop	{r7}
 8012b6c:	4770      	bx	lr
 8012b6e:	bf00      	nop
 8012b70:	20001d98 	.word	0x20001d98

08012b74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012b74:	b480      	push	{r7}
 8012b76:	b083      	sub	sp, #12
 8012b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b7a:	4b0e      	ldr	r3, [pc, #56]	; (8012bb4 <prvResetNextTaskUnblockTime+0x40>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d101      	bne.n	8012b88 <prvResetNextTaskUnblockTime+0x14>
 8012b84:	2301      	movs	r3, #1
 8012b86:	e000      	b.n	8012b8a <prvResetNextTaskUnblockTime+0x16>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d004      	beq.n	8012b98 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012b8e:	4b0a      	ldr	r3, [pc, #40]	; (8012bb8 <prvResetNextTaskUnblockTime+0x44>)
 8012b90:	f04f 32ff 	mov.w	r2, #4294967295
 8012b94:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012b96:	e008      	b.n	8012baa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012b98:	4b06      	ldr	r3, [pc, #24]	; (8012bb4 <prvResetNextTaskUnblockTime+0x40>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	4a04      	ldr	r2, [pc, #16]	; (8012bb8 <prvResetNextTaskUnblockTime+0x44>)
 8012ba8:	6013      	str	r3, [r2, #0]
}
 8012baa:	bf00      	nop
 8012bac:	370c      	adds	r7, #12
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bc80      	pop	{r7}
 8012bb2:	4770      	bx	lr
 8012bb4:	20001d54 	.word	0x20001d54
 8012bb8:	20001da0 	.word	0x20001da0

08012bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012bc2:	4b0b      	ldr	r3, [pc, #44]	; (8012bf0 <xTaskGetSchedulerState+0x34>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d102      	bne.n	8012bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012bca:	2301      	movs	r3, #1
 8012bcc:	607b      	str	r3, [r7, #4]
 8012bce:	e008      	b.n	8012be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bd0:	4b08      	ldr	r3, [pc, #32]	; (8012bf4 <xTaskGetSchedulerState+0x38>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d102      	bne.n	8012bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012bd8:	2302      	movs	r3, #2
 8012bda:	607b      	str	r3, [r7, #4]
 8012bdc:	e001      	b.n	8012be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012bde:	2300      	movs	r3, #0
 8012be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012be2:	687b      	ldr	r3, [r7, #4]
	}
 8012be4:	4618      	mov	r0, r3
 8012be6:	370c      	adds	r7, #12
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bc80      	pop	{r7}
 8012bec:	4770      	bx	lr
 8012bee:	bf00      	nop
 8012bf0:	20001d90 	.word	0x20001d90
 8012bf4:	20001da4 	.word	0x20001da4

08012bf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b084      	sub	sp, #16
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012c04:	2300      	movs	r3, #0
 8012c06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d06e      	beq.n	8012cec <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c12:	4b39      	ldr	r3, [pc, #228]	; (8012cf8 <xTaskPriorityInherit+0x100>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d25e      	bcs.n	8012cda <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	699b      	ldr	r3, [r3, #24]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	db06      	blt.n	8012c32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c24:	4b34      	ldr	r3, [pc, #208]	; (8012cf8 <xTaskPriorityInherit+0x100>)
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c2a:	f1c3 0207 	rsb	r2, r3, #7
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	6959      	ldr	r1, [r3, #20]
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c3a:	4613      	mov	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4413      	add	r3, r2
 8012c40:	009b      	lsls	r3, r3, #2
 8012c42:	4a2e      	ldr	r2, [pc, #184]	; (8012cfc <xTaskPriorityInherit+0x104>)
 8012c44:	4413      	add	r3, r2
 8012c46:	4299      	cmp	r1, r3
 8012c48:	d101      	bne.n	8012c4e <xTaskPriorityInherit+0x56>
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	e000      	b.n	8012c50 <xTaskPriorityInherit+0x58>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d03a      	beq.n	8012cca <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	3304      	adds	r3, #4
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7ff f84e 	bl	8011cfa <uxListRemove>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d115      	bne.n	8012c90 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c68:	4924      	ldr	r1, [pc, #144]	; (8012cfc <xTaskPriorityInherit+0x104>)
 8012c6a:	4613      	mov	r3, r2
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	4413      	add	r3, r2
 8012c70:	009b      	lsls	r3, r3, #2
 8012c72:	440b      	add	r3, r1
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d10a      	bne.n	8012c90 <xTaskPriorityInherit+0x98>
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c7e:	2201      	movs	r2, #1
 8012c80:	fa02 f303 	lsl.w	r3, r2, r3
 8012c84:	43da      	mvns	r2, r3
 8012c86:	4b1e      	ldr	r3, [pc, #120]	; (8012d00 <xTaskPriorityInherit+0x108>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4013      	ands	r3, r2
 8012c8c:	4a1c      	ldr	r2, [pc, #112]	; (8012d00 <xTaskPriorityInherit+0x108>)
 8012c8e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012c90:	4b19      	ldr	r3, [pc, #100]	; (8012cf8 <xTaskPriorityInherit+0x100>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c9e:	2201      	movs	r2, #1
 8012ca0:	409a      	lsls	r2, r3
 8012ca2:	4b17      	ldr	r3, [pc, #92]	; (8012d00 <xTaskPriorityInherit+0x108>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4313      	orrs	r3, r2
 8012ca8:	4a15      	ldr	r2, [pc, #84]	; (8012d00 <xTaskPriorityInherit+0x108>)
 8012caa:	6013      	str	r3, [r2, #0]
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	009b      	lsls	r3, r3, #2
 8012cb4:	4413      	add	r3, r2
 8012cb6:	009b      	lsls	r3, r3, #2
 8012cb8:	4a10      	ldr	r2, [pc, #64]	; (8012cfc <xTaskPriorityInherit+0x104>)
 8012cba:	441a      	add	r2, r3
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	3304      	adds	r3, #4
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	4610      	mov	r0, r2
 8012cc4:	f7fe ffbe 	bl	8011c44 <vListInsertEnd>
 8012cc8:	e004      	b.n	8012cd4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012cca:	4b0b      	ldr	r3, [pc, #44]	; (8012cf8 <xTaskPriorityInherit+0x100>)
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	60fb      	str	r3, [r7, #12]
 8012cd8:	e008      	b.n	8012cec <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012cde:	4b06      	ldr	r3, [pc, #24]	; (8012cf8 <xTaskPriorityInherit+0x100>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d201      	bcs.n	8012cec <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012cec:	68fb      	ldr	r3, [r7, #12]
	}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	20001cc4 	.word	0x20001cc4
 8012cfc:	20001cc8 	.word	0x20001cc8
 8012d00:	20001d8c 	.word	0x20001d8c

08012d04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b086      	sub	sp, #24
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012d10:	2300      	movs	r3, #0
 8012d12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d06e      	beq.n	8012df8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012d1a:	4b3a      	ldr	r3, [pc, #232]	; (8012e04 <xTaskPriorityDisinherit+0x100>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	693a      	ldr	r2, [r7, #16]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d00a      	beq.n	8012d3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d28:	f383 8811 	msr	BASEPRI, r3
 8012d2c:	f3bf 8f6f 	isb	sy
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	60fb      	str	r3, [r7, #12]
}
 8012d36:	bf00      	nop
 8012d38:	e7fe      	b.n	8012d38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d10a      	bne.n	8012d58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d46:	f383 8811 	msr	BASEPRI, r3
 8012d4a:	f3bf 8f6f 	isb	sy
 8012d4e:	f3bf 8f4f 	dsb	sy
 8012d52:	60bb      	str	r3, [r7, #8]
}
 8012d54:	bf00      	nop
 8012d56:	e7fe      	b.n	8012d56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d5c:	1e5a      	subs	r2, r3, #1
 8012d5e:	693b      	ldr	r3, [r7, #16]
 8012d60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d66:	693b      	ldr	r3, [r7, #16]
 8012d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d044      	beq.n	8012df8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d140      	bne.n	8012df8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	3304      	adds	r3, #4
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fe ffbd 	bl	8011cfa <uxListRemove>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d115      	bne.n	8012db2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012d86:	693b      	ldr	r3, [r7, #16]
 8012d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d8a:	491f      	ldr	r1, [pc, #124]	; (8012e08 <xTaskPriorityDisinherit+0x104>)
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4413      	add	r3, r2
 8012d92:	009b      	lsls	r3, r3, #2
 8012d94:	440b      	add	r3, r1
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d10a      	bne.n	8012db2 <xTaskPriorityDisinherit+0xae>
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012da0:	2201      	movs	r2, #1
 8012da2:	fa02 f303 	lsl.w	r3, r2, r3
 8012da6:	43da      	mvns	r2, r3
 8012da8:	4b18      	ldr	r3, [pc, #96]	; (8012e0c <xTaskPriorityDisinherit+0x108>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	4013      	ands	r3, r2
 8012dae:	4a17      	ldr	r2, [pc, #92]	; (8012e0c <xTaskPriorityDisinherit+0x108>)
 8012db0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dbe:	f1c3 0207 	rsb	r2, r3, #7
 8012dc2:	693b      	ldr	r3, [r7, #16]
 8012dc4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dca:	2201      	movs	r2, #1
 8012dcc:	409a      	lsls	r2, r3
 8012dce:	4b0f      	ldr	r3, [pc, #60]	; (8012e0c <xTaskPriorityDisinherit+0x108>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	4313      	orrs	r3, r2
 8012dd4:	4a0d      	ldr	r2, [pc, #52]	; (8012e0c <xTaskPriorityDisinherit+0x108>)
 8012dd6:	6013      	str	r3, [r2, #0]
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ddc:	4613      	mov	r3, r2
 8012dde:	009b      	lsls	r3, r3, #2
 8012de0:	4413      	add	r3, r2
 8012de2:	009b      	lsls	r3, r3, #2
 8012de4:	4a08      	ldr	r2, [pc, #32]	; (8012e08 <xTaskPriorityDisinherit+0x104>)
 8012de6:	441a      	add	r2, r3
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	3304      	adds	r3, #4
 8012dec:	4619      	mov	r1, r3
 8012dee:	4610      	mov	r0, r2
 8012df0:	f7fe ff28 	bl	8011c44 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012df4:	2301      	movs	r3, #1
 8012df6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012df8:	697b      	ldr	r3, [r7, #20]
	}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3718      	adds	r7, #24
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	20001cc4 	.word	0x20001cc4
 8012e08:	20001cc8 	.word	0x20001cc8
 8012e0c:	20001d8c 	.word	0x20001d8c

08012e10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b088      	sub	sp, #32
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012e1e:	2301      	movs	r3, #1
 8012e20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	f000 8088 	beq.w	8012f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012e2a:	69bb      	ldr	r3, [r7, #24]
 8012e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d10a      	bne.n	8012e48 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8012e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e36:	f383 8811 	msr	BASEPRI, r3
 8012e3a:	f3bf 8f6f 	isb	sy
 8012e3e:	f3bf 8f4f 	dsb	sy
 8012e42:	60fb      	str	r3, [r7, #12]
}
 8012e44:	bf00      	nop
 8012e46:	e7fe      	b.n	8012e46 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e4c:	683a      	ldr	r2, [r7, #0]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d902      	bls.n	8012e58 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	61fb      	str	r3, [r7, #28]
 8012e56:	e002      	b.n	8012e5e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012e58:	69bb      	ldr	r3, [r7, #24]
 8012e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e62:	69fa      	ldr	r2, [r7, #28]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d068      	beq.n	8012f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012e68:	69bb      	ldr	r3, [r7, #24]
 8012e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e6c:	697a      	ldr	r2, [r7, #20]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d163      	bne.n	8012f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012e72:	4b34      	ldr	r3, [pc, #208]	; (8012f44 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	69ba      	ldr	r2, [r7, #24]
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d10a      	bne.n	8012e92 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8012e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e80:	f383 8811 	msr	BASEPRI, r3
 8012e84:	f3bf 8f6f 	isb	sy
 8012e88:	f3bf 8f4f 	dsb	sy
 8012e8c:	60bb      	str	r3, [r7, #8]
}
 8012e8e:	bf00      	nop
 8012e90:	e7fe      	b.n	8012e90 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e96:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012e98:	69bb      	ldr	r3, [r7, #24]
 8012e9a:	69fa      	ldr	r2, [r7, #28]
 8012e9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	699b      	ldr	r3, [r3, #24]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	db04      	blt.n	8012eb0 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	f1c3 0207 	rsb	r2, r3, #7
 8012eac:	69bb      	ldr	r3, [r7, #24]
 8012eae:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	6959      	ldr	r1, [r3, #20]
 8012eb4:	693a      	ldr	r2, [r7, #16]
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	4413      	add	r3, r2
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	4a22      	ldr	r2, [pc, #136]	; (8012f48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012ec0:	4413      	add	r3, r2
 8012ec2:	4299      	cmp	r1, r3
 8012ec4:	d101      	bne.n	8012eca <vTaskPriorityDisinheritAfterTimeout+0xba>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e000      	b.n	8012ecc <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d034      	beq.n	8012f3a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	3304      	adds	r3, #4
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7fe ff10 	bl	8011cfa <uxListRemove>
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d115      	bne.n	8012f0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ee4:	4918      	ldr	r1, [pc, #96]	; (8012f48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	440b      	add	r3, r1
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d10a      	bne.n	8012f0c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012efa:	2201      	movs	r2, #1
 8012efc:	fa02 f303 	lsl.w	r3, r2, r3
 8012f00:	43da      	mvns	r2, r3
 8012f02:	4b12      	ldr	r3, [pc, #72]	; (8012f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	4013      	ands	r3, r2
 8012f08:	4a10      	ldr	r2, [pc, #64]	; (8012f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012f0a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f10:	2201      	movs	r2, #1
 8012f12:	409a      	lsls	r2, r3
 8012f14:	4b0d      	ldr	r3, [pc, #52]	; (8012f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	4313      	orrs	r3, r2
 8012f1a:	4a0c      	ldr	r2, [pc, #48]	; (8012f4c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012f1c:	6013      	str	r3, [r2, #0]
 8012f1e:	69bb      	ldr	r3, [r7, #24]
 8012f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f22:	4613      	mov	r3, r2
 8012f24:	009b      	lsls	r3, r3, #2
 8012f26:	4413      	add	r3, r2
 8012f28:	009b      	lsls	r3, r3, #2
 8012f2a:	4a07      	ldr	r2, [pc, #28]	; (8012f48 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012f2c:	441a      	add	r2, r3
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	3304      	adds	r3, #4
 8012f32:	4619      	mov	r1, r3
 8012f34:	4610      	mov	r0, r2
 8012f36:	f7fe fe85 	bl	8011c44 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f3a:	bf00      	nop
 8012f3c:	3720      	adds	r7, #32
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	20001cc4 	.word	0x20001cc4
 8012f48:	20001cc8 	.word	0x20001cc8
 8012f4c:	20001d8c 	.word	0x20001d8c

08012f50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012f50:	b480      	push	{r7}
 8012f52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012f54:	4b07      	ldr	r3, [pc, #28]	; (8012f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d004      	beq.n	8012f66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012f5c:	4b05      	ldr	r3, [pc, #20]	; (8012f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012f62:	3201      	adds	r2, #1
 8012f64:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012f66:	4b03      	ldr	r3, [pc, #12]	; (8012f74 <pvTaskIncrementMutexHeldCount+0x24>)
 8012f68:	681b      	ldr	r3, [r3, #0]
	}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bc80      	pop	{r7}
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop
 8012f74:	20001cc4 	.word	0x20001cc4

08012f78 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012f82:	4b29      	ldr	r3, [pc, #164]	; (8013028 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f88:	4b28      	ldr	r3, [pc, #160]	; (801302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe feb3 	bl	8011cfa <uxListRemove>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d10b      	bne.n	8012fb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8012f9a:	4b24      	ldr	r3, [pc, #144]	; (801302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fa0:	2201      	movs	r2, #1
 8012fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8012fa6:	43da      	mvns	r2, r3
 8012fa8:	4b21      	ldr	r3, [pc, #132]	; (8013030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4013      	ands	r3, r2
 8012fae:	4a20      	ldr	r2, [pc, #128]	; (8013030 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012fb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb8:	d10a      	bne.n	8012fd0 <prvAddCurrentTaskToDelayedList+0x58>
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d007      	beq.n	8012fd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fc0:	4b1a      	ldr	r3, [pc, #104]	; (801302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	3304      	adds	r3, #4
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	481a      	ldr	r0, [pc, #104]	; (8013034 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012fca:	f7fe fe3b 	bl	8011c44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012fce:	e026      	b.n	801301e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012fd0:	68fa      	ldr	r2, [r7, #12]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	4413      	add	r3, r2
 8012fd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012fd8:	4b14      	ldr	r3, [pc, #80]	; (801302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	68ba      	ldr	r2, [r7, #8]
 8012fde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012fe0:	68ba      	ldr	r2, [r7, #8]
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d209      	bcs.n	8012ffc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012fe8:	4b13      	ldr	r3, [pc, #76]	; (8013038 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012fea:	681a      	ldr	r2, [r3, #0]
 8012fec:	4b0f      	ldr	r3, [pc, #60]	; (801302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	3304      	adds	r3, #4
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	4610      	mov	r0, r2
 8012ff6:	f7fe fe48 	bl	8011c8a <vListInsert>
}
 8012ffa:	e010      	b.n	801301e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ffc:	4b0f      	ldr	r3, [pc, #60]	; (801303c <prvAddCurrentTaskToDelayedList+0xc4>)
 8012ffe:	681a      	ldr	r2, [r3, #0]
 8013000:	4b0a      	ldr	r3, [pc, #40]	; (801302c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	3304      	adds	r3, #4
 8013006:	4619      	mov	r1, r3
 8013008:	4610      	mov	r0, r2
 801300a:	f7fe fe3e 	bl	8011c8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801300e:	4b0c      	ldr	r3, [pc, #48]	; (8013040 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	68ba      	ldr	r2, [r7, #8]
 8013014:	429a      	cmp	r2, r3
 8013016:	d202      	bcs.n	801301e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013018:	4a09      	ldr	r2, [pc, #36]	; (8013040 <prvAddCurrentTaskToDelayedList+0xc8>)
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	6013      	str	r3, [r2, #0]
}
 801301e:	bf00      	nop
 8013020:	3710      	adds	r7, #16
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	20001d88 	.word	0x20001d88
 801302c:	20001cc4 	.word	0x20001cc4
 8013030:	20001d8c 	.word	0x20001d8c
 8013034:	20001d70 	.word	0x20001d70
 8013038:	20001d58 	.word	0x20001d58
 801303c:	20001d54 	.word	0x20001d54
 8013040:	20001da0 	.word	0x20001da0
	...

08013050 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013050:	4b07      	ldr	r3, [pc, #28]	; (8013070 <pxCurrentTCBConst2>)
 8013052:	6819      	ldr	r1, [r3, #0]
 8013054:	6808      	ldr	r0, [r1, #0]
 8013056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801305a:	f380 8809 	msr	PSP, r0
 801305e:	f3bf 8f6f 	isb	sy
 8013062:	f04f 0000 	mov.w	r0, #0
 8013066:	f380 8811 	msr	BASEPRI, r0
 801306a:	f04e 0e0d 	orr.w	lr, lr, #13
 801306e:	4770      	bx	lr

08013070 <pxCurrentTCBConst2>:
 8013070:	20001cc4 	.word	0x20001cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013074:	bf00      	nop
 8013076:	bf00      	nop

08013078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
	__asm volatile
 801307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013082:	f383 8811 	msr	BASEPRI, r3
 8013086:	f3bf 8f6f 	isb	sy
 801308a:	f3bf 8f4f 	dsb	sy
 801308e:	607b      	str	r3, [r7, #4]
}
 8013090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013092:	4b0f      	ldr	r3, [pc, #60]	; (80130d0 <vPortEnterCritical+0x58>)
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	3301      	adds	r3, #1
 8013098:	4a0d      	ldr	r2, [pc, #52]	; (80130d0 <vPortEnterCritical+0x58>)
 801309a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801309c:	4b0c      	ldr	r3, [pc, #48]	; (80130d0 <vPortEnterCritical+0x58>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	2b01      	cmp	r3, #1
 80130a2:	d10f      	bne.n	80130c4 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80130a4:	4b0b      	ldr	r3, [pc, #44]	; (80130d4 <vPortEnterCritical+0x5c>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	b2db      	uxtb	r3, r3
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d00a      	beq.n	80130c4 <vPortEnterCritical+0x4c>
	__asm volatile
 80130ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b2:	f383 8811 	msr	BASEPRI, r3
 80130b6:	f3bf 8f6f 	isb	sy
 80130ba:	f3bf 8f4f 	dsb	sy
 80130be:	603b      	str	r3, [r7, #0]
}
 80130c0:	bf00      	nop
 80130c2:	e7fe      	b.n	80130c2 <vPortEnterCritical+0x4a>
	}
}
 80130c4:	bf00      	nop
 80130c6:	370c      	adds	r7, #12
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bc80      	pop	{r7}
 80130cc:	4770      	bx	lr
 80130ce:	bf00      	nop
 80130d0:	200000d8 	.word	0x200000d8
 80130d4:	e000ed04 	.word	0xe000ed04

080130d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80130de:	4b11      	ldr	r3, [pc, #68]	; (8013124 <vPortExitCritical+0x4c>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d10a      	bne.n	80130fc <vPortExitCritical+0x24>
	__asm volatile
 80130e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ea:	f383 8811 	msr	BASEPRI, r3
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	f3bf 8f4f 	dsb	sy
 80130f6:	607b      	str	r3, [r7, #4]
}
 80130f8:	bf00      	nop
 80130fa:	e7fe      	b.n	80130fa <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80130fc:	4b09      	ldr	r3, [pc, #36]	; (8013124 <vPortExitCritical+0x4c>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	3b01      	subs	r3, #1
 8013102:	4a08      	ldr	r2, [pc, #32]	; (8013124 <vPortExitCritical+0x4c>)
 8013104:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013106:	4b07      	ldr	r3, [pc, #28]	; (8013124 <vPortExitCritical+0x4c>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d105      	bne.n	801311a <vPortExitCritical+0x42>
 801310e:	2300      	movs	r3, #0
 8013110:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	f383 8811 	msr	BASEPRI, r3
}
 8013118:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801311a:	bf00      	nop
 801311c:	370c      	adds	r7, #12
 801311e:	46bd      	mov	sp, r7
 8013120:	bc80      	pop	{r7}
 8013122:	4770      	bx	lr
 8013124:	200000d8 	.word	0x200000d8
	...

08013130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013130:	f3ef 8009 	mrs	r0, PSP
 8013134:	f3bf 8f6f 	isb	sy
 8013138:	4b0d      	ldr	r3, [pc, #52]	; (8013170 <pxCurrentTCBConst>)
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013140:	6010      	str	r0, [r2, #0]
 8013142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013146:	f04f 0050 	mov.w	r0, #80	; 0x50
 801314a:	f380 8811 	msr	BASEPRI, r0
 801314e:	f7ff fba5 	bl	801289c <vTaskSwitchContext>
 8013152:	f04f 0000 	mov.w	r0, #0
 8013156:	f380 8811 	msr	BASEPRI, r0
 801315a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801315e:	6819      	ldr	r1, [r3, #0]
 8013160:	6808      	ldr	r0, [r1, #0]
 8013162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013166:	f380 8809 	msr	PSP, r0
 801316a:	f3bf 8f6f 	isb	sy
 801316e:	4770      	bx	lr

08013170 <pxCurrentTCBConst>:
 8013170:	20001cc4 	.word	0x20001cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013174:	bf00      	nop
 8013176:	bf00      	nop

08013178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
	__asm volatile
 801317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013182:	f383 8811 	msr	BASEPRI, r3
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	f3bf 8f4f 	dsb	sy
 801318e:	607b      	str	r3, [r7, #4]
}
 8013190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013192:	f7ff fac5 	bl	8012720 <xTaskIncrementTick>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d003      	beq.n	80131a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801319c:	4b06      	ldr	r3, [pc, #24]	; (80131b8 <xPortSysTickHandler+0x40>)
 801319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131a2:	601a      	str	r2, [r3, #0]
 80131a4:	2300      	movs	r3, #0
 80131a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	f383 8811 	msr	BASEPRI, r3
}
 80131ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80131b0:	bf00      	nop
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	e000ed04 	.word	0xe000ed04

080131bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80131c2:	f3ef 8305 	mrs	r3, IPSR
 80131c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2b0f      	cmp	r3, #15
 80131cc:	d914      	bls.n	80131f8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80131ce:	4a16      	ldr	r2, [pc, #88]	; (8013228 <vPortValidateInterruptPriority+0x6c>)
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	4413      	add	r3, r2
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80131d8:	4b14      	ldr	r3, [pc, #80]	; (801322c <vPortValidateInterruptPriority+0x70>)
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	7afa      	ldrb	r2, [r7, #11]
 80131de:	429a      	cmp	r2, r3
 80131e0:	d20a      	bcs.n	80131f8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80131e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e6:	f383 8811 	msr	BASEPRI, r3
 80131ea:	f3bf 8f6f 	isb	sy
 80131ee:	f3bf 8f4f 	dsb	sy
 80131f2:	607b      	str	r3, [r7, #4]
}
 80131f4:	bf00      	nop
 80131f6:	e7fe      	b.n	80131f6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80131f8:	4b0d      	ldr	r3, [pc, #52]	; (8013230 <vPortValidateInterruptPriority+0x74>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013200:	4b0c      	ldr	r3, [pc, #48]	; (8013234 <vPortValidateInterruptPriority+0x78>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	429a      	cmp	r2, r3
 8013206:	d90a      	bls.n	801321e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801320c:	f383 8811 	msr	BASEPRI, r3
 8013210:	f3bf 8f6f 	isb	sy
 8013214:	f3bf 8f4f 	dsb	sy
 8013218:	603b      	str	r3, [r7, #0]
}
 801321a:	bf00      	nop
 801321c:	e7fe      	b.n	801321c <vPortValidateInterruptPriority+0x60>
	}
 801321e:	bf00      	nop
 8013220:	3714      	adds	r7, #20
 8013222:	46bd      	mov	sp, r7
 8013224:	bc80      	pop	{r7}
 8013226:	4770      	bx	lr
 8013228:	e000e3f0 	.word	0xe000e3f0
 801322c:	20001da8 	.word	0x20001da8
 8013230:	e000ed0c 	.word	0xe000ed0c
 8013234:	20001dac 	.word	0x20001dac

08013238 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801323c:	2200      	movs	r2, #0
 801323e:	4912      	ldr	r1, [pc, #72]	; (8013288 <MX_USB_DEVICE_Init+0x50>)
 8013240:	4812      	ldr	r0, [pc, #72]	; (801328c <MX_USB_DEVICE_Init+0x54>)
 8013242:	f7fa fe27 	bl	800de94 <USBD_Init>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d001      	beq.n	8013250 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801324c:	f7ef fa82 	bl	8002754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8013250:	490f      	ldr	r1, [pc, #60]	; (8013290 <MX_USB_DEVICE_Init+0x58>)
 8013252:	480e      	ldr	r0, [pc, #56]	; (801328c <MX_USB_DEVICE_Init+0x54>)
 8013254:	f7fa fe49 	bl	800deea <USBD_RegisterClass>
 8013258:	4603      	mov	r3, r0
 801325a:	2b00      	cmp	r3, #0
 801325c:	d001      	beq.n	8013262 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801325e:	f7ef fa79 	bl	8002754 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8013262:	490c      	ldr	r1, [pc, #48]	; (8013294 <MX_USB_DEVICE_Init+0x5c>)
 8013264:	4809      	ldr	r0, [pc, #36]	; (801328c <MX_USB_DEVICE_Init+0x54>)
 8013266:	f7fa fdff 	bl	800de68 <USBD_CUSTOM_HID_RegisterInterface>
 801326a:	4603      	mov	r3, r0
 801326c:	2b00      	cmp	r3, #0
 801326e:	d001      	beq.n	8013274 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013270:	f7ef fa70 	bl	8002754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013274:	4805      	ldr	r0, [pc, #20]	; (801328c <MX_USB_DEVICE_Init+0x54>)
 8013276:	f7fa fe51 	bl	800df1c <USBD_Start>
 801327a:	4603      	mov	r3, r0
 801327c:	2b00      	cmp	r3, #0
 801327e:	d001      	beq.n	8013284 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013280:	f7ef fa68 	bl	8002754 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013284:	bf00      	nop
 8013286:	bd80      	pop	{r7, pc}
 8013288:	200000dc 	.word	0x200000dc
 801328c:	20001db0 	.word	0x20001db0
 8013290:	2000009c 	.word	0x2000009c
 8013294:	2000207c 	.word	0x2000207c

08013298 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	4603      	mov	r3, r0
 80132a0:	6039      	str	r1, [r7, #0]
 80132a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	2212      	movs	r2, #18
 80132a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80132aa:	4b03      	ldr	r3, [pc, #12]	; (80132b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	370c      	adds	r7, #12
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bc80      	pop	{r7}
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop
 80132b8:	200000f8 	.word	0x200000f8

080132bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	4603      	mov	r3, r0
 80132c4:	6039      	str	r1, [r7, #0]
 80132c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	2204      	movs	r2, #4
 80132cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80132ce:	4b03      	ldr	r3, [pc, #12]	; (80132dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bc80      	pop	{r7}
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	2000010c 	.word	0x2000010c

080132e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	4603      	mov	r3, r0
 80132e8:	6039      	str	r1, [r7, #0]
 80132ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80132ec:	79fb      	ldrb	r3, [r7, #7]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d105      	bne.n	80132fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80132f2:	683a      	ldr	r2, [r7, #0]
 80132f4:	4907      	ldr	r1, [pc, #28]	; (8013314 <USBD_FS_ProductStrDescriptor+0x34>)
 80132f6:	4808      	ldr	r0, [pc, #32]	; (8013318 <USBD_FS_ProductStrDescriptor+0x38>)
 80132f8:	f7fb fd88 	bl	800ee0c <USBD_GetString>
 80132fc:	e004      	b.n	8013308 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80132fe:	683a      	ldr	r2, [r7, #0]
 8013300:	4904      	ldr	r1, [pc, #16]	; (8013314 <USBD_FS_ProductStrDescriptor+0x34>)
 8013302:	4805      	ldr	r0, [pc, #20]	; (8013318 <USBD_FS_ProductStrDescriptor+0x38>)
 8013304:	f7fb fd82 	bl	800ee0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013308:	4b02      	ldr	r3, [pc, #8]	; (8013314 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801330a:	4618      	mov	r0, r3
 801330c:	3708      	adds	r7, #8
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
 8013312:	bf00      	nop
 8013314:	2000208c 	.word	0x2000208c
 8013318:	08016958 	.word	0x08016958

0801331c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	4603      	mov	r3, r0
 8013324:	6039      	str	r1, [r7, #0]
 8013326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013328:	683a      	ldr	r2, [r7, #0]
 801332a:	4904      	ldr	r1, [pc, #16]	; (801333c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801332c:	4804      	ldr	r0, [pc, #16]	; (8013340 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801332e:	f7fb fd6d 	bl	800ee0c <USBD_GetString>
  return USBD_StrDesc;
 8013332:	4b02      	ldr	r3, [pc, #8]	; (801333c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	2000208c 	.word	0x2000208c
 8013340:	0801696c 	.word	0x0801696c

08013344 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	4603      	mov	r3, r0
 801334c:	6039      	str	r1, [r7, #0]
 801334e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	221a      	movs	r2, #26
 8013354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013356:	f000 f843 	bl	80133e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801335a:	4b02      	ldr	r3, [pc, #8]	; (8013364 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801335c:	4618      	mov	r0, r3
 801335e:	3708      	adds	r7, #8
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	20000110 	.word	0x20000110

08013368 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
 801336e:	4603      	mov	r3, r0
 8013370:	6039      	str	r1, [r7, #0]
 8013372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013374:	79fb      	ldrb	r3, [r7, #7]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d105      	bne.n	8013386 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801337a:	683a      	ldr	r2, [r7, #0]
 801337c:	4907      	ldr	r1, [pc, #28]	; (801339c <USBD_FS_ConfigStrDescriptor+0x34>)
 801337e:	4808      	ldr	r0, [pc, #32]	; (80133a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013380:	f7fb fd44 	bl	800ee0c <USBD_GetString>
 8013384:	e004      	b.n	8013390 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013386:	683a      	ldr	r2, [r7, #0]
 8013388:	4904      	ldr	r1, [pc, #16]	; (801339c <USBD_FS_ConfigStrDescriptor+0x34>)
 801338a:	4805      	ldr	r0, [pc, #20]	; (80133a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801338c:	f7fb fd3e 	bl	800ee0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013390:	4b02      	ldr	r3, [pc, #8]	; (801339c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013392:	4618      	mov	r0, r3
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	2000208c 	.word	0x2000208c
 80133a0:	0801697c 	.word	0x0801697c

080133a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	4603      	mov	r3, r0
 80133ac:	6039      	str	r1, [r7, #0]
 80133ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80133b0:	79fb      	ldrb	r3, [r7, #7]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d105      	bne.n	80133c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80133b6:	683a      	ldr	r2, [r7, #0]
 80133b8:	4907      	ldr	r1, [pc, #28]	; (80133d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80133ba:	4808      	ldr	r0, [pc, #32]	; (80133dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80133bc:	f7fb fd26 	bl	800ee0c <USBD_GetString>
 80133c0:	e004      	b.n	80133cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80133c2:	683a      	ldr	r2, [r7, #0]
 80133c4:	4904      	ldr	r1, [pc, #16]	; (80133d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80133c6:	4805      	ldr	r0, [pc, #20]	; (80133dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80133c8:	f7fb fd20 	bl	800ee0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80133cc:	4b02      	ldr	r3, [pc, #8]	; (80133d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	2000208c 	.word	0x2000208c
 80133dc:	08016988 	.word	0x08016988

080133e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80133e6:	4b0f      	ldr	r3, [pc, #60]	; (8013424 <Get_SerialNum+0x44>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80133ec:	4b0e      	ldr	r3, [pc, #56]	; (8013428 <Get_SerialNum+0x48>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80133f2:	4b0e      	ldr	r3, [pc, #56]	; (801342c <Get_SerialNum+0x4c>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80133f8:	68fa      	ldr	r2, [r7, #12]
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	4413      	add	r3, r2
 80133fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d009      	beq.n	801341a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013406:	2208      	movs	r2, #8
 8013408:	4909      	ldr	r1, [pc, #36]	; (8013430 <Get_SerialNum+0x50>)
 801340a:	68f8      	ldr	r0, [r7, #12]
 801340c:	f000 f814 	bl	8013438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013410:	2204      	movs	r2, #4
 8013412:	4908      	ldr	r1, [pc, #32]	; (8013434 <Get_SerialNum+0x54>)
 8013414:	68b8      	ldr	r0, [r7, #8]
 8013416:	f000 f80f 	bl	8013438 <IntToUnicode>
  }
}
 801341a:	bf00      	nop
 801341c:	3710      	adds	r7, #16
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	1ffff7e8 	.word	0x1ffff7e8
 8013428:	1ffff7ec 	.word	0x1ffff7ec
 801342c:	1ffff7f0 	.word	0x1ffff7f0
 8013430:	20000112 	.word	0x20000112
 8013434:	20000122 	.word	0x20000122

08013438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013438:	b480      	push	{r7}
 801343a:	b087      	sub	sp, #28
 801343c:	af00      	add	r7, sp, #0
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	60b9      	str	r1, [r7, #8]
 8013442:	4613      	mov	r3, r2
 8013444:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013446:	2300      	movs	r3, #0
 8013448:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801344a:	2300      	movs	r3, #0
 801344c:	75fb      	strb	r3, [r7, #23]
 801344e:	e027      	b.n	80134a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	0f1b      	lsrs	r3, r3, #28
 8013454:	2b09      	cmp	r3, #9
 8013456:	d80b      	bhi.n	8013470 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	0f1b      	lsrs	r3, r3, #28
 801345c:	b2da      	uxtb	r2, r3
 801345e:	7dfb      	ldrb	r3, [r7, #23]
 8013460:	005b      	lsls	r3, r3, #1
 8013462:	4619      	mov	r1, r3
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	440b      	add	r3, r1
 8013468:	3230      	adds	r2, #48	; 0x30
 801346a:	b2d2      	uxtb	r2, r2
 801346c:	701a      	strb	r2, [r3, #0]
 801346e:	e00a      	b.n	8013486 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	0f1b      	lsrs	r3, r3, #28
 8013474:	b2da      	uxtb	r2, r3
 8013476:	7dfb      	ldrb	r3, [r7, #23]
 8013478:	005b      	lsls	r3, r3, #1
 801347a:	4619      	mov	r1, r3
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	440b      	add	r3, r1
 8013480:	3237      	adds	r2, #55	; 0x37
 8013482:	b2d2      	uxtb	r2, r2
 8013484:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	011b      	lsls	r3, r3, #4
 801348a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801348c:	7dfb      	ldrb	r3, [r7, #23]
 801348e:	005b      	lsls	r3, r3, #1
 8013490:	3301      	adds	r3, #1
 8013492:	68ba      	ldr	r2, [r7, #8]
 8013494:	4413      	add	r3, r2
 8013496:	2200      	movs	r2, #0
 8013498:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801349a:	7dfb      	ldrb	r3, [r7, #23]
 801349c:	3301      	adds	r3, #1
 801349e:	75fb      	strb	r3, [r7, #23]
 80134a0:	7dfa      	ldrb	r2, [r7, #23]
 80134a2:	79fb      	ldrb	r3, [r7, #7]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d3d3      	bcc.n	8013450 <IntToUnicode+0x18>
  }
}
 80134a8:	bf00      	nop
 80134aa:	bf00      	nop
 80134ac:	371c      	adds	r7, #28
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bc80      	pop	{r7}
 80134b2:	4770      	bx	lr

080134b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b084      	sub	sp, #16
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4a0d      	ldr	r2, [pc, #52]	; (80134f8 <HAL_PCD_MspInit+0x44>)
 80134c2:	4293      	cmp	r3, r2
 80134c4:	d113      	bne.n	80134ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80134c6:	4b0d      	ldr	r3, [pc, #52]	; (80134fc <HAL_PCD_MspInit+0x48>)
 80134c8:	69db      	ldr	r3, [r3, #28]
 80134ca:	4a0c      	ldr	r2, [pc, #48]	; (80134fc <HAL_PCD_MspInit+0x48>)
 80134cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80134d0:	61d3      	str	r3, [r2, #28]
 80134d2:	4b0a      	ldr	r3, [pc, #40]	; (80134fc <HAL_PCD_MspInit+0x48>)
 80134d4:	69db      	ldr	r3, [r3, #28]
 80134d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80134da:	60fb      	str	r3, [r7, #12]
 80134dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80134de:	2200      	movs	r2, #0
 80134e0:	2105      	movs	r1, #5
 80134e2:	2014      	movs	r0, #20
 80134e4:	f7f0 fbdf 	bl	8003ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80134e8:	2014      	movs	r0, #20
 80134ea:	f7f0 fbf8 	bl	8003cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80134ee:	bf00      	nop
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	40005c00 	.word	0x40005c00
 80134fc:	40021000 	.word	0x40021000

08013500 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8013514:	4619      	mov	r1, r3
 8013516:	4610      	mov	r0, r2
 8013518:	f7fa fd48 	bl	800dfac <USBD_LL_SetupStage>
}
 801351c:	bf00      	nop
 801351e:	3708      	adds	r7, #8
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b082      	sub	sp, #8
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	460b      	mov	r3, r1
 801352e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8013536:	78fa      	ldrb	r2, [r7, #3]
 8013538:	6879      	ldr	r1, [r7, #4]
 801353a:	4613      	mov	r3, r2
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	4413      	add	r3, r2
 8013540:	00db      	lsls	r3, r3, #3
 8013542:	440b      	add	r3, r1
 8013544:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	78fb      	ldrb	r3, [r7, #3]
 801354c:	4619      	mov	r1, r3
 801354e:	f7fa fd7a 	bl	800e046 <USBD_LL_DataOutStage>
}
 8013552:	bf00      	nop
 8013554:	3708      	adds	r7, #8
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}

0801355a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801355a:	b580      	push	{r7, lr}
 801355c:	b082      	sub	sp, #8
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
 8013562:	460b      	mov	r3, r1
 8013564:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801356c:	78fa      	ldrb	r2, [r7, #3]
 801356e:	6879      	ldr	r1, [r7, #4]
 8013570:	4613      	mov	r3, r2
 8013572:	009b      	lsls	r3, r3, #2
 8013574:	4413      	add	r3, r2
 8013576:	00db      	lsls	r3, r3, #3
 8013578:	440b      	add	r3, r1
 801357a:	333c      	adds	r3, #60	; 0x3c
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	78fb      	ldrb	r3, [r7, #3]
 8013580:	4619      	mov	r1, r3
 8013582:	f7fa fdd1 	bl	800e128 <USBD_LL_DataInStage>
}
 8013586:	bf00      	nop
 8013588:	3708      	adds	r7, #8
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}

0801358e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801358e:	b580      	push	{r7, lr}
 8013590:	b082      	sub	sp, #8
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801359c:	4618      	mov	r0, r3
 801359e:	f7fa fee1 	bl	800e364 <USBD_LL_SOF>
}
 80135a2:	bf00      	nop
 80135a4:	3708      	adds	r7, #8
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}

080135aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b084      	sub	sp, #16
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80135b2:	2301      	movs	r3, #1
 80135b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	2b02      	cmp	r3, #2
 80135bc:	d001      	beq.n	80135c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80135be:	f7ef f8c9 	bl	8002754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80135c8:	7bfa      	ldrb	r2, [r7, #15]
 80135ca:	4611      	mov	r1, r2
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7fa fe91 	bl	800e2f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fa fe4a 	bl	800e272 <USBD_LL_Reset>
}
 80135de:	bf00      	nop
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
	...

080135e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7fa fe8b 	bl	800e312 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	699b      	ldr	r3, [r3, #24]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d005      	beq.n	8013610 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013604:	4b04      	ldr	r3, [pc, #16]	; (8013618 <HAL_PCD_SuspendCallback+0x30>)
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	4a03      	ldr	r2, [pc, #12]	; (8013618 <HAL_PCD_SuspendCallback+0x30>)
 801360a:	f043 0306 	orr.w	r3, r3, #6
 801360e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013610:	bf00      	nop
 8013612:	3708      	adds	r7, #8
 8013614:	46bd      	mov	sp, r7
 8013616:	bd80      	pop	{r7, pc}
 8013618:	e000ed00 	.word	0xe000ed00

0801361c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801362a:	4618      	mov	r0, r3
 801362c:	f7fa fe85 	bl	800e33a <USBD_LL_Resume>
}
 8013630:	bf00      	nop
 8013632:	3708      	adds	r7, #8
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b082      	sub	sp, #8
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8013640:	4a23      	ldr	r2, [pc, #140]	; (80136d0 <USBD_LL_Init+0x98>)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	4a21      	ldr	r2, [pc, #132]	; (80136d0 <USBD_LL_Init+0x98>)
 801364c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8013650:	4b1f      	ldr	r3, [pc, #124]	; (80136d0 <USBD_LL_Init+0x98>)
 8013652:	4a20      	ldr	r2, [pc, #128]	; (80136d4 <USBD_LL_Init+0x9c>)
 8013654:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013656:	4b1e      	ldr	r3, [pc, #120]	; (80136d0 <USBD_LL_Init+0x98>)
 8013658:	2208      	movs	r2, #8
 801365a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801365c:	4b1c      	ldr	r3, [pc, #112]	; (80136d0 <USBD_LL_Init+0x98>)
 801365e:	2202      	movs	r2, #2
 8013660:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013662:	4b1b      	ldr	r3, [pc, #108]	; (80136d0 <USBD_LL_Init+0x98>)
 8013664:	2200      	movs	r2, #0
 8013666:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013668:	4b19      	ldr	r3, [pc, #100]	; (80136d0 <USBD_LL_Init+0x98>)
 801366a:	2200      	movs	r2, #0
 801366c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801366e:	4b18      	ldr	r3, [pc, #96]	; (80136d0 <USBD_LL_Init+0x98>)
 8013670:	2200      	movs	r2, #0
 8013672:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013674:	4816      	ldr	r0, [pc, #88]	; (80136d0 <USBD_LL_Init+0x98>)
 8013676:	f7f1 fcfb 	bl	8005070 <HAL_PCD_Init>
 801367a:	4603      	mov	r3, r0
 801367c:	2b00      	cmp	r3, #0
 801367e:	d001      	beq.n	8013684 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8013680:	f7ef f868 	bl	8002754 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801368a:	2318      	movs	r3, #24
 801368c:	2200      	movs	r2, #0
 801368e:	2100      	movs	r1, #0
 8013690:	f7f3 fa03 	bl	8006a9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801369a:	2358      	movs	r3, #88	; 0x58
 801369c:	2200      	movs	r2, #0
 801369e:	2180      	movs	r1, #128	; 0x80
 80136a0:	f7f3 f9fb 	bl	8006a9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80136aa:	2398      	movs	r3, #152	; 0x98
 80136ac:	2200      	movs	r2, #0
 80136ae:	2181      	movs	r1, #129	; 0x81
 80136b0:	f7f3 f9f3 	bl	8006a9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80136ba:	23d8      	movs	r3, #216	; 0xd8
 80136bc:	2200      	movs	r2, #0
 80136be:	2102      	movs	r1, #2
 80136c0:	f7f3 f9eb 	bl	8006a9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80136c4:	2300      	movs	r3, #0
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3708      	adds	r7, #8
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	2000228c 	.word	0x2000228c
 80136d4:	40005c00 	.word	0x40005c00

080136d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b084      	sub	sp, #16
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136e0:	2300      	movs	r3, #0
 80136e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136e4:	2300      	movs	r3, #0
 80136e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f1 fdbd 	bl	800526e <HAL_PCD_Start>
 80136f4:	4603      	mov	r3, r0
 80136f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136f8:	7bfb      	ldrb	r3, [r7, #15]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f000 f93c 	bl	8013978 <USBD_Get_USB_Status>
 8013700:	4603      	mov	r3, r0
 8013702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013704:	7bbb      	ldrb	r3, [r7, #14]
}
 8013706:	4618      	mov	r0, r3
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}

0801370e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801370e:	b580      	push	{r7, lr}
 8013710:	b084      	sub	sp, #16
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
 8013716:	4608      	mov	r0, r1
 8013718:	4611      	mov	r1, r2
 801371a:	461a      	mov	r2, r3
 801371c:	4603      	mov	r3, r0
 801371e:	70fb      	strb	r3, [r7, #3]
 8013720:	460b      	mov	r3, r1
 8013722:	70bb      	strb	r3, [r7, #2]
 8013724:	4613      	mov	r3, r2
 8013726:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013728:	2300      	movs	r3, #0
 801372a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801372c:	2300      	movs	r3, #0
 801372e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013736:	78bb      	ldrb	r3, [r7, #2]
 8013738:	883a      	ldrh	r2, [r7, #0]
 801373a:	78f9      	ldrb	r1, [r7, #3]
 801373c:	f7f1 ff12 	bl	8005564 <HAL_PCD_EP_Open>
 8013740:	4603      	mov	r3, r0
 8013742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013744:	7bfb      	ldrb	r3, [r7, #15]
 8013746:	4618      	mov	r0, r3
 8013748:	f000 f916 	bl	8013978 <USBD_Get_USB_Status>
 801374c:	4603      	mov	r3, r0
 801374e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013750:	7bbb      	ldrb	r3, [r7, #14]
}
 8013752:	4618      	mov	r0, r3
 8013754:	3710      	adds	r7, #16
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}

0801375a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801375a:	b580      	push	{r7, lr}
 801375c:	b084      	sub	sp, #16
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
 8013762:	460b      	mov	r3, r1
 8013764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013766:	2300      	movs	r3, #0
 8013768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801376a:	2300      	movs	r3, #0
 801376c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013774:	78fa      	ldrb	r2, [r7, #3]
 8013776:	4611      	mov	r1, r2
 8013778:	4618      	mov	r0, r3
 801377a:	f7f1 ff50 	bl	800561e <HAL_PCD_EP_Close>
 801377e:	4603      	mov	r3, r0
 8013780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013782:	7bfb      	ldrb	r3, [r7, #15]
 8013784:	4618      	mov	r0, r3
 8013786:	f000 f8f7 	bl	8013978 <USBD_Get_USB_Status>
 801378a:	4603      	mov	r3, r0
 801378c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801378e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013790:	4618      	mov	r0, r3
 8013792:	3710      	adds	r7, #16
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	460b      	mov	r3, r1
 80137a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137a4:	2300      	movs	r3, #0
 80137a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137a8:	2300      	movs	r3, #0
 80137aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137b2:	78fa      	ldrb	r2, [r7, #3]
 80137b4:	4611      	mov	r1, r2
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7f1 ffe1 	bl	800577e <HAL_PCD_EP_SetStall>
 80137bc:	4603      	mov	r3, r0
 80137be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137c0:	7bfb      	ldrb	r3, [r7, #15]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f000 f8d8 	bl	8013978 <USBD_Get_USB_Status>
 80137c8:	4603      	mov	r3, r0
 80137ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3710      	adds	r7, #16
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}

080137d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80137d6:	b580      	push	{r7, lr}
 80137d8:	b084      	sub	sp, #16
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
 80137de:	460b      	mov	r3, r1
 80137e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137e2:	2300      	movs	r3, #0
 80137e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137e6:	2300      	movs	r3, #0
 80137e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137f0:	78fa      	ldrb	r2, [r7, #3]
 80137f2:	4611      	mov	r1, r2
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7f2 f822 	bl	800583e <HAL_PCD_EP_ClrStall>
 80137fa:	4603      	mov	r3, r0
 80137fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137fe:	7bfb      	ldrb	r3, [r7, #15]
 8013800:	4618      	mov	r0, r3
 8013802:	f000 f8b9 	bl	8013978 <USBD_Get_USB_Status>
 8013806:	4603      	mov	r3, r0
 8013808:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801380a:	7bbb      	ldrb	r3, [r7, #14]
}
 801380c:	4618      	mov	r0, r3
 801380e:	3710      	adds	r7, #16
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	460b      	mov	r3, r1
 801381e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013826:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801382c:	2b00      	cmp	r3, #0
 801382e:	da0c      	bge.n	801384a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013830:	78fb      	ldrb	r3, [r7, #3]
 8013832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013836:	68f9      	ldr	r1, [r7, #12]
 8013838:	1c5a      	adds	r2, r3, #1
 801383a:	4613      	mov	r3, r2
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	4413      	add	r3, r2
 8013840:	00db      	lsls	r3, r3, #3
 8013842:	440b      	add	r3, r1
 8013844:	3302      	adds	r3, #2
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	e00b      	b.n	8013862 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801384a:	78fb      	ldrb	r3, [r7, #3]
 801384c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013850:	68f9      	ldr	r1, [r7, #12]
 8013852:	4613      	mov	r3, r2
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	4413      	add	r3, r2
 8013858:	00db      	lsls	r3, r3, #3
 801385a:	440b      	add	r3, r1
 801385c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013860:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013862:	4618      	mov	r0, r3
 8013864:	3714      	adds	r7, #20
 8013866:	46bd      	mov	sp, r7
 8013868:	bc80      	pop	{r7}
 801386a:	4770      	bx	lr

0801386c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b084      	sub	sp, #16
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	460b      	mov	r3, r1
 8013876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013878:	2300      	movs	r3, #0
 801387a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801387c:	2300      	movs	r3, #0
 801387e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013886:	78fa      	ldrb	r2, [r7, #3]
 8013888:	4611      	mov	r1, r2
 801388a:	4618      	mov	r0, r3
 801388c:	f7f1 fe45 	bl	800551a <HAL_PCD_SetAddress>
 8013890:	4603      	mov	r3, r0
 8013892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013894:	7bfb      	ldrb	r3, [r7, #15]
 8013896:	4618      	mov	r0, r3
 8013898:	f000 f86e 	bl	8013978 <USBD_Get_USB_Status>
 801389c:	4603      	mov	r3, r0
 801389e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3710      	adds	r7, #16
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}

080138aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b086      	sub	sp, #24
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	60f8      	str	r0, [r7, #12]
 80138b2:	607a      	str	r2, [r7, #4]
 80138b4:	461a      	mov	r2, r3
 80138b6:	460b      	mov	r3, r1
 80138b8:	72fb      	strb	r3, [r7, #11]
 80138ba:	4613      	mov	r3, r2
 80138bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138be:	2300      	movs	r3, #0
 80138c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138c2:	2300      	movs	r3, #0
 80138c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80138cc:	893b      	ldrh	r3, [r7, #8]
 80138ce:	7af9      	ldrb	r1, [r7, #11]
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	f7f1 ff1d 	bl	8005710 <HAL_PCD_EP_Transmit>
 80138d6:	4603      	mov	r3, r0
 80138d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138da:	7dfb      	ldrb	r3, [r7, #23]
 80138dc:	4618      	mov	r0, r3
 80138de:	f000 f84b 	bl	8013978 <USBD_Get_USB_Status>
 80138e2:	4603      	mov	r3, r0
 80138e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80138e6:	7dbb      	ldrb	r3, [r7, #22]
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3718      	adds	r7, #24
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b086      	sub	sp, #24
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	607a      	str	r2, [r7, #4]
 80138fa:	461a      	mov	r2, r3
 80138fc:	460b      	mov	r3, r1
 80138fe:	72fb      	strb	r3, [r7, #11]
 8013900:	4613      	mov	r3, r2
 8013902:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013904:	2300      	movs	r3, #0
 8013906:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013908:	2300      	movs	r3, #0
 801390a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013912:	893b      	ldrh	r3, [r7, #8]
 8013914:	7af9      	ldrb	r1, [r7, #11]
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	f7f1 fec9 	bl	80056ae <HAL_PCD_EP_Receive>
 801391c:	4603      	mov	r3, r0
 801391e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013920:	7dfb      	ldrb	r3, [r7, #23]
 8013922:	4618      	mov	r0, r3
 8013924:	f000 f828 	bl	8013978 <USBD_Get_USB_Status>
 8013928:	4603      	mov	r3, r0
 801392a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801392c:	7dbb      	ldrb	r3, [r7, #22]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3718      	adds	r7, #24
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
	...

08013938 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013938:	b480      	push	{r7}
 801393a:	b083      	sub	sp, #12
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8013940:	4b02      	ldr	r3, [pc, #8]	; (801394c <USBD_static_malloc+0x14>)
}
 8013942:	4618      	mov	r0, r3
 8013944:	370c      	adds	r7, #12
 8013946:	46bd      	mov	sp, r7
 8013948:	bc80      	pop	{r7}
 801394a:	4770      	bx	lr
 801394c:	2000257c 	.word	0x2000257c

08013950 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013950:	b480      	push	{r7}
 8013952:	b083      	sub	sp, #12
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]

}
 8013958:	bf00      	nop
 801395a:	370c      	adds	r7, #12
 801395c:	46bd      	mov	sp, r7
 801395e:	bc80      	pop	{r7}
 8013960:	4770      	bx	lr

08013962 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013962:	b480      	push	{r7}
 8013964:	b083      	sub	sp, #12
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
 801396a:	460b      	mov	r3, r1
 801396c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801396e:	bf00      	nop
 8013970:	370c      	adds	r7, #12
 8013972:	46bd      	mov	sp, r7
 8013974:	bc80      	pop	{r7}
 8013976:	4770      	bx	lr

08013978 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013978:	b480      	push	{r7}
 801397a:	b085      	sub	sp, #20
 801397c:	af00      	add	r7, sp, #0
 801397e:	4603      	mov	r3, r0
 8013980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013982:	2300      	movs	r3, #0
 8013984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013986:	79fb      	ldrb	r3, [r7, #7]
 8013988:	2b03      	cmp	r3, #3
 801398a:	d817      	bhi.n	80139bc <USBD_Get_USB_Status+0x44>
 801398c:	a201      	add	r2, pc, #4	; (adr r2, 8013994 <USBD_Get_USB_Status+0x1c>)
 801398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013992:	bf00      	nop
 8013994:	080139a5 	.word	0x080139a5
 8013998:	080139ab 	.word	0x080139ab
 801399c:	080139b1 	.word	0x080139b1
 80139a0:	080139b7 	.word	0x080139b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80139a4:	2300      	movs	r3, #0
 80139a6:	73fb      	strb	r3, [r7, #15]
    break;
 80139a8:	e00b      	b.n	80139c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80139aa:	2302      	movs	r3, #2
 80139ac:	73fb      	strb	r3, [r7, #15]
    break;
 80139ae:	e008      	b.n	80139c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80139b0:	2301      	movs	r3, #1
 80139b2:	73fb      	strb	r3, [r7, #15]
    break;
 80139b4:	e005      	b.n	80139c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80139b6:	2302      	movs	r3, #2
 80139b8:	73fb      	strb	r3, [r7, #15]
    break;
 80139ba:	e002      	b.n	80139c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80139bc:	2302      	movs	r3, #2
 80139be:	73fb      	strb	r3, [r7, #15]
    break;
 80139c0:	bf00      	nop
  }
  return usb_status;
 80139c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3714      	adds	r7, #20
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bc80      	pop	{r7}
 80139cc:	4770      	bx	lr
 80139ce:	bf00      	nop

080139d0 <__errno>:
 80139d0:	4b01      	ldr	r3, [pc, #4]	; (80139d8 <__errno+0x8>)
 80139d2:	6818      	ldr	r0, [r3, #0]
 80139d4:	4770      	bx	lr
 80139d6:	bf00      	nop
 80139d8:	2000012c 	.word	0x2000012c

080139dc <std>:
 80139dc:	2300      	movs	r3, #0
 80139de:	b510      	push	{r4, lr}
 80139e0:	4604      	mov	r4, r0
 80139e2:	e9c0 3300 	strd	r3, r3, [r0]
 80139e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139ea:	6083      	str	r3, [r0, #8]
 80139ec:	8181      	strh	r1, [r0, #12]
 80139ee:	6643      	str	r3, [r0, #100]	; 0x64
 80139f0:	81c2      	strh	r2, [r0, #14]
 80139f2:	6183      	str	r3, [r0, #24]
 80139f4:	4619      	mov	r1, r3
 80139f6:	2208      	movs	r2, #8
 80139f8:	305c      	adds	r0, #92	; 0x5c
 80139fa:	f000 f92b 	bl	8013c54 <memset>
 80139fe:	4b05      	ldr	r3, [pc, #20]	; (8013a14 <std+0x38>)
 8013a00:	6224      	str	r4, [r4, #32]
 8013a02:	6263      	str	r3, [r4, #36]	; 0x24
 8013a04:	4b04      	ldr	r3, [pc, #16]	; (8013a18 <std+0x3c>)
 8013a06:	62a3      	str	r3, [r4, #40]	; 0x28
 8013a08:	4b04      	ldr	r3, [pc, #16]	; (8013a1c <std+0x40>)
 8013a0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013a0c:	4b04      	ldr	r3, [pc, #16]	; (8013a20 <std+0x44>)
 8013a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8013a10:	bd10      	pop	{r4, pc}
 8013a12:	bf00      	nop
 8013a14:	080146fd 	.word	0x080146fd
 8013a18:	0801471f 	.word	0x0801471f
 8013a1c:	08014757 	.word	0x08014757
 8013a20:	0801477b 	.word	0x0801477b

08013a24 <_cleanup_r>:
 8013a24:	4901      	ldr	r1, [pc, #4]	; (8013a2c <_cleanup_r+0x8>)
 8013a26:	f000 b8af 	b.w	8013b88 <_fwalk_reent>
 8013a2a:	bf00      	nop
 8013a2c:	08015631 	.word	0x08015631

08013a30 <__sfmoreglue>:
 8013a30:	2268      	movs	r2, #104	; 0x68
 8013a32:	b570      	push	{r4, r5, r6, lr}
 8013a34:	1e4d      	subs	r5, r1, #1
 8013a36:	4355      	muls	r5, r2
 8013a38:	460e      	mov	r6, r1
 8013a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a3e:	f000 f979 	bl	8013d34 <_malloc_r>
 8013a42:	4604      	mov	r4, r0
 8013a44:	b140      	cbz	r0, 8013a58 <__sfmoreglue+0x28>
 8013a46:	2100      	movs	r1, #0
 8013a48:	e9c0 1600 	strd	r1, r6, [r0]
 8013a4c:	300c      	adds	r0, #12
 8013a4e:	60a0      	str	r0, [r4, #8]
 8013a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013a54:	f000 f8fe 	bl	8013c54 <memset>
 8013a58:	4620      	mov	r0, r4
 8013a5a:	bd70      	pop	{r4, r5, r6, pc}

08013a5c <__sfp_lock_acquire>:
 8013a5c:	4801      	ldr	r0, [pc, #4]	; (8013a64 <__sfp_lock_acquire+0x8>)
 8013a5e:	f000 b8d8 	b.w	8013c12 <__retarget_lock_acquire_recursive>
 8013a62:	bf00      	nop
 8013a64:	20002599 	.word	0x20002599

08013a68 <__sfp_lock_release>:
 8013a68:	4801      	ldr	r0, [pc, #4]	; (8013a70 <__sfp_lock_release+0x8>)
 8013a6a:	f000 b8d3 	b.w	8013c14 <__retarget_lock_release_recursive>
 8013a6e:	bf00      	nop
 8013a70:	20002599 	.word	0x20002599

08013a74 <__sinit_lock_acquire>:
 8013a74:	4801      	ldr	r0, [pc, #4]	; (8013a7c <__sinit_lock_acquire+0x8>)
 8013a76:	f000 b8cc 	b.w	8013c12 <__retarget_lock_acquire_recursive>
 8013a7a:	bf00      	nop
 8013a7c:	2000259a 	.word	0x2000259a

08013a80 <__sinit_lock_release>:
 8013a80:	4801      	ldr	r0, [pc, #4]	; (8013a88 <__sinit_lock_release+0x8>)
 8013a82:	f000 b8c7 	b.w	8013c14 <__retarget_lock_release_recursive>
 8013a86:	bf00      	nop
 8013a88:	2000259a 	.word	0x2000259a

08013a8c <__sinit>:
 8013a8c:	b510      	push	{r4, lr}
 8013a8e:	4604      	mov	r4, r0
 8013a90:	f7ff fff0 	bl	8013a74 <__sinit_lock_acquire>
 8013a94:	69a3      	ldr	r3, [r4, #24]
 8013a96:	b11b      	cbz	r3, 8013aa0 <__sinit+0x14>
 8013a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a9c:	f7ff bff0 	b.w	8013a80 <__sinit_lock_release>
 8013aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8013aa6:	4b13      	ldr	r3, [pc, #76]	; (8013af4 <__sinit+0x68>)
 8013aa8:	4a13      	ldr	r2, [pc, #76]	; (8013af8 <__sinit+0x6c>)
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8013aae:	42a3      	cmp	r3, r4
 8013ab0:	bf08      	it	eq
 8013ab2:	2301      	moveq	r3, #1
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	bf08      	it	eq
 8013ab8:	61a3      	streq	r3, [r4, #24]
 8013aba:	f000 f81f 	bl	8013afc <__sfp>
 8013abe:	6060      	str	r0, [r4, #4]
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	f000 f81b 	bl	8013afc <__sfp>
 8013ac6:	60a0      	str	r0, [r4, #8]
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f000 f817 	bl	8013afc <__sfp>
 8013ace:	2200      	movs	r2, #0
 8013ad0:	2104      	movs	r1, #4
 8013ad2:	60e0      	str	r0, [r4, #12]
 8013ad4:	6860      	ldr	r0, [r4, #4]
 8013ad6:	f7ff ff81 	bl	80139dc <std>
 8013ada:	2201      	movs	r2, #1
 8013adc:	2109      	movs	r1, #9
 8013ade:	68a0      	ldr	r0, [r4, #8]
 8013ae0:	f7ff ff7c 	bl	80139dc <std>
 8013ae4:	2202      	movs	r2, #2
 8013ae6:	2112      	movs	r1, #18
 8013ae8:	68e0      	ldr	r0, [r4, #12]
 8013aea:	f7ff ff77 	bl	80139dc <std>
 8013aee:	2301      	movs	r3, #1
 8013af0:	61a3      	str	r3, [r4, #24]
 8013af2:	e7d1      	b.n	8013a98 <__sinit+0xc>
 8013af4:	0802fcf4 	.word	0x0802fcf4
 8013af8:	08013a25 	.word	0x08013a25

08013afc <__sfp>:
 8013afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afe:	4607      	mov	r7, r0
 8013b00:	f7ff ffac 	bl	8013a5c <__sfp_lock_acquire>
 8013b04:	4b1e      	ldr	r3, [pc, #120]	; (8013b80 <__sfp+0x84>)
 8013b06:	681e      	ldr	r6, [r3, #0]
 8013b08:	69b3      	ldr	r3, [r6, #24]
 8013b0a:	b913      	cbnz	r3, 8013b12 <__sfp+0x16>
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	f7ff ffbd 	bl	8013a8c <__sinit>
 8013b12:	3648      	adds	r6, #72	; 0x48
 8013b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013b18:	3b01      	subs	r3, #1
 8013b1a:	d503      	bpl.n	8013b24 <__sfp+0x28>
 8013b1c:	6833      	ldr	r3, [r6, #0]
 8013b1e:	b30b      	cbz	r3, 8013b64 <__sfp+0x68>
 8013b20:	6836      	ldr	r6, [r6, #0]
 8013b22:	e7f7      	b.n	8013b14 <__sfp+0x18>
 8013b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013b28:	b9d5      	cbnz	r5, 8013b60 <__sfp+0x64>
 8013b2a:	4b16      	ldr	r3, [pc, #88]	; (8013b84 <__sfp+0x88>)
 8013b2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b30:	60e3      	str	r3, [r4, #12]
 8013b32:	6665      	str	r5, [r4, #100]	; 0x64
 8013b34:	f000 f86c 	bl	8013c10 <__retarget_lock_init_recursive>
 8013b38:	f7ff ff96 	bl	8013a68 <__sfp_lock_release>
 8013b3c:	2208      	movs	r2, #8
 8013b3e:	4629      	mov	r1, r5
 8013b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013b48:	6025      	str	r5, [r4, #0]
 8013b4a:	61a5      	str	r5, [r4, #24]
 8013b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013b50:	f000 f880 	bl	8013c54 <memset>
 8013b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b60:	3468      	adds	r4, #104	; 0x68
 8013b62:	e7d9      	b.n	8013b18 <__sfp+0x1c>
 8013b64:	2104      	movs	r1, #4
 8013b66:	4638      	mov	r0, r7
 8013b68:	f7ff ff62 	bl	8013a30 <__sfmoreglue>
 8013b6c:	4604      	mov	r4, r0
 8013b6e:	6030      	str	r0, [r6, #0]
 8013b70:	2800      	cmp	r0, #0
 8013b72:	d1d5      	bne.n	8013b20 <__sfp+0x24>
 8013b74:	f7ff ff78 	bl	8013a68 <__sfp_lock_release>
 8013b78:	230c      	movs	r3, #12
 8013b7a:	603b      	str	r3, [r7, #0]
 8013b7c:	e7ee      	b.n	8013b5c <__sfp+0x60>
 8013b7e:	bf00      	nop
 8013b80:	0802fcf4 	.word	0x0802fcf4
 8013b84:	ffff0001 	.word	0xffff0001

08013b88 <_fwalk_reent>:
 8013b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b8c:	4606      	mov	r6, r0
 8013b8e:	4688      	mov	r8, r1
 8013b90:	2700      	movs	r7, #0
 8013b92:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8013b9e:	d505      	bpl.n	8013bac <_fwalk_reent+0x24>
 8013ba0:	6824      	ldr	r4, [r4, #0]
 8013ba2:	2c00      	cmp	r4, #0
 8013ba4:	d1f7      	bne.n	8013b96 <_fwalk_reent+0xe>
 8013ba6:	4638      	mov	r0, r7
 8013ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013bac:	89ab      	ldrh	r3, [r5, #12]
 8013bae:	2b01      	cmp	r3, #1
 8013bb0:	d907      	bls.n	8013bc2 <_fwalk_reent+0x3a>
 8013bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	d003      	beq.n	8013bc2 <_fwalk_reent+0x3a>
 8013bba:	4629      	mov	r1, r5
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	47c0      	blx	r8
 8013bc0:	4307      	orrs	r7, r0
 8013bc2:	3568      	adds	r5, #104	; 0x68
 8013bc4:	e7e9      	b.n	8013b9a <_fwalk_reent+0x12>
	...

08013bc8 <__libc_init_array>:
 8013bc8:	b570      	push	{r4, r5, r6, lr}
 8013bca:	2600      	movs	r6, #0
 8013bcc:	4d0c      	ldr	r5, [pc, #48]	; (8013c00 <__libc_init_array+0x38>)
 8013bce:	4c0d      	ldr	r4, [pc, #52]	; (8013c04 <__libc_init_array+0x3c>)
 8013bd0:	1b64      	subs	r4, r4, r5
 8013bd2:	10a4      	asrs	r4, r4, #2
 8013bd4:	42a6      	cmp	r6, r4
 8013bd6:	d109      	bne.n	8013bec <__libc_init_array+0x24>
 8013bd8:	f002 fe24 	bl	8016824 <_init>
 8013bdc:	2600      	movs	r6, #0
 8013bde:	4d0a      	ldr	r5, [pc, #40]	; (8013c08 <__libc_init_array+0x40>)
 8013be0:	4c0a      	ldr	r4, [pc, #40]	; (8013c0c <__libc_init_array+0x44>)
 8013be2:	1b64      	subs	r4, r4, r5
 8013be4:	10a4      	asrs	r4, r4, #2
 8013be6:	42a6      	cmp	r6, r4
 8013be8:	d105      	bne.n	8013bf6 <__libc_init_array+0x2e>
 8013bea:	bd70      	pop	{r4, r5, r6, pc}
 8013bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bf0:	4798      	blx	r3
 8013bf2:	3601      	adds	r6, #1
 8013bf4:	e7ee      	b.n	8013bd4 <__libc_init_array+0xc>
 8013bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013bfa:	4798      	blx	r3
 8013bfc:	3601      	adds	r6, #1
 8013bfe:	e7f2      	b.n	8013be6 <__libc_init_array+0x1e>
 8013c00:	0803006c 	.word	0x0803006c
 8013c04:	0803006c 	.word	0x0803006c
 8013c08:	0803006c 	.word	0x0803006c
 8013c0c:	08030070 	.word	0x08030070

08013c10 <__retarget_lock_init_recursive>:
 8013c10:	4770      	bx	lr

08013c12 <__retarget_lock_acquire_recursive>:
 8013c12:	4770      	bx	lr

08013c14 <__retarget_lock_release_recursive>:
 8013c14:	4770      	bx	lr
	...

08013c18 <malloc>:
 8013c18:	4b02      	ldr	r3, [pc, #8]	; (8013c24 <malloc+0xc>)
 8013c1a:	4601      	mov	r1, r0
 8013c1c:	6818      	ldr	r0, [r3, #0]
 8013c1e:	f000 b889 	b.w	8013d34 <_malloc_r>
 8013c22:	bf00      	nop
 8013c24:	2000012c 	.word	0x2000012c

08013c28 <free>:
 8013c28:	4b02      	ldr	r3, [pc, #8]	; (8013c34 <free+0xc>)
 8013c2a:	4601      	mov	r1, r0
 8013c2c:	6818      	ldr	r0, [r3, #0]
 8013c2e:	f000 b819 	b.w	8013c64 <_free_r>
 8013c32:	bf00      	nop
 8013c34:	2000012c 	.word	0x2000012c

08013c38 <memcpy>:
 8013c38:	440a      	add	r2, r1
 8013c3a:	4291      	cmp	r1, r2
 8013c3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c40:	d100      	bne.n	8013c44 <memcpy+0xc>
 8013c42:	4770      	bx	lr
 8013c44:	b510      	push	{r4, lr}
 8013c46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c4a:	4291      	cmp	r1, r2
 8013c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c50:	d1f9      	bne.n	8013c46 <memcpy+0xe>
 8013c52:	bd10      	pop	{r4, pc}

08013c54 <memset>:
 8013c54:	4603      	mov	r3, r0
 8013c56:	4402      	add	r2, r0
 8013c58:	4293      	cmp	r3, r2
 8013c5a:	d100      	bne.n	8013c5e <memset+0xa>
 8013c5c:	4770      	bx	lr
 8013c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8013c62:	e7f9      	b.n	8013c58 <memset+0x4>

08013c64 <_free_r>:
 8013c64:	b538      	push	{r3, r4, r5, lr}
 8013c66:	4605      	mov	r5, r0
 8013c68:	2900      	cmp	r1, #0
 8013c6a:	d040      	beq.n	8013cee <_free_r+0x8a>
 8013c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c70:	1f0c      	subs	r4, r1, #4
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	bfb8      	it	lt
 8013c76:	18e4      	addlt	r4, r4, r3
 8013c78:	f001 fd3a 	bl	80156f0 <__malloc_lock>
 8013c7c:	4a1c      	ldr	r2, [pc, #112]	; (8013cf0 <_free_r+0x8c>)
 8013c7e:	6813      	ldr	r3, [r2, #0]
 8013c80:	b933      	cbnz	r3, 8013c90 <_free_r+0x2c>
 8013c82:	6063      	str	r3, [r4, #4]
 8013c84:	6014      	str	r4, [r2, #0]
 8013c86:	4628      	mov	r0, r5
 8013c88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c8c:	f001 bd36 	b.w	80156fc <__malloc_unlock>
 8013c90:	42a3      	cmp	r3, r4
 8013c92:	d908      	bls.n	8013ca6 <_free_r+0x42>
 8013c94:	6820      	ldr	r0, [r4, #0]
 8013c96:	1821      	adds	r1, r4, r0
 8013c98:	428b      	cmp	r3, r1
 8013c9a:	bf01      	itttt	eq
 8013c9c:	6819      	ldreq	r1, [r3, #0]
 8013c9e:	685b      	ldreq	r3, [r3, #4]
 8013ca0:	1809      	addeq	r1, r1, r0
 8013ca2:	6021      	streq	r1, [r4, #0]
 8013ca4:	e7ed      	b.n	8013c82 <_free_r+0x1e>
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	b10b      	cbz	r3, 8013cb0 <_free_r+0x4c>
 8013cac:	42a3      	cmp	r3, r4
 8013cae:	d9fa      	bls.n	8013ca6 <_free_r+0x42>
 8013cb0:	6811      	ldr	r1, [r2, #0]
 8013cb2:	1850      	adds	r0, r2, r1
 8013cb4:	42a0      	cmp	r0, r4
 8013cb6:	d10b      	bne.n	8013cd0 <_free_r+0x6c>
 8013cb8:	6820      	ldr	r0, [r4, #0]
 8013cba:	4401      	add	r1, r0
 8013cbc:	1850      	adds	r0, r2, r1
 8013cbe:	4283      	cmp	r3, r0
 8013cc0:	6011      	str	r1, [r2, #0]
 8013cc2:	d1e0      	bne.n	8013c86 <_free_r+0x22>
 8013cc4:	6818      	ldr	r0, [r3, #0]
 8013cc6:	685b      	ldr	r3, [r3, #4]
 8013cc8:	4401      	add	r1, r0
 8013cca:	6011      	str	r1, [r2, #0]
 8013ccc:	6053      	str	r3, [r2, #4]
 8013cce:	e7da      	b.n	8013c86 <_free_r+0x22>
 8013cd0:	d902      	bls.n	8013cd8 <_free_r+0x74>
 8013cd2:	230c      	movs	r3, #12
 8013cd4:	602b      	str	r3, [r5, #0]
 8013cd6:	e7d6      	b.n	8013c86 <_free_r+0x22>
 8013cd8:	6820      	ldr	r0, [r4, #0]
 8013cda:	1821      	adds	r1, r4, r0
 8013cdc:	428b      	cmp	r3, r1
 8013cde:	bf01      	itttt	eq
 8013ce0:	6819      	ldreq	r1, [r3, #0]
 8013ce2:	685b      	ldreq	r3, [r3, #4]
 8013ce4:	1809      	addeq	r1, r1, r0
 8013ce6:	6021      	streq	r1, [r4, #0]
 8013ce8:	6063      	str	r3, [r4, #4]
 8013cea:	6054      	str	r4, [r2, #4]
 8013cec:	e7cb      	b.n	8013c86 <_free_r+0x22>
 8013cee:	bd38      	pop	{r3, r4, r5, pc}
 8013cf0:	2000259c 	.word	0x2000259c

08013cf4 <sbrk_aligned>:
 8013cf4:	b570      	push	{r4, r5, r6, lr}
 8013cf6:	4e0e      	ldr	r6, [pc, #56]	; (8013d30 <sbrk_aligned+0x3c>)
 8013cf8:	460c      	mov	r4, r1
 8013cfa:	6831      	ldr	r1, [r6, #0]
 8013cfc:	4605      	mov	r5, r0
 8013cfe:	b911      	cbnz	r1, 8013d06 <sbrk_aligned+0x12>
 8013d00:	f000 fcec 	bl	80146dc <_sbrk_r>
 8013d04:	6030      	str	r0, [r6, #0]
 8013d06:	4621      	mov	r1, r4
 8013d08:	4628      	mov	r0, r5
 8013d0a:	f000 fce7 	bl	80146dc <_sbrk_r>
 8013d0e:	1c43      	adds	r3, r0, #1
 8013d10:	d00a      	beq.n	8013d28 <sbrk_aligned+0x34>
 8013d12:	1cc4      	adds	r4, r0, #3
 8013d14:	f024 0403 	bic.w	r4, r4, #3
 8013d18:	42a0      	cmp	r0, r4
 8013d1a:	d007      	beq.n	8013d2c <sbrk_aligned+0x38>
 8013d1c:	1a21      	subs	r1, r4, r0
 8013d1e:	4628      	mov	r0, r5
 8013d20:	f000 fcdc 	bl	80146dc <_sbrk_r>
 8013d24:	3001      	adds	r0, #1
 8013d26:	d101      	bne.n	8013d2c <sbrk_aligned+0x38>
 8013d28:	f04f 34ff 	mov.w	r4, #4294967295
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	bd70      	pop	{r4, r5, r6, pc}
 8013d30:	200025a0 	.word	0x200025a0

08013d34 <_malloc_r>:
 8013d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d38:	1ccd      	adds	r5, r1, #3
 8013d3a:	f025 0503 	bic.w	r5, r5, #3
 8013d3e:	3508      	adds	r5, #8
 8013d40:	2d0c      	cmp	r5, #12
 8013d42:	bf38      	it	cc
 8013d44:	250c      	movcc	r5, #12
 8013d46:	2d00      	cmp	r5, #0
 8013d48:	4607      	mov	r7, r0
 8013d4a:	db01      	blt.n	8013d50 <_malloc_r+0x1c>
 8013d4c:	42a9      	cmp	r1, r5
 8013d4e:	d905      	bls.n	8013d5c <_malloc_r+0x28>
 8013d50:	230c      	movs	r3, #12
 8013d52:	2600      	movs	r6, #0
 8013d54:	603b      	str	r3, [r7, #0]
 8013d56:	4630      	mov	r0, r6
 8013d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d5c:	4e2e      	ldr	r6, [pc, #184]	; (8013e18 <_malloc_r+0xe4>)
 8013d5e:	f001 fcc7 	bl	80156f0 <__malloc_lock>
 8013d62:	6833      	ldr	r3, [r6, #0]
 8013d64:	461c      	mov	r4, r3
 8013d66:	bb34      	cbnz	r4, 8013db6 <_malloc_r+0x82>
 8013d68:	4629      	mov	r1, r5
 8013d6a:	4638      	mov	r0, r7
 8013d6c:	f7ff ffc2 	bl	8013cf4 <sbrk_aligned>
 8013d70:	1c43      	adds	r3, r0, #1
 8013d72:	4604      	mov	r4, r0
 8013d74:	d14d      	bne.n	8013e12 <_malloc_r+0xde>
 8013d76:	6834      	ldr	r4, [r6, #0]
 8013d78:	4626      	mov	r6, r4
 8013d7a:	2e00      	cmp	r6, #0
 8013d7c:	d140      	bne.n	8013e00 <_malloc_r+0xcc>
 8013d7e:	6823      	ldr	r3, [r4, #0]
 8013d80:	4631      	mov	r1, r6
 8013d82:	4638      	mov	r0, r7
 8013d84:	eb04 0803 	add.w	r8, r4, r3
 8013d88:	f000 fca8 	bl	80146dc <_sbrk_r>
 8013d8c:	4580      	cmp	r8, r0
 8013d8e:	d13a      	bne.n	8013e06 <_malloc_r+0xd2>
 8013d90:	6821      	ldr	r1, [r4, #0]
 8013d92:	3503      	adds	r5, #3
 8013d94:	1a6d      	subs	r5, r5, r1
 8013d96:	f025 0503 	bic.w	r5, r5, #3
 8013d9a:	3508      	adds	r5, #8
 8013d9c:	2d0c      	cmp	r5, #12
 8013d9e:	bf38      	it	cc
 8013da0:	250c      	movcc	r5, #12
 8013da2:	4638      	mov	r0, r7
 8013da4:	4629      	mov	r1, r5
 8013da6:	f7ff ffa5 	bl	8013cf4 <sbrk_aligned>
 8013daa:	3001      	adds	r0, #1
 8013dac:	d02b      	beq.n	8013e06 <_malloc_r+0xd2>
 8013dae:	6823      	ldr	r3, [r4, #0]
 8013db0:	442b      	add	r3, r5
 8013db2:	6023      	str	r3, [r4, #0]
 8013db4:	e00e      	b.n	8013dd4 <_malloc_r+0xa0>
 8013db6:	6822      	ldr	r2, [r4, #0]
 8013db8:	1b52      	subs	r2, r2, r5
 8013dba:	d41e      	bmi.n	8013dfa <_malloc_r+0xc6>
 8013dbc:	2a0b      	cmp	r2, #11
 8013dbe:	d916      	bls.n	8013dee <_malloc_r+0xba>
 8013dc0:	1961      	adds	r1, r4, r5
 8013dc2:	42a3      	cmp	r3, r4
 8013dc4:	6025      	str	r5, [r4, #0]
 8013dc6:	bf18      	it	ne
 8013dc8:	6059      	strne	r1, [r3, #4]
 8013dca:	6863      	ldr	r3, [r4, #4]
 8013dcc:	bf08      	it	eq
 8013dce:	6031      	streq	r1, [r6, #0]
 8013dd0:	5162      	str	r2, [r4, r5]
 8013dd2:	604b      	str	r3, [r1, #4]
 8013dd4:	4638      	mov	r0, r7
 8013dd6:	f104 060b 	add.w	r6, r4, #11
 8013dda:	f001 fc8f 	bl	80156fc <__malloc_unlock>
 8013dde:	f026 0607 	bic.w	r6, r6, #7
 8013de2:	1d23      	adds	r3, r4, #4
 8013de4:	1af2      	subs	r2, r6, r3
 8013de6:	d0b6      	beq.n	8013d56 <_malloc_r+0x22>
 8013de8:	1b9b      	subs	r3, r3, r6
 8013dea:	50a3      	str	r3, [r4, r2]
 8013dec:	e7b3      	b.n	8013d56 <_malloc_r+0x22>
 8013dee:	6862      	ldr	r2, [r4, #4]
 8013df0:	42a3      	cmp	r3, r4
 8013df2:	bf0c      	ite	eq
 8013df4:	6032      	streq	r2, [r6, #0]
 8013df6:	605a      	strne	r2, [r3, #4]
 8013df8:	e7ec      	b.n	8013dd4 <_malloc_r+0xa0>
 8013dfa:	4623      	mov	r3, r4
 8013dfc:	6864      	ldr	r4, [r4, #4]
 8013dfe:	e7b2      	b.n	8013d66 <_malloc_r+0x32>
 8013e00:	4634      	mov	r4, r6
 8013e02:	6876      	ldr	r6, [r6, #4]
 8013e04:	e7b9      	b.n	8013d7a <_malloc_r+0x46>
 8013e06:	230c      	movs	r3, #12
 8013e08:	4638      	mov	r0, r7
 8013e0a:	603b      	str	r3, [r7, #0]
 8013e0c:	f001 fc76 	bl	80156fc <__malloc_unlock>
 8013e10:	e7a1      	b.n	8013d56 <_malloc_r+0x22>
 8013e12:	6025      	str	r5, [r4, #0]
 8013e14:	e7de      	b.n	8013dd4 <_malloc_r+0xa0>
 8013e16:	bf00      	nop
 8013e18:	2000259c 	.word	0x2000259c

08013e1c <__cvt>:
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e22:	461f      	mov	r7, r3
 8013e24:	bfbb      	ittet	lt
 8013e26:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8013e2a:	461f      	movlt	r7, r3
 8013e2c:	2300      	movge	r3, #0
 8013e2e:	232d      	movlt	r3, #45	; 0x2d
 8013e30:	b088      	sub	sp, #32
 8013e32:	4614      	mov	r4, r2
 8013e34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013e38:	7013      	strb	r3, [r2, #0]
 8013e3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8013e40:	f023 0820 	bic.w	r8, r3, #32
 8013e44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013e48:	d005      	beq.n	8013e56 <__cvt+0x3a>
 8013e4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013e4e:	d100      	bne.n	8013e52 <__cvt+0x36>
 8013e50:	3501      	adds	r5, #1
 8013e52:	2302      	movs	r3, #2
 8013e54:	e000      	b.n	8013e58 <__cvt+0x3c>
 8013e56:	2303      	movs	r3, #3
 8013e58:	aa07      	add	r2, sp, #28
 8013e5a:	9204      	str	r2, [sp, #16]
 8013e5c:	aa06      	add	r2, sp, #24
 8013e5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8013e62:	e9cd 3500 	strd	r3, r5, [sp]
 8013e66:	4622      	mov	r2, r4
 8013e68:	463b      	mov	r3, r7
 8013e6a:	f000 fd71 	bl	8014950 <_dtoa_r>
 8013e6e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013e72:	4606      	mov	r6, r0
 8013e74:	d102      	bne.n	8013e7c <__cvt+0x60>
 8013e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e78:	07db      	lsls	r3, r3, #31
 8013e7a:	d522      	bpl.n	8013ec2 <__cvt+0xa6>
 8013e7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013e80:	eb06 0905 	add.w	r9, r6, r5
 8013e84:	d110      	bne.n	8013ea8 <__cvt+0x8c>
 8013e86:	7833      	ldrb	r3, [r6, #0]
 8013e88:	2b30      	cmp	r3, #48	; 0x30
 8013e8a:	d10a      	bne.n	8013ea2 <__cvt+0x86>
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4620      	mov	r0, r4
 8013e92:	4639      	mov	r1, r7
 8013e94:	f7ec fdf8 	bl	8000a88 <__aeabi_dcmpeq>
 8013e98:	b918      	cbnz	r0, 8013ea2 <__cvt+0x86>
 8013e9a:	f1c5 0501 	rsb	r5, r5, #1
 8013e9e:	f8ca 5000 	str.w	r5, [sl]
 8013ea2:	f8da 3000 	ldr.w	r3, [sl]
 8013ea6:	4499      	add	r9, r3
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	2300      	movs	r3, #0
 8013eac:	4620      	mov	r0, r4
 8013eae:	4639      	mov	r1, r7
 8013eb0:	f7ec fdea 	bl	8000a88 <__aeabi_dcmpeq>
 8013eb4:	b108      	cbz	r0, 8013eba <__cvt+0x9e>
 8013eb6:	f8cd 901c 	str.w	r9, [sp, #28]
 8013eba:	2230      	movs	r2, #48	; 0x30
 8013ebc:	9b07      	ldr	r3, [sp, #28]
 8013ebe:	454b      	cmp	r3, r9
 8013ec0:	d307      	bcc.n	8013ed2 <__cvt+0xb6>
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	9b07      	ldr	r3, [sp, #28]
 8013ec6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013ec8:	1b9b      	subs	r3, r3, r6
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	b008      	add	sp, #32
 8013ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ed2:	1c59      	adds	r1, r3, #1
 8013ed4:	9107      	str	r1, [sp, #28]
 8013ed6:	701a      	strb	r2, [r3, #0]
 8013ed8:	e7f0      	b.n	8013ebc <__cvt+0xa0>

08013eda <__exponent>:
 8013eda:	4603      	mov	r3, r0
 8013edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013ede:	2900      	cmp	r1, #0
 8013ee0:	f803 2b02 	strb.w	r2, [r3], #2
 8013ee4:	bfb6      	itet	lt
 8013ee6:	222d      	movlt	r2, #45	; 0x2d
 8013ee8:	222b      	movge	r2, #43	; 0x2b
 8013eea:	4249      	neglt	r1, r1
 8013eec:	2909      	cmp	r1, #9
 8013eee:	7042      	strb	r2, [r0, #1]
 8013ef0:	dd2b      	ble.n	8013f4a <__exponent+0x70>
 8013ef2:	f10d 0407 	add.w	r4, sp, #7
 8013ef6:	46a4      	mov	ip, r4
 8013ef8:	270a      	movs	r7, #10
 8013efa:	fb91 f6f7 	sdiv	r6, r1, r7
 8013efe:	460a      	mov	r2, r1
 8013f00:	46a6      	mov	lr, r4
 8013f02:	fb07 1516 	mls	r5, r7, r6, r1
 8013f06:	2a63      	cmp	r2, #99	; 0x63
 8013f08:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8013f0c:	4631      	mov	r1, r6
 8013f0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013f16:	dcf0      	bgt.n	8013efa <__exponent+0x20>
 8013f18:	3130      	adds	r1, #48	; 0x30
 8013f1a:	f1ae 0502 	sub.w	r5, lr, #2
 8013f1e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013f22:	4629      	mov	r1, r5
 8013f24:	1c44      	adds	r4, r0, #1
 8013f26:	4561      	cmp	r1, ip
 8013f28:	d30a      	bcc.n	8013f40 <__exponent+0x66>
 8013f2a:	f10d 0209 	add.w	r2, sp, #9
 8013f2e:	eba2 020e 	sub.w	r2, r2, lr
 8013f32:	4565      	cmp	r5, ip
 8013f34:	bf88      	it	hi
 8013f36:	2200      	movhi	r2, #0
 8013f38:	4413      	add	r3, r2
 8013f3a:	1a18      	subs	r0, r3, r0
 8013f3c:	b003      	add	sp, #12
 8013f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013f44:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013f48:	e7ed      	b.n	8013f26 <__exponent+0x4c>
 8013f4a:	2330      	movs	r3, #48	; 0x30
 8013f4c:	3130      	adds	r1, #48	; 0x30
 8013f4e:	7083      	strb	r3, [r0, #2]
 8013f50:	70c1      	strb	r1, [r0, #3]
 8013f52:	1d03      	adds	r3, r0, #4
 8013f54:	e7f1      	b.n	8013f3a <__exponent+0x60>
	...

08013f58 <_printf_float>:
 8013f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5c:	b091      	sub	sp, #68	; 0x44
 8013f5e:	460c      	mov	r4, r1
 8013f60:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8013f64:	4616      	mov	r6, r2
 8013f66:	461f      	mov	r7, r3
 8013f68:	4605      	mov	r5, r0
 8013f6a:	f001 fb9d 	bl	80156a8 <_localeconv_r>
 8013f6e:	6803      	ldr	r3, [r0, #0]
 8013f70:	4618      	mov	r0, r3
 8013f72:	9309      	str	r3, [sp, #36]	; 0x24
 8013f74:	f7ec f95c 	bl	8000230 <strlen>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	930e      	str	r3, [sp, #56]	; 0x38
 8013f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8013f80:	900a      	str	r0, [sp, #40]	; 0x28
 8013f82:	3307      	adds	r3, #7
 8013f84:	f023 0307 	bic.w	r3, r3, #7
 8013f88:	f103 0208 	add.w	r2, r3, #8
 8013f8c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013f90:	f8d4 b000 	ldr.w	fp, [r4]
 8013f94:	f8c8 2000 	str.w	r2, [r8]
 8013f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013fa0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8013fa4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8013fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013faa:	f04f 32ff 	mov.w	r2, #4294967295
 8013fae:	4640      	mov	r0, r8
 8013fb0:	4b9c      	ldr	r3, [pc, #624]	; (8014224 <_printf_float+0x2cc>)
 8013fb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013fb4:	f7ec fd9a 	bl	8000aec <__aeabi_dcmpun>
 8013fb8:	bb70      	cbnz	r0, 8014018 <_printf_float+0xc0>
 8013fba:	f04f 32ff 	mov.w	r2, #4294967295
 8013fbe:	4640      	mov	r0, r8
 8013fc0:	4b98      	ldr	r3, [pc, #608]	; (8014224 <_printf_float+0x2cc>)
 8013fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013fc4:	f7ec fd74 	bl	8000ab0 <__aeabi_dcmple>
 8013fc8:	bb30      	cbnz	r0, 8014018 <_printf_float+0xc0>
 8013fca:	2200      	movs	r2, #0
 8013fcc:	2300      	movs	r3, #0
 8013fce:	4640      	mov	r0, r8
 8013fd0:	4651      	mov	r1, sl
 8013fd2:	f7ec fd63 	bl	8000a9c <__aeabi_dcmplt>
 8013fd6:	b110      	cbz	r0, 8013fde <_printf_float+0x86>
 8013fd8:	232d      	movs	r3, #45	; 0x2d
 8013fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fde:	4b92      	ldr	r3, [pc, #584]	; (8014228 <_printf_float+0x2d0>)
 8013fe0:	4892      	ldr	r0, [pc, #584]	; (801422c <_printf_float+0x2d4>)
 8013fe2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013fe6:	bf94      	ite	ls
 8013fe8:	4698      	movls	r8, r3
 8013fea:	4680      	movhi	r8, r0
 8013fec:	2303      	movs	r3, #3
 8013fee:	f04f 0a00 	mov.w	sl, #0
 8013ff2:	6123      	str	r3, [r4, #16]
 8013ff4:	f02b 0304 	bic.w	r3, fp, #4
 8013ff8:	6023      	str	r3, [r4, #0]
 8013ffa:	4633      	mov	r3, r6
 8013ffc:	4621      	mov	r1, r4
 8013ffe:	4628      	mov	r0, r5
 8014000:	9700      	str	r7, [sp, #0]
 8014002:	aa0f      	add	r2, sp, #60	; 0x3c
 8014004:	f000 f9d4 	bl	80143b0 <_printf_common>
 8014008:	3001      	adds	r0, #1
 801400a:	f040 8090 	bne.w	801412e <_printf_float+0x1d6>
 801400e:	f04f 30ff 	mov.w	r0, #4294967295
 8014012:	b011      	add	sp, #68	; 0x44
 8014014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014018:	4642      	mov	r2, r8
 801401a:	4653      	mov	r3, sl
 801401c:	4640      	mov	r0, r8
 801401e:	4651      	mov	r1, sl
 8014020:	f7ec fd64 	bl	8000aec <__aeabi_dcmpun>
 8014024:	b148      	cbz	r0, 801403a <_printf_float+0xe2>
 8014026:	f1ba 0f00 	cmp.w	sl, #0
 801402a:	bfb8      	it	lt
 801402c:	232d      	movlt	r3, #45	; 0x2d
 801402e:	4880      	ldr	r0, [pc, #512]	; (8014230 <_printf_float+0x2d8>)
 8014030:	bfb8      	it	lt
 8014032:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014036:	4b7f      	ldr	r3, [pc, #508]	; (8014234 <_printf_float+0x2dc>)
 8014038:	e7d3      	b.n	8013fe2 <_printf_float+0x8a>
 801403a:	6863      	ldr	r3, [r4, #4]
 801403c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014040:	1c5a      	adds	r2, r3, #1
 8014042:	d142      	bne.n	80140ca <_printf_float+0x172>
 8014044:	2306      	movs	r3, #6
 8014046:	6063      	str	r3, [r4, #4]
 8014048:	2200      	movs	r2, #0
 801404a:	9206      	str	r2, [sp, #24]
 801404c:	aa0e      	add	r2, sp, #56	; 0x38
 801404e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8014052:	aa0d      	add	r2, sp, #52	; 0x34
 8014054:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8014058:	9203      	str	r2, [sp, #12]
 801405a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801405e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014062:	6023      	str	r3, [r4, #0]
 8014064:	6863      	ldr	r3, [r4, #4]
 8014066:	4642      	mov	r2, r8
 8014068:	9300      	str	r3, [sp, #0]
 801406a:	4628      	mov	r0, r5
 801406c:	4653      	mov	r3, sl
 801406e:	910b      	str	r1, [sp, #44]	; 0x2c
 8014070:	f7ff fed4 	bl	8013e1c <__cvt>
 8014074:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014076:	4680      	mov	r8, r0
 8014078:	2947      	cmp	r1, #71	; 0x47
 801407a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801407c:	d108      	bne.n	8014090 <_printf_float+0x138>
 801407e:	1cc8      	adds	r0, r1, #3
 8014080:	db02      	blt.n	8014088 <_printf_float+0x130>
 8014082:	6863      	ldr	r3, [r4, #4]
 8014084:	4299      	cmp	r1, r3
 8014086:	dd40      	ble.n	801410a <_printf_float+0x1b2>
 8014088:	f1a9 0902 	sub.w	r9, r9, #2
 801408c:	fa5f f989 	uxtb.w	r9, r9
 8014090:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014094:	d81f      	bhi.n	80140d6 <_printf_float+0x17e>
 8014096:	464a      	mov	r2, r9
 8014098:	3901      	subs	r1, #1
 801409a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801409e:	910d      	str	r1, [sp, #52]	; 0x34
 80140a0:	f7ff ff1b 	bl	8013eda <__exponent>
 80140a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140a6:	4682      	mov	sl, r0
 80140a8:	1813      	adds	r3, r2, r0
 80140aa:	2a01      	cmp	r2, #1
 80140ac:	6123      	str	r3, [r4, #16]
 80140ae:	dc02      	bgt.n	80140b6 <_printf_float+0x15e>
 80140b0:	6822      	ldr	r2, [r4, #0]
 80140b2:	07d2      	lsls	r2, r2, #31
 80140b4:	d501      	bpl.n	80140ba <_printf_float+0x162>
 80140b6:	3301      	adds	r3, #1
 80140b8:	6123      	str	r3, [r4, #16]
 80140ba:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d09b      	beq.n	8013ffa <_printf_float+0xa2>
 80140c2:	232d      	movs	r3, #45	; 0x2d
 80140c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140c8:	e797      	b.n	8013ffa <_printf_float+0xa2>
 80140ca:	2947      	cmp	r1, #71	; 0x47
 80140cc:	d1bc      	bne.n	8014048 <_printf_float+0xf0>
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d1ba      	bne.n	8014048 <_printf_float+0xf0>
 80140d2:	2301      	movs	r3, #1
 80140d4:	e7b7      	b.n	8014046 <_printf_float+0xee>
 80140d6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80140da:	d118      	bne.n	801410e <_printf_float+0x1b6>
 80140dc:	2900      	cmp	r1, #0
 80140de:	6863      	ldr	r3, [r4, #4]
 80140e0:	dd0b      	ble.n	80140fa <_printf_float+0x1a2>
 80140e2:	6121      	str	r1, [r4, #16]
 80140e4:	b913      	cbnz	r3, 80140ec <_printf_float+0x194>
 80140e6:	6822      	ldr	r2, [r4, #0]
 80140e8:	07d0      	lsls	r0, r2, #31
 80140ea:	d502      	bpl.n	80140f2 <_printf_float+0x19a>
 80140ec:	3301      	adds	r3, #1
 80140ee:	440b      	add	r3, r1
 80140f0:	6123      	str	r3, [r4, #16]
 80140f2:	f04f 0a00 	mov.w	sl, #0
 80140f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80140f8:	e7df      	b.n	80140ba <_printf_float+0x162>
 80140fa:	b913      	cbnz	r3, 8014102 <_printf_float+0x1aa>
 80140fc:	6822      	ldr	r2, [r4, #0]
 80140fe:	07d2      	lsls	r2, r2, #31
 8014100:	d501      	bpl.n	8014106 <_printf_float+0x1ae>
 8014102:	3302      	adds	r3, #2
 8014104:	e7f4      	b.n	80140f0 <_printf_float+0x198>
 8014106:	2301      	movs	r3, #1
 8014108:	e7f2      	b.n	80140f0 <_printf_float+0x198>
 801410a:	f04f 0967 	mov.w	r9, #103	; 0x67
 801410e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014110:	4299      	cmp	r1, r3
 8014112:	db05      	blt.n	8014120 <_printf_float+0x1c8>
 8014114:	6823      	ldr	r3, [r4, #0]
 8014116:	6121      	str	r1, [r4, #16]
 8014118:	07d8      	lsls	r0, r3, #31
 801411a:	d5ea      	bpl.n	80140f2 <_printf_float+0x19a>
 801411c:	1c4b      	adds	r3, r1, #1
 801411e:	e7e7      	b.n	80140f0 <_printf_float+0x198>
 8014120:	2900      	cmp	r1, #0
 8014122:	bfcc      	ite	gt
 8014124:	2201      	movgt	r2, #1
 8014126:	f1c1 0202 	rsble	r2, r1, #2
 801412a:	4413      	add	r3, r2
 801412c:	e7e0      	b.n	80140f0 <_printf_float+0x198>
 801412e:	6823      	ldr	r3, [r4, #0]
 8014130:	055a      	lsls	r2, r3, #21
 8014132:	d407      	bmi.n	8014144 <_printf_float+0x1ec>
 8014134:	6923      	ldr	r3, [r4, #16]
 8014136:	4642      	mov	r2, r8
 8014138:	4631      	mov	r1, r6
 801413a:	4628      	mov	r0, r5
 801413c:	47b8      	blx	r7
 801413e:	3001      	adds	r0, #1
 8014140:	d12b      	bne.n	801419a <_printf_float+0x242>
 8014142:	e764      	b.n	801400e <_printf_float+0xb6>
 8014144:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014148:	f240 80dd 	bls.w	8014306 <_printf_float+0x3ae>
 801414c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014150:	2200      	movs	r2, #0
 8014152:	2300      	movs	r3, #0
 8014154:	f7ec fc98 	bl	8000a88 <__aeabi_dcmpeq>
 8014158:	2800      	cmp	r0, #0
 801415a:	d033      	beq.n	80141c4 <_printf_float+0x26c>
 801415c:	2301      	movs	r3, #1
 801415e:	4631      	mov	r1, r6
 8014160:	4628      	mov	r0, r5
 8014162:	4a35      	ldr	r2, [pc, #212]	; (8014238 <_printf_float+0x2e0>)
 8014164:	47b8      	blx	r7
 8014166:	3001      	adds	r0, #1
 8014168:	f43f af51 	beq.w	801400e <_printf_float+0xb6>
 801416c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014170:	429a      	cmp	r2, r3
 8014172:	db02      	blt.n	801417a <_printf_float+0x222>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	07d8      	lsls	r0, r3, #31
 8014178:	d50f      	bpl.n	801419a <_printf_float+0x242>
 801417a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801417e:	4631      	mov	r1, r6
 8014180:	4628      	mov	r0, r5
 8014182:	47b8      	blx	r7
 8014184:	3001      	adds	r0, #1
 8014186:	f43f af42 	beq.w	801400e <_printf_float+0xb6>
 801418a:	f04f 0800 	mov.w	r8, #0
 801418e:	f104 091a 	add.w	r9, r4, #26
 8014192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014194:	3b01      	subs	r3, #1
 8014196:	4543      	cmp	r3, r8
 8014198:	dc09      	bgt.n	80141ae <_printf_float+0x256>
 801419a:	6823      	ldr	r3, [r4, #0]
 801419c:	079b      	lsls	r3, r3, #30
 801419e:	f100 8102 	bmi.w	80143a6 <_printf_float+0x44e>
 80141a2:	68e0      	ldr	r0, [r4, #12]
 80141a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141a6:	4298      	cmp	r0, r3
 80141a8:	bfb8      	it	lt
 80141aa:	4618      	movlt	r0, r3
 80141ac:	e731      	b.n	8014012 <_printf_float+0xba>
 80141ae:	2301      	movs	r3, #1
 80141b0:	464a      	mov	r2, r9
 80141b2:	4631      	mov	r1, r6
 80141b4:	4628      	mov	r0, r5
 80141b6:	47b8      	blx	r7
 80141b8:	3001      	adds	r0, #1
 80141ba:	f43f af28 	beq.w	801400e <_printf_float+0xb6>
 80141be:	f108 0801 	add.w	r8, r8, #1
 80141c2:	e7e6      	b.n	8014192 <_printf_float+0x23a>
 80141c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	dc38      	bgt.n	801423c <_printf_float+0x2e4>
 80141ca:	2301      	movs	r3, #1
 80141cc:	4631      	mov	r1, r6
 80141ce:	4628      	mov	r0, r5
 80141d0:	4a19      	ldr	r2, [pc, #100]	; (8014238 <_printf_float+0x2e0>)
 80141d2:	47b8      	blx	r7
 80141d4:	3001      	adds	r0, #1
 80141d6:	f43f af1a 	beq.w	801400e <_printf_float+0xb6>
 80141da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80141de:	4313      	orrs	r3, r2
 80141e0:	d102      	bne.n	80141e8 <_printf_float+0x290>
 80141e2:	6823      	ldr	r3, [r4, #0]
 80141e4:	07d9      	lsls	r1, r3, #31
 80141e6:	d5d8      	bpl.n	801419a <_printf_float+0x242>
 80141e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141ec:	4631      	mov	r1, r6
 80141ee:	4628      	mov	r0, r5
 80141f0:	47b8      	blx	r7
 80141f2:	3001      	adds	r0, #1
 80141f4:	f43f af0b 	beq.w	801400e <_printf_float+0xb6>
 80141f8:	f04f 0900 	mov.w	r9, #0
 80141fc:	f104 0a1a 	add.w	sl, r4, #26
 8014200:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014202:	425b      	negs	r3, r3
 8014204:	454b      	cmp	r3, r9
 8014206:	dc01      	bgt.n	801420c <_printf_float+0x2b4>
 8014208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801420a:	e794      	b.n	8014136 <_printf_float+0x1de>
 801420c:	2301      	movs	r3, #1
 801420e:	4652      	mov	r2, sl
 8014210:	4631      	mov	r1, r6
 8014212:	4628      	mov	r0, r5
 8014214:	47b8      	blx	r7
 8014216:	3001      	adds	r0, #1
 8014218:	f43f aef9 	beq.w	801400e <_printf_float+0xb6>
 801421c:	f109 0901 	add.w	r9, r9, #1
 8014220:	e7ee      	b.n	8014200 <_printf_float+0x2a8>
 8014222:	bf00      	nop
 8014224:	7fefffff 	.word	0x7fefffff
 8014228:	0802fcf8 	.word	0x0802fcf8
 801422c:	0802fcfc 	.word	0x0802fcfc
 8014230:	0802fd04 	.word	0x0802fd04
 8014234:	0802fd00 	.word	0x0802fd00
 8014238:	0802fd08 	.word	0x0802fd08
 801423c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801423e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014240:	429a      	cmp	r2, r3
 8014242:	bfa8      	it	ge
 8014244:	461a      	movge	r2, r3
 8014246:	2a00      	cmp	r2, #0
 8014248:	4691      	mov	r9, r2
 801424a:	dc37      	bgt.n	80142bc <_printf_float+0x364>
 801424c:	f04f 0b00 	mov.w	fp, #0
 8014250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014254:	f104 021a 	add.w	r2, r4, #26
 8014258:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801425c:	ebaa 0309 	sub.w	r3, sl, r9
 8014260:	455b      	cmp	r3, fp
 8014262:	dc33      	bgt.n	80142cc <_printf_float+0x374>
 8014264:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8014268:	429a      	cmp	r2, r3
 801426a:	db3b      	blt.n	80142e4 <_printf_float+0x38c>
 801426c:	6823      	ldr	r3, [r4, #0]
 801426e:	07da      	lsls	r2, r3, #31
 8014270:	d438      	bmi.n	80142e4 <_printf_float+0x38c>
 8014272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014274:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014276:	eba3 020a 	sub.w	r2, r3, sl
 801427a:	eba3 0901 	sub.w	r9, r3, r1
 801427e:	4591      	cmp	r9, r2
 8014280:	bfa8      	it	ge
 8014282:	4691      	movge	r9, r2
 8014284:	f1b9 0f00 	cmp.w	r9, #0
 8014288:	dc34      	bgt.n	80142f4 <_printf_float+0x39c>
 801428a:	f04f 0800 	mov.w	r8, #0
 801428e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014292:	f104 0a1a 	add.w	sl, r4, #26
 8014296:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801429a:	1a9b      	subs	r3, r3, r2
 801429c:	eba3 0309 	sub.w	r3, r3, r9
 80142a0:	4543      	cmp	r3, r8
 80142a2:	f77f af7a 	ble.w	801419a <_printf_float+0x242>
 80142a6:	2301      	movs	r3, #1
 80142a8:	4652      	mov	r2, sl
 80142aa:	4631      	mov	r1, r6
 80142ac:	4628      	mov	r0, r5
 80142ae:	47b8      	blx	r7
 80142b0:	3001      	adds	r0, #1
 80142b2:	f43f aeac 	beq.w	801400e <_printf_float+0xb6>
 80142b6:	f108 0801 	add.w	r8, r8, #1
 80142ba:	e7ec      	b.n	8014296 <_printf_float+0x33e>
 80142bc:	4613      	mov	r3, r2
 80142be:	4631      	mov	r1, r6
 80142c0:	4642      	mov	r2, r8
 80142c2:	4628      	mov	r0, r5
 80142c4:	47b8      	blx	r7
 80142c6:	3001      	adds	r0, #1
 80142c8:	d1c0      	bne.n	801424c <_printf_float+0x2f4>
 80142ca:	e6a0      	b.n	801400e <_printf_float+0xb6>
 80142cc:	2301      	movs	r3, #1
 80142ce:	4631      	mov	r1, r6
 80142d0:	4628      	mov	r0, r5
 80142d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80142d4:	47b8      	blx	r7
 80142d6:	3001      	adds	r0, #1
 80142d8:	f43f ae99 	beq.w	801400e <_printf_float+0xb6>
 80142dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80142de:	f10b 0b01 	add.w	fp, fp, #1
 80142e2:	e7b9      	b.n	8014258 <_printf_float+0x300>
 80142e4:	4631      	mov	r1, r6
 80142e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142ea:	4628      	mov	r0, r5
 80142ec:	47b8      	blx	r7
 80142ee:	3001      	adds	r0, #1
 80142f0:	d1bf      	bne.n	8014272 <_printf_float+0x31a>
 80142f2:	e68c      	b.n	801400e <_printf_float+0xb6>
 80142f4:	464b      	mov	r3, r9
 80142f6:	4631      	mov	r1, r6
 80142f8:	4628      	mov	r0, r5
 80142fa:	eb08 020a 	add.w	r2, r8, sl
 80142fe:	47b8      	blx	r7
 8014300:	3001      	adds	r0, #1
 8014302:	d1c2      	bne.n	801428a <_printf_float+0x332>
 8014304:	e683      	b.n	801400e <_printf_float+0xb6>
 8014306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014308:	2a01      	cmp	r2, #1
 801430a:	dc01      	bgt.n	8014310 <_printf_float+0x3b8>
 801430c:	07db      	lsls	r3, r3, #31
 801430e:	d537      	bpl.n	8014380 <_printf_float+0x428>
 8014310:	2301      	movs	r3, #1
 8014312:	4642      	mov	r2, r8
 8014314:	4631      	mov	r1, r6
 8014316:	4628      	mov	r0, r5
 8014318:	47b8      	blx	r7
 801431a:	3001      	adds	r0, #1
 801431c:	f43f ae77 	beq.w	801400e <_printf_float+0xb6>
 8014320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014324:	4631      	mov	r1, r6
 8014326:	4628      	mov	r0, r5
 8014328:	47b8      	blx	r7
 801432a:	3001      	adds	r0, #1
 801432c:	f43f ae6f 	beq.w	801400e <_printf_float+0xb6>
 8014330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014334:	2200      	movs	r2, #0
 8014336:	2300      	movs	r3, #0
 8014338:	f7ec fba6 	bl	8000a88 <__aeabi_dcmpeq>
 801433c:	b9d8      	cbnz	r0, 8014376 <_printf_float+0x41e>
 801433e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014340:	f108 0201 	add.w	r2, r8, #1
 8014344:	3b01      	subs	r3, #1
 8014346:	4631      	mov	r1, r6
 8014348:	4628      	mov	r0, r5
 801434a:	47b8      	blx	r7
 801434c:	3001      	adds	r0, #1
 801434e:	d10e      	bne.n	801436e <_printf_float+0x416>
 8014350:	e65d      	b.n	801400e <_printf_float+0xb6>
 8014352:	2301      	movs	r3, #1
 8014354:	464a      	mov	r2, r9
 8014356:	4631      	mov	r1, r6
 8014358:	4628      	mov	r0, r5
 801435a:	47b8      	blx	r7
 801435c:	3001      	adds	r0, #1
 801435e:	f43f ae56 	beq.w	801400e <_printf_float+0xb6>
 8014362:	f108 0801 	add.w	r8, r8, #1
 8014366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014368:	3b01      	subs	r3, #1
 801436a:	4543      	cmp	r3, r8
 801436c:	dcf1      	bgt.n	8014352 <_printf_float+0x3fa>
 801436e:	4653      	mov	r3, sl
 8014370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014374:	e6e0      	b.n	8014138 <_printf_float+0x1e0>
 8014376:	f04f 0800 	mov.w	r8, #0
 801437a:	f104 091a 	add.w	r9, r4, #26
 801437e:	e7f2      	b.n	8014366 <_printf_float+0x40e>
 8014380:	2301      	movs	r3, #1
 8014382:	4642      	mov	r2, r8
 8014384:	e7df      	b.n	8014346 <_printf_float+0x3ee>
 8014386:	2301      	movs	r3, #1
 8014388:	464a      	mov	r2, r9
 801438a:	4631      	mov	r1, r6
 801438c:	4628      	mov	r0, r5
 801438e:	47b8      	blx	r7
 8014390:	3001      	adds	r0, #1
 8014392:	f43f ae3c 	beq.w	801400e <_printf_float+0xb6>
 8014396:	f108 0801 	add.w	r8, r8, #1
 801439a:	68e3      	ldr	r3, [r4, #12]
 801439c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801439e:	1a5b      	subs	r3, r3, r1
 80143a0:	4543      	cmp	r3, r8
 80143a2:	dcf0      	bgt.n	8014386 <_printf_float+0x42e>
 80143a4:	e6fd      	b.n	80141a2 <_printf_float+0x24a>
 80143a6:	f04f 0800 	mov.w	r8, #0
 80143aa:	f104 0919 	add.w	r9, r4, #25
 80143ae:	e7f4      	b.n	801439a <_printf_float+0x442>

080143b0 <_printf_common>:
 80143b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143b4:	4616      	mov	r6, r2
 80143b6:	4699      	mov	r9, r3
 80143b8:	688a      	ldr	r2, [r1, #8]
 80143ba:	690b      	ldr	r3, [r1, #16]
 80143bc:	4607      	mov	r7, r0
 80143be:	4293      	cmp	r3, r2
 80143c0:	bfb8      	it	lt
 80143c2:	4613      	movlt	r3, r2
 80143c4:	6033      	str	r3, [r6, #0]
 80143c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143ca:	460c      	mov	r4, r1
 80143cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143d0:	b10a      	cbz	r2, 80143d6 <_printf_common+0x26>
 80143d2:	3301      	adds	r3, #1
 80143d4:	6033      	str	r3, [r6, #0]
 80143d6:	6823      	ldr	r3, [r4, #0]
 80143d8:	0699      	lsls	r1, r3, #26
 80143da:	bf42      	ittt	mi
 80143dc:	6833      	ldrmi	r3, [r6, #0]
 80143de:	3302      	addmi	r3, #2
 80143e0:	6033      	strmi	r3, [r6, #0]
 80143e2:	6825      	ldr	r5, [r4, #0]
 80143e4:	f015 0506 	ands.w	r5, r5, #6
 80143e8:	d106      	bne.n	80143f8 <_printf_common+0x48>
 80143ea:	f104 0a19 	add.w	sl, r4, #25
 80143ee:	68e3      	ldr	r3, [r4, #12]
 80143f0:	6832      	ldr	r2, [r6, #0]
 80143f2:	1a9b      	subs	r3, r3, r2
 80143f4:	42ab      	cmp	r3, r5
 80143f6:	dc28      	bgt.n	801444a <_printf_common+0x9a>
 80143f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80143fc:	1e13      	subs	r3, r2, #0
 80143fe:	6822      	ldr	r2, [r4, #0]
 8014400:	bf18      	it	ne
 8014402:	2301      	movne	r3, #1
 8014404:	0692      	lsls	r2, r2, #26
 8014406:	d42d      	bmi.n	8014464 <_printf_common+0xb4>
 8014408:	4649      	mov	r1, r9
 801440a:	4638      	mov	r0, r7
 801440c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014410:	47c0      	blx	r8
 8014412:	3001      	adds	r0, #1
 8014414:	d020      	beq.n	8014458 <_printf_common+0xa8>
 8014416:	6823      	ldr	r3, [r4, #0]
 8014418:	68e5      	ldr	r5, [r4, #12]
 801441a:	f003 0306 	and.w	r3, r3, #6
 801441e:	2b04      	cmp	r3, #4
 8014420:	bf18      	it	ne
 8014422:	2500      	movne	r5, #0
 8014424:	6832      	ldr	r2, [r6, #0]
 8014426:	f04f 0600 	mov.w	r6, #0
 801442a:	68a3      	ldr	r3, [r4, #8]
 801442c:	bf08      	it	eq
 801442e:	1aad      	subeq	r5, r5, r2
 8014430:	6922      	ldr	r2, [r4, #16]
 8014432:	bf08      	it	eq
 8014434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014438:	4293      	cmp	r3, r2
 801443a:	bfc4      	itt	gt
 801443c:	1a9b      	subgt	r3, r3, r2
 801443e:	18ed      	addgt	r5, r5, r3
 8014440:	341a      	adds	r4, #26
 8014442:	42b5      	cmp	r5, r6
 8014444:	d11a      	bne.n	801447c <_printf_common+0xcc>
 8014446:	2000      	movs	r0, #0
 8014448:	e008      	b.n	801445c <_printf_common+0xac>
 801444a:	2301      	movs	r3, #1
 801444c:	4652      	mov	r2, sl
 801444e:	4649      	mov	r1, r9
 8014450:	4638      	mov	r0, r7
 8014452:	47c0      	blx	r8
 8014454:	3001      	adds	r0, #1
 8014456:	d103      	bne.n	8014460 <_printf_common+0xb0>
 8014458:	f04f 30ff 	mov.w	r0, #4294967295
 801445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014460:	3501      	adds	r5, #1
 8014462:	e7c4      	b.n	80143ee <_printf_common+0x3e>
 8014464:	2030      	movs	r0, #48	; 0x30
 8014466:	18e1      	adds	r1, r4, r3
 8014468:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801446c:	1c5a      	adds	r2, r3, #1
 801446e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014472:	4422      	add	r2, r4
 8014474:	3302      	adds	r3, #2
 8014476:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801447a:	e7c5      	b.n	8014408 <_printf_common+0x58>
 801447c:	2301      	movs	r3, #1
 801447e:	4622      	mov	r2, r4
 8014480:	4649      	mov	r1, r9
 8014482:	4638      	mov	r0, r7
 8014484:	47c0      	blx	r8
 8014486:	3001      	adds	r0, #1
 8014488:	d0e6      	beq.n	8014458 <_printf_common+0xa8>
 801448a:	3601      	adds	r6, #1
 801448c:	e7d9      	b.n	8014442 <_printf_common+0x92>
	...

08014490 <_printf_i>:
 8014490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014494:	7e0f      	ldrb	r7, [r1, #24]
 8014496:	4691      	mov	r9, r2
 8014498:	2f78      	cmp	r7, #120	; 0x78
 801449a:	4680      	mov	r8, r0
 801449c:	460c      	mov	r4, r1
 801449e:	469a      	mov	sl, r3
 80144a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80144a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80144a6:	d807      	bhi.n	80144b8 <_printf_i+0x28>
 80144a8:	2f62      	cmp	r7, #98	; 0x62
 80144aa:	d80a      	bhi.n	80144c2 <_printf_i+0x32>
 80144ac:	2f00      	cmp	r7, #0
 80144ae:	f000 80d9 	beq.w	8014664 <_printf_i+0x1d4>
 80144b2:	2f58      	cmp	r7, #88	; 0x58
 80144b4:	f000 80a4 	beq.w	8014600 <_printf_i+0x170>
 80144b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80144c0:	e03a      	b.n	8014538 <_printf_i+0xa8>
 80144c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80144c6:	2b15      	cmp	r3, #21
 80144c8:	d8f6      	bhi.n	80144b8 <_printf_i+0x28>
 80144ca:	a101      	add	r1, pc, #4	; (adr r1, 80144d0 <_printf_i+0x40>)
 80144cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80144d0:	08014529 	.word	0x08014529
 80144d4:	0801453d 	.word	0x0801453d
 80144d8:	080144b9 	.word	0x080144b9
 80144dc:	080144b9 	.word	0x080144b9
 80144e0:	080144b9 	.word	0x080144b9
 80144e4:	080144b9 	.word	0x080144b9
 80144e8:	0801453d 	.word	0x0801453d
 80144ec:	080144b9 	.word	0x080144b9
 80144f0:	080144b9 	.word	0x080144b9
 80144f4:	080144b9 	.word	0x080144b9
 80144f8:	080144b9 	.word	0x080144b9
 80144fc:	0801464b 	.word	0x0801464b
 8014500:	0801456d 	.word	0x0801456d
 8014504:	0801462d 	.word	0x0801462d
 8014508:	080144b9 	.word	0x080144b9
 801450c:	080144b9 	.word	0x080144b9
 8014510:	0801466d 	.word	0x0801466d
 8014514:	080144b9 	.word	0x080144b9
 8014518:	0801456d 	.word	0x0801456d
 801451c:	080144b9 	.word	0x080144b9
 8014520:	080144b9 	.word	0x080144b9
 8014524:	08014635 	.word	0x08014635
 8014528:	682b      	ldr	r3, [r5, #0]
 801452a:	1d1a      	adds	r2, r3, #4
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	602a      	str	r2, [r5, #0]
 8014530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014538:	2301      	movs	r3, #1
 801453a:	e0a4      	b.n	8014686 <_printf_i+0x1f6>
 801453c:	6820      	ldr	r0, [r4, #0]
 801453e:	6829      	ldr	r1, [r5, #0]
 8014540:	0606      	lsls	r6, r0, #24
 8014542:	f101 0304 	add.w	r3, r1, #4
 8014546:	d50a      	bpl.n	801455e <_printf_i+0xce>
 8014548:	680e      	ldr	r6, [r1, #0]
 801454a:	602b      	str	r3, [r5, #0]
 801454c:	2e00      	cmp	r6, #0
 801454e:	da03      	bge.n	8014558 <_printf_i+0xc8>
 8014550:	232d      	movs	r3, #45	; 0x2d
 8014552:	4276      	negs	r6, r6
 8014554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014558:	230a      	movs	r3, #10
 801455a:	485e      	ldr	r0, [pc, #376]	; (80146d4 <_printf_i+0x244>)
 801455c:	e019      	b.n	8014592 <_printf_i+0x102>
 801455e:	680e      	ldr	r6, [r1, #0]
 8014560:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014564:	602b      	str	r3, [r5, #0]
 8014566:	bf18      	it	ne
 8014568:	b236      	sxthne	r6, r6
 801456a:	e7ef      	b.n	801454c <_printf_i+0xbc>
 801456c:	682b      	ldr	r3, [r5, #0]
 801456e:	6820      	ldr	r0, [r4, #0]
 8014570:	1d19      	adds	r1, r3, #4
 8014572:	6029      	str	r1, [r5, #0]
 8014574:	0601      	lsls	r1, r0, #24
 8014576:	d501      	bpl.n	801457c <_printf_i+0xec>
 8014578:	681e      	ldr	r6, [r3, #0]
 801457a:	e002      	b.n	8014582 <_printf_i+0xf2>
 801457c:	0646      	lsls	r6, r0, #25
 801457e:	d5fb      	bpl.n	8014578 <_printf_i+0xe8>
 8014580:	881e      	ldrh	r6, [r3, #0]
 8014582:	2f6f      	cmp	r7, #111	; 0x6f
 8014584:	bf0c      	ite	eq
 8014586:	2308      	moveq	r3, #8
 8014588:	230a      	movne	r3, #10
 801458a:	4852      	ldr	r0, [pc, #328]	; (80146d4 <_printf_i+0x244>)
 801458c:	2100      	movs	r1, #0
 801458e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014592:	6865      	ldr	r5, [r4, #4]
 8014594:	2d00      	cmp	r5, #0
 8014596:	bfa8      	it	ge
 8014598:	6821      	ldrge	r1, [r4, #0]
 801459a:	60a5      	str	r5, [r4, #8]
 801459c:	bfa4      	itt	ge
 801459e:	f021 0104 	bicge.w	r1, r1, #4
 80145a2:	6021      	strge	r1, [r4, #0]
 80145a4:	b90e      	cbnz	r6, 80145aa <_printf_i+0x11a>
 80145a6:	2d00      	cmp	r5, #0
 80145a8:	d04d      	beq.n	8014646 <_printf_i+0x1b6>
 80145aa:	4615      	mov	r5, r2
 80145ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80145b0:	fb03 6711 	mls	r7, r3, r1, r6
 80145b4:	5dc7      	ldrb	r7, [r0, r7]
 80145b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80145ba:	4637      	mov	r7, r6
 80145bc:	42bb      	cmp	r3, r7
 80145be:	460e      	mov	r6, r1
 80145c0:	d9f4      	bls.n	80145ac <_printf_i+0x11c>
 80145c2:	2b08      	cmp	r3, #8
 80145c4:	d10b      	bne.n	80145de <_printf_i+0x14e>
 80145c6:	6823      	ldr	r3, [r4, #0]
 80145c8:	07de      	lsls	r6, r3, #31
 80145ca:	d508      	bpl.n	80145de <_printf_i+0x14e>
 80145cc:	6923      	ldr	r3, [r4, #16]
 80145ce:	6861      	ldr	r1, [r4, #4]
 80145d0:	4299      	cmp	r1, r3
 80145d2:	bfde      	ittt	le
 80145d4:	2330      	movle	r3, #48	; 0x30
 80145d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80145da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80145de:	1b52      	subs	r2, r2, r5
 80145e0:	6122      	str	r2, [r4, #16]
 80145e2:	464b      	mov	r3, r9
 80145e4:	4621      	mov	r1, r4
 80145e6:	4640      	mov	r0, r8
 80145e8:	f8cd a000 	str.w	sl, [sp]
 80145ec:	aa03      	add	r2, sp, #12
 80145ee:	f7ff fedf 	bl	80143b0 <_printf_common>
 80145f2:	3001      	adds	r0, #1
 80145f4:	d14c      	bne.n	8014690 <_printf_i+0x200>
 80145f6:	f04f 30ff 	mov.w	r0, #4294967295
 80145fa:	b004      	add	sp, #16
 80145fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014600:	4834      	ldr	r0, [pc, #208]	; (80146d4 <_printf_i+0x244>)
 8014602:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014606:	6829      	ldr	r1, [r5, #0]
 8014608:	6823      	ldr	r3, [r4, #0]
 801460a:	f851 6b04 	ldr.w	r6, [r1], #4
 801460e:	6029      	str	r1, [r5, #0]
 8014610:	061d      	lsls	r5, r3, #24
 8014612:	d514      	bpl.n	801463e <_printf_i+0x1ae>
 8014614:	07df      	lsls	r7, r3, #31
 8014616:	bf44      	itt	mi
 8014618:	f043 0320 	orrmi.w	r3, r3, #32
 801461c:	6023      	strmi	r3, [r4, #0]
 801461e:	b91e      	cbnz	r6, 8014628 <_printf_i+0x198>
 8014620:	6823      	ldr	r3, [r4, #0]
 8014622:	f023 0320 	bic.w	r3, r3, #32
 8014626:	6023      	str	r3, [r4, #0]
 8014628:	2310      	movs	r3, #16
 801462a:	e7af      	b.n	801458c <_printf_i+0xfc>
 801462c:	6823      	ldr	r3, [r4, #0]
 801462e:	f043 0320 	orr.w	r3, r3, #32
 8014632:	6023      	str	r3, [r4, #0]
 8014634:	2378      	movs	r3, #120	; 0x78
 8014636:	4828      	ldr	r0, [pc, #160]	; (80146d8 <_printf_i+0x248>)
 8014638:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801463c:	e7e3      	b.n	8014606 <_printf_i+0x176>
 801463e:	0659      	lsls	r1, r3, #25
 8014640:	bf48      	it	mi
 8014642:	b2b6      	uxthmi	r6, r6
 8014644:	e7e6      	b.n	8014614 <_printf_i+0x184>
 8014646:	4615      	mov	r5, r2
 8014648:	e7bb      	b.n	80145c2 <_printf_i+0x132>
 801464a:	682b      	ldr	r3, [r5, #0]
 801464c:	6826      	ldr	r6, [r4, #0]
 801464e:	1d18      	adds	r0, r3, #4
 8014650:	6961      	ldr	r1, [r4, #20]
 8014652:	6028      	str	r0, [r5, #0]
 8014654:	0635      	lsls	r5, r6, #24
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	d501      	bpl.n	801465e <_printf_i+0x1ce>
 801465a:	6019      	str	r1, [r3, #0]
 801465c:	e002      	b.n	8014664 <_printf_i+0x1d4>
 801465e:	0670      	lsls	r0, r6, #25
 8014660:	d5fb      	bpl.n	801465a <_printf_i+0x1ca>
 8014662:	8019      	strh	r1, [r3, #0]
 8014664:	2300      	movs	r3, #0
 8014666:	4615      	mov	r5, r2
 8014668:	6123      	str	r3, [r4, #16]
 801466a:	e7ba      	b.n	80145e2 <_printf_i+0x152>
 801466c:	682b      	ldr	r3, [r5, #0]
 801466e:	2100      	movs	r1, #0
 8014670:	1d1a      	adds	r2, r3, #4
 8014672:	602a      	str	r2, [r5, #0]
 8014674:	681d      	ldr	r5, [r3, #0]
 8014676:	6862      	ldr	r2, [r4, #4]
 8014678:	4628      	mov	r0, r5
 801467a:	f001 f82b 	bl	80156d4 <memchr>
 801467e:	b108      	cbz	r0, 8014684 <_printf_i+0x1f4>
 8014680:	1b40      	subs	r0, r0, r5
 8014682:	6060      	str	r0, [r4, #4]
 8014684:	6863      	ldr	r3, [r4, #4]
 8014686:	6123      	str	r3, [r4, #16]
 8014688:	2300      	movs	r3, #0
 801468a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801468e:	e7a8      	b.n	80145e2 <_printf_i+0x152>
 8014690:	462a      	mov	r2, r5
 8014692:	4649      	mov	r1, r9
 8014694:	4640      	mov	r0, r8
 8014696:	6923      	ldr	r3, [r4, #16]
 8014698:	47d0      	blx	sl
 801469a:	3001      	adds	r0, #1
 801469c:	d0ab      	beq.n	80145f6 <_printf_i+0x166>
 801469e:	6823      	ldr	r3, [r4, #0]
 80146a0:	079b      	lsls	r3, r3, #30
 80146a2:	d413      	bmi.n	80146cc <_printf_i+0x23c>
 80146a4:	68e0      	ldr	r0, [r4, #12]
 80146a6:	9b03      	ldr	r3, [sp, #12]
 80146a8:	4298      	cmp	r0, r3
 80146aa:	bfb8      	it	lt
 80146ac:	4618      	movlt	r0, r3
 80146ae:	e7a4      	b.n	80145fa <_printf_i+0x16a>
 80146b0:	2301      	movs	r3, #1
 80146b2:	4632      	mov	r2, r6
 80146b4:	4649      	mov	r1, r9
 80146b6:	4640      	mov	r0, r8
 80146b8:	47d0      	blx	sl
 80146ba:	3001      	adds	r0, #1
 80146bc:	d09b      	beq.n	80145f6 <_printf_i+0x166>
 80146be:	3501      	adds	r5, #1
 80146c0:	68e3      	ldr	r3, [r4, #12]
 80146c2:	9903      	ldr	r1, [sp, #12]
 80146c4:	1a5b      	subs	r3, r3, r1
 80146c6:	42ab      	cmp	r3, r5
 80146c8:	dcf2      	bgt.n	80146b0 <_printf_i+0x220>
 80146ca:	e7eb      	b.n	80146a4 <_printf_i+0x214>
 80146cc:	2500      	movs	r5, #0
 80146ce:	f104 0619 	add.w	r6, r4, #25
 80146d2:	e7f5      	b.n	80146c0 <_printf_i+0x230>
 80146d4:	0802fd0a 	.word	0x0802fd0a
 80146d8:	0802fd1b 	.word	0x0802fd1b

080146dc <_sbrk_r>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	2300      	movs	r3, #0
 80146e0:	4d05      	ldr	r5, [pc, #20]	; (80146f8 <_sbrk_r+0x1c>)
 80146e2:	4604      	mov	r4, r0
 80146e4:	4608      	mov	r0, r1
 80146e6:	602b      	str	r3, [r5, #0]
 80146e8:	f7ee fc92 	bl	8003010 <_sbrk>
 80146ec:	1c43      	adds	r3, r0, #1
 80146ee:	d102      	bne.n	80146f6 <_sbrk_r+0x1a>
 80146f0:	682b      	ldr	r3, [r5, #0]
 80146f2:	b103      	cbz	r3, 80146f6 <_sbrk_r+0x1a>
 80146f4:	6023      	str	r3, [r4, #0]
 80146f6:	bd38      	pop	{r3, r4, r5, pc}
 80146f8:	200025a4 	.word	0x200025a4

080146fc <__sread>:
 80146fc:	b510      	push	{r4, lr}
 80146fe:	460c      	mov	r4, r1
 8014700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014704:	f001 fcf2 	bl	80160ec <_read_r>
 8014708:	2800      	cmp	r0, #0
 801470a:	bfab      	itete	ge
 801470c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801470e:	89a3      	ldrhlt	r3, [r4, #12]
 8014710:	181b      	addge	r3, r3, r0
 8014712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014716:	bfac      	ite	ge
 8014718:	6563      	strge	r3, [r4, #84]	; 0x54
 801471a:	81a3      	strhlt	r3, [r4, #12]
 801471c:	bd10      	pop	{r4, pc}

0801471e <__swrite>:
 801471e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014722:	461f      	mov	r7, r3
 8014724:	898b      	ldrh	r3, [r1, #12]
 8014726:	4605      	mov	r5, r0
 8014728:	05db      	lsls	r3, r3, #23
 801472a:	460c      	mov	r4, r1
 801472c:	4616      	mov	r6, r2
 801472e:	d505      	bpl.n	801473c <__swrite+0x1e>
 8014730:	2302      	movs	r3, #2
 8014732:	2200      	movs	r2, #0
 8014734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014738:	f000 ffba 	bl	80156b0 <_lseek_r>
 801473c:	89a3      	ldrh	r3, [r4, #12]
 801473e:	4632      	mov	r2, r6
 8014740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014744:	81a3      	strh	r3, [r4, #12]
 8014746:	4628      	mov	r0, r5
 8014748:	463b      	mov	r3, r7
 801474a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801474e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014752:	f000 b84f 	b.w	80147f4 <_write_r>

08014756 <__sseek>:
 8014756:	b510      	push	{r4, lr}
 8014758:	460c      	mov	r4, r1
 801475a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801475e:	f000 ffa7 	bl	80156b0 <_lseek_r>
 8014762:	1c43      	adds	r3, r0, #1
 8014764:	89a3      	ldrh	r3, [r4, #12]
 8014766:	bf15      	itete	ne
 8014768:	6560      	strne	r0, [r4, #84]	; 0x54
 801476a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801476e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014772:	81a3      	strheq	r3, [r4, #12]
 8014774:	bf18      	it	ne
 8014776:	81a3      	strhne	r3, [r4, #12]
 8014778:	bd10      	pop	{r4, pc}

0801477a <__sclose>:
 801477a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801477e:	f000 b84b 	b.w	8014818 <_close_r>

08014782 <_vsniprintf_r>:
 8014782:	b530      	push	{r4, r5, lr}
 8014784:	4614      	mov	r4, r2
 8014786:	2c00      	cmp	r4, #0
 8014788:	4605      	mov	r5, r0
 801478a:	461a      	mov	r2, r3
 801478c:	b09b      	sub	sp, #108	; 0x6c
 801478e:	da05      	bge.n	801479c <_vsniprintf_r+0x1a>
 8014790:	238b      	movs	r3, #139	; 0x8b
 8014792:	6003      	str	r3, [r0, #0]
 8014794:	f04f 30ff 	mov.w	r0, #4294967295
 8014798:	b01b      	add	sp, #108	; 0x6c
 801479a:	bd30      	pop	{r4, r5, pc}
 801479c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80147a0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80147a4:	bf0c      	ite	eq
 80147a6:	4623      	moveq	r3, r4
 80147a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80147ac:	9302      	str	r3, [sp, #8]
 80147ae:	9305      	str	r3, [sp, #20]
 80147b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147b4:	9100      	str	r1, [sp, #0]
 80147b6:	9104      	str	r1, [sp, #16]
 80147b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80147bc:	4669      	mov	r1, sp
 80147be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80147c0:	f001 fb94 	bl	8015eec <_svfiprintf_r>
 80147c4:	1c43      	adds	r3, r0, #1
 80147c6:	bfbc      	itt	lt
 80147c8:	238b      	movlt	r3, #139	; 0x8b
 80147ca:	602b      	strlt	r3, [r5, #0]
 80147cc:	2c00      	cmp	r4, #0
 80147ce:	d0e3      	beq.n	8014798 <_vsniprintf_r+0x16>
 80147d0:	2200      	movs	r2, #0
 80147d2:	9b00      	ldr	r3, [sp, #0]
 80147d4:	701a      	strb	r2, [r3, #0]
 80147d6:	e7df      	b.n	8014798 <_vsniprintf_r+0x16>

080147d8 <vsniprintf>:
 80147d8:	b507      	push	{r0, r1, r2, lr}
 80147da:	9300      	str	r3, [sp, #0]
 80147dc:	4613      	mov	r3, r2
 80147de:	460a      	mov	r2, r1
 80147e0:	4601      	mov	r1, r0
 80147e2:	4803      	ldr	r0, [pc, #12]	; (80147f0 <vsniprintf+0x18>)
 80147e4:	6800      	ldr	r0, [r0, #0]
 80147e6:	f7ff ffcc 	bl	8014782 <_vsniprintf_r>
 80147ea:	b003      	add	sp, #12
 80147ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80147f0:	2000012c 	.word	0x2000012c

080147f4 <_write_r>:
 80147f4:	b538      	push	{r3, r4, r5, lr}
 80147f6:	4604      	mov	r4, r0
 80147f8:	4608      	mov	r0, r1
 80147fa:	4611      	mov	r1, r2
 80147fc:	2200      	movs	r2, #0
 80147fe:	4d05      	ldr	r5, [pc, #20]	; (8014814 <_write_r+0x20>)
 8014800:	602a      	str	r2, [r5, #0]
 8014802:	461a      	mov	r2, r3
 8014804:	f7ee fbb8 	bl	8002f78 <_write>
 8014808:	1c43      	adds	r3, r0, #1
 801480a:	d102      	bne.n	8014812 <_write_r+0x1e>
 801480c:	682b      	ldr	r3, [r5, #0]
 801480e:	b103      	cbz	r3, 8014812 <_write_r+0x1e>
 8014810:	6023      	str	r3, [r4, #0]
 8014812:	bd38      	pop	{r3, r4, r5, pc}
 8014814:	200025a4 	.word	0x200025a4

08014818 <_close_r>:
 8014818:	b538      	push	{r3, r4, r5, lr}
 801481a:	2300      	movs	r3, #0
 801481c:	4d05      	ldr	r5, [pc, #20]	; (8014834 <_close_r+0x1c>)
 801481e:	4604      	mov	r4, r0
 8014820:	4608      	mov	r0, r1
 8014822:	602b      	str	r3, [r5, #0]
 8014824:	f7ee fbc4 	bl	8002fb0 <_close>
 8014828:	1c43      	adds	r3, r0, #1
 801482a:	d102      	bne.n	8014832 <_close_r+0x1a>
 801482c:	682b      	ldr	r3, [r5, #0]
 801482e:	b103      	cbz	r3, 8014832 <_close_r+0x1a>
 8014830:	6023      	str	r3, [r4, #0]
 8014832:	bd38      	pop	{r3, r4, r5, pc}
 8014834:	200025a4 	.word	0x200025a4

08014838 <quorem>:
 8014838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801483c:	6903      	ldr	r3, [r0, #16]
 801483e:	690c      	ldr	r4, [r1, #16]
 8014840:	4607      	mov	r7, r0
 8014842:	42a3      	cmp	r3, r4
 8014844:	f2c0 8082 	blt.w	801494c <quorem+0x114>
 8014848:	3c01      	subs	r4, #1
 801484a:	f100 0514 	add.w	r5, r0, #20
 801484e:	f101 0814 	add.w	r8, r1, #20
 8014852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014856:	9301      	str	r3, [sp, #4]
 8014858:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801485c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014860:	3301      	adds	r3, #1
 8014862:	429a      	cmp	r2, r3
 8014864:	fbb2 f6f3 	udiv	r6, r2, r3
 8014868:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801486c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014870:	d331      	bcc.n	80148d6 <quorem+0x9e>
 8014872:	f04f 0e00 	mov.w	lr, #0
 8014876:	4640      	mov	r0, r8
 8014878:	46ac      	mov	ip, r5
 801487a:	46f2      	mov	sl, lr
 801487c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014880:	b293      	uxth	r3, r2
 8014882:	fb06 e303 	mla	r3, r6, r3, lr
 8014886:	0c12      	lsrs	r2, r2, #16
 8014888:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801488c:	b29b      	uxth	r3, r3
 801488e:	fb06 e202 	mla	r2, r6, r2, lr
 8014892:	ebaa 0303 	sub.w	r3, sl, r3
 8014896:	f8dc a000 	ldr.w	sl, [ip]
 801489a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801489e:	fa1f fa8a 	uxth.w	sl, sl
 80148a2:	4453      	add	r3, sl
 80148a4:	f8dc a000 	ldr.w	sl, [ip]
 80148a8:	b292      	uxth	r2, r2
 80148aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80148ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80148b8:	4581      	cmp	r9, r0
 80148ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80148be:	f84c 3b04 	str.w	r3, [ip], #4
 80148c2:	d2db      	bcs.n	801487c <quorem+0x44>
 80148c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80148c8:	b92b      	cbnz	r3, 80148d6 <quorem+0x9e>
 80148ca:	9b01      	ldr	r3, [sp, #4]
 80148cc:	3b04      	subs	r3, #4
 80148ce:	429d      	cmp	r5, r3
 80148d0:	461a      	mov	r2, r3
 80148d2:	d32f      	bcc.n	8014934 <quorem+0xfc>
 80148d4:	613c      	str	r4, [r7, #16]
 80148d6:	4638      	mov	r0, r7
 80148d8:	f001 f994 	bl	8015c04 <__mcmp>
 80148dc:	2800      	cmp	r0, #0
 80148de:	db25      	blt.n	801492c <quorem+0xf4>
 80148e0:	4628      	mov	r0, r5
 80148e2:	f04f 0c00 	mov.w	ip, #0
 80148e6:	3601      	adds	r6, #1
 80148e8:	f858 1b04 	ldr.w	r1, [r8], #4
 80148ec:	f8d0 e000 	ldr.w	lr, [r0]
 80148f0:	b28b      	uxth	r3, r1
 80148f2:	ebac 0303 	sub.w	r3, ip, r3
 80148f6:	fa1f f28e 	uxth.w	r2, lr
 80148fa:	4413      	add	r3, r2
 80148fc:	0c0a      	lsrs	r2, r1, #16
 80148fe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014906:	b29b      	uxth	r3, r3
 8014908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801490c:	45c1      	cmp	r9, r8
 801490e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014912:	f840 3b04 	str.w	r3, [r0], #4
 8014916:	d2e7      	bcs.n	80148e8 <quorem+0xb0>
 8014918:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801491c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014920:	b922      	cbnz	r2, 801492c <quorem+0xf4>
 8014922:	3b04      	subs	r3, #4
 8014924:	429d      	cmp	r5, r3
 8014926:	461a      	mov	r2, r3
 8014928:	d30a      	bcc.n	8014940 <quorem+0x108>
 801492a:	613c      	str	r4, [r7, #16]
 801492c:	4630      	mov	r0, r6
 801492e:	b003      	add	sp, #12
 8014930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014934:	6812      	ldr	r2, [r2, #0]
 8014936:	3b04      	subs	r3, #4
 8014938:	2a00      	cmp	r2, #0
 801493a:	d1cb      	bne.n	80148d4 <quorem+0x9c>
 801493c:	3c01      	subs	r4, #1
 801493e:	e7c6      	b.n	80148ce <quorem+0x96>
 8014940:	6812      	ldr	r2, [r2, #0]
 8014942:	3b04      	subs	r3, #4
 8014944:	2a00      	cmp	r2, #0
 8014946:	d1f0      	bne.n	801492a <quorem+0xf2>
 8014948:	3c01      	subs	r4, #1
 801494a:	e7eb      	b.n	8014924 <quorem+0xec>
 801494c:	2000      	movs	r0, #0
 801494e:	e7ee      	b.n	801492e <quorem+0xf6>

08014950 <_dtoa_r>:
 8014950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014954:	4616      	mov	r6, r2
 8014956:	461f      	mov	r7, r3
 8014958:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801495a:	b099      	sub	sp, #100	; 0x64
 801495c:	4605      	mov	r5, r0
 801495e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014962:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8014966:	b974      	cbnz	r4, 8014986 <_dtoa_r+0x36>
 8014968:	2010      	movs	r0, #16
 801496a:	f7ff f955 	bl	8013c18 <malloc>
 801496e:	4602      	mov	r2, r0
 8014970:	6268      	str	r0, [r5, #36]	; 0x24
 8014972:	b920      	cbnz	r0, 801497e <_dtoa_r+0x2e>
 8014974:	21ea      	movs	r1, #234	; 0xea
 8014976:	4ba8      	ldr	r3, [pc, #672]	; (8014c18 <_dtoa_r+0x2c8>)
 8014978:	48a8      	ldr	r0, [pc, #672]	; (8014c1c <_dtoa_r+0x2cc>)
 801497a:	f001 fbc9 	bl	8016110 <__assert_func>
 801497e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014982:	6004      	str	r4, [r0, #0]
 8014984:	60c4      	str	r4, [r0, #12]
 8014986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014988:	6819      	ldr	r1, [r3, #0]
 801498a:	b151      	cbz	r1, 80149a2 <_dtoa_r+0x52>
 801498c:	685a      	ldr	r2, [r3, #4]
 801498e:	2301      	movs	r3, #1
 8014990:	4093      	lsls	r3, r2
 8014992:	604a      	str	r2, [r1, #4]
 8014994:	608b      	str	r3, [r1, #8]
 8014996:	4628      	mov	r0, r5
 8014998:	f000 fef6 	bl	8015788 <_Bfree>
 801499c:	2200      	movs	r2, #0
 801499e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80149a0:	601a      	str	r2, [r3, #0]
 80149a2:	1e3b      	subs	r3, r7, #0
 80149a4:	bfaf      	iteee	ge
 80149a6:	2300      	movge	r3, #0
 80149a8:	2201      	movlt	r2, #1
 80149aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80149ae:	9305      	strlt	r3, [sp, #20]
 80149b0:	bfa8      	it	ge
 80149b2:	f8c8 3000 	strge.w	r3, [r8]
 80149b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80149ba:	4b99      	ldr	r3, [pc, #612]	; (8014c20 <_dtoa_r+0x2d0>)
 80149bc:	bfb8      	it	lt
 80149be:	f8c8 2000 	strlt.w	r2, [r8]
 80149c2:	ea33 0309 	bics.w	r3, r3, r9
 80149c6:	d119      	bne.n	80149fc <_dtoa_r+0xac>
 80149c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80149cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80149ce:	6013      	str	r3, [r2, #0]
 80149d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80149d4:	4333      	orrs	r3, r6
 80149d6:	f000 857f 	beq.w	80154d8 <_dtoa_r+0xb88>
 80149da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80149dc:	b953      	cbnz	r3, 80149f4 <_dtoa_r+0xa4>
 80149de:	4b91      	ldr	r3, [pc, #580]	; (8014c24 <_dtoa_r+0x2d4>)
 80149e0:	e022      	b.n	8014a28 <_dtoa_r+0xd8>
 80149e2:	4b91      	ldr	r3, [pc, #580]	; (8014c28 <_dtoa_r+0x2d8>)
 80149e4:	9303      	str	r3, [sp, #12]
 80149e6:	3308      	adds	r3, #8
 80149e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80149ea:	6013      	str	r3, [r2, #0]
 80149ec:	9803      	ldr	r0, [sp, #12]
 80149ee:	b019      	add	sp, #100	; 0x64
 80149f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149f4:	4b8b      	ldr	r3, [pc, #556]	; (8014c24 <_dtoa_r+0x2d4>)
 80149f6:	9303      	str	r3, [sp, #12]
 80149f8:	3303      	adds	r3, #3
 80149fa:	e7f5      	b.n	80149e8 <_dtoa_r+0x98>
 80149fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014a00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8014a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014a08:	2200      	movs	r2, #0
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	f7ec f83c 	bl	8000a88 <__aeabi_dcmpeq>
 8014a10:	4680      	mov	r8, r0
 8014a12:	b158      	cbz	r0, 8014a2c <_dtoa_r+0xdc>
 8014a14:	2301      	movs	r3, #1
 8014a16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014a18:	6013      	str	r3, [r2, #0]
 8014a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	f000 8558 	beq.w	80154d2 <_dtoa_r+0xb82>
 8014a22:	4882      	ldr	r0, [pc, #520]	; (8014c2c <_dtoa_r+0x2dc>)
 8014a24:	6018      	str	r0, [r3, #0]
 8014a26:	1e43      	subs	r3, r0, #1
 8014a28:	9303      	str	r3, [sp, #12]
 8014a2a:	e7df      	b.n	80149ec <_dtoa_r+0x9c>
 8014a2c:	ab16      	add	r3, sp, #88	; 0x58
 8014a2e:	9301      	str	r3, [sp, #4]
 8014a30:	ab17      	add	r3, sp, #92	; 0x5c
 8014a32:	9300      	str	r3, [sp, #0]
 8014a34:	4628      	mov	r0, r5
 8014a36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014a3a:	f001 f98b 	bl	8015d54 <__d2b>
 8014a3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014a42:	4683      	mov	fp, r0
 8014a44:	2c00      	cmp	r4, #0
 8014a46:	d07f      	beq.n	8014b48 <_dtoa_r+0x1f8>
 8014a48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8014a52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014a56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014a5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014a5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8014a62:	2200      	movs	r2, #0
 8014a64:	4b72      	ldr	r3, [pc, #456]	; (8014c30 <_dtoa_r+0x2e0>)
 8014a66:	f7eb fbef 	bl	8000248 <__aeabi_dsub>
 8014a6a:	a365      	add	r3, pc, #404	; (adr r3, 8014c00 <_dtoa_r+0x2b0>)
 8014a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a70:	f7eb fda2 	bl	80005b8 <__aeabi_dmul>
 8014a74:	a364      	add	r3, pc, #400	; (adr r3, 8014c08 <_dtoa_r+0x2b8>)
 8014a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a7a:	f7eb fbe7 	bl	800024c <__adddf3>
 8014a7e:	4606      	mov	r6, r0
 8014a80:	4620      	mov	r0, r4
 8014a82:	460f      	mov	r7, r1
 8014a84:	f7eb fd2e 	bl	80004e4 <__aeabi_i2d>
 8014a88:	a361      	add	r3, pc, #388	; (adr r3, 8014c10 <_dtoa_r+0x2c0>)
 8014a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8e:	f7eb fd93 	bl	80005b8 <__aeabi_dmul>
 8014a92:	4602      	mov	r2, r0
 8014a94:	460b      	mov	r3, r1
 8014a96:	4630      	mov	r0, r6
 8014a98:	4639      	mov	r1, r7
 8014a9a:	f7eb fbd7 	bl	800024c <__adddf3>
 8014a9e:	4606      	mov	r6, r0
 8014aa0:	460f      	mov	r7, r1
 8014aa2:	f7ec f839 	bl	8000b18 <__aeabi_d2iz>
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	4682      	mov	sl, r0
 8014aaa:	2300      	movs	r3, #0
 8014aac:	4630      	mov	r0, r6
 8014aae:	4639      	mov	r1, r7
 8014ab0:	f7eb fff4 	bl	8000a9c <__aeabi_dcmplt>
 8014ab4:	b148      	cbz	r0, 8014aca <_dtoa_r+0x17a>
 8014ab6:	4650      	mov	r0, sl
 8014ab8:	f7eb fd14 	bl	80004e4 <__aeabi_i2d>
 8014abc:	4632      	mov	r2, r6
 8014abe:	463b      	mov	r3, r7
 8014ac0:	f7eb ffe2 	bl	8000a88 <__aeabi_dcmpeq>
 8014ac4:	b908      	cbnz	r0, 8014aca <_dtoa_r+0x17a>
 8014ac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014aca:	f1ba 0f16 	cmp.w	sl, #22
 8014ace:	d858      	bhi.n	8014b82 <_dtoa_r+0x232>
 8014ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ad4:	4b57      	ldr	r3, [pc, #348]	; (8014c34 <_dtoa_r+0x2e4>)
 8014ad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ade:	f7eb ffdd 	bl	8000a9c <__aeabi_dcmplt>
 8014ae2:	2800      	cmp	r0, #0
 8014ae4:	d04f      	beq.n	8014b86 <_dtoa_r+0x236>
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8014aee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014af0:	1b1c      	subs	r4, r3, r4
 8014af2:	1e63      	subs	r3, r4, #1
 8014af4:	9309      	str	r3, [sp, #36]	; 0x24
 8014af6:	bf49      	itett	mi
 8014af8:	f1c4 0301 	rsbmi	r3, r4, #1
 8014afc:	2300      	movpl	r3, #0
 8014afe:	9306      	strmi	r3, [sp, #24]
 8014b00:	2300      	movmi	r3, #0
 8014b02:	bf54      	ite	pl
 8014b04:	9306      	strpl	r3, [sp, #24]
 8014b06:	9309      	strmi	r3, [sp, #36]	; 0x24
 8014b08:	f1ba 0f00 	cmp.w	sl, #0
 8014b0c:	db3d      	blt.n	8014b8a <_dtoa_r+0x23a>
 8014b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b10:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014b14:	4453      	add	r3, sl
 8014b16:	9309      	str	r3, [sp, #36]	; 0x24
 8014b18:	2300      	movs	r3, #0
 8014b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8014b1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b1e:	2b09      	cmp	r3, #9
 8014b20:	f200 808c 	bhi.w	8014c3c <_dtoa_r+0x2ec>
 8014b24:	2b05      	cmp	r3, #5
 8014b26:	bfc4      	itt	gt
 8014b28:	3b04      	subgt	r3, #4
 8014b2a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8014b2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b2e:	bfc8      	it	gt
 8014b30:	2400      	movgt	r4, #0
 8014b32:	f1a3 0302 	sub.w	r3, r3, #2
 8014b36:	bfd8      	it	le
 8014b38:	2401      	movle	r4, #1
 8014b3a:	2b03      	cmp	r3, #3
 8014b3c:	f200 808a 	bhi.w	8014c54 <_dtoa_r+0x304>
 8014b40:	e8df f003 	tbb	[pc, r3]
 8014b44:	5b4d4f2d 	.word	0x5b4d4f2d
 8014b48:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8014b4c:	441c      	add	r4, r3
 8014b4e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8014b52:	2b20      	cmp	r3, #32
 8014b54:	bfc3      	ittte	gt
 8014b56:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014b5a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8014b5e:	fa09 f303 	lslgt.w	r3, r9, r3
 8014b62:	f1c3 0320 	rsble	r3, r3, #32
 8014b66:	bfc6      	itte	gt
 8014b68:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014b6c:	4318      	orrgt	r0, r3
 8014b6e:	fa06 f003 	lslle.w	r0, r6, r3
 8014b72:	f7eb fca7 	bl	80004c4 <__aeabi_ui2d>
 8014b76:	2301      	movs	r3, #1
 8014b78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014b7c:	3c01      	subs	r4, #1
 8014b7e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b80:	e76f      	b.n	8014a62 <_dtoa_r+0x112>
 8014b82:	2301      	movs	r3, #1
 8014b84:	e7b2      	b.n	8014aec <_dtoa_r+0x19c>
 8014b86:	900f      	str	r0, [sp, #60]	; 0x3c
 8014b88:	e7b1      	b.n	8014aee <_dtoa_r+0x19e>
 8014b8a:	9b06      	ldr	r3, [sp, #24]
 8014b8c:	eba3 030a 	sub.w	r3, r3, sl
 8014b90:	9306      	str	r3, [sp, #24]
 8014b92:	f1ca 0300 	rsb	r3, sl, #0
 8014b96:	930a      	str	r3, [sp, #40]	; 0x28
 8014b98:	2300      	movs	r3, #0
 8014b9a:	930e      	str	r3, [sp, #56]	; 0x38
 8014b9c:	e7be      	b.n	8014b1c <_dtoa_r+0x1cc>
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ba2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	dc58      	bgt.n	8014c5a <_dtoa_r+0x30a>
 8014ba8:	f04f 0901 	mov.w	r9, #1
 8014bac:	464b      	mov	r3, r9
 8014bae:	f8cd 9020 	str.w	r9, [sp, #32]
 8014bb2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8014bba:	6042      	str	r2, [r0, #4]
 8014bbc:	2204      	movs	r2, #4
 8014bbe:	f102 0614 	add.w	r6, r2, #20
 8014bc2:	429e      	cmp	r6, r3
 8014bc4:	6841      	ldr	r1, [r0, #4]
 8014bc6:	d94e      	bls.n	8014c66 <_dtoa_r+0x316>
 8014bc8:	4628      	mov	r0, r5
 8014bca:	f000 fd9d 	bl	8015708 <_Balloc>
 8014bce:	9003      	str	r0, [sp, #12]
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	d14c      	bne.n	8014c6e <_dtoa_r+0x31e>
 8014bd4:	4602      	mov	r2, r0
 8014bd6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014bda:	4b17      	ldr	r3, [pc, #92]	; (8014c38 <_dtoa_r+0x2e8>)
 8014bdc:	e6cc      	b.n	8014978 <_dtoa_r+0x28>
 8014bde:	2301      	movs	r3, #1
 8014be0:	e7de      	b.n	8014ba0 <_dtoa_r+0x250>
 8014be2:	2300      	movs	r3, #0
 8014be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8014be6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014be8:	eb0a 0903 	add.w	r9, sl, r3
 8014bec:	f109 0301 	add.w	r3, r9, #1
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	9308      	str	r3, [sp, #32]
 8014bf4:	bfb8      	it	lt
 8014bf6:	2301      	movlt	r3, #1
 8014bf8:	e7dd      	b.n	8014bb6 <_dtoa_r+0x266>
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	e7f2      	b.n	8014be4 <_dtoa_r+0x294>
 8014bfe:	bf00      	nop
 8014c00:	636f4361 	.word	0x636f4361
 8014c04:	3fd287a7 	.word	0x3fd287a7
 8014c08:	8b60c8b3 	.word	0x8b60c8b3
 8014c0c:	3fc68a28 	.word	0x3fc68a28
 8014c10:	509f79fb 	.word	0x509f79fb
 8014c14:	3fd34413 	.word	0x3fd34413
 8014c18:	0802fd39 	.word	0x0802fd39
 8014c1c:	0802fd50 	.word	0x0802fd50
 8014c20:	7ff00000 	.word	0x7ff00000
 8014c24:	0802fd35 	.word	0x0802fd35
 8014c28:	0802fd2c 	.word	0x0802fd2c
 8014c2c:	0802fd09 	.word	0x0802fd09
 8014c30:	3ff80000 	.word	0x3ff80000
 8014c34:	0802fe40 	.word	0x0802fe40
 8014c38:	0802fdab 	.word	0x0802fdab
 8014c3c:	2401      	movs	r4, #1
 8014c3e:	2300      	movs	r3, #0
 8014c40:	940b      	str	r4, [sp, #44]	; 0x2c
 8014c42:	9322      	str	r3, [sp, #136]	; 0x88
 8014c44:	f04f 39ff 	mov.w	r9, #4294967295
 8014c48:	2200      	movs	r2, #0
 8014c4a:	2312      	movs	r3, #18
 8014c4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8014c50:	9223      	str	r2, [sp, #140]	; 0x8c
 8014c52:	e7b0      	b.n	8014bb6 <_dtoa_r+0x266>
 8014c54:	2301      	movs	r3, #1
 8014c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c58:	e7f4      	b.n	8014c44 <_dtoa_r+0x2f4>
 8014c5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8014c5e:	464b      	mov	r3, r9
 8014c60:	f8cd 9020 	str.w	r9, [sp, #32]
 8014c64:	e7a7      	b.n	8014bb6 <_dtoa_r+0x266>
 8014c66:	3101      	adds	r1, #1
 8014c68:	6041      	str	r1, [r0, #4]
 8014c6a:	0052      	lsls	r2, r2, #1
 8014c6c:	e7a7      	b.n	8014bbe <_dtoa_r+0x26e>
 8014c6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014c70:	9a03      	ldr	r2, [sp, #12]
 8014c72:	601a      	str	r2, [r3, #0]
 8014c74:	9b08      	ldr	r3, [sp, #32]
 8014c76:	2b0e      	cmp	r3, #14
 8014c78:	f200 80a8 	bhi.w	8014dcc <_dtoa_r+0x47c>
 8014c7c:	2c00      	cmp	r4, #0
 8014c7e:	f000 80a5 	beq.w	8014dcc <_dtoa_r+0x47c>
 8014c82:	f1ba 0f00 	cmp.w	sl, #0
 8014c86:	dd34      	ble.n	8014cf2 <_dtoa_r+0x3a2>
 8014c88:	4a9a      	ldr	r2, [pc, #616]	; (8014ef4 <_dtoa_r+0x5a4>)
 8014c8a:	f00a 030f 	and.w	r3, sl, #15
 8014c8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014c92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014c96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014c9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014c9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8014ca2:	d016      	beq.n	8014cd2 <_dtoa_r+0x382>
 8014ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ca8:	4b93      	ldr	r3, [pc, #588]	; (8014ef8 <_dtoa_r+0x5a8>)
 8014caa:	2703      	movs	r7, #3
 8014cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014cb0:	f7eb fdac 	bl	800080c <__aeabi_ddiv>
 8014cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014cb8:	f004 040f 	and.w	r4, r4, #15
 8014cbc:	4e8e      	ldr	r6, [pc, #568]	; (8014ef8 <_dtoa_r+0x5a8>)
 8014cbe:	b954      	cbnz	r4, 8014cd6 <_dtoa_r+0x386>
 8014cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014cc8:	f7eb fda0 	bl	800080c <__aeabi_ddiv>
 8014ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014cd0:	e029      	b.n	8014d26 <_dtoa_r+0x3d6>
 8014cd2:	2702      	movs	r7, #2
 8014cd4:	e7f2      	b.n	8014cbc <_dtoa_r+0x36c>
 8014cd6:	07e1      	lsls	r1, r4, #31
 8014cd8:	d508      	bpl.n	8014cec <_dtoa_r+0x39c>
 8014cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014ce2:	f7eb fc69 	bl	80005b8 <__aeabi_dmul>
 8014ce6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014cea:	3701      	adds	r7, #1
 8014cec:	1064      	asrs	r4, r4, #1
 8014cee:	3608      	adds	r6, #8
 8014cf0:	e7e5      	b.n	8014cbe <_dtoa_r+0x36e>
 8014cf2:	f000 80a5 	beq.w	8014e40 <_dtoa_r+0x4f0>
 8014cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014cfa:	f1ca 0400 	rsb	r4, sl, #0
 8014cfe:	4b7d      	ldr	r3, [pc, #500]	; (8014ef4 <_dtoa_r+0x5a4>)
 8014d00:	f004 020f 	and.w	r2, r4, #15
 8014d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0c:	f7eb fc54 	bl	80005b8 <__aeabi_dmul>
 8014d10:	2702      	movs	r7, #2
 8014d12:	2300      	movs	r3, #0
 8014d14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d18:	4e77      	ldr	r6, [pc, #476]	; (8014ef8 <_dtoa_r+0x5a8>)
 8014d1a:	1124      	asrs	r4, r4, #4
 8014d1c:	2c00      	cmp	r4, #0
 8014d1e:	f040 8084 	bne.w	8014e2a <_dtoa_r+0x4da>
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d1d2      	bne.n	8014ccc <_dtoa_r+0x37c>
 8014d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	f000 808b 	beq.w	8014e44 <_dtoa_r+0x4f4>
 8014d2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014d32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	4b6f      	ldr	r3, [pc, #444]	; (8014efc <_dtoa_r+0x5ac>)
 8014d3e:	f7eb fead 	bl	8000a9c <__aeabi_dcmplt>
 8014d42:	2800      	cmp	r0, #0
 8014d44:	d07e      	beq.n	8014e44 <_dtoa_r+0x4f4>
 8014d46:	9b08      	ldr	r3, [sp, #32]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d07b      	beq.n	8014e44 <_dtoa_r+0x4f4>
 8014d4c:	f1b9 0f00 	cmp.w	r9, #0
 8014d50:	dd38      	ble.n	8014dc4 <_dtoa_r+0x474>
 8014d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014d56:	2200      	movs	r2, #0
 8014d58:	4b69      	ldr	r3, [pc, #420]	; (8014f00 <_dtoa_r+0x5b0>)
 8014d5a:	f7eb fc2d 	bl	80005b8 <__aeabi_dmul>
 8014d5e:	464c      	mov	r4, r9
 8014d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d64:	f10a 38ff 	add.w	r8, sl, #4294967295
 8014d68:	3701      	adds	r7, #1
 8014d6a:	4638      	mov	r0, r7
 8014d6c:	f7eb fbba 	bl	80004e4 <__aeabi_i2d>
 8014d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d74:	f7eb fc20 	bl	80005b8 <__aeabi_dmul>
 8014d78:	2200      	movs	r2, #0
 8014d7a:	4b62      	ldr	r3, [pc, #392]	; (8014f04 <_dtoa_r+0x5b4>)
 8014d7c:	f7eb fa66 	bl	800024c <__adddf3>
 8014d80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014d84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014d88:	9611      	str	r6, [sp, #68]	; 0x44
 8014d8a:	2c00      	cmp	r4, #0
 8014d8c:	d15d      	bne.n	8014e4a <_dtoa_r+0x4fa>
 8014d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d92:	2200      	movs	r2, #0
 8014d94:	4b5c      	ldr	r3, [pc, #368]	; (8014f08 <_dtoa_r+0x5b8>)
 8014d96:	f7eb fa57 	bl	8000248 <__aeabi_dsub>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	460b      	mov	r3, r1
 8014d9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014da2:	4633      	mov	r3, r6
 8014da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014da6:	f7eb fe97 	bl	8000ad8 <__aeabi_dcmpgt>
 8014daa:	2800      	cmp	r0, #0
 8014dac:	f040 829c 	bne.w	80152e8 <_dtoa_r+0x998>
 8014db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014db6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014dba:	f7eb fe6f 	bl	8000a9c <__aeabi_dcmplt>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	f040 8290 	bne.w	80152e4 <_dtoa_r+0x994>
 8014dc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8014dc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014dcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	f2c0 8152 	blt.w	8015078 <_dtoa_r+0x728>
 8014dd4:	f1ba 0f0e 	cmp.w	sl, #14
 8014dd8:	f300 814e 	bgt.w	8015078 <_dtoa_r+0x728>
 8014ddc:	4b45      	ldr	r3, [pc, #276]	; (8014ef4 <_dtoa_r+0x5a4>)
 8014dde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014de2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014de6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8014dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	f280 80db 	bge.w	8014fa8 <_dtoa_r+0x658>
 8014df2:	9b08      	ldr	r3, [sp, #32]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	f300 80d7 	bgt.w	8014fa8 <_dtoa_r+0x658>
 8014dfa:	f040 8272 	bne.w	80152e2 <_dtoa_r+0x992>
 8014dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e02:	2200      	movs	r2, #0
 8014e04:	4b40      	ldr	r3, [pc, #256]	; (8014f08 <_dtoa_r+0x5b8>)
 8014e06:	f7eb fbd7 	bl	80005b8 <__aeabi_dmul>
 8014e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e0e:	f7eb fe59 	bl	8000ac4 <__aeabi_dcmpge>
 8014e12:	9c08      	ldr	r4, [sp, #32]
 8014e14:	4626      	mov	r6, r4
 8014e16:	2800      	cmp	r0, #0
 8014e18:	f040 8248 	bne.w	80152ac <_dtoa_r+0x95c>
 8014e1c:	2331      	movs	r3, #49	; 0x31
 8014e1e:	9f03      	ldr	r7, [sp, #12]
 8014e20:	f10a 0a01 	add.w	sl, sl, #1
 8014e24:	f807 3b01 	strb.w	r3, [r7], #1
 8014e28:	e244      	b.n	80152b4 <_dtoa_r+0x964>
 8014e2a:	07e2      	lsls	r2, r4, #31
 8014e2c:	d505      	bpl.n	8014e3a <_dtoa_r+0x4ea>
 8014e2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014e32:	f7eb fbc1 	bl	80005b8 <__aeabi_dmul>
 8014e36:	2301      	movs	r3, #1
 8014e38:	3701      	adds	r7, #1
 8014e3a:	1064      	asrs	r4, r4, #1
 8014e3c:	3608      	adds	r6, #8
 8014e3e:	e76d      	b.n	8014d1c <_dtoa_r+0x3cc>
 8014e40:	2702      	movs	r7, #2
 8014e42:	e770      	b.n	8014d26 <_dtoa_r+0x3d6>
 8014e44:	46d0      	mov	r8, sl
 8014e46:	9c08      	ldr	r4, [sp, #32]
 8014e48:	e78f      	b.n	8014d6a <_dtoa_r+0x41a>
 8014e4a:	9903      	ldr	r1, [sp, #12]
 8014e4c:	4b29      	ldr	r3, [pc, #164]	; (8014ef4 <_dtoa_r+0x5a4>)
 8014e4e:	4421      	add	r1, r4
 8014e50:	9112      	str	r1, [sp, #72]	; 0x48
 8014e52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014e58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014e5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014e60:	2900      	cmp	r1, #0
 8014e62:	d055      	beq.n	8014f10 <_dtoa_r+0x5c0>
 8014e64:	2000      	movs	r0, #0
 8014e66:	4929      	ldr	r1, [pc, #164]	; (8014f0c <_dtoa_r+0x5bc>)
 8014e68:	f7eb fcd0 	bl	800080c <__aeabi_ddiv>
 8014e6c:	463b      	mov	r3, r7
 8014e6e:	4632      	mov	r2, r6
 8014e70:	f7eb f9ea 	bl	8000248 <__aeabi_dsub>
 8014e74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014e78:	9f03      	ldr	r7, [sp, #12]
 8014e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e7e:	f7eb fe4b 	bl	8000b18 <__aeabi_d2iz>
 8014e82:	4604      	mov	r4, r0
 8014e84:	f7eb fb2e 	bl	80004e4 <__aeabi_i2d>
 8014e88:	4602      	mov	r2, r0
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e90:	f7eb f9da 	bl	8000248 <__aeabi_dsub>
 8014e94:	4602      	mov	r2, r0
 8014e96:	460b      	mov	r3, r1
 8014e98:	3430      	adds	r4, #48	; 0x30
 8014e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014e9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ea2:	f807 4b01 	strb.w	r4, [r7], #1
 8014ea6:	f7eb fdf9 	bl	8000a9c <__aeabi_dcmplt>
 8014eaa:	2800      	cmp	r0, #0
 8014eac:	d174      	bne.n	8014f98 <_dtoa_r+0x648>
 8014eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eb2:	2000      	movs	r0, #0
 8014eb4:	4911      	ldr	r1, [pc, #68]	; (8014efc <_dtoa_r+0x5ac>)
 8014eb6:	f7eb f9c7 	bl	8000248 <__aeabi_dsub>
 8014eba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ebe:	f7eb fded 	bl	8000a9c <__aeabi_dcmplt>
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	f040 80b7 	bne.w	8015036 <_dtoa_r+0x6e6>
 8014ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014eca:	429f      	cmp	r7, r3
 8014ecc:	f43f af7a 	beq.w	8014dc4 <_dtoa_r+0x474>
 8014ed0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	4b0a      	ldr	r3, [pc, #40]	; (8014f00 <_dtoa_r+0x5b0>)
 8014ed8:	f7eb fb6e 	bl	80005b8 <__aeabi_dmul>
 8014edc:	2200      	movs	r2, #0
 8014ede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ee6:	4b06      	ldr	r3, [pc, #24]	; (8014f00 <_dtoa_r+0x5b0>)
 8014ee8:	f7eb fb66 	bl	80005b8 <__aeabi_dmul>
 8014eec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ef0:	e7c3      	b.n	8014e7a <_dtoa_r+0x52a>
 8014ef2:	bf00      	nop
 8014ef4:	0802fe40 	.word	0x0802fe40
 8014ef8:	0802fe18 	.word	0x0802fe18
 8014efc:	3ff00000 	.word	0x3ff00000
 8014f00:	40240000 	.word	0x40240000
 8014f04:	401c0000 	.word	0x401c0000
 8014f08:	40140000 	.word	0x40140000
 8014f0c:	3fe00000 	.word	0x3fe00000
 8014f10:	4630      	mov	r0, r6
 8014f12:	4639      	mov	r1, r7
 8014f14:	f7eb fb50 	bl	80005b8 <__aeabi_dmul>
 8014f18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014f1e:	9c03      	ldr	r4, [sp, #12]
 8014f20:	9314      	str	r3, [sp, #80]	; 0x50
 8014f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f26:	f7eb fdf7 	bl	8000b18 <__aeabi_d2iz>
 8014f2a:	9015      	str	r0, [sp, #84]	; 0x54
 8014f2c:	f7eb fada 	bl	80004e4 <__aeabi_i2d>
 8014f30:	4602      	mov	r2, r0
 8014f32:	460b      	mov	r3, r1
 8014f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014f38:	f7eb f986 	bl	8000248 <__aeabi_dsub>
 8014f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f3e:	4606      	mov	r6, r0
 8014f40:	3330      	adds	r3, #48	; 0x30
 8014f42:	f804 3b01 	strb.w	r3, [r4], #1
 8014f46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f48:	460f      	mov	r7, r1
 8014f4a:	429c      	cmp	r4, r3
 8014f4c:	f04f 0200 	mov.w	r2, #0
 8014f50:	d124      	bne.n	8014f9c <_dtoa_r+0x64c>
 8014f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014f56:	4bb0      	ldr	r3, [pc, #704]	; (8015218 <_dtoa_r+0x8c8>)
 8014f58:	f7eb f978 	bl	800024c <__adddf3>
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	460b      	mov	r3, r1
 8014f60:	4630      	mov	r0, r6
 8014f62:	4639      	mov	r1, r7
 8014f64:	f7eb fdb8 	bl	8000ad8 <__aeabi_dcmpgt>
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	d163      	bne.n	8015034 <_dtoa_r+0x6e4>
 8014f6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014f70:	2000      	movs	r0, #0
 8014f72:	49a9      	ldr	r1, [pc, #676]	; (8015218 <_dtoa_r+0x8c8>)
 8014f74:	f7eb f968 	bl	8000248 <__aeabi_dsub>
 8014f78:	4602      	mov	r2, r0
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	4630      	mov	r0, r6
 8014f7e:	4639      	mov	r1, r7
 8014f80:	f7eb fd8c 	bl	8000a9c <__aeabi_dcmplt>
 8014f84:	2800      	cmp	r0, #0
 8014f86:	f43f af1d 	beq.w	8014dc4 <_dtoa_r+0x474>
 8014f8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014f8c:	1e7b      	subs	r3, r7, #1
 8014f8e:	9314      	str	r3, [sp, #80]	; 0x50
 8014f90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8014f94:	2b30      	cmp	r3, #48	; 0x30
 8014f96:	d0f8      	beq.n	8014f8a <_dtoa_r+0x63a>
 8014f98:	46c2      	mov	sl, r8
 8014f9a:	e03b      	b.n	8015014 <_dtoa_r+0x6c4>
 8014f9c:	4b9f      	ldr	r3, [pc, #636]	; (801521c <_dtoa_r+0x8cc>)
 8014f9e:	f7eb fb0b 	bl	80005b8 <__aeabi_dmul>
 8014fa2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014fa6:	e7bc      	b.n	8014f22 <_dtoa_r+0x5d2>
 8014fa8:	9f03      	ldr	r7, [sp, #12]
 8014faa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014fae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014fb2:	4640      	mov	r0, r8
 8014fb4:	4649      	mov	r1, r9
 8014fb6:	f7eb fc29 	bl	800080c <__aeabi_ddiv>
 8014fba:	f7eb fdad 	bl	8000b18 <__aeabi_d2iz>
 8014fbe:	4604      	mov	r4, r0
 8014fc0:	f7eb fa90 	bl	80004e4 <__aeabi_i2d>
 8014fc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014fc8:	f7eb faf6 	bl	80005b8 <__aeabi_dmul>
 8014fcc:	4602      	mov	r2, r0
 8014fce:	460b      	mov	r3, r1
 8014fd0:	4640      	mov	r0, r8
 8014fd2:	4649      	mov	r1, r9
 8014fd4:	f7eb f938 	bl	8000248 <__aeabi_dsub>
 8014fd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014fdc:	f807 6b01 	strb.w	r6, [r7], #1
 8014fe0:	9e03      	ldr	r6, [sp, #12]
 8014fe2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8014fe6:	1bbe      	subs	r6, r7, r6
 8014fe8:	45b4      	cmp	ip, r6
 8014fea:	4602      	mov	r2, r0
 8014fec:	460b      	mov	r3, r1
 8014fee:	d136      	bne.n	801505e <_dtoa_r+0x70e>
 8014ff0:	f7eb f92c 	bl	800024c <__adddf3>
 8014ff4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ff8:	4680      	mov	r8, r0
 8014ffa:	4689      	mov	r9, r1
 8014ffc:	f7eb fd6c 	bl	8000ad8 <__aeabi_dcmpgt>
 8015000:	bb58      	cbnz	r0, 801505a <_dtoa_r+0x70a>
 8015002:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015006:	4640      	mov	r0, r8
 8015008:	4649      	mov	r1, r9
 801500a:	f7eb fd3d 	bl	8000a88 <__aeabi_dcmpeq>
 801500e:	b108      	cbz	r0, 8015014 <_dtoa_r+0x6c4>
 8015010:	07e1      	lsls	r1, r4, #31
 8015012:	d422      	bmi.n	801505a <_dtoa_r+0x70a>
 8015014:	4628      	mov	r0, r5
 8015016:	4659      	mov	r1, fp
 8015018:	f000 fbb6 	bl	8015788 <_Bfree>
 801501c:	2300      	movs	r3, #0
 801501e:	703b      	strb	r3, [r7, #0]
 8015020:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015022:	f10a 0001 	add.w	r0, sl, #1
 8015026:	6018      	str	r0, [r3, #0]
 8015028:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801502a:	2b00      	cmp	r3, #0
 801502c:	f43f acde 	beq.w	80149ec <_dtoa_r+0x9c>
 8015030:	601f      	str	r7, [r3, #0]
 8015032:	e4db      	b.n	80149ec <_dtoa_r+0x9c>
 8015034:	4627      	mov	r7, r4
 8015036:	463b      	mov	r3, r7
 8015038:	461f      	mov	r7, r3
 801503a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801503e:	2a39      	cmp	r2, #57	; 0x39
 8015040:	d107      	bne.n	8015052 <_dtoa_r+0x702>
 8015042:	9a03      	ldr	r2, [sp, #12]
 8015044:	429a      	cmp	r2, r3
 8015046:	d1f7      	bne.n	8015038 <_dtoa_r+0x6e8>
 8015048:	2230      	movs	r2, #48	; 0x30
 801504a:	9903      	ldr	r1, [sp, #12]
 801504c:	f108 0801 	add.w	r8, r8, #1
 8015050:	700a      	strb	r2, [r1, #0]
 8015052:	781a      	ldrb	r2, [r3, #0]
 8015054:	3201      	adds	r2, #1
 8015056:	701a      	strb	r2, [r3, #0]
 8015058:	e79e      	b.n	8014f98 <_dtoa_r+0x648>
 801505a:	46d0      	mov	r8, sl
 801505c:	e7eb      	b.n	8015036 <_dtoa_r+0x6e6>
 801505e:	2200      	movs	r2, #0
 8015060:	4b6e      	ldr	r3, [pc, #440]	; (801521c <_dtoa_r+0x8cc>)
 8015062:	f7eb faa9 	bl	80005b8 <__aeabi_dmul>
 8015066:	2200      	movs	r2, #0
 8015068:	2300      	movs	r3, #0
 801506a:	4680      	mov	r8, r0
 801506c:	4689      	mov	r9, r1
 801506e:	f7eb fd0b 	bl	8000a88 <__aeabi_dcmpeq>
 8015072:	2800      	cmp	r0, #0
 8015074:	d09b      	beq.n	8014fae <_dtoa_r+0x65e>
 8015076:	e7cd      	b.n	8015014 <_dtoa_r+0x6c4>
 8015078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801507a:	2a00      	cmp	r2, #0
 801507c:	f000 80d0 	beq.w	8015220 <_dtoa_r+0x8d0>
 8015080:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015082:	2a01      	cmp	r2, #1
 8015084:	f300 80ae 	bgt.w	80151e4 <_dtoa_r+0x894>
 8015088:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801508a:	2a00      	cmp	r2, #0
 801508c:	f000 80a6 	beq.w	80151dc <_dtoa_r+0x88c>
 8015090:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015094:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015096:	9f06      	ldr	r7, [sp, #24]
 8015098:	9a06      	ldr	r2, [sp, #24]
 801509a:	2101      	movs	r1, #1
 801509c:	441a      	add	r2, r3
 801509e:	9206      	str	r2, [sp, #24]
 80150a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150a2:	4628      	mov	r0, r5
 80150a4:	441a      	add	r2, r3
 80150a6:	9209      	str	r2, [sp, #36]	; 0x24
 80150a8:	f000 fc24 	bl	80158f4 <__i2b>
 80150ac:	4606      	mov	r6, r0
 80150ae:	2f00      	cmp	r7, #0
 80150b0:	dd0c      	ble.n	80150cc <_dtoa_r+0x77c>
 80150b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	dd09      	ble.n	80150cc <_dtoa_r+0x77c>
 80150b8:	42bb      	cmp	r3, r7
 80150ba:	bfa8      	it	ge
 80150bc:	463b      	movge	r3, r7
 80150be:	9a06      	ldr	r2, [sp, #24]
 80150c0:	1aff      	subs	r7, r7, r3
 80150c2:	1ad2      	subs	r2, r2, r3
 80150c4:	9206      	str	r2, [sp, #24]
 80150c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	9309      	str	r3, [sp, #36]	; 0x24
 80150cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150ce:	b1f3      	cbz	r3, 801510e <_dtoa_r+0x7be>
 80150d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	f000 80a8 	beq.w	8015228 <_dtoa_r+0x8d8>
 80150d8:	2c00      	cmp	r4, #0
 80150da:	dd10      	ble.n	80150fe <_dtoa_r+0x7ae>
 80150dc:	4631      	mov	r1, r6
 80150de:	4622      	mov	r2, r4
 80150e0:	4628      	mov	r0, r5
 80150e2:	f000 fcc5 	bl	8015a70 <__pow5mult>
 80150e6:	465a      	mov	r2, fp
 80150e8:	4601      	mov	r1, r0
 80150ea:	4606      	mov	r6, r0
 80150ec:	4628      	mov	r0, r5
 80150ee:	f000 fc17 	bl	8015920 <__multiply>
 80150f2:	4680      	mov	r8, r0
 80150f4:	4659      	mov	r1, fp
 80150f6:	4628      	mov	r0, r5
 80150f8:	f000 fb46 	bl	8015788 <_Bfree>
 80150fc:	46c3      	mov	fp, r8
 80150fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015100:	1b1a      	subs	r2, r3, r4
 8015102:	d004      	beq.n	801510e <_dtoa_r+0x7be>
 8015104:	4659      	mov	r1, fp
 8015106:	4628      	mov	r0, r5
 8015108:	f000 fcb2 	bl	8015a70 <__pow5mult>
 801510c:	4683      	mov	fp, r0
 801510e:	2101      	movs	r1, #1
 8015110:	4628      	mov	r0, r5
 8015112:	f000 fbef 	bl	80158f4 <__i2b>
 8015116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015118:	4604      	mov	r4, r0
 801511a:	2b00      	cmp	r3, #0
 801511c:	f340 8086 	ble.w	801522c <_dtoa_r+0x8dc>
 8015120:	461a      	mov	r2, r3
 8015122:	4601      	mov	r1, r0
 8015124:	4628      	mov	r0, r5
 8015126:	f000 fca3 	bl	8015a70 <__pow5mult>
 801512a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801512c:	4604      	mov	r4, r0
 801512e:	2b01      	cmp	r3, #1
 8015130:	dd7f      	ble.n	8015232 <_dtoa_r+0x8e2>
 8015132:	f04f 0800 	mov.w	r8, #0
 8015136:	6923      	ldr	r3, [r4, #16]
 8015138:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801513c:	6918      	ldr	r0, [r3, #16]
 801513e:	f000 fb8b 	bl	8015858 <__hi0bits>
 8015142:	f1c0 0020 	rsb	r0, r0, #32
 8015146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015148:	4418      	add	r0, r3
 801514a:	f010 001f 	ands.w	r0, r0, #31
 801514e:	f000 8092 	beq.w	8015276 <_dtoa_r+0x926>
 8015152:	f1c0 0320 	rsb	r3, r0, #32
 8015156:	2b04      	cmp	r3, #4
 8015158:	f340 808a 	ble.w	8015270 <_dtoa_r+0x920>
 801515c:	f1c0 001c 	rsb	r0, r0, #28
 8015160:	9b06      	ldr	r3, [sp, #24]
 8015162:	4407      	add	r7, r0
 8015164:	4403      	add	r3, r0
 8015166:	9306      	str	r3, [sp, #24]
 8015168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801516a:	4403      	add	r3, r0
 801516c:	9309      	str	r3, [sp, #36]	; 0x24
 801516e:	9b06      	ldr	r3, [sp, #24]
 8015170:	2b00      	cmp	r3, #0
 8015172:	dd05      	ble.n	8015180 <_dtoa_r+0x830>
 8015174:	4659      	mov	r1, fp
 8015176:	461a      	mov	r2, r3
 8015178:	4628      	mov	r0, r5
 801517a:	f000 fcd3 	bl	8015b24 <__lshift>
 801517e:	4683      	mov	fp, r0
 8015180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015182:	2b00      	cmp	r3, #0
 8015184:	dd05      	ble.n	8015192 <_dtoa_r+0x842>
 8015186:	4621      	mov	r1, r4
 8015188:	461a      	mov	r2, r3
 801518a:	4628      	mov	r0, r5
 801518c:	f000 fcca 	bl	8015b24 <__lshift>
 8015190:	4604      	mov	r4, r0
 8015192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015194:	2b00      	cmp	r3, #0
 8015196:	d070      	beq.n	801527a <_dtoa_r+0x92a>
 8015198:	4621      	mov	r1, r4
 801519a:	4658      	mov	r0, fp
 801519c:	f000 fd32 	bl	8015c04 <__mcmp>
 80151a0:	2800      	cmp	r0, #0
 80151a2:	da6a      	bge.n	801527a <_dtoa_r+0x92a>
 80151a4:	2300      	movs	r3, #0
 80151a6:	4659      	mov	r1, fp
 80151a8:	220a      	movs	r2, #10
 80151aa:	4628      	mov	r0, r5
 80151ac:	f000 fb0e 	bl	80157cc <__multadd>
 80151b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151b2:	4683      	mov	fp, r0
 80151b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	f000 8194 	beq.w	80154e6 <_dtoa_r+0xb96>
 80151be:	4631      	mov	r1, r6
 80151c0:	2300      	movs	r3, #0
 80151c2:	220a      	movs	r2, #10
 80151c4:	4628      	mov	r0, r5
 80151c6:	f000 fb01 	bl	80157cc <__multadd>
 80151ca:	f1b9 0f00 	cmp.w	r9, #0
 80151ce:	4606      	mov	r6, r0
 80151d0:	f300 8093 	bgt.w	80152fa <_dtoa_r+0x9aa>
 80151d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	dc57      	bgt.n	801528a <_dtoa_r+0x93a>
 80151da:	e08e      	b.n	80152fa <_dtoa_r+0x9aa>
 80151dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80151de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80151e2:	e757      	b.n	8015094 <_dtoa_r+0x744>
 80151e4:	9b08      	ldr	r3, [sp, #32]
 80151e6:	1e5c      	subs	r4, r3, #1
 80151e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151ea:	42a3      	cmp	r3, r4
 80151ec:	bfb7      	itett	lt
 80151ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80151f0:	1b1c      	subge	r4, r3, r4
 80151f2:	1ae2      	sublt	r2, r4, r3
 80151f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80151f6:	bfbe      	ittt	lt
 80151f8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80151fa:	189b      	addlt	r3, r3, r2
 80151fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80151fe:	9b08      	ldr	r3, [sp, #32]
 8015200:	bfb8      	it	lt
 8015202:	2400      	movlt	r4, #0
 8015204:	2b00      	cmp	r3, #0
 8015206:	bfbb      	ittet	lt
 8015208:	9b06      	ldrlt	r3, [sp, #24]
 801520a:	9a08      	ldrlt	r2, [sp, #32]
 801520c:	9f06      	ldrge	r7, [sp, #24]
 801520e:	1a9f      	sublt	r7, r3, r2
 8015210:	bfac      	ite	ge
 8015212:	9b08      	ldrge	r3, [sp, #32]
 8015214:	2300      	movlt	r3, #0
 8015216:	e73f      	b.n	8015098 <_dtoa_r+0x748>
 8015218:	3fe00000 	.word	0x3fe00000
 801521c:	40240000 	.word	0x40240000
 8015220:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8015222:	9f06      	ldr	r7, [sp, #24]
 8015224:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8015226:	e742      	b.n	80150ae <_dtoa_r+0x75e>
 8015228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801522a:	e76b      	b.n	8015104 <_dtoa_r+0x7b4>
 801522c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801522e:	2b01      	cmp	r3, #1
 8015230:	dc19      	bgt.n	8015266 <_dtoa_r+0x916>
 8015232:	9b04      	ldr	r3, [sp, #16]
 8015234:	b9bb      	cbnz	r3, 8015266 <_dtoa_r+0x916>
 8015236:	9b05      	ldr	r3, [sp, #20]
 8015238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801523c:	b99b      	cbnz	r3, 8015266 <_dtoa_r+0x916>
 801523e:	9b05      	ldr	r3, [sp, #20]
 8015240:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015244:	0d1b      	lsrs	r3, r3, #20
 8015246:	051b      	lsls	r3, r3, #20
 8015248:	b183      	cbz	r3, 801526c <_dtoa_r+0x91c>
 801524a:	f04f 0801 	mov.w	r8, #1
 801524e:	9b06      	ldr	r3, [sp, #24]
 8015250:	3301      	adds	r3, #1
 8015252:	9306      	str	r3, [sp, #24]
 8015254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015256:	3301      	adds	r3, #1
 8015258:	9309      	str	r3, [sp, #36]	; 0x24
 801525a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801525c:	2b00      	cmp	r3, #0
 801525e:	f47f af6a 	bne.w	8015136 <_dtoa_r+0x7e6>
 8015262:	2001      	movs	r0, #1
 8015264:	e76f      	b.n	8015146 <_dtoa_r+0x7f6>
 8015266:	f04f 0800 	mov.w	r8, #0
 801526a:	e7f6      	b.n	801525a <_dtoa_r+0x90a>
 801526c:	4698      	mov	r8, r3
 801526e:	e7f4      	b.n	801525a <_dtoa_r+0x90a>
 8015270:	f43f af7d 	beq.w	801516e <_dtoa_r+0x81e>
 8015274:	4618      	mov	r0, r3
 8015276:	301c      	adds	r0, #28
 8015278:	e772      	b.n	8015160 <_dtoa_r+0x810>
 801527a:	9b08      	ldr	r3, [sp, #32]
 801527c:	2b00      	cmp	r3, #0
 801527e:	dc36      	bgt.n	80152ee <_dtoa_r+0x99e>
 8015280:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015282:	2b02      	cmp	r3, #2
 8015284:	dd33      	ble.n	80152ee <_dtoa_r+0x99e>
 8015286:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801528a:	f1b9 0f00 	cmp.w	r9, #0
 801528e:	d10d      	bne.n	80152ac <_dtoa_r+0x95c>
 8015290:	4621      	mov	r1, r4
 8015292:	464b      	mov	r3, r9
 8015294:	2205      	movs	r2, #5
 8015296:	4628      	mov	r0, r5
 8015298:	f000 fa98 	bl	80157cc <__multadd>
 801529c:	4601      	mov	r1, r0
 801529e:	4604      	mov	r4, r0
 80152a0:	4658      	mov	r0, fp
 80152a2:	f000 fcaf 	bl	8015c04 <__mcmp>
 80152a6:	2800      	cmp	r0, #0
 80152a8:	f73f adb8 	bgt.w	8014e1c <_dtoa_r+0x4cc>
 80152ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80152ae:	9f03      	ldr	r7, [sp, #12]
 80152b0:	ea6f 0a03 	mvn.w	sl, r3
 80152b4:	f04f 0800 	mov.w	r8, #0
 80152b8:	4621      	mov	r1, r4
 80152ba:	4628      	mov	r0, r5
 80152bc:	f000 fa64 	bl	8015788 <_Bfree>
 80152c0:	2e00      	cmp	r6, #0
 80152c2:	f43f aea7 	beq.w	8015014 <_dtoa_r+0x6c4>
 80152c6:	f1b8 0f00 	cmp.w	r8, #0
 80152ca:	d005      	beq.n	80152d8 <_dtoa_r+0x988>
 80152cc:	45b0      	cmp	r8, r6
 80152ce:	d003      	beq.n	80152d8 <_dtoa_r+0x988>
 80152d0:	4641      	mov	r1, r8
 80152d2:	4628      	mov	r0, r5
 80152d4:	f000 fa58 	bl	8015788 <_Bfree>
 80152d8:	4631      	mov	r1, r6
 80152da:	4628      	mov	r0, r5
 80152dc:	f000 fa54 	bl	8015788 <_Bfree>
 80152e0:	e698      	b.n	8015014 <_dtoa_r+0x6c4>
 80152e2:	2400      	movs	r4, #0
 80152e4:	4626      	mov	r6, r4
 80152e6:	e7e1      	b.n	80152ac <_dtoa_r+0x95c>
 80152e8:	46c2      	mov	sl, r8
 80152ea:	4626      	mov	r6, r4
 80152ec:	e596      	b.n	8014e1c <_dtoa_r+0x4cc>
 80152ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80152f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f000 80fd 	beq.w	80154f4 <_dtoa_r+0xba4>
 80152fa:	2f00      	cmp	r7, #0
 80152fc:	dd05      	ble.n	801530a <_dtoa_r+0x9ba>
 80152fe:	4631      	mov	r1, r6
 8015300:	463a      	mov	r2, r7
 8015302:	4628      	mov	r0, r5
 8015304:	f000 fc0e 	bl	8015b24 <__lshift>
 8015308:	4606      	mov	r6, r0
 801530a:	f1b8 0f00 	cmp.w	r8, #0
 801530e:	d05c      	beq.n	80153ca <_dtoa_r+0xa7a>
 8015310:	4628      	mov	r0, r5
 8015312:	6871      	ldr	r1, [r6, #4]
 8015314:	f000 f9f8 	bl	8015708 <_Balloc>
 8015318:	4607      	mov	r7, r0
 801531a:	b928      	cbnz	r0, 8015328 <_dtoa_r+0x9d8>
 801531c:	4602      	mov	r2, r0
 801531e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015322:	4b7f      	ldr	r3, [pc, #508]	; (8015520 <_dtoa_r+0xbd0>)
 8015324:	f7ff bb28 	b.w	8014978 <_dtoa_r+0x28>
 8015328:	6932      	ldr	r2, [r6, #16]
 801532a:	f106 010c 	add.w	r1, r6, #12
 801532e:	3202      	adds	r2, #2
 8015330:	0092      	lsls	r2, r2, #2
 8015332:	300c      	adds	r0, #12
 8015334:	f7fe fc80 	bl	8013c38 <memcpy>
 8015338:	2201      	movs	r2, #1
 801533a:	4639      	mov	r1, r7
 801533c:	4628      	mov	r0, r5
 801533e:	f000 fbf1 	bl	8015b24 <__lshift>
 8015342:	46b0      	mov	r8, r6
 8015344:	4606      	mov	r6, r0
 8015346:	9b03      	ldr	r3, [sp, #12]
 8015348:	3301      	adds	r3, #1
 801534a:	9308      	str	r3, [sp, #32]
 801534c:	9b03      	ldr	r3, [sp, #12]
 801534e:	444b      	add	r3, r9
 8015350:	930a      	str	r3, [sp, #40]	; 0x28
 8015352:	9b04      	ldr	r3, [sp, #16]
 8015354:	f003 0301 	and.w	r3, r3, #1
 8015358:	9309      	str	r3, [sp, #36]	; 0x24
 801535a:	9b08      	ldr	r3, [sp, #32]
 801535c:	4621      	mov	r1, r4
 801535e:	3b01      	subs	r3, #1
 8015360:	4658      	mov	r0, fp
 8015362:	9304      	str	r3, [sp, #16]
 8015364:	f7ff fa68 	bl	8014838 <quorem>
 8015368:	4603      	mov	r3, r0
 801536a:	4641      	mov	r1, r8
 801536c:	3330      	adds	r3, #48	; 0x30
 801536e:	9006      	str	r0, [sp, #24]
 8015370:	4658      	mov	r0, fp
 8015372:	930b      	str	r3, [sp, #44]	; 0x2c
 8015374:	f000 fc46 	bl	8015c04 <__mcmp>
 8015378:	4632      	mov	r2, r6
 801537a:	4681      	mov	r9, r0
 801537c:	4621      	mov	r1, r4
 801537e:	4628      	mov	r0, r5
 8015380:	f000 fc5c 	bl	8015c3c <__mdiff>
 8015384:	68c2      	ldr	r2, [r0, #12]
 8015386:	4607      	mov	r7, r0
 8015388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801538a:	bb02      	cbnz	r2, 80153ce <_dtoa_r+0xa7e>
 801538c:	4601      	mov	r1, r0
 801538e:	4658      	mov	r0, fp
 8015390:	f000 fc38 	bl	8015c04 <__mcmp>
 8015394:	4602      	mov	r2, r0
 8015396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015398:	4639      	mov	r1, r7
 801539a:	4628      	mov	r0, r5
 801539c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80153a0:	f000 f9f2 	bl	8015788 <_Bfree>
 80153a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80153a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153a8:	9f08      	ldr	r7, [sp, #32]
 80153aa:	ea43 0102 	orr.w	r1, r3, r2
 80153ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b0:	430b      	orrs	r3, r1
 80153b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153b4:	d10d      	bne.n	80153d2 <_dtoa_r+0xa82>
 80153b6:	2b39      	cmp	r3, #57	; 0x39
 80153b8:	d029      	beq.n	801540e <_dtoa_r+0xabe>
 80153ba:	f1b9 0f00 	cmp.w	r9, #0
 80153be:	dd01      	ble.n	80153c4 <_dtoa_r+0xa74>
 80153c0:	9b06      	ldr	r3, [sp, #24]
 80153c2:	3331      	adds	r3, #49	; 0x31
 80153c4:	9a04      	ldr	r2, [sp, #16]
 80153c6:	7013      	strb	r3, [r2, #0]
 80153c8:	e776      	b.n	80152b8 <_dtoa_r+0x968>
 80153ca:	4630      	mov	r0, r6
 80153cc:	e7b9      	b.n	8015342 <_dtoa_r+0x9f2>
 80153ce:	2201      	movs	r2, #1
 80153d0:	e7e2      	b.n	8015398 <_dtoa_r+0xa48>
 80153d2:	f1b9 0f00 	cmp.w	r9, #0
 80153d6:	db06      	blt.n	80153e6 <_dtoa_r+0xa96>
 80153d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80153da:	ea41 0909 	orr.w	r9, r1, r9
 80153de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153e0:	ea59 0101 	orrs.w	r1, r9, r1
 80153e4:	d120      	bne.n	8015428 <_dtoa_r+0xad8>
 80153e6:	2a00      	cmp	r2, #0
 80153e8:	ddec      	ble.n	80153c4 <_dtoa_r+0xa74>
 80153ea:	4659      	mov	r1, fp
 80153ec:	2201      	movs	r2, #1
 80153ee:	4628      	mov	r0, r5
 80153f0:	9308      	str	r3, [sp, #32]
 80153f2:	f000 fb97 	bl	8015b24 <__lshift>
 80153f6:	4621      	mov	r1, r4
 80153f8:	4683      	mov	fp, r0
 80153fa:	f000 fc03 	bl	8015c04 <__mcmp>
 80153fe:	2800      	cmp	r0, #0
 8015400:	9b08      	ldr	r3, [sp, #32]
 8015402:	dc02      	bgt.n	801540a <_dtoa_r+0xaba>
 8015404:	d1de      	bne.n	80153c4 <_dtoa_r+0xa74>
 8015406:	07da      	lsls	r2, r3, #31
 8015408:	d5dc      	bpl.n	80153c4 <_dtoa_r+0xa74>
 801540a:	2b39      	cmp	r3, #57	; 0x39
 801540c:	d1d8      	bne.n	80153c0 <_dtoa_r+0xa70>
 801540e:	2339      	movs	r3, #57	; 0x39
 8015410:	9a04      	ldr	r2, [sp, #16]
 8015412:	7013      	strb	r3, [r2, #0]
 8015414:	463b      	mov	r3, r7
 8015416:	461f      	mov	r7, r3
 8015418:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801541c:	3b01      	subs	r3, #1
 801541e:	2a39      	cmp	r2, #57	; 0x39
 8015420:	d050      	beq.n	80154c4 <_dtoa_r+0xb74>
 8015422:	3201      	adds	r2, #1
 8015424:	701a      	strb	r2, [r3, #0]
 8015426:	e747      	b.n	80152b8 <_dtoa_r+0x968>
 8015428:	2a00      	cmp	r2, #0
 801542a:	dd03      	ble.n	8015434 <_dtoa_r+0xae4>
 801542c:	2b39      	cmp	r3, #57	; 0x39
 801542e:	d0ee      	beq.n	801540e <_dtoa_r+0xabe>
 8015430:	3301      	adds	r3, #1
 8015432:	e7c7      	b.n	80153c4 <_dtoa_r+0xa74>
 8015434:	9a08      	ldr	r2, [sp, #32]
 8015436:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015438:	f802 3c01 	strb.w	r3, [r2, #-1]
 801543c:	428a      	cmp	r2, r1
 801543e:	d02a      	beq.n	8015496 <_dtoa_r+0xb46>
 8015440:	4659      	mov	r1, fp
 8015442:	2300      	movs	r3, #0
 8015444:	220a      	movs	r2, #10
 8015446:	4628      	mov	r0, r5
 8015448:	f000 f9c0 	bl	80157cc <__multadd>
 801544c:	45b0      	cmp	r8, r6
 801544e:	4683      	mov	fp, r0
 8015450:	f04f 0300 	mov.w	r3, #0
 8015454:	f04f 020a 	mov.w	r2, #10
 8015458:	4641      	mov	r1, r8
 801545a:	4628      	mov	r0, r5
 801545c:	d107      	bne.n	801546e <_dtoa_r+0xb1e>
 801545e:	f000 f9b5 	bl	80157cc <__multadd>
 8015462:	4680      	mov	r8, r0
 8015464:	4606      	mov	r6, r0
 8015466:	9b08      	ldr	r3, [sp, #32]
 8015468:	3301      	adds	r3, #1
 801546a:	9308      	str	r3, [sp, #32]
 801546c:	e775      	b.n	801535a <_dtoa_r+0xa0a>
 801546e:	f000 f9ad 	bl	80157cc <__multadd>
 8015472:	4631      	mov	r1, r6
 8015474:	4680      	mov	r8, r0
 8015476:	2300      	movs	r3, #0
 8015478:	220a      	movs	r2, #10
 801547a:	4628      	mov	r0, r5
 801547c:	f000 f9a6 	bl	80157cc <__multadd>
 8015480:	4606      	mov	r6, r0
 8015482:	e7f0      	b.n	8015466 <_dtoa_r+0xb16>
 8015484:	f1b9 0f00 	cmp.w	r9, #0
 8015488:	bfcc      	ite	gt
 801548a:	464f      	movgt	r7, r9
 801548c:	2701      	movle	r7, #1
 801548e:	f04f 0800 	mov.w	r8, #0
 8015492:	9a03      	ldr	r2, [sp, #12]
 8015494:	4417      	add	r7, r2
 8015496:	4659      	mov	r1, fp
 8015498:	2201      	movs	r2, #1
 801549a:	4628      	mov	r0, r5
 801549c:	9308      	str	r3, [sp, #32]
 801549e:	f000 fb41 	bl	8015b24 <__lshift>
 80154a2:	4621      	mov	r1, r4
 80154a4:	4683      	mov	fp, r0
 80154a6:	f000 fbad 	bl	8015c04 <__mcmp>
 80154aa:	2800      	cmp	r0, #0
 80154ac:	dcb2      	bgt.n	8015414 <_dtoa_r+0xac4>
 80154ae:	d102      	bne.n	80154b6 <_dtoa_r+0xb66>
 80154b0:	9b08      	ldr	r3, [sp, #32]
 80154b2:	07db      	lsls	r3, r3, #31
 80154b4:	d4ae      	bmi.n	8015414 <_dtoa_r+0xac4>
 80154b6:	463b      	mov	r3, r7
 80154b8:	461f      	mov	r7, r3
 80154ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80154be:	2a30      	cmp	r2, #48	; 0x30
 80154c0:	d0fa      	beq.n	80154b8 <_dtoa_r+0xb68>
 80154c2:	e6f9      	b.n	80152b8 <_dtoa_r+0x968>
 80154c4:	9a03      	ldr	r2, [sp, #12]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d1a5      	bne.n	8015416 <_dtoa_r+0xac6>
 80154ca:	2331      	movs	r3, #49	; 0x31
 80154cc:	f10a 0a01 	add.w	sl, sl, #1
 80154d0:	e779      	b.n	80153c6 <_dtoa_r+0xa76>
 80154d2:	4b14      	ldr	r3, [pc, #80]	; (8015524 <_dtoa_r+0xbd4>)
 80154d4:	f7ff baa8 	b.w	8014a28 <_dtoa_r+0xd8>
 80154d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80154da:	2b00      	cmp	r3, #0
 80154dc:	f47f aa81 	bne.w	80149e2 <_dtoa_r+0x92>
 80154e0:	4b11      	ldr	r3, [pc, #68]	; (8015528 <_dtoa_r+0xbd8>)
 80154e2:	f7ff baa1 	b.w	8014a28 <_dtoa_r+0xd8>
 80154e6:	f1b9 0f00 	cmp.w	r9, #0
 80154ea:	dc03      	bgt.n	80154f4 <_dtoa_r+0xba4>
 80154ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80154ee:	2b02      	cmp	r3, #2
 80154f0:	f73f aecb 	bgt.w	801528a <_dtoa_r+0x93a>
 80154f4:	9f03      	ldr	r7, [sp, #12]
 80154f6:	4621      	mov	r1, r4
 80154f8:	4658      	mov	r0, fp
 80154fa:	f7ff f99d 	bl	8014838 <quorem>
 80154fe:	9a03      	ldr	r2, [sp, #12]
 8015500:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015504:	f807 3b01 	strb.w	r3, [r7], #1
 8015508:	1aba      	subs	r2, r7, r2
 801550a:	4591      	cmp	r9, r2
 801550c:	ddba      	ble.n	8015484 <_dtoa_r+0xb34>
 801550e:	4659      	mov	r1, fp
 8015510:	2300      	movs	r3, #0
 8015512:	220a      	movs	r2, #10
 8015514:	4628      	mov	r0, r5
 8015516:	f000 f959 	bl	80157cc <__multadd>
 801551a:	4683      	mov	fp, r0
 801551c:	e7eb      	b.n	80154f6 <_dtoa_r+0xba6>
 801551e:	bf00      	nop
 8015520:	0802fdab 	.word	0x0802fdab
 8015524:	0802fd08 	.word	0x0802fd08
 8015528:	0802fd2c 	.word	0x0802fd2c

0801552c <__sflush_r>:
 801552c:	898a      	ldrh	r2, [r1, #12]
 801552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015530:	4605      	mov	r5, r0
 8015532:	0710      	lsls	r0, r2, #28
 8015534:	460c      	mov	r4, r1
 8015536:	d457      	bmi.n	80155e8 <__sflush_r+0xbc>
 8015538:	684b      	ldr	r3, [r1, #4]
 801553a:	2b00      	cmp	r3, #0
 801553c:	dc04      	bgt.n	8015548 <__sflush_r+0x1c>
 801553e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015540:	2b00      	cmp	r3, #0
 8015542:	dc01      	bgt.n	8015548 <__sflush_r+0x1c>
 8015544:	2000      	movs	r0, #0
 8015546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801554a:	2e00      	cmp	r6, #0
 801554c:	d0fa      	beq.n	8015544 <__sflush_r+0x18>
 801554e:	2300      	movs	r3, #0
 8015550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015554:	682f      	ldr	r7, [r5, #0]
 8015556:	602b      	str	r3, [r5, #0]
 8015558:	d032      	beq.n	80155c0 <__sflush_r+0x94>
 801555a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801555c:	89a3      	ldrh	r3, [r4, #12]
 801555e:	075a      	lsls	r2, r3, #29
 8015560:	d505      	bpl.n	801556e <__sflush_r+0x42>
 8015562:	6863      	ldr	r3, [r4, #4]
 8015564:	1ac0      	subs	r0, r0, r3
 8015566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015568:	b10b      	cbz	r3, 801556e <__sflush_r+0x42>
 801556a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801556c:	1ac0      	subs	r0, r0, r3
 801556e:	2300      	movs	r3, #0
 8015570:	4602      	mov	r2, r0
 8015572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015574:	4628      	mov	r0, r5
 8015576:	6a21      	ldr	r1, [r4, #32]
 8015578:	47b0      	blx	r6
 801557a:	1c43      	adds	r3, r0, #1
 801557c:	89a3      	ldrh	r3, [r4, #12]
 801557e:	d106      	bne.n	801558e <__sflush_r+0x62>
 8015580:	6829      	ldr	r1, [r5, #0]
 8015582:	291d      	cmp	r1, #29
 8015584:	d82c      	bhi.n	80155e0 <__sflush_r+0xb4>
 8015586:	4a29      	ldr	r2, [pc, #164]	; (801562c <__sflush_r+0x100>)
 8015588:	40ca      	lsrs	r2, r1
 801558a:	07d6      	lsls	r6, r2, #31
 801558c:	d528      	bpl.n	80155e0 <__sflush_r+0xb4>
 801558e:	2200      	movs	r2, #0
 8015590:	6062      	str	r2, [r4, #4]
 8015592:	6922      	ldr	r2, [r4, #16]
 8015594:	04d9      	lsls	r1, r3, #19
 8015596:	6022      	str	r2, [r4, #0]
 8015598:	d504      	bpl.n	80155a4 <__sflush_r+0x78>
 801559a:	1c42      	adds	r2, r0, #1
 801559c:	d101      	bne.n	80155a2 <__sflush_r+0x76>
 801559e:	682b      	ldr	r3, [r5, #0]
 80155a0:	b903      	cbnz	r3, 80155a4 <__sflush_r+0x78>
 80155a2:	6560      	str	r0, [r4, #84]	; 0x54
 80155a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155a6:	602f      	str	r7, [r5, #0]
 80155a8:	2900      	cmp	r1, #0
 80155aa:	d0cb      	beq.n	8015544 <__sflush_r+0x18>
 80155ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155b0:	4299      	cmp	r1, r3
 80155b2:	d002      	beq.n	80155ba <__sflush_r+0x8e>
 80155b4:	4628      	mov	r0, r5
 80155b6:	f7fe fb55 	bl	8013c64 <_free_r>
 80155ba:	2000      	movs	r0, #0
 80155bc:	6360      	str	r0, [r4, #52]	; 0x34
 80155be:	e7c2      	b.n	8015546 <__sflush_r+0x1a>
 80155c0:	6a21      	ldr	r1, [r4, #32]
 80155c2:	2301      	movs	r3, #1
 80155c4:	4628      	mov	r0, r5
 80155c6:	47b0      	blx	r6
 80155c8:	1c41      	adds	r1, r0, #1
 80155ca:	d1c7      	bne.n	801555c <__sflush_r+0x30>
 80155cc:	682b      	ldr	r3, [r5, #0]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d0c4      	beq.n	801555c <__sflush_r+0x30>
 80155d2:	2b1d      	cmp	r3, #29
 80155d4:	d001      	beq.n	80155da <__sflush_r+0xae>
 80155d6:	2b16      	cmp	r3, #22
 80155d8:	d101      	bne.n	80155de <__sflush_r+0xb2>
 80155da:	602f      	str	r7, [r5, #0]
 80155dc:	e7b2      	b.n	8015544 <__sflush_r+0x18>
 80155de:	89a3      	ldrh	r3, [r4, #12]
 80155e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155e4:	81a3      	strh	r3, [r4, #12]
 80155e6:	e7ae      	b.n	8015546 <__sflush_r+0x1a>
 80155e8:	690f      	ldr	r7, [r1, #16]
 80155ea:	2f00      	cmp	r7, #0
 80155ec:	d0aa      	beq.n	8015544 <__sflush_r+0x18>
 80155ee:	0793      	lsls	r3, r2, #30
 80155f0:	bf18      	it	ne
 80155f2:	2300      	movne	r3, #0
 80155f4:	680e      	ldr	r6, [r1, #0]
 80155f6:	bf08      	it	eq
 80155f8:	694b      	ldreq	r3, [r1, #20]
 80155fa:	1bf6      	subs	r6, r6, r7
 80155fc:	600f      	str	r7, [r1, #0]
 80155fe:	608b      	str	r3, [r1, #8]
 8015600:	2e00      	cmp	r6, #0
 8015602:	dd9f      	ble.n	8015544 <__sflush_r+0x18>
 8015604:	4633      	mov	r3, r6
 8015606:	463a      	mov	r2, r7
 8015608:	4628      	mov	r0, r5
 801560a:	6a21      	ldr	r1, [r4, #32]
 801560c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015610:	47e0      	blx	ip
 8015612:	2800      	cmp	r0, #0
 8015614:	dc06      	bgt.n	8015624 <__sflush_r+0xf8>
 8015616:	89a3      	ldrh	r3, [r4, #12]
 8015618:	f04f 30ff 	mov.w	r0, #4294967295
 801561c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015620:	81a3      	strh	r3, [r4, #12]
 8015622:	e790      	b.n	8015546 <__sflush_r+0x1a>
 8015624:	4407      	add	r7, r0
 8015626:	1a36      	subs	r6, r6, r0
 8015628:	e7ea      	b.n	8015600 <__sflush_r+0xd4>
 801562a:	bf00      	nop
 801562c:	20400001 	.word	0x20400001

08015630 <_fflush_r>:
 8015630:	b538      	push	{r3, r4, r5, lr}
 8015632:	690b      	ldr	r3, [r1, #16]
 8015634:	4605      	mov	r5, r0
 8015636:	460c      	mov	r4, r1
 8015638:	b913      	cbnz	r3, 8015640 <_fflush_r+0x10>
 801563a:	2500      	movs	r5, #0
 801563c:	4628      	mov	r0, r5
 801563e:	bd38      	pop	{r3, r4, r5, pc}
 8015640:	b118      	cbz	r0, 801564a <_fflush_r+0x1a>
 8015642:	6983      	ldr	r3, [r0, #24]
 8015644:	b90b      	cbnz	r3, 801564a <_fflush_r+0x1a>
 8015646:	f7fe fa21 	bl	8013a8c <__sinit>
 801564a:	4b14      	ldr	r3, [pc, #80]	; (801569c <_fflush_r+0x6c>)
 801564c:	429c      	cmp	r4, r3
 801564e:	d11b      	bne.n	8015688 <_fflush_r+0x58>
 8015650:	686c      	ldr	r4, [r5, #4]
 8015652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d0ef      	beq.n	801563a <_fflush_r+0xa>
 801565a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801565c:	07d0      	lsls	r0, r2, #31
 801565e:	d404      	bmi.n	801566a <_fflush_r+0x3a>
 8015660:	0599      	lsls	r1, r3, #22
 8015662:	d402      	bmi.n	801566a <_fflush_r+0x3a>
 8015664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015666:	f7fe fad4 	bl	8013c12 <__retarget_lock_acquire_recursive>
 801566a:	4628      	mov	r0, r5
 801566c:	4621      	mov	r1, r4
 801566e:	f7ff ff5d 	bl	801552c <__sflush_r>
 8015672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015674:	4605      	mov	r5, r0
 8015676:	07da      	lsls	r2, r3, #31
 8015678:	d4e0      	bmi.n	801563c <_fflush_r+0xc>
 801567a:	89a3      	ldrh	r3, [r4, #12]
 801567c:	059b      	lsls	r3, r3, #22
 801567e:	d4dd      	bmi.n	801563c <_fflush_r+0xc>
 8015680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015682:	f7fe fac7 	bl	8013c14 <__retarget_lock_release_recursive>
 8015686:	e7d9      	b.n	801563c <_fflush_r+0xc>
 8015688:	4b05      	ldr	r3, [pc, #20]	; (80156a0 <_fflush_r+0x70>)
 801568a:	429c      	cmp	r4, r3
 801568c:	d101      	bne.n	8015692 <_fflush_r+0x62>
 801568e:	68ac      	ldr	r4, [r5, #8]
 8015690:	e7df      	b.n	8015652 <_fflush_r+0x22>
 8015692:	4b04      	ldr	r3, [pc, #16]	; (80156a4 <_fflush_r+0x74>)
 8015694:	429c      	cmp	r4, r3
 8015696:	bf08      	it	eq
 8015698:	68ec      	ldreq	r4, [r5, #12]
 801569a:	e7da      	b.n	8015652 <_fflush_r+0x22>
 801569c:	0802fcb4 	.word	0x0802fcb4
 80156a0:	0802fcd4 	.word	0x0802fcd4
 80156a4:	0802fc94 	.word	0x0802fc94

080156a8 <_localeconv_r>:
 80156a8:	4800      	ldr	r0, [pc, #0]	; (80156ac <_localeconv_r+0x4>)
 80156aa:	4770      	bx	lr
 80156ac:	20000280 	.word	0x20000280

080156b0 <_lseek_r>:
 80156b0:	b538      	push	{r3, r4, r5, lr}
 80156b2:	4604      	mov	r4, r0
 80156b4:	4608      	mov	r0, r1
 80156b6:	4611      	mov	r1, r2
 80156b8:	2200      	movs	r2, #0
 80156ba:	4d05      	ldr	r5, [pc, #20]	; (80156d0 <_lseek_r+0x20>)
 80156bc:	602a      	str	r2, [r5, #0]
 80156be:	461a      	mov	r2, r3
 80156c0:	f7ed fc9a 	bl	8002ff8 <_lseek>
 80156c4:	1c43      	adds	r3, r0, #1
 80156c6:	d102      	bne.n	80156ce <_lseek_r+0x1e>
 80156c8:	682b      	ldr	r3, [r5, #0]
 80156ca:	b103      	cbz	r3, 80156ce <_lseek_r+0x1e>
 80156cc:	6023      	str	r3, [r4, #0]
 80156ce:	bd38      	pop	{r3, r4, r5, pc}
 80156d0:	200025a4 	.word	0x200025a4

080156d4 <memchr>:
 80156d4:	4603      	mov	r3, r0
 80156d6:	b510      	push	{r4, lr}
 80156d8:	b2c9      	uxtb	r1, r1
 80156da:	4402      	add	r2, r0
 80156dc:	4293      	cmp	r3, r2
 80156de:	4618      	mov	r0, r3
 80156e0:	d101      	bne.n	80156e6 <memchr+0x12>
 80156e2:	2000      	movs	r0, #0
 80156e4:	e003      	b.n	80156ee <memchr+0x1a>
 80156e6:	7804      	ldrb	r4, [r0, #0]
 80156e8:	3301      	adds	r3, #1
 80156ea:	428c      	cmp	r4, r1
 80156ec:	d1f6      	bne.n	80156dc <memchr+0x8>
 80156ee:	bd10      	pop	{r4, pc}

080156f0 <__malloc_lock>:
 80156f0:	4801      	ldr	r0, [pc, #4]	; (80156f8 <__malloc_lock+0x8>)
 80156f2:	f7fe ba8e 	b.w	8013c12 <__retarget_lock_acquire_recursive>
 80156f6:	bf00      	nop
 80156f8:	20002598 	.word	0x20002598

080156fc <__malloc_unlock>:
 80156fc:	4801      	ldr	r0, [pc, #4]	; (8015704 <__malloc_unlock+0x8>)
 80156fe:	f7fe ba89 	b.w	8013c14 <__retarget_lock_release_recursive>
 8015702:	bf00      	nop
 8015704:	20002598 	.word	0x20002598

08015708 <_Balloc>:
 8015708:	b570      	push	{r4, r5, r6, lr}
 801570a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801570c:	4604      	mov	r4, r0
 801570e:	460d      	mov	r5, r1
 8015710:	b976      	cbnz	r6, 8015730 <_Balloc+0x28>
 8015712:	2010      	movs	r0, #16
 8015714:	f7fe fa80 	bl	8013c18 <malloc>
 8015718:	4602      	mov	r2, r0
 801571a:	6260      	str	r0, [r4, #36]	; 0x24
 801571c:	b920      	cbnz	r0, 8015728 <_Balloc+0x20>
 801571e:	2166      	movs	r1, #102	; 0x66
 8015720:	4b17      	ldr	r3, [pc, #92]	; (8015780 <_Balloc+0x78>)
 8015722:	4818      	ldr	r0, [pc, #96]	; (8015784 <_Balloc+0x7c>)
 8015724:	f000 fcf4 	bl	8016110 <__assert_func>
 8015728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801572c:	6006      	str	r6, [r0, #0]
 801572e:	60c6      	str	r6, [r0, #12]
 8015730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015732:	68f3      	ldr	r3, [r6, #12]
 8015734:	b183      	cbz	r3, 8015758 <_Balloc+0x50>
 8015736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015738:	68db      	ldr	r3, [r3, #12]
 801573a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801573e:	b9b8      	cbnz	r0, 8015770 <_Balloc+0x68>
 8015740:	2101      	movs	r1, #1
 8015742:	fa01 f605 	lsl.w	r6, r1, r5
 8015746:	1d72      	adds	r2, r6, #5
 8015748:	4620      	mov	r0, r4
 801574a:	0092      	lsls	r2, r2, #2
 801574c:	f000 fb5e 	bl	8015e0c <_calloc_r>
 8015750:	b160      	cbz	r0, 801576c <_Balloc+0x64>
 8015752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015756:	e00e      	b.n	8015776 <_Balloc+0x6e>
 8015758:	2221      	movs	r2, #33	; 0x21
 801575a:	2104      	movs	r1, #4
 801575c:	4620      	mov	r0, r4
 801575e:	f000 fb55 	bl	8015e0c <_calloc_r>
 8015762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015764:	60f0      	str	r0, [r6, #12]
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1e4      	bne.n	8015736 <_Balloc+0x2e>
 801576c:	2000      	movs	r0, #0
 801576e:	bd70      	pop	{r4, r5, r6, pc}
 8015770:	6802      	ldr	r2, [r0, #0]
 8015772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015776:	2300      	movs	r3, #0
 8015778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801577c:	e7f7      	b.n	801576e <_Balloc+0x66>
 801577e:	bf00      	nop
 8015780:	0802fd39 	.word	0x0802fd39
 8015784:	0802fdbc 	.word	0x0802fdbc

08015788 <_Bfree>:
 8015788:	b570      	push	{r4, r5, r6, lr}
 801578a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801578c:	4605      	mov	r5, r0
 801578e:	460c      	mov	r4, r1
 8015790:	b976      	cbnz	r6, 80157b0 <_Bfree+0x28>
 8015792:	2010      	movs	r0, #16
 8015794:	f7fe fa40 	bl	8013c18 <malloc>
 8015798:	4602      	mov	r2, r0
 801579a:	6268      	str	r0, [r5, #36]	; 0x24
 801579c:	b920      	cbnz	r0, 80157a8 <_Bfree+0x20>
 801579e:	218a      	movs	r1, #138	; 0x8a
 80157a0:	4b08      	ldr	r3, [pc, #32]	; (80157c4 <_Bfree+0x3c>)
 80157a2:	4809      	ldr	r0, [pc, #36]	; (80157c8 <_Bfree+0x40>)
 80157a4:	f000 fcb4 	bl	8016110 <__assert_func>
 80157a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80157ac:	6006      	str	r6, [r0, #0]
 80157ae:	60c6      	str	r6, [r0, #12]
 80157b0:	b13c      	cbz	r4, 80157c2 <_Bfree+0x3a>
 80157b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80157b4:	6862      	ldr	r2, [r4, #4]
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80157bc:	6021      	str	r1, [r4, #0]
 80157be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80157c2:	bd70      	pop	{r4, r5, r6, pc}
 80157c4:	0802fd39 	.word	0x0802fd39
 80157c8:	0802fdbc 	.word	0x0802fdbc

080157cc <__multadd>:
 80157cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157d0:	4607      	mov	r7, r0
 80157d2:	460c      	mov	r4, r1
 80157d4:	461e      	mov	r6, r3
 80157d6:	2000      	movs	r0, #0
 80157d8:	690d      	ldr	r5, [r1, #16]
 80157da:	f101 0c14 	add.w	ip, r1, #20
 80157de:	f8dc 3000 	ldr.w	r3, [ip]
 80157e2:	3001      	adds	r0, #1
 80157e4:	b299      	uxth	r1, r3
 80157e6:	fb02 6101 	mla	r1, r2, r1, r6
 80157ea:	0c1e      	lsrs	r6, r3, #16
 80157ec:	0c0b      	lsrs	r3, r1, #16
 80157ee:	fb02 3306 	mla	r3, r2, r6, r3
 80157f2:	b289      	uxth	r1, r1
 80157f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80157f8:	4285      	cmp	r5, r0
 80157fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80157fe:	f84c 1b04 	str.w	r1, [ip], #4
 8015802:	dcec      	bgt.n	80157de <__multadd+0x12>
 8015804:	b30e      	cbz	r6, 801584a <__multadd+0x7e>
 8015806:	68a3      	ldr	r3, [r4, #8]
 8015808:	42ab      	cmp	r3, r5
 801580a:	dc19      	bgt.n	8015840 <__multadd+0x74>
 801580c:	6861      	ldr	r1, [r4, #4]
 801580e:	4638      	mov	r0, r7
 8015810:	3101      	adds	r1, #1
 8015812:	f7ff ff79 	bl	8015708 <_Balloc>
 8015816:	4680      	mov	r8, r0
 8015818:	b928      	cbnz	r0, 8015826 <__multadd+0x5a>
 801581a:	4602      	mov	r2, r0
 801581c:	21b5      	movs	r1, #181	; 0xb5
 801581e:	4b0c      	ldr	r3, [pc, #48]	; (8015850 <__multadd+0x84>)
 8015820:	480c      	ldr	r0, [pc, #48]	; (8015854 <__multadd+0x88>)
 8015822:	f000 fc75 	bl	8016110 <__assert_func>
 8015826:	6922      	ldr	r2, [r4, #16]
 8015828:	f104 010c 	add.w	r1, r4, #12
 801582c:	3202      	adds	r2, #2
 801582e:	0092      	lsls	r2, r2, #2
 8015830:	300c      	adds	r0, #12
 8015832:	f7fe fa01 	bl	8013c38 <memcpy>
 8015836:	4621      	mov	r1, r4
 8015838:	4638      	mov	r0, r7
 801583a:	f7ff ffa5 	bl	8015788 <_Bfree>
 801583e:	4644      	mov	r4, r8
 8015840:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015844:	3501      	adds	r5, #1
 8015846:	615e      	str	r6, [r3, #20]
 8015848:	6125      	str	r5, [r4, #16]
 801584a:	4620      	mov	r0, r4
 801584c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015850:	0802fdab 	.word	0x0802fdab
 8015854:	0802fdbc 	.word	0x0802fdbc

08015858 <__hi0bits>:
 8015858:	0c02      	lsrs	r2, r0, #16
 801585a:	0412      	lsls	r2, r2, #16
 801585c:	4603      	mov	r3, r0
 801585e:	b9ca      	cbnz	r2, 8015894 <__hi0bits+0x3c>
 8015860:	0403      	lsls	r3, r0, #16
 8015862:	2010      	movs	r0, #16
 8015864:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015868:	bf04      	itt	eq
 801586a:	021b      	lsleq	r3, r3, #8
 801586c:	3008      	addeq	r0, #8
 801586e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015872:	bf04      	itt	eq
 8015874:	011b      	lsleq	r3, r3, #4
 8015876:	3004      	addeq	r0, #4
 8015878:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801587c:	bf04      	itt	eq
 801587e:	009b      	lsleq	r3, r3, #2
 8015880:	3002      	addeq	r0, #2
 8015882:	2b00      	cmp	r3, #0
 8015884:	db05      	blt.n	8015892 <__hi0bits+0x3a>
 8015886:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801588a:	f100 0001 	add.w	r0, r0, #1
 801588e:	bf08      	it	eq
 8015890:	2020      	moveq	r0, #32
 8015892:	4770      	bx	lr
 8015894:	2000      	movs	r0, #0
 8015896:	e7e5      	b.n	8015864 <__hi0bits+0xc>

08015898 <__lo0bits>:
 8015898:	6803      	ldr	r3, [r0, #0]
 801589a:	4602      	mov	r2, r0
 801589c:	f013 0007 	ands.w	r0, r3, #7
 80158a0:	d00b      	beq.n	80158ba <__lo0bits+0x22>
 80158a2:	07d9      	lsls	r1, r3, #31
 80158a4:	d421      	bmi.n	80158ea <__lo0bits+0x52>
 80158a6:	0798      	lsls	r0, r3, #30
 80158a8:	bf49      	itett	mi
 80158aa:	085b      	lsrmi	r3, r3, #1
 80158ac:	089b      	lsrpl	r3, r3, #2
 80158ae:	2001      	movmi	r0, #1
 80158b0:	6013      	strmi	r3, [r2, #0]
 80158b2:	bf5c      	itt	pl
 80158b4:	2002      	movpl	r0, #2
 80158b6:	6013      	strpl	r3, [r2, #0]
 80158b8:	4770      	bx	lr
 80158ba:	b299      	uxth	r1, r3
 80158bc:	b909      	cbnz	r1, 80158c2 <__lo0bits+0x2a>
 80158be:	2010      	movs	r0, #16
 80158c0:	0c1b      	lsrs	r3, r3, #16
 80158c2:	b2d9      	uxtb	r1, r3
 80158c4:	b909      	cbnz	r1, 80158ca <__lo0bits+0x32>
 80158c6:	3008      	adds	r0, #8
 80158c8:	0a1b      	lsrs	r3, r3, #8
 80158ca:	0719      	lsls	r1, r3, #28
 80158cc:	bf04      	itt	eq
 80158ce:	091b      	lsreq	r3, r3, #4
 80158d0:	3004      	addeq	r0, #4
 80158d2:	0799      	lsls	r1, r3, #30
 80158d4:	bf04      	itt	eq
 80158d6:	089b      	lsreq	r3, r3, #2
 80158d8:	3002      	addeq	r0, #2
 80158da:	07d9      	lsls	r1, r3, #31
 80158dc:	d403      	bmi.n	80158e6 <__lo0bits+0x4e>
 80158de:	085b      	lsrs	r3, r3, #1
 80158e0:	f100 0001 	add.w	r0, r0, #1
 80158e4:	d003      	beq.n	80158ee <__lo0bits+0x56>
 80158e6:	6013      	str	r3, [r2, #0]
 80158e8:	4770      	bx	lr
 80158ea:	2000      	movs	r0, #0
 80158ec:	4770      	bx	lr
 80158ee:	2020      	movs	r0, #32
 80158f0:	4770      	bx	lr
	...

080158f4 <__i2b>:
 80158f4:	b510      	push	{r4, lr}
 80158f6:	460c      	mov	r4, r1
 80158f8:	2101      	movs	r1, #1
 80158fa:	f7ff ff05 	bl	8015708 <_Balloc>
 80158fe:	4602      	mov	r2, r0
 8015900:	b928      	cbnz	r0, 801590e <__i2b+0x1a>
 8015902:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015906:	4b04      	ldr	r3, [pc, #16]	; (8015918 <__i2b+0x24>)
 8015908:	4804      	ldr	r0, [pc, #16]	; (801591c <__i2b+0x28>)
 801590a:	f000 fc01 	bl	8016110 <__assert_func>
 801590e:	2301      	movs	r3, #1
 8015910:	6144      	str	r4, [r0, #20]
 8015912:	6103      	str	r3, [r0, #16]
 8015914:	bd10      	pop	{r4, pc}
 8015916:	bf00      	nop
 8015918:	0802fdab 	.word	0x0802fdab
 801591c:	0802fdbc 	.word	0x0802fdbc

08015920 <__multiply>:
 8015920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015924:	4691      	mov	r9, r2
 8015926:	690a      	ldr	r2, [r1, #16]
 8015928:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801592c:	460c      	mov	r4, r1
 801592e:	429a      	cmp	r2, r3
 8015930:	bfbe      	ittt	lt
 8015932:	460b      	movlt	r3, r1
 8015934:	464c      	movlt	r4, r9
 8015936:	4699      	movlt	r9, r3
 8015938:	6927      	ldr	r7, [r4, #16]
 801593a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801593e:	68a3      	ldr	r3, [r4, #8]
 8015940:	6861      	ldr	r1, [r4, #4]
 8015942:	eb07 060a 	add.w	r6, r7, sl
 8015946:	42b3      	cmp	r3, r6
 8015948:	b085      	sub	sp, #20
 801594a:	bfb8      	it	lt
 801594c:	3101      	addlt	r1, #1
 801594e:	f7ff fedb 	bl	8015708 <_Balloc>
 8015952:	b930      	cbnz	r0, 8015962 <__multiply+0x42>
 8015954:	4602      	mov	r2, r0
 8015956:	f240 115d 	movw	r1, #349	; 0x15d
 801595a:	4b43      	ldr	r3, [pc, #268]	; (8015a68 <__multiply+0x148>)
 801595c:	4843      	ldr	r0, [pc, #268]	; (8015a6c <__multiply+0x14c>)
 801595e:	f000 fbd7 	bl	8016110 <__assert_func>
 8015962:	f100 0514 	add.w	r5, r0, #20
 8015966:	462b      	mov	r3, r5
 8015968:	2200      	movs	r2, #0
 801596a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801596e:	4543      	cmp	r3, r8
 8015970:	d321      	bcc.n	80159b6 <__multiply+0x96>
 8015972:	f104 0314 	add.w	r3, r4, #20
 8015976:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801597a:	f109 0314 	add.w	r3, r9, #20
 801597e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015982:	9202      	str	r2, [sp, #8]
 8015984:	1b3a      	subs	r2, r7, r4
 8015986:	3a15      	subs	r2, #21
 8015988:	f022 0203 	bic.w	r2, r2, #3
 801598c:	3204      	adds	r2, #4
 801598e:	f104 0115 	add.w	r1, r4, #21
 8015992:	428f      	cmp	r7, r1
 8015994:	bf38      	it	cc
 8015996:	2204      	movcc	r2, #4
 8015998:	9201      	str	r2, [sp, #4]
 801599a:	9a02      	ldr	r2, [sp, #8]
 801599c:	9303      	str	r3, [sp, #12]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d80c      	bhi.n	80159bc <__multiply+0x9c>
 80159a2:	2e00      	cmp	r6, #0
 80159a4:	dd03      	ble.n	80159ae <__multiply+0x8e>
 80159a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d059      	beq.n	8015a62 <__multiply+0x142>
 80159ae:	6106      	str	r6, [r0, #16]
 80159b0:	b005      	add	sp, #20
 80159b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159b6:	f843 2b04 	str.w	r2, [r3], #4
 80159ba:	e7d8      	b.n	801596e <__multiply+0x4e>
 80159bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80159c0:	f1ba 0f00 	cmp.w	sl, #0
 80159c4:	d023      	beq.n	8015a0e <__multiply+0xee>
 80159c6:	46a9      	mov	r9, r5
 80159c8:	f04f 0c00 	mov.w	ip, #0
 80159cc:	f104 0e14 	add.w	lr, r4, #20
 80159d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80159d4:	f8d9 1000 	ldr.w	r1, [r9]
 80159d8:	fa1f fb82 	uxth.w	fp, r2
 80159dc:	b289      	uxth	r1, r1
 80159de:	fb0a 110b 	mla	r1, sl, fp, r1
 80159e2:	4461      	add	r1, ip
 80159e4:	f8d9 c000 	ldr.w	ip, [r9]
 80159e8:	0c12      	lsrs	r2, r2, #16
 80159ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80159ee:	fb0a c202 	mla	r2, sl, r2, ip
 80159f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80159f6:	b289      	uxth	r1, r1
 80159f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80159fc:	4577      	cmp	r7, lr
 80159fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015a02:	f849 1b04 	str.w	r1, [r9], #4
 8015a06:	d8e3      	bhi.n	80159d0 <__multiply+0xb0>
 8015a08:	9a01      	ldr	r2, [sp, #4]
 8015a0a:	f845 c002 	str.w	ip, [r5, r2]
 8015a0e:	9a03      	ldr	r2, [sp, #12]
 8015a10:	3304      	adds	r3, #4
 8015a12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015a16:	f1b9 0f00 	cmp.w	r9, #0
 8015a1a:	d020      	beq.n	8015a5e <__multiply+0x13e>
 8015a1c:	46ae      	mov	lr, r5
 8015a1e:	f04f 0a00 	mov.w	sl, #0
 8015a22:	6829      	ldr	r1, [r5, #0]
 8015a24:	f104 0c14 	add.w	ip, r4, #20
 8015a28:	f8bc b000 	ldrh.w	fp, [ip]
 8015a2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015a30:	b289      	uxth	r1, r1
 8015a32:	fb09 220b 	mla	r2, r9, fp, r2
 8015a36:	4492      	add	sl, r2
 8015a38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015a3c:	f84e 1b04 	str.w	r1, [lr], #4
 8015a40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015a44:	f8be 1000 	ldrh.w	r1, [lr]
 8015a48:	0c12      	lsrs	r2, r2, #16
 8015a4a:	fb09 1102 	mla	r1, r9, r2, r1
 8015a4e:	4567      	cmp	r7, ip
 8015a50:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015a54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015a58:	d8e6      	bhi.n	8015a28 <__multiply+0x108>
 8015a5a:	9a01      	ldr	r2, [sp, #4]
 8015a5c:	50a9      	str	r1, [r5, r2]
 8015a5e:	3504      	adds	r5, #4
 8015a60:	e79b      	b.n	801599a <__multiply+0x7a>
 8015a62:	3e01      	subs	r6, #1
 8015a64:	e79d      	b.n	80159a2 <__multiply+0x82>
 8015a66:	bf00      	nop
 8015a68:	0802fdab 	.word	0x0802fdab
 8015a6c:	0802fdbc 	.word	0x0802fdbc

08015a70 <__pow5mult>:
 8015a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a74:	4615      	mov	r5, r2
 8015a76:	f012 0203 	ands.w	r2, r2, #3
 8015a7a:	4606      	mov	r6, r0
 8015a7c:	460f      	mov	r7, r1
 8015a7e:	d007      	beq.n	8015a90 <__pow5mult+0x20>
 8015a80:	4c25      	ldr	r4, [pc, #148]	; (8015b18 <__pow5mult+0xa8>)
 8015a82:	3a01      	subs	r2, #1
 8015a84:	2300      	movs	r3, #0
 8015a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015a8a:	f7ff fe9f 	bl	80157cc <__multadd>
 8015a8e:	4607      	mov	r7, r0
 8015a90:	10ad      	asrs	r5, r5, #2
 8015a92:	d03d      	beq.n	8015b10 <__pow5mult+0xa0>
 8015a94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015a96:	b97c      	cbnz	r4, 8015ab8 <__pow5mult+0x48>
 8015a98:	2010      	movs	r0, #16
 8015a9a:	f7fe f8bd 	bl	8013c18 <malloc>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	6270      	str	r0, [r6, #36]	; 0x24
 8015aa2:	b928      	cbnz	r0, 8015ab0 <__pow5mult+0x40>
 8015aa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015aa8:	4b1c      	ldr	r3, [pc, #112]	; (8015b1c <__pow5mult+0xac>)
 8015aaa:	481d      	ldr	r0, [pc, #116]	; (8015b20 <__pow5mult+0xb0>)
 8015aac:	f000 fb30 	bl	8016110 <__assert_func>
 8015ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015ab4:	6004      	str	r4, [r0, #0]
 8015ab6:	60c4      	str	r4, [r0, #12]
 8015ab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015ac0:	b94c      	cbnz	r4, 8015ad6 <__pow5mult+0x66>
 8015ac2:	f240 2171 	movw	r1, #625	; 0x271
 8015ac6:	4630      	mov	r0, r6
 8015ac8:	f7ff ff14 	bl	80158f4 <__i2b>
 8015acc:	2300      	movs	r3, #0
 8015ace:	4604      	mov	r4, r0
 8015ad0:	f8c8 0008 	str.w	r0, [r8, #8]
 8015ad4:	6003      	str	r3, [r0, #0]
 8015ad6:	f04f 0900 	mov.w	r9, #0
 8015ada:	07eb      	lsls	r3, r5, #31
 8015adc:	d50a      	bpl.n	8015af4 <__pow5mult+0x84>
 8015ade:	4639      	mov	r1, r7
 8015ae0:	4622      	mov	r2, r4
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	f7ff ff1c 	bl	8015920 <__multiply>
 8015ae8:	4680      	mov	r8, r0
 8015aea:	4639      	mov	r1, r7
 8015aec:	4630      	mov	r0, r6
 8015aee:	f7ff fe4b 	bl	8015788 <_Bfree>
 8015af2:	4647      	mov	r7, r8
 8015af4:	106d      	asrs	r5, r5, #1
 8015af6:	d00b      	beq.n	8015b10 <__pow5mult+0xa0>
 8015af8:	6820      	ldr	r0, [r4, #0]
 8015afa:	b938      	cbnz	r0, 8015b0c <__pow5mult+0x9c>
 8015afc:	4622      	mov	r2, r4
 8015afe:	4621      	mov	r1, r4
 8015b00:	4630      	mov	r0, r6
 8015b02:	f7ff ff0d 	bl	8015920 <__multiply>
 8015b06:	6020      	str	r0, [r4, #0]
 8015b08:	f8c0 9000 	str.w	r9, [r0]
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	e7e4      	b.n	8015ada <__pow5mult+0x6a>
 8015b10:	4638      	mov	r0, r7
 8015b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b16:	bf00      	nop
 8015b18:	0802ff08 	.word	0x0802ff08
 8015b1c:	0802fd39 	.word	0x0802fd39
 8015b20:	0802fdbc 	.word	0x0802fdbc

08015b24 <__lshift>:
 8015b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b28:	460c      	mov	r4, r1
 8015b2a:	4607      	mov	r7, r0
 8015b2c:	4691      	mov	r9, r2
 8015b2e:	6923      	ldr	r3, [r4, #16]
 8015b30:	6849      	ldr	r1, [r1, #4]
 8015b32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015b36:	68a3      	ldr	r3, [r4, #8]
 8015b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015b3c:	f108 0601 	add.w	r6, r8, #1
 8015b40:	42b3      	cmp	r3, r6
 8015b42:	db0b      	blt.n	8015b5c <__lshift+0x38>
 8015b44:	4638      	mov	r0, r7
 8015b46:	f7ff fddf 	bl	8015708 <_Balloc>
 8015b4a:	4605      	mov	r5, r0
 8015b4c:	b948      	cbnz	r0, 8015b62 <__lshift+0x3e>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015b54:	4b29      	ldr	r3, [pc, #164]	; (8015bfc <__lshift+0xd8>)
 8015b56:	482a      	ldr	r0, [pc, #168]	; (8015c00 <__lshift+0xdc>)
 8015b58:	f000 fada 	bl	8016110 <__assert_func>
 8015b5c:	3101      	adds	r1, #1
 8015b5e:	005b      	lsls	r3, r3, #1
 8015b60:	e7ee      	b.n	8015b40 <__lshift+0x1c>
 8015b62:	2300      	movs	r3, #0
 8015b64:	f100 0114 	add.w	r1, r0, #20
 8015b68:	f100 0210 	add.w	r2, r0, #16
 8015b6c:	4618      	mov	r0, r3
 8015b6e:	4553      	cmp	r3, sl
 8015b70:	db37      	blt.n	8015be2 <__lshift+0xbe>
 8015b72:	6920      	ldr	r0, [r4, #16]
 8015b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015b78:	f104 0314 	add.w	r3, r4, #20
 8015b7c:	f019 091f 	ands.w	r9, r9, #31
 8015b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015b84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015b88:	d02f      	beq.n	8015bea <__lshift+0xc6>
 8015b8a:	468a      	mov	sl, r1
 8015b8c:	f04f 0c00 	mov.w	ip, #0
 8015b90:	f1c9 0e20 	rsb	lr, r9, #32
 8015b94:	681a      	ldr	r2, [r3, #0]
 8015b96:	fa02 f209 	lsl.w	r2, r2, r9
 8015b9a:	ea42 020c 	orr.w	r2, r2, ip
 8015b9e:	f84a 2b04 	str.w	r2, [sl], #4
 8015ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ba6:	4298      	cmp	r0, r3
 8015ba8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015bac:	d8f2      	bhi.n	8015b94 <__lshift+0x70>
 8015bae:	1b03      	subs	r3, r0, r4
 8015bb0:	3b15      	subs	r3, #21
 8015bb2:	f023 0303 	bic.w	r3, r3, #3
 8015bb6:	3304      	adds	r3, #4
 8015bb8:	f104 0215 	add.w	r2, r4, #21
 8015bbc:	4290      	cmp	r0, r2
 8015bbe:	bf38      	it	cc
 8015bc0:	2304      	movcc	r3, #4
 8015bc2:	f841 c003 	str.w	ip, [r1, r3]
 8015bc6:	f1bc 0f00 	cmp.w	ip, #0
 8015bca:	d001      	beq.n	8015bd0 <__lshift+0xac>
 8015bcc:	f108 0602 	add.w	r6, r8, #2
 8015bd0:	3e01      	subs	r6, #1
 8015bd2:	4638      	mov	r0, r7
 8015bd4:	4621      	mov	r1, r4
 8015bd6:	612e      	str	r6, [r5, #16]
 8015bd8:	f7ff fdd6 	bl	8015788 <_Bfree>
 8015bdc:	4628      	mov	r0, r5
 8015bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8015be6:	3301      	adds	r3, #1
 8015be8:	e7c1      	b.n	8015b6e <__lshift+0x4a>
 8015bea:	3904      	subs	r1, #4
 8015bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bf0:	4298      	cmp	r0, r3
 8015bf2:	f841 2f04 	str.w	r2, [r1, #4]!
 8015bf6:	d8f9      	bhi.n	8015bec <__lshift+0xc8>
 8015bf8:	e7ea      	b.n	8015bd0 <__lshift+0xac>
 8015bfa:	bf00      	nop
 8015bfc:	0802fdab 	.word	0x0802fdab
 8015c00:	0802fdbc 	.word	0x0802fdbc

08015c04 <__mcmp>:
 8015c04:	4603      	mov	r3, r0
 8015c06:	690a      	ldr	r2, [r1, #16]
 8015c08:	6900      	ldr	r0, [r0, #16]
 8015c0a:	b530      	push	{r4, r5, lr}
 8015c0c:	1a80      	subs	r0, r0, r2
 8015c0e:	d10d      	bne.n	8015c2c <__mcmp+0x28>
 8015c10:	3314      	adds	r3, #20
 8015c12:	3114      	adds	r1, #20
 8015c14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015c18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015c24:	4295      	cmp	r5, r2
 8015c26:	d002      	beq.n	8015c2e <__mcmp+0x2a>
 8015c28:	d304      	bcc.n	8015c34 <__mcmp+0x30>
 8015c2a:	2001      	movs	r0, #1
 8015c2c:	bd30      	pop	{r4, r5, pc}
 8015c2e:	42a3      	cmp	r3, r4
 8015c30:	d3f4      	bcc.n	8015c1c <__mcmp+0x18>
 8015c32:	e7fb      	b.n	8015c2c <__mcmp+0x28>
 8015c34:	f04f 30ff 	mov.w	r0, #4294967295
 8015c38:	e7f8      	b.n	8015c2c <__mcmp+0x28>
	...

08015c3c <__mdiff>:
 8015c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c40:	460d      	mov	r5, r1
 8015c42:	4607      	mov	r7, r0
 8015c44:	4611      	mov	r1, r2
 8015c46:	4628      	mov	r0, r5
 8015c48:	4614      	mov	r4, r2
 8015c4a:	f7ff ffdb 	bl	8015c04 <__mcmp>
 8015c4e:	1e06      	subs	r6, r0, #0
 8015c50:	d111      	bne.n	8015c76 <__mdiff+0x3a>
 8015c52:	4631      	mov	r1, r6
 8015c54:	4638      	mov	r0, r7
 8015c56:	f7ff fd57 	bl	8015708 <_Balloc>
 8015c5a:	4602      	mov	r2, r0
 8015c5c:	b928      	cbnz	r0, 8015c6a <__mdiff+0x2e>
 8015c5e:	f240 2132 	movw	r1, #562	; 0x232
 8015c62:	4b3a      	ldr	r3, [pc, #232]	; (8015d4c <__mdiff+0x110>)
 8015c64:	483a      	ldr	r0, [pc, #232]	; (8015d50 <__mdiff+0x114>)
 8015c66:	f000 fa53 	bl	8016110 <__assert_func>
 8015c6a:	2301      	movs	r3, #1
 8015c6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015c70:	4610      	mov	r0, r2
 8015c72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c76:	bfa4      	itt	ge
 8015c78:	4623      	movge	r3, r4
 8015c7a:	462c      	movge	r4, r5
 8015c7c:	4638      	mov	r0, r7
 8015c7e:	6861      	ldr	r1, [r4, #4]
 8015c80:	bfa6      	itte	ge
 8015c82:	461d      	movge	r5, r3
 8015c84:	2600      	movge	r6, #0
 8015c86:	2601      	movlt	r6, #1
 8015c88:	f7ff fd3e 	bl	8015708 <_Balloc>
 8015c8c:	4602      	mov	r2, r0
 8015c8e:	b918      	cbnz	r0, 8015c98 <__mdiff+0x5c>
 8015c90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015c94:	4b2d      	ldr	r3, [pc, #180]	; (8015d4c <__mdiff+0x110>)
 8015c96:	e7e5      	b.n	8015c64 <__mdiff+0x28>
 8015c98:	f102 0814 	add.w	r8, r2, #20
 8015c9c:	46c2      	mov	sl, r8
 8015c9e:	f04f 0c00 	mov.w	ip, #0
 8015ca2:	6927      	ldr	r7, [r4, #16]
 8015ca4:	60c6      	str	r6, [r0, #12]
 8015ca6:	692e      	ldr	r6, [r5, #16]
 8015ca8:	f104 0014 	add.w	r0, r4, #20
 8015cac:	f105 0914 	add.w	r9, r5, #20
 8015cb0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8015cb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015cb8:	3410      	adds	r4, #16
 8015cba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8015cbe:	f859 3b04 	ldr.w	r3, [r9], #4
 8015cc2:	fa1f f18b 	uxth.w	r1, fp
 8015cc6:	448c      	add	ip, r1
 8015cc8:	b299      	uxth	r1, r3
 8015cca:	0c1b      	lsrs	r3, r3, #16
 8015ccc:	ebac 0101 	sub.w	r1, ip, r1
 8015cd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015cd4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015cd8:	b289      	uxth	r1, r1
 8015cda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8015cde:	454e      	cmp	r6, r9
 8015ce0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015ce4:	f84a 3b04 	str.w	r3, [sl], #4
 8015ce8:	d8e7      	bhi.n	8015cba <__mdiff+0x7e>
 8015cea:	1b73      	subs	r3, r6, r5
 8015cec:	3b15      	subs	r3, #21
 8015cee:	f023 0303 	bic.w	r3, r3, #3
 8015cf2:	3515      	adds	r5, #21
 8015cf4:	3304      	adds	r3, #4
 8015cf6:	42ae      	cmp	r6, r5
 8015cf8:	bf38      	it	cc
 8015cfa:	2304      	movcc	r3, #4
 8015cfc:	4418      	add	r0, r3
 8015cfe:	4443      	add	r3, r8
 8015d00:	461e      	mov	r6, r3
 8015d02:	4605      	mov	r5, r0
 8015d04:	4575      	cmp	r5, lr
 8015d06:	d30e      	bcc.n	8015d26 <__mdiff+0xea>
 8015d08:	f10e 0103 	add.w	r1, lr, #3
 8015d0c:	1a09      	subs	r1, r1, r0
 8015d0e:	f021 0103 	bic.w	r1, r1, #3
 8015d12:	3803      	subs	r0, #3
 8015d14:	4586      	cmp	lr, r0
 8015d16:	bf38      	it	cc
 8015d18:	2100      	movcc	r1, #0
 8015d1a:	4419      	add	r1, r3
 8015d1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015d20:	b18b      	cbz	r3, 8015d46 <__mdiff+0x10a>
 8015d22:	6117      	str	r7, [r2, #16]
 8015d24:	e7a4      	b.n	8015c70 <__mdiff+0x34>
 8015d26:	f855 8b04 	ldr.w	r8, [r5], #4
 8015d2a:	fa1f f188 	uxth.w	r1, r8
 8015d2e:	4461      	add	r1, ip
 8015d30:	140c      	asrs	r4, r1, #16
 8015d32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015d36:	b289      	uxth	r1, r1
 8015d38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015d3c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8015d40:	f846 1b04 	str.w	r1, [r6], #4
 8015d44:	e7de      	b.n	8015d04 <__mdiff+0xc8>
 8015d46:	3f01      	subs	r7, #1
 8015d48:	e7e8      	b.n	8015d1c <__mdiff+0xe0>
 8015d4a:	bf00      	nop
 8015d4c:	0802fdab 	.word	0x0802fdab
 8015d50:	0802fdbc 	.word	0x0802fdbc

08015d54 <__d2b>:
 8015d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8015d58:	2101      	movs	r1, #1
 8015d5a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8015d5e:	4690      	mov	r8, r2
 8015d60:	461d      	mov	r5, r3
 8015d62:	f7ff fcd1 	bl	8015708 <_Balloc>
 8015d66:	4604      	mov	r4, r0
 8015d68:	b930      	cbnz	r0, 8015d78 <__d2b+0x24>
 8015d6a:	4602      	mov	r2, r0
 8015d6c:	f240 310a 	movw	r1, #778	; 0x30a
 8015d70:	4b24      	ldr	r3, [pc, #144]	; (8015e04 <__d2b+0xb0>)
 8015d72:	4825      	ldr	r0, [pc, #148]	; (8015e08 <__d2b+0xb4>)
 8015d74:	f000 f9cc 	bl	8016110 <__assert_func>
 8015d78:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8015d7c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8015d80:	bb2d      	cbnz	r5, 8015dce <__d2b+0x7a>
 8015d82:	9301      	str	r3, [sp, #4]
 8015d84:	f1b8 0300 	subs.w	r3, r8, #0
 8015d88:	d026      	beq.n	8015dd8 <__d2b+0x84>
 8015d8a:	4668      	mov	r0, sp
 8015d8c:	9300      	str	r3, [sp, #0]
 8015d8e:	f7ff fd83 	bl	8015898 <__lo0bits>
 8015d92:	9900      	ldr	r1, [sp, #0]
 8015d94:	b1f0      	cbz	r0, 8015dd4 <__d2b+0x80>
 8015d96:	9a01      	ldr	r2, [sp, #4]
 8015d98:	f1c0 0320 	rsb	r3, r0, #32
 8015d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8015da0:	430b      	orrs	r3, r1
 8015da2:	40c2      	lsrs	r2, r0
 8015da4:	6163      	str	r3, [r4, #20]
 8015da6:	9201      	str	r2, [sp, #4]
 8015da8:	9b01      	ldr	r3, [sp, #4]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	bf14      	ite	ne
 8015dae:	2102      	movne	r1, #2
 8015db0:	2101      	moveq	r1, #1
 8015db2:	61a3      	str	r3, [r4, #24]
 8015db4:	6121      	str	r1, [r4, #16]
 8015db6:	b1c5      	cbz	r5, 8015dea <__d2b+0x96>
 8015db8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015dbc:	4405      	add	r5, r0
 8015dbe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015dc2:	603d      	str	r5, [r7, #0]
 8015dc4:	6030      	str	r0, [r6, #0]
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	b002      	add	sp, #8
 8015dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015dd2:	e7d6      	b.n	8015d82 <__d2b+0x2e>
 8015dd4:	6161      	str	r1, [r4, #20]
 8015dd6:	e7e7      	b.n	8015da8 <__d2b+0x54>
 8015dd8:	a801      	add	r0, sp, #4
 8015dda:	f7ff fd5d 	bl	8015898 <__lo0bits>
 8015dde:	2101      	movs	r1, #1
 8015de0:	9b01      	ldr	r3, [sp, #4]
 8015de2:	6121      	str	r1, [r4, #16]
 8015de4:	6163      	str	r3, [r4, #20]
 8015de6:	3020      	adds	r0, #32
 8015de8:	e7e5      	b.n	8015db6 <__d2b+0x62>
 8015dea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8015dee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015df2:	6038      	str	r0, [r7, #0]
 8015df4:	6918      	ldr	r0, [r3, #16]
 8015df6:	f7ff fd2f 	bl	8015858 <__hi0bits>
 8015dfa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8015dfe:	6031      	str	r1, [r6, #0]
 8015e00:	e7e1      	b.n	8015dc6 <__d2b+0x72>
 8015e02:	bf00      	nop
 8015e04:	0802fdab 	.word	0x0802fdab
 8015e08:	0802fdbc 	.word	0x0802fdbc

08015e0c <_calloc_r>:
 8015e0c:	b570      	push	{r4, r5, r6, lr}
 8015e0e:	fba1 5402 	umull	r5, r4, r1, r2
 8015e12:	b934      	cbnz	r4, 8015e22 <_calloc_r+0x16>
 8015e14:	4629      	mov	r1, r5
 8015e16:	f7fd ff8d 	bl	8013d34 <_malloc_r>
 8015e1a:	4606      	mov	r6, r0
 8015e1c:	b928      	cbnz	r0, 8015e2a <_calloc_r+0x1e>
 8015e1e:	4630      	mov	r0, r6
 8015e20:	bd70      	pop	{r4, r5, r6, pc}
 8015e22:	220c      	movs	r2, #12
 8015e24:	2600      	movs	r6, #0
 8015e26:	6002      	str	r2, [r0, #0]
 8015e28:	e7f9      	b.n	8015e1e <_calloc_r+0x12>
 8015e2a:	462a      	mov	r2, r5
 8015e2c:	4621      	mov	r1, r4
 8015e2e:	f7fd ff11 	bl	8013c54 <memset>
 8015e32:	e7f4      	b.n	8015e1e <_calloc_r+0x12>

08015e34 <__ssputs_r>:
 8015e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e38:	688e      	ldr	r6, [r1, #8]
 8015e3a:	4682      	mov	sl, r0
 8015e3c:	429e      	cmp	r6, r3
 8015e3e:	460c      	mov	r4, r1
 8015e40:	4690      	mov	r8, r2
 8015e42:	461f      	mov	r7, r3
 8015e44:	d838      	bhi.n	8015eb8 <__ssputs_r+0x84>
 8015e46:	898a      	ldrh	r2, [r1, #12]
 8015e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015e4c:	d032      	beq.n	8015eb4 <__ssputs_r+0x80>
 8015e4e:	6825      	ldr	r5, [r4, #0]
 8015e50:	6909      	ldr	r1, [r1, #16]
 8015e52:	3301      	adds	r3, #1
 8015e54:	eba5 0901 	sub.w	r9, r5, r1
 8015e58:	6965      	ldr	r5, [r4, #20]
 8015e5a:	444b      	add	r3, r9
 8015e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e64:	106d      	asrs	r5, r5, #1
 8015e66:	429d      	cmp	r5, r3
 8015e68:	bf38      	it	cc
 8015e6a:	461d      	movcc	r5, r3
 8015e6c:	0553      	lsls	r3, r2, #21
 8015e6e:	d531      	bpl.n	8015ed4 <__ssputs_r+0xa0>
 8015e70:	4629      	mov	r1, r5
 8015e72:	f7fd ff5f 	bl	8013d34 <_malloc_r>
 8015e76:	4606      	mov	r6, r0
 8015e78:	b950      	cbnz	r0, 8015e90 <__ssputs_r+0x5c>
 8015e7a:	230c      	movs	r3, #12
 8015e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e80:	f8ca 3000 	str.w	r3, [sl]
 8015e84:	89a3      	ldrh	r3, [r4, #12]
 8015e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e8a:	81a3      	strh	r3, [r4, #12]
 8015e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e90:	464a      	mov	r2, r9
 8015e92:	6921      	ldr	r1, [r4, #16]
 8015e94:	f7fd fed0 	bl	8013c38 <memcpy>
 8015e98:	89a3      	ldrh	r3, [r4, #12]
 8015e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ea2:	81a3      	strh	r3, [r4, #12]
 8015ea4:	6126      	str	r6, [r4, #16]
 8015ea6:	444e      	add	r6, r9
 8015ea8:	6026      	str	r6, [r4, #0]
 8015eaa:	463e      	mov	r6, r7
 8015eac:	6165      	str	r5, [r4, #20]
 8015eae:	eba5 0509 	sub.w	r5, r5, r9
 8015eb2:	60a5      	str	r5, [r4, #8]
 8015eb4:	42be      	cmp	r6, r7
 8015eb6:	d900      	bls.n	8015eba <__ssputs_r+0x86>
 8015eb8:	463e      	mov	r6, r7
 8015eba:	4632      	mov	r2, r6
 8015ebc:	4641      	mov	r1, r8
 8015ebe:	6820      	ldr	r0, [r4, #0]
 8015ec0:	f000 f968 	bl	8016194 <memmove>
 8015ec4:	68a3      	ldr	r3, [r4, #8]
 8015ec6:	2000      	movs	r0, #0
 8015ec8:	1b9b      	subs	r3, r3, r6
 8015eca:	60a3      	str	r3, [r4, #8]
 8015ecc:	6823      	ldr	r3, [r4, #0]
 8015ece:	4433      	add	r3, r6
 8015ed0:	6023      	str	r3, [r4, #0]
 8015ed2:	e7db      	b.n	8015e8c <__ssputs_r+0x58>
 8015ed4:	462a      	mov	r2, r5
 8015ed6:	f000 f977 	bl	80161c8 <_realloc_r>
 8015eda:	4606      	mov	r6, r0
 8015edc:	2800      	cmp	r0, #0
 8015ede:	d1e1      	bne.n	8015ea4 <__ssputs_r+0x70>
 8015ee0:	4650      	mov	r0, sl
 8015ee2:	6921      	ldr	r1, [r4, #16]
 8015ee4:	f7fd febe 	bl	8013c64 <_free_r>
 8015ee8:	e7c7      	b.n	8015e7a <__ssputs_r+0x46>
	...

08015eec <_svfiprintf_r>:
 8015eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef0:	4698      	mov	r8, r3
 8015ef2:	898b      	ldrh	r3, [r1, #12]
 8015ef4:	4607      	mov	r7, r0
 8015ef6:	061b      	lsls	r3, r3, #24
 8015ef8:	460d      	mov	r5, r1
 8015efa:	4614      	mov	r4, r2
 8015efc:	b09d      	sub	sp, #116	; 0x74
 8015efe:	d50e      	bpl.n	8015f1e <_svfiprintf_r+0x32>
 8015f00:	690b      	ldr	r3, [r1, #16]
 8015f02:	b963      	cbnz	r3, 8015f1e <_svfiprintf_r+0x32>
 8015f04:	2140      	movs	r1, #64	; 0x40
 8015f06:	f7fd ff15 	bl	8013d34 <_malloc_r>
 8015f0a:	6028      	str	r0, [r5, #0]
 8015f0c:	6128      	str	r0, [r5, #16]
 8015f0e:	b920      	cbnz	r0, 8015f1a <_svfiprintf_r+0x2e>
 8015f10:	230c      	movs	r3, #12
 8015f12:	603b      	str	r3, [r7, #0]
 8015f14:	f04f 30ff 	mov.w	r0, #4294967295
 8015f18:	e0d1      	b.n	80160be <_svfiprintf_r+0x1d2>
 8015f1a:	2340      	movs	r3, #64	; 0x40
 8015f1c:	616b      	str	r3, [r5, #20]
 8015f1e:	2300      	movs	r3, #0
 8015f20:	9309      	str	r3, [sp, #36]	; 0x24
 8015f22:	2320      	movs	r3, #32
 8015f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f28:	2330      	movs	r3, #48	; 0x30
 8015f2a:	f04f 0901 	mov.w	r9, #1
 8015f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80160d8 <_svfiprintf_r+0x1ec>
 8015f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f3a:	4623      	mov	r3, r4
 8015f3c:	469a      	mov	sl, r3
 8015f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f42:	b10a      	cbz	r2, 8015f48 <_svfiprintf_r+0x5c>
 8015f44:	2a25      	cmp	r2, #37	; 0x25
 8015f46:	d1f9      	bne.n	8015f3c <_svfiprintf_r+0x50>
 8015f48:	ebba 0b04 	subs.w	fp, sl, r4
 8015f4c:	d00b      	beq.n	8015f66 <_svfiprintf_r+0x7a>
 8015f4e:	465b      	mov	r3, fp
 8015f50:	4622      	mov	r2, r4
 8015f52:	4629      	mov	r1, r5
 8015f54:	4638      	mov	r0, r7
 8015f56:	f7ff ff6d 	bl	8015e34 <__ssputs_r>
 8015f5a:	3001      	adds	r0, #1
 8015f5c:	f000 80aa 	beq.w	80160b4 <_svfiprintf_r+0x1c8>
 8015f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f62:	445a      	add	r2, fp
 8015f64:	9209      	str	r2, [sp, #36]	; 0x24
 8015f66:	f89a 3000 	ldrb.w	r3, [sl]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	f000 80a2 	beq.w	80160b4 <_svfiprintf_r+0x1c8>
 8015f70:	2300      	movs	r3, #0
 8015f72:	f04f 32ff 	mov.w	r2, #4294967295
 8015f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f7a:	f10a 0a01 	add.w	sl, sl, #1
 8015f7e:	9304      	str	r3, [sp, #16]
 8015f80:	9307      	str	r3, [sp, #28]
 8015f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f86:	931a      	str	r3, [sp, #104]	; 0x68
 8015f88:	4654      	mov	r4, sl
 8015f8a:	2205      	movs	r2, #5
 8015f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f90:	4851      	ldr	r0, [pc, #324]	; (80160d8 <_svfiprintf_r+0x1ec>)
 8015f92:	f7ff fb9f 	bl	80156d4 <memchr>
 8015f96:	9a04      	ldr	r2, [sp, #16]
 8015f98:	b9d8      	cbnz	r0, 8015fd2 <_svfiprintf_r+0xe6>
 8015f9a:	06d0      	lsls	r0, r2, #27
 8015f9c:	bf44      	itt	mi
 8015f9e:	2320      	movmi	r3, #32
 8015fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fa4:	0711      	lsls	r1, r2, #28
 8015fa6:	bf44      	itt	mi
 8015fa8:	232b      	movmi	r3, #43	; 0x2b
 8015faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fae:	f89a 3000 	ldrb.w	r3, [sl]
 8015fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8015fb4:	d015      	beq.n	8015fe2 <_svfiprintf_r+0xf6>
 8015fb6:	4654      	mov	r4, sl
 8015fb8:	2000      	movs	r0, #0
 8015fba:	f04f 0c0a 	mov.w	ip, #10
 8015fbe:	9a07      	ldr	r2, [sp, #28]
 8015fc0:	4621      	mov	r1, r4
 8015fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fc6:	3b30      	subs	r3, #48	; 0x30
 8015fc8:	2b09      	cmp	r3, #9
 8015fca:	d94e      	bls.n	801606a <_svfiprintf_r+0x17e>
 8015fcc:	b1b0      	cbz	r0, 8015ffc <_svfiprintf_r+0x110>
 8015fce:	9207      	str	r2, [sp, #28]
 8015fd0:	e014      	b.n	8015ffc <_svfiprintf_r+0x110>
 8015fd2:	eba0 0308 	sub.w	r3, r0, r8
 8015fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8015fda:	4313      	orrs	r3, r2
 8015fdc:	46a2      	mov	sl, r4
 8015fde:	9304      	str	r3, [sp, #16]
 8015fe0:	e7d2      	b.n	8015f88 <_svfiprintf_r+0x9c>
 8015fe2:	9b03      	ldr	r3, [sp, #12]
 8015fe4:	1d19      	adds	r1, r3, #4
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	9103      	str	r1, [sp, #12]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	bfbb      	ittet	lt
 8015fee:	425b      	neglt	r3, r3
 8015ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8015ff4:	9307      	strge	r3, [sp, #28]
 8015ff6:	9307      	strlt	r3, [sp, #28]
 8015ff8:	bfb8      	it	lt
 8015ffa:	9204      	strlt	r2, [sp, #16]
 8015ffc:	7823      	ldrb	r3, [r4, #0]
 8015ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8016000:	d10c      	bne.n	801601c <_svfiprintf_r+0x130>
 8016002:	7863      	ldrb	r3, [r4, #1]
 8016004:	2b2a      	cmp	r3, #42	; 0x2a
 8016006:	d135      	bne.n	8016074 <_svfiprintf_r+0x188>
 8016008:	9b03      	ldr	r3, [sp, #12]
 801600a:	3402      	adds	r4, #2
 801600c:	1d1a      	adds	r2, r3, #4
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	9203      	str	r2, [sp, #12]
 8016012:	2b00      	cmp	r3, #0
 8016014:	bfb8      	it	lt
 8016016:	f04f 33ff 	movlt.w	r3, #4294967295
 801601a:	9305      	str	r3, [sp, #20]
 801601c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80160dc <_svfiprintf_r+0x1f0>
 8016020:	2203      	movs	r2, #3
 8016022:	4650      	mov	r0, sl
 8016024:	7821      	ldrb	r1, [r4, #0]
 8016026:	f7ff fb55 	bl	80156d4 <memchr>
 801602a:	b140      	cbz	r0, 801603e <_svfiprintf_r+0x152>
 801602c:	2340      	movs	r3, #64	; 0x40
 801602e:	eba0 000a 	sub.w	r0, r0, sl
 8016032:	fa03 f000 	lsl.w	r0, r3, r0
 8016036:	9b04      	ldr	r3, [sp, #16]
 8016038:	3401      	adds	r4, #1
 801603a:	4303      	orrs	r3, r0
 801603c:	9304      	str	r3, [sp, #16]
 801603e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016042:	2206      	movs	r2, #6
 8016044:	4826      	ldr	r0, [pc, #152]	; (80160e0 <_svfiprintf_r+0x1f4>)
 8016046:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801604a:	f7ff fb43 	bl	80156d4 <memchr>
 801604e:	2800      	cmp	r0, #0
 8016050:	d038      	beq.n	80160c4 <_svfiprintf_r+0x1d8>
 8016052:	4b24      	ldr	r3, [pc, #144]	; (80160e4 <_svfiprintf_r+0x1f8>)
 8016054:	bb1b      	cbnz	r3, 801609e <_svfiprintf_r+0x1b2>
 8016056:	9b03      	ldr	r3, [sp, #12]
 8016058:	3307      	adds	r3, #7
 801605a:	f023 0307 	bic.w	r3, r3, #7
 801605e:	3308      	adds	r3, #8
 8016060:	9303      	str	r3, [sp, #12]
 8016062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016064:	4433      	add	r3, r6
 8016066:	9309      	str	r3, [sp, #36]	; 0x24
 8016068:	e767      	b.n	8015f3a <_svfiprintf_r+0x4e>
 801606a:	460c      	mov	r4, r1
 801606c:	2001      	movs	r0, #1
 801606e:	fb0c 3202 	mla	r2, ip, r2, r3
 8016072:	e7a5      	b.n	8015fc0 <_svfiprintf_r+0xd4>
 8016074:	2300      	movs	r3, #0
 8016076:	f04f 0c0a 	mov.w	ip, #10
 801607a:	4619      	mov	r1, r3
 801607c:	3401      	adds	r4, #1
 801607e:	9305      	str	r3, [sp, #20]
 8016080:	4620      	mov	r0, r4
 8016082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016086:	3a30      	subs	r2, #48	; 0x30
 8016088:	2a09      	cmp	r2, #9
 801608a:	d903      	bls.n	8016094 <_svfiprintf_r+0x1a8>
 801608c:	2b00      	cmp	r3, #0
 801608e:	d0c5      	beq.n	801601c <_svfiprintf_r+0x130>
 8016090:	9105      	str	r1, [sp, #20]
 8016092:	e7c3      	b.n	801601c <_svfiprintf_r+0x130>
 8016094:	4604      	mov	r4, r0
 8016096:	2301      	movs	r3, #1
 8016098:	fb0c 2101 	mla	r1, ip, r1, r2
 801609c:	e7f0      	b.n	8016080 <_svfiprintf_r+0x194>
 801609e:	ab03      	add	r3, sp, #12
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	462a      	mov	r2, r5
 80160a4:	4638      	mov	r0, r7
 80160a6:	4b10      	ldr	r3, [pc, #64]	; (80160e8 <_svfiprintf_r+0x1fc>)
 80160a8:	a904      	add	r1, sp, #16
 80160aa:	f7fd ff55 	bl	8013f58 <_printf_float>
 80160ae:	1c42      	adds	r2, r0, #1
 80160b0:	4606      	mov	r6, r0
 80160b2:	d1d6      	bne.n	8016062 <_svfiprintf_r+0x176>
 80160b4:	89ab      	ldrh	r3, [r5, #12]
 80160b6:	065b      	lsls	r3, r3, #25
 80160b8:	f53f af2c 	bmi.w	8015f14 <_svfiprintf_r+0x28>
 80160bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80160be:	b01d      	add	sp, #116	; 0x74
 80160c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c4:	ab03      	add	r3, sp, #12
 80160c6:	9300      	str	r3, [sp, #0]
 80160c8:	462a      	mov	r2, r5
 80160ca:	4638      	mov	r0, r7
 80160cc:	4b06      	ldr	r3, [pc, #24]	; (80160e8 <_svfiprintf_r+0x1fc>)
 80160ce:	a904      	add	r1, sp, #16
 80160d0:	f7fe f9de 	bl	8014490 <_printf_i>
 80160d4:	e7eb      	b.n	80160ae <_svfiprintf_r+0x1c2>
 80160d6:	bf00      	nop
 80160d8:	0802ff14 	.word	0x0802ff14
 80160dc:	0802ff1a 	.word	0x0802ff1a
 80160e0:	0802ff1e 	.word	0x0802ff1e
 80160e4:	08013f59 	.word	0x08013f59
 80160e8:	08015e35 	.word	0x08015e35

080160ec <_read_r>:
 80160ec:	b538      	push	{r3, r4, r5, lr}
 80160ee:	4604      	mov	r4, r0
 80160f0:	4608      	mov	r0, r1
 80160f2:	4611      	mov	r1, r2
 80160f4:	2200      	movs	r2, #0
 80160f6:	4d05      	ldr	r5, [pc, #20]	; (801610c <_read_r+0x20>)
 80160f8:	602a      	str	r2, [r5, #0]
 80160fa:	461a      	mov	r2, r3
 80160fc:	f7ec ff1f 	bl	8002f3e <_read>
 8016100:	1c43      	adds	r3, r0, #1
 8016102:	d102      	bne.n	801610a <_read_r+0x1e>
 8016104:	682b      	ldr	r3, [r5, #0]
 8016106:	b103      	cbz	r3, 801610a <_read_r+0x1e>
 8016108:	6023      	str	r3, [r4, #0]
 801610a:	bd38      	pop	{r3, r4, r5, pc}
 801610c:	200025a4 	.word	0x200025a4

08016110 <__assert_func>:
 8016110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016112:	4614      	mov	r4, r2
 8016114:	461a      	mov	r2, r3
 8016116:	4b09      	ldr	r3, [pc, #36]	; (801613c <__assert_func+0x2c>)
 8016118:	4605      	mov	r5, r0
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	68d8      	ldr	r0, [r3, #12]
 801611e:	b14c      	cbz	r4, 8016134 <__assert_func+0x24>
 8016120:	4b07      	ldr	r3, [pc, #28]	; (8016140 <__assert_func+0x30>)
 8016122:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016126:	9100      	str	r1, [sp, #0]
 8016128:	462b      	mov	r3, r5
 801612a:	4906      	ldr	r1, [pc, #24]	; (8016144 <__assert_func+0x34>)
 801612c:	f000 f80e 	bl	801614c <fiprintf>
 8016130:	f000 fa9e 	bl	8016670 <abort>
 8016134:	4b04      	ldr	r3, [pc, #16]	; (8016148 <__assert_func+0x38>)
 8016136:	461c      	mov	r4, r3
 8016138:	e7f3      	b.n	8016122 <__assert_func+0x12>
 801613a:	bf00      	nop
 801613c:	2000012c 	.word	0x2000012c
 8016140:	0802ff25 	.word	0x0802ff25
 8016144:	0802ff32 	.word	0x0802ff32
 8016148:	0802ff60 	.word	0x0802ff60

0801614c <fiprintf>:
 801614c:	b40e      	push	{r1, r2, r3}
 801614e:	b503      	push	{r0, r1, lr}
 8016150:	4601      	mov	r1, r0
 8016152:	ab03      	add	r3, sp, #12
 8016154:	4805      	ldr	r0, [pc, #20]	; (801616c <fiprintf+0x20>)
 8016156:	f853 2b04 	ldr.w	r2, [r3], #4
 801615a:	6800      	ldr	r0, [r0, #0]
 801615c:	9301      	str	r3, [sp, #4]
 801615e:	f000 f889 	bl	8016274 <_vfiprintf_r>
 8016162:	b002      	add	sp, #8
 8016164:	f85d eb04 	ldr.w	lr, [sp], #4
 8016168:	b003      	add	sp, #12
 801616a:	4770      	bx	lr
 801616c:	2000012c 	.word	0x2000012c

08016170 <__ascii_mbtowc>:
 8016170:	b082      	sub	sp, #8
 8016172:	b901      	cbnz	r1, 8016176 <__ascii_mbtowc+0x6>
 8016174:	a901      	add	r1, sp, #4
 8016176:	b142      	cbz	r2, 801618a <__ascii_mbtowc+0x1a>
 8016178:	b14b      	cbz	r3, 801618e <__ascii_mbtowc+0x1e>
 801617a:	7813      	ldrb	r3, [r2, #0]
 801617c:	600b      	str	r3, [r1, #0]
 801617e:	7812      	ldrb	r2, [r2, #0]
 8016180:	1e10      	subs	r0, r2, #0
 8016182:	bf18      	it	ne
 8016184:	2001      	movne	r0, #1
 8016186:	b002      	add	sp, #8
 8016188:	4770      	bx	lr
 801618a:	4610      	mov	r0, r2
 801618c:	e7fb      	b.n	8016186 <__ascii_mbtowc+0x16>
 801618e:	f06f 0001 	mvn.w	r0, #1
 8016192:	e7f8      	b.n	8016186 <__ascii_mbtowc+0x16>

08016194 <memmove>:
 8016194:	4288      	cmp	r0, r1
 8016196:	b510      	push	{r4, lr}
 8016198:	eb01 0402 	add.w	r4, r1, r2
 801619c:	d902      	bls.n	80161a4 <memmove+0x10>
 801619e:	4284      	cmp	r4, r0
 80161a0:	4623      	mov	r3, r4
 80161a2:	d807      	bhi.n	80161b4 <memmove+0x20>
 80161a4:	1e43      	subs	r3, r0, #1
 80161a6:	42a1      	cmp	r1, r4
 80161a8:	d008      	beq.n	80161bc <memmove+0x28>
 80161aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80161ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80161b2:	e7f8      	b.n	80161a6 <memmove+0x12>
 80161b4:	4601      	mov	r1, r0
 80161b6:	4402      	add	r2, r0
 80161b8:	428a      	cmp	r2, r1
 80161ba:	d100      	bne.n	80161be <memmove+0x2a>
 80161bc:	bd10      	pop	{r4, pc}
 80161be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80161c6:	e7f7      	b.n	80161b8 <memmove+0x24>

080161c8 <_realloc_r>:
 80161c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161cc:	4680      	mov	r8, r0
 80161ce:	4614      	mov	r4, r2
 80161d0:	460e      	mov	r6, r1
 80161d2:	b921      	cbnz	r1, 80161de <_realloc_r+0x16>
 80161d4:	4611      	mov	r1, r2
 80161d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161da:	f7fd bdab 	b.w	8013d34 <_malloc_r>
 80161de:	b92a      	cbnz	r2, 80161ec <_realloc_r+0x24>
 80161e0:	f7fd fd40 	bl	8013c64 <_free_r>
 80161e4:	4625      	mov	r5, r4
 80161e6:	4628      	mov	r0, r5
 80161e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161ec:	f000 faac 	bl	8016748 <_malloc_usable_size_r>
 80161f0:	4284      	cmp	r4, r0
 80161f2:	4607      	mov	r7, r0
 80161f4:	d802      	bhi.n	80161fc <_realloc_r+0x34>
 80161f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80161fa:	d812      	bhi.n	8016222 <_realloc_r+0x5a>
 80161fc:	4621      	mov	r1, r4
 80161fe:	4640      	mov	r0, r8
 8016200:	f7fd fd98 	bl	8013d34 <_malloc_r>
 8016204:	4605      	mov	r5, r0
 8016206:	2800      	cmp	r0, #0
 8016208:	d0ed      	beq.n	80161e6 <_realloc_r+0x1e>
 801620a:	42bc      	cmp	r4, r7
 801620c:	4622      	mov	r2, r4
 801620e:	4631      	mov	r1, r6
 8016210:	bf28      	it	cs
 8016212:	463a      	movcs	r2, r7
 8016214:	f7fd fd10 	bl	8013c38 <memcpy>
 8016218:	4631      	mov	r1, r6
 801621a:	4640      	mov	r0, r8
 801621c:	f7fd fd22 	bl	8013c64 <_free_r>
 8016220:	e7e1      	b.n	80161e6 <_realloc_r+0x1e>
 8016222:	4635      	mov	r5, r6
 8016224:	e7df      	b.n	80161e6 <_realloc_r+0x1e>

08016226 <__sfputc_r>:
 8016226:	6893      	ldr	r3, [r2, #8]
 8016228:	b410      	push	{r4}
 801622a:	3b01      	subs	r3, #1
 801622c:	2b00      	cmp	r3, #0
 801622e:	6093      	str	r3, [r2, #8]
 8016230:	da07      	bge.n	8016242 <__sfputc_r+0x1c>
 8016232:	6994      	ldr	r4, [r2, #24]
 8016234:	42a3      	cmp	r3, r4
 8016236:	db01      	blt.n	801623c <__sfputc_r+0x16>
 8016238:	290a      	cmp	r1, #10
 801623a:	d102      	bne.n	8016242 <__sfputc_r+0x1c>
 801623c:	bc10      	pop	{r4}
 801623e:	f000 b949 	b.w	80164d4 <__swbuf_r>
 8016242:	6813      	ldr	r3, [r2, #0]
 8016244:	1c58      	adds	r0, r3, #1
 8016246:	6010      	str	r0, [r2, #0]
 8016248:	7019      	strb	r1, [r3, #0]
 801624a:	4608      	mov	r0, r1
 801624c:	bc10      	pop	{r4}
 801624e:	4770      	bx	lr

08016250 <__sfputs_r>:
 8016250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016252:	4606      	mov	r6, r0
 8016254:	460f      	mov	r7, r1
 8016256:	4614      	mov	r4, r2
 8016258:	18d5      	adds	r5, r2, r3
 801625a:	42ac      	cmp	r4, r5
 801625c:	d101      	bne.n	8016262 <__sfputs_r+0x12>
 801625e:	2000      	movs	r0, #0
 8016260:	e007      	b.n	8016272 <__sfputs_r+0x22>
 8016262:	463a      	mov	r2, r7
 8016264:	4630      	mov	r0, r6
 8016266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801626a:	f7ff ffdc 	bl	8016226 <__sfputc_r>
 801626e:	1c43      	adds	r3, r0, #1
 8016270:	d1f3      	bne.n	801625a <__sfputs_r+0xa>
 8016272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016274 <_vfiprintf_r>:
 8016274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016278:	460d      	mov	r5, r1
 801627a:	4614      	mov	r4, r2
 801627c:	4698      	mov	r8, r3
 801627e:	4606      	mov	r6, r0
 8016280:	b09d      	sub	sp, #116	; 0x74
 8016282:	b118      	cbz	r0, 801628c <_vfiprintf_r+0x18>
 8016284:	6983      	ldr	r3, [r0, #24]
 8016286:	b90b      	cbnz	r3, 801628c <_vfiprintf_r+0x18>
 8016288:	f7fd fc00 	bl	8013a8c <__sinit>
 801628c:	4b89      	ldr	r3, [pc, #548]	; (80164b4 <_vfiprintf_r+0x240>)
 801628e:	429d      	cmp	r5, r3
 8016290:	d11b      	bne.n	80162ca <_vfiprintf_r+0x56>
 8016292:	6875      	ldr	r5, [r6, #4]
 8016294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016296:	07d9      	lsls	r1, r3, #31
 8016298:	d405      	bmi.n	80162a6 <_vfiprintf_r+0x32>
 801629a:	89ab      	ldrh	r3, [r5, #12]
 801629c:	059a      	lsls	r2, r3, #22
 801629e:	d402      	bmi.n	80162a6 <_vfiprintf_r+0x32>
 80162a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162a2:	f7fd fcb6 	bl	8013c12 <__retarget_lock_acquire_recursive>
 80162a6:	89ab      	ldrh	r3, [r5, #12]
 80162a8:	071b      	lsls	r3, r3, #28
 80162aa:	d501      	bpl.n	80162b0 <_vfiprintf_r+0x3c>
 80162ac:	692b      	ldr	r3, [r5, #16]
 80162ae:	b9eb      	cbnz	r3, 80162ec <_vfiprintf_r+0x78>
 80162b0:	4629      	mov	r1, r5
 80162b2:	4630      	mov	r0, r6
 80162b4:	f000 f96e 	bl	8016594 <__swsetup_r>
 80162b8:	b1c0      	cbz	r0, 80162ec <_vfiprintf_r+0x78>
 80162ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162bc:	07dc      	lsls	r4, r3, #31
 80162be:	d50e      	bpl.n	80162de <_vfiprintf_r+0x6a>
 80162c0:	f04f 30ff 	mov.w	r0, #4294967295
 80162c4:	b01d      	add	sp, #116	; 0x74
 80162c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ca:	4b7b      	ldr	r3, [pc, #492]	; (80164b8 <_vfiprintf_r+0x244>)
 80162cc:	429d      	cmp	r5, r3
 80162ce:	d101      	bne.n	80162d4 <_vfiprintf_r+0x60>
 80162d0:	68b5      	ldr	r5, [r6, #8]
 80162d2:	e7df      	b.n	8016294 <_vfiprintf_r+0x20>
 80162d4:	4b79      	ldr	r3, [pc, #484]	; (80164bc <_vfiprintf_r+0x248>)
 80162d6:	429d      	cmp	r5, r3
 80162d8:	bf08      	it	eq
 80162da:	68f5      	ldreq	r5, [r6, #12]
 80162dc:	e7da      	b.n	8016294 <_vfiprintf_r+0x20>
 80162de:	89ab      	ldrh	r3, [r5, #12]
 80162e0:	0598      	lsls	r0, r3, #22
 80162e2:	d4ed      	bmi.n	80162c0 <_vfiprintf_r+0x4c>
 80162e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162e6:	f7fd fc95 	bl	8013c14 <__retarget_lock_release_recursive>
 80162ea:	e7e9      	b.n	80162c0 <_vfiprintf_r+0x4c>
 80162ec:	2300      	movs	r3, #0
 80162ee:	9309      	str	r3, [sp, #36]	; 0x24
 80162f0:	2320      	movs	r3, #32
 80162f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80162f6:	2330      	movs	r3, #48	; 0x30
 80162f8:	f04f 0901 	mov.w	r9, #1
 80162fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016300:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80164c0 <_vfiprintf_r+0x24c>
 8016304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016308:	4623      	mov	r3, r4
 801630a:	469a      	mov	sl, r3
 801630c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016310:	b10a      	cbz	r2, 8016316 <_vfiprintf_r+0xa2>
 8016312:	2a25      	cmp	r2, #37	; 0x25
 8016314:	d1f9      	bne.n	801630a <_vfiprintf_r+0x96>
 8016316:	ebba 0b04 	subs.w	fp, sl, r4
 801631a:	d00b      	beq.n	8016334 <_vfiprintf_r+0xc0>
 801631c:	465b      	mov	r3, fp
 801631e:	4622      	mov	r2, r4
 8016320:	4629      	mov	r1, r5
 8016322:	4630      	mov	r0, r6
 8016324:	f7ff ff94 	bl	8016250 <__sfputs_r>
 8016328:	3001      	adds	r0, #1
 801632a:	f000 80aa 	beq.w	8016482 <_vfiprintf_r+0x20e>
 801632e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016330:	445a      	add	r2, fp
 8016332:	9209      	str	r2, [sp, #36]	; 0x24
 8016334:	f89a 3000 	ldrb.w	r3, [sl]
 8016338:	2b00      	cmp	r3, #0
 801633a:	f000 80a2 	beq.w	8016482 <_vfiprintf_r+0x20e>
 801633e:	2300      	movs	r3, #0
 8016340:	f04f 32ff 	mov.w	r2, #4294967295
 8016344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016348:	f10a 0a01 	add.w	sl, sl, #1
 801634c:	9304      	str	r3, [sp, #16]
 801634e:	9307      	str	r3, [sp, #28]
 8016350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016354:	931a      	str	r3, [sp, #104]	; 0x68
 8016356:	4654      	mov	r4, sl
 8016358:	2205      	movs	r2, #5
 801635a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801635e:	4858      	ldr	r0, [pc, #352]	; (80164c0 <_vfiprintf_r+0x24c>)
 8016360:	f7ff f9b8 	bl	80156d4 <memchr>
 8016364:	9a04      	ldr	r2, [sp, #16]
 8016366:	b9d8      	cbnz	r0, 80163a0 <_vfiprintf_r+0x12c>
 8016368:	06d1      	lsls	r1, r2, #27
 801636a:	bf44      	itt	mi
 801636c:	2320      	movmi	r3, #32
 801636e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016372:	0713      	lsls	r3, r2, #28
 8016374:	bf44      	itt	mi
 8016376:	232b      	movmi	r3, #43	; 0x2b
 8016378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801637c:	f89a 3000 	ldrb.w	r3, [sl]
 8016380:	2b2a      	cmp	r3, #42	; 0x2a
 8016382:	d015      	beq.n	80163b0 <_vfiprintf_r+0x13c>
 8016384:	4654      	mov	r4, sl
 8016386:	2000      	movs	r0, #0
 8016388:	f04f 0c0a 	mov.w	ip, #10
 801638c:	9a07      	ldr	r2, [sp, #28]
 801638e:	4621      	mov	r1, r4
 8016390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016394:	3b30      	subs	r3, #48	; 0x30
 8016396:	2b09      	cmp	r3, #9
 8016398:	d94e      	bls.n	8016438 <_vfiprintf_r+0x1c4>
 801639a:	b1b0      	cbz	r0, 80163ca <_vfiprintf_r+0x156>
 801639c:	9207      	str	r2, [sp, #28]
 801639e:	e014      	b.n	80163ca <_vfiprintf_r+0x156>
 80163a0:	eba0 0308 	sub.w	r3, r0, r8
 80163a4:	fa09 f303 	lsl.w	r3, r9, r3
 80163a8:	4313      	orrs	r3, r2
 80163aa:	46a2      	mov	sl, r4
 80163ac:	9304      	str	r3, [sp, #16]
 80163ae:	e7d2      	b.n	8016356 <_vfiprintf_r+0xe2>
 80163b0:	9b03      	ldr	r3, [sp, #12]
 80163b2:	1d19      	adds	r1, r3, #4
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	9103      	str	r1, [sp, #12]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	bfbb      	ittet	lt
 80163bc:	425b      	neglt	r3, r3
 80163be:	f042 0202 	orrlt.w	r2, r2, #2
 80163c2:	9307      	strge	r3, [sp, #28]
 80163c4:	9307      	strlt	r3, [sp, #28]
 80163c6:	bfb8      	it	lt
 80163c8:	9204      	strlt	r2, [sp, #16]
 80163ca:	7823      	ldrb	r3, [r4, #0]
 80163cc:	2b2e      	cmp	r3, #46	; 0x2e
 80163ce:	d10c      	bne.n	80163ea <_vfiprintf_r+0x176>
 80163d0:	7863      	ldrb	r3, [r4, #1]
 80163d2:	2b2a      	cmp	r3, #42	; 0x2a
 80163d4:	d135      	bne.n	8016442 <_vfiprintf_r+0x1ce>
 80163d6:	9b03      	ldr	r3, [sp, #12]
 80163d8:	3402      	adds	r4, #2
 80163da:	1d1a      	adds	r2, r3, #4
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	9203      	str	r2, [sp, #12]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	bfb8      	it	lt
 80163e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80163e8:	9305      	str	r3, [sp, #20]
 80163ea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80164c4 <_vfiprintf_r+0x250>
 80163ee:	2203      	movs	r2, #3
 80163f0:	4650      	mov	r0, sl
 80163f2:	7821      	ldrb	r1, [r4, #0]
 80163f4:	f7ff f96e 	bl	80156d4 <memchr>
 80163f8:	b140      	cbz	r0, 801640c <_vfiprintf_r+0x198>
 80163fa:	2340      	movs	r3, #64	; 0x40
 80163fc:	eba0 000a 	sub.w	r0, r0, sl
 8016400:	fa03 f000 	lsl.w	r0, r3, r0
 8016404:	9b04      	ldr	r3, [sp, #16]
 8016406:	3401      	adds	r4, #1
 8016408:	4303      	orrs	r3, r0
 801640a:	9304      	str	r3, [sp, #16]
 801640c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016410:	2206      	movs	r2, #6
 8016412:	482d      	ldr	r0, [pc, #180]	; (80164c8 <_vfiprintf_r+0x254>)
 8016414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016418:	f7ff f95c 	bl	80156d4 <memchr>
 801641c:	2800      	cmp	r0, #0
 801641e:	d03f      	beq.n	80164a0 <_vfiprintf_r+0x22c>
 8016420:	4b2a      	ldr	r3, [pc, #168]	; (80164cc <_vfiprintf_r+0x258>)
 8016422:	bb1b      	cbnz	r3, 801646c <_vfiprintf_r+0x1f8>
 8016424:	9b03      	ldr	r3, [sp, #12]
 8016426:	3307      	adds	r3, #7
 8016428:	f023 0307 	bic.w	r3, r3, #7
 801642c:	3308      	adds	r3, #8
 801642e:	9303      	str	r3, [sp, #12]
 8016430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016432:	443b      	add	r3, r7
 8016434:	9309      	str	r3, [sp, #36]	; 0x24
 8016436:	e767      	b.n	8016308 <_vfiprintf_r+0x94>
 8016438:	460c      	mov	r4, r1
 801643a:	2001      	movs	r0, #1
 801643c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016440:	e7a5      	b.n	801638e <_vfiprintf_r+0x11a>
 8016442:	2300      	movs	r3, #0
 8016444:	f04f 0c0a 	mov.w	ip, #10
 8016448:	4619      	mov	r1, r3
 801644a:	3401      	adds	r4, #1
 801644c:	9305      	str	r3, [sp, #20]
 801644e:	4620      	mov	r0, r4
 8016450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016454:	3a30      	subs	r2, #48	; 0x30
 8016456:	2a09      	cmp	r2, #9
 8016458:	d903      	bls.n	8016462 <_vfiprintf_r+0x1ee>
 801645a:	2b00      	cmp	r3, #0
 801645c:	d0c5      	beq.n	80163ea <_vfiprintf_r+0x176>
 801645e:	9105      	str	r1, [sp, #20]
 8016460:	e7c3      	b.n	80163ea <_vfiprintf_r+0x176>
 8016462:	4604      	mov	r4, r0
 8016464:	2301      	movs	r3, #1
 8016466:	fb0c 2101 	mla	r1, ip, r1, r2
 801646a:	e7f0      	b.n	801644e <_vfiprintf_r+0x1da>
 801646c:	ab03      	add	r3, sp, #12
 801646e:	9300      	str	r3, [sp, #0]
 8016470:	462a      	mov	r2, r5
 8016472:	4630      	mov	r0, r6
 8016474:	4b16      	ldr	r3, [pc, #88]	; (80164d0 <_vfiprintf_r+0x25c>)
 8016476:	a904      	add	r1, sp, #16
 8016478:	f7fd fd6e 	bl	8013f58 <_printf_float>
 801647c:	4607      	mov	r7, r0
 801647e:	1c78      	adds	r0, r7, #1
 8016480:	d1d6      	bne.n	8016430 <_vfiprintf_r+0x1bc>
 8016482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016484:	07d9      	lsls	r1, r3, #31
 8016486:	d405      	bmi.n	8016494 <_vfiprintf_r+0x220>
 8016488:	89ab      	ldrh	r3, [r5, #12]
 801648a:	059a      	lsls	r2, r3, #22
 801648c:	d402      	bmi.n	8016494 <_vfiprintf_r+0x220>
 801648e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016490:	f7fd fbc0 	bl	8013c14 <__retarget_lock_release_recursive>
 8016494:	89ab      	ldrh	r3, [r5, #12]
 8016496:	065b      	lsls	r3, r3, #25
 8016498:	f53f af12 	bmi.w	80162c0 <_vfiprintf_r+0x4c>
 801649c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801649e:	e711      	b.n	80162c4 <_vfiprintf_r+0x50>
 80164a0:	ab03      	add	r3, sp, #12
 80164a2:	9300      	str	r3, [sp, #0]
 80164a4:	462a      	mov	r2, r5
 80164a6:	4630      	mov	r0, r6
 80164a8:	4b09      	ldr	r3, [pc, #36]	; (80164d0 <_vfiprintf_r+0x25c>)
 80164aa:	a904      	add	r1, sp, #16
 80164ac:	f7fd fff0 	bl	8014490 <_printf_i>
 80164b0:	e7e4      	b.n	801647c <_vfiprintf_r+0x208>
 80164b2:	bf00      	nop
 80164b4:	0802fcb4 	.word	0x0802fcb4
 80164b8:	0802fcd4 	.word	0x0802fcd4
 80164bc:	0802fc94 	.word	0x0802fc94
 80164c0:	0802ff14 	.word	0x0802ff14
 80164c4:	0802ff1a 	.word	0x0802ff1a
 80164c8:	0802ff1e 	.word	0x0802ff1e
 80164cc:	08013f59 	.word	0x08013f59
 80164d0:	08016251 	.word	0x08016251

080164d4 <__swbuf_r>:
 80164d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164d6:	460e      	mov	r6, r1
 80164d8:	4614      	mov	r4, r2
 80164da:	4605      	mov	r5, r0
 80164dc:	b118      	cbz	r0, 80164e6 <__swbuf_r+0x12>
 80164de:	6983      	ldr	r3, [r0, #24]
 80164e0:	b90b      	cbnz	r3, 80164e6 <__swbuf_r+0x12>
 80164e2:	f7fd fad3 	bl	8013a8c <__sinit>
 80164e6:	4b21      	ldr	r3, [pc, #132]	; (801656c <__swbuf_r+0x98>)
 80164e8:	429c      	cmp	r4, r3
 80164ea:	d12b      	bne.n	8016544 <__swbuf_r+0x70>
 80164ec:	686c      	ldr	r4, [r5, #4]
 80164ee:	69a3      	ldr	r3, [r4, #24]
 80164f0:	60a3      	str	r3, [r4, #8]
 80164f2:	89a3      	ldrh	r3, [r4, #12]
 80164f4:	071a      	lsls	r2, r3, #28
 80164f6:	d52f      	bpl.n	8016558 <__swbuf_r+0x84>
 80164f8:	6923      	ldr	r3, [r4, #16]
 80164fa:	b36b      	cbz	r3, 8016558 <__swbuf_r+0x84>
 80164fc:	6923      	ldr	r3, [r4, #16]
 80164fe:	6820      	ldr	r0, [r4, #0]
 8016500:	b2f6      	uxtb	r6, r6
 8016502:	1ac0      	subs	r0, r0, r3
 8016504:	6963      	ldr	r3, [r4, #20]
 8016506:	4637      	mov	r7, r6
 8016508:	4283      	cmp	r3, r0
 801650a:	dc04      	bgt.n	8016516 <__swbuf_r+0x42>
 801650c:	4621      	mov	r1, r4
 801650e:	4628      	mov	r0, r5
 8016510:	f7ff f88e 	bl	8015630 <_fflush_r>
 8016514:	bb30      	cbnz	r0, 8016564 <__swbuf_r+0x90>
 8016516:	68a3      	ldr	r3, [r4, #8]
 8016518:	3001      	adds	r0, #1
 801651a:	3b01      	subs	r3, #1
 801651c:	60a3      	str	r3, [r4, #8]
 801651e:	6823      	ldr	r3, [r4, #0]
 8016520:	1c5a      	adds	r2, r3, #1
 8016522:	6022      	str	r2, [r4, #0]
 8016524:	701e      	strb	r6, [r3, #0]
 8016526:	6963      	ldr	r3, [r4, #20]
 8016528:	4283      	cmp	r3, r0
 801652a:	d004      	beq.n	8016536 <__swbuf_r+0x62>
 801652c:	89a3      	ldrh	r3, [r4, #12]
 801652e:	07db      	lsls	r3, r3, #31
 8016530:	d506      	bpl.n	8016540 <__swbuf_r+0x6c>
 8016532:	2e0a      	cmp	r6, #10
 8016534:	d104      	bne.n	8016540 <__swbuf_r+0x6c>
 8016536:	4621      	mov	r1, r4
 8016538:	4628      	mov	r0, r5
 801653a:	f7ff f879 	bl	8015630 <_fflush_r>
 801653e:	b988      	cbnz	r0, 8016564 <__swbuf_r+0x90>
 8016540:	4638      	mov	r0, r7
 8016542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016544:	4b0a      	ldr	r3, [pc, #40]	; (8016570 <__swbuf_r+0x9c>)
 8016546:	429c      	cmp	r4, r3
 8016548:	d101      	bne.n	801654e <__swbuf_r+0x7a>
 801654a:	68ac      	ldr	r4, [r5, #8]
 801654c:	e7cf      	b.n	80164ee <__swbuf_r+0x1a>
 801654e:	4b09      	ldr	r3, [pc, #36]	; (8016574 <__swbuf_r+0xa0>)
 8016550:	429c      	cmp	r4, r3
 8016552:	bf08      	it	eq
 8016554:	68ec      	ldreq	r4, [r5, #12]
 8016556:	e7ca      	b.n	80164ee <__swbuf_r+0x1a>
 8016558:	4621      	mov	r1, r4
 801655a:	4628      	mov	r0, r5
 801655c:	f000 f81a 	bl	8016594 <__swsetup_r>
 8016560:	2800      	cmp	r0, #0
 8016562:	d0cb      	beq.n	80164fc <__swbuf_r+0x28>
 8016564:	f04f 37ff 	mov.w	r7, #4294967295
 8016568:	e7ea      	b.n	8016540 <__swbuf_r+0x6c>
 801656a:	bf00      	nop
 801656c:	0802fcb4 	.word	0x0802fcb4
 8016570:	0802fcd4 	.word	0x0802fcd4
 8016574:	0802fc94 	.word	0x0802fc94

08016578 <__ascii_wctomb>:
 8016578:	4603      	mov	r3, r0
 801657a:	4608      	mov	r0, r1
 801657c:	b141      	cbz	r1, 8016590 <__ascii_wctomb+0x18>
 801657e:	2aff      	cmp	r2, #255	; 0xff
 8016580:	d904      	bls.n	801658c <__ascii_wctomb+0x14>
 8016582:	228a      	movs	r2, #138	; 0x8a
 8016584:	f04f 30ff 	mov.w	r0, #4294967295
 8016588:	601a      	str	r2, [r3, #0]
 801658a:	4770      	bx	lr
 801658c:	2001      	movs	r0, #1
 801658e:	700a      	strb	r2, [r1, #0]
 8016590:	4770      	bx	lr
	...

08016594 <__swsetup_r>:
 8016594:	4b32      	ldr	r3, [pc, #200]	; (8016660 <__swsetup_r+0xcc>)
 8016596:	b570      	push	{r4, r5, r6, lr}
 8016598:	681d      	ldr	r5, [r3, #0]
 801659a:	4606      	mov	r6, r0
 801659c:	460c      	mov	r4, r1
 801659e:	b125      	cbz	r5, 80165aa <__swsetup_r+0x16>
 80165a0:	69ab      	ldr	r3, [r5, #24]
 80165a2:	b913      	cbnz	r3, 80165aa <__swsetup_r+0x16>
 80165a4:	4628      	mov	r0, r5
 80165a6:	f7fd fa71 	bl	8013a8c <__sinit>
 80165aa:	4b2e      	ldr	r3, [pc, #184]	; (8016664 <__swsetup_r+0xd0>)
 80165ac:	429c      	cmp	r4, r3
 80165ae:	d10f      	bne.n	80165d0 <__swsetup_r+0x3c>
 80165b0:	686c      	ldr	r4, [r5, #4]
 80165b2:	89a3      	ldrh	r3, [r4, #12]
 80165b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165b8:	0719      	lsls	r1, r3, #28
 80165ba:	d42c      	bmi.n	8016616 <__swsetup_r+0x82>
 80165bc:	06dd      	lsls	r5, r3, #27
 80165be:	d411      	bmi.n	80165e4 <__swsetup_r+0x50>
 80165c0:	2309      	movs	r3, #9
 80165c2:	6033      	str	r3, [r6, #0]
 80165c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80165c8:	f04f 30ff 	mov.w	r0, #4294967295
 80165cc:	81a3      	strh	r3, [r4, #12]
 80165ce:	e03e      	b.n	801664e <__swsetup_r+0xba>
 80165d0:	4b25      	ldr	r3, [pc, #148]	; (8016668 <__swsetup_r+0xd4>)
 80165d2:	429c      	cmp	r4, r3
 80165d4:	d101      	bne.n	80165da <__swsetup_r+0x46>
 80165d6:	68ac      	ldr	r4, [r5, #8]
 80165d8:	e7eb      	b.n	80165b2 <__swsetup_r+0x1e>
 80165da:	4b24      	ldr	r3, [pc, #144]	; (801666c <__swsetup_r+0xd8>)
 80165dc:	429c      	cmp	r4, r3
 80165de:	bf08      	it	eq
 80165e0:	68ec      	ldreq	r4, [r5, #12]
 80165e2:	e7e6      	b.n	80165b2 <__swsetup_r+0x1e>
 80165e4:	0758      	lsls	r0, r3, #29
 80165e6:	d512      	bpl.n	801660e <__swsetup_r+0x7a>
 80165e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80165ea:	b141      	cbz	r1, 80165fe <__swsetup_r+0x6a>
 80165ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165f0:	4299      	cmp	r1, r3
 80165f2:	d002      	beq.n	80165fa <__swsetup_r+0x66>
 80165f4:	4630      	mov	r0, r6
 80165f6:	f7fd fb35 	bl	8013c64 <_free_r>
 80165fa:	2300      	movs	r3, #0
 80165fc:	6363      	str	r3, [r4, #52]	; 0x34
 80165fe:	89a3      	ldrh	r3, [r4, #12]
 8016600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016604:	81a3      	strh	r3, [r4, #12]
 8016606:	2300      	movs	r3, #0
 8016608:	6063      	str	r3, [r4, #4]
 801660a:	6923      	ldr	r3, [r4, #16]
 801660c:	6023      	str	r3, [r4, #0]
 801660e:	89a3      	ldrh	r3, [r4, #12]
 8016610:	f043 0308 	orr.w	r3, r3, #8
 8016614:	81a3      	strh	r3, [r4, #12]
 8016616:	6923      	ldr	r3, [r4, #16]
 8016618:	b94b      	cbnz	r3, 801662e <__swsetup_r+0x9a>
 801661a:	89a3      	ldrh	r3, [r4, #12]
 801661c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016624:	d003      	beq.n	801662e <__swsetup_r+0x9a>
 8016626:	4621      	mov	r1, r4
 8016628:	4630      	mov	r0, r6
 801662a:	f000 f84d 	bl	80166c8 <__smakebuf_r>
 801662e:	89a0      	ldrh	r0, [r4, #12]
 8016630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016634:	f010 0301 	ands.w	r3, r0, #1
 8016638:	d00a      	beq.n	8016650 <__swsetup_r+0xbc>
 801663a:	2300      	movs	r3, #0
 801663c:	60a3      	str	r3, [r4, #8]
 801663e:	6963      	ldr	r3, [r4, #20]
 8016640:	425b      	negs	r3, r3
 8016642:	61a3      	str	r3, [r4, #24]
 8016644:	6923      	ldr	r3, [r4, #16]
 8016646:	b943      	cbnz	r3, 801665a <__swsetup_r+0xc6>
 8016648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801664c:	d1ba      	bne.n	80165c4 <__swsetup_r+0x30>
 801664e:	bd70      	pop	{r4, r5, r6, pc}
 8016650:	0781      	lsls	r1, r0, #30
 8016652:	bf58      	it	pl
 8016654:	6963      	ldrpl	r3, [r4, #20]
 8016656:	60a3      	str	r3, [r4, #8]
 8016658:	e7f4      	b.n	8016644 <__swsetup_r+0xb0>
 801665a:	2000      	movs	r0, #0
 801665c:	e7f7      	b.n	801664e <__swsetup_r+0xba>
 801665e:	bf00      	nop
 8016660:	2000012c 	.word	0x2000012c
 8016664:	0802fcb4 	.word	0x0802fcb4
 8016668:	0802fcd4 	.word	0x0802fcd4
 801666c:	0802fc94 	.word	0x0802fc94

08016670 <abort>:
 8016670:	2006      	movs	r0, #6
 8016672:	b508      	push	{r3, lr}
 8016674:	f000 f898 	bl	80167a8 <raise>
 8016678:	2001      	movs	r0, #1
 801667a:	f7ec fc56 	bl	8002f2a <_exit>

0801667e <__swhatbuf_r>:
 801667e:	b570      	push	{r4, r5, r6, lr}
 8016680:	460e      	mov	r6, r1
 8016682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016686:	4614      	mov	r4, r2
 8016688:	2900      	cmp	r1, #0
 801668a:	461d      	mov	r5, r3
 801668c:	b096      	sub	sp, #88	; 0x58
 801668e:	da08      	bge.n	80166a2 <__swhatbuf_r+0x24>
 8016690:	2200      	movs	r2, #0
 8016692:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016696:	602a      	str	r2, [r5, #0]
 8016698:	061a      	lsls	r2, r3, #24
 801669a:	d410      	bmi.n	80166be <__swhatbuf_r+0x40>
 801669c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166a0:	e00e      	b.n	80166c0 <__swhatbuf_r+0x42>
 80166a2:	466a      	mov	r2, sp
 80166a4:	f000 f89c 	bl	80167e0 <_fstat_r>
 80166a8:	2800      	cmp	r0, #0
 80166aa:	dbf1      	blt.n	8016690 <__swhatbuf_r+0x12>
 80166ac:	9a01      	ldr	r2, [sp, #4]
 80166ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166b6:	425a      	negs	r2, r3
 80166b8:	415a      	adcs	r2, r3
 80166ba:	602a      	str	r2, [r5, #0]
 80166bc:	e7ee      	b.n	801669c <__swhatbuf_r+0x1e>
 80166be:	2340      	movs	r3, #64	; 0x40
 80166c0:	2000      	movs	r0, #0
 80166c2:	6023      	str	r3, [r4, #0]
 80166c4:	b016      	add	sp, #88	; 0x58
 80166c6:	bd70      	pop	{r4, r5, r6, pc}

080166c8 <__smakebuf_r>:
 80166c8:	898b      	ldrh	r3, [r1, #12]
 80166ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166cc:	079d      	lsls	r5, r3, #30
 80166ce:	4606      	mov	r6, r0
 80166d0:	460c      	mov	r4, r1
 80166d2:	d507      	bpl.n	80166e4 <__smakebuf_r+0x1c>
 80166d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166d8:	6023      	str	r3, [r4, #0]
 80166da:	6123      	str	r3, [r4, #16]
 80166dc:	2301      	movs	r3, #1
 80166de:	6163      	str	r3, [r4, #20]
 80166e0:	b002      	add	sp, #8
 80166e2:	bd70      	pop	{r4, r5, r6, pc}
 80166e4:	466a      	mov	r2, sp
 80166e6:	ab01      	add	r3, sp, #4
 80166e8:	f7ff ffc9 	bl	801667e <__swhatbuf_r>
 80166ec:	9900      	ldr	r1, [sp, #0]
 80166ee:	4605      	mov	r5, r0
 80166f0:	4630      	mov	r0, r6
 80166f2:	f7fd fb1f 	bl	8013d34 <_malloc_r>
 80166f6:	b948      	cbnz	r0, 801670c <__smakebuf_r+0x44>
 80166f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166fc:	059a      	lsls	r2, r3, #22
 80166fe:	d4ef      	bmi.n	80166e0 <__smakebuf_r+0x18>
 8016700:	f023 0303 	bic.w	r3, r3, #3
 8016704:	f043 0302 	orr.w	r3, r3, #2
 8016708:	81a3      	strh	r3, [r4, #12]
 801670a:	e7e3      	b.n	80166d4 <__smakebuf_r+0xc>
 801670c:	4b0d      	ldr	r3, [pc, #52]	; (8016744 <__smakebuf_r+0x7c>)
 801670e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016710:	89a3      	ldrh	r3, [r4, #12]
 8016712:	6020      	str	r0, [r4, #0]
 8016714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016718:	81a3      	strh	r3, [r4, #12]
 801671a:	9b00      	ldr	r3, [sp, #0]
 801671c:	6120      	str	r0, [r4, #16]
 801671e:	6163      	str	r3, [r4, #20]
 8016720:	9b01      	ldr	r3, [sp, #4]
 8016722:	b15b      	cbz	r3, 801673c <__smakebuf_r+0x74>
 8016724:	4630      	mov	r0, r6
 8016726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801672a:	f000 f86b 	bl	8016804 <_isatty_r>
 801672e:	b128      	cbz	r0, 801673c <__smakebuf_r+0x74>
 8016730:	89a3      	ldrh	r3, [r4, #12]
 8016732:	f023 0303 	bic.w	r3, r3, #3
 8016736:	f043 0301 	orr.w	r3, r3, #1
 801673a:	81a3      	strh	r3, [r4, #12]
 801673c:	89a0      	ldrh	r0, [r4, #12]
 801673e:	4305      	orrs	r5, r0
 8016740:	81a5      	strh	r5, [r4, #12]
 8016742:	e7cd      	b.n	80166e0 <__smakebuf_r+0x18>
 8016744:	08013a25 	.word	0x08013a25

08016748 <_malloc_usable_size_r>:
 8016748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801674c:	1f18      	subs	r0, r3, #4
 801674e:	2b00      	cmp	r3, #0
 8016750:	bfbc      	itt	lt
 8016752:	580b      	ldrlt	r3, [r1, r0]
 8016754:	18c0      	addlt	r0, r0, r3
 8016756:	4770      	bx	lr

08016758 <_raise_r>:
 8016758:	291f      	cmp	r1, #31
 801675a:	b538      	push	{r3, r4, r5, lr}
 801675c:	4604      	mov	r4, r0
 801675e:	460d      	mov	r5, r1
 8016760:	d904      	bls.n	801676c <_raise_r+0x14>
 8016762:	2316      	movs	r3, #22
 8016764:	6003      	str	r3, [r0, #0]
 8016766:	f04f 30ff 	mov.w	r0, #4294967295
 801676a:	bd38      	pop	{r3, r4, r5, pc}
 801676c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801676e:	b112      	cbz	r2, 8016776 <_raise_r+0x1e>
 8016770:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016774:	b94b      	cbnz	r3, 801678a <_raise_r+0x32>
 8016776:	4620      	mov	r0, r4
 8016778:	f000 f830 	bl	80167dc <_getpid_r>
 801677c:	462a      	mov	r2, r5
 801677e:	4601      	mov	r1, r0
 8016780:	4620      	mov	r0, r4
 8016782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016786:	f000 b817 	b.w	80167b8 <_kill_r>
 801678a:	2b01      	cmp	r3, #1
 801678c:	d00a      	beq.n	80167a4 <_raise_r+0x4c>
 801678e:	1c59      	adds	r1, r3, #1
 8016790:	d103      	bne.n	801679a <_raise_r+0x42>
 8016792:	2316      	movs	r3, #22
 8016794:	6003      	str	r3, [r0, #0]
 8016796:	2001      	movs	r0, #1
 8016798:	e7e7      	b.n	801676a <_raise_r+0x12>
 801679a:	2400      	movs	r4, #0
 801679c:	4628      	mov	r0, r5
 801679e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80167a2:	4798      	blx	r3
 80167a4:	2000      	movs	r0, #0
 80167a6:	e7e0      	b.n	801676a <_raise_r+0x12>

080167a8 <raise>:
 80167a8:	4b02      	ldr	r3, [pc, #8]	; (80167b4 <raise+0xc>)
 80167aa:	4601      	mov	r1, r0
 80167ac:	6818      	ldr	r0, [r3, #0]
 80167ae:	f7ff bfd3 	b.w	8016758 <_raise_r>
 80167b2:	bf00      	nop
 80167b4:	2000012c 	.word	0x2000012c

080167b8 <_kill_r>:
 80167b8:	b538      	push	{r3, r4, r5, lr}
 80167ba:	2300      	movs	r3, #0
 80167bc:	4d06      	ldr	r5, [pc, #24]	; (80167d8 <_kill_r+0x20>)
 80167be:	4604      	mov	r4, r0
 80167c0:	4608      	mov	r0, r1
 80167c2:	4611      	mov	r1, r2
 80167c4:	602b      	str	r3, [r5, #0]
 80167c6:	f7ec fba0 	bl	8002f0a <_kill>
 80167ca:	1c43      	adds	r3, r0, #1
 80167cc:	d102      	bne.n	80167d4 <_kill_r+0x1c>
 80167ce:	682b      	ldr	r3, [r5, #0]
 80167d0:	b103      	cbz	r3, 80167d4 <_kill_r+0x1c>
 80167d2:	6023      	str	r3, [r4, #0]
 80167d4:	bd38      	pop	{r3, r4, r5, pc}
 80167d6:	bf00      	nop
 80167d8:	200025a4 	.word	0x200025a4

080167dc <_getpid_r>:
 80167dc:	f7ec bb8e 	b.w	8002efc <_getpid>

080167e0 <_fstat_r>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	2300      	movs	r3, #0
 80167e4:	4d06      	ldr	r5, [pc, #24]	; (8016800 <_fstat_r+0x20>)
 80167e6:	4604      	mov	r4, r0
 80167e8:	4608      	mov	r0, r1
 80167ea:	4611      	mov	r1, r2
 80167ec:	602b      	str	r3, [r5, #0]
 80167ee:	f7ec fbea 	bl	8002fc6 <_fstat>
 80167f2:	1c43      	adds	r3, r0, #1
 80167f4:	d102      	bne.n	80167fc <_fstat_r+0x1c>
 80167f6:	682b      	ldr	r3, [r5, #0]
 80167f8:	b103      	cbz	r3, 80167fc <_fstat_r+0x1c>
 80167fa:	6023      	str	r3, [r4, #0]
 80167fc:	bd38      	pop	{r3, r4, r5, pc}
 80167fe:	bf00      	nop
 8016800:	200025a4 	.word	0x200025a4

08016804 <_isatty_r>:
 8016804:	b538      	push	{r3, r4, r5, lr}
 8016806:	2300      	movs	r3, #0
 8016808:	4d05      	ldr	r5, [pc, #20]	; (8016820 <_isatty_r+0x1c>)
 801680a:	4604      	mov	r4, r0
 801680c:	4608      	mov	r0, r1
 801680e:	602b      	str	r3, [r5, #0]
 8016810:	f7ec fbe8 	bl	8002fe4 <_isatty>
 8016814:	1c43      	adds	r3, r0, #1
 8016816:	d102      	bne.n	801681e <_isatty_r+0x1a>
 8016818:	682b      	ldr	r3, [r5, #0]
 801681a:	b103      	cbz	r3, 801681e <_isatty_r+0x1a>
 801681c:	6023      	str	r3, [r4, #0]
 801681e:	bd38      	pop	{r3, r4, r5, pc}
 8016820:	200025a4 	.word	0x200025a4

08016824 <_init>:
 8016824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016826:	bf00      	nop
 8016828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801682a:	bc08      	pop	{r3}
 801682c:	469e      	mov	lr, r3
 801682e:	4770      	bx	lr

08016830 <_fini>:
 8016830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016832:	bf00      	nop
 8016834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016836:	bc08      	pop	{r3}
 8016838:	469e      	mov	lr, r3
 801683a:	4770      	bx	lr
