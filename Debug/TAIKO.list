
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc0  08002fc0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc0  08002fc0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc0  08002fc0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000014  08002fdc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002fdc  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a865  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196c  00000000  00000000  0002a8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195cc  00000000  00000000  0002d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c44e  00000000  00000000  00046ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097387  00000000  00000000  00053322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea6a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003170  00000000  00000000  000ea6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000014 	.word	0x20000014
 8000200:	00000000 	.word	0x00000000
 8000204:	08002f84 	.word	0x08002f84

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000018 	.word	0x20000018
 8000220:	08002f84 	.word	0x08002f84

08000224 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8000228:	f000 f900 	bl	800042c <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 800022c:	f000 f946 	bl	80004bc <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8000230:	2001      	movs	r0, #1
 8000232:	f000 fae1 	bl	80007f8 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8000236:	20cb      	movs	r0, #203	; 0xcb
 8000238:	f000 fade 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 800023c:	2039      	movs	r0, #57	; 0x39
 800023e:	f000 faea 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8000242:	202c      	movs	r0, #44	; 0x2c
 8000244:	f000 fae7 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fae4 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800024e:	2034      	movs	r0, #52	; 0x34
 8000250:	f000 fae1 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8000254:	2002      	movs	r0, #2
 8000256:	f000 fade 	bl	8000816 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800025a:	20cf      	movs	r0, #207	; 0xcf
 800025c:	f000 facc 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fad8 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000266:	20c1      	movs	r0, #193	; 0xc1
 8000268:	f000 fad5 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 800026c:	2030      	movs	r0, #48	; 0x30
 800026e:	f000 fad2 	bl	8000816 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8000272:	20e8      	movs	r0, #232	; 0xe8
 8000274:	f000 fac0 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000278:	2085      	movs	r0, #133	; 0x85
 800027a:	f000 facc 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800027e:	2000      	movs	r0, #0
 8000280:	f000 fac9 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000284:	2078      	movs	r0, #120	; 0x78
 8000286:	f000 fac6 	bl	8000816 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 800028a:	20ea      	movs	r0, #234	; 0xea
 800028c:	f000 fab4 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000290:	2000      	movs	r0, #0
 8000292:	f000 fac0 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000296:	2000      	movs	r0, #0
 8000298:	f000 fabd 	bl	8000816 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 800029c:	20ed      	movs	r0, #237	; 0xed
 800029e:	f000 faab 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80002a2:	2064      	movs	r0, #100	; 0x64
 80002a4:	f000 fab7 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80002a8:	2003      	movs	r0, #3
 80002aa:	f000 fab4 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80002ae:	2012      	movs	r0, #18
 80002b0:	f000 fab1 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80002b4:	2081      	movs	r0, #129	; 0x81
 80002b6:	f000 faae 	bl	8000816 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80002ba:	20f7      	movs	r0, #247	; 0xf7
 80002bc:	f000 fa9c 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80002c0:	2020      	movs	r0, #32
 80002c2:	f000 faa8 	bl	8000816 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80002c6:	20c0      	movs	r0, #192	; 0xc0
 80002c8:	f000 fa96 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80002cc:	2010      	movs	r0, #16
 80002ce:	f000 faa2 	bl	8000816 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80002d2:	20c1      	movs	r0, #193	; 0xc1
 80002d4:	f000 fa90 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80002d8:	2010      	movs	r0, #16
 80002da:	f000 fa9c 	bl	8000816 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 80002de:	20c5      	movs	r0, #197	; 0xc5
 80002e0:	f000 fa8a 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 80002e4:	203e      	movs	r0, #62	; 0x3e
 80002e6:	f000 fa96 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 80002ea:	2028      	movs	r0, #40	; 0x28
 80002ec:	f000 fa93 	bl	8000816 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 80002f0:	20c7      	movs	r0, #199	; 0xc7
 80002f2:	f000 fa81 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 80002f6:	2086      	movs	r0, #134	; 0x86
 80002f8:	f000 fa8d 	bl	8000816 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 80002fc:	2036      	movs	r0, #54	; 0x36
 80002fe:	f000 fa7b 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8000302:	2048      	movs	r0, #72	; 0x48
 8000304:	f000 fa87 	bl	8000816 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8000308:	203a      	movs	r0, #58	; 0x3a
 800030a:	f000 fa75 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800030e:	2055      	movs	r0, #85	; 0x55
 8000310:	f000 fa81 	bl	8000816 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8000314:	20b1      	movs	r0, #177	; 0xb1
 8000316:	f000 fa6f 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800031a:	2000      	movs	r0, #0
 800031c:	f000 fa7b 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8000320:	2018      	movs	r0, #24
 8000322:	f000 fa78 	bl	8000816 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8000326:	20b6      	movs	r0, #182	; 0xb6
 8000328:	f000 fa66 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800032c:	2008      	movs	r0, #8
 800032e:	f000 fa72 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8000332:	2082      	movs	r0, #130	; 0x82
 8000334:	f000 fa6f 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8000338:	2027      	movs	r0, #39	; 0x27
 800033a:	f000 fa6c 	bl	8000816 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800033e:	20f2      	movs	r0, #242	; 0xf2
 8000340:	f000 fa5a 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fa66 	bl	8000816 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800034a:	2026      	movs	r0, #38	; 0x26
 800034c:	f000 fa54 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8000350:	2001      	movs	r0, #1
 8000352:	f000 fa60 	bl	8000816 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8000356:	20e0      	movs	r0, #224	; 0xe0
 8000358:	f000 fa4e 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800035c:	200f      	movs	r0, #15
 800035e:	f000 fa5a 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000362:	2031      	movs	r0, #49	; 0x31
 8000364:	f000 fa57 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000368:	202b      	movs	r0, #43	; 0x2b
 800036a:	f000 fa54 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800036e:	200c      	movs	r0, #12
 8000370:	f000 fa51 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000374:	200e      	movs	r0, #14
 8000376:	f000 fa4e 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800037a:	2008      	movs	r0, #8
 800037c:	f000 fa4b 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8000380:	204e      	movs	r0, #78	; 0x4e
 8000382:	f000 fa48 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8000386:	20f1      	movs	r0, #241	; 0xf1
 8000388:	f000 fa45 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 800038c:	2037      	movs	r0, #55	; 0x37
 800038e:	f000 fa42 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000392:	2007      	movs	r0, #7
 8000394:	f000 fa3f 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000398:	2010      	movs	r0, #16
 800039a:	f000 fa3c 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800039e:	2003      	movs	r0, #3
 80003a0:	f000 fa39 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80003a4:	200e      	movs	r0, #14
 80003a6:	f000 fa36 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80003aa:	2009      	movs	r0, #9
 80003ac:	f000 fa33 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 fa30 	bl	8000816 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80003b6:	20e1      	movs	r0, #225	; 0xe1
 80003b8:	f000 fa1e 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80003bc:	2000      	movs	r0, #0
 80003be:	f000 fa2a 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80003c2:	200e      	movs	r0, #14
 80003c4:	f000 fa27 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80003c8:	2014      	movs	r0, #20
 80003ca:	f000 fa24 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80003ce:	2003      	movs	r0, #3
 80003d0:	f000 fa21 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80003d4:	2011      	movs	r0, #17
 80003d6:	f000 fa1e 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80003da:	2007      	movs	r0, #7
 80003dc:	f000 fa1b 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80003e0:	2031      	movs	r0, #49	; 0x31
 80003e2:	f000 fa18 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 80003e6:	20c1      	movs	r0, #193	; 0xc1
 80003e8:	f000 fa15 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 80003ec:	2048      	movs	r0, #72	; 0x48
 80003ee:	f000 fa12 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80003f2:	2008      	movs	r0, #8
 80003f4:	f000 fa0f 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80003f8:	200f      	movs	r0, #15
 80003fa:	f000 fa0c 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80003fe:	200c      	movs	r0, #12
 8000400:	f000 fa09 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8000404:	2031      	movs	r0, #49	; 0x31
 8000406:	f000 fa06 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800040a:	2036      	movs	r0, #54	; 0x36
 800040c:	f000 fa03 	bl	8000816 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000410:	200f      	movs	r0, #15
 8000412:	f000 fa00 	bl	8000816 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8000416:	2011      	movs	r0, #17
 8000418:	f000 f9ee 	bl	80007f8 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800041c:	2029      	movs	r0, #41	; 0x29
 800041e:	f000 f9eb 	bl	80007f8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8000422:	202c      	movs	r0, #44	; 0x2c
 8000424:	f000 f9f7 	bl	8000816 <ILI9341_Send_Data>
}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}

0800042c <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000432:	4a18      	ldr	r2, [pc, #96]	; (8000494 <ILI9341_SPI_Init+0x68>)
 8000434:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8000436:	4b16      	ldr	r3, [pc, #88]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800043c:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 800043e:	4b14      	ldr	r3, [pc, #80]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <ILI9341_SPI_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8000456:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800045c:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000460:	2200      	movs	r2, #0
 8000462:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000466:	2200      	movs	r2, #0
 8000468:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <ILI9341_SPI_Init+0x64>)
 800046c:	2200      	movs	r2, #0
 800046e:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 8000476:	4b06      	ldr	r3, [pc, #24]	; (8000490 <ILI9341_SPI_Init+0x64>)
 8000478:	220a      	movs	r2, #10
 800047a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <ILI9341_SPI_Init+0x64>)
 800047e:	f001 fcaf 	bl	8001de0 <HAL_SPI_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <ILI9341_SPI_Init+0x60>
		Error_Handler();
 8000488:	f000 fc9e 	bl	8000dc8 <Error_Handler>
	}
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000030 	.word	0x20000030
 8000494:	40003800 	.word	0x40003800

08000498 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80004a2:	1df9      	adds	r1, r7, #7
 80004a4:	2301      	movs	r3, #1
 80004a6:	2201      	movs	r2, #1
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <ILI9341_SPI_Send+0x20>)
 80004aa:	f001 fd1d 	bl	8001ee8 <HAL_SPI_Transmit>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000030 	.word	0x20000030

080004bc <ILI9341_Reset>:
		}

	}
}

void ILI9341_Reset() {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	RESET_ON;
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c6:	4810      	ldr	r0, [pc, #64]	; (8000508 <ILI9341_Reset+0x4c>)
 80004c8:	f001 f894 	bl	80015f4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80004cc:	2032      	movs	r0, #50	; 0x32
 80004ce:	f000 fdf5 	bl	80010bc <HAL_Delay>
	RESET_OFF;
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d8:	480b      	ldr	r0, [pc, #44]	; (8000508 <ILI9341_Reset+0x4c>)
 80004da:	f001 f88b 	bl	80015f4 <HAL_GPIO_WritePin>
	CS_ON;
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <ILI9341_Reset+0x4c>)
 80004e6:	f001 f885 	bl	80015f4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80004ea:	2032      	movs	r0, #50	; 0x32
 80004ec:	f000 fde6 	bl	80010bc <HAL_Delay>
	ILI9341_Send_Command(0x01);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 f981 	bl	80007f8 <ILI9341_Send_Command>
	CS_OFF;
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <ILI9341_Reset+0x4c>)
 80004fe:	f001 f879 	bl	80015f4 <HAL_GPIO_WritePin>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010c00 	.word	0x40010c00

0800050c <ILI9341_SPI_Send_32>:
		Y_SIZE = 240;
		break;
	}
}

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8000518:	2200      	movs	r2, #0
 800051a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051e:	4817      	ldr	r0, [pc, #92]	; (800057c <ILI9341_SPI_Send_32+0x70>)
 8000520:	f001 f868 	bl	80015f4 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800052a:	4814      	ldr	r0, [pc, #80]	; (800057c <ILI9341_SPI_Send_32+0x70>)
 800052c:	f001 f862 	bl	80015f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffb0 	bl	8000498 <ILI9341_SPI_Send>

	DC_DATA;
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053e:	480f      	ldr	r0, [pc, #60]	; (800057c <ILI9341_SPI_Send_32+0x70>)
 8000540:	f001 f858 	bl	80015f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	0e1b      	lsrs	r3, r3, #24
 8000548:	b2db      	uxtb	r3, r3
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff ffa4 	bl	8000498 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff9e 	bl	8000498 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	0a1b      	lsrs	r3, r3, #8
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff98 	bl	8000498 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff93 	bl	8000498 <ILI9341_SPI_Send>

}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010c00 	.word	0x40010c00

08000580 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
 800058c:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000592:	697b      	ldr	r3, [r7, #20]
 8000594:	041b      	lsls	r3, r3, #16
 8000596:	617b      	str	r3, [r7, #20]
	t |= x2;
 8000598:	697a      	ldr	r2, [r7, #20]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 80005a0:	6979      	ldr	r1, [r7, #20]
 80005a2:	202a      	movs	r0, #42	; 0x2a
 80005a4:	f7ff ffb2 	bl	800050c <ILI9341_SPI_Send_32>
	t = y1;
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	617b      	str	r3, [r7, #20]
	t <<= 16;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	041b      	lsls	r3, r3, #16
 80005b0:	617b      	str	r3, [r7, #20]
	t |= y2;
 80005b2:	697a      	ldr	r2, [r7, #20]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	4313      	orrs	r3, r2
 80005b8:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80005ba:	6979      	ldr	r1, [r7, #20]
 80005bc:	202b      	movs	r0, #43	; 0x2b
 80005be:	f7ff ffa5 	bl	800050c <ILI9341_SPI_Send_32>
}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <ILI9341_Fill_Screen+0x40>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <ILI9341_Fill_Screen+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3b01      	subs	r3, #1
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffcc 	bl	8000580 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <ILI9341_Fill_Screen+0x40>)
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <ILI9341_Fill_Screen+0x44>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	fb01 f202 	mul.w	r2, r1, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f919 	bl	8000834 <ILI9341_Send_Burst>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000
 8000610:	20000004 	.word	0x20000004

08000614 <ILI9341_Draw_Pixel>:

void ILI9341_Draw_Pixel(int x, int y, unsigned int color)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	if((x < 0) || (y < 0) || (x >= X_SIZE) || (y >= Y_SIZE))
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db31      	blt.n	800068a <ILI9341_Draw_Pixel+0x76>
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db2e      	blt.n	800068a <ILI9341_Draw_Pixel+0x76>
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <ILI9341_Draw_Pixel+0x80>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	d229      	bcs.n	800068a <ILI9341_Draw_Pixel+0x76>
 8000636:	68ba      	ldr	r2, [r7, #8]
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <ILI9341_Draw_Pixel+0x84>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	429a      	cmp	r2, r3
 800063e:	d224      	bcs.n	800068a <ILI9341_Draw_Pixel+0x76>
	{
		return;
	}
	ILI9341_Set_Address(x, y, X_SIZE-1, Y_SIZE-1);
 8000640:	68f8      	ldr	r0, [r7, #12]
 8000642:	68b9      	ldr	r1, [r7, #8]
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <ILI9341_Draw_Pixel+0x80>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	1e5a      	subs	r2, r3, #1
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <ILI9341_Draw_Pixel+0x84>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3b01      	subs	r3, #1
 8000650:	f7ff ff96 	bl	8000580 <ILI9341_Set_Address>
	DC_COMMAND;
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <ILI9341_Draw_Pixel+0x88>)
 800065c:	f000 ffca 	bl	80015f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000660:	202c      	movs	r0, #44	; 0x2c
 8000662:	f7ff ff19 	bl	8000498 <ILI9341_SPI_Send>
	DC_DATA;
 8000666:	2201      	movs	r2, #1
 8000668:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <ILI9341_Draw_Pixel+0x88>)
 800066e:	f000 ffc1 	bl	80015f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(color>>8);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff0d 	bl	8000498 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(color);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff08 	bl	8000498 <ILI9341_SPI_Send>
 8000688:	e000      	b.n	800068c <ILI9341_Draw_Pixel+0x78>
		return;
 800068a:	bf00      	nop
}
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000
 8000698:	20000004 	.word	0x20000004
 800069c:	40010c00 	.word	0x40010c00

080006a0 <ILI9341_Draw_Empty_Rectangle>:
	ILI9341_Set_Address(x1, y1, x2, y2);
	ILI9341_Send_Burst(color, (long)(x2-x1+1) * (long)(y2-y1+1));
}

void ILI9341_Draw_Empty_Rectangle(unsigned int color,unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	603b      	str	r3, [r7, #0]
	ILI9341_Draw_Line(color, x1, y1, x2, y1);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f000 f81c 	bl	80006f6 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x2, y1, x2, y2);
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	6839      	ldr	r1, [r7, #0]
 80006c8:	68f8      	ldr	r0, [r7, #12]
 80006ca:	f000 f814 	bl	80006f6 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y1, x1, y2);
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	68b9      	ldr	r1, [r7, #8]
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f000 f80c 	bl	80006f6 <ILI9341_Draw_Line>
	ILI9341_Draw_Line(color, x1, y2, x2, y2);
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	68b9      	ldr	r1, [r7, #8]
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f000 f804 	bl	80006f6 <ILI9341_Draw_Line>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(unsigned int color, unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b08c      	sub	sp, #48	; 0x30
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
 8000702:	603b      	str	r3, [r7, #0]
	int steep = abs(y2-y1) > abs(x2-x1);
 8000704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800070e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000712:	6839      	ldr	r1, [r7, #0]
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	1acb      	subs	r3, r1, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	bfb8      	it	lt
 800071c:	425b      	neglt	r3, r3
 800071e:	429a      	cmp	r2, r3
 8000720:	bfcc      	ite	gt
 8000722:	2301      	movgt	r3, #1
 8000724:	2300      	movle	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	627b      	str	r3, [r7, #36]	; 0x24

	if (steep)
 800072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072c:	2b00      	cmp	r3, #0
 800072e:	d00d      	beq.n	800074c <ILI9341_Draw_Line+0x56>
	{
		swap(x1,y1);
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	847b      	strh	r3, [r7, #34]	; 0x22
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800073c:	607b      	str	r3, [r7, #4]
		swap(x2,y2);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	843b      	strh	r3, [r7, #32]
 8000742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	if(x1>x2)
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d90d      	bls.n	8000770 <ILI9341_Draw_Line+0x7a>
	{
		swap(x1,x2);
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	83fb      	strh	r3, [r7, #30]
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000760:	603b      	str	r3, [r7, #0]
		swap(y1,y2);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	83bb      	strh	r3, [r7, #28]
 8000766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	int dx,dy;
	dx = (x2 - x1);
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	61bb      	str	r3, [r7, #24]
	dy = abs(y2 - y1);
 8000778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	bfb8      	it	lt
 8000782:	425b      	neglt	r3, r3
 8000784:	617b      	str	r3, [r7, #20]
	int err = dx / 2;
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	0fda      	lsrs	r2, r3, #31
 800078a:	4413      	add	r3, r2
 800078c:	105b      	asrs	r3, r3, #1
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ystep;
	if(y1 < y2)
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000794:	429a      	cmp	r2, r3
 8000796:	d202      	bcs.n	800079e <ILI9341_Draw_Line+0xa8>
	{
		ystep = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
 800079c:	e023      	b.n	80007e6 <ILI9341_Draw_Line+0xf0>
	}
	else
	{
		ystep = -1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
	}
	for (; x1 <= x2; x1++)
 80007a4:	e01f      	b.n	80007e6 <ILI9341_Draw_Line+0xf0>
	{
		if (steep)
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d006      	beq.n	80007ba <ILI9341_Draw_Line+0xc4>
		{
			ILI9341_Draw_Pixel(y1, x1, color);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	68b9      	ldr	r1, [r7, #8]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff2e 	bl	8000614 <ILI9341_Draw_Pixel>
 80007b8:	e005      	b.n	80007c6 <ILI9341_Draw_Line+0xd0>
		}
		else
		{
			ILI9341_Draw_Pixel(x1, y1, color);
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff27 	bl	8000614 <ILI9341_Draw_Pixel>
		}
		err -= dy;
 80007c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (err < 0)
 80007ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da05      	bge.n	80007e0 <ILI9341_Draw_Line+0xea>
		{
			y1 += ystep;
 80007d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	607b      	str	r3, [r7, #4]
			err = dx;
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (; x1 <= x2; x1++)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	3301      	adds	r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d9db      	bls.n	80007a6 <ILI9341_Draw_Line+0xb0>
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	3730      	adds	r7, #48	; 0x30
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <ILI9341_Send_Command>:
		}
	break;
	}
}

static void ILI9341_Send_Command(unsigned char command) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Command();
 8000802:	f000 f8eb 	bl	80009dc <Before_Sending_Command>
	ILI9341_SPI_Send(command);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fe45 	bl	8000498 <ILI9341_SPI_Send>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
	Before_Sending_Data();
 8000820:	f000 f8ca 	bl	80009b8 <Before_Sending_Data>
	ILI9341_SPI_Send(data);
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe36 	bl	8000498 <ILI9341_SPI_Send>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	0a1b      	lsrs	r3, r3, #8
 8000844:	b29b      	uxth	r3, r3
 8000846:	733b      	strb	r3, [r7, #12]
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000852:	4858      	ldr	r0, [pc, #352]	; (80009b4 <ILI9341_Send_Burst+0x180>)
 8000854:	f000 fece 	bl	80015f4 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085e:	4855      	ldr	r0, [pc, #340]	; (80009b4 <ILI9341_Send_Burst+0x180>)
 8000860:	f000 fec8 	bl	80015f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000864:	202c      	movs	r0, #44	; 0x2c
 8000866:	f7ff fe17 	bl	8000498 <ILI9341_SPI_Send>
	DC_DATA;
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	4850      	ldr	r0, [pc, #320]	; (80009b4 <ILI9341_Send_Burst+0x180>)
 8000872:	f000 febf 	bl	80015f4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000876:	7b3b      	ldrb	r3, [r7, #12]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe0d 	bl	8000498 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 800087e:	7afb      	ldrb	r3, [r7, #11]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fe09 	bl	8000498 <ILI9341_SPI_Send>
	len--;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	3b01      	subs	r3, #1
 800088a:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	099b      	lsrs	r3, r3, #6
 8000890:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000892:	7b3a      	ldrb	r2, [r7, #12]
 8000894:	7afb      	ldrb	r3, [r7, #11]
 8000896:	429a      	cmp	r2, r3
 8000898:	d169      	bne.n	800096e <ILI9341_Send_Burst+0x13a>
	{
		while (blocks--) {
 800089a:	e027      	b.n	80008ec <ILI9341_Send_Burst+0xb8>
			i = 16;
 800089c:	2310      	movs	r3, #16
 800089e:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 80008a0:	7afb      	ldrb	r3, [r7, #11]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fdf8 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80008a8:	7afb      	ldrb	r3, [r7, #11]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fdf4 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80008b0:	7afb      	ldrb	r3, [r7, #11]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fdf0 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80008b8:	7afb      	ldrb	r3, [r7, #11]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fdec 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fde8 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fde4 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80008d0:	7afb      	ldrb	r3, [r7, #11]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fde0 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fddc 	bl	8000498 <ILI9341_SPI_Send>
			} while (--i);
 80008e0:	7b7b      	ldrb	r3, [r7, #13]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	737b      	strb	r3, [r7, #13]
 80008e6:	7b7b      	ldrb	r3, [r7, #13]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1d9      	bne.n	80008a0 <ILI9341_Send_Burst+0x6c>
		while (blocks--) {
 80008ec:	89fb      	ldrh	r3, [r7, #14]
 80008ee:	1e5a      	subs	r2, r3, #1
 80008f0:	81fa      	strh	r2, [r7, #14]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1d2      	bne.n	800089c <ILI9341_Send_Burst+0x68>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008fe:	737b      	strb	r3, [r7, #13]
 8000900:	e007      	b.n	8000912 <ILI9341_Send_Burst+0xde>
			ILI9341_SPI_Send(low_bit);
 8000902:	7afb      	ldrb	r3, [r7, #11]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fdc7 	bl	8000498 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 800090a:	7afb      	ldrb	r3, [r7, #11]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdc3 	bl	8000498 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000912:	7b7b      	ldrb	r3, [r7, #13]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	737a      	strb	r2, [r7, #13]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1f2      	bne.n	8000902 <ILI9341_Send_Burst+0xce>
 800091c:	e03f      	b.n	800099e <ILI9341_Send_Burst+0x16a>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 800091e:	2310      	movs	r3, #16
 8000920:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000922:	7b3b      	ldrb	r3, [r7, #12]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fdb7 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800092a:	7afb      	ldrb	r3, [r7, #11]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fdb3 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000932:	7b3b      	ldrb	r3, [r7, #12]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fdaf 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fdab 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000942:	7b3b      	ldrb	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fda7 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fda3 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000952:	7b3b      	ldrb	r3, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fd9f 	bl	8000498 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fd9b 	bl	8000498 <ILI9341_SPI_Send>
			} while (--i);
 8000962:	7b7b      	ldrb	r3, [r7, #13]
 8000964:	3b01      	subs	r3, #1
 8000966:	737b      	strb	r3, [r7, #13]
 8000968:	7b7b      	ldrb	r3, [r7, #13]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1d9      	bne.n	8000922 <ILI9341_Send_Burst+0xee>
		while (blocks--) {
 800096e:	89fb      	ldrh	r3, [r7, #14]
 8000970:	1e5a      	subs	r2, r3, #1
 8000972:	81fa      	strh	r2, [r7, #14]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1d2      	bne.n	800091e <ILI9341_Send_Burst+0xea>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000980:	737b      	strb	r3, [r7, #13]
 8000982:	e007      	b.n	8000994 <ILI9341_Send_Burst+0x160>
			ILI9341_SPI_Send(high_bit);
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fd86 	bl	8000498 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fd82 	bl	8000498 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000994:	7b7b      	ldrb	r3, [r7, #13]
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	737a      	strb	r2, [r7, #13]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f2      	bne.n	8000984 <ILI9341_Send_Burst+0x150>
		}
	}
	CS_OFF;
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <ILI9341_Send_Burst+0x180>)
 80009a6:	f000 fe25 	bl	80015f4 <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40010c00 	.word	0x40010c00

080009b8 <Before_Sending_Data>:
			}
		break;
	}
}

static void Before_Sending_Data() {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <Before_Sending_Data+0x20>)
 80009c4:	f000 fe16 	bl	80015f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ce:	4802      	ldr	r0, [pc, #8]	; (80009d8 <Before_Sending_Data+0x20>)
 80009d0:	f000 fe10 	bl	80015f4 <HAL_GPIO_WritePin>
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40010c00 	.word	0x40010c00

080009dc <Before_Sending_Command>:

static void Before_Sending_Command() {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <Before_Sending_Command+0x20>)
 80009e8:	f000 fe04 	bl	80015f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	4802      	ldr	r0, [pc, #8]	; (80009fc <Before_Sending_Command+0x20>)
 80009f4:	f000 fdfe 	bl	80015f4 <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40010c00 	.word	0x40010c00

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 faf7 	bl	8000ff8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f85f 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 f947 	bl	8000ca0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a12:	f000 f897 	bl	8000b44 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000a16:	f000 f8cb 	bl	8000bb0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init();
 8000a1a:	f7ff fc03 	bl	8000224 <ILI9341_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4827      	ldr	r0, [pc, #156]	; (8000ac0 <main+0xc0>)
 8000a22:	f001 fcf3 	bl	800240c <HAL_TIM_PWM_Start>

  ILI9341_Fill_Screen(PINK);
 8000a26:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000a2a:	f7ff fdcf 	bl	80005cc <ILI9341_Fill_Screen>
  ILI9341_Draw_Empty_Rectangle(RED, 0, 0, 320, 240);
 8000a2e:	23f0      	movs	r3, #240	; 0xf0
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000a3e:	f7ff fe2f 	bl	80006a0 <ILI9341_Draw_Empty_Rectangle>

  long last_ticks = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  long ticks = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  ticks = HAL_GetTick();
 8000a4a:	f000 fb2d 	bl	80010a8 <HAL_GetTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	603b      	str	r3, [r7, #0]
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
//	  } else {
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//	  }
//	  last_ticks = HAL_GetTick();
	  ILI9341_Draw_Empty_Rectangle(BLUE, 0, 0, HAL_GetTick() / 100, HAL_GetTick() / 100);
 8000a52:	f000 fb29 	bl	80010a8 <HAL_GetTick>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <main+0xc4>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	095c      	lsrs	r4, r3, #5
 8000a60:	f000 fb22 	bl	80010a8 <HAL_GetTick>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <main+0xc4>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	095b      	lsrs	r3, r3, #5
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4623      	mov	r3, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	201f      	movs	r0, #31
 8000a78:	f7ff fe12 	bl	80006a0 <ILI9341_Draw_Empty_Rectangle>

	  if (ticks - last_ticks > 400) {
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000a86:	dde0      	ble.n	8000a4a <main+0x4a>

		  if ((ticks / 400) % 2 == 0) {
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <main+0xc4>)
 8000a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a90:	11d2      	asrs	r2, r2, #7
 8000a92:	17db      	asrs	r3, r3, #31
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d106      	bne.n	8000aac <main+0xac>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <main+0xc8>)
 8000aa6:	f000 fda5 	bl	80015f4 <HAL_GPIO_WritePin>
 8000aaa:	e005      	b.n	8000ab8 <main+0xb8>
		  } else {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <main+0xc8>)
 8000ab4:	f000 fd9e 	bl	80015f4 <HAL_GPIO_WritePin>
		  }

		  last_ticks = ticks;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	607b      	str	r3, [r7, #4]
	  ticks = HAL_GetTick();
 8000abc:	e7c5      	b.n	8000a4a <main+0x4a>
 8000abe:	bf00      	nop
 8000ac0:	200000e0 	.word	0x200000e0
 8000ac4:	51eb851f 	.word	0x51eb851f
 8000ac8:	40011000 	.word	0x40011000

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	2228      	movs	r2, #40	; 0x28
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fa4a 	bl	8002f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
 8000aec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af6:	2310      	movs	r3, #16
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fd8e 	bl	8001624 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b0e:	f000 f95b 	bl	8000dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fffc 	bl	8001b28 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b36:	f000 f947 	bl	8000dc8 <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3740      	adds	r7, #64	; 0x40
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b4a:	4a18      	ldr	r2, [pc, #96]	; (8000bac <MX_SPI2_Init+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b90:	220a      	movs	r2, #10
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_SPI2_Init+0x64>)
 8000b96:	f001 f923 	bl	8001de0 <HAL_SPI_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ba0:	f000 f912 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000088 	.word	0x20000088
 8000bac:	40003800 	.word	0x40003800

08000bb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	f107 0320 	add.w	r3, r7, #32
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000be0:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000be2:	4a2e      	ldr	r2, [pc, #184]	; (8000c9c <MX_TIM3_Init+0xec>)
 8000be4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6500;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000be8:	f641 1264 	movw	r2, #6500	; 0x1964
 8000bec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6000;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000bf6:	f241 7270 	movw	r2, #6000	; 0x1770
 8000bfa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c08:	4823      	ldr	r0, [pc, #140]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000c0a:	f001 fb57 	bl	80022bc <HAL_TIM_Base_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c14:	f000 f8d8 	bl	8000dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c22:	4619      	mov	r1, r3
 8000c24:	481c      	ldr	r0, [pc, #112]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000c26:	f001 fd6d 	bl	8002704 <HAL_TIM_ConfigClockSource>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c30:	f000 f8ca 	bl	8000dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000c36:	f001 fb90 	bl	800235a <HAL_TIM_PWM_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c40:	f000 f8c2 	bl	8000dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	4619      	mov	r1, r3
 8000c52:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000c54:	f002 f8fe 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c5e:	f000 f8b3 	bl	8000dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c62:	2360      	movs	r3, #96	; 0x60
 8000c64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 3000;
 8000c66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000c7c:	f001 fc80 	bl	8002580 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000c86:	f000 f89f 	bl	8000dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM3_Init+0xe8>)
 8000c8c:	f000 f92e 	bl	8000eec <HAL_TIM_MspPostInit>

}
 8000c90:	bf00      	nop
 8000c92:	3738      	adds	r7, #56	; 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000e0 	.word	0x200000e0
 8000c9c:	40000400 	.word	0x40000400

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a3f      	ldr	r2, [pc, #252]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b3a      	ldr	r3, [pc, #232]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a39      	ldr	r2, [pc, #228]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b37      	ldr	r3, [pc, #220]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce4:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b2e      	ldr	r3, [pc, #184]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a2d      	ldr	r2, [pc, #180]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b2b      	ldr	r3, [pc, #172]	; (8000db8 <MX_GPIO_Init+0x118>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8000d1a:	4828      	ldr	r0, [pc, #160]	; (8000dbc <MX_GPIO_Init+0x11c>)
 8000d1c:	f000 fc6a 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000d26:	4826      	ldr	r0, [pc, #152]	; (8000dc0 <MX_GPIO_Init+0x120>)
 8000d28:	f000 fc64 	bl	80015f4 <HAL_GPIO_WritePin>
                          |T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000d32:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <MX_GPIO_Init+0x124>)
 8000d34:	f000 fc5e 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481a      	ldr	r0, [pc, #104]	; (8000dbc <MX_GPIO_Init+0x11c>)
 8000d52:	f000 fabb 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin T_DIN_Pin T_DO_Pin
                           T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 8000d56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d5a:	613b      	str	r3, [r7, #16]
                          |T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MX_GPIO_Init+0x120>)
 8000d70:	f000 faac 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8000d74:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_GPIO_Init+0x124>)
 8000d8e:	f000 fa9d 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <MX_GPIO_Init+0x11c>)
 8000daa:	f000 fa8f 	bl	80012cc <HAL_GPIO_Init>

}
 8000dae:	bf00      	nop
 8000db0:	3720      	adds	r7, #32
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40011800 	.word	0x40011800
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dcc:	b672      	cpsid	i
}
 8000dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <Error_Handler+0x8>
	...

08000dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_MspInit+0x40>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <HAL_MspInit+0x40>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_MspInit+0x40>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_MspInit+0x40>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_MspInit+0x40>)
 8000df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	61d3      	str	r3, [r2, #28]
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_MspInit+0x40>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a1c      	ldr	r2, [pc, #112]	; (8000ea4 <HAL_SPI_MspInit+0x8c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d131      	bne.n	8000e9c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e42:	61d3      	str	r3, [r2, #28]
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_SPI_MspInit+0x90>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000e68:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	; (8000eac <HAL_SPI_MspInit+0x94>)
 8000e7e:	f000 fa25 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_SPI_MspInit+0x94>)
 8000e98:	f000 fa18 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40003800 	.word	0x40003800
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010c00 	.word	0x40010c00

08000eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x34>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10b      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_TIM_Base_MspInit+0x38>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_TIM_Base_MspInit+0x38>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_TIM_Base_MspInit+0x38>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40000400 	.word	0x40000400
 8000ee8:	40021000 	.word	0x40021000

08000eec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <HAL_TIM_MspPostInit+0x58>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d117      	bne.n	8000f3c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_TIM_MspPostInit+0x5c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <HAL_TIM_MspPostInit+0x5c>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_TIM_MspPostInit+0x5c>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f24:	2340      	movs	r3, #64	; 0x40
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_TIM_MspPostInit+0x60>)
 8000f38:	f000 f9c8 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40000400 	.word	0x40000400
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010800 	.word	0x40010800

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f000 f875 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff fff7 	bl	8000f9e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fb2:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fb4:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fc8:	4c09      	ldr	r4, [pc, #36]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f001 ffa9 	bl	8002f2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fda:	f7ff fd11 	bl	8000a00 <main>
  bx lr
 8000fde:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fe8:	08002fc8 	.word	0x08002fc8
  ldr r2, =_sbss
 8000fec:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ff0:	2000012c 	.word	0x2000012c

08000ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_2_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_Init+0x28>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_Init+0x28>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001008:	2003      	movs	r0, #3
 800100a:	f000 f92b 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f808 	bl	8001024 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001014:	f7ff fede 	bl	8000dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40022000 	.word	0x40022000

08001024 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x54>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x58>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f935 	bl	80012b2 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f000 f90b 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	; (8001080 <HAL_InitTick+0x5c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000008 	.word	0x20000008
 800107c:	20000010 	.word	0x20000010
 8001080:	2000000c 	.word	0x2000000c

08001084 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x1c>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x20>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a03      	ldr	r2, [pc, #12]	; (80010a4 <HAL_IncTick+0x20>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	20000010 	.word	0x20000010
 80010a4:	20000128 	.word	0x20000128

080010a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <HAL_GetTick+0x10>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000128 	.word	0x20000128

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff fff0 	bl	80010a8 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffe0 	bl	80010a8 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000010 	.word	0x20000010

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff90 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff49 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5e 	bl	800114c <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff90 	bl	80011bc <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5f 	bl	8001168 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b08b      	sub	sp, #44	; 0x2c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012de:	e179      	b.n	80015d4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e0:	2201      	movs	r2, #1
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	69fa      	ldr	r2, [r7, #28]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8168 	bne.w	80015ce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4a96      	ldr	r2, [pc, #600]	; (800155c <HAL_GPIO_Init+0x290>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d05e      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001308:	4a94      	ldr	r2, [pc, #592]	; (800155c <HAL_GPIO_Init+0x290>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d875      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 800130e:	4a94      	ldr	r2, [pc, #592]	; (8001560 <HAL_GPIO_Init+0x294>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d058      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001314:	4a92      	ldr	r2, [pc, #584]	; (8001560 <HAL_GPIO_Init+0x294>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d86f      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 800131a:	4a92      	ldr	r2, [pc, #584]	; (8001564 <HAL_GPIO_Init+0x298>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d052      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001320:	4a90      	ldr	r2, [pc, #576]	; (8001564 <HAL_GPIO_Init+0x298>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d869      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 8001326:	4a90      	ldr	r2, [pc, #576]	; (8001568 <HAL_GPIO_Init+0x29c>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d04c      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 800132c:	4a8e      	ldr	r2, [pc, #568]	; (8001568 <HAL_GPIO_Init+0x29c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d863      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 8001332:	4a8e      	ldr	r2, [pc, #568]	; (800156c <HAL_GPIO_Init+0x2a0>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d046      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
 8001338:	4a8c      	ldr	r2, [pc, #560]	; (800156c <HAL_GPIO_Init+0x2a0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d85d      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 800133e:	2b12      	cmp	r3, #18
 8001340:	d82a      	bhi.n	8001398 <HAL_GPIO_Init+0xcc>
 8001342:	2b12      	cmp	r3, #18
 8001344:	d859      	bhi.n	80013fa <HAL_GPIO_Init+0x12e>
 8001346:	a201      	add	r2, pc, #4	; (adr r2, 800134c <HAL_GPIO_Init+0x80>)
 8001348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134c:	080013c7 	.word	0x080013c7
 8001350:	080013a1 	.word	0x080013a1
 8001354:	080013b3 	.word	0x080013b3
 8001358:	080013f5 	.word	0x080013f5
 800135c:	080013fb 	.word	0x080013fb
 8001360:	080013fb 	.word	0x080013fb
 8001364:	080013fb 	.word	0x080013fb
 8001368:	080013fb 	.word	0x080013fb
 800136c:	080013fb 	.word	0x080013fb
 8001370:	080013fb 	.word	0x080013fb
 8001374:	080013fb 	.word	0x080013fb
 8001378:	080013fb 	.word	0x080013fb
 800137c:	080013fb 	.word	0x080013fb
 8001380:	080013fb 	.word	0x080013fb
 8001384:	080013fb 	.word	0x080013fb
 8001388:	080013fb 	.word	0x080013fb
 800138c:	080013fb 	.word	0x080013fb
 8001390:	080013a9 	.word	0x080013a9
 8001394:	080013bd 	.word	0x080013bd
 8001398:	4a75      	ldr	r2, [pc, #468]	; (8001570 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800139e:	e02c      	b.n	80013fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e029      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	3304      	adds	r3, #4
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e024      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	3308      	adds	r3, #8
 80013b8:	623b      	str	r3, [r7, #32]
          break;
 80013ba:	e01f      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	330c      	adds	r3, #12
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e01a      	b.n	80013fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ce:	2304      	movs	r3, #4
 80013d0:	623b      	str	r3, [r7, #32]
          break;
 80013d2:	e013      	b.n	80013fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	611a      	str	r2, [r3, #16]
          break;
 80013e6:	e009      	b.n	80013fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e8:	2308      	movs	r3, #8
 80013ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	615a      	str	r2, [r3, #20]
          break;
 80013f2:	e003      	b.n	80013fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
          break;
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x130>
          break;
 80013fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2bff      	cmp	r3, #255	; 0xff
 8001400:	d801      	bhi.n	8001406 <HAL_GPIO_Init+0x13a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	e001      	b.n	800140a <HAL_GPIO_Init+0x13e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3304      	adds	r3, #4
 800140a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2bff      	cmp	r3, #255	; 0xff
 8001410:	d802      	bhi.n	8001418 <HAL_GPIO_Init+0x14c>
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	e002      	b.n	800141e <HAL_GPIO_Init+0x152>
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	3b08      	subs	r3, #8
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	210f      	movs	r1, #15
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	401a      	ands	r2, r3
 8001430:	6a39      	ldr	r1, [r7, #32]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80c1 	beq.w	80015ce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800144c:	4b49      	ldr	r3, [pc, #292]	; (8001574 <HAL_GPIO_Init+0x2a8>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2a8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b46      	ldr	r3, [pc, #280]	; (8001574 <HAL_GPIO_Init+0x2a8>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001464:	4a44      	ldr	r2, [pc, #272]	; (8001578 <HAL_GPIO_Init+0x2ac>)
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_GPIO_Init+0x2b0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d01f      	beq.n	80014d0 <HAL_GPIO_Init+0x204>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a3b      	ldr	r2, [pc, #236]	; (8001580 <HAL_GPIO_Init+0x2b4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d019      	beq.n	80014cc <HAL_GPIO_Init+0x200>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a3a      	ldr	r2, [pc, #232]	; (8001584 <HAL_GPIO_Init+0x2b8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d013      	beq.n	80014c8 <HAL_GPIO_Init+0x1fc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a39      	ldr	r2, [pc, #228]	; (8001588 <HAL_GPIO_Init+0x2bc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d00d      	beq.n	80014c4 <HAL_GPIO_Init+0x1f8>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a38      	ldr	r2, [pc, #224]	; (800158c <HAL_GPIO_Init+0x2c0>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d007      	beq.n	80014c0 <HAL_GPIO_Init+0x1f4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a37      	ldr	r2, [pc, #220]	; (8001590 <HAL_GPIO_Init+0x2c4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d101      	bne.n	80014bc <HAL_GPIO_Init+0x1f0>
 80014b8:	2305      	movs	r3, #5
 80014ba:	e00a      	b.n	80014d2 <HAL_GPIO_Init+0x206>
 80014bc:	2306      	movs	r3, #6
 80014be:	e008      	b.n	80014d2 <HAL_GPIO_Init+0x206>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e006      	b.n	80014d2 <HAL_GPIO_Init+0x206>
 80014c4:	2303      	movs	r3, #3
 80014c6:	e004      	b.n	80014d2 <HAL_GPIO_Init+0x206>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e002      	b.n	80014d2 <HAL_GPIO_Init+0x206>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <HAL_GPIO_Init+0x206>
 80014d0:	2300      	movs	r3, #0
 80014d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d4:	f002 0203 	and.w	r2, r2, #3
 80014d8:	0092      	lsls	r2, r2, #2
 80014da:	4093      	lsls	r3, r2
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014e2:	4925      	ldr	r1, [pc, #148]	; (8001578 <HAL_GPIO_Init+0x2ac>)
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	4924      	ldr	r1, [pc, #144]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
 8001508:	e006      	b.n	8001518 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	43db      	mvns	r3, r3
 8001512:	4920      	ldr	r1, [pc, #128]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 8001514:	4013      	ands	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	491a      	ldr	r1, [pc, #104]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	43db      	mvns	r3, r3
 800153a:	4916      	ldr	r1, [pc, #88]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 800153c:	4013      	ands	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d025      	beq.n	8001598 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	4910      	ldr	r1, [pc, #64]	; (8001594 <HAL_GPIO_Init+0x2c8>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
 8001558:	e025      	b.n	80015a6 <HAL_GPIO_Init+0x2da>
 800155a:	bf00      	nop
 800155c:	10320000 	.word	0x10320000
 8001560:	10310000 	.word	0x10310000
 8001564:	10220000 	.word	0x10220000
 8001568:	10210000 	.word	0x10210000
 800156c:	10120000 	.word	0x10120000
 8001570:	10110000 	.word	0x10110000
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000
 800157c:	40010800 	.word	0x40010800
 8001580:	40010c00 	.word	0x40010c00
 8001584:	40011000 	.word	0x40011000
 8001588:	40011400 	.word	0x40011400
 800158c:	40011800 	.word	0x40011800
 8001590:	40011c00 	.word	0x40011c00
 8001594:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_GPIO_Init+0x324>)
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4913      	ldr	r1, [pc, #76]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
 80015be:	e006      	b.n	80015ce <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4909      	ldr	r1, [pc, #36]	; (80015f0 <HAL_GPIO_Init+0x324>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	3301      	adds	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	fa22 f303 	lsr.w	r3, r2, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f47f ae7e 	bne.w	80012e0 <HAL_GPIO_Init+0x14>
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	372c      	adds	r7, #44	; 0x2c
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	611a      	str	r2, [r3, #16]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e272      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8087 	beq.w	8001752 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 030c 	and.w	r3, r3, #12
 800164c:	2b04      	cmp	r3, #4
 800164e:	d00c      	beq.n	800166a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001650:	4b8f      	ldr	r3, [pc, #572]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d112      	bne.n	8001682 <HAL_RCC_OscConfig+0x5e>
 800165c:	4b8c      	ldr	r3, [pc, #560]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d10b      	bne.n	8001682 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166a:	4b89      	ldr	r3, [pc, #548]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d06c      	beq.n	8001750 <HAL_RCC_OscConfig+0x12c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d168      	bne.n	8001750 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e24c      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x76>
 800168c:	4b80      	ldr	r3, [pc, #512]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a7f      	ldr	r2, [pc, #508]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e02e      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x98>
 80016a2:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a7a      	ldr	r2, [pc, #488]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b78      	ldr	r3, [pc, #480]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a77      	ldr	r2, [pc, #476]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e01d      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0xbc>
 80016c6:	4b72      	ldr	r3, [pc, #456]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a71      	ldr	r2, [pc, #452]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b6f      	ldr	r3, [pc, #444]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a6e      	ldr	r2, [pc, #440]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_OscConfig+0xd4>
 80016e0:	4b6b      	ldr	r3, [pc, #428]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6a      	ldr	r2, [pc, #424]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b68      	ldr	r3, [pc, #416]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a67      	ldr	r2, [pc, #412]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fcd2 	bl	80010a8 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001708:	f7ff fcce 	bl	80010a8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b64      	cmp	r3, #100	; 0x64
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e200      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b5d      	ldr	r3, [pc, #372]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0xe4>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff fcbe 	bl	80010a8 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fcba 	bl	80010a8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1ec      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x10c>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d063      	beq.n	8001826 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175e:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800176a:	4b49      	ldr	r3, [pc, #292]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	2b08      	cmp	r3, #8
 8001774:	d11c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x18c>
 8001776:	4b46      	ldr	r3, [pc, #280]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001782:	4b43      	ldr	r3, [pc, #268]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_RCC_OscConfig+0x176>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d001      	beq.n	800179a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e1c0      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4939      	ldr	r1, [pc, #228]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	e03a      	b.n	8001826 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <HAL_RCC_OscConfig+0x270>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fc73 	bl	80010a8 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fc6f 	bl	80010a8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1a1      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b2a      	ldr	r3, [pc, #168]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	4927      	ldr	r1, [pc, #156]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fa:	4b26      	ldr	r3, [pc, #152]	; (8001894 <HAL_RCC_OscConfig+0x270>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fc52 	bl	80010a8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001808:	f7ff fc4e 	bl	80010a8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e180      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d03a      	beq.n	80018a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d019      	beq.n	800186e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_RCC_OscConfig+0x274>)
 800183c:	2201      	movs	r2, #1
 800183e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001840:	f7ff fc32 	bl	80010a8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001848:	f7ff fc2e 	bl	80010a8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e160      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <HAL_RCC_OscConfig+0x26c>)
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001866:	2001      	movs	r0, #1
 8001868:	f000 fa9c 	bl	8001da4 <RCC_Delay>
 800186c:	e01c      	b.n	80018a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_RCC_OscConfig+0x274>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fc18 	bl	80010a8 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187a:	e00f      	b.n	800189c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fc14 	bl	80010a8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d908      	bls.n	800189c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e146      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	42420000 	.word	0x42420000
 8001898:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b92      	ldr	r3, [pc, #584]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1e9      	bne.n	800187c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a6 	beq.w	8001a02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b8b      	ldr	r3, [pc, #556]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b88      	ldr	r3, [pc, #544]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a87      	ldr	r2, [pc, #540]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b85      	ldr	r3, [pc, #532]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018de:	2301      	movs	r3, #1
 80018e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4b82      	ldr	r3, [pc, #520]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a7e      	ldr	r2, [pc, #504]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fbd5 	bl	80010a8 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001902:	f7ff fbd1 	bl	80010a8 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b64      	cmp	r3, #100	; 0x64
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e103      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <HAL_RCC_OscConfig+0x4c8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x312>
 8001928:	4b6f      	ldr	r3, [pc, #444]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a6e      	ldr	r2, [pc, #440]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	e02d      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x334>
 800193e:	4b6a      	ldr	r3, [pc, #424]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a69      	ldr	r2, [pc, #420]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b67      	ldr	r3, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a66      	ldr	r2, [pc, #408]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	e01c      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d10c      	bne.n	800197a <HAL_RCC_OscConfig+0x356>
 8001960:	4b61      	ldr	r3, [pc, #388]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	4a60      	ldr	r2, [pc, #384]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6213      	str	r3, [r2, #32]
 800196c:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e00b      	b.n	8001992 <HAL_RCC_OscConfig+0x36e>
 800197a:	4b5b      	ldr	r3, [pc, #364]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a5a      	ldr	r2, [pc, #360]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6213      	str	r3, [r2, #32]
 8001986:	4b58      	ldr	r3, [pc, #352]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	6a1b      	ldr	r3, [r3, #32]
 800198a:	4a57      	ldr	r2, [pc, #348]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	f023 0304 	bic.w	r3, r3, #4
 8001990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d015      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199a:	f7ff fb85 	bl	80010a8 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a2:	f7ff fb81 	bl	80010a8 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e0b1      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	4b4b      	ldr	r3, [pc, #300]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ee      	beq.n	80019a2 <HAL_RCC_OscConfig+0x37e>
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fb6f 	bl	80010a8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ce:	f7ff fb6b 	bl	80010a8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e09b      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ee      	bne.n	80019ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f0:	7dfb      	ldrb	r3, [r7, #23]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f6:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a3b      	ldr	r2, [pc, #236]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8087 	beq.w	8001b1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	4b36      	ldr	r3, [pc, #216]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d061      	beq.n	8001adc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d146      	bne.n	8001aae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fb3f 	bl	80010a8 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff fb3b 	bl	80010a8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e06d      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a40:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a54:	d108      	bne.n	8001a68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a56:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4921      	ldr	r1, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a19      	ldr	r1, [r3, #32]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	491b      	ldr	r1, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb0f 	bl	80010a8 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fb0b 	bl	80010a8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e03d      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46a>
 8001aac:	e035      	b.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_RCC_OscConfig+0x4cc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff faf8 	bl	80010a8 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff faf4 	bl	80010a8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e026      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x498>
 8001ada:	e01e      	b.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e019      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
 8001af0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_OscConfig+0x500>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0d0      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b6a      	ldr	r3, [pc, #424]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b67      	ldr	r3, [pc, #412]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4965      	ldr	r1, [pc, #404]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b63      	ldr	r3, [pc, #396]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b8      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ba6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	494d      	ldr	r1, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d040      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d115      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e07f      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e073      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06b      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c06:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4936      	ldr	r1, [pc, #216]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c18:	f7ff fa46 	bl	80010a8 <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7ff fa42 	bl	80010a8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e053      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 020c 	and.w	r2, r3, #12
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1eb      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d210      	bcs.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	4922      	ldr	r1, [pc, #136]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e032      	b.n	8001cde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4916      	ldr	r1, [pc, #88]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d009      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	490e      	ldr	r1, [pc, #56]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb6:	f000 f821 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	fa22 f303 	lsr.w	r3, r2, r3
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1cc>)
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1d0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f9a4 	bl	8001024 <HAL_InitTick>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08002f9c 	.word	0x08002f9c
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x30>
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x36>
 8001d2a:	e027      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2e:	613b      	str	r3, [r7, #16]
      break;
 8001d30:	e027      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0c5b      	lsrs	r3, r3, #17
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d5e:	fb03 f202 	mul.w	r2, r3, r2
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e004      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	613b      	str	r3, [r7, #16]
      break;
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7e:	613b      	str	r3, [r7, #16]
      break;
 8001d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d82:	693b      	ldr	r3, [r7, #16]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
 8001d94:	007a1200 	.word	0x007a1200
 8001d98:	08002fac 	.word	0x08002fac
 8001d9c:	08002fbc 	.word	0x08002fbc
 8001da0:	003d0900 	.word	0x003d0900

08001da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <RCC_Delay+0x34>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <RCC_Delay+0x38>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0a5b      	lsrs	r3, r3, #9
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc0:	bf00      	nop
  }
  while (Delay --);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	60fa      	str	r2, [r7, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f9      	bne.n	8001dc0 <RCC_Delay+0x1c>
}
 8001dcc:	bf00      	nop
 8001dce:	bf00      	nop
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	10624dd3 	.word	0x10624dd3

08001de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e076      	b.n	8001ee0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d108      	bne.n	8001e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e02:	d009      	beq.n	8001e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
 8001e0a:	e005      	b.n	8001e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fff0 	bl	8000e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	0c1a      	lsrs	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f002 0204 	and.w	r2, r2, #4
 8001ebe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ece:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_SPI_Transmit+0x22>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e12d      	b.n	8002166 <HAL_SPI_Transmit+0x27e>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f12:	f7ff f8c9 	bl	80010a8 <HAL_GetTick>
 8001f16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d002      	beq.n	8001f2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f2c:	e116      	b.n	800215c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_SPI_Transmit+0x52>
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f3e:	e10d      	b.n	800215c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2203      	movs	r2, #3
 8001f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f86:	d10f      	bne.n	8001fa8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fa6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d007      	beq.n	8001fc6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fce:	d14f      	bne.n	8002070 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_SPI_Transmit+0xf6>
 8001fd8:	8afb      	ldrh	r3, [r7, #22]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d142      	bne.n	8002064 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	1c9a      	adds	r2, r3, #2
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002002:	e02f      	b.n	8002064 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b02      	cmp	r3, #2
 8002010:	d112      	bne.n	8002038 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	881a      	ldrh	r2, [r3, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	1c9a      	adds	r2, r3, #2
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	86da      	strh	r2, [r3, #54]	; 0x36
 8002036:	e015      	b.n	8002064 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002038:	f7ff f836 	bl	80010a8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d803      	bhi.n	8002050 <HAL_SPI_Transmit+0x168>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204e:	d102      	bne.n	8002056 <HAL_SPI_Transmit+0x16e>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002062:	e07b      	b.n	800215c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ca      	bne.n	8002004 <HAL_SPI_Transmit+0x11c>
 800206e:	e050      	b.n	8002112 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_SPI_Transmit+0x196>
 8002078:	8afb      	ldrh	r3, [r7, #22]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d144      	bne.n	8002108 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020a4:	e030      	b.n	8002108 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d113      	bne.n	80020dc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80020da:	e015      	b.n	8002108 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020dc:	f7fe ffe4 	bl	80010a8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d803      	bhi.n	80020f4 <HAL_SPI_Transmit+0x20c>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d102      	bne.n	80020fa <HAL_SPI_Transmit+0x212>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002106:	e029      	b.n	800215c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1c9      	bne.n	80020a6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	6839      	ldr	r1, [r7, #0]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f8b2 	bl	8002280 <SPI_EndRxTxTransaction>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	77fb      	strb	r3, [r7, #31]
 8002152:	e003      	b.n	800215c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002164:	7ffb      	ldrb	r3, [r7, #31]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002180:	f7fe ff92 	bl	80010a8 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4413      	add	r3, r2
 800218e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002190:	f7fe ff8a 	bl	80010a8 <HAL_GetTick>
 8002194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	015b      	lsls	r3, r3, #5
 800219c:	0d1b      	lsrs	r3, r3, #20
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021a6:	e054      	b.n	8002252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d050      	beq.n	8002252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021b0:	f7fe ff7a 	bl	80010a8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d902      	bls.n	80021c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d13d      	bne.n	8002242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021de:	d111      	bne.n	8002204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e8:	d004      	beq.n	80021f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f2:	d107      	bne.n	8002204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220c:	d10f      	bne.n	800222e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800222c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e017      	b.n	8002272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	3b01      	subs	r3, #1
 8002250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4013      	ands	r3, r2
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	429a      	cmp	r2, r3
 8002260:	bf0c      	ite	eq
 8002262:	2301      	moveq	r3, #1
 8002264:	2300      	movne	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	429a      	cmp	r2, r3
 800226e:	d19b      	bne.n	80021a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f7ff ff6a 	bl	8002170 <SPI_WaitFlagStateUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e000      	b.n	80022b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e041      	b.n	8002352 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe fde4 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f000 faca 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e041      	b.n	80023f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f839 	bl	80023f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3304      	adds	r3, #4
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f000 fa7b 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
	...

0800240c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_TIM_PWM_Start+0x24>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e022      	b.n	8002476 <HAL_TIM_PWM_Start+0x6a>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d109      	bne.n	800244a <HAL_TIM_PWM_Start+0x3e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	e015      	b.n	8002476 <HAL_TIM_PWM_Start+0x6a>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d109      	bne.n	8002464 <HAL_TIM_PWM_Start+0x58>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e008      	b.n	8002476 <HAL_TIM_PWM_Start+0x6a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e072      	b.n	8002564 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d104      	bne.n	800248e <HAL_TIM_PWM_Start+0x82>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	e013      	b.n	80024b6 <HAL_TIM_PWM_Start+0xaa>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d104      	bne.n	800249e <HAL_TIM_PWM_Start+0x92>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800249c:	e00b      	b.n	80024b6 <HAL_TIM_PWM_Start+0xaa>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d104      	bne.n	80024ae <HAL_TIM_PWM_Start+0xa2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ac:	e003      	b.n	80024b6 <HAL_TIM_PWM_Start+0xaa>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2201      	movs	r2, #1
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fca4 	bl	8002e0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a28      	ldr	r2, [pc, #160]	; (800256c <HAL_TIM_PWM_Start+0x160>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d004      	beq.n	80024d8 <HAL_TIM_PWM_Start+0xcc>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a27      	ldr	r2, [pc, #156]	; (8002570 <HAL_TIM_PWM_Start+0x164>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d101      	bne.n	80024dc <HAL_TIM_PWM_Start+0xd0>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_TIM_PWM_Start+0xd2>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a1d      	ldr	r2, [pc, #116]	; (800256c <HAL_TIM_PWM_Start+0x160>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d018      	beq.n	800252e <HAL_TIM_PWM_Start+0x122>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <HAL_TIM_PWM_Start+0x164>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_TIM_PWM_Start+0x122>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250e:	d00e      	beq.n	800252e <HAL_TIM_PWM_Start+0x122>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a17      	ldr	r2, [pc, #92]	; (8002574 <HAL_TIM_PWM_Start+0x168>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_TIM_PWM_Start+0x122>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_TIM_PWM_Start+0x16c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_TIM_PWM_Start+0x122>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a14      	ldr	r2, [pc, #80]	; (800257c <HAL_TIM_PWM_Start+0x170>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d111      	bne.n	8002552 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d010      	beq.n	8002562 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002550:	e007      	b.n	8002562 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40013400 	.word	0x40013400
 8002574:	40000400 	.word	0x40000400
 8002578:	40000800 	.word	0x40000800
 800257c:	40000c00 	.word	0x40000c00

08002580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800259a:	2302      	movs	r3, #2
 800259c:	e0ae      	b.n	80026fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	f200 809f 	bhi.w	80026ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	080025e9 	.word	0x080025e9
 80025b8:	080026ed 	.word	0x080026ed
 80025bc:	080026ed 	.word	0x080026ed
 80025c0:	080026ed 	.word	0x080026ed
 80025c4:	08002629 	.word	0x08002629
 80025c8:	080026ed 	.word	0x080026ed
 80025cc:	080026ed 	.word	0x080026ed
 80025d0:	080026ed 	.word	0x080026ed
 80025d4:	0800266b 	.word	0x0800266b
 80025d8:	080026ed 	.word	0x080026ed
 80025dc:	080026ed 	.word	0x080026ed
 80025e0:	080026ed 	.word	0x080026ed
 80025e4:	080026ab 	.word	0x080026ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68b9      	ldr	r1, [r7, #8]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f9ca 	bl	8002988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0208 	orr.w	r2, r2, #8
 8002602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699a      	ldr	r2, [r3, #24]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0204 	bic.w	r2, r2, #4
 8002612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6999      	ldr	r1, [r3, #24]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	619a      	str	r2, [r3, #24]
      break;
 8002626:	e064      	b.n	80026f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fa1a 	bl	8002a68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6999      	ldr	r1, [r3, #24]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	021a      	lsls	r2, r3, #8
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	619a      	str	r2, [r3, #24]
      break;
 8002668:	e043      	b.n	80026f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	4618      	mov	r0, r3
 8002672:	f000 fa6d 	bl	8002b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69da      	ldr	r2, [r3, #28]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0208 	orr.w	r2, r2, #8
 8002684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0204 	bic.w	r2, r2, #4
 8002694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69d9      	ldr	r1, [r3, #28]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	61da      	str	r2, [r3, #28]
      break;
 80026a8:	e023      	b.n	80026f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fac1 	bl	8002c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69d9      	ldr	r1, [r3, #28]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	021a      	lsls	r2, r3, #8
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	61da      	str	r2, [r3, #28]
      break;
 80026ea:	e002      	b.n	80026f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	75fb      	strb	r3, [r7, #23]
      break;
 80026f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_TIM_ConfigClockSource+0x1c>
 800271c:	2302      	movs	r3, #2
 800271e:	e0b4      	b.n	800288a <HAL_TIM_ConfigClockSource+0x186>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800273e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002758:	d03e      	beq.n	80027d8 <HAL_TIM_ConfigClockSource+0xd4>
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275e:	f200 8087 	bhi.w	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002766:	f000 8086 	beq.w	8002876 <HAL_TIM_ConfigClockSource+0x172>
 800276a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800276e:	d87f      	bhi.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002770:	2b70      	cmp	r3, #112	; 0x70
 8002772:	d01a      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0xa6>
 8002774:	2b70      	cmp	r3, #112	; 0x70
 8002776:	d87b      	bhi.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002778:	2b60      	cmp	r3, #96	; 0x60
 800277a:	d050      	beq.n	800281e <HAL_TIM_ConfigClockSource+0x11a>
 800277c:	2b60      	cmp	r3, #96	; 0x60
 800277e:	d877      	bhi.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002780:	2b50      	cmp	r3, #80	; 0x50
 8002782:	d03c      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0xfa>
 8002784:	2b50      	cmp	r3, #80	; 0x50
 8002786:	d873      	bhi.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002788:	2b40      	cmp	r3, #64	; 0x40
 800278a:	d058      	beq.n	800283e <HAL_TIM_ConfigClockSource+0x13a>
 800278c:	2b40      	cmp	r3, #64	; 0x40
 800278e:	d86f      	bhi.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002790:	2b30      	cmp	r3, #48	; 0x30
 8002792:	d064      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x15a>
 8002794:	2b30      	cmp	r3, #48	; 0x30
 8002796:	d86b      	bhi.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 8002798:	2b20      	cmp	r3, #32
 800279a:	d060      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x15a>
 800279c:	2b20      	cmp	r3, #32
 800279e:	d867      	bhi.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05c      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x15a>
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d05a      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x15a>
 80027a8:	e062      	b.n	8002870 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6899      	ldr	r1, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f000 fb08 	bl	8002dce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	609a      	str	r2, [r3, #8]
      break;
 80027d6:	e04f      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	6899      	ldr	r1, [r3, #8]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f000 faf1 	bl	8002dce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027fa:	609a      	str	r2, [r3, #8]
      break;
 80027fc:	e03c      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	461a      	mov	r2, r3
 800280c:	f000 fa68 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2150      	movs	r1, #80	; 0x50
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fabf 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 800281c:	e02c      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	461a      	mov	r2, r3
 800282c:	f000 fa86 	bl	8002d3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2160      	movs	r1, #96	; 0x60
 8002836:	4618      	mov	r0, r3
 8002838:	f000 faaf 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 800283c:	e01c      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 fa48 	bl	8002ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2140      	movs	r1, #64	; 0x40
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fa9f 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 800285c:	e00c      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f000 fa96 	bl	8002d9a <TIM_ITRx_SetConfig>
      break;
 800286e:	e003      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
      break;
 8002874:	e000      	b.n	8002878 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a33      	ldr	r2, [pc, #204]	; (8002974 <TIM_Base_SetConfig+0xe0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a32      	ldr	r2, [pc, #200]	; (8002978 <TIM_Base_SetConfig+0xe4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00f      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a2f      	ldr	r2, [pc, #188]	; (800297c <TIM_Base_SetConfig+0xe8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <TIM_Base_SetConfig+0xec>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <TIM_Base_SetConfig+0xf0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <TIM_Base_SetConfig+0xe0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <TIM_Base_SetConfig+0x82>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a21      	ldr	r2, [pc, #132]	; (8002978 <TIM_Base_SetConfig+0xe4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00f      	beq.n	8002916 <TIM_Base_SetConfig+0x82>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d00b      	beq.n	8002916 <TIM_Base_SetConfig+0x82>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <TIM_Base_SetConfig+0xe8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <TIM_Base_SetConfig+0x82>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <TIM_Base_SetConfig+0xec>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d003      	beq.n	8002916 <TIM_Base_SetConfig+0x82>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <TIM_Base_SetConfig+0xf0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d108      	bne.n	8002928 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <TIM_Base_SetConfig+0xe0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d003      	beq.n	800295c <TIM_Base_SetConfig+0xc8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <TIM_Base_SetConfig+0xe4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	615a      	str	r2, [r3, #20]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	40012c00 	.word	0x40012c00
 8002978:	40013400 	.word	0x40013400
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800
 8002984:	40000c00 	.word	0x40000c00

08002988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f023 0201 	bic.w	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f023 0302 	bic.w	r3, r3, #2
 80029d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a20      	ldr	r2, [pc, #128]	; (8002a60 <TIM_OC1_SetConfig+0xd8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d003      	beq.n	80029ec <TIM_OC1_SetConfig+0x64>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <TIM_OC1_SetConfig+0xdc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10c      	bne.n	8002a06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a15      	ldr	r2, [pc, #84]	; (8002a60 <TIM_OC1_SetConfig+0xd8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d003      	beq.n	8002a16 <TIM_OC1_SetConfig+0x8e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <TIM_OC1_SetConfig+0xdc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d111      	bne.n	8002a3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	621a      	str	r2, [r3, #32]
}
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40013400 	.word	0x40013400

08002a68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f023 0210 	bic.w	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0320 	bic.w	r3, r3, #32
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <TIM_OC2_SetConfig+0xe0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_OC2_SetConfig+0x68>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <TIM_OC2_SetConfig+0xe4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10d      	bne.n	8002aec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <TIM_OC2_SetConfig+0xe0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_OC2_SetConfig+0x94>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <TIM_OC2_SetConfig+0xe4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d113      	bne.n	8002b24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40013400 	.word	0x40013400

08002b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <TIM_OC3_SetConfig+0xe0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_OC3_SetConfig+0x66>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <TIM_OC3_SetConfig+0xe4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10d      	bne.n	8002bd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <TIM_OC3_SetConfig+0xe0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d003      	beq.n	8002be2 <TIM_OC3_SetConfig+0x92>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <TIM_OC3_SetConfig+0xe4>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d113      	bne.n	8002c0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	621a      	str	r2, [r3, #32]
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40012c00 	.word	0x40012c00
 8002c34:	40013400 	.word	0x40013400

08002c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	021b      	lsls	r3, r3, #8
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	031b      	lsls	r3, r3, #12
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a11      	ldr	r2, [pc, #68]	; (8002cd8 <TIM_OC4_SetConfig+0xa0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_OC4_SetConfig+0x68>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a10      	ldr	r2, [pc, #64]	; (8002cdc <TIM_OC4_SetConfig+0xa4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d109      	bne.n	8002cb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	019b      	lsls	r3, r3, #6
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	621a      	str	r2, [r3, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40013400 	.word	0x40013400

08002ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f023 0201 	bic.w	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 030a 	bic.w	r3, r3, #10
 8002d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0210 	bic.w	r2, r3, #16
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	031b      	lsls	r3, r3, #12
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f043 0307 	orr.w	r3, r3, #7
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b087      	sub	sp, #28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
 8002dda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2201      	movs	r2, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a1a      	ldr	r2, [r3, #32]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f003 031f 	and.w	r3, r3, #31
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	621a      	str	r2, [r3, #32]
}
 8002e4a:	bf00      	nop
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e050      	b.n	8002f0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d018      	beq.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d00e      	beq.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a14      	ldr	r2, [pc, #80]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10c      	bne.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40013400 	.word	0x40013400
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800
 8002f28:	40000c00 	.word	0x40000c00

08002f2c <__libc_init_array>:
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	2600      	movs	r6, #0
 8002f30:	4d0c      	ldr	r5, [pc, #48]	; (8002f64 <__libc_init_array+0x38>)
 8002f32:	4c0d      	ldr	r4, [pc, #52]	; (8002f68 <__libc_init_array+0x3c>)
 8002f34:	1b64      	subs	r4, r4, r5
 8002f36:	10a4      	asrs	r4, r4, #2
 8002f38:	42a6      	cmp	r6, r4
 8002f3a:	d109      	bne.n	8002f50 <__libc_init_array+0x24>
 8002f3c:	f000 f822 	bl	8002f84 <_init>
 8002f40:	2600      	movs	r6, #0
 8002f42:	4d0a      	ldr	r5, [pc, #40]	; (8002f6c <__libc_init_array+0x40>)
 8002f44:	4c0a      	ldr	r4, [pc, #40]	; (8002f70 <__libc_init_array+0x44>)
 8002f46:	1b64      	subs	r4, r4, r5
 8002f48:	10a4      	asrs	r4, r4, #2
 8002f4a:	42a6      	cmp	r6, r4
 8002f4c:	d105      	bne.n	8002f5a <__libc_init_array+0x2e>
 8002f4e:	bd70      	pop	{r4, r5, r6, pc}
 8002f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f54:	4798      	blx	r3
 8002f56:	3601      	adds	r6, #1
 8002f58:	e7ee      	b.n	8002f38 <__libc_init_array+0xc>
 8002f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5e:	4798      	blx	r3
 8002f60:	3601      	adds	r6, #1
 8002f62:	e7f2      	b.n	8002f4a <__libc_init_array+0x1e>
 8002f64:	08002fc0 	.word	0x08002fc0
 8002f68:	08002fc0 	.word	0x08002fc0
 8002f6c:	08002fc0 	.word	0x08002fc0
 8002f70:	08002fc4 	.word	0x08002fc4

08002f74 <memset>:
 8002f74:	4603      	mov	r3, r0
 8002f76:	4402      	add	r2, r0
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d100      	bne.n	8002f7e <memset+0xa>
 8002f7c:	4770      	bx	lr
 8002f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f82:	e7f9      	b.n	8002f78 <memset+0x4>

08002f84 <_init>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	bf00      	nop
 8002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8a:	bc08      	pop	{r3}
 8002f8c:	469e      	mov	lr, r3
 8002f8e:	4770      	bx	lr

08002f90 <_fini>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	bf00      	nop
 8002f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f96:	bc08      	pop	{r3}
 8002f98:	469e      	mov	lr, r3
 8002f9a:	4770      	bx	lr
