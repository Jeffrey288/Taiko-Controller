
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016554  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001986c  08016740  08016740  00026740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ffac  0802ffac  00040344  2**0
                  CONTENTS
  4 .ARM          00000000  0802ffac  0802ffac  00040344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802ffac  0802ffac  00040344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ffac  0802ffac  0003ffac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ffb0  0802ffb0  0003ffb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0802ffb4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  20000348  080302f8  00040348  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016ec  080302f8  000416ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028397  00000000  00000000  0004036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c2e  00000000  00000000  00068704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c8  00000000  00000000  0006e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  00070600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022020  00000000  00000000  00072658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d1b2  00000000  00000000  00094678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2e20  00000000  00000000  000c182a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017464a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a520  00000000  00000000  0017469c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000348 	.word	0x20000348
 8000204:	00000000 	.word	0x00000000
 8000208:	08016724 	.word	0x08016724

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000034c 	.word	0x2000034c
 8000224:	08016724 	.word	0x08016724

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <AddDrum>:

AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <AddDrum+0x38>)
 800106a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 800106e:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <AddDrum+0x3c>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8001078:	81bb      	strh	r3, [r7, #12]
 800107a:	2300      	movs	r3, #0
 800107c:	81fb      	strh	r3, [r7, #14]
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001086:	f000 f809 	bl	800109c <AddTrack>
		.pos = 0
	});
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000
 8001098:	08016900 	.word	0x08016900

0800109c <AddTrack>:

void AddTrack(AudioTrack track) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	463b      	mov	r3, r7
 80010a4:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <AddTrack+0x3c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b09      	cmp	r3, #9
 80010ae:	dc0d      	bgt.n	80010cc <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <AddTrack+0x3c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <AddTrack+0x3c>)
 80010b8:	600a      	str	r2, [r1, #0]
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <AddTrack+0x40>)
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	4413      	add	r3, r2
 80010c0:	463a      	mov	r2, r7
 80010c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80010ca:	e000      	b.n	80010ce <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 80010cc:	bf00      	nop
}
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2000079c 	.word	0x2000079c
 80010dc:	2000074c 	.word	0x2000074c

080010e0 <RemoveTrack>:

void RemoveTrack(uint16_t index) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
	if (num_tracks <= 0) return;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <RemoveTrack+0x44>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	dd12      	ble.n	8001118 <RemoveTrack+0x38>
	audio_tracks[index] = audio_tracks[--num_tracks];
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <RemoveTrack+0x44>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <RemoveTrack+0x44>)
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <RemoveTrack+0x44>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4809      	ldr	r0, [pc, #36]	; (8001128 <RemoveTrack+0x48>)
 8001104:	4908      	ldr	r1, [pc, #32]	; (8001128 <RemoveTrack+0x48>)
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4403      	add	r3, r0
 800110a:	00d2      	lsls	r2, r2, #3
 800110c:	440a      	add	r2, r1
 800110e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001112:	e883 0003 	stmia.w	r3, {r0, r1}
 8001116:	e000      	b.n	800111a <RemoveTrack+0x3a>
	if (num_tracks <= 0) return;
 8001118:	bf00      	nop
}
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2000079c 	.word	0x2000079c
 8001128:	2000074c 	.word	0x2000074c

0800112c <PrecomputeMix>:

void PrecomputeMix() {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b087      	sub	sp, #28
 8001130:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8001132:	4b55      	ldr	r3, [pc, #340]	; (8001288 <PrecomputeMix+0x15c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dc11      	bgt.n	800115e <PrecomputeMix+0x32>
		if (audio_dma_on) {
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <PrecomputeMix+0x160>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <PrecomputeMix+0x24>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001142:	2100      	movs	r1, #0
 8001144:	4852      	ldr	r0, [pc, #328]	; (8001290 <PrecomputeMix+0x164>)
 8001146:	f003 fb21 	bl	800478c <HAL_DAC_Stop_DMA>
			audio_dma_on = 0;
 800114a:	4b50      	ldr	r3, [pc, #320]	; (800128c <PrecomputeMix+0x160>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
		}
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8001150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001154:	2100      	movs	r1, #0
 8001156:	484f      	ldr	r0, [pc, #316]	; (8001294 <PrecomputeMix+0x168>)
 8001158:	f012 fadc 	bl	8013714 <memset>
			}
		}

	}

}
 800115c:	e090      	b.n	8001280 <PrecomputeMix+0x154>
		if (!audio_dma_on) {
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <PrecomputeMix+0x160>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d126      	bne.n	80011b4 <PrecomputeMix+0x88>
			HAL_TIM_Base_Stop(&htim2);
 8001166:	484c      	ldr	r0, [pc, #304]	; (8001298 <PrecomputeMix+0x16c>)
 8001168:	f009 fb9e 	bl	800a8a8 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim4);
 800116c:	484b      	ldr	r0, [pc, #300]	; (800129c <PrecomputeMix+0x170>)
 800116e:	f009 fb9b 	bl	800a8a8 <HAL_TIM_Base_Stop>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8001172:	2304      	movs	r3, #4
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800117a:	4a46      	ldr	r2, [pc, #280]	; (8001294 <PrecomputeMix+0x168>)
 800117c:	2100      	movs	r1, #0
 800117e:	4844      	ldr	r0, [pc, #272]	; (8001290 <PrecomputeMix+0x164>)
 8001180:	f003 fa54 	bl	800462c <HAL_DAC_Start_DMA>
			TIM2->CNT = 0;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 800118c:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <PrecomputeMix+0x174>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim4);
 8001192:	4842      	ldr	r0, [pc, #264]	; (800129c <PrecomputeMix+0x170>)
 8001194:	f009 fbae 	bl	800a8f4 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8001198:	483f      	ldr	r0, [pc, #252]	; (8001298 <PrecomputeMix+0x16c>)
 800119a:	f009 fb2d 	bl	800a7f8 <HAL_TIM_Base_Start>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 800119e:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <PrecomputeMix+0x16c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <PrecomputeMix+0x16c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	60da      	str	r2, [r3, #12]
			audio_dma_on = 1;
 80011ae:	4b37      	ldr	r3, [pc, #220]	; (800128c <PrecomputeMix+0x160>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	e05e      	b.n	8001278 <PrecomputeMix+0x14c>
			int32_t sum = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
			int j = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 80011c2:	e033      	b.n	800122c <PrecomputeMix+0x100>
				sum += audio_tracks[j].buff[audio_tracks[j].pos++] / 4;
 80011c4:	4a37      	ldr	r2, [pc, #220]	; (80012a4 <PrecomputeMix+0x178>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80011cc:	4a35      	ldr	r2, [pc, #212]	; (80012a4 <PrecomputeMix+0x178>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4413      	add	r3, r2
 80011d4:	88da      	ldrh	r2, [r3, #6]
 80011d6:	1c53      	adds	r3, r2, #1
 80011d8:	b29c      	uxth	r4, r3
 80011da:	4832      	ldr	r0, [pc, #200]	; (80012a4 <PrecomputeMix+0x178>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4403      	add	r3, r0
 80011e2:	4620      	mov	r0, r4
 80011e4:	80d8      	strh	r0, [r3, #6]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	440b      	add	r3, r1
 80011ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da00      	bge.n	80011f6 <PrecomputeMix+0xca>
 80011f4:	3303      	adds	r3, #3
 80011f6:	109b      	asrs	r3, r3, #2
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4413      	add	r3, r2
 8001200:	60bb      	str	r3, [r7, #8]
				if (audio_tracks[j].pos > audio_tracks[j].length) {
 8001202:	4a28      	ldr	r2, [pc, #160]	; (80012a4 <PrecomputeMix+0x178>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	88da      	ldrh	r2, [r3, #6]
 800120c:	4925      	ldr	r1, [pc, #148]	; (80012a4 <PrecomputeMix+0x178>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	889b      	ldrh	r3, [r3, #4]
 8001216:	429a      	cmp	r2, r3
 8001218:	d905      	bls.n	8001226 <PrecomputeMix+0xfa>
					RemoveTrack(j);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	b29b      	uxth	r3, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff5e 	bl	80010e0 <RemoveTrack>
 8001224:	e002      	b.n	800122c <PrecomputeMix+0x100>
					j++;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <PrecomputeMix+0x15c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	dbc6      	blt.n	80011c4 <PrecomputeMix+0x98>
			if (sum < -32768) {
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800123c:	da05      	bge.n	800124a <PrecomputeMix+0x11e>
				audio_buff[i] = 0;
 800123e:	4a15      	ldr	r2, [pc, #84]	; (8001294 <PrecomputeMix+0x168>)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2100      	movs	r1, #0
 8001244:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001248:	e013      	b.n	8001272 <PrecomputeMix+0x146>
			} else if (sum > 32767) {
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001250:	db06      	blt.n	8001260 <PrecomputeMix+0x134>
				audio_buff[i] = 65535;
 8001252:	4a10      	ldr	r2, [pc, #64]	; (8001294 <PrecomputeMix+0x168>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800125a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800125e:	e008      	b.n	8001272 <PrecomputeMix+0x146>
				audio_buff[i] = sum + 32768;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	b29b      	uxth	r3, r3
 8001264:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001268:	b299      	uxth	r1, r3
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <PrecomputeMix+0x168>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127e:	db9c      	blt.n	80011ba <PrecomputeMix+0x8e>
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	2000079c 	.word	0x2000079c
 800128c:	200007a0 	.word	0x200007a0
 8001290:	20000ba4 	.word	0x20000ba4
 8001294:	20000364 	.word	0x20000364
 8001298:	20000d70 	.word	0x20000d70
 800129c:	20000e00 	.word	0x20000e00
 80012a0:	40000800 	.word	0x40000800
 80012a4:	2000074c 	.word	0x2000074c

080012a8 <ButtonPadInit>:
#include "button.h"

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
void ButtonPadInit() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2110      	movs	r1, #16
 80012b0:	480a      	ldr	r0, [pc, #40]	; (80012dc <ButtonPadInit+0x34>)
 80012b2:	f004 f9d2 	bl	800565a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2120      	movs	r1, #32
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <ButtonPadInit+0x34>)
 80012bc:	f004 f9cd 	bl	800565a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2140      	movs	r1, #64	; 0x40
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <ButtonPadInit+0x34>)
 80012c6:	f004 f9c8 	bl	800565a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80012ca:	2201      	movs	r2, #1
 80012cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <ButtonPadInit+0x38>)
 80012d2:	f004 f9c2 	bl	800565a <HAL_GPIO_WritePin>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40011800 	.word	0x40011800
 80012e0:	40011000 	.word	0x40011000

080012e4 <ButtonPadCallback>:

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
int ButtonPadCallback(int GPIO_Pin) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <ButtonPadCallback+0x2c>)
 80012f4:	f004 f99a 	bl	800562c <HAL_GPIO_ReadPin>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10a      	bne.n	8001318 <ButtonPadCallback+0x34>
		previousMillis = HAL_GetTick();
 8001302:	f002 fcb3 	bl	8003c6c <HAL_GetTick>
 8001306:	4603      	mov	r3, r0
 8001308:	4a02      	ldr	r2, [pc, #8]	; (8001314 <ButtonPadCallback+0x30>)
 800130a:	6013      	str	r3, [r2, #0]
		return 0;
 800130c:	2300      	movs	r3, #0
 800130e:	e14c      	b.n	80015aa <ButtonPadCallback+0x2c6>
 8001310:	40011800 	.word	0x40011800
 8001314:	200007b4 	.word	0x200007b4
	}

	currentMillis = HAL_GetTick();
 8001318:	f002 fca8 	bl	8003c6c <HAL_GetTick>
 800131c:	4603      	mov	r3, r0
 800131e:	4aa5      	ldr	r2, [pc, #660]	; (80015b4 <ButtonPadCallback+0x2d0>)
 8001320:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 8001322:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 8001328:	4ba2      	ldr	r3, [pc, #648]	; (80015b4 <ButtonPadCallback+0x2d0>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4ba3      	ldr	r3, [pc, #652]	; (80015bc <ButtonPadCallback+0x2d8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b14      	cmp	r3, #20
 8001334:	f240 8133 	bls.w	800159e <ButtonPadCallback+0x2ba>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8001338:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800133a:	220f      	movs	r2, #15
 800133c:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 800133e:	4ba0      	ldr	r3, [pc, #640]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001344:	4b9e      	ldr	r3, [pc, #632]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	4b9d      	ldr	r3, [pc, #628]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800134c:	2202      	movs	r2, #2
 800134e:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001350:	499b      	ldr	r1, [pc, #620]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001352:	489c      	ldr	r0, [pc, #624]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001354:	f003 ffd6 	bl	8005304 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001358:	2201      	movs	r2, #1
 800135a:	2110      	movs	r1, #16
 800135c:	4899      	ldr	r0, [pc, #612]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800135e:	f004 f97c 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2120      	movs	r1, #32
 8001366:	4897      	ldr	r0, [pc, #604]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001368:	f004 f977 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	4894      	ldr	r0, [pc, #592]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001372:	f004 f972 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	4892      	ldr	r0, [pc, #584]	; (80015c8 <ButtonPadCallback+0x2e4>)
 800137e:	f004 f96c 	bl	800565a <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 8001382:	2101      	movs	r1, #1
 8001384:	488f      	ldr	r0, [pc, #572]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001386:	f004 f951 	bl	800562c <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d005      	beq.n	800139c <ButtonPadCallback+0xb8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d102      	bne.n	800139c <ButtonPadCallback+0xb8>
 8001396:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001398:	2210      	movs	r2, #16
 800139a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 800139c:	2102      	movs	r1, #2
 800139e:	4889      	ldr	r0, [pc, #548]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013a0:	f004 f944 	bl	800562c <HAL_GPIO_ReadPin>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <ButtonPadCallback+0xd2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d102      	bne.n	80013b6 <ButtonPadCallback+0xd2>
 80013b0:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013b2:	220f      	movs	r2, #15
 80013b4:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 80013b6:	2104      	movs	r1, #4
 80013b8:	4882      	ldr	r0, [pc, #520]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013ba:	f004 f937 	bl	800562c <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d005      	beq.n	80013d0 <ButtonPadCallback+0xec>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d102      	bne.n	80013d0 <ButtonPadCallback+0xec>
 80013ca:	4b7b      	ldr	r3, [pc, #492]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013cc:	220e      	movs	r2, #14
 80013ce:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 80013d0:	2108      	movs	r1, #8
 80013d2:	487c      	ldr	r0, [pc, #496]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013d4:	f004 f92a 	bl	800562c <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <ButtonPadCallback+0x106>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d102      	bne.n	80013ea <ButtonPadCallback+0x106>
 80013e4:	4b74      	ldr	r3, [pc, #464]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80013e6:	220d      	movs	r2, #13
 80013e8:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	4875      	ldr	r0, [pc, #468]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013f0:	f004 f933 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2120      	movs	r1, #32
 80013f8:	4872      	ldr	r0, [pc, #456]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80013fa:	f004 f92e 	bl	800565a <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 80013fe:	2101      	movs	r1, #1
 8001400:	4870      	ldr	r0, [pc, #448]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001402:	f004 f913 	bl	800562c <HAL_GPIO_ReadPin>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <ButtonPadCallback+0x134>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <ButtonPadCallback+0x134>
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001414:	220c      	movs	r2, #12
 8001416:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 8001418:	2102      	movs	r1, #2
 800141a:	486a      	ldr	r0, [pc, #424]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800141c:	f004 f906 	bl	800562c <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <ButtonPadCallback+0x14e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d102      	bne.n	8001432 <ButtonPadCallback+0x14e>
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800142e:	220b      	movs	r2, #11
 8001430:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 8001432:	2104      	movs	r1, #4
 8001434:	4863      	ldr	r0, [pc, #396]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001436:	f004 f8f9 	bl	800562c <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <ButtonPadCallback+0x168>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d102      	bne.n	800144c <ButtonPadCallback+0x168>
 8001446:	4b5c      	ldr	r3, [pc, #368]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001448:	220a      	movs	r2, #10
 800144a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 800144c:	2108      	movs	r1, #8
 800144e:	485d      	ldr	r0, [pc, #372]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001450:	f004 f8ec 	bl	800562c <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <ButtonPadCallback+0x182>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d102      	bne.n	8001466 <ButtonPadCallback+0x182>
 8001460:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001462:	2209      	movs	r2, #9
 8001464:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2120      	movs	r1, #32
 800146a:	4856      	ldr	r0, [pc, #344]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800146c:	f004 f8f5 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4853      	ldr	r0, [pc, #332]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001476:	f004 f8f0 	bl	800565a <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 800147a:	2101      	movs	r1, #1
 800147c:	4851      	ldr	r0, [pc, #324]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800147e:	f004 f8d5 	bl	800562c <HAL_GPIO_ReadPin>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <ButtonPadCallback+0x1b0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <ButtonPadCallback+0x1b0>
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001490:	2208      	movs	r2, #8
 8001492:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 8001494:	2102      	movs	r1, #2
 8001496:	484b      	ldr	r0, [pc, #300]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001498:	f004 f8c8 	bl	800562c <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <ButtonPadCallback+0x1ca>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d102      	bne.n	80014ae <ButtonPadCallback+0x1ca>
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 80014ae:	2104      	movs	r1, #4
 80014b0:	4844      	ldr	r0, [pc, #272]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014b2:	f004 f8bb 	bl	800562c <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <ButtonPadCallback+0x1e4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d102      	bne.n	80014c8 <ButtonPadCallback+0x1e4>
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014c4:	2206      	movs	r2, #6
 80014c6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 80014c8:	2108      	movs	r1, #8
 80014ca:	483e      	ldr	r0, [pc, #248]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014cc:	f004 f8ae 	bl	800562c <HAL_GPIO_ReadPin>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d005      	beq.n	80014e2 <ButtonPadCallback+0x1fe>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d102      	bne.n	80014e2 <ButtonPadCallback+0x1fe>
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80014de:	2205      	movs	r2, #5
 80014e0:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2140      	movs	r1, #64	; 0x40
 80014e6:	4837      	ldr	r0, [pc, #220]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014e8:	f004 f8b7 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f2:	4835      	ldr	r0, [pc, #212]	; (80015c8 <ButtonPadCallback+0x2e4>)
 80014f4:	f004 f8b1 	bl	800565a <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 80014f8:	2101      	movs	r1, #1
 80014fa:	4832      	ldr	r0, [pc, #200]	; (80015c4 <ButtonPadCallback+0x2e0>)
 80014fc:	f004 f896 	bl	800562c <HAL_GPIO_ReadPin>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <ButtonPadCallback+0x22e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d102      	bne.n	8001512 <ButtonPadCallback+0x22e>
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800150e:	2204      	movs	r2, #4
 8001510:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 8001512:	2102      	movs	r1, #2
 8001514:	482b      	ldr	r0, [pc, #172]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001516:	f004 f889 	bl	800562c <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <ButtonPadCallback+0x248>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d102      	bne.n	800152c <ButtonPadCallback+0x248>
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001528:	2203      	movs	r2, #3
 800152a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 800152c:	2104      	movs	r1, #4
 800152e:	4825      	ldr	r0, [pc, #148]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001530:	f004 f87c 	bl	800562c <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <ButtonPadCallback+0x262>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d102      	bne.n	8001546 <ButtonPadCallback+0x262>
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <ButtonPadCallback+0x2d4>)
 8001542:	2202      	movs	r2, #2
 8001544:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 8001546:	2108      	movs	r1, #8
 8001548:	481e      	ldr	r0, [pc, #120]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800154a:	f004 f86f 	bl	800562c <HAL_GPIO_ReadPin>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <ButtonPadCallback+0x27c>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b08      	cmp	r3, #8
 8001558:	d102      	bne.n	8001560 <ButtonPadCallback+0x27c>
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <ButtonPadCallback+0x2d4>)
 800155c:	2201      	movs	r2, #1
 800155e:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001560:	2201      	movs	r2, #1
 8001562:	2110      	movs	r1, #16
 8001564:	4817      	ldr	r0, [pc, #92]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001566:	f004 f878 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	2120      	movs	r1, #32
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <ButtonPadCallback+0x2e0>)
 8001570:	f004 f873 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800157a:	f004 f86e 	bl	800565a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <ButtonPadCallback+0x2e4>)
 8001586:	f004 f868 	bl	800565a <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <ButtonPadCallback+0x2dc>)
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <ButtonPadCallback+0x2e8>)
 800158e:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001592:	2202      	movs	r2, #2
 8001594:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <ButtonPadCallback+0x2dc>)
 8001598:	480a      	ldr	r0, [pc, #40]	; (80015c4 <ButtonPadCallback+0x2e0>)
 800159a:	f003 feb3 	bl	8005304 <HAL_GPIO_Init>
	}

	previousMillis = currentMillis;
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <ButtonPadCallback+0x2d0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <ButtonPadCallback+0x2d8>)
 80015a4:	6013      	str	r3, [r2, #0]
	return keyPressed;
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <ButtonPadCallback+0x2d4>)
 80015a8:	881b      	ldrh	r3, [r3, #0]

}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200007b8 	.word	0x200007b8
 80015b8:	200007bc 	.word	0x200007bc
 80015bc:	200007b4 	.word	0x200007b4
 80015c0:	200007a4 	.word	0x200007a4
 80015c4:	40011800 	.word	0x40011800
 80015c8:	40011000 	.word	0x40011000
 80015cc:	10310000 	.word	0x10310000

080015d0 <DrumInit>:
uint8_t drum_i2c_buff[20];
DrumStruct drums[NUM_DRUMS];
DrumOutputDevice drum_output_device;
uint32_t drum_max_val[NUM_DRUMS] = {0};

void DrumInit() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 80015d6:	af00      	add	r7, sp, #0

	// init ADC
//	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);

	// init drums struct
	drum_output_device = DRUM_OUTPUT_NONE;
 80015d8:	4bb9      	ldr	r3, [pc, #740]	; (80018c0 <DrumInit+0x2f0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
//	drum_output_callback = &DrumOutputDefault;
	for (int i = 0; i < NUM_DRUMS; i++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80015e4:	e070      	b.n	80016c8 <DrumInit+0xf8>
		drums[i].type = i;
 80015e6:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80015ea:	b2d8      	uxtb	r0, r3
 80015ec:	49b5      	ldr	r1, [pc, #724]	; (80018c4 <DrumInit+0x2f4>)
 80015ee:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	440b      	add	r3, r1
 80015fc:	4602      	mov	r2, r0
 80015fe:	701a      	strb	r2, [r3, #0]
		if (drums[i].type == DRUM_LEFT_KA || drums[i].type == DRUM_RIGHT_KA)
 8001600:	49b0      	ldr	r1, [pc, #704]	; (80018c4 <DrumInit+0x2f4>)
 8001602:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	440b      	add	r3, r1
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <DrumInit+0x5c>
 8001616:	49ab      	ldr	r1, [pc, #684]	; (80018c4 <DrumInit+0x2f4>)
 8001618:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	440b      	add	r3, r1
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d10b      	bne.n	8001644 <DrumInit+0x74>
			drums[i].sound = DRUM_KA;
 800162c:	49a5      	ldr	r1, [pc, #660]	; (80018c4 <DrumInit+0x2f4>)
 800162e:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	440b      	add	r3, r1
 800163c:	3301      	adds	r3, #1
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e00a      	b.n	800165a <DrumInit+0x8a>
		else
			drums[i].sound = DRUM_DON;
 8001644:	499f      	ldr	r1, [pc, #636]	; (80018c4 <DrumInit+0x2f4>)
 8001646:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	3301      	adds	r3, #1
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 800165a:	499a      	ldr	r1, [pc, #616]	; (80018c4 <DrumInit+0x2f4>)
 800165c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	440b      	add	r3, r1
 800166a:	3308      	adds	r3, #8
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 8001670:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4a94      	ldr	r2, [pc, #592]	; (80018c8 <DrumInit+0x2f8>)
 8001678:	1899      	adds	r1, r3, r2
 800167a:	4892      	ldr	r0, [pc, #584]	; (80018c4 <DrumInit+0x2f4>)
 800167c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	4403      	add	r3, r0
 800168a:	3310      	adds	r3, #16
 800168c:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 800168e:	498d      	ldr	r1, [pc, #564]	; (80018c4 <DrumInit+0x2f4>)
 8001690:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	440b      	add	r3, r1
 800169e:	3304      	adds	r3, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80016a4:	f002 fae2 	bl	8003c6c <HAL_GetTick>
 80016a8:	4601      	mov	r1, r0
 80016aa:	4886      	ldr	r0, [pc, #536]	; (80018c4 <DrumInit+0x2f4>)
 80016ac:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4403      	add	r3, r0
 80016ba:	330c      	adds	r3, #12
 80016bc:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 80016be:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80016c2:	3301      	adds	r3, #1
 80016c4:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80016c8:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	dd8a      	ble.n	80015e6 <DrumInit+0x16>

	// deal with sd card stuff
	// Format: {drum[0], drum[1], drum[2], drum[3], checksum}
	FIL file;
	uint16_t temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 80016d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016d4:	2203      	movs	r2, #3
 80016d6:	497d      	ldr	r1, [pc, #500]	; (80018cc <DrumInit+0x2fc>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f010 fdd7 	bl	801228c <f_open>
 80016de:	4603      	mov	r3, r0
 80016e0:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	if (fresult == FR_OK) {
 80016e4:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f040 8084 	bne.w	80017f6 <DrumInit+0x226>
		uint32_t buff[5];
//		fresult = f_read(&file, buff, 5 * 4, &temp);
		if (buff[0] + buff[1] + buff[2] + buff[3] == buff[4]) {
 80016ee:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80016f2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80016fc:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	441a      	add	r2, r3
 8001704:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001708:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	441a      	add	r2, r3
 8001710:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001714:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	441a      	add	r2, r3
 800171c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001720:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	429a      	cmp	r2, r3
 8001728:	d11f      	bne.n	800176a <DrumInit+0x19a>
			for (int i = 0; i < 4; i++) drums[i].sensor_thresh = buff[i];
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001730:	e016      	b.n	8001760 <DrumInit+0x190>
 8001732:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001736:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800173a:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800173e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001742:	4860      	ldr	r0, [pc, #384]	; (80018c4 <DrumInit+0x2f4>)
 8001744:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4403      	add	r3, r0
 8001752:	3328      	adds	r3, #40	; 0x28
 8001754:	6019      	str	r1, [r3, #0]
 8001756:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800175a:	3301      	adds	r3, #1
 800175c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001760:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8001764:	2b03      	cmp	r3, #3
 8001766:	dde4      	ble.n	8001732 <DrumInit+0x162>
 8001768:	e03d      	b.n	80017e6 <DrumInit+0x216>
		} else {
			DrumCalibrate();
 800176a:	f000 f969 	bl	8001a40 <DrumCalibrate>
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800176e:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <DrumInit+0x2f4>)
 8001770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001772:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001776:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <DrumInit+0x2f4>)
 800177e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001780:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001784:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	4b4e      	ldr	r3, [pc, #312]	; (80018c4 <DrumInit+0x2f4>)
 800178c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001790:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001794:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <DrumInit+0x2f4>)
 800179c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80017a0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017a4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017a8:	60da      	str	r2, [r3, #12]
					drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <DrumInit+0x2f4>)
 80017ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <DrumInit+0x2f4>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	441a      	add	r2, r3
 80017b4:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <DrumInit+0x2f4>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	441a      	add	r2, r3
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <DrumInit+0x2f4>)
 80017be:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80017c2:	441a      	add	r2, r3
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80017c4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80017c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80017cc:	611a      	str	r2, [r3, #16]
			fresult = f_write(&file, buff, 5 * 4, &temp);
 80017ce:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80017d2:	f107 0114 	add.w	r1, r7, #20
 80017d6:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80017da:	2214      	movs	r2, #20
 80017dc:	f010 ffcf 	bl	801277e <f_write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		}
		LCD_Print(0, 19, "Success: Have file, reading... %d", fresult);
 80017e6:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80017ea:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <DrumInit+0x300>)
 80017ec:	2113      	movs	r1, #19
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 ff2e 	bl	8002650 <LCD_Print>
 80017f4:	e05a      	b.n	80018ac <DrumInit+0x2dc>
	} else if (fresult == FR_NO_FILE) {
 80017f6:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d14e      	bne.n	800189c <DrumInit+0x2cc>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 80017fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001802:	2206      	movs	r2, #6
 8001804:	4931      	ldr	r1, [pc, #196]	; (80018cc <DrumInit+0x2fc>)
 8001806:	4618      	mov	r0, r3
 8001808:	f010 fd40 	bl	801228c <f_open>
 800180c:	4603      	mov	r3, r0
 800180e:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		DrumCalibrate();
 8001812:	f000 f915 	bl	8001a40 <DrumCalibrate>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001816:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <DrumInit+0x2f4>)
 8001818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800181a:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800181e:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <DrumInit+0x2f4>)
 8001826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001828:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800182c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <DrumInit+0x2f4>)
 8001834:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001838:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800183c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <DrumInit+0x2f4>)
 8001844:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001848:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800184c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001850:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <DrumInit+0x2f4>)
 8001854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <DrumInit+0x2f4>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	441a      	add	r2, r3
 800185c:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <DrumInit+0x2f4>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	441a      	add	r2, r3
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <DrumInit+0x2f4>)
 8001866:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800186a:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800186c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001870:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001874:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001876:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800187a:	4639      	mov	r1, r7
 800187c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001880:	2214      	movs	r2, #20
 8001882:	f010 ff7c 	bl	801277e <f_write>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		LCD_Print(0, 19, "Error: No file, calibrating... %d", fresult);
 800188c:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8001890:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <DrumInit+0x304>)
 8001892:	2113      	movs	r1, #19
 8001894:	2000      	movs	r0, #0
 8001896:	f000 fedb 	bl	8002650 <LCD_Print>
 800189a:	e007      	b.n	80018ac <DrumInit+0x2dc>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 800189c:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <DrumInit+0x308>)
 80018a2:	2113      	movs	r1, #19
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 fed3 	bl	8002650 <LCD_Print>
 80018aa:	e7fe      	b.n	80018aa <DrumInit+0x2da>
	}
	f_close(&file);
 80018ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018b0:	4618      	mov	r0, r3
 80018b2:	f011 f9cb 	bl	8012c4c <f_close>

}
 80018b6:	bf00      	nop
 80018b8:	f507 771e 	add.w	r7, r7, #632	; 0x278
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000ac0 	.word	0x20000ac0
 80018c4:	20000a00 	.word	0x20000a00
 80018c8:	200009f0 	.word	0x200009f0
 80018cc:	08016740 	.word	0x08016740
 80018d0:	0801674c 	.word	0x0801674c
 80018d4:	08016770 	.word	0x08016770
 80018d8:	08016794 	.word	0x08016794

080018dc <DrumThreshWrite>:

void DrumThreshWrite() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80018e2:	af00      	add	r7, sp, #0
	FIL file;
	int temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 80018e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018e8:	2203      	movs	r2, #3
 80018ea:	4952      	ldr	r1, [pc, #328]	; (8001a34 <DrumThreshWrite+0x158>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f010 fccd 	bl	801228c <f_open>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	if (fresult == FR_OK) {
 80018f8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d13c      	bne.n	800197a <DrumThreshWrite+0x9e>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <DrumThreshWrite+0x15c>)
 8001902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001904:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001908:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <DrumThreshWrite+0x15c>)
 8001910:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001912:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001916:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <DrumThreshWrite+0x15c>)
 800191e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001922:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001926:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	4b42      	ldr	r3, [pc, #264]	; (8001a38 <DrumThreshWrite+0x15c>)
 800192e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001932:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001936:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800193a:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <DrumThreshWrite+0x15c>)
 800193e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <DrumThreshWrite+0x15c>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	441a      	add	r2, r3
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <DrumThreshWrite+0x15c>)
 8001948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194c:	441a      	add	r2, r3
 800194e:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <DrumThreshWrite+0x15c>)
 8001950:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001954:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001956:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800195a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800195e:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	f107 0118 	add.w	r1, r7, #24
 8001968:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800196c:	2214      	movs	r2, #20
 800196e:	f010 ff06 	bl	801277e <f_write>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001978:	e051      	b.n	8001a1e <DrumThreshWrite+0x142>
	} else if (fresult == FR_NO_FILE) {
 800197a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 800197e:	2b04      	cmp	r3, #4
 8001980:	d145      	bne.n	8001a0e <DrumThreshWrite+0x132>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 8001982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001986:	2206      	movs	r2, #6
 8001988:	492a      	ldr	r1, [pc, #168]	; (8001a34 <DrumThreshWrite+0x158>)
 800198a:	4618      	mov	r0, r3
 800198c:	f010 fc7e 	bl	801228c <f_open>
 8001990:	4603      	mov	r3, r0
 8001992:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <DrumThreshWrite+0x15c>)
 8001998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800199a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800199e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <DrumThreshWrite+0x15c>)
 80019a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <DrumThreshWrite+0x15c>)
 80019b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <DrumThreshWrite+0x15c>)
 80019c4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80019c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019d0:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <DrumThreshWrite+0x15c>)
 80019d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <DrumThreshWrite+0x15c>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	441a      	add	r2, r3
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <DrumThreshWrite+0x15c>)
 80019de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e2:	441a      	add	r2, r3
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <DrumThreshWrite+0x15c>)
 80019e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80019ea:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80019ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80019f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80019f4:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 80019f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fa:	1d39      	adds	r1, r7, #4
 80019fc:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001a00:	2214      	movs	r2, #20
 8001a02:	f010 febc 	bl	801277e <f_write>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001a0c:	e007      	b.n	8001a1e <DrumThreshWrite+0x142>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 8001a0e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <DrumThreshWrite+0x160>)
 8001a14:	2113      	movs	r1, #19
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 fe1a 	bl	8002650 <LCD_Print>
 8001a1c:	e7fe      	b.n	8001a1c <DrumThreshWrite+0x140>
	}
	f_close(&file);
 8001a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a22:	4618      	mov	r0, r3
 8001a24:	f011 f912 	bl	8012c4c <f_close>
}
 8001a28:	bf00      	nop
 8001a2a:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08016740 	.word	0x08016740
 8001a38:	20000a00 	.word	0x20000a00
 8001a3c:	08016794 	.word	0x08016794

08001a40 <DrumCalibrate>:

// Let's not touch this :D
void DrumCalibrate() {
 8001a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a44:	b092      	sub	sp, #72	; 0x48
 8001a46:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001a48:	f002 f910 	bl	8003c6c <HAL_GetTick>
 8001a4c:	6478      	str	r0, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 8001a4e:	2010      	movs	r0, #16
 8001a50:	f011 fe50 	bl	80136f4 <malloc>
 8001a54:	4603      	mov	r3, r0
 8001a56:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8001a5c:	e00c      	b.n	8001a78 <DrumCalibrate+0x38>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 8001a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	18d4      	adds	r4, r2, r3
 8001a66:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a6a:	f011 fe43 	bl	80136f4 <malloc>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a74:	3301      	adds	r3, #1
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
 8001a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	ddef      	ble.n	8001a5e <DrumCalibrate+0x1e>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a82:	e023      	b.n	8001acc <DrumCalibrate+0x8c>
		while (last_tick == HAL_GetTick()) {
 8001a84:	bf00      	nop
 8001a86:	f002 f8f1 	bl	8003c6c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d0f9      	beq.n	8001a86 <DrumCalibrate+0x46>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 8001a92:	f002 f8eb 	bl	8003c6c <HAL_GetTick>
 8001a96:	6478      	str	r0, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a9c:	e010      	b.n	8001ac0 <DrumCalibrate+0x80>
			values[j][i] = drum_sensor_values[j];
 8001a9e:	4a9c      	ldr	r2, [pc, #624]	; (8001d10 <DrumCalibrate+0x2d0>)
 8001aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4413      	add	r3, r2
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	b28a      	uxth	r2, r1
 8001ab8:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001abc:	3301      	adds	r3, #1
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	ddeb      	ble.n	8001a9e <DrumCalibrate+0x5e>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac8:	3301      	adds	r3, #1
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ace:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ad2:	dbd7      	blt.n	8001a84 <DrumCalibrate+0x44>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad8:	e0f2      	b.n	8001cc0 <DrumCalibrate+0x280>
		uint32_t sum = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae6:	e026      	b.n	8001b36 <DrumCalibrate+0xf6>
			sum += values[i][j];
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	4413      	add	r3, r2
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	4413      	add	r3, r2
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 8001b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4413      	add	r3, r2
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d209      	bcs.n	8001b30 <DrumCalibrate+0xf0>
				max_val = values[i][j];
 8001b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4413      	add	r3, r2
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b32:	3301      	adds	r3, #1
 8001b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b3c:	dbd4      	blt.n	8001ae8 <DrumCalibrate+0xa8>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 8001b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b40:	f7fe fcbc 	bl	80004bc <__aeabi_ui2d>
 8001b44:	a36e      	add	r3, pc, #440	; (adr r3, 8001d00 <DrumCalibrate+0x2c0>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fe5b 	bl	8000804 <__aeabi_ddiv>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e036      	b.n	8001bd6 <DrumCalibrate+0x196>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 8001b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4413      	add	r3, r2
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fcae 	bl	80004dc <__aeabi_i2d>
 8001b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b84:	f7fe fb5c 	bl	8000240 <__aeabi_dsub>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4614      	mov	r4, r2
 8001b8e:	461d      	mov	r5, r3
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4413      	add	r3, r2
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc9a 	bl	80004dc <__aeabi_i2d>
 8001ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bac:	f7fe fb48 	bl	8000240 <__aeabi_dsub>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fcfa 	bl	80005b0 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bc4:	f7fe fb3e 	bl	8000244 <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bdc:	dbc4      	blt.n	8001b68 <DrumCalibrate+0x128>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 8001bde:	a34a      	add	r3, pc, #296	; (adr r3, 8001d08 <DrumCalibrate+0x2c8>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001be8:	f7fe fe0c 	bl	8000804 <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f014 fcc2 	bl	801657c <sqrt>
 8001bf8:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 8001bfc:	4945      	ldr	r1, [pc, #276]	; (8001d14 <DrumCalibrate+0x2d4>)
 8001bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	440b      	add	r3, r1
 8001c0a:	f103 0118 	add.w	r1, r3, #24
 8001c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c12:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 8001c16:	493f      	ldr	r1, [pc, #252]	; (8001d14 <DrumCalibrate+0x2d4>)
 8001c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	440b      	add	r3, r1
 8001c24:	3314      	adds	r3, #20
 8001c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c28:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 8001c2a:	493a      	ldr	r1, [pc, #232]	; (8001d14 <DrumCalibrate+0x2d4>)
 8001c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	440b      	add	r3, r1
 8001c38:	f103 0120 	add.w	r1, r3, #32
 8001c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c40:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <DrumCalibrate+0x2d8>)
 8001c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c4e:	f7fe fcaf 	bl	80005b0 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c5e:	f7fe faf1 	bl	8000244 <__adddf3>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4690      	mov	r8, r2
 8001c68:	4699      	mov	r9, r3
 8001c6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c6c:	f7fe fc26 	bl	80004bc <__aeabi_ui2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <DrumCalibrate+0x2dc>)
 8001c7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c7e:	f7fe fc97 	bl	80005b0 <__aeabi_dmul>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4620      	mov	r0, r4
 8001c88:	4629      	mov	r1, r5
 8001c8a:	f7fe fadb 	bl	8000244 <__adddf3>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4640      	mov	r0, r8
 8001c94:	4649      	mov	r1, r9
 8001c96:	f014 fc2f 	bl	80164f8 <fmin>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ff5d 	bl	8000b60 <__aeabi_d2uiz>
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	481a      	ldr	r0, [pc, #104]	; (8001d14 <DrumCalibrate+0x2d4>)
 8001caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4403      	add	r3, r0
 8001cb6:	3328      	adds	r3, #40	; 0x28
 8001cb8:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	f77f af09 	ble.w	8001ada <DrumCalibrate+0x9a>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
 8001ccc:	e00a      	b.n	8001ce4 <DrumCalibrate+0x2a4>
		free(values[i]);
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f011 fd13 	bl	8013704 <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	ddf1      	ble.n	8001cce <DrumCalibrate+0x28e>
	}
	free(values);
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f011 fd0a 	bl	8013704 <free>

}
 8001cf0:	bf00      	nop
 8001cf2:	3748      	adds	r7, #72	; 0x48
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cfa:	bf00      	nop
 8001cfc:	f3af 8000 	nop.w
 8001d00:	00000000 	.word	0x00000000
 8001d04:	4072c000 	.word	0x4072c000
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	4072b000 	.word	0x4072b000
 8001d10:	200009f0 	.word	0x200009f0
 8001d14:	20000a00 	.word	0x20000a00
 8001d18:	401c0000 	.word	0x401c0000
 8001d1c:	40140000 	.word	0x40140000

08001d20 <DrumUpdate>:

void DrumUpdate(uint16_t activations) { // actiavtions: bitwise representation
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d2a:	b672      	cpsid	i
}
 8001d2c:	bf00      	nop

	__disable_irq();

	int i = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
	DrumStruct* drum = drums;
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <DrumUpdate+0xbc>)
 8001d34:	60bb      	str	r3, [r7, #8]
	for (; i < 4; i++, drum++) {
 8001d36:	e048      	b.n	8001dca <DrumUpdate+0xaa>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh || ((activations >> i) & 1)) {
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d807      	bhi.n	8001d56 <DrumUpdate+0x36>
 8001d46:	88fa      	ldrh	r2, [r7, #6]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	fa42 f303 	asr.w	r3, r2, r3
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d011      	beq.n	8001d7a <DrumUpdate+0x5a>
			if (drum->state == DRUM_IDLE) {
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	7a1b      	ldrb	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d104      	bne.n	8001d68 <DrumUpdate+0x48>
				AddDrum(drum->sound); // play the sound
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	785b      	ldrb	r3, [r3, #1]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f97a 	bl	800105c <AddDrum>
			}
			drum->state = DRUM_HIT;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	721a      	strb	r2, [r3, #8]
			drum->last_tick = HAL_GetTick();
 8001d6e:	f001 ff7d 	bl	8003c6c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	e011      	b.n	8001d9e <DrumUpdate+0x7e>
		} else {
			if (drum->state != DRUM_IDLE) {
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	7a1b      	ldrb	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <DrumUpdate+0x7e>
				drum->state = DRUM_COOLDOWN;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2202      	movs	r2, #2
 8001d86:	721a      	strb	r2, [r3, #8]
				if (/* drum->state == DRUM_COOLDOWN
					&& */HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 8001d88:	f001 ff70 	bl	8003c6c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
				if (/* drum->state == DRUM_COOLDOWN
 8001d94:	2b14      	cmp	r3, #20
 8001d96:	d902      	bls.n	8001d9e <DrumUpdate+0x7e>
					drum->state = DRUM_IDLE;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (*(drum->sensor_value_pt) > drum_max_val[i]) {
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <DrumUpdate+0xc0>)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d906      	bls.n	8001dbe <DrumUpdate+0x9e>
			drum_max_val[i] = *(drum->sensor_value_pt);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	490a      	ldr	r1, [pc, #40]	; (8001de0 <DrumUpdate+0xc0>)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 4; i++, drum++) {
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	3330      	adds	r3, #48	; 0x30
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	ddb3      	ble.n	8001d38 <DrumUpdate+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001dd0:	b662      	cpsie	i
}
 8001dd2:	bf00      	nop
		}
	}

	__enable_irq();
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000a00 	.word	0x20000a00
 8001de0:	20000ac4 	.word	0x20000ac4

08001de4 <ButtonPad_DrumCalibration>:

//	LCD_Print(0, (*r)++, "%3d", drums[0].state);

}

void ButtonPad_DrumCalibration(int keyPressed) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	switch (keyPressed) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	d866      	bhi.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
 8001df4:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <ButtonPad_DrumCalibration+0x18>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e1d 	.word	0x08001e1d
 8001e00:	08001e25 	.word	0x08001e25
 8001e04:	08001e2d 	.word	0x08001e2d
 8001e08:	08001e35 	.word	0x08001e35
 8001e0c:	08001e3d 	.word	0x08001e3d
 8001e10:	08001e6f 	.word	0x08001e6f
 8001e14:	08001ea1 	.word	0x08001ea1
 8001e18:	08001ebd 	.word	0x08001ebd
		case 1: AddDrum(DRUM_DON); break;
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff f91d 	bl	800105c <AddDrum>
 8001e22:	e04e      	b.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
		case 2: AddDrum(DRUM_KA); break;
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff f919 	bl	800105c <AddDrum>
 8001e2a:	e04a      	b.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
		case 3: DrumUpdate(1); break;
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff ff77 	bl	8001d20 <DrumUpdate>
 8001e32:	e046      	b.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
		case 4: DrumUpdate(2); break;
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7ff ff73 	bl	8001d20 <DrumUpdate>
 8001e3a:	e042      	b.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
		case 5: drums[drum_calibrate_number].sensor_thresh += 10; break;
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <ButtonPad_DrumCalibration+0xe8>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <ButtonPad_DrumCalibration+0xec>)
 8001e44:	460b      	mov	r3, r1
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	440b      	add	r3, r1
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3328      	adds	r3, #40	; 0x28
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <ButtonPad_DrumCalibration+0xe8>)
 8001e54:	8812      	ldrh	r2, [r2, #0]
 8001e56:	4610      	mov	r0, r2
 8001e58:	f103 020a 	add.w	r2, r3, #10
 8001e5c:	491c      	ldr	r1, [pc, #112]	; (8001ed0 <ButtonPad_DrumCalibration+0xec>)
 8001e5e:	4603      	mov	r3, r0
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4403      	add	r3, r0
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	440b      	add	r3, r1
 8001e68:	3328      	adds	r3, #40	; 0x28
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	e029      	b.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
		case 6: drums[drum_calibrate_number].sensor_thresh -= 10; break;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <ButtonPad_DrumCalibration+0xe8>)
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	4619      	mov	r1, r3
 8001e74:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <ButtonPad_DrumCalibration+0xec>)
 8001e76:	460b      	mov	r3, r1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	440b      	add	r3, r1
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	4413      	add	r3, r2
 8001e80:	3328      	adds	r3, #40	; 0x28
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <ButtonPad_DrumCalibration+0xe8>)
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f1a3 020a 	sub.w	r2, r3, #10
 8001e8e:	4910      	ldr	r1, [pc, #64]	; (8001ed0 <ButtonPad_DrumCalibration+0xec>)
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4403      	add	r3, r0
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	440b      	add	r3, r1
 8001e9a:	3328      	adds	r3, #40	; 0x28
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e010      	b.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
		case 7: drum_calibrate_number = (drum_calibrate_number + 1) % NUM_DRUMS; break;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <ButtonPad_DrumCalibration+0xe8>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	425a      	negs	r2, r3
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	f002 0203 	and.w	r2, r2, #3
 8001eb0:	bf58      	it	pl
 8001eb2:	4253      	negpl	r3, r2
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <ButtonPad_DrumCalibration+0xe8>)
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	e002      	b.n	8001ec2 <ButtonPad_DrumCalibration+0xde>
		case 8: DrumThreshWrite(); break;
 8001ebc:	f7ff fd0e 	bl	80018dc <DrumThreshWrite>
 8001ec0:	bf00      	nop
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000ad4 	.word	0x20000ad4
 8001ed0:	20000a00 	.word	0x20000a00

08001ed4 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <ILI9341_Send_Command+0x34>)
 8001ee6:	f003 fbb8 	bl	800565a <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <ILI9341_Send_Command+0x34>)
 8001ef2:	f003 fbb2 	bl	800565a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f95d 	bl	80021b8 <ILI9341_SPI_Send>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40010c00 	.word	0x40010c00

08001f0c <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	4808      	ldr	r0, [pc, #32]	; (8001f40 <ILI9341_Send_Data+0x34>)
 8001f1e:	f003 fb9c 	bl	800565a <HAL_GPIO_WritePin>
	DC_DATA;
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <ILI9341_Send_Data+0x34>)
 8001f2a:	f003 fb96 	bl	800565a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f941 	bl	80021b8 <ILI9341_SPI_Send>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40010c00 	.word	0x40010c00

08001f44 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8001f48:	f000 f900 	bl	800214c <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8001f4c:	f000 f958 	bl	8002200 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7ff ffbf 	bl	8001ed4 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8001f56:	20cb      	movs	r0, #203	; 0xcb
 8001f58:	f7ff ffbc 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8001f5c:	2039      	movs	r0, #57	; 0x39
 8001f5e:	f7ff ffd5 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8001f62:	202c      	movs	r0, #44	; 0x2c
 8001f64:	f7ff ffd2 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff ffcf 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8001f6e:	2034      	movs	r0, #52	; 0x34
 8001f70:	f7ff ffcc 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7ff ffc9 	bl	8001f0c <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8001f7a:	20cf      	movs	r0, #207	; 0xcf
 8001f7c:	f7ff ffaa 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff ffc3 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001f86:	20c1      	movs	r0, #193	; 0xc1
 8001f88:	f7ff ffc0 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8001f8c:	2030      	movs	r0, #48	; 0x30
 8001f8e:	f7ff ffbd 	bl	8001f0c <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8001f92:	20e8      	movs	r0, #232	; 0xe8
 8001f94:	f7ff ff9e 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8001f98:	2085      	movs	r0, #133	; 0x85
 8001f9a:	f7ff ffb7 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff ffb4 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8001fa4:	2078      	movs	r0, #120	; 0x78
 8001fa6:	f7ff ffb1 	bl	8001f0c <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8001faa:	20ea      	movs	r0, #234	; 0xea
 8001fac:	f7ff ff92 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f7ff ffab 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff ffa8 	bl	8001f0c <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8001fbc:	20ed      	movs	r0, #237	; 0xed
 8001fbe:	f7ff ff89 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	f7ff ffa2 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f7ff ff9f 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8001fce:	2012      	movs	r0, #18
 8001fd0:	f7ff ff9c 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8001fd4:	2081      	movs	r0, #129	; 0x81
 8001fd6:	f7ff ff99 	bl	8001f0c <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8001fda:	20f7      	movs	r0, #247	; 0xf7
 8001fdc:	f7ff ff7a 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8001fe0:	2020      	movs	r0, #32
 8001fe2:	f7ff ff93 	bl	8001f0c <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8001fe6:	20c0      	movs	r0, #192	; 0xc0
 8001fe8:	f7ff ff74 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001fec:	2010      	movs	r0, #16
 8001fee:	f7ff ff8d 	bl	8001f0c <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8001ff2:	20c1      	movs	r0, #193	; 0xc1
 8001ff4:	f7ff ff6e 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001ff8:	2010      	movs	r0, #16
 8001ffa:	f7ff ff87 	bl	8001f0c <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8001ffe:	20c5      	movs	r0, #197	; 0xc5
 8002000:	f7ff ff68 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8002004:	203e      	movs	r0, #62	; 0x3e
 8002006:	f7ff ff81 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800200a:	2028      	movs	r0, #40	; 0x28
 800200c:	f7ff ff7e 	bl	8001f0c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8002010:	20c7      	movs	r0, #199	; 0xc7
 8002012:	f7ff ff5f 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8002016:	2086      	movs	r0, #134	; 0x86
 8002018:	f7ff ff78 	bl	8001f0c <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 800201c:	2036      	movs	r0, #54	; 0x36
 800201e:	f7ff ff59 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8002022:	2048      	movs	r0, #72	; 0x48
 8002024:	f7ff ff72 	bl	8001f0c <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8002028:	203a      	movs	r0, #58	; 0x3a
 800202a:	f7ff ff53 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800202e:	2055      	movs	r0, #85	; 0x55
 8002030:	f7ff ff6c 	bl	8001f0c <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8002034:	20b1      	movs	r0, #177	; 0xb1
 8002036:	f7ff ff4d 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f7ff ff66 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8002040:	2018      	movs	r0, #24
 8002042:	f7ff ff63 	bl	8001f0c <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8002046:	20b6      	movs	r0, #182	; 0xb6
 8002048:	f7ff ff44 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 800204c:	2008      	movs	r0, #8
 800204e:	f7ff ff5d 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8002052:	2082      	movs	r0, #130	; 0x82
 8002054:	f7ff ff5a 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8002058:	2027      	movs	r0, #39	; 0x27
 800205a:	f7ff ff57 	bl	8001f0c <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800205e:	20f2      	movs	r0, #242	; 0xf2
 8002060:	f7ff ff38 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff ff51 	bl	8001f0c <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800206a:	2026      	movs	r0, #38	; 0x26
 800206c:	f7ff ff32 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff ff4b 	bl	8001f0c <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8002076:	20e0      	movs	r0, #224	; 0xe0
 8002078:	f7ff ff2c 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 800207c:	200f      	movs	r0, #15
 800207e:	f7ff ff45 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002082:	2031      	movs	r0, #49	; 0x31
 8002084:	f7ff ff42 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8002088:	202b      	movs	r0, #43	; 0x2b
 800208a:	f7ff ff3f 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800208e:	200c      	movs	r0, #12
 8002090:	f7ff ff3c 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8002094:	200e      	movs	r0, #14
 8002096:	f7ff ff39 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800209a:	2008      	movs	r0, #8
 800209c:	f7ff ff36 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80020a0:	204e      	movs	r0, #78	; 0x4e
 80020a2:	f7ff ff33 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80020a6:	20f1      	movs	r0, #241	; 0xf1
 80020a8:	f7ff ff30 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80020ac:	2037      	movs	r0, #55	; 0x37
 80020ae:	f7ff ff2d 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80020b2:	2007      	movs	r0, #7
 80020b4:	f7ff ff2a 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80020b8:	2010      	movs	r0, #16
 80020ba:	f7ff ff27 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80020be:	2003      	movs	r0, #3
 80020c0:	f7ff ff24 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80020c4:	200e      	movs	r0, #14
 80020c6:	f7ff ff21 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80020ca:	2009      	movs	r0, #9
 80020cc:	f7ff ff1e 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff ff1b 	bl	8001f0c <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80020d6:	20e1      	movs	r0, #225	; 0xe1
 80020d8:	f7ff fefc 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7ff ff15 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80020e2:	200e      	movs	r0, #14
 80020e4:	f7ff ff12 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80020e8:	2014      	movs	r0, #20
 80020ea:	f7ff ff0f 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80020ee:	2003      	movs	r0, #3
 80020f0:	f7ff ff0c 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 80020f4:	2011      	movs	r0, #17
 80020f6:	f7ff ff09 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80020fa:	2007      	movs	r0, #7
 80020fc:	f7ff ff06 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002100:	2031      	movs	r0, #49	; 0x31
 8002102:	f7ff ff03 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8002106:	20c1      	movs	r0, #193	; 0xc1
 8002108:	f7ff ff00 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 800210c:	2048      	movs	r0, #72	; 0x48
 800210e:	f7ff fefd 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8002112:	2008      	movs	r0, #8
 8002114:	f7ff fefa 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8002118:	200f      	movs	r0, #15
 800211a:	f7ff fef7 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800211e:	200c      	movs	r0, #12
 8002120:	f7ff fef4 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8002124:	2031      	movs	r0, #49	; 0x31
 8002126:	f7ff fef1 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800212a:	2036      	movs	r0, #54	; 0x36
 800212c:	f7ff feee 	bl	8001f0c <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8002130:	200f      	movs	r0, #15
 8002132:	f7ff feeb 	bl	8001f0c <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8002136:	2011      	movs	r0, #17
 8002138:	f7ff fecc 	bl	8001ed4 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 800213c:	2029      	movs	r0, #41	; 0x29
 800213e:	f7ff fec9 	bl	8001ed4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8002142:	202c      	movs	r0, #44	; 0x2c
 8002144:	f7ff fee2 	bl	8001f0c <ILI9341_Send_Data>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}

0800214c <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002152:	4a18      	ldr	r2, [pc, #96]	; (80021b4 <ILI9341_SPI_Init+0x68>)
 8002154:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8002156:	4b16      	ldr	r3, [pc, #88]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002158:	f44f 7282 	mov.w	r2, #260	; 0x104
 800215c:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 800216a:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8002176:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217c:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002180:	2200      	movs	r2, #0
 8002182:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002186:	2200      	movs	r2, #0
 8002188:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 8002198:	220a      	movs	r2, #10
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 800219c:	4804      	ldr	r0, [pc, #16]	; (80021b0 <ILI9341_SPI_Init+0x64>)
 800219e:	f008 f86e 	bl	800a27e <HAL_SPI_Init>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80021a8:	f001 f8e0 	bl	800336c <Error_Handler>
	}
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000ad8 	.word	0x20000ad8
 80021b4:	40003800 	.word	0x40003800

080021b8 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80021c2:	1df9      	adds	r1, r7, #7
 80021c4:	2301      	movs	r3, #1
 80021c6:	2201      	movs	r2, #1
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <ILI9341_SPI_Send+0x20>)
 80021ca:	f008 f8dc 	bl	800a386 <HAL_SPI_Transmit>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000ad8 	.word	0x20000ad8

080021dc <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	230a      	movs	r3, #10
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4803      	ldr	r0, [pc, #12]	; (80021fc <ILI9341_SPI_Send_Multiple+0x20>)
 80021f0:	f008 f8c9 	bl	800a386 <HAL_SPI_Transmit>
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000ad8 	.word	0x20000ad8

08002200 <ILI9341_Reset>:

void ILI9341_Reset() {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	RESET_ON;
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800220a:	4810      	ldr	r0, [pc, #64]	; (800224c <ILI9341_Reset+0x4c>)
 800220c:	f003 fa25 	bl	800565a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002210:	2032      	movs	r0, #50	; 0x32
 8002212:	f001 fd35 	bl	8003c80 <HAL_Delay>
	RESET_OFF;
 8002216:	2201      	movs	r2, #1
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	480b      	ldr	r0, [pc, #44]	; (800224c <ILI9341_Reset+0x4c>)
 800221e:	f003 fa1c 	bl	800565a <HAL_GPIO_WritePin>
	CS_ON;
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <ILI9341_Reset+0x4c>)
 800222a:	f003 fa16 	bl	800565a <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800222e:	2032      	movs	r0, #50	; 0x32
 8002230:	f001 fd26 	bl	8003c80 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff fe4d 	bl	8001ed4 <ILI9341_Send_Command>
	CS_OFF;
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <ILI9341_Reset+0x4c>)
 8002242:	f003 fa0a 	bl	800565a <HAL_GPIO_WritePin>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40010c00 	.word	0x40010c00

08002250 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800225a:	2036      	movs	r0, #54	; 0x36
 800225c:	f7ff fe3a 	bl	8001ed4 <ILI9341_Send_Command>
	switch (rotation) {
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d836      	bhi.n	80022d4 <ILI9341_Set_Rotation+0x84>
 8002266:	a201      	add	r2, pc, #4	; (adr r2, 800226c <ILI9341_Set_Rotation+0x1c>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	0800227d 	.word	0x0800227d
 8002270:	08002293 	.word	0x08002293
 8002274:	080022a9 	.word	0x080022a9
 8002278:	080022bf 	.word	0x080022bf
	case 0:
		ILI9341_Send_Data(0x48);
 800227c:	2048      	movs	r0, #72	; 0x48
 800227e:	f7ff fe45 	bl	8001f0c <ILI9341_Send_Data>
		X_SIZE = 240;
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <ILI9341_Set_Rotation+0x8c>)
 8002284:	22f0      	movs	r2, #240	; 0xf0
 8002286:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <ILI9341_Set_Rotation+0x90>)
 800228a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800228e:	601a      	str	r2, [r3, #0]
		break;
 8002290:	e020      	b.n	80022d4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 8002292:	2028      	movs	r0, #40	; 0x28
 8002294:	f7ff fe3a 	bl	8001f0c <ILI9341_Send_Data>
		X_SIZE = 320;
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <ILI9341_Set_Rotation+0x8c>)
 800229a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800229e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <ILI9341_Set_Rotation+0x90>)
 80022a2:	22f0      	movs	r2, #240	; 0xf0
 80022a4:	601a      	str	r2, [r3, #0]
		break;
 80022a6:	e015      	b.n	80022d4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80022a8:	2088      	movs	r0, #136	; 0x88
 80022aa:	f7ff fe2f 	bl	8001f0c <ILI9341_Send_Data>
		X_SIZE = 240;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <ILI9341_Set_Rotation+0x8c>)
 80022b0:	22f0      	movs	r2, #240	; 0xf0
 80022b2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <ILI9341_Set_Rotation+0x90>)
 80022b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022ba:	601a      	str	r2, [r3, #0]
		break;
 80022bc:	e00a      	b.n	80022d4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80022be:	20e8      	movs	r0, #232	; 0xe8
 80022c0:	f7ff fe24 	bl	8001f0c <ILI9341_Send_Data>
		X_SIZE = 320;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <ILI9341_Set_Rotation+0x8c>)
 80022c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022ca:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <ILI9341_Set_Rotation+0x90>)
 80022ce:	22f0      	movs	r2, #240	; 0xf0
 80022d0:	601a      	str	r2, [r3, #0]
		break;
 80022d2:	bf00      	nop
	}
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000008 	.word	0x20000008
 80022e0:	2000000c 	.word	0x2000000c

080022e4 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f6:	4817      	ldr	r0, [pc, #92]	; (8002354 <ILI9341_SPI_Send_32+0x70>)
 80022f8:	f003 f9af 	bl	800565a <HAL_GPIO_WritePin>
	DC_COMMAND;
 80022fc:	2200      	movs	r2, #0
 80022fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002302:	4814      	ldr	r0, [pc, #80]	; (8002354 <ILI9341_SPI_Send_32+0x70>)
 8002304:	f003 f9a9 	bl	800565a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff54 	bl	80021b8 <ILI9341_SPI_Send>

	DC_DATA;
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002316:	480f      	ldr	r0, [pc, #60]	; (8002354 <ILI9341_SPI_Send_32+0x70>)
 8002318:	f003 f99f 	bl	800565a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	0e1b      	lsrs	r3, r3, #24
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff48 	bl	80021b8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff42 	bl	80021b8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff3c 	bl	80021b8 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff37 	bl	80021b8 <ILI9341_SPI_Send>

}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40010c00 	.word	0x40010c00

08002358 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	617b      	str	r3, [r7, #20]
	t |= x2;
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8002378:	6979      	ldr	r1, [r7, #20]
 800237a:	202a      	movs	r0, #42	; 0x2a
 800237c:	f7ff ffb2 	bl	80022e4 <ILI9341_SPI_Send_32>
	t = y1;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	617b      	str	r3, [r7, #20]
	t |= y2;
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	202b      	movs	r0, #43	; 0x2b
 8002396:	f7ff ffa5 	bl	80022e4 <ILI9341_SPI_Send_32>
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 80023a2:	b590      	push	{r4, r7, lr}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4604      	mov	r4, r0
 80023aa:	4608      	mov	r0, r1
 80023ac:	4611      	mov	r1, r2
 80023ae:	461a      	mov	r2, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	80fb      	strh	r3, [r7, #6]
 80023b4:	4603      	mov	r3, r0
 80023b6:	80bb      	strh	r3, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 80023c0:	88f8      	ldrh	r0, [r7, #6]
 80023c2:	88b9      	ldrh	r1, [r7, #4]
 80023c4:	88fa      	ldrh	r2, [r7, #6]
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	4413      	add	r3, r2
 80023ca:	3b01      	subs	r3, #1
 80023cc:	461c      	mov	r4, r3
 80023ce:	88ba      	ldrh	r2, [r7, #4]
 80023d0:	883b      	ldrh	r3, [r7, #0]
 80023d2:	4413      	add	r3, r2
 80023d4:	3b01      	subs	r3, #1
 80023d6:	4622      	mov	r2, r4
 80023d8:	f7ff ffbe 	bl	8002358 <ILI9341_Set_Address>
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}

080023e4 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 80023f4:	202c      	movs	r0, #44	; 0x2c
 80023f6:	f7ff fd6d 	bl	8001ed4 <ILI9341_Send_Command>

	CS_ON;
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002400:	482a      	ldr	r0, [pc, #168]	; (80024ac <LCD_FillWindow+0xc8>)
 8002402:	f003 f92a 	bl	800565a <HAL_GPIO_WritePin>
	DC_DATA;
 8002406:	2201      	movs	r2, #1
 8002408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800240c:	4827      	ldr	r0, [pc, #156]	; (80024ac <LCD_FillWindow+0xc8>)
 800240e:	f003 f924 	bl	800565a <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <LCD_FillWindow+0xcc>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b3f      	cmp	r3, #63	; 0x3f
 8002422:	dc01      	bgt.n	8002428 <LCD_FillWindow+0x44>
 8002424:	2340      	movs	r3, #64	; 0x40
 8002426:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2bf0      	cmp	r3, #240	; 0xf0
 800242c:	dd01      	ble.n	8002432 <LCD_FillWindow+0x4e>
 800242e:	23f0      	movs	r3, #240	; 0xf0
 8002430:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	b29b      	uxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f011 f953 	bl	80136f4 <malloc>
 800244e:	4603      	mov	r3, r0
 8002450:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 8002452:	2300      	movs	r3, #0
 8002454:	61bb      	str	r3, [r7, #24]
 8002456:	e009      	b.n	800246c <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	b292      	uxth	r2, r2
 8002464:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	3301      	adds	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	429a      	cmp	r2, r3
 8002472:	dbf1      	blt.n	8002458 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8002474:	e009      	b.n	800248a <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4619      	mov	r1, r3
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fead 	bl	80021dc <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	429a      	cmp	r2, r3
 8002490:	d8f1      	bhi.n	8002476 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4619      	mov	r1, r3
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f7ff fe9f 	bl	80021dc <ILI9341_SPI_Send_Multiple>

	free(array);
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f011 f930 	bl	8013704 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40010c00 	.word	0x40010c00
 80024b0:	cccccccd 	.word	0xcccccccd

080024b4 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4604      	mov	r4, r0
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4623      	mov	r3, r4
 80024c4:	80fb      	strh	r3, [r7, #6]
 80024c6:	4603      	mov	r3, r0
 80024c8:	80bb      	strh	r3, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	807b      	strh	r3, [r7, #2]
 80024ce:	4613      	mov	r3, r2
 80024d0:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80024d2:	883b      	ldrh	r3, [r7, #0]
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	88b9      	ldrh	r1, [r7, #4]
 80024d8:	88f8      	ldrh	r0, [r7, #6]
 80024da:	f7ff ff62 	bl	80023a2 <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	883a      	ldrh	r2, [r7, #0]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	461a      	mov	r2, r3
 80024e8:	8b3b      	ldrh	r3, [r7, #24]
 80024ea:	4619      	mov	r1, r3
 80024ec:	4610      	mov	r0, r2
 80024ee:	f7ff ff79 	bl	80023e4 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}
	...

080024fc <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af02      	add	r7, sp, #8
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <LCD_FillScreen+0x2c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29a      	uxth	r2, r3
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <LCD_FillScreen+0x30>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b299      	uxth	r1, r3
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	460b      	mov	r3, r1
 8002518:	2100      	movs	r1, #0
 800251a:	2000      	movs	r0, #0
 800251c:	f7ff ffca 	bl	80024b4 <LCD_DrawFilledRectangle>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000008 	.word	0x20000008
 800252c:	2000000c 	.word	0x2000000c

08002530 <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	80fb      	strh	r3, [r7, #6]
 800253a:	460b      	mov	r3, r1
 800253c:	80bb      	strh	r3, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	3b20      	subs	r3, #32
 8002546:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002548:	88b9      	ldrh	r1, [r7, #4]
 800254a:	88f8      	ldrh	r0, [r7, #6]
 800254c:	2310      	movs	r3, #16
 800254e:	2208      	movs	r2, #8
 8002550:	f7ff ff27 	bl	80023a2 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8002554:	202c      	movs	r0, #44	; 0x2c
 8002556:	f7ff fcbd 	bl	8001ed4 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 800255a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800255e:	f011 f8c9 	bl	80136f4 <malloc>
 8002562:	4603      	mov	r3, r0
 8002564:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800256a:	2300      	movs	r3, #0
 800256c:	75bb      	strb	r3, [r7, #22]
 800256e:	e026      	b.n	80025be <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	7dbb      	ldrb	r3, [r7, #22]
 8002574:	491c      	ldr	r1, [pc, #112]	; (80025e8 <LCD_DrawChar+0xb8>)
 8002576:	0112      	lsls	r2, r2, #4
 8002578:	440a      	add	r2, r1
 800257a:	4413      	add	r3, r2
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8002580:	2300      	movs	r3, #0
 8002582:	757b      	strb	r3, [r7, #21]
 8002584:	e015      	b.n	80025b2 <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2200      	movs	r2, #0
 8002594:	801a      	strh	r2, [r3, #0]
 8002596:	e003      	b.n	80025a0 <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800259e:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
			pt++;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	3302      	adds	r3, #2
 80025aa:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80025ac:	7d7b      	ldrb	r3, [r7, #21]
 80025ae:	3301      	adds	r3, #1
 80025b0:	757b      	strb	r3, [r7, #21]
 80025b2:	7d7b      	ldrb	r3, [r7, #21]
 80025b4:	2b07      	cmp	r3, #7
 80025b6:	d9e6      	bls.n	8002586 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80025b8:	7dbb      	ldrb	r3, [r7, #22]
 80025ba:	3301      	adds	r3, #1
 80025bc:	75bb      	strb	r3, [r7, #22]
 80025be:	7dbb      	ldrb	r3, [r7, #22]
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d9d5      	bls.n	8002570 <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 80025c4:	2201      	movs	r2, #1
 80025c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <LCD_DrawChar+0xbc>)
 80025cc:	f003 f845 	bl	800565a <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 80025d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d4:	68b8      	ldr	r0, [r7, #8]
 80025d6:	f7ff fe01 	bl	80021dc <ILI9341_SPI_Send_Multiple>
	free(array);
 80025da:	68b8      	ldr	r0, [r7, #8]
 80025dc:	f011 f892 	bl	8013704 <free>
}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	0802f510 	.word	0x0802f510
 80025ec:	40010c00 	.word	0x40010c00

080025f0 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	603a      	str	r2, [r7, #0]
 80025fa:	80fb      	strh	r3, [r7, #6]
 80025fc:	460b      	mov	r3, r1
 80025fe:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8002600:	e01d      	b.n	800263e <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002608:	d904      	bls.n	8002614 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800260a:	2300      	movs	r3, #0
 800260c:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 800260e:	88bb      	ldrh	r3, [r7, #4]
 8002610:	3310      	adds	r3, #16
 8002612:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8002614:	88bb      	ldrh	r3, [r7, #4]
 8002616:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800261a:	d903      	bls.n	8002624 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800261c:	2300      	movs	r3, #0
 800261e:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8002620:	2300      	movs	r3, #0
 8002622:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	781a      	ldrb	r2, [r3, #0]
 8002628:	88b9      	ldrh	r1, [r7, #4]
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff7f 	bl	8002530 <LCD_DrawChar>

		pStr ++;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	3308      	adds	r3, #8
 800263c:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1dd      	bne.n	8002602 <LCD_DrawString+0x12>

	}

}
 8002646:	bf00      	nop
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8002650:	b40c      	push	{r2, r3}
 8002652:	b580      	push	{r7, lr}
 8002654:	b08e      	sub	sp, #56	; 0x38
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	460a      	mov	r2, r1
 800265c:	80fb      	strh	r3, [r7, #6]
 800265e:	4613      	mov	r3, r2
 8002660:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 8002662:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002666:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8002668:	f107 000c 	add.w	r0, r7, #12
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002670:	2128      	movs	r1, #40	; 0x28
 8002672:	f011 fdcf 	bl	8014214 <vsniprintf>
 8002676:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	b298      	uxth	r0, r3
 8002684:	88bb      	ldrh	r3, [r7, #4]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	b29b      	uxth	r3, r3
 800268a:	f107 020c 	add.w	r2, r7, #12
 800268e:	4619      	mov	r1, r3
 8002690:	f7ff ffae 	bl	80025f0 <LCD_DrawString>
 8002694:	e000      	b.n	8002698 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8002696:	bf00      	nop
}
 8002698:	3738      	adds	r7, #56	; 0x38
 800269a:	46bd      	mov	sp, r7
 800269c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026a0:	b002      	add	sp, #8
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIM_PeriodElapsedCallback>:
int16_t reading;
int16_t voltage[4];
int16_t max_reading[4];

int16_t errors[4];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a48      	ldr	r2, [pc, #288]	; (80027d0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d17d      	bne.n	80027b0 <HAL_TIM_PeriodElapsedCallback+0x10c>
		drum_interrupt_counts++;
 80026b4:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a46      	ldr	r2, [pc, #280]	; (80027d4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80026bc:	6013      	str	r3, [r2, #0]
		DrumUpdate(0);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7ff fb2e 	bl	8001d20 <DrumUpdate>


		uint8_t ADSConfig[3] = {0x01,
 80026c4:	4a44      	ldr	r2, [pc, #272]	; (80027d8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80026c6:	f107 0310 	add.w	r3, r7, #16
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4611      	mov	r1, r2
 80026ce:	8019      	strh	r1, [r3, #0]
 80026d0:	3302      	adds	r3, #2
 80026d2:	0c12      	lsrs	r2, r2, #16
 80026d4:	701a      	strb	r2, [r3, #0]
							     ADS1115_OS | ADS1115_MODE_CONTINUOUS | ADS1115_PGA_ONE,
								 ADS1115_DATA_RATE_250 | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT | ADS1115_COMP_QUE };
		uint8_t ADSWrite[1] = {0x00};
 80026d6:	2300      	movs	r3, #0
 80026d8:	733b      	strb	r3, [r7, #12]
		uint8_t ADSReceive[2];
//		__disable_irq();
		for (int i = 0; i < 4; i++){
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e03c      	b.n	800275a <HAL_TIM_PeriodElapsedCallback+0xb6>
			ADSConfig[1] = ADS1115_OS | ADS1115_PGA_ONE | ADS1115_MODE_CONTINUOUS | ((0b100 | i) << 4); // choose AIN
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	f063 033d 	orn	r3, r3, #61	; 0x3d
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	747b      	strb	r3, [r7, #17]

			int temp;
			errors[1] = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSConfig, 3, 100);
 80026f0:	f107 0210 	add.w	r2, r7, #16
 80026f4:	2364      	movs	r3, #100	; 0x64
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2303      	movs	r3, #3
 80026fa:	2190      	movs	r1, #144	; 0x90
 80026fc:	4837      	ldr	r0, [pc, #220]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 80026fe:	f003 f921 	bl	8005944 <HAL_I2C_Master_Transmit>
 8002702:	4603      	mov	r3, r0
 8002704:	b21a      	sxth	r2, r3
 8002706:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002708:	805a      	strh	r2, [r3, #2]
//			if (!temp) LCD_Print(0, r++, "ERROR 1! %d", temp);
			errors[2] = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSWrite, 1, 100);
 800270a:	f107 020c 	add.w	r2, r7, #12
 800270e:	2364      	movs	r3, #100	; 0x64
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	2190      	movs	r1, #144	; 0x90
 8002716:	4831      	ldr	r0, [pc, #196]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002718:	f003 f914 	bl	8005944 <HAL_I2C_Master_Transmit>
 800271c:	4603      	mov	r3, r0
 800271e:	b21a      	sxth	r2, r3
 8002720:	4b2f      	ldr	r3, [pc, #188]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002722:	809a      	strh	r2, [r3, #4]
//			if (!temp) LCD_Print(0, r++, "ERROR 2! %d", temp);
//			HAL_Delay(20);

			errors[3] = HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS << 1, ADSReceive, 2, 100);
 8002724:	f107 0208 	add.w	r2, r7, #8
 8002728:	2364      	movs	r3, #100	; 0x64
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2302      	movs	r3, #2
 800272e:	2190      	movs	r1, #144	; 0x90
 8002730:	482a      	ldr	r0, [pc, #168]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002732:	f003 fa05 	bl	8005b40 <HAL_I2C_Master_Receive>
 8002736:	4603      	mov	r3, r0
 8002738:	b21a      	sxth	r2, r3
 800273a:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800273c:	80da      	strh	r2, [r3, #6]
//			if (!temp) LCD_Print(0, r++, "ERROR 3! %d", temp);
			voltage[i] = (ADSReceive[0] << 8 | ADSReceive[1]);
 800273e:	7a3b      	ldrb	r3, [r7, #8]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	b21a      	sxth	r2, r3
 8002744:	7a7b      	ldrb	r3, [r7, #9]
 8002746:	b21b      	sxth	r3, r3
 8002748:	4313      	orrs	r3, r2
 800274a:	b219      	sxth	r1, r3
 800274c:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++){
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b03      	cmp	r3, #3
 800275e:	ddbf      	ble.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
//		__enable_irq();

//		if (drum_interrupt_counts % 2 == 0) {

		keyboardhid.KEYCODE1 = drums[0].state >= DRUM_HIT ? 0x07 : 0x00;  // press 'd'
 8002760:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002762:	7a1b      	ldrb	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_TIM_PeriodElapsedCallback+0xc8>
 8002768:	2207      	movs	r2, #7
 800276a:	e000      	b.n	800276e <HAL_TIM_PeriodElapsedCallback+0xca>
 800276c:	2200      	movs	r2, #0
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002770:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE2 = drums[1].state >= DRUM_HIT ? 0x09 : 0x00;  // press 'f'
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_TIM_PeriodElapsedCallback+0xdc>
 800277c:	2209      	movs	r2, #9
 800277e:	e000      	b.n	8002782 <HAL_TIM_PeriodElapsedCallback+0xde>
 8002780:	2200      	movs	r2, #0
 8002782:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002784:	70da      	strb	r2, [r3, #3]
		keyboardhid.KEYCODE3 = drums[2].state >= DRUM_HIT ? 0x0d : 0x00;  // press 'j'
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002788:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8002790:	220d      	movs	r2, #13
 8002792:	e000      	b.n	8002796 <HAL_TIM_PeriodElapsedCallback+0xf2>
 8002794:	2200      	movs	r2, #0
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002798:	711a      	strb	r2, [r3, #4]
		keyboardhid.KEYCODE4 = drums[3].state >= DRUM_HIT ? 0x0e : 0x00;  // press 'k'
 800279a:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800279c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x104>
 80027a4:	220e      	movs	r2, #14
 80027a6:	e000      	b.n	80027aa <HAL_TIM_PeriodElapsedCallback+0x106>
 80027a8:	2200      	movs	r2, #0
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_TIM_PeriodElapsedCallback+0x148>)
 80027ac:	715a      	strb	r2, [r3, #5]

	else if (htim == &htim4) {
		mix_interrupt_counts++;
		PrecomputeMix();
	}
}
 80027ae:	e00a      	b.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0x122>
	else if (htim == &htim4) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d106      	bne.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0x122>
		mix_interrupt_counts++;
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80027c0:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 80027c2:	f7fe fcb3 	bl	800112c <PrecomputeMix>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000db8 	.word	0x20000db8
 80027d4:	20000e94 	.word	0x20000e94
 80027d8:	08016814 	.word	0x08016814
 80027dc:	20000c40 	.word	0x20000c40
 80027e0:	20000eb4 	.word	0x20000eb4
 80027e4:	20000ea4 	.word	0x20000ea4
 80027e8:	20000a00 	.word	0x20000a00
 80027ec:	20000e98 	.word	0x20000e98
 80027f0:	20000e00 	.word	0x20000e00
 80027f4:	20000ea0 	.word	0x20000ea0

080027f8 <HAL_GPIO_EXTI_Callback>:

uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
	int keyPressed = ButtonPadCallback(GPIO_Pin);
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fd6d 	bl	80012e4 <ButtonPadCallback>
 800280a:	60f8      	str	r0, [r7, #12]
	ButtonPad_DrumCalibration(keyPressed);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff fae9 	bl	8001de4 <ButtonPad_DrumCalibration>
	btn_callbacks++;
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_GPIO_EXTI_Callback+0x30>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	3301      	adds	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_GPIO_EXTI_Callback+0x30>)
 800281c:	801a      	strh	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000ebc 	.word	0x20000ebc

0800282c <HAL_UART_RxCpltCallback>:

uint8_t Rx_data[1] = {0};
uint16_t Rx_buff[6] = {0};
int Rx_length = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
//	Rx_length += 1;
	if (Rx_length < 2) {
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b01      	cmp	r3, #1
 800283a:	dc13      	bgt.n	8002864 <HAL_UART_RxCpltCallback+0x38>
		if (*Rx_data != 0xFF) {
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_UART_RxCpltCallback+0xb8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2bff      	cmp	r3, #255	; 0xff
 8002842:	d003      	beq.n	800284c <HAL_UART_RxCpltCallback+0x20>
			Rx_length = 0;
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e040      	b.n	80028ce <HAL_UART_RxCpltCallback+0xa2>
		} else {
			((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4923      	ldr	r1, [pc, #140]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 8002854:	600a      	str	r2, [r1, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 800285a:	4413      	add	r3, r2
 800285c:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <HAL_UART_RxCpltCallback+0xb8>)
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e034      	b.n	80028ce <HAL_UART_RxCpltCallback+0xa2>
		}
	} else {
		((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8002864:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	491d      	ldr	r1, [pc, #116]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 800286c:	600a      	str	r2, [r1, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002872:	4413      	add	r3, r2
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <HAL_UART_RxCpltCallback+0xb8>)
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	701a      	strb	r2, [r3, #0]
		if (Rx_length == 12) {
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d125      	bne.n	80028ce <HAL_UART_RxCpltCallback+0xa2>
			if (Rx_buff[1] + Rx_buff[2] + Rx_buff[3] + Rx_buff[4] == Rx_buff[5]) {
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002884:	885b      	ldrh	r3, [r3, #2]
 8002886:	461a      	mov	r2, r3
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002890:	88d2      	ldrh	r2, [r2, #6]
 8002892:	4413      	add	r3, r2
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 8002896:	8912      	ldrh	r2, [r2, #8]
 8002898:	4413      	add	r3, r2
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 800289c:	8952      	ldrh	r2, [r2, #10]
 800289e:	4293      	cmp	r3, r2
 80028a0:	d112      	bne.n	80028c8 <HAL_UART_RxCpltCallback+0x9c>
				for (int i = 0; i < 4; i++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e00c      	b.n	80028c2 <HAL_UART_RxCpltCallback+0x96>
					drum_sensor_values[i] = Rx_buff[i+1];
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3301      	adds	r3, #1
 80028ac:	4a0e      	ldr	r2, [pc, #56]	; (80028e8 <HAL_UART_RxCpltCallback+0xbc>)
 80028ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <HAL_UART_RxCpltCallback+0xc0>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	ddef      	ble.n	80028a8 <HAL_UART_RxCpltCallback+0x7c>
				}
			}
			Rx_length = 0;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_UART_RxCpltCallback+0xb4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 80028ce:	2201      	movs	r2, #1
 80028d0:	4904      	ldr	r1, [pc, #16]	; (80028e4 <HAL_UART_RxCpltCallback+0xb8>)
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <HAL_UART_RxCpltCallback+0xc4>)
 80028d4:	f008 fd14 	bl	800b300 <HAL_UART_Receive_IT>
}
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000ed0 	.word	0x20000ed0
 80028e4:	20000ec0 	.word	0x20000ec0
 80028e8:	20000ec4 	.word	0x20000ec4
 80028ec:	200009f0 	.word	0x200009f0
 80028f0:	20000e48 	.word	0x20000e48

080028f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f8:	b092      	sub	sp, #72	; 0x48
 80028fa:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028fc:	f001 f95e 	bl	8003bbc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002900:	f000 f996 	bl	8002c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002904:	f000 fc64 	bl	80031d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002908:	f000 fc28 	bl	800315c <MX_DMA_Init>
  MX_SPI2_Init();
 800290c:	f000 fadc 	bl	8002ec8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8002910:	f000 fb5c 	bl	8002fcc <MX_TIM3_Init>
  MX_ADC1_Init();
 8002914:	f000 f9ec 	bl	8002cf0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8002918:	f010 fb08 	bl	8012f2c <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 800291c:	f000 fab4 	bl	8002e88 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002920:	f00c fb28 	bl	800ef74 <MX_FATFS_Init>
  MX_DAC_Init();
 8002924:	f000 fa4e 	bl	8002dc4 <MX_DAC_Init>
  MX_I2C1_Init();
 8002928:	f000 fa80 	bl	8002e2c <MX_I2C1_Init>
  MX_TIM2_Init();
 800292c:	f000 fb02 	bl	8002f34 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002930:	f000 fb9a 	bl	8003068 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002934:	f000 fbe8 	bl	8003108 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8002938:	48a5      	ldr	r0, [pc, #660]	; (8002bd0 <main+0x2dc>)
 800293a:	f001 fc43 	bl	80041c4 <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT (&huart1, Rx_data, 1);
 800293e:	2201      	movs	r2, #1
 8002940:	49a4      	ldr	r1, [pc, #656]	; (8002bd4 <main+0x2e0>)
 8002942:	48a5      	ldr	r0, [pc, #660]	; (8002bd8 <main+0x2e4>)
 8002944:	f008 fcdc 	bl	800b300 <HAL_UART_Receive_IT>

	ButtonPadInit();
 8002948:	f7fe fcae 	bl	80012a8 <ButtonPadInit>

	ILI9341_Init();
 800294c:	f7ff fafa 	bl	8001f44 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 8002950:	2002      	movs	r0, #2
 8002952:	f7ff fc7d 	bl	8002250 <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8002956:	f64f 001f 	movw	r0, #63519	; 0xf81f
 800295a:	f7ff fdcf 	bl	80024fc <LCD_FillScreen>

  	// Setting the clock divider somehow helps :D
  	FRESULT fresult = f_mount(&fs, "/", 1);
 800295e:	2201      	movs	r2, #1
 8002960:	499e      	ldr	r1, [pc, #632]	; (8002bdc <main+0x2e8>)
 8002962:	489f      	ldr	r0, [pc, #636]	; (8002be0 <main+0x2ec>)
 8002964:	f00f fc4a 	bl	80121fc <f_mount>
 8002968:	4603      	mov	r3, r0
 800296a:	75fb      	strb	r3, [r7, #23]
  	if (fresult != FR_OK) {
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <main+0x8c>
  		LCD_Print(0, 19, "Error: f_mount (%d)", fresult); while (1);
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	4a9b      	ldr	r2, [pc, #620]	; (8002be4 <main+0x2f0>)
 8002976:	2113      	movs	r1, #19
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fe69 	bl	8002650 <LCD_Print>
 800297e:	e7fe      	b.n	800297e <main+0x8a>
  	}

	DrumInit();
 8002980:	f7fe fe26 	bl	80015d0 <DrumInit>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002984:	2100      	movs	r1, #0
 8002986:	4898      	ldr	r0, [pc, #608]	; (8002be8 <main+0x2f4>)
 8002988:	f001 fdf9 	bl	800457e <HAL_DAC_Start>

	TIM3->PSC = 720 - 1;
 800298c:	4b97      	ldr	r3, [pc, #604]	; (8002bec <main+0x2f8>)
 800298e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 50 * 50 - 1; // 400Hz
 8002994:	4b95      	ldr	r3, [pc, #596]	; (8002bec <main+0x2f8>)
 8002996:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim3);
 800299c:	4894      	ldr	r0, [pc, #592]	; (8002bf0 <main+0x2fc>)
 800299e:	f007 ffa9 	bl	800a8f4 <HAL_TIM_Base_Start_IT>
  	drum_interrupt_start_tick = HAL_GetTick();
 80029a2:	f001 f963 	bl	8003c6c <HAL_GetTick>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b92      	ldr	r3, [pc, #584]	; (8002bf4 <main+0x300>)
 80029ac:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	long last_ticks = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
	long tft_last_ticks = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
	long ticks = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
	int num_hits = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
	int hit_state = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]



	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (ADS1115_ADDRESS << 1), 5, 1) == HAL_OK) {
 80029c2:	2301      	movs	r3, #1
 80029c4:	2205      	movs	r2, #5
 80029c6:	2190      	movs	r1, #144	; 0x90
 80029c8:	488b      	ldr	r0, [pc, #556]	; (8002bf8 <main+0x304>)
 80029ca:	f003 fb25 	bl	8006018 <HAL_I2C_IsDeviceReady>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d000      	beq.n	80029d6 <main+0xe2>
//		return HAL_OK;
	} else {
//		return HAL_ERROR;
		while (1) {}
 80029d4:	e7fe      	b.n	80029d4 <main+0xe0>


	uint32_t reset_ticks;
	while (1) {

		for (int i = 0; i < 4; i++) {
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e014      	b.n	8002a06 <main+0x112>
			if (voltage[i] > max_reading[i]) {
 80029dc:	4a87      	ldr	r2, [pc, #540]	; (8002bfc <main+0x308>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80029e4:	4986      	ldr	r1, [pc, #536]	; (8002c00 <main+0x30c>)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	dd07      	ble.n	8002a00 <main+0x10c>
				max_reading[i] = voltage[i];
 80029f0:	4a82      	ldr	r2, [pc, #520]	; (8002bfc <main+0x308>)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80029f8:	4a81      	ldr	r2, [pc, #516]	; (8002c00 <main+0x30c>)
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < 4; i++) {
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3301      	adds	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	dde7      	ble.n	80029dc <main+0xe8>
			}
		}

		if (HAL_GetTick() - reset_ticks > 1000) {
 8002a0c:	f001 f92e 	bl	8003c6c <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a1a:	d910      	bls.n	8002a3e <main+0x14a>
			reset_ticks = HAL_GetTick();
 8002a1c:	f001 f926 	bl	8003c6c <HAL_GetTick>
 8002a20:	6238      	str	r0, [r7, #32]
			for (int i = 0; i < 4; i++) {
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
 8002a26:	e007      	b.n	8002a38 <main+0x144>
				max_reading[i] = 0;
 8002a28:	4a75      	ldr	r2, [pc, #468]	; (8002c00 <main+0x30c>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < 4; i++) {
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	ddf4      	ble.n	8002a28 <main+0x134>
			}
		}

		int r = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
		if (HAL_GetTick() - tft_last_ticks > 10) {
 8002a42:	f001 f913 	bl	8003c6c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b0a      	cmp	r3, #10
 8002a4e:	d9c2      	bls.n	80029d6 <main+0xe2>

//			uint8_t data;
//			HAL_UART_Receive(&huart1, &data, 1, 10);

//			AddDrum((HAL_GetTick() / 1000) % 2);
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	603a      	str	r2, [r7, #0]
 8002a56:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 8002a5a:	f001 f907 	bl	8003c6c <HAL_GetTick>
 8002a5e:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002a60:	4a68      	ldr	r2, [pc, #416]	; (8002c04 <main+0x310>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 8002a6a:	f001 f8ff 	bl	8003c6c <HAL_GetTick>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	4a65      	ldr	r2, [pc, #404]	; (8002c08 <main+0x314>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002a78:	4b64      	ldr	r3, [pc, #400]	; (8002c0c <main+0x318>)
 8002a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a7e:	095c      	lsrs	r4, r3, #5
 8002a80:	4623      	mov	r3, r4
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1b1b      	subs	r3, r3, r4
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002a8a:	f001 f8ef 	bl	8003c6c <HAL_GetTick>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4a5f      	ldr	r2, [pc, #380]	; (8002c10 <main+0x31c>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002a98:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <main+0x318>)
 8002a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a9e:	095d      	lsrs	r5, r3, #5
 8002aa0:	462b      	mov	r3, r5
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1b5b      	subs	r3, r3, r5
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8002aaa:	f001 f8df 	bl	8003c6c <HAL_GetTick>
 8002aae:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <main+0x31c>)
 8002ab2:	fba2 1203 	umull	r1, r2, r2, r3
 8002ab6:	0996      	lsrs	r6, r2, #6
 8002ab8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002abc:	fb06 f202 	mul.w	r2, r6, r2
 8002ac0:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
 8002ac2:	4b54      	ldr	r3, [pc, #336]	; (8002c14 <main+0x320>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe f924 	bl	8000d14 <__aeabi_i2f>
 8002acc:	4682      	mov	sl, r0
 8002ace:	f001 f8cd 	bl	8003c6c <HAL_GetTick>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4a47      	ldr	r2, [pc, #284]	; (8002bf4 <main+0x300>)
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	3301      	adds	r3, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f915 	bl	8000d0c <__aeabi_ui2f>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4650      	mov	r0, sl
 8002ae8:	f7fe fa1c 	bl	8000f24 <__aeabi_fdiv>
 8002aec:	4603      	mov	r3, r0
 8002aee:	494a      	ldr	r1, [pc, #296]	; (8002c18 <main+0x324>)
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe f963 	bl	8000dbc <__aeabi_fmul>
 8002af6:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1fHz,%2d,%2d",
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fd fd01 	bl	8000500 <__aeabi_f2d>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4946      	ldr	r1, [pc, #280]	; (8002c1c <main+0x328>)
 8002b04:	6809      	ldr	r1, [r1, #0]
 8002b06:	4846      	ldr	r0, [pc, #280]	; (8002c20 <main+0x32c>)
 8002b08:	8800      	ldrh	r0, [r0, #0]
 8002b0a:	9007      	str	r0, [sp, #28]
 8002b0c:	9106      	str	r1, [sp, #24]
 8002b0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002b12:	9602      	str	r6, [sp, #8]
 8002b14:	9501      	str	r5, [sp, #4]
 8002b16:	9400      	str	r4, [sp, #0]
 8002b18:	464b      	mov	r3, r9
 8002b1a:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <main+0x330>)
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7ff fd96 	bl	8002650 <LCD_Print>
					Rx_length, btn_callbacks);
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", max_reading[0], max_reading[1], max_reading[2], max_reading[3]);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	603a      	str	r2, [r7, #0]
 8002b2a:	b299      	uxth	r1, r3
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <main+0x30c>)
 8002b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b32:	461c      	mov	r4, r3
 8002b34:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <main+0x30c>)
 8002b36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <main+0x30c>)
 8002b3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b42:	4618      	mov	r0, r3
 8002b44:	4b2e      	ldr	r3, [pc, #184]	; (8002c00 <main+0x30c>)
 8002b46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002b4a:	9302      	str	r3, [sp, #8]
 8002b4c:	9001      	str	r0, [sp, #4]
 8002b4e:	9200      	str	r2, [sp, #0]
 8002b50:	4623      	mov	r3, r4
 8002b52:	4a35      	ldr	r2, [pc, #212]	; (8002c28 <main+0x334>)
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7ff fd7b 	bl	8002650 <LCD_Print>
////			LCD_DrumCalibration(&r);
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", voltage[0], voltage[1], voltage[2], voltage[3]);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	603a      	str	r2, [r7, #0]
 8002b60:	b299      	uxth	r1, r3
 8002b62:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <main+0x308>)
 8002b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b68:	461c      	mov	r4, r3
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <main+0x308>)
 8002b6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <main+0x308>)
 8002b74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <main+0x308>)
 8002b7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002b80:	9302      	str	r3, [sp, #8]
 8002b82:	9001      	str	r0, [sp, #4]
 8002b84:	9200      	str	r2, [sp, #0]
 8002b86:	4623      	mov	r3, r4
 8002b88:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <main+0x334>)
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7ff fd60 	bl	8002650 <LCD_Print>
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", errors[0], errors[1], errors[2], errors[3]);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	603a      	str	r2, [r7, #0]
 8002b96:	b299      	uxth	r1, r3
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <main+0x338>)
 8002b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b9e:	461c      	mov	r4, r3
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <main+0x338>)
 8002ba2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b20      	ldr	r3, [pc, #128]	; (8002c2c <main+0x338>)
 8002baa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <main+0x338>)
 8002bb2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002bb6:	9302      	str	r3, [sp, #8]
 8002bb8:	9001      	str	r0, [sp, #4]
 8002bba:	9200      	str	r2, [sp, #0]
 8002bbc:	4623      	mov	r3, r4
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <main+0x334>)
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7ff fd45 	bl	8002650 <LCD_Print>
//			LCD_Print(0, 0, "%05d %05d", max_reading[0], voltage[0]);
			//			LCD_DrumCalibration(&r);
			tft_last_ticks = HAL_GetTick();
 8002bc6:	f001 f851 	bl	8003c6c <HAL_GetTick>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
	while (1) {
 8002bce:	e702      	b.n	80029d6 <main+0xe2>
 8002bd0:	20000b30 	.word	0x20000b30
 8002bd4:	20000ec0 	.word	0x20000ec0
 8002bd8:	20000e48 	.word	0x20000e48
 8002bdc:	08016818 	.word	0x08016818
 8002be0:	200007c0 	.word	0x200007c0
 8002be4:	0801681c 	.word	0x0801681c
 8002be8:	20000ba4 	.word	0x20000ba4
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	20000db8 	.word	0x20000db8
 8002bf4:	20000e90 	.word	0x20000e90
 8002bf8:	20000c40 	.word	0x20000c40
 8002bfc:	20000ea4 	.word	0x20000ea4
 8002c00:	20000eac 	.word	0x20000eac
 8002c04:	95217cb1 	.word	0x95217cb1
 8002c08:	45e7b273 	.word	0x45e7b273
 8002c0c:	88888889 	.word	0x88888889
 8002c10:	10624dd3 	.word	0x10624dd3
 8002c14:	20000e94 	.word	0x20000e94
 8002c18:	447a0000 	.word	0x447a0000
 8002c1c:	20000ed0 	.word	0x20000ed0
 8002c20:	20000ebc 	.word	0x20000ebc
 8002c24:	08016830 	.word	0x08016830
 8002c28:	0801685c 	.word	0x0801685c
 8002c2c:	20000eb4 	.word	0x20000eb4

08002c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b096      	sub	sp, #88	; 0x58
 8002c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c3a:	2228      	movs	r2, #40	; 0x28
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f010 fd68 	bl	8013714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	60da      	str	r2, [r3, #12]
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c64:	2301      	movs	r3, #1
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c72:	2301      	movs	r3, #1
 8002c74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c76:	2302      	movs	r3, #2
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f005 fbce 	bl	800842c <HAL_RCC_OscConfig>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002c96:	f000 fb69 	bl	800336c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c9a:	230f      	movs	r3, #15
 8002c9c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002cac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	2102      	movs	r1, #2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fe39 	bl	8008930 <HAL_RCC_ClockConfig>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002cc4:	f000 fb52 	bl	800336c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002ccc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cd0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f005 ffb7 	bl	8008c4c <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002ce4:	f000 fb42 	bl	800336c <Error_Handler>
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3758      	adds	r7, #88	; 0x58
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002d00:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d02:	4a2f      	ldr	r2, [pc, #188]	; (8002dc0 <MX_ADC1_Init+0xd0>)
 8002d04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d1a:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d1c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002d20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002d28:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d2e:	4823      	ldr	r0, [pc, #140]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d30:	f000 ffca 	bl	8003cc8 <HAL_ADC_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002d3a:	f000 fb17 	bl	800336c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d42:	2301      	movs	r3, #1
 8002d44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002d46:	2307      	movs	r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	481b      	ldr	r0, [pc, #108]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d50:	f001 f8a4 	bl	8003e9c <HAL_ADC_ConfigChannel>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002d5a:	f000 fb07 	bl	800336c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d62:	2302      	movs	r3, #2
 8002d64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4814      	ldr	r0, [pc, #80]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d6c:	f001 f896 	bl	8003e9c <HAL_ADC_ConfigChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002d76:	f000 faf9 	bl	800336c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	480d      	ldr	r0, [pc, #52]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002d88:	f001 f888 	bl	8003e9c <HAL_ADC_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002d92:	f000 faeb 	bl	800336c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d96:	2303      	movs	r3, #3
 8002d98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4806      	ldr	r0, [pc, #24]	; (8002dbc <MX_ADC1_Init+0xcc>)
 8002da4:	f001 f87a 	bl	8003e9c <HAL_ADC_ConfigChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002dae:	f000 fadd 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000b30 	.word	0x20000b30
 8002dc0:	40012400 	.word	0x40012400

08002dc4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002dca:	463b      	mov	r3, r7
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <MX_DAC_Init+0x60>)
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <MX_DAC_Init+0x64>)
 8002dd6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002dd8:	4812      	ldr	r0, [pc, #72]	; (8002e24 <MX_DAC_Init+0x60>)
 8002dda:	f001 fbae 	bl	800453a <HAL_DAC_Init>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002de4:	f000 fac2 	bl	800336c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002de8:	2324      	movs	r3, #36	; 0x24
 8002dea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002df0:	463b      	mov	r3, r7
 8002df2:	2200      	movs	r2, #0
 8002df4:	4619      	mov	r1, r3
 8002df6:	480b      	ldr	r0, [pc, #44]	; (8002e24 <MX_DAC_Init+0x60>)
 8002df8:	f001 fd20 	bl	800483c <HAL_DAC_ConfigChannel>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002e02:	f000 fab3 	bl	800336c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002e06:	463b      	mov	r3, r7
 8002e08:	2210      	movs	r2, #16
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4805      	ldr	r0, [pc, #20]	; (8002e24 <MX_DAC_Init+0x60>)
 8002e0e:	f001 fd15 	bl	800483c <HAL_DAC_ConfigChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002e18:	f000 faa8 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000ba4 	.word	0x20000ba4
 8002e28:	40007400 	.word	0x40007400

08002e2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <MX_I2C1_Init+0x54>)
 8002e34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <MX_I2C1_Init+0x58>)
 8002e3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e68:	4804      	ldr	r0, [pc, #16]	; (8002e7c <MX_I2C1_Init+0x50>)
 8002e6a:	f002 fc27 	bl	80056bc <HAL_I2C_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e74:	f000 fa7a 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000c40 	.word	0x20000c40
 8002e80:	40005400 	.word	0x40005400
 8002e84:	000186a0 	.word	0x000186a0

08002e88 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <MX_SDIO_SD_Init+0x38>)
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ec4 <MX_SDIO_SD_Init+0x3c>)
 8002e90:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <MX_SDIO_SD_Init+0x38>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <MX_SDIO_SD_Init+0x38>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <MX_SDIO_SD_Init+0x38>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_SDIO_SD_Init+0x38>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <MX_SDIO_SD_Init+0x38>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <MX_SDIO_SD_Init+0x38>)
 8002eb2:	2264      	movs	r2, #100	; 0x64
 8002eb4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000c94 	.word	0x20000c94
 8002ec4:	40018000 	.word	0x40018000

08002ec8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <MX_SPI2_Init+0x68>)
 8002ed0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ed8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002f14:	220a      	movs	r2, #10
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f18:	4804      	ldr	r0, [pc, #16]	; (8002f2c <MX_SPI2_Init+0x64>)
 8002f1a:	f007 f9b0 	bl	800a27e <HAL_SPI_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f24:	f000 fa22 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000d18 	.word	0x20000d18
 8002f30:	40003800 	.word	0x40003800

08002f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f48:	463b      	mov	r3, r7
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f66:	f240 52db 	movw	r2, #1499	; 0x5db
 8002f6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f78:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f7a:	f007 fbed 	bl	800a758 <HAL_TIM_Base_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f84:	f000 f9f2 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002f96:	f007 fe15 	bl	800abc4 <HAL_TIM_ConfigClockSource>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002fa0:	f000 f9e4 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_TIM2_Init+0x94>)
 8002fb2:	f008 f8d7 	bl	800b164 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fbc:	f000 f9d6 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000d70 	.word	0x20000d70

08002fcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <MX_TIM3_Init+0x94>)
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <MX_TIM3_Init+0x98>)
 8002fec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <MX_TIM3_Init+0x94>)
 8002ff0:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002ff4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <MX_TIM3_Init+0x94>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002ffc:	4b18      	ldr	r3, [pc, #96]	; (8003060 <MX_TIM3_Init+0x94>)
 8002ffe:	2231      	movs	r2, #49	; 0x31
 8003000:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <MX_TIM3_Init+0x94>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <MX_TIM3_Init+0x94>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800300e:	4814      	ldr	r0, [pc, #80]	; (8003060 <MX_TIM3_Init+0x94>)
 8003010:	f007 fba2 	bl	800a758 <HAL_TIM_Base_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800301a:	f000 f9a7 	bl	800336c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800301e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003022:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003024:	f107 0308 	add.w	r3, r7, #8
 8003028:	4619      	mov	r1, r3
 800302a:	480d      	ldr	r0, [pc, #52]	; (8003060 <MX_TIM3_Init+0x94>)
 800302c:	f007 fdca 	bl	800abc4 <HAL_TIM_ConfigClockSource>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003036:	f000 f999 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303a:	2300      	movs	r3, #0
 800303c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003042:	463b      	mov	r3, r7
 8003044:	4619      	mov	r1, r3
 8003046:	4806      	ldr	r0, [pc, #24]	; (8003060 <MX_TIM3_Init+0x94>)
 8003048:	f008 f88c 	bl	800b164 <HAL_TIMEx_MasterConfigSynchronization>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003052:	f000 f98b 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000db8 	.word	0x20000db8
 8003064:	40000400 	.word	0x40000400

08003068 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	605a      	str	r2, [r3, #4]
 8003078:	609a      	str	r2, [r3, #8]
 800307a:	60da      	str	r2, [r3, #12]
 800307c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <MX_TIM4_Init+0x98>)
 8003088:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <MX_TIM4_Init+0x9c>)
 800308a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <MX_TIM4_Init+0x98>)
 800308e:	2200      	movs	r2, #0
 8003090:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003092:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <MX_TIM4_Init+0x98>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <MX_TIM4_Init+0x98>)
 800309a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800309e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a0:	4b17      	ldr	r3, [pc, #92]	; (8003100 <MX_TIM4_Init+0x98>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <MX_TIM4_Init+0x98>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030ac:	4814      	ldr	r0, [pc, #80]	; (8003100 <MX_TIM4_Init+0x98>)
 80030ae:	f007 fb53 	bl	800a758 <HAL_TIM_Base_Init>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80030b8:	f000 f958 	bl	800336c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80030bc:	2305      	movs	r3, #5
 80030be:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80030c0:	2310      	movs	r3, #16
 80030c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80030c4:	f107 030c 	add.w	r3, r7, #12
 80030c8:	4619      	mov	r1, r3
 80030ca:	480d      	ldr	r0, [pc, #52]	; (8003100 <MX_TIM4_Init+0x98>)
 80030cc:	f007 fe41 	bl	800ad52 <HAL_TIM_SlaveConfigSynchro>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80030d6:	f000 f949 	bl	800336c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4806      	ldr	r0, [pc, #24]	; (8003100 <MX_TIM4_Init+0x98>)
 80030e8:	f008 f83c 	bl	800b164 <HAL_TIMEx_MasterConfigSynchronization>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80030f2:	f000 f93b 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000e00 	.word	0x20000e00
 8003104:	40000800 	.word	0x40000800

08003108 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800310e:	4a12      	ldr	r2, [pc, #72]	; (8003158 <MX_USART1_UART_Init+0x50>)
 8003110:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003118:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800312e:	220c      	movs	r2, #12
 8003130:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 800313a:	2200      	movs	r2, #0
 800313c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_USART1_UART_Init+0x4c>)
 8003140:	f008 f88e 	bl	800b260 <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800314a:	f000 f90f 	bl	800336c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000e48 	.word	0x20000e48
 8003158:	40013800 	.word	0x40013800

0800315c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003162:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <MX_DMA_Init+0x70>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4a19      	ldr	r2, [pc, #100]	; (80031cc <MX_DMA_Init+0x70>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6153      	str	r3, [r2, #20]
 800316e:	4b17      	ldr	r3, [pc, #92]	; (80031cc <MX_DMA_Init+0x70>)
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <MX_DMA_Init+0x70>)
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4a13      	ldr	r2, [pc, #76]	; (80031cc <MX_DMA_Init+0x70>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	6153      	str	r3, [r2, #20]
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <MX_DMA_Init+0x70>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	200b      	movs	r0, #11
 8003198:	f001 f999 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800319c:	200b      	movs	r0, #11
 800319e:	f001 f9b2 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 80031a2:	2200      	movs	r2, #0
 80031a4:	2100      	movs	r1, #0
 80031a6:	203a      	movs	r0, #58	; 0x3a
 80031a8:	f001 f991 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 80031ac:	203a      	movs	r0, #58	; 0x3a
 80031ae:	f001 f9aa 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	203b      	movs	r0, #59	; 0x3b
 80031b8:	f001 f989 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 80031bc:	203b      	movs	r0, #59	; 0x3b
 80031be:	f001 f9a2 	bl	8004506 <HAL_NVIC_EnableIRQ>

}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031e4:	4b5c      	ldr	r3, [pc, #368]	; (8003358 <MX_GPIO_Init+0x188>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	4a5b      	ldr	r2, [pc, #364]	; (8003358 <MX_GPIO_Init+0x188>)
 80031ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031ee:	6193      	str	r3, [r2, #24]
 80031f0:	4b59      	ldr	r3, [pc, #356]	; (8003358 <MX_GPIO_Init+0x188>)
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031fc:	4b56      	ldr	r3, [pc, #344]	; (8003358 <MX_GPIO_Init+0x188>)
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	4a55      	ldr	r2, [pc, #340]	; (8003358 <MX_GPIO_Init+0x188>)
 8003202:	f043 0310 	orr.w	r3, r3, #16
 8003206:	6193      	str	r3, [r2, #24]
 8003208:	4b53      	ldr	r3, [pc, #332]	; (8003358 <MX_GPIO_Init+0x188>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003214:	4b50      	ldr	r3, [pc, #320]	; (8003358 <MX_GPIO_Init+0x188>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	4a4f      	ldr	r2, [pc, #316]	; (8003358 <MX_GPIO_Init+0x188>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6193      	str	r3, [r2, #24]
 8003220:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <MX_GPIO_Init+0x188>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <MX_GPIO_Init+0x188>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	4a49      	ldr	r2, [pc, #292]	; (8003358 <MX_GPIO_Init+0x188>)
 8003232:	f043 0308 	orr.w	r3, r3, #8
 8003236:	6193      	str	r3, [r2, #24]
 8003238:	4b47      	ldr	r3, [pc, #284]	; (8003358 <MX_GPIO_Init+0x188>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003244:	4b44      	ldr	r3, [pc, #272]	; (8003358 <MX_GPIO_Init+0x188>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4a43      	ldr	r2, [pc, #268]	; (8003358 <MX_GPIO_Init+0x188>)
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	6193      	str	r3, [r2, #24]
 8003250:	4b41      	ldr	r3, [pc, #260]	; (8003358 <MX_GPIO_Init+0x188>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	607b      	str	r3, [r7, #4]
 800325a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 800325c:	2200      	movs	r2, #0
 800325e:	f64f 0170 	movw	r1, #63600	; 0xf870
 8003262:	483e      	ldr	r0, [pc, #248]	; (800335c <MX_GPIO_Init+0x18c>)
 8003264:	f002 f9f9 	bl	800565a <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8003268:	2200      	movs	r2, #0
 800326a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 800326e:	483c      	ldr	r0, [pc, #240]	; (8003360 <MX_GPIO_Init+0x190>)
 8003270:	f002 f9f3 	bl	800565a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8003274:	2200      	movs	r2, #0
 8003276:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800327a:	483a      	ldr	r0, [pc, #232]	; (8003364 <MX_GPIO_Init+0x194>)
 800327c:	f002 f9ed 	bl	800565a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8003280:	230f      	movs	r3, #15
 8003282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <MX_GPIO_Init+0x198>)
 8003286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003288:	2302      	movs	r3, #2
 800328a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800328c:	f107 0318 	add.w	r3, r7, #24
 8003290:	4619      	mov	r1, r3
 8003292:	4832      	ldr	r0, [pc, #200]	; (800335c <MX_GPIO_Init+0x18c>)
 8003294:	f002 f836 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8003298:	f64f 0370 	movw	r3, #63600	; 0xf870
 800329c:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2302      	movs	r3, #2
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032aa:	f107 0318 	add.w	r3, r7, #24
 80032ae:	4619      	mov	r1, r3
 80032b0:	482a      	ldr	r0, [pc, #168]	; (800335c <MX_GPIO_Init+0x18c>)
 80032b2:	f002 f827 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032bc:	2301      	movs	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2302      	movs	r3, #2
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c8:	f107 0318 	add.w	r3, r7, #24
 80032cc:	4619      	mov	r1, r3
 80032ce:	4824      	ldr	r0, [pc, #144]	; (8003360 <MX_GPIO_Init+0x190>)
 80032d0:	f002 f818 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 80032d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032da:	2301      	movs	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e2:	2302      	movs	r3, #2
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e6:	f107 0318 	add.w	r3, r7, #24
 80032ea:	4619      	mov	r1, r3
 80032ec:	481d      	ldr	r0, [pc, #116]	; (8003364 <MX_GPIO_Init+0x194>)
 80032ee:	f002 f809 	bl	8005304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80032f2:	2380      	movs	r3, #128	; 0x80
 80032f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f6:	2301      	movs	r3, #1
 80032f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032fe:	2303      	movs	r3, #3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003302:	f107 0318 	add.w	r3, r7, #24
 8003306:	4619      	mov	r1, r3
 8003308:	4815      	ldr	r0, [pc, #84]	; (8003360 <MX_GPIO_Init+0x190>)
 800330a:	f001 fffb 	bl	8005304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	2006      	movs	r0, #6
 8003314:	f001 f8db 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003318:	2006      	movs	r0, #6
 800331a:	f001 f8f4 	bl	8004506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	2100      	movs	r1, #0
 8003322:	2007      	movs	r0, #7
 8003324:	f001 f8d3 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003328:	2007      	movs	r0, #7
 800332a:	f001 f8ec 	bl	8004506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800332e:	2200      	movs	r2, #0
 8003330:	2100      	movs	r1, #0
 8003332:	2008      	movs	r0, #8
 8003334:	f001 f8cb 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003338:	2008      	movs	r0, #8
 800333a:	f001 f8e4 	bl	8004506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	2009      	movs	r0, #9
 8003344:	f001 f8c3 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003348:	2009      	movs	r0, #9
 800334a:	f001 f8dc 	bl	8004506 <HAL_NVIC_EnableIRQ>

}
 800334e:	bf00      	nop
 8003350:	3728      	adds	r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	40011800 	.word	0x40011800
 8003360:	40011000 	.word	0x40011000
 8003364:	40010c00 	.word	0x40010c00
 8003368:	10310000 	.word	0x10310000

0800336c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003370:	b672      	cpsid	i
}
 8003372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003374:	e7fe      	b.n	8003374 <Error_Handler+0x8>
	...

08003378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800337e:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <HAL_MspInit+0x40>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <HAL_MspInit+0x40>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6193      	str	r3, [r2, #24]
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_MspInit+0x40>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_MspInit+0x40>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <HAL_MspInit+0x40>)
 800339c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a0:	61d3      	str	r3, [r2, #28]
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_MspInit+0x40>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_ADC_MspInit+0xbc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d149      	bne.n	8003470 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_ADC_MspInit+0xc0>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_ADC_MspInit+0xc0>)
 80033e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033e6:	6193      	str	r3, [r2, #24]
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_ADC_MspInit+0xc0>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f4:	4b21      	ldr	r3, [pc, #132]	; (800347c <HAL_ADC_MspInit+0xc0>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4a20      	ldr	r2, [pc, #128]	; (800347c <HAL_ADC_MspInit+0xc0>)
 80033fa:	f043 0304 	orr.w	r3, r3, #4
 80033fe:	6193      	str	r3, [r2, #24]
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_ADC_MspInit+0xc0>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800340c:	230f      	movs	r3, #15
 800340e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003410:	2303      	movs	r3, #3
 8003412:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	f107 0310 	add.w	r3, r7, #16
 8003418:	4619      	mov	r1, r3
 800341a:	4819      	ldr	r0, [pc, #100]	; (8003480 <HAL_ADC_MspInit+0xc4>)
 800341c:	f001 ff72 	bl	8005304 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 8003422:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_ADC_MspInit+0xcc>)
 8003424:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 8003428:	2200      	movs	r2, #0
 800342a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 800343a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 8003442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003446:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 800344a:	2220      	movs	r2, #32
 800344c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 8003450:	2200      	movs	r2, #0
 8003452:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003454:	480b      	ldr	r0, [pc, #44]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 8003456:	f001 fad1 	bl	80049fc <HAL_DMA_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8003460:	f7ff ff84 	bl	800336c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a07      	ldr	r2, [pc, #28]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 8003468:	621a      	str	r2, [r3, #32]
 800346a:	4a06      	ldr	r2, [pc, #24]	; (8003484 <HAL_ADC_MspInit+0xc8>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003470:	bf00      	nop
 8003472:	3720      	adds	r7, #32
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40012400 	.word	0x40012400
 800347c:	40021000 	.word	0x40021000
 8003480:	40010800 	.word	0x40010800
 8003484:	20000b60 	.word	0x20000b60
 8003488:	40020008 	.word	0x40020008

0800348c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0310 	add.w	r3, r7, #16
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a3d      	ldr	r2, [pc, #244]	; (800359c <HAL_DAC_MspInit+0x110>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d172      	bne.n	8003592 <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80034ac:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_DAC_MspInit+0x114>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <HAL_DAC_MspInit+0x114>)
 80034b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034b6:	61d3      	str	r3, [r2, #28]
 80034b8:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <HAL_DAC_MspInit+0x114>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_DAC_MspInit+0x114>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	4a35      	ldr	r2, [pc, #212]	; (80035a0 <HAL_DAC_MspInit+0x114>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6193      	str	r3, [r2, #24]
 80034d0:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <HAL_DAC_MspInit+0x114>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034dc:	2330      	movs	r3, #48	; 0x30
 80034de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e0:	2303      	movs	r3, #3
 80034e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0310 	add.w	r3, r7, #16
 80034e8:	4619      	mov	r1, r3
 80034ea:	482e      	ldr	r0, [pc, #184]	; (80035a4 <HAL_DAC_MspInit+0x118>)
 80034ec:	f001 ff0a 	bl	8005304 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 80034f0:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 80034f2:	4a2e      	ldr	r2, [pc, #184]	; (80035ac <HAL_DAC_MspInit+0x120>)
 80034f4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f6:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 80034f8:	2210      	movs	r2, #16
 80034fa:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 8003504:	2280      	movs	r2, #128	; 0x80
 8003506:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003508:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 800350a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800350e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 8003512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003516:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003518:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 800351a:	2220      	movs	r2, #32
 800351c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 8003520:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003524:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003526:	4820      	ldr	r0, [pc, #128]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 8003528:	f001 fa68 	bl	80049fc <HAL_DMA_Init>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8003532:	f7ff ff1b 	bl	800336c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_DAC_MspInit+0x11c>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 8003542:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 8003544:	4a1b      	ldr	r2, [pc, #108]	; (80035b4 <HAL_DAC_MspInit+0x128>)
 8003546:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 800354a:	2210      	movs	r2, #16
 800354c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 800355c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003560:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 8003564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003568:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 800356c:	2220      	movs	r2, #32
 800356e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8003576:	480e      	ldr	r0, [pc, #56]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 8003578:	f001 fa40 	bl	80049fc <HAL_DMA_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 8003582:	f7ff fef3 	bl	800336c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_DAC_MspInit+0x124>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003592:	bf00      	nop
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40007400 	.word	0x40007400
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010800 	.word	0x40010800
 80035a8:	20000bb8 	.word	0x20000bb8
 80035ac:	40020430 	.word	0x40020430
 80035b0:	20000bfc 	.word	0x20000bfc
 80035b4:	40020444 	.word	0x40020444

080035b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0310 	add.w	r3, r7, #16
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_I2C_MspInit+0x70>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d123      	bne.n	8003620 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d8:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_I2C_MspInit+0x74>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	4a13      	ldr	r2, [pc, #76]	; (800362c <HAL_I2C_MspInit+0x74>)
 80035de:	f043 0308 	orr.w	r3, r3, #8
 80035e2:	6193      	str	r3, [r2, #24]
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_I2C_MspInit+0x74>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035f0:	23c0      	movs	r3, #192	; 0xc0
 80035f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035f4:	2312      	movs	r3, #18
 80035f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f8:	2303      	movs	r3, #3
 80035fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	4619      	mov	r1, r3
 8003602:	480b      	ldr	r0, [pc, #44]	; (8003630 <HAL_I2C_MspInit+0x78>)
 8003604:	f001 fe7e 	bl	8005304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_I2C_MspInit+0x74>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_I2C_MspInit+0x74>)
 800360e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003612:	61d3      	str	r3, [r2, #28]
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_I2C_MspInit+0x74>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003620:	bf00      	nop
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40005400 	.word	0x40005400
 800362c:	40021000 	.word	0x40021000
 8003630:	40010c00 	.word	0x40010c00

08003634 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0318 	add.w	r3, r7, #24
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a22      	ldr	r2, [pc, #136]	; (80036d8 <HAL_SD_MspInit+0xa4>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d13c      	bne.n	80036ce <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003654:	4b21      	ldr	r3, [pc, #132]	; (80036dc <HAL_SD_MspInit+0xa8>)
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4a20      	ldr	r2, [pc, #128]	; (80036dc <HAL_SD_MspInit+0xa8>)
 800365a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800365e:	6153      	str	r3, [r2, #20]
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_SD_MspInit+0xa8>)
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_SD_MspInit+0xa8>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	4a1a      	ldr	r2, [pc, #104]	; (80036dc <HAL_SD_MspInit+0xa8>)
 8003672:	f043 0310 	orr.w	r3, r3, #16
 8003676:	6193      	str	r3, [r2, #24]
 8003678:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_SD_MspInit+0xa8>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_SD_MspInit+0xa8>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <HAL_SD_MspInit+0xa8>)
 800368a:	f043 0320 	orr.w	r3, r3, #32
 800368e:	6193      	str	r3, [r2, #24]
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_SD_MspInit+0xa8>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800369c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80036a0:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036a6:	2303      	movs	r3, #3
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036aa:	f107 0318 	add.w	r3, r7, #24
 80036ae:	4619      	mov	r1, r3
 80036b0:	480b      	ldr	r0, [pc, #44]	; (80036e0 <HAL_SD_MspInit+0xac>)
 80036b2:	f001 fe27 	bl	8005304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036b6:	2304      	movs	r3, #4
 80036b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036be:	2303      	movs	r3, #3
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c2:	f107 0318 	add.w	r3, r7, #24
 80036c6:	4619      	mov	r1, r3
 80036c8:	4806      	ldr	r0, [pc, #24]	; (80036e4 <HAL_SD_MspInit+0xb0>)
 80036ca:	f001 fe1b 	bl	8005304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80036ce:	bf00      	nop
 80036d0:	3728      	adds	r7, #40	; 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40018000 	.word	0x40018000
 80036dc:	40021000 	.word	0x40021000
 80036e0:	40011000 	.word	0x40011000
 80036e4:	40011400 	.word	0x40011400

080036e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	f107 0310 	add.w	r3, r7, #16
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_SPI_MspInit+0x8c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d131      	bne.n	800376c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_SPI_MspInit+0x90>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_SPI_MspInit+0x90>)
 800370e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003712:	61d3      	str	r3, [r2, #28]
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <HAL_SPI_MspInit+0x90>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_SPI_MspInit+0x90>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_SPI_MspInit+0x90>)
 8003726:	f043 0308 	orr.w	r3, r3, #8
 800372a:	6193      	str	r3, [r2, #24]
 800372c:	4b12      	ldr	r3, [pc, #72]	; (8003778 <HAL_SPI_MspInit+0x90>)
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003738:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800373c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003746:	f107 0310 	add.w	r3, r7, #16
 800374a:	4619      	mov	r1, r3
 800374c:	480b      	ldr	r0, [pc, #44]	; (800377c <HAL_SPI_MspInit+0x94>)
 800374e:	f001 fdd9 	bl	8005304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003752:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003756:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	4619      	mov	r1, r3
 8003766:	4805      	ldr	r0, [pc, #20]	; (800377c <HAL_SPI_MspInit+0x94>)
 8003768:	f001 fdcc 	bl	8005304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800376c:	bf00      	nop
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40003800 	.word	0x40003800
 8003778:	40021000 	.word	0x40021000
 800377c:	40010c00 	.word	0x40010c00

08003780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d10c      	bne.n	80037ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	61d3      	str	r3, [r2, #28]
 800379e:	4b1f      	ldr	r3, [pc, #124]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037aa:	e032      	b.n	8003812 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_TIM_Base_MspInit+0xa0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d114      	bne.n	80037e0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	61d3      	str	r3, [r2, #28]
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	201d      	movs	r0, #29
 80037d4:	f000 fe7b 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037d8:	201d      	movs	r0, #29
 80037da:	f000 fe94 	bl	8004506 <HAL_NVIC_EnableIRQ>
}
 80037de:	e018      	b.n	8003812 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <HAL_TIM_Base_MspInit+0xa4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d113      	bne.n	8003812 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	4a0b      	ldr	r2, [pc, #44]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	61d3      	str	r3, [r2, #28]
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_TIM_Base_MspInit+0x9c>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	2100      	movs	r1, #0
 8003806:	201e      	movs	r0, #30
 8003808:	f000 fe61 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800380c:	201e      	movs	r0, #30
 800380e:	f000 fe7a 	bl	8004506 <HAL_NVIC_EnableIRQ>
}
 8003812:	bf00      	nop
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800

08003828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0310 	add.w	r3, r7, #16
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a20      	ldr	r2, [pc, #128]	; (80038c4 <HAL_UART_MspInit+0x9c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d139      	bne.n	80038bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 800384e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003852:	6193      	str	r3, [r2, #24]
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6193      	str	r3, [r2, #24]
 800386c:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <HAL_UART_MspInit+0xa0>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800387c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003882:	2303      	movs	r3, #3
 8003884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	4619      	mov	r1, r3
 800388c:	480f      	ldr	r0, [pc, #60]	; (80038cc <HAL_UART_MspInit+0xa4>)
 800388e:	f001 fd39 	bl	8005304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	4619      	mov	r1, r3
 80038a6:	4809      	ldr	r0, [pc, #36]	; (80038cc <HAL_UART_MspInit+0xa4>)
 80038a8:	f001 fd2c 	bl	8005304 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038ac:	2200      	movs	r2, #0
 80038ae:	2100      	movs	r1, #0
 80038b0:	2025      	movs	r0, #37	; 0x25
 80038b2:	f000 fe0c 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038b6:	2025      	movs	r0, #37	; 0x25
 80038b8:	f000 fe25 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80038bc:	bf00      	nop
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010800 	.word	0x40010800

080038d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <NMI_Handler+0x4>

080038d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038da:	e7fe      	b.n	80038da <HardFault_Handler+0x4>

080038dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <MemManage_Handler+0x4>

080038e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <BusFault_Handler+0x4>

080038e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <UsageFault_Handler+0x4>

080038ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038fa:	b480      	push	{r7}
 80038fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038fe:	bf00      	nop
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003906:	b480      	push	{r7}
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800390a:	bf00      	nop
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003916:	f000 f997 	bl	8003c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	bd80      	pop	{r7, pc}

0800391e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003922:	2001      	movs	r0, #1
 8003924:	f001 feb2 	bl	800568c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003930:	2002      	movs	r0, #2
 8003932:	f001 feab 	bl	800568c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}

0800393a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800393e:	2004      	movs	r0, #4
 8003940:	f001 fea4 	bl	800568c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}

08003948 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800394c:	2008      	movs	r0, #8
 800394e:	f001 fe9d 	bl	800568c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <DMA1_Channel1_IRQHandler+0x10>)
 800395e:	f001 fa67 	bl	8004e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000b60 	.word	0x20000b60

0800396c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003972:	f003 f929 	bl	8006bc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200013d8 	.word	0x200013d8

08003980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <TIM3_IRQHandler+0x10>)
 8003986:	f007 f815 	bl	800a9b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000db8 	.word	0x20000db8

08003994 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003998:	4802      	ldr	r0, [pc, #8]	; (80039a4 <TIM4_IRQHandler+0x10>)
 800399a:	f007 f80b 	bl	800a9b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000e00 	.word	0x20000e00

080039a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <USART1_IRQHandler+0x10>)
 80039ae:	f007 fccd 	bl	800b34c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000e48 	.word	0x20000e48

080039bc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <DMA2_Channel3_IRQHandler+0x10>)
 80039c2:	f001 fa35 	bl	8004e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000bb8 	.word	0x20000bb8

080039d0 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <DMA2_Channel4_5_IRQHandler+0x10>)
 80039d6:	f001 fa2b 	bl	8004e30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000bfc 	.word	0x20000bfc

080039e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	return 1;
 80039e8:	2301      	movs	r3, #1
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <_kill>:

int _kill(int pid, int sig)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039fc:	f00f fe50 	bl	80136a0 <__errno>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2216      	movs	r2, #22
 8003a04:	601a      	str	r2, [r3, #0]
	return -1;
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_exit>:

void _exit (int status)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ffe7 	bl	80039f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a24:	e7fe      	b.n	8003a24 <_exit+0x12>

08003a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e00a      	b.n	8003a4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a38:	f3af 8000 	nop.w
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	60ba      	str	r2, [r7, #8]
 8003a44:	b2ca      	uxtb	r2, r1
 8003a46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dbf0      	blt.n	8003a38 <_read+0x12>
	}

return len;
 8003a56:	687b      	ldr	r3, [r7, #4]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e009      	b.n	8003a86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	60ba      	str	r2, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	3301      	adds	r3, #1
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	dbf1      	blt.n	8003a72 <_write+0x12>
	}
	return len;
 8003a8e:	687b      	ldr	r3, [r7, #4]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <_close>:

int _close(int file)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	return -1;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003abe:	605a      	str	r2, [r3, #4]
	return 0;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <_isatty>:

int _isatty(int file)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	return 1;
 8003ad4:	2301      	movs	r3, #1
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
	return 0;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr

08003af8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <_sbrk+0x5c>)
 8003b02:	4b15      	ldr	r3, [pc, #84]	; (8003b58 <_sbrk+0x60>)
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <_sbrk+0x64>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <_sbrk+0x64>)
 8003b16:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <_sbrk+0x68>)
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <_sbrk+0x64>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4413      	add	r3, r2
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d207      	bcs.n	8003b38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b28:	f00f fdba 	bl	80136a0 <__errno>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	220c      	movs	r2, #12
 8003b30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
 8003b36:	e009      	b.n	8003b4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <_sbrk+0x64>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b3e:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <_sbrk+0x64>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	4a05      	ldr	r2, [pc, #20]	; (8003b5c <_sbrk+0x64>)
 8003b48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20010000 	.word	0x20010000
 8003b58:	00000400 	.word	0x00000400
 8003b5c:	20000ed4 	.word	0x20000ed4
 8003b60:	200016f0 	.word	0x200016f0

08003b64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b70:	f7ff fff8 	bl	8003b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b76:	490c      	ldr	r1, [pc, #48]	; (8003ba8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b7c:	e002      	b.n	8003b84 <LoopCopyDataInit>

08003b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b82:	3304      	adds	r3, #4

08003b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b88:	d3f9      	bcc.n	8003b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b8c:	4c09      	ldr	r4, [pc, #36]	; (8003bb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b90:	e001      	b.n	8003b96 <LoopFillZerobss>

08003b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b94:	3204      	adds	r2, #4

08003b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b98:	d3fb      	bcc.n	8003b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b9a:	f00f fd87 	bl	80136ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b9e:	f7fe fea9 	bl	80028f4 <main>
  bx lr
 8003ba2:	4770      	bx	lr
  ldr r0, =_sdata
 8003ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba8:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8003bac:	0802ffb4 	.word	0x0802ffb4
  ldr r2, =_sbss
 8003bb0:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8003bb4:	200016ec 	.word	0x200016ec

08003bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bb8:	e7fe      	b.n	8003bb8 <ADC1_2_IRQHandler>
	...

08003bbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_Init+0x28>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a07      	ldr	r2, [pc, #28]	; (8003be4 <HAL_Init+0x28>)
 8003bc6:	f043 0310 	orr.w	r3, r3, #16
 8003bca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f000 fc73 	bl	80044b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f000 f808 	bl	8003be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bd8:	f7ff fbce 	bl	8003378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40022000 	.word	0x40022000

08003be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_InitTick+0x54>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_InitTick+0x58>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fc8b 	bl	8004522 <HAL_SYSTICK_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e00e      	b.n	8003c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d80a      	bhi.n	8003c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	f04f 30ff 	mov.w	r0, #4294967295
 8003c24:	f000 fc53 	bl	80044ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c28:	4a06      	ldr	r2, [pc, #24]	; (8003c44 <HAL_InitTick+0x5c>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000010 	.word	0x20000010
 8003c40:	20000018 	.word	0x20000018
 8003c44:	20000014 	.word	0x20000014

08003c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <HAL_IncTick+0x1c>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_IncTick+0x20>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <HAL_IncTick+0x20>)
 8003c5a:	6013      	str	r3, [r2, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	20000018 	.word	0x20000018
 8003c68:	20000ed8 	.word	0x20000ed8

08003c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c70:	4b02      	ldr	r3, [pc, #8]	; (8003c7c <HAL_GetTick+0x10>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	20000ed8 	.word	0x20000ed8

08003c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c88:	f7ff fff0 	bl	8003c6c <HAL_GetTick>
 8003c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d005      	beq.n	8003ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_Delay+0x44>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ca6:	bf00      	nop
 8003ca8:	f7ff ffe0 	bl	8003c6c <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d8f7      	bhi.n	8003ca8 <HAL_Delay+0x28>
  {
  }
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000018 	.word	0x20000018

08003cc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e0ce      	b.n	8003e88 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fb58 	bl	80033bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fa17 	bl	8004140 <ADC_ConversionStop_Disable>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f040 80a9 	bne.w	8003e76 <HAL_ADC_Init+0x1ae>
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 80a5 	bne.w	8003e76 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d34:	f023 0302 	bic.w	r3, r3, #2
 8003d38:	f043 0202 	orr.w	r2, r3, #2
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4951      	ldr	r1, [pc, #324]	; (8003e90 <HAL_ADC_Init+0x1c8>)
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	d10a      	bne.n	8003d64 <HAL_ADC_Init+0x9c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d56:	d002      	beq.n	8003d5e <HAL_ADC_Init+0x96>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	e004      	b.n	8003d68 <HAL_ADC_Init+0xa0>
 8003d5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003d62:	e001      	b.n	8003d68 <HAL_ADC_Init+0xa0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7b1b      	ldrb	r3, [r3, #12]
 8003d6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003d70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d80:	d003      	beq.n	8003d8a <HAL_ADC_Init+0xc2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_ADC_Init+0xc8>
 8003d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d8e:	e000      	b.n	8003d92 <HAL_ADC_Init+0xca>
 8003d90:	2300      	movs	r3, #0
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	7d1b      	ldrb	r3, [r3, #20]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d119      	bne.n	8003dd4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7b1b      	ldrb	r3, [r3, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d109      	bne.n	8003dbc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	035a      	lsls	r2, r3, #13
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e00b      	b.n	8003dd4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	f043 0201 	orr.w	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <HAL_ADC_Init+0x1cc>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e04:	d003      	beq.n	8003e0e <HAL_ADC_Init+0x146>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d104      	bne.n	8003e18 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	051b      	lsls	r3, r3, #20
 8003e16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_ADC_Init+0x1d0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d10b      	bne.n	8003e54 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	f043 0201 	orr.w	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e52:	e018      	b.n	8003e86 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f023 0312 	bic.w	r3, r3, #18
 8003e5c:	f043 0210 	orr.w	r2, r3, #16
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	f043 0201 	orr.w	r2, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003e74:	e007      	b.n	8003e86 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	f043 0210 	orr.w	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40013c00 	.word	0x40013c00
 8003e94:	ffe1f7fd 	.word	0xffe1f7fd
 8003e98:	ff1f0efe 	.word	0xff1f0efe

08003e9c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x20>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0dc      	b.n	8004076 <HAL_ADC_ConfigChannel+0x1da>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b06      	cmp	r3, #6
 8003eca:	d81c      	bhi.n	8003f06 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	3b05      	subs	r3, #5
 8003ede:	221f      	movs	r2, #31
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	4019      	ands	r1, r3
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3b05      	subs	r3, #5
 8003ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34
 8003f04:	e03c      	b.n	8003f80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d81c      	bhi.n	8003f48 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3b23      	subs	r3, #35	; 0x23
 8003f20:	221f      	movs	r2, #31
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	4019      	ands	r1, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	3b23      	subs	r3, #35	; 0x23
 8003f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
 8003f46:	e01b      	b.n	8003f80 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	3b41      	subs	r3, #65	; 0x41
 8003f5a:	221f      	movs	r2, #31
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	4019      	ands	r1, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	3b41      	subs	r3, #65	; 0x41
 8003f74:	fa00 f203 	lsl.w	r2, r0, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b09      	cmp	r3, #9
 8003f86:	d91c      	bls.n	8003fc2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68d9      	ldr	r1, [r3, #12]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	3b1e      	subs	r3, #30
 8003f9a:	2207      	movs	r2, #7
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	4019      	ands	r1, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6898      	ldr	r0, [r3, #8]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3b1e      	subs	r3, #30
 8003fb4:	fa00 f203 	lsl.w	r2, r0, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	60da      	str	r2, [r3, #12]
 8003fc0:	e019      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6919      	ldr	r1, [r3, #16]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	2207      	movs	r2, #7
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	4019      	ands	r1, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6898      	ldr	r0, [r3, #8]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	fa00 f203 	lsl.w	r2, r0, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b10      	cmp	r3, #16
 8003ffc:	d003      	beq.n	8004006 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004002:	2b11      	cmp	r3, #17
 8004004:	d132      	bne.n	800406c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_ADC_ConfigChannel+0x1e4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d125      	bne.n	800405c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d126      	bne.n	800406c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800402c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b10      	cmp	r3, #16
 8004034:	d11a      	bne.n	800406c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_ADC_ConfigChannel+0x1e8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <HAL_ADC_ConfigChannel+0x1ec>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	0c9a      	lsrs	r2, r3, #18
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800404c:	e002      	b.n	8004054 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3b01      	subs	r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f9      	bne.n	800404e <HAL_ADC_ConfigChannel+0x1b2>
 800405a:	e007      	b.n	800406c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	40012400 	.word	0x40012400
 8004084:	20000010 	.word	0x20000010
 8004088:	431bde83 	.word	0x431bde83

0800408c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d040      	beq.n	800412c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040ba:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <ADC_Enable+0xac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1f      	ldr	r2, [pc, #124]	; (800413c <ADC_Enable+0xb0>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	0c9b      	lsrs	r3, r3, #18
 80040c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040c8:	e002      	b.n	80040d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f9      	bne.n	80040ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040d6:	f7ff fdc9 	bl	8003c6c <HAL_GetTick>
 80040da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80040dc:	e01f      	b.n	800411e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040de:	f7ff fdc5 	bl	8003c6c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d918      	bls.n	800411e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d011      	beq.n	800411e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	f043 0210 	orr.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f043 0201 	orr.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e007      	b.n	800412e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d1d8      	bne.n	80040de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000010 	.word	0x20000010
 800413c:	431bde83 	.word	0x431bde83

08004140 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b01      	cmp	r3, #1
 8004158:	d12e      	bne.n	80041b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0201 	bic.w	r2, r2, #1
 8004168:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800416a:	f7ff fd7f 	bl	8003c6c <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004170:	e01b      	b.n	80041aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004172:	f7ff fd7b 	bl	8003c6c <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d914      	bls.n	80041aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10d      	bne.n	80041aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	f043 0210 	orr.w	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e007      	b.n	80041ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d0dc      	beq.n	8004172 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_ADCEx_Calibration_Start+0x1e>
 80041de:	2302      	movs	r3, #2
 80041e0:	e097      	b.n	8004312 <HAL_ADCEx_Calibration_Start+0x14e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7ff ffa8 	bl	8004140 <ADC_ConversionStop_Disable>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff49 	bl	800408c <ADC_Enable>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f040 8081 	bne.w	8004308 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800420e:	f023 0302 	bic.w	r3, r3, #2
 8004212:	f043 0202 	orr.w	r2, r3, #2
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800421a:	4b40      	ldr	r3, [pc, #256]	; (800431c <HAL_ADCEx_Calibration_Start+0x158>)
 800421c:	681c      	ldr	r4, [r3, #0]
 800421e:	2002      	movs	r0, #2
 8004220:	f004 fdca 	bl	8008db8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004224:	4603      	mov	r3, r0
 8004226:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800422a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800422c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800422e:	e002      	b.n	8004236 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b01      	subs	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f9      	bne.n	8004230 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800424c:	f7ff fd0e 	bl	8003c6c <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004252:	e01b      	b.n	800428c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004254:	f7ff fd0a 	bl	8003c6c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b0a      	cmp	r3, #10
 8004260:	d914      	bls.n	800428c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004274:	f023 0312 	bic.w	r3, r3, #18
 8004278:	f043 0210 	orr.w	r2, r3, #16
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e042      	b.n	8004312 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1dc      	bne.n	8004254 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0204 	orr.w	r2, r2, #4
 80042a8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80042aa:	f7ff fcdf 	bl	8003c6c <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042b0:	e01b      	b.n	80042ea <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80042b2:	f7ff fcdb 	bl	8003c6c <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b0a      	cmp	r3, #10
 80042be:	d914      	bls.n	80042ea <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	f023 0312 	bic.w	r3, r3, #18
 80042d6:	f043 0210 	orr.w	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e013      	b.n	8004312 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1dc      	bne.n	80042b2 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f023 0303 	bic.w	r3, r3, #3
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
}
 8004312:	4618      	mov	r0, r3
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	bd90      	pop	{r4, r7, pc}
 800431a:	bf00      	nop
 800431c:	20000010 	.word	0x20000010

08004320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800433c:	4013      	ands	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800434c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004352:	4a04      	ldr	r2, [pc, #16]	; (8004364 <__NVIC_SetPriorityGrouping+0x44>)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	60d3      	str	r3, [r2, #12]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <__NVIC_GetPriorityGrouping+0x18>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 0307 	and.w	r3, r3, #7
}
 8004376:	4618      	mov	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	2b00      	cmp	r3, #0
 8004394:	db0b      	blt.n	80043ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	4906      	ldr	r1, [pc, #24]	; (80043b8 <__NVIC_EnableIRQ+0x34>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	2001      	movs	r0, #1
 80043a6:	fa00 f202 	lsl.w	r2, r0, r2
 80043aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	e000e100 	.word	0xe000e100

080043bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db0a      	blt.n	80043e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	490c      	ldr	r1, [pc, #48]	; (8004408 <__NVIC_SetPriority+0x4c>)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	0112      	lsls	r2, r2, #4
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	440b      	add	r3, r1
 80043e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e4:	e00a      	b.n	80043fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4908      	ldr	r1, [pc, #32]	; (800440c <__NVIC_SetPriority+0x50>)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	3b04      	subs	r3, #4
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	440b      	add	r3, r1
 80043fa:	761a      	strb	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	e000e100 	.word	0xe000e100
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f1c3 0307 	rsb	r3, r3, #7
 800442a:	2b04      	cmp	r3, #4
 800442c:	bf28      	it	cs
 800442e:	2304      	movcs	r3, #4
 8004430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3304      	adds	r3, #4
 8004436:	2b06      	cmp	r3, #6
 8004438:	d902      	bls.n	8004440 <NVIC_EncodePriority+0x30>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3b03      	subs	r3, #3
 800443e:	e000      	b.n	8004442 <NVIC_EncodePriority+0x32>
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004444:	f04f 32ff 	mov.w	r2, #4294967295
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	401a      	ands	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004458:	f04f 31ff 	mov.w	r1, #4294967295
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43d9      	mvns	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	4313      	orrs	r3, r2
         );
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	; 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004484:	d301      	bcc.n	800448a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004486:	2301      	movs	r3, #1
 8004488:	e00f      	b.n	80044aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <SysTick_Config+0x40>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004492:	210f      	movs	r1, #15
 8004494:	f04f 30ff 	mov.w	r0, #4294967295
 8004498:	f7ff ff90 	bl	80043bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800449c:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <SysTick_Config+0x40>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a2:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <SysTick_Config+0x40>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	e000e010 	.word	0xe000e010

080044b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff2d 	bl	8004320 <__NVIC_SetPriorityGrouping>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e0:	f7ff ff42 	bl	8004368 <__NVIC_GetPriorityGrouping>
 80044e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7ff ff90 	bl	8004410 <NVIC_EncodePriority>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff5f 	bl	80043bc <__NVIC_SetPriority>
}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff35 	bl	8004384 <__NVIC_EnableIRQ>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ffa2 	bl	8004474 <SysTick_Config>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e014      	b.n	8004576 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	791b      	ldrb	r3, [r3, #4]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d105      	bne.n	8004562 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fe ff95 	bl	800348c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2202      	movs	r2, #2
 8004566:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e046      	b.n	8004620 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	795b      	ldrb	r3, [r3, #5]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_DAC_Start+0x20>
 800459a:	2302      	movs	r3, #2
 800459c:	e040      	b.n	8004620 <HAL_DAC_Start+0xa2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6819      	ldr	r1, [r3, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2201      	movs	r2, #1
 80045b8:	409a      	lsls	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10f      	bne.n	80045e8 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80045d2:	2b3c      	cmp	r3, #60	; 0x3c
 80045d4:	d11d      	bne.n	8004612 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	e014      	b.n	8004612 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	213c      	movs	r1, #60	; 0x3c
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	429a      	cmp	r2, r3
 8004600:	d107      	bne.n	8004612 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0202 	orr.w	r2, r2, #2
 8004610:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
	...

0800462c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e092      	b.n	800476a <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	795b      	ldrb	r3, [r3, #5]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_DAC_Start_DMA+0x24>
 800464c:	2302      	movs	r3, #2
 800464e:	e08c      	b.n	800476a <HAL_DAC_Start_DMA+0x13e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2202      	movs	r2, #2
 800465a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d129      	bne.n	80046b6 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4a43      	ldr	r2, [pc, #268]	; (8004774 <HAL_DAC_Start_DMA+0x148>)
 8004668:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	4a42      	ldr	r2, [pc, #264]	; (8004778 <HAL_DAC_Start_DMA+0x14c>)
 8004670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	4a41      	ldr	r2, [pc, #260]	; (800477c <HAL_DAC_Start_DMA+0x150>)
 8004678:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004688:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_DAC_Start_DMA+0x6c>
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d005      	beq.n	80046a2 <HAL_DAC_Start_DMA+0x76>
 8004696:	e009      	b.n	80046ac <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3308      	adds	r3, #8
 800469e:	613b      	str	r3, [r7, #16]
        break;
 80046a0:	e033      	b.n	800470a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	613b      	str	r3, [r7, #16]
        break;
 80046aa:	e02e      	b.n	800470a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3310      	adds	r3, #16
 80046b2:	613b      	str	r3, [r7, #16]
        break;
 80046b4:	e029      	b.n	800470a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	4a31      	ldr	r2, [pc, #196]	; (8004780 <HAL_DAC_Start_DMA+0x154>)
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a30      	ldr	r2, [pc, #192]	; (8004784 <HAL_DAC_Start_DMA+0x158>)
 80046c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <HAL_DAC_Start_DMA+0x15c>)
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_DAC_Start_DMA+0xc0>
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d005      	beq.n	80046f6 <HAL_DAC_Start_DMA+0xca>
 80046ea:	e009      	b.n	8004700 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3314      	adds	r3, #20
 80046f2:	613b      	str	r3, [r7, #16]
        break;
 80046f4:	e009      	b.n	800470a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3318      	adds	r3, #24
 80046fc:	613b      	str	r3, [r7, #16]
        break;
 80046fe:	e004      	b.n	800470a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	331c      	adds	r3, #28
 8004706:	613b      	str	r3, [r7, #16]
        break;
 8004708:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6898      	ldr	r0, [r3, #8]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	f000 f9e5 	bl	8004ae8 <HAL_DMA_Start_IT>
 800471e:	4603      	mov	r3, r0
 8004720:	75fb      	strb	r3, [r7, #23]
 8004722:	e008      	b.n	8004736 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68d8      	ldr	r0, [r3, #12]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	f000 f9db 	bl	8004ae8 <HAL_DMA_Start_IT>
 8004732:	4603      	mov	r3, r0
 8004734:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10c      	bne.n	800475c <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2201      	movs	r2, #1
 8004750:	409a      	lsls	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e005      	b.n	8004768 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	080048ed 	.word	0x080048ed
 8004778:	0800490f 	.word	0x0800490f
 800477c:	0800492b 	.word	0x0800492b
 8004780:	0800498f 	.word	0x0800498f
 8004784:	080049b1 	.word	0x080049b1
 8004788:	080049cd 	.word	0x080049cd

0800478c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e02e      	b.n	80047fe <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6819      	ldr	r1, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	43da      	mvns	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	400a      	ands	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2201      	movs	r2, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43da      	mvns	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	400a      	ands	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f9df 	bl	8004ba8 <HAL_DMA_Abort>
 80047ea:	e004      	b.n	80047f6 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f9d9 	bl	8004ba8 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_DAC_ConfigChannel+0x1c>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e042      	b.n	80048e2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	795b      	ldrb	r3, [r3, #5]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_DAC_ConfigChannel+0x2c>
 8004864:	2302      	movs	r3, #2
 8004866:	e03c      	b.n	80048e2 <HAL_DAC_ConfigChannel+0xa6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2202      	movs	r2, #2
 8004872:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4313      	orrs	r3, r2
 800489c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6819      	ldr	r1, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	22c0      	movs	r2, #192	; 0xc0
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43da      	mvns	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	400a      	ands	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3724      	adds	r7, #36	; 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff ff83 	bl	8004806 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	711a      	strb	r2, [r3, #4]
}
 8004906:	bf00      	nop
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b084      	sub	sp, #16
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff ff7b 	bl	8004818 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f043 0204 	orr.w	r2, r3, #4
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff ff70 	bl	800482a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	711a      	strb	r2, [r3, #4]
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ffdb 	bl	8004958 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	711a      	strb	r2, [r3, #4]
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff ffd3 	bl	800496a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f043 0204 	orr.w	r2, r3, #4
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff ffc8 	bl	800497c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	711a      	strb	r2, [r3, #4]
}
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e059      	b.n	8004ac6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <HAL_DMA_Init+0xd4>)
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d80f      	bhi.n	8004a3e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <HAL_DMA_Init+0xd8>)
 8004a26:	4413      	add	r3, r2
 8004a28:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <HAL_DMA_Init+0xdc>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	009a      	lsls	r2, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a28      	ldr	r2, [pc, #160]	; (8004adc <HAL_DMA_Init+0xe0>)
 8004a3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a3c:	e00e      	b.n	8004a5c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b26      	ldr	r3, [pc, #152]	; (8004ae0 <HAL_DMA_Init+0xe4>)
 8004a46:	4413      	add	r3, r2
 8004a48:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <HAL_DMA_Init+0xdc>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	009a      	lsls	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <HAL_DMA_Init+0xe8>)
 8004a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a72:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr
 8004ad0:	40020407 	.word	0x40020407
 8004ad4:	bffdfff8 	.word	0xbffdfff8
 8004ad8:	cccccccd 	.word	0xcccccccd
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	bffdfbf8 	.word	0xbffdfbf8
 8004ae4:	40020400 	.word	0x40020400

08004ae8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_DMA_Start_IT+0x20>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e04b      	b.n	8004ba0 <HAL_DMA_Start_IT+0xb8>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d13a      	bne.n	8004b92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0201 	bic.w	r2, r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68b9      	ldr	r1, [r7, #8]
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fbb1 	bl	80052a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 020e 	orr.w	r2, r2, #14
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e00f      	b.n	8004b80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0204 	bic.w	r2, r2, #4
 8004b6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 020a 	orr.w	r2, r2, #10
 8004b7e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	e005      	b.n	8004b9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d008      	beq.n	8004bd2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e020      	b.n	8004c14 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 020e 	bic.w	r2, r2, #14
 8004be0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0201 	bic.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8004c00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
	...

08004c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d005      	beq.n	8004c44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	e0d6      	b.n	8004df2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 020e 	bic.w	r2, r2, #14
 8004c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4b64      	ldr	r3, [pc, #400]	; (8004dfc <HAL_DMA_Abort_IT+0x1dc>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d958      	bls.n	8004d22 <HAL_DMA_Abort_IT+0x102>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a62      	ldr	r2, [pc, #392]	; (8004e00 <HAL_DMA_Abort_IT+0x1e0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04f      	beq.n	8004d1a <HAL_DMA_Abort_IT+0xfa>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a61      	ldr	r2, [pc, #388]	; (8004e04 <HAL_DMA_Abort_IT+0x1e4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d048      	beq.n	8004d16 <HAL_DMA_Abort_IT+0xf6>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a5f      	ldr	r2, [pc, #380]	; (8004e08 <HAL_DMA_Abort_IT+0x1e8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d040      	beq.n	8004d10 <HAL_DMA_Abort_IT+0xf0>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5e      	ldr	r2, [pc, #376]	; (8004e0c <HAL_DMA_Abort_IT+0x1ec>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d038      	beq.n	8004d0a <HAL_DMA_Abort_IT+0xea>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5c      	ldr	r2, [pc, #368]	; (8004e10 <HAL_DMA_Abort_IT+0x1f0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d030      	beq.n	8004d04 <HAL_DMA_Abort_IT+0xe4>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a5b      	ldr	r2, [pc, #364]	; (8004e14 <HAL_DMA_Abort_IT+0x1f4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d028      	beq.n	8004cfe <HAL_DMA_Abort_IT+0xde>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a52      	ldr	r2, [pc, #328]	; (8004dfc <HAL_DMA_Abort_IT+0x1dc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d020      	beq.n	8004cf8 <HAL_DMA_Abort_IT+0xd8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a57      	ldr	r2, [pc, #348]	; (8004e18 <HAL_DMA_Abort_IT+0x1f8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d019      	beq.n	8004cf4 <HAL_DMA_Abort_IT+0xd4>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a55      	ldr	r2, [pc, #340]	; (8004e1c <HAL_DMA_Abort_IT+0x1fc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d012      	beq.n	8004cf0 <HAL_DMA_Abort_IT+0xd0>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a54      	ldr	r2, [pc, #336]	; (8004e20 <HAL_DMA_Abort_IT+0x200>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00a      	beq.n	8004cea <HAL_DMA_Abort_IT+0xca>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a52      	ldr	r2, [pc, #328]	; (8004e24 <HAL_DMA_Abort_IT+0x204>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d102      	bne.n	8004ce4 <HAL_DMA_Abort_IT+0xc4>
 8004cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce2:	e01b      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ce8:	e018      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cee:	e015      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	e013      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e011      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cfc:	e00e      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004cfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004d02:	e00b      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004d04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d08:	e008      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d0e:	e005      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d14:	e002      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004d16:	2310      	movs	r3, #16
 8004d18:	e000      	b.n	8004d1c <HAL_DMA_Abort_IT+0xfc>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4a42      	ldr	r2, [pc, #264]	; (8004e28 <HAL_DMA_Abort_IT+0x208>)
 8004d1e:	6053      	str	r3, [r2, #4]
 8004d20:	e057      	b.n	8004dd2 <HAL_DMA_Abort_IT+0x1b2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a36      	ldr	r2, [pc, #216]	; (8004e00 <HAL_DMA_Abort_IT+0x1e0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d04f      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x1ac>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a34      	ldr	r2, [pc, #208]	; (8004e04 <HAL_DMA_Abort_IT+0x1e4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d048      	beq.n	8004dc8 <HAL_DMA_Abort_IT+0x1a8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a33      	ldr	r2, [pc, #204]	; (8004e08 <HAL_DMA_Abort_IT+0x1e8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d040      	beq.n	8004dc2 <HAL_DMA_Abort_IT+0x1a2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <HAL_DMA_Abort_IT+0x1ec>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d038      	beq.n	8004dbc <HAL_DMA_Abort_IT+0x19c>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <HAL_DMA_Abort_IT+0x1f0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d030      	beq.n	8004db6 <HAL_DMA_Abort_IT+0x196>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2e      	ldr	r2, [pc, #184]	; (8004e14 <HAL_DMA_Abort_IT+0x1f4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d028      	beq.n	8004db0 <HAL_DMA_Abort_IT+0x190>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <HAL_DMA_Abort_IT+0x1dc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d020      	beq.n	8004daa <HAL_DMA_Abort_IT+0x18a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a2a      	ldr	r2, [pc, #168]	; (8004e18 <HAL_DMA_Abort_IT+0x1f8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d019      	beq.n	8004da6 <HAL_DMA_Abort_IT+0x186>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <HAL_DMA_Abort_IT+0x1fc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d012      	beq.n	8004da2 <HAL_DMA_Abort_IT+0x182>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <HAL_DMA_Abort_IT+0x200>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00a      	beq.n	8004d9c <HAL_DMA_Abort_IT+0x17c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <HAL_DMA_Abort_IT+0x204>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d102      	bne.n	8004d96 <HAL_DMA_Abort_IT+0x176>
 8004d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d94:	e01b      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004d96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d9a:	e018      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004da0:	e015      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004da2:	2310      	movs	r3, #16
 8004da4:	e013      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e011      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dae:	e00e      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004db0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004db4:	e00b      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004dba:	e008      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc0:	e005      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dc6:	e002      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	e000      	b.n	8004dce <HAL_DMA_Abort_IT+0x1ae>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	4a17      	ldr	r2, [pc, #92]	; (8004e2c <HAL_DMA_Abort_IT+0x20c>)
 8004dd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
    } 
  }
  return status;
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40020080 	.word	0x40020080
 8004e00:	40020008 	.word	0x40020008
 8004e04:	4002001c 	.word	0x4002001c
 8004e08:	40020030 	.word	0x40020030
 8004e0c:	40020044 	.word	0x40020044
 8004e10:	40020058 	.word	0x40020058
 8004e14:	4002006c 	.word	0x4002006c
 8004e18:	40020408 	.word	0x40020408
 8004e1c:	4002041c 	.word	0x4002041c
 8004e20:	40020430 	.word	0x40020430
 8004e24:	40020444 	.word	0x40020444
 8004e28:	40020400 	.word	0x40020400
 8004e2c:	40020000 	.word	0x40020000

08004e30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80f1 	beq.w	800503c <HAL_DMA_IRQHandler+0x20c>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80eb 	beq.w	800503c <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d107      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0204 	bic.w	r2, r2, #4
 8004e82:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4b5f      	ldr	r3, [pc, #380]	; (8005008 <HAL_DMA_IRQHandler+0x1d8>)
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d958      	bls.n	8004f42 <HAL_DMA_IRQHandler+0x112>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a5d      	ldr	r2, [pc, #372]	; (800500c <HAL_DMA_IRQHandler+0x1dc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d04f      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x10a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a5c      	ldr	r2, [pc, #368]	; (8005010 <HAL_DMA_IRQHandler+0x1e0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d048      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x106>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a5a      	ldr	r2, [pc, #360]	; (8005014 <HAL_DMA_IRQHandler+0x1e4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d040      	beq.n	8004f30 <HAL_DMA_IRQHandler+0x100>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a59      	ldr	r2, [pc, #356]	; (8005018 <HAL_DMA_IRQHandler+0x1e8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d038      	beq.n	8004f2a <HAL_DMA_IRQHandler+0xfa>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a57      	ldr	r2, [pc, #348]	; (800501c <HAL_DMA_IRQHandler+0x1ec>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d030      	beq.n	8004f24 <HAL_DMA_IRQHandler+0xf4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a56      	ldr	r2, [pc, #344]	; (8005020 <HAL_DMA_IRQHandler+0x1f0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d028      	beq.n	8004f1e <HAL_DMA_IRQHandler+0xee>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a4d      	ldr	r2, [pc, #308]	; (8005008 <HAL_DMA_IRQHandler+0x1d8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d020      	beq.n	8004f18 <HAL_DMA_IRQHandler+0xe8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a52      	ldr	r2, [pc, #328]	; (8005024 <HAL_DMA_IRQHandler+0x1f4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d019      	beq.n	8004f14 <HAL_DMA_IRQHandler+0xe4>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a50      	ldr	r2, [pc, #320]	; (8005028 <HAL_DMA_IRQHandler+0x1f8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d012      	beq.n	8004f10 <HAL_DMA_IRQHandler+0xe0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a4f      	ldr	r2, [pc, #316]	; (800502c <HAL_DMA_IRQHandler+0x1fc>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00a      	beq.n	8004f0a <HAL_DMA_IRQHandler+0xda>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a4d      	ldr	r2, [pc, #308]	; (8005030 <HAL_DMA_IRQHandler+0x200>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d102      	bne.n	8004f04 <HAL_DMA_IRQHandler+0xd4>
 8004efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f02:	e01b      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f08:	e018      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0e:	e015      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f10:	2340      	movs	r3, #64	; 0x40
 8004f12:	e013      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f14:	2304      	movs	r3, #4
 8004f16:	e011      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004f1c:	e00e      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f22:	e00b      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f28:	e008      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f2e:	e005      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f34:	e002      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f36:	2340      	movs	r3, #64	; 0x40
 8004f38:	e000      	b.n	8004f3c <HAL_DMA_IRQHandler+0x10c>
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	4a3d      	ldr	r2, [pc, #244]	; (8005034 <HAL_DMA_IRQHandler+0x204>)
 8004f3e:	6053      	str	r3, [r2, #4]
 8004f40:	e057      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x1c2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a31      	ldr	r2, [pc, #196]	; (800500c <HAL_DMA_IRQHandler+0x1dc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d04f      	beq.n	8004fec <HAL_DMA_IRQHandler+0x1bc>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <HAL_DMA_IRQHandler+0x1e0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d048      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x1b8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <HAL_DMA_IRQHandler+0x1e4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d040      	beq.n	8004fe2 <HAL_DMA_IRQHandler+0x1b2>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a2c      	ldr	r2, [pc, #176]	; (8005018 <HAL_DMA_IRQHandler+0x1e8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d038      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x1ac>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a2b      	ldr	r2, [pc, #172]	; (800501c <HAL_DMA_IRQHandler+0x1ec>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d030      	beq.n	8004fd6 <HAL_DMA_IRQHandler+0x1a6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a29      	ldr	r2, [pc, #164]	; (8005020 <HAL_DMA_IRQHandler+0x1f0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d028      	beq.n	8004fd0 <HAL_DMA_IRQHandler+0x1a0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a21      	ldr	r2, [pc, #132]	; (8005008 <HAL_DMA_IRQHandler+0x1d8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d020      	beq.n	8004fca <HAL_DMA_IRQHandler+0x19a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a25      	ldr	r2, [pc, #148]	; (8005024 <HAL_DMA_IRQHandler+0x1f4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d019      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x196>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a24      	ldr	r2, [pc, #144]	; (8005028 <HAL_DMA_IRQHandler+0x1f8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d012      	beq.n	8004fc2 <HAL_DMA_IRQHandler+0x192>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a22      	ldr	r2, [pc, #136]	; (800502c <HAL_DMA_IRQHandler+0x1fc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00a      	beq.n	8004fbc <HAL_DMA_IRQHandler+0x18c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a21      	ldr	r2, [pc, #132]	; (8005030 <HAL_DMA_IRQHandler+0x200>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d102      	bne.n	8004fb6 <HAL_DMA_IRQHandler+0x186>
 8004fb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fb4:	e01b      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fb6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fba:	e018      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc0:	e015      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fc2:	2340      	movs	r3, #64	; 0x40
 8004fc4:	e013      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	e011      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004fce:	e00e      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fd4:	e00b      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fda:	e008      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fdc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fe0:	e005      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe6:	e002      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fe8:	2340      	movs	r3, #64	; 0x40
 8004fea:	e000      	b.n	8004fee <HAL_DMA_IRQHandler+0x1be>
 8004fec:	2304      	movs	r3, #4
 8004fee:	4a12      	ldr	r2, [pc, #72]	; (8005038 <HAL_DMA_IRQHandler+0x208>)
 8004ff0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8136 	beq.w	8005268 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005004:	e130      	b.n	8005268 <HAL_DMA_IRQHandler+0x438>
 8005006:	bf00      	nop
 8005008:	40020080 	.word	0x40020080
 800500c:	40020008 	.word	0x40020008
 8005010:	4002001c 	.word	0x4002001c
 8005014:	40020030 	.word	0x40020030
 8005018:	40020044 	.word	0x40020044
 800501c:	40020058 	.word	0x40020058
 8005020:	4002006c 	.word	0x4002006c
 8005024:	40020408 	.word	0x40020408
 8005028:	4002041c 	.word	0x4002041c
 800502c:	40020430 	.word	0x40020430
 8005030:	40020444 	.word	0x40020444
 8005034:	40020400 	.word	0x40020400
 8005038:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	2202      	movs	r2, #2
 8005042:	409a      	lsls	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80dd 	beq.w	8005208 <HAL_DMA_IRQHandler+0x3d8>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80d7 	beq.w	8005208 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 020a 	bic.w	r2, r2, #10
 8005076:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	4b7b      	ldr	r3, [pc, #492]	; (8005274 <HAL_DMA_IRQHandler+0x444>)
 8005088:	429a      	cmp	r2, r3
 800508a:	d958      	bls.n	800513e <HAL_DMA_IRQHandler+0x30e>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a79      	ldr	r2, [pc, #484]	; (8005278 <HAL_DMA_IRQHandler+0x448>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d04f      	beq.n	8005136 <HAL_DMA_IRQHandler+0x306>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a78      	ldr	r2, [pc, #480]	; (800527c <HAL_DMA_IRQHandler+0x44c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d048      	beq.n	8005132 <HAL_DMA_IRQHandler+0x302>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a76      	ldr	r2, [pc, #472]	; (8005280 <HAL_DMA_IRQHandler+0x450>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d040      	beq.n	800512c <HAL_DMA_IRQHandler+0x2fc>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a75      	ldr	r2, [pc, #468]	; (8005284 <HAL_DMA_IRQHandler+0x454>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d038      	beq.n	8005126 <HAL_DMA_IRQHandler+0x2f6>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a73      	ldr	r2, [pc, #460]	; (8005288 <HAL_DMA_IRQHandler+0x458>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d030      	beq.n	8005120 <HAL_DMA_IRQHandler+0x2f0>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a72      	ldr	r2, [pc, #456]	; (800528c <HAL_DMA_IRQHandler+0x45c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d028      	beq.n	800511a <HAL_DMA_IRQHandler+0x2ea>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a69      	ldr	r2, [pc, #420]	; (8005274 <HAL_DMA_IRQHandler+0x444>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d020      	beq.n	8005114 <HAL_DMA_IRQHandler+0x2e4>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6e      	ldr	r2, [pc, #440]	; (8005290 <HAL_DMA_IRQHandler+0x460>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d019      	beq.n	8005110 <HAL_DMA_IRQHandler+0x2e0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a6c      	ldr	r2, [pc, #432]	; (8005294 <HAL_DMA_IRQHandler+0x464>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d012      	beq.n	800510c <HAL_DMA_IRQHandler+0x2dc>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6b      	ldr	r2, [pc, #428]	; (8005298 <HAL_DMA_IRQHandler+0x468>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00a      	beq.n	8005106 <HAL_DMA_IRQHandler+0x2d6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a69      	ldr	r2, [pc, #420]	; (800529c <HAL_DMA_IRQHandler+0x46c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d102      	bne.n	8005100 <HAL_DMA_IRQHandler+0x2d0>
 80050fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050fe:	e01b      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005100:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005104:	e018      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800510a:	e015      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 800510c:	2320      	movs	r3, #32
 800510e:	e013      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005110:	2302      	movs	r3, #2
 8005112:	e011      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005118:	e00e      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 800511a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800511e:	e00b      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005124:	e008      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005126:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800512a:	e005      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 800512c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005130:	e002      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005132:	2320      	movs	r3, #32
 8005134:	e000      	b.n	8005138 <HAL_DMA_IRQHandler+0x308>
 8005136:	2302      	movs	r3, #2
 8005138:	4a59      	ldr	r2, [pc, #356]	; (80052a0 <HAL_DMA_IRQHandler+0x470>)
 800513a:	6053      	str	r3, [r2, #4]
 800513c:	e057      	b.n	80051ee <HAL_DMA_IRQHandler+0x3be>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4d      	ldr	r2, [pc, #308]	; (8005278 <HAL_DMA_IRQHandler+0x448>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d04f      	beq.n	80051e8 <HAL_DMA_IRQHandler+0x3b8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a4b      	ldr	r2, [pc, #300]	; (800527c <HAL_DMA_IRQHandler+0x44c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d048      	beq.n	80051e4 <HAL_DMA_IRQHandler+0x3b4>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a4a      	ldr	r2, [pc, #296]	; (8005280 <HAL_DMA_IRQHandler+0x450>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d040      	beq.n	80051de <HAL_DMA_IRQHandler+0x3ae>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a48      	ldr	r2, [pc, #288]	; (8005284 <HAL_DMA_IRQHandler+0x454>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d038      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x3a8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a47      	ldr	r2, [pc, #284]	; (8005288 <HAL_DMA_IRQHandler+0x458>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d030      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x3a2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a45      	ldr	r2, [pc, #276]	; (800528c <HAL_DMA_IRQHandler+0x45c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d028      	beq.n	80051cc <HAL_DMA_IRQHandler+0x39c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3d      	ldr	r2, [pc, #244]	; (8005274 <HAL_DMA_IRQHandler+0x444>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d020      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x396>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a41      	ldr	r2, [pc, #260]	; (8005290 <HAL_DMA_IRQHandler+0x460>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d019      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x392>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a40      	ldr	r2, [pc, #256]	; (8005294 <HAL_DMA_IRQHandler+0x464>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d012      	beq.n	80051be <HAL_DMA_IRQHandler+0x38e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a3e      	ldr	r2, [pc, #248]	; (8005298 <HAL_DMA_IRQHandler+0x468>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00a      	beq.n	80051b8 <HAL_DMA_IRQHandler+0x388>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a3d      	ldr	r2, [pc, #244]	; (800529c <HAL_DMA_IRQHandler+0x46c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d102      	bne.n	80051b2 <HAL_DMA_IRQHandler+0x382>
 80051ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051b0:	e01b      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b6:	e018      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051bc:	e015      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051be:	2320      	movs	r3, #32
 80051c0:	e013      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e011      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051ca:	e00e      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051d0:	e00b      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051d6:	e008      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051dc:	e005      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051e2:	e002      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051e4:	2320      	movs	r3, #32
 80051e6:	e000      	b.n	80051ea <HAL_DMA_IRQHandler+0x3ba>
 80051e8:	2302      	movs	r3, #2
 80051ea:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <HAL_DMA_IRQHandler+0x474>)
 80051ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d034      	beq.n	8005268 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005206:	e02f      	b.n	8005268 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	2208      	movs	r2, #8
 800520e:	409a      	lsls	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d028      	beq.n	800526a <HAL_DMA_IRQHandler+0x43a>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d023      	beq.n	800526a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 020e 	bic.w	r2, r2, #14
 8005230:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523a:	2101      	movs	r1, #1
 800523c:	fa01 f202 	lsl.w	r2, r1, r2
 8005240:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
    }
  }
  return;
 8005268:	bf00      	nop
 800526a:	bf00      	nop
}
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40020080 	.word	0x40020080
 8005278:	40020008 	.word	0x40020008
 800527c:	4002001c 	.word	0x4002001c
 8005280:	40020030 	.word	0x40020030
 8005284:	40020044 	.word	0x40020044
 8005288:	40020058 	.word	0x40020058
 800528c:	4002006c 	.word	0x4002006c
 8005290:	40020408 	.word	0x40020408
 8005294:	4002041c 	.word	0x4002041c
 8005298:	40020430 	.word	0x40020430
 800529c:	40020444 	.word	0x40020444
 80052a0:	40020400 	.word	0x40020400
 80052a4:	40020000 	.word	0x40020000

080052a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	2101      	movs	r1, #1
 80052c0:	fa01 f202 	lsl.w	r2, r1, r2
 80052c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b10      	cmp	r3, #16
 80052d4:	d108      	bne.n	80052e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052e6:	e007      	b.n	80052f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr
	...

08005304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005304:	b480      	push	{r7}
 8005306:	b08b      	sub	sp, #44	; 0x2c
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005312:	2300      	movs	r3, #0
 8005314:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005316:	e179      	b.n	800560c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005318:	2201      	movs	r2, #1
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	4013      	ands	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	429a      	cmp	r2, r3
 8005332:	f040 8168 	bne.w	8005606 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4a96      	ldr	r2, [pc, #600]	; (8005594 <HAL_GPIO_Init+0x290>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d05e      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005340:	4a94      	ldr	r2, [pc, #592]	; (8005594 <HAL_GPIO_Init+0x290>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d875      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 8005346:	4a94      	ldr	r2, [pc, #592]	; (8005598 <HAL_GPIO_Init+0x294>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d058      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 800534c:	4a92      	ldr	r2, [pc, #584]	; (8005598 <HAL_GPIO_Init+0x294>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d86f      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 8005352:	4a92      	ldr	r2, [pc, #584]	; (800559c <HAL_GPIO_Init+0x298>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d052      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005358:	4a90      	ldr	r2, [pc, #576]	; (800559c <HAL_GPIO_Init+0x298>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d869      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 800535e:	4a90      	ldr	r2, [pc, #576]	; (80055a0 <HAL_GPIO_Init+0x29c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d04c      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005364:	4a8e      	ldr	r2, [pc, #568]	; (80055a0 <HAL_GPIO_Init+0x29c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d863      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 800536a:	4a8e      	ldr	r2, [pc, #568]	; (80055a4 <HAL_GPIO_Init+0x2a0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d046      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005370:	4a8c      	ldr	r2, [pc, #560]	; (80055a4 <HAL_GPIO_Init+0x2a0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d85d      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 8005376:	2b12      	cmp	r3, #18
 8005378:	d82a      	bhi.n	80053d0 <HAL_GPIO_Init+0xcc>
 800537a:	2b12      	cmp	r3, #18
 800537c:	d859      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 800537e:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <HAL_GPIO_Init+0x80>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053ff 	.word	0x080053ff
 8005388:	080053d9 	.word	0x080053d9
 800538c:	080053eb 	.word	0x080053eb
 8005390:	0800542d 	.word	0x0800542d
 8005394:	08005433 	.word	0x08005433
 8005398:	08005433 	.word	0x08005433
 800539c:	08005433 	.word	0x08005433
 80053a0:	08005433 	.word	0x08005433
 80053a4:	08005433 	.word	0x08005433
 80053a8:	08005433 	.word	0x08005433
 80053ac:	08005433 	.word	0x08005433
 80053b0:	08005433 	.word	0x08005433
 80053b4:	08005433 	.word	0x08005433
 80053b8:	08005433 	.word	0x08005433
 80053bc:	08005433 	.word	0x08005433
 80053c0:	08005433 	.word	0x08005433
 80053c4:	08005433 	.word	0x08005433
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	4a75      	ldr	r2, [pc, #468]	; (80055a8 <HAL_GPIO_Init+0x2a4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053d6:	e02c      	b.n	8005432 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	623b      	str	r3, [r7, #32]
          break;
 80053de:	e029      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	3304      	adds	r3, #4
 80053e6:	623b      	str	r3, [r7, #32]
          break;
 80053e8:	e024      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	3308      	adds	r3, #8
 80053f0:	623b      	str	r3, [r7, #32]
          break;
 80053f2:	e01f      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	330c      	adds	r3, #12
 80053fa:	623b      	str	r3, [r7, #32]
          break;
 80053fc:	e01a      	b.n	8005434 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005406:	2304      	movs	r3, #4
 8005408:	623b      	str	r3, [r7, #32]
          break;
 800540a:	e013      	b.n	8005434 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005414:	2308      	movs	r3, #8
 8005416:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	611a      	str	r2, [r3, #16]
          break;
 800541e:	e009      	b.n	8005434 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005420:	2308      	movs	r3, #8
 8005422:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	615a      	str	r2, [r3, #20]
          break;
 800542a:	e003      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800542c:	2300      	movs	r3, #0
 800542e:	623b      	str	r3, [r7, #32]
          break;
 8005430:	e000      	b.n	8005434 <HAL_GPIO_Init+0x130>
          break;
 8005432:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2bff      	cmp	r3, #255	; 0xff
 8005438:	d801      	bhi.n	800543e <HAL_GPIO_Init+0x13a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	e001      	b.n	8005442 <HAL_GPIO_Init+0x13e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2bff      	cmp	r3, #255	; 0xff
 8005448:	d802      	bhi.n	8005450 <HAL_GPIO_Init+0x14c>
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	e002      	b.n	8005456 <HAL_GPIO_Init+0x152>
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	3b08      	subs	r3, #8
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	210f      	movs	r1, #15
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	401a      	ands	r2, r3
 8005468:	6a39      	ldr	r1, [r7, #32]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	431a      	orrs	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80c1 	beq.w	8005606 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005484:	4b49      	ldr	r3, [pc, #292]	; (80055ac <HAL_GPIO_Init+0x2a8>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	4a48      	ldr	r2, [pc, #288]	; (80055ac <HAL_GPIO_Init+0x2a8>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6193      	str	r3, [r2, #24]
 8005490:	4b46      	ldr	r3, [pc, #280]	; (80055ac <HAL_GPIO_Init+0x2a8>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800549c:	4a44      	ldr	r2, [pc, #272]	; (80055b0 <HAL_GPIO_Init+0x2ac>)
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	3302      	adds	r3, #2
 80054a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	220f      	movs	r2, #15
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a3c      	ldr	r2, [pc, #240]	; (80055b4 <HAL_GPIO_Init+0x2b0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d01f      	beq.n	8005508 <HAL_GPIO_Init+0x204>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3b      	ldr	r2, [pc, #236]	; (80055b8 <HAL_GPIO_Init+0x2b4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d019      	beq.n	8005504 <HAL_GPIO_Init+0x200>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3a      	ldr	r2, [pc, #232]	; (80055bc <HAL_GPIO_Init+0x2b8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_GPIO_Init+0x1fc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a39      	ldr	r2, [pc, #228]	; (80055c0 <HAL_GPIO_Init+0x2bc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00d      	beq.n	80054fc <HAL_GPIO_Init+0x1f8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a38      	ldr	r2, [pc, #224]	; (80055c4 <HAL_GPIO_Init+0x2c0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <HAL_GPIO_Init+0x1f4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <HAL_GPIO_Init+0x2c4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_GPIO_Init+0x1f0>
 80054f0:	2305      	movs	r3, #5
 80054f2:	e00a      	b.n	800550a <HAL_GPIO_Init+0x206>
 80054f4:	2306      	movs	r3, #6
 80054f6:	e008      	b.n	800550a <HAL_GPIO_Init+0x206>
 80054f8:	2304      	movs	r3, #4
 80054fa:	e006      	b.n	800550a <HAL_GPIO_Init+0x206>
 80054fc:	2303      	movs	r3, #3
 80054fe:	e004      	b.n	800550a <HAL_GPIO_Init+0x206>
 8005500:	2302      	movs	r3, #2
 8005502:	e002      	b.n	800550a <HAL_GPIO_Init+0x206>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_GPIO_Init+0x206>
 8005508:	2300      	movs	r3, #0
 800550a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550c:	f002 0203 	and.w	r2, r2, #3
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	4093      	lsls	r3, r2
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800551a:	4925      	ldr	r1, [pc, #148]	; (80055b0 <HAL_GPIO_Init+0x2ac>)
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	3302      	adds	r3, #2
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005534:	4b25      	ldr	r3, [pc, #148]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	4924      	ldr	r1, [pc, #144]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	608b      	str	r3, [r1, #8]
 8005540:	e006      	b.n	8005550 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005542:	4b22      	ldr	r3, [pc, #136]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	43db      	mvns	r3, r3
 800554a:	4920      	ldr	r1, [pc, #128]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 800554c:	4013      	ands	r3, r2
 800554e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800555c:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	491a      	ldr	r1, [pc, #104]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4313      	orrs	r3, r2
 8005566:	60cb      	str	r3, [r1, #12]
 8005568:	e006      	b.n	8005578 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800556a:	4b18      	ldr	r3, [pc, #96]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	43db      	mvns	r3, r3
 8005572:	4916      	ldr	r1, [pc, #88]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 8005574:	4013      	ands	r3, r2
 8005576:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d025      	beq.n	80055d0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005584:	4b11      	ldr	r3, [pc, #68]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4910      	ldr	r1, [pc, #64]	; (80055cc <HAL_GPIO_Init+0x2c8>)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	4313      	orrs	r3, r2
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	e025      	b.n	80055de <HAL_GPIO_Init+0x2da>
 8005592:	bf00      	nop
 8005594:	10320000 	.word	0x10320000
 8005598:	10310000 	.word	0x10310000
 800559c:	10220000 	.word	0x10220000
 80055a0:	10210000 	.word	0x10210000
 80055a4:	10120000 	.word	0x10120000
 80055a8:	10110000 	.word	0x10110000
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010800 	.word	0x40010800
 80055b8:	40010c00 	.word	0x40010c00
 80055bc:	40011000 	.word	0x40011000
 80055c0:	40011400 	.word	0x40011400
 80055c4:	40011800 	.word	0x40011800
 80055c8:	40011c00 	.word	0x40011c00
 80055cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80055d0:	4b15      	ldr	r3, [pc, #84]	; (8005628 <HAL_GPIO_Init+0x324>)
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	4913      	ldr	r1, [pc, #76]	; (8005628 <HAL_GPIO_Init+0x324>)
 80055da:	4013      	ands	r3, r2
 80055dc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80055ea:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <HAL_GPIO_Init+0x324>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	490e      	ldr	r1, [pc, #56]	; (8005628 <HAL_GPIO_Init+0x324>)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]
 80055f6:	e006      	b.n	8005606 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_GPIO_Init+0x324>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	43db      	mvns	r3, r3
 8005600:	4909      	ldr	r1, [pc, #36]	; (8005628 <HAL_GPIO_Init+0x324>)
 8005602:	4013      	ands	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	3301      	adds	r3, #1
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	fa22 f303 	lsr.w	r3, r2, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f ae7e 	bne.w	8005318 <HAL_GPIO_Init+0x14>
  }
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	372c      	adds	r7, #44	; 0x2c
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	40010400 	.word	0x40010400

0800562c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	887b      	ldrh	r3, [r7, #2]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
 8005648:	e001      	b.n	800564e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	bc80      	pop	{r7}
 8005658:	4770      	bx	lr

0800565a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	460b      	mov	r3, r1
 8005664:	807b      	strh	r3, [r7, #2]
 8005666:	4613      	mov	r3, r2
 8005668:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800566a:	787b      	ldrb	r3, [r7, #1]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005670:	887a      	ldrh	r2, [r7, #2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005676:	e003      	b.n	8005680 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005678:	887b      	ldrh	r3, [r7, #2]
 800567a:	041a      	lsls	r2, r3, #16
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	611a      	str	r2, [r3, #16]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
	...

0800568c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	4013      	ands	r3, r2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d006      	beq.n	80056b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056a2:	4a05      	ldr	r2, [pc, #20]	; (80056b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056a4:	88fb      	ldrh	r3, [r7, #6]
 80056a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056a8:	88fb      	ldrh	r3, [r7, #6]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fd f8a4 	bl	80027f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40010400 	.word	0x40010400

080056bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e12b      	b.n	8005926 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fd ff68 	bl	80035b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	; 0x24
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800570e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800571e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005720:	f003 fa4e 	bl	8008bc0 <HAL_RCC_GetPCLK1Freq>
 8005724:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4a81      	ldr	r2, [pc, #516]	; (8005930 <HAL_I2C_Init+0x274>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d807      	bhi.n	8005740 <HAL_I2C_Init+0x84>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a80      	ldr	r2, [pc, #512]	; (8005934 <HAL_I2C_Init+0x278>)
 8005734:	4293      	cmp	r3, r2
 8005736:	bf94      	ite	ls
 8005738:	2301      	movls	r3, #1
 800573a:	2300      	movhi	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e006      	b.n	800574e <HAL_I2C_Init+0x92>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a7d      	ldr	r2, [pc, #500]	; (8005938 <HAL_I2C_Init+0x27c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	bf94      	ite	ls
 8005748:	2301      	movls	r3, #1
 800574a:	2300      	movhi	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e0e7      	b.n	8005926 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4a78      	ldr	r2, [pc, #480]	; (800593c <HAL_I2C_Init+0x280>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	0c9b      	lsrs	r3, r3, #18
 8005760:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	4a6a      	ldr	r2, [pc, #424]	; (8005930 <HAL_I2C_Init+0x274>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d802      	bhi.n	8005790 <HAL_I2C_Init+0xd4>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3301      	adds	r3, #1
 800578e:	e009      	b.n	80057a4 <HAL_I2C_Init+0xe8>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005796:	fb02 f303 	mul.w	r3, r2, r3
 800579a:	4a69      	ldr	r2, [pc, #420]	; (8005940 <HAL_I2C_Init+0x284>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	099b      	lsrs	r3, r3, #6
 80057a2:	3301      	adds	r3, #1
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	430b      	orrs	r3, r1
 80057aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	495c      	ldr	r1, [pc, #368]	; (8005930 <HAL_I2C_Init+0x274>)
 80057c0:	428b      	cmp	r3, r1
 80057c2:	d819      	bhi.n	80057f8 <HAL_I2C_Init+0x13c>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	1e59      	subs	r1, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057d8:	400b      	ands	r3, r1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_I2C_Init+0x138>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1e59      	subs	r1, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ec:	3301      	adds	r3, #1
 80057ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f2:	e051      	b.n	8005898 <HAL_I2C_Init+0x1dc>
 80057f4:	2304      	movs	r3, #4
 80057f6:	e04f      	b.n	8005898 <HAL_I2C_Init+0x1dc>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d111      	bne.n	8005824 <HAL_I2C_Init+0x168>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1e58      	subs	r0, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6859      	ldr	r1, [r3, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	440b      	add	r3, r1
 800580e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005812:	3301      	adds	r3, #1
 8005814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e012      	b.n	800584a <HAL_I2C_Init+0x18e>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	1e58      	subs	r0, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6859      	ldr	r1, [r3, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	0099      	lsls	r1, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	fbb0 f3f3 	udiv	r3, r0, r3
 800583a:	3301      	adds	r3, #1
 800583c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_I2C_Init+0x196>
 800584e:	2301      	movs	r3, #1
 8005850:	e022      	b.n	8005898 <HAL_I2C_Init+0x1dc>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10e      	bne.n	8005878 <HAL_I2C_Init+0x1bc>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	1e58      	subs	r0, r3, #1
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	440b      	add	r3, r1
 8005868:	fbb0 f3f3 	udiv	r3, r0, r3
 800586c:	3301      	adds	r3, #1
 800586e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005876:	e00f      	b.n	8005898 <HAL_I2C_Init+0x1dc>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	1e58      	subs	r0, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6859      	ldr	r1, [r3, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	0099      	lsls	r1, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	fbb0 f3f3 	udiv	r3, r0, r3
 800588e:	3301      	adds	r3, #1
 8005890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005894:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	6809      	ldr	r1, [r1, #0]
 800589c:	4313      	orrs	r3, r2
 800589e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69da      	ldr	r2, [r3, #28]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6911      	ldr	r1, [r2, #16]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68d2      	ldr	r2, [r2, #12]
 80058d2:	4311      	orrs	r1, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	430b      	orrs	r3, r1
 80058da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	000186a0 	.word	0x000186a0
 8005934:	001e847f 	.word	0x001e847f
 8005938:	003d08ff 	.word	0x003d08ff
 800593c:	431bde83 	.word	0x431bde83
 8005940:	10624dd3 	.word	0x10624dd3

08005944 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	461a      	mov	r2, r3
 8005950:	460b      	mov	r3, r1
 8005952:	817b      	strh	r3, [r7, #10]
 8005954:	4613      	mov	r3, r2
 8005956:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005958:	f7fe f988 	bl	8003c6c <HAL_GetTick>
 800595c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b20      	cmp	r3, #32
 8005968:	f040 80e0 	bne.w	8005b2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	2319      	movs	r3, #25
 8005972:	2201      	movs	r2, #1
 8005974:	4970      	ldr	r1, [pc, #448]	; (8005b38 <HAL_I2C_Master_Transmit+0x1f4>)
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fdcc 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005982:	2302      	movs	r3, #2
 8005984:	e0d3      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_I2C_Master_Transmit+0x50>
 8005990:	2302      	movs	r3, #2
 8005992:	e0cc      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x1ea>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d007      	beq.n	80059ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2221      	movs	r2, #33	; 0x21
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2210      	movs	r2, #16
 80059d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	893a      	ldrh	r2, [r7, #8]
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4a50      	ldr	r2, [pc, #320]	; (8005b3c <HAL_I2C_Master_Transmit+0x1f8>)
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059fc:	8979      	ldrh	r1, [r7, #10]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	6a3a      	ldr	r2, [r7, #32]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fc36 	bl	8006274 <I2C_MasterRequestWrite>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e08d      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	613b      	str	r3, [r7, #16]
 8005a26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a28:	e066      	b.n	8005af8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	6a39      	ldr	r1, [r7, #32]
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fe8a 	bl	8006748 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00d      	beq.n	8005a56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d107      	bne.n	8005a52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e06b      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7e:	3b01      	subs	r3, #1
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d11b      	bne.n	8005acc <HAL_I2C_Master_Transmit+0x188>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d017      	beq.n	8005acc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	6a39      	ldr	r1, [r7, #32]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 fe81 	bl	80067d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00d      	beq.n	8005af8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d107      	bne.n	8005af4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e01a      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d194      	bne.n	8005a2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b2c:	2302      	movs	r3, #2
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	00100002 	.word	0x00100002
 8005b3c:	ffff0000 	.word	0xffff0000

08005b40 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	607a      	str	r2, [r7, #4]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	817b      	strh	r3, [r7, #10]
 8005b50:	4613      	mov	r3, r2
 8005b52:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b58:	f7fe f888 	bl	8003c6c <HAL_GetTick>
 8005b5c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b20      	cmp	r3, #32
 8005b68:	f040 824b 	bne.w	8006002 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	2319      	movs	r3, #25
 8005b72:	2201      	movs	r2, #1
 8005b74:	497f      	ldr	r1, [pc, #508]	; (8005d74 <HAL_I2C_Master_Receive+0x234>)
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fccc 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
 8005b84:	e23e      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_I2C_Master_Receive+0x54>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e237      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d007      	beq.n	8005bba <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f042 0201 	orr.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2222      	movs	r2, #34	; 0x22
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	893a      	ldrh	r2, [r7, #8]
 8005bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4a5f      	ldr	r2, [pc, #380]	; (8005d78 <HAL_I2C_Master_Receive+0x238>)
 8005bfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bfc:	8979      	ldrh	r1, [r7, #10]
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fbb8 	bl	8006378 <I2C_MasterRequestRead>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e1f8      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d113      	bne.n	8005c42 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e1cc      	b.n	8005fdc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d11e      	bne.n	8005c88 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c5a:	b672      	cpsid	i
}
 8005c5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c84:	b662      	cpsie	i
}
 8005c86:	e035      	b.n	8005cf4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d11e      	bne.n	8005cce <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ca0:	b672      	cpsid	i
}
 8005ca2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005cca:	b662      	cpsie	i
}
 8005ccc:	e012      	b.n	8005cf4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	613b      	str	r3, [r7, #16]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005cf4:	e172      	b.n	8005fdc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	f200 811f 	bhi.w	8005f3e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d123      	bne.n	8005d50 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 fdab 	bl	8006868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e173      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d4e:	e145      	b.n	8005fdc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d152      	bne.n	8005dfe <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4906      	ldr	r1, [pc, #24]	; (8005d7c <HAL_I2C_Master_Receive+0x23c>)
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fbd6 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e148      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
 8005d72:	bf00      	nop
 8005d74:	00100002 	.word	0x00100002
 8005d78:	ffff0000 	.word	0xffff0000
 8005d7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005d80:	b672      	cpsid	i
}
 8005d82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db0:	3b01      	subs	r3, #1
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005dc6:	b662      	cpsie	i
}
 8005dc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de6:	3b01      	subs	r3, #1
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dfc:	e0ee      	b.n	8005fdc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	2200      	movs	r2, #0
 8005e06:	4981      	ldr	r1, [pc, #516]	; (800600c <HAL_I2C_Master_Receive+0x4cc>)
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fb83 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0f5      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e28:	b672      	cpsid	i
}
 8005e2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3e:	1c5a      	adds	r2, r3, #1
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e5e:	4b6c      	ldr	r3, [pc, #432]	; (8006010 <HAL_I2C_Master_Receive+0x4d0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	08db      	lsrs	r3, r3, #3
 8005e64:	4a6b      	ldr	r2, [pc, #428]	; (8006014 <HAL_I2C_Master_Receive+0x4d4>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0a1a      	lsrs	r2, r3, #8
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	00da      	lsls	r2, r3, #3
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d118      	bne.n	8005eb6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f043 0220 	orr.w	r2, r3, #32
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005ea6:	b662      	cpsie	i
}
 8005ea8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e0a6      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d1d9      	bne.n	8005e78 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691a      	ldr	r2, [r3, #16]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005f06:	b662      	cpsie	i
}
 8005f08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f3c:	e04e      	b.n	8005fdc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fc90 	bl	8006868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e058      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d124      	bne.n	8005fdc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d107      	bne.n	8005faa <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f47f ae88 	bne.w	8005cf6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006002:	2302      	movs	r3, #2
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3728      	adds	r7, #40	; 0x28
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	00010004 	.word	0x00010004
 8006010:	20000010 	.word	0x20000010
 8006014:	14f8b589 	.word	0x14f8b589

08006018 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	460b      	mov	r3, r1
 8006026:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006028:	f7fd fe20 	bl	8003c6c <HAL_GetTick>
 800602c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b20      	cmp	r3, #32
 800603c:	f040 8111 	bne.w	8006262 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2319      	movs	r3, #25
 8006046:	2201      	movs	r2, #1
 8006048:	4988      	ldr	r1, [pc, #544]	; (800626c <HAL_I2C_IsDeviceReady+0x254>)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fa62 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
 8006058:	e104      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_I2C_IsDeviceReady+0x50>
 8006064:	2302      	movs	r3, #2
 8006066:	e0fd      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b01      	cmp	r3, #1
 800607c:	d007      	beq.n	800608e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800609c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2224      	movs	r2, #36	; 0x24
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a70      	ldr	r2, [pc, #448]	; (8006270 <HAL_I2C_IsDeviceReady+0x258>)
 80060b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 fa20 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00d      	beq.n	80060f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e8:	d103      	bne.n	80060f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e0b6      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060f6:	897b      	ldrh	r3, [r7, #10]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006104:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006106:	f7fd fdb1 	bl	8003c6c <HAL_GetTick>
 800610a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800613a:	e025      	b.n	8006188 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800613c:	f7fd fd96 	bl	8003c6c <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d302      	bcc.n	8006152 <HAL_I2C_IsDeviceReady+0x13a>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22a0      	movs	r2, #160	; 0xa0
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2ba0      	cmp	r3, #160	; 0xa0
 8006192:	d005      	beq.n	80061a0 <HAL_I2C_IsDeviceReady+0x188>
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <HAL_I2C_IsDeviceReady+0x188>
 800619a:	7dbb      	ldrb	r3, [r7, #22]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0cd      	beq.n	800613c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d129      	bne.n	800620a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	2319      	movs	r3, #25
 80061e2:	2201      	movs	r2, #1
 80061e4:	4921      	ldr	r1, [pc, #132]	; (800626c <HAL_I2C_IsDeviceReady+0x254>)
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f994 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e036      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e02c      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006218:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006222:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2319      	movs	r3, #25
 800622a:	2201      	movs	r2, #1
 800622c:	490f      	ldr	r1, [pc, #60]	; (800626c <HAL_I2C_IsDeviceReady+0x254>)
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f970 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e012      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	3301      	adds	r3, #1
 8006242:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	f4ff af32 	bcc.w	80060b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	00100002 	.word	0x00100002
 8006270:	ffff0000 	.word	0xffff0000

08006274 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	607a      	str	r2, [r7, #4]
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	460b      	mov	r3, r1
 8006282:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d006      	beq.n	800629e <I2C_MasterRequestWrite+0x2a>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d003      	beq.n	800629e <I2C_MasterRequestWrite+0x2a>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800629c:	d108      	bne.n	80062b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e00b      	b.n	80062c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	2b12      	cmp	r3, #18
 80062b6:	d107      	bne.n	80062c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f91d 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00d      	beq.n	80062fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ee:	d103      	bne.n	80062f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e035      	b.n	8006368 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006304:	d108      	bne.n	8006318 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006314:	611a      	str	r2, [r3, #16]
 8006316:	e01b      	b.n	8006350 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006318:	897b      	ldrh	r3, [r7, #10]
 800631a:	11db      	asrs	r3, r3, #7
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0306 	and.w	r3, r3, #6
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f063 030f 	orn	r3, r3, #15
 8006328:	b2da      	uxtb	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	490e      	ldr	r1, [pc, #56]	; (8006370 <I2C_MasterRequestWrite+0xfc>)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f966 	bl	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e010      	b.n	8006368 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006346:	897b      	ldrh	r3, [r7, #10]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	4907      	ldr	r1, [pc, #28]	; (8006374 <I2C_MasterRequestWrite+0x100>)
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f956 	bl	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	00010008 	.word	0x00010008
 8006374:	00010002 	.word	0x00010002

08006378 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	607a      	str	r2, [r7, #4]
 8006382:	603b      	str	r3, [r7, #0]
 8006384:	460b      	mov	r3, r1
 8006386:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800639c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d006      	beq.n	80063b2 <I2C_MasterRequestRead+0x3a>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d003      	beq.n	80063b2 <I2C_MasterRequestRead+0x3a>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063b0:	d108      	bne.n	80063c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e00b      	b.n	80063dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	2b11      	cmp	r3, #17
 80063ca:	d107      	bne.n	80063dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f893 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00d      	beq.n	8006410 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d103      	bne.n	800640c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e079      	b.n	8006504 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006418:	d108      	bne.n	800642c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800641a:	897b      	ldrh	r3, [r7, #10]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f043 0301 	orr.w	r3, r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	611a      	str	r2, [r3, #16]
 800642a:	e05f      	b.n	80064ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800642c:	897b      	ldrh	r3, [r7, #10]
 800642e:	11db      	asrs	r3, r3, #7
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f003 0306 	and.w	r3, r3, #6
 8006436:	b2db      	uxtb	r3, r3
 8006438:	f063 030f 	orn	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4930      	ldr	r1, [pc, #192]	; (800650c <I2C_MasterRequestRead+0x194>)
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f8dc 	bl	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e054      	b.n	8006504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800645a:	897b      	ldrh	r3, [r7, #10]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4929      	ldr	r1, [pc, #164]	; (8006510 <I2C_MasterRequestRead+0x198>)
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f8cc 	bl	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e044      	b.n	8006504 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	613b      	str	r3, [r7, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800649e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	9300      	str	r3, [sp, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f831 	bl	8006514 <I2C_WaitOnFlagUntilTimeout>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00d      	beq.n	80064d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064c6:	d103      	bne.n	80064d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e017      	b.n	8006504 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80064d4:	897b      	ldrh	r3, [r7, #10]
 80064d6:	11db      	asrs	r3, r3, #7
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0306 	and.w	r3, r3, #6
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f063 030e 	orn	r3, r3, #14
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4907      	ldr	r1, [pc, #28]	; (8006510 <I2C_MasterRequestRead+0x198>)
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f888 	bl	8006608 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	00010008 	.word	0x00010008
 8006510:	00010002 	.word	0x00010002

08006514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	4613      	mov	r3, r2
 8006522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006524:	e048      	b.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d044      	beq.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652e:	f7fd fb9d 	bl	8003c6c <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d302      	bcc.n	8006544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d139      	bne.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	0c1b      	lsrs	r3, r3, #16
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b01      	cmp	r3, #1
 800654c:	d10d      	bne.n	800656a <I2C_WaitOnFlagUntilTimeout+0x56>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	43da      	mvns	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4013      	ands	r3, r2
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	e00c      	b.n	8006584 <I2C_WaitOnFlagUntilTimeout+0x70>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	43da      	mvns	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4013      	ands	r3, r2
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	bf0c      	ite	eq
 800657c:	2301      	moveq	r3, #1
 800657e:	2300      	movne	r3, #0
 8006580:	b2db      	uxtb	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	79fb      	ldrb	r3, [r7, #7]
 8006586:	429a      	cmp	r2, r3
 8006588:	d116      	bne.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	f043 0220 	orr.w	r2, r3, #32
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e023      	b.n	8006600 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d10d      	bne.n	80065de <I2C_WaitOnFlagUntilTimeout+0xca>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	43da      	mvns	r2, r3
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4013      	ands	r3, r2
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	461a      	mov	r2, r3
 80065dc:	e00c      	b.n	80065f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	43da      	mvns	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4013      	ands	r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d093      	beq.n	8006526 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006616:	e071      	b.n	80066fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d123      	bne.n	8006670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006636:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	f043 0204 	orr.w	r2, r3, #4
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e067      	b.n	8006740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d041      	beq.n	80066fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006678:	f7fd faf8 	bl	8003c6c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d302      	bcc.n	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d136      	bne.n	80066fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	0c1b      	lsrs	r3, r3, #16
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10c      	bne.n	80066b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	43da      	mvns	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	4013      	ands	r3, r2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf14      	ite	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	2300      	moveq	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	e00b      	b.n	80066ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	43da      	mvns	r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4013      	ands	r3, r2
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	bf14      	ite	ne
 80066c4:	2301      	movne	r3, #1
 80066c6:	2300      	moveq	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e021      	b.n	8006740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	0c1b      	lsrs	r3, r3, #16
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b01      	cmp	r3, #1
 8006704:	d10c      	bne.n	8006720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	43da      	mvns	r2, r3
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	4013      	ands	r3, r2
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	bf14      	ite	ne
 8006718:	2301      	movne	r3, #1
 800671a:	2300      	moveq	r3, #0
 800671c:	b2db      	uxtb	r3, r3
 800671e:	e00b      	b.n	8006738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	43da      	mvns	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4013      	ands	r3, r2
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf14      	ite	ne
 8006732:	2301      	movne	r3, #1
 8006734:	2300      	moveq	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	f47f af6d 	bne.w	8006618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006754:	e034      	b.n	80067c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f8e3 	bl	8006922 <I2C_IsAcknowledgeFailed>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e034      	b.n	80067d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676c:	d028      	beq.n	80067c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676e:	f7fd fa7d 	bl	8003c6c <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	429a      	cmp	r2, r3
 800677c:	d302      	bcc.n	8006784 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d11d      	bne.n	80067c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d016      	beq.n	80067c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	f043 0220 	orr.w	r2, r3, #32
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e007      	b.n	80067d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d1c3      	bne.n	8006756 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067e4:	e034      	b.n	8006850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f89b 	bl	8006922 <I2C_IsAcknowledgeFailed>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e034      	b.n	8006860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d028      	beq.n	8006850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fd fa35 	bl	8003c6c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11d      	bne.n	8006850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	2b04      	cmp	r3, #4
 8006820:	d016      	beq.n	8006850 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	f043 0220 	orr.w	r2, r3, #32
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e007      	b.n	8006860 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b04      	cmp	r3, #4
 800685c:	d1c3      	bne.n	80067e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006874:	e049      	b.n	800690a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b10      	cmp	r3, #16
 8006882:	d119      	bne.n	80068b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f06f 0210 	mvn.w	r2, #16
 800688c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2220      	movs	r2, #32
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e030      	b.n	800691a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b8:	f7fd f9d8 	bl	8003c6c <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d302      	bcc.n	80068ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d11d      	bne.n	800690a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d016      	beq.n	800690a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f043 0220 	orr.w	r2, r3, #32
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e007      	b.n	800691a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	d1ae      	bne.n	8006876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006922:	b480      	push	{r7}
 8006924:	b083      	sub	sp, #12
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006938:	d11b      	bne.n	8006972 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006942:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2220      	movs	r2, #32
 800694e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	f043 0204 	orr.w	r2, r3, #4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800697e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006980:	b08b      	sub	sp, #44	; 0x2c
 8006982:	af06      	add	r7, sp, #24
 8006984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0f1      	b.n	8006b74 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d106      	bne.n	80069aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f00c fbf5 	bl	8013194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2203      	movs	r2, #3
 80069ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f005 ff66 	bl	800c888 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	687e      	ldr	r6, [r7, #4]
 80069c4:	466d      	mov	r5, sp
 80069c6:	f106 0410 	add.w	r4, r6, #16
 80069ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	602b      	str	r3, [r5, #0]
 80069d2:	1d33      	adds	r3, r6, #4
 80069d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069d6:	6838      	ldr	r0, [r7, #0]
 80069d8:	f005 ff30 	bl	800c83c <USB_CoreInit>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e0c2      	b.n	8006b74 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2100      	movs	r1, #0
 80069f4:	4618      	mov	r0, r3
 80069f6:	f005 ff61 	bl	800c8bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]
 80069fe:	e040      	b.n	8006a82 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	440b      	add	r3, r1
 8006a10:	3301      	adds	r3, #1
 8006a12:	2201      	movs	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	1c5a      	adds	r2, r3, #1
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	440b      	add	r3, r1
 8006a26:	7bfa      	ldrb	r2, [r7, #15]
 8006a28:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	440b      	add	r3, r1
 8006a3a:	3303      	adds	r3, #3
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a40:	7bfa      	ldrb	r2, [r7, #15]
 8006a42:	6879      	ldr	r1, [r7, #4]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	3338      	adds	r3, #56	; 0x38
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a54:	7bfa      	ldrb	r2, [r7, #15]
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	440b      	add	r3, r1
 8006a62:	333c      	adds	r3, #60	; 0x3c
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a68:	7bfa      	ldrb	r2, [r7, #15]
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	440b      	add	r3, r1
 8006a76:	3340      	adds	r3, #64	; 0x40
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d3b9      	bcc.n	8006a00 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e044      	b.n	8006b1c <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a92:	7bfa      	ldrb	r2, [r7, #15]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	440b      	add	r3, r1
 8006aa0:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006aa8:	7bfa      	ldrb	r2, [r7, #15]
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	4613      	mov	r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	440b      	add	r3, r1
 8006ab6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006aba:	7bfa      	ldrb	r2, [r7, #15]
 8006abc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006abe:	7bfa      	ldrb	r2, [r7, #15]
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	440b      	add	r3, r1
 8006acc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ad4:	7bfa      	ldrb	r2, [r7, #15]
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	440b      	add	r3, r1
 8006ae2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006aea:	7bfa      	ldrb	r2, [r7, #15]
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	4613      	mov	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	440b      	add	r3, r1
 8006af8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006b00:	7bfa      	ldrb	r2, [r7, #15]
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	440b      	add	r3, r1
 8006b0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	73fb      	strb	r3, [r7, #15]
 8006b1c:	7bfa      	ldrb	r2, [r7, #15]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d3b5      	bcc.n	8006a92 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	687e      	ldr	r6, [r7, #4]
 8006b2e:	466d      	mov	r5, sp
 8006b30:	f106 0410 	add.w	r4, r6, #16
 8006b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	1d33      	adds	r3, r6, #4
 8006b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b40:	6838      	ldr	r0, [r7, #0]
 8006b42:	f005 fec7 	bl	800c8d4 <USB_DevInit>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e00d      	b.n	8006b74 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f008 f948 	bl	800ee02 <USB_DevDisconnect>

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_PCD_Start+0x16>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e016      	b.n	8006bc0 <HAL_PCD_Start+0x44>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f005 fe5c 	bl	800c85c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f00c fd43 	bl	8013632 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f008 f91c 	bl	800edee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f008 f91e 	bl	800ee16 <USB_ReadInterrupts>
 8006bda:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb04 	bl	80071f4 <PCD_EP_ISR_Handler>

    return;
 8006bec:	e119      	b.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d013      	beq.n	8006c20 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0a:	b292      	uxth	r2, r2
 8006c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f00c fb3a 	bl	801328a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006c16:	2100      	movs	r1, #0
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f905 	bl	8006e28 <HAL_PCD_SetAddress>

    return;
 8006c1e:	e100      	b.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00c      	beq.n	8006c44 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006c42:	e0ee      	b.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00c      	beq.n	8006c68 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c60:	b292      	uxth	r2, r2
 8006c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006c66:	e0dc      	b.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d027      	beq.n	8006cc2 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0204 	bic.w	r2, r2, #4
 8006c84:	b292      	uxth	r2, r2
 8006c86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0208 	bic.w	r2, r2, #8
 8006c9c:	b292      	uxth	r2, r2
 8006c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f00c fb2a 	bl	80132fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cba:	b292      	uxth	r2, r2
 8006cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006cc0:	e0af      	b.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8083 	beq.w	8006dd4 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	77fb      	strb	r3, [r7, #31]
 8006cd2:	e010      	b.n	8006cf6 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	7ffb      	ldrb	r3, [r7, #31]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	7ffb      	ldrb	r3, [r7, #31]
 8006ce2:	8812      	ldrh	r2, [r2, #0]
 8006ce4:	b292      	uxth	r2, r2
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	3320      	adds	r3, #32
 8006cea:	443b      	add	r3, r7
 8006cec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8006cf0:	7ffb      	ldrb	r3, [r7, #31]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	7ffb      	ldrb	r3, [r7, #31]
 8006cf8:	2b07      	cmp	r3, #7
 8006cfa:	d9eb      	bls.n	8006cd4 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f042 0201 	orr.w	r2, r2, #1
 8006d0e:	b292      	uxth	r2, r2
 8006d10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0201 	bic.w	r2, r2, #1
 8006d26:	b292      	uxth	r2, r2
 8006d28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006d2c:	bf00      	nop
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f6      	beq.n	8006d2e <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d52:	b292      	uxth	r2, r2
 8006d54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e00f      	b.n	8006d7e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006d5e:	7ffb      	ldrb	r3, [r7, #31]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	4611      	mov	r1, r2
 8006d66:	7ffa      	ldrb	r2, [r7, #31]
 8006d68:	0092      	lsls	r2, r2, #2
 8006d6a:	440a      	add	r2, r1
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	3320      	adds	r3, #32
 8006d70:	443b      	add	r3, r7
 8006d72:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006d76:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8006d78:	7ffb      	ldrb	r3, [r7, #31]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	77fb      	strb	r3, [r7, #31]
 8006d7e:	7ffb      	ldrb	r3, [r7, #31]
 8006d80:	2b07      	cmp	r3, #7
 8006d82:	d9ec      	bls.n	8006d5e <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0208 	orr.w	r2, r2, #8
 8006d96:	b292      	uxth	r2, r2
 8006d98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dae:	b292      	uxth	r2, r2
 8006db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0204 	orr.w	r2, r2, #4
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f00c fa7b 	bl	80132c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006dd2:	e026      	b.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00f      	beq.n	8006dfe <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006df0:	b292      	uxth	r2, r2
 8006df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f00c fa39 	bl	801326e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006dfc:	e011      	b.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00c      	beq.n	8006e22 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e1a:	b292      	uxth	r2, r2
 8006e1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006e20:	bf00      	nop
  }
}
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_PCD_SetAddress+0x1a>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e013      	b.n	8006e6a <HAL_PCD_SetAddress+0x42>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	78fa      	ldrb	r2, [r7, #3]
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f007 ffb4 	bl	800edc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	4608      	mov	r0, r1
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	461a      	mov	r2, r3
 8006e80:	4603      	mov	r3, r0
 8006e82:	70fb      	strb	r3, [r7, #3]
 8006e84:	460b      	mov	r3, r1
 8006e86:	803b      	strh	r3, [r7, #0]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	da0e      	bge.n	8006eb6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	f003 0307 	and.w	r3, r3, #7
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	4413      	add	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	705a      	strb	r2, [r3, #1]
 8006eb4:	e00e      	b.n	8006ed4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	f003 0207 	and.w	r2, r3, #7
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	4413      	add	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006ee0:	883a      	ldrh	r2, [r7, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	78ba      	ldrb	r2, [r7, #2]
 8006eea:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006eec:	78bb      	ldrb	r3, [r7, #2]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d102      	bne.n	8006ef8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_PCD_EP_Open+0x94>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e00e      	b.n	8006f24 <HAL_PCD_EP_Open+0xb2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f005 fcfd 	bl	800c914 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006f22:	7afb      	ldrb	r3, [r7, #11]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da0e      	bge.n	8006f5e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4413      	add	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	705a      	strb	r2, [r3, #1]
 8006f5c:	e00e      	b.n	8006f7c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f5e:	78fb      	ldrb	r3, [r7, #3]
 8006f60:	f003 0207 	and.w	r2, r3, #7
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d101      	bne.n	8006f96 <HAL_PCD_EP_Close+0x6a>
 8006f92:	2302      	movs	r3, #2
 8006f94:	e00e      	b.n	8006fb4 <HAL_PCD_EP_Close+0x88>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68f9      	ldr	r1, [r7, #12]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f006 f875 	bl	800d094 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006fcc:	7afb      	ldrb	r3, [r7, #11]
 8006fce:	f003 0207 	and.w	r2, r3, #7
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	00db      	lsls	r3, r3, #3
 8006fda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	b2da      	uxtb	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6979      	ldr	r1, [r7, #20]
 800700e:	4618      	mov	r0, r3
 8007010:	f006 fa2c 	bl	800d46c <USB_EPStartXfer>

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b086      	sub	sp, #24
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
 800702a:	460b      	mov	r3, r1
 800702c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2200      	movs	r2, #0
 8007062:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2201      	movs	r2, #1
 8007068:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	b2da      	uxtb	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6979      	ldr	r1, [r7, #20]
 800707c:	4618      	mov	r0, r3
 800707e:	f006 f9f5 	bl	800d46c <USB_EPStartXfer>

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	460b      	mov	r3, r1
 8007096:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	f003 0207 	and.w	r2, r3, #7
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d901      	bls.n	80070aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e04c      	b.n	8007144 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da0e      	bge.n	80070d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4413      	add	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2201      	movs	r2, #1
 80070cc:	705a      	strb	r2, [r3, #1]
 80070ce:	e00c      	b.n	80070ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070d0:	78fa      	ldrb	r2, [r7, #3]
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007102:	2b01      	cmp	r3, #1
 8007104:	d101      	bne.n	800710a <HAL_PCD_EP_SetStall+0x7e>
 8007106:	2302      	movs	r3, #2
 8007108:	e01c      	b.n	8007144 <HAL_PCD_EP_SetStall+0xb8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	4618      	mov	r0, r3
 800711a:	f007 fd58 	bl	800ebce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800711e:	78fb      	ldrb	r3, [r7, #3]
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	2b00      	cmp	r3, #0
 8007126:	d108      	bne.n	800713a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f007 fe7d 	bl	800ee34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	f003 020f 	and.w	r2, r3, #15
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	429a      	cmp	r2, r3
 8007164:	d901      	bls.n	800716a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e040      	b.n	80071ec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800716a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800716e:	2b00      	cmp	r3, #0
 8007170:	da0e      	bge.n	8007190 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	4413      	add	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	705a      	strb	r2, [r3, #1]
 800718e:	e00e      	b.n	80071ae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	f003 0207 	and.w	r2, r3, #7
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d101      	bne.n	80071ce <HAL_PCD_EP_ClrStall+0x82>
 80071ca:	2302      	movs	r3, #2
 80071cc:	e00e      	b.n	80071ec <HAL_PCD_EP_ClrStall+0xa0>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	4618      	mov	r0, r3
 80071de:	f007 fd46 	bl	800ec6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b096      	sub	sp, #88	; 0x58
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80071fc:	e3bf      	b.n	800797e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007206:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800720a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800720e:	b2db      	uxtb	r3, r3
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007218:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 8179 	bne.w	8007514 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007222:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007226:	f003 0310 	and.w	r3, r3, #16
 800722a:	2b00      	cmp	r3, #0
 800722c:	d152      	bne.n	80072d4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	81fb      	strh	r3, [r7, #14]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	89fb      	ldrh	r3, [r7, #14]
 8007246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800724a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800724e:	b29b      	uxth	r3, r3
 8007250:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3328      	adds	r3, #40	; 0x28
 8007256:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	3302      	adds	r3, #2
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6812      	ldr	r2, [r2, #0]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007282:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	441a      	add	r2, r3
 800728e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007290:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007292:	2100      	movs	r1, #0
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f00b ffd0 	bl	801323a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 836b 	beq.w	800797e <PCD_EP_ISR_Handler+0x78a>
 80072a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 8366 	bne.w	800797e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	b292      	uxth	r2, r2
 80072c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80072d2:	e354      	b.n	800797e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80072da:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80072e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80072ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d034      	beq.n	800735c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	461a      	mov	r2, r3
 80072fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	4413      	add	r3, r2
 8007306:	3306      	adds	r3, #6
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800731a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800731c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800732c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800732e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007330:	b29b      	uxth	r3, r3
 8007332:	f007 fdcf 	bl	800eed4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	b29a      	uxth	r2, r3
 800733e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007342:	4013      	ands	r3, r2
 8007344:	823b      	strh	r3, [r7, #16]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	8a3a      	ldrh	r2, [r7, #16]
 800734c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007350:	b292      	uxth	r2, r2
 8007352:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f00b ff43 	bl	80131e0 <HAL_PCD_SetupStageCallback>
 800735a:	e310      	b.n	800797e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800735c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007360:	2b00      	cmp	r3, #0
 8007362:	f280 830c 	bge.w	800797e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29a      	uxth	r2, r3
 800736e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007372:	4013      	ands	r3, r2
 8007374:	83fb      	strh	r3, [r7, #30]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	8bfa      	ldrh	r2, [r7, #30]
 800737c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007380:	b292      	uxth	r2, r2
 8007382:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	3306      	adds	r3, #6
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6812      	ldr	r2, [r2, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80073ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80073b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d019      	beq.n	80073ec <PCD_EP_ISR_Handler+0x1f8>
 80073b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d015      	beq.n	80073ec <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073c6:	6959      	ldr	r1, [r3, #20]
 80073c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80073cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f007 fd7f 	bl	800eed4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80073d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	441a      	add	r2, r3
 80073e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80073e4:	2100      	movs	r1, #0
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f00b ff0c 	bl	8013204 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80073f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80073fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f040 82bd 	bne.w	800797e <PCD_EP_ISR_Handler+0x78a>
 8007404:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007408:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800740c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007410:	f000 82b5 	beq.w	800797e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	4413      	add	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	881b      	ldrh	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800743e:	b29a      	uxth	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d91d      	bls.n	8007488 <PCD_EP_ISR_Handler+0x294>
 800744c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	647b      	str	r3, [r7, #68]	; 0x44
 8007454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <PCD_EP_ISR_Handler+0x272>
 8007460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007462:	3b01      	subs	r3, #1
 8007464:	647b      	str	r3, [r7, #68]	; 0x44
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29a      	uxth	r2, r3
 800746c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29b      	uxth	r3, r3
 8007474:	4313      	orrs	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007480:	b29a      	uxth	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e026      	b.n	80074d6 <PCD_EP_ISR_Handler+0x2e2>
 8007488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <PCD_EP_ISR_Handler+0x2b2>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800749a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749e:	b29a      	uxth	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e017      	b.n	80074d6 <PCD_EP_ISR_Handler+0x2e2>
 80074a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	647b      	str	r3, [r7, #68]	; 0x44
 80074ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <PCD_EP_ISR_Handler+0x2cc>
 80074ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074bc:	3301      	adds	r3, #1
 80074be:	647b      	str	r3, [r7, #68]	; 0x44
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	029b      	lsls	r3, r3, #10
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4313      	orrs	r3, r2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	827b      	strh	r3, [r7, #18]
 80074e8:	8a7b      	ldrh	r3, [r7, #18]
 80074ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074ee:	827b      	strh	r3, [r7, #18]
 80074f0:	8a7b      	ldrh	r3, [r7, #18]
 80074f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074f6:	827b      	strh	r3, [r7, #18]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	8a7b      	ldrh	r3, [r7, #18]
 80074fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800750a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750e:	b29b      	uxth	r3, r3
 8007510:	8013      	strh	r3, [r2, #0]
 8007512:	e234      	b.n	800797e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007528:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800752c:	2b00      	cmp	r3, #0
 800752e:	f280 80fc 	bge.w	800772a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29a      	uxth	r2, r3
 8007544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007548:	4013      	ands	r3, r2
 800754a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007560:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007564:	b292      	uxth	r2, r2
 8007566:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007568:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	4413      	add	r3, r2
 800757c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800757e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007580:	7b1b      	ldrb	r3, [r3, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d125      	bne.n	80075d2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800758e:	b29b      	uxth	r3, r3
 8007590:	461a      	mov	r2, r3
 8007592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	3306      	adds	r3, #6
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	6812      	ldr	r2, [r2, #0]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075ae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80075b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 8092 	beq.w	80076e0 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c2:	6959      	ldr	r1, [r3, #20]
 80075c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075c6:	88da      	ldrh	r2, [r3, #6]
 80075c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80075cc:	f007 fc82 	bl	800eed4 <USB_ReadPMA>
 80075d0:	e086      	b.n	80076e0 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80075d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075d4:	78db      	ldrb	r3, [r3, #3]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d10a      	bne.n	80075f0 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80075da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80075de:	461a      	mov	r2, r3
 80075e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f9d9 	bl	800799a <HAL_PCD_EP_DB_Receive>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80075ee:	e077      	b.n	80076e0 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	441a      	add	r2, r3
 800761c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800762c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007630:	b29b      	uxth	r3, r3
 8007632:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	461a      	mov	r2, r3
 800763a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	881b      	ldrh	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d024      	beq.n	8007698 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007656:	b29b      	uxth	r3, r3
 8007658:	461a      	mov	r2, r3
 800765a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4413      	add	r3, r2
 8007662:	3302      	adds	r3, #2
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007676:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800767a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800767e:	2b00      	cmp	r3, #0
 8007680:	d02e      	beq.n	80076e0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007688:	6959      	ldr	r1, [r3, #20]
 800768a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800768c:	891a      	ldrh	r2, [r3, #8]
 800768e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007692:	f007 fc1f 	bl	800eed4 <USB_ReadPMA>
 8007696:	e023      	b.n	80076e0 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	4413      	add	r3, r2
 80076ac:	3306      	adds	r3, #6
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6812      	ldr	r2, [r2, #0]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80076c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6818      	ldr	r0, [r3, #0]
 80076d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076d2:	6959      	ldr	r1, [r3, #20]
 80076d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076d6:	895a      	ldrh	r2, [r3, #10]
 80076d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80076dc:	f007 fbfa 	bl	800eed4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80076e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80076e8:	441a      	add	r2, r3
 80076ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80076ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076f0:	695a      	ldr	r2, [r3, #20]
 80076f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80076f6:	441a      	add	r2, r3
 80076f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80076fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <PCD_EP_ISR_Handler+0x51c>
 8007704:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	429a      	cmp	r2, r3
 800770e:	d206      	bcs.n	800771e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f00b fd74 	bl	8013204 <HAL_PCD_DataOutStageCallback>
 800771c:	e005      	b.n	800772a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007724:	4618      	mov	r0, r3
 8007726:	f005 fea1 	bl	800d46c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800772a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800772e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8123 	beq.w	800797e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8007738:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4413      	add	r3, r2
 800774a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	441a      	add	r2, r3
 8007778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800777c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007784:	b29b      	uxth	r3, r3
 8007786:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800778a:	78db      	ldrb	r3, [r3, #3]
 800778c:	2b01      	cmp	r3, #1
 800778e:	f040 80a2 	bne.w	80078d6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8007792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007794:	2200      	movs	r2, #0
 8007796:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800779a:	7b1b      	ldrb	r3, [r3, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 8093 	beq.w	80078c8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80077a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d046      	beq.n	800783c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d126      	bne.n	8007804 <PCD_EP_ISR_Handler+0x610>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	4413      	add	r3, r2
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
 80077ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	011a      	lsls	r2, r3, #4
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	4413      	add	r3, r2
 80077d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077dc:	623b      	str	r3, [r7, #32]
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	801a      	strh	r2, [r3, #0]
 8007802:	e061      	b.n	80078c8 <PCD_EP_ISR_Handler+0x6d4>
 8007804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d15d      	bne.n	80078c8 <PCD_EP_ISR_Handler+0x6d4>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800781a:	b29b      	uxth	r3, r3
 800781c:	461a      	mov	r2, r3
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	4413      	add	r3, r2
 8007822:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	011a      	lsls	r2, r3, #4
 800782a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782c:	4413      	add	r3, r2
 800782e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
 8007834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007836:	2200      	movs	r2, #0
 8007838:	801a      	strh	r2, [r3, #0]
 800783a:	e045      	b.n	80078c8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d126      	bne.n	8007898 <PCD_EP_ISR_Handler+0x6a4>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	637b      	str	r3, [r7, #52]	; 0x34
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007858:	b29b      	uxth	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785e:	4413      	add	r3, r2
 8007860:	637b      	str	r3, [r7, #52]	; 0x34
 8007862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	011a      	lsls	r2, r3, #4
 8007868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786a:	4413      	add	r3, r2
 800786c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007870:	633b      	str	r3, [r7, #48]	; 0x30
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800787c:	b29a      	uxth	r2, r3
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	801a      	strh	r2, [r3, #0]
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	b29b      	uxth	r3, r3
 8007888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007890:	b29a      	uxth	r2, r3
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	801a      	strh	r2, [r3, #0]
 8007896:	e017      	b.n	80078c8 <PCD_EP_ISR_Handler+0x6d4>
 8007898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d113      	bne.n	80078c8 <PCD_EP_ISR_Handler+0x6d4>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ae:	4413      	add	r3, r2
 80078b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	011a      	lsls	r2, r3, #4
 80078b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ba:	4413      	add	r3, r2
 80078bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80078c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c4:	2200      	movs	r2, #0
 80078c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f00b fcb3 	bl	801323a <HAL_PCD_DataInStageCallback>
 80078d4:	e053      	b.n	800797e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80078d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80078da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d146      	bne.n	8007970 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	4413      	add	r3, r2
 80078f6:	3302      	adds	r3, #2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800790a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800790e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007916:	429a      	cmp	r2, r3
 8007918:	d907      	bls.n	800792a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800791a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007922:	1ad2      	subs	r2, r2, r3
 8007924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007926:	619a      	str	r2, [r3, #24]
 8007928:	e002      	b.n	8007930 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800792a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800792c:	2200      	movs	r2, #0
 800792e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d106      	bne.n	8007946 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f00b fc7b 	bl	801323a <HAL_PCD_DataInStageCallback>
 8007944:	e01b      	b.n	800797e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007948:	695a      	ldr	r2, [r3, #20]
 800794a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800794e:	441a      	add	r2, r3
 8007950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007952:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800795c:	441a      	add	r2, r3
 800795e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007960:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007968:	4618      	mov	r0, r3
 800796a:	f005 fd7f 	bl	800d46c <USB_EPStartXfer>
 800796e:	e006      	b.n	800797e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007974:	461a      	mov	r2, r3
 8007976:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f91b 	bl	8007bb4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007986:	b29b      	uxth	r3, r3
 8007988:	b21b      	sxth	r3, r3
 800798a:	2b00      	cmp	r3, #0
 800798c:	f6ff ac37 	blt.w	80071fe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3758      	adds	r7, #88	; 0x58
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b088      	sub	sp, #32
 800799e:	af00      	add	r7, sp, #0
 80079a0:	60f8      	str	r0, [r7, #12]
 80079a2:	60b9      	str	r1, [r7, #8]
 80079a4:	4613      	mov	r3, r2
 80079a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d07e      	beq.n	8007ab0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	461a      	mov	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	4413      	add	r3, r2
 80079c6:	3302      	adds	r3, #2
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	699a      	ldr	r2, [r3, #24]
 80079e0:	8b7b      	ldrh	r3, [r7, #26]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d306      	bcc.n	80079f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	699a      	ldr	r2, [r3, #24]
 80079ea:	8b7b      	ldrh	r3, [r7, #26]
 80079ec:	1ad2      	subs	r2, r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	619a      	str	r2, [r3, #24]
 80079f2:	e002      	b.n	80079fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	2200      	movs	r2, #0
 80079f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d123      	bne.n	8007a4a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1c:	833b      	strh	r3, [r7, #24]
 8007a1e:	8b3b      	ldrh	r3, [r7, #24]
 8007a20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a24:	833b      	strh	r3, [r7, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	441a      	add	r2, r3
 8007a34:	8b3b      	ldrh	r3, [r7, #24]
 8007a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d01f      	beq.n	8007a94 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6e:	82fb      	strh	r3, [r7, #22]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	8afb      	ldrh	r3, [r7, #22]
 8007a80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007a94:	8b7b      	ldrh	r3, [r7, #26]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 8087 	beq.w	8007baa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6959      	ldr	r1, [r3, #20]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	891a      	ldrh	r2, [r3, #8]
 8007aa8:	8b7b      	ldrh	r3, [r7, #26]
 8007aaa:	f007 fa13 	bl	800eed4 <USB_ReadPMA>
 8007aae:	e07c      	b.n	8007baa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	4413      	add	r3, r2
 8007ac4:	3306      	adds	r3, #6
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ad8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	699a      	ldr	r2, [r3, #24]
 8007ade:	8b7b      	ldrh	r3, [r7, #26]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d306      	bcc.n	8007af2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	699a      	ldr	r2, [r3, #24]
 8007ae8:	8b7b      	ldrh	r3, [r7, #26]
 8007aea:	1ad2      	subs	r2, r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	619a      	str	r2, [r3, #24]
 8007af0:	e002      	b.n	8007af8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2200      	movs	r2, #0
 8007af6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d123      	bne.n	8007b48 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	4413      	add	r3, r2
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	83fb      	strh	r3, [r7, #30]
 8007b1c:	8bfb      	ldrh	r3, [r7, #30]
 8007b1e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b22:	83fb      	strh	r3, [r7, #30]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	8bfb      	ldrh	r3, [r7, #30]
 8007b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d11f      	bne.n	8007b92 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6c:	83bb      	strh	r3, [r7, #28]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	441a      	add	r2, r3
 8007b7c:	8bbb      	ldrh	r3, [r7, #28]
 8007b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007b92:	8b7b      	ldrh	r3, [r7, #26]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d008      	beq.n	8007baa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6959      	ldr	r1, [r3, #20]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	895a      	ldrh	r2, [r3, #10]
 8007ba4:	8b7b      	ldrh	r3, [r7, #26]
 8007ba6:	f007 f995 	bl	800eed4 <USB_ReadPMA>
    }
  }

  return count;
 8007baa:	8b7b      	ldrh	r3, [r7, #26]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b0a4      	sub	sp, #144	; 0x90
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007bc2:	88fb      	ldrh	r3, [r7, #6]
 8007bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 81dd 	beq.w	8007f88 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	4413      	add	r3, r2
 8007be2:	3302      	adds	r3, #2
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	6812      	ldr	r2, [r2, #0]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bf6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d907      	bls.n	8007c16 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	699a      	ldr	r2, [r3, #24]
 8007c0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007c0e:	1ad2      	subs	r2, r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	619a      	str	r2, [r3, #24]
 8007c14:	e002      	b.n	8007c1c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f040 80b9 	bne.w	8007d98 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	785b      	ldrb	r3, [r3, #1]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d126      	bne.n	8007c7c <HAL_PCD_EP_DB_Transmit+0xc8>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c42:	4413      	add	r3, r2
 8007c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	011a      	lsls	r2, r3, #4
 8007c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4e:	4413      	add	r3, r2
 8007c50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c60:	b29a      	uxth	r2, r3
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	801a      	strh	r2, [r3, #0]
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	801a      	strh	r2, [r3, #0]
 8007c7a:	e01a      	b.n	8007cb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	785b      	ldrb	r3, [r3, #1]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d116      	bne.n	8007cb2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c98:	4413      	add	r3, r2
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	011a      	lsls	r2, r3, #4
 8007ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007caa:	633b      	str	r3, [r7, #48]	; 0x30
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	2200      	movs	r2, #0
 8007cb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d126      	bne.n	8007d0e <HAL_PCD_EP_DB_Transmit+0x15a>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	61fb      	str	r3, [r7, #28]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	61fb      	str	r3, [r7, #28]
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	011a      	lsls	r2, r3, #4
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ce6:	61bb      	str	r3, [r7, #24]
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf2:	b29a      	uxth	r2, r3
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	801a      	strh	r2, [r3, #0]
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	801a      	strh	r2, [r3, #0]
 8007d0c:	e017      	b.n	8007d3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	785b      	ldrb	r3, [r3, #1]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d113      	bne.n	8007d3e <HAL_PCD_EP_DB_Transmit+0x18a>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	4413      	add	r3, r2
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	011a      	lsls	r2, r3, #4
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	4413      	add	r3, r2
 8007d32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d36:	623b      	str	r3, [r7, #32]
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	4619      	mov	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f00b fa78 	bl	801323a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 82fc 	beq.w	800834e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d70:	82fb      	strh	r3, [r7, #22]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	441a      	add	r2, r3
 8007d80:	8afb      	ldrh	r3, [r7, #22]
 8007d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	8013      	strh	r3, [r2, #0]
 8007d96:	e2da      	b.n	800834e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d021      	beq.n	8007de6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	441a      	add	r2, r3
 8007dce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	f040 82ae 	bne.w	800834e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007e08:	441a      	add	r2, r3
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6a1a      	ldr	r2, [r3, #32]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d30b      	bcc.n	8007e32 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6a1a      	ldr	r2, [r3, #32]
 8007e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	621a      	str	r2, [r3, #32]
 8007e30:	e017      	b.n	8007e62 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d108      	bne.n	8007e4c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8007e3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007e4a:	e00a      	b.n	8007e62 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d165      	bne.n	8007f36 <HAL_PCD_EP_DB_Transmit+0x382>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7e:	4413      	add	r3, r2
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	011a      	lsls	r2, r3, #4
 8007e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	801a      	strh	r2, [r3, #0]
 8007ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ea8:	d91d      	bls.n	8007ee6 <HAL_PCD_EP_DB_Transmit+0x332>
 8007eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb6:	f003 031f 	and.w	r3, r3, #31
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d102      	bne.n	8007ec4 <HAL_PCD_EP_DB_Transmit+0x310>
 8007ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	029b      	lsls	r3, r3, #10
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	801a      	strh	r2, [r3, #0]
 8007ee4:	e044      	b.n	8007f70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <HAL_PCD_EP_DB_Transmit+0x350>
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	881b      	ldrh	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	801a      	strh	r2, [r3, #0]
 8007f02:	e035      	b.n	8007f70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <HAL_PCD_EP_DB_Transmit+0x36a>
 8007f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	029b      	lsls	r3, r3, #10
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	801a      	strh	r2, [r3, #0]
 8007f34:	e01c      	b.n	8007f70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d118      	bne.n	8007f70 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	647b      	str	r3, [r7, #68]	; 0x44
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f52:	4413      	add	r3, r2
 8007f54:	647b      	str	r3, [r7, #68]	; 0x44
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	011a      	lsls	r2, r3, #4
 8007f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f5e:	4413      	add	r3, r2
 8007f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f64:	643b      	str	r3, [r7, #64]	; 0x40
 8007f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f6e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	6959      	ldr	r1, [r3, #20]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	891a      	ldrh	r2, [r3, #8]
 8007f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	f006 ff62 	bl	800ee4a <USB_WritePMA>
 8007f86:	e1e2      	b.n	800834e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	3306      	adds	r3, #6
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d307      	bcc.n	8007fd0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007fc8:	1ad2      	subs	r2, r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	619a      	str	r2, [r3, #24]
 8007fce:	e002      	b.n	8007fd6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 80c0 	bne.w	8008160 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d126      	bne.n	8008036 <HAL_PCD_EP_DB_Transmit+0x482>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ffc:	4413      	add	r3, r2
 8007ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	011a      	lsls	r2, r3, #4
 8008006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008008:	4413      	add	r3, r2
 800800a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800800e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800801a:	b29a      	uxth	r2, r3
 800801c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800801e:	801a      	strh	r2, [r3, #0]
 8008020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800802a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800802e:	b29a      	uxth	r2, r3
 8008030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008032:	801a      	strh	r2, [r3, #0]
 8008034:	e01a      	b.n	800806c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d116      	bne.n	800806c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	667b      	str	r3, [r7, #100]	; 0x64
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800804c:	b29b      	uxth	r3, r3
 800804e:	461a      	mov	r2, r3
 8008050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008052:	4413      	add	r3, r2
 8008054:	667b      	str	r3, [r7, #100]	; 0x64
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	011a      	lsls	r2, r3, #4
 800805c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800805e:	4413      	add	r3, r2
 8008060:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008064:	663b      	str	r3, [r7, #96]	; 0x60
 8008066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008068:	2200      	movs	r2, #0
 800806a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	677b      	str	r3, [r7, #116]	; 0x74
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d12b      	bne.n	80080d2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008088:	b29b      	uxth	r3, r3
 800808a:	461a      	mov	r2, r3
 800808c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800808e:	4413      	add	r3, r2
 8008090:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	011a      	lsls	r2, r3, #4
 8008098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809a:	4413      	add	r3, r2
 800809c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080b6:	801a      	strh	r2, [r3, #0]
 80080b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	e017      	b.n	8008102 <HAL_PCD_EP_DB_Transmit+0x54e>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d113      	bne.n	8008102 <HAL_PCD_EP_DB_Transmit+0x54e>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	461a      	mov	r2, r3
 80080e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080e8:	4413      	add	r3, r2
 80080ea:	677b      	str	r3, [r7, #116]	; 0x74
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	011a      	lsls	r2, r3, #4
 80080f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080fa:	673b      	str	r3, [r7, #112]	; 0x70
 80080fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080fe:	2200      	movs	r2, #0
 8008100:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f00b f896 	bl	801323a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 811a 	bne.w	800834e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008134:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	441a      	add	r2, r3
 8008146:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800814a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800814e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800815a:	b29b      	uxth	r3, r3
 800815c:	8013      	strh	r3, [r2, #0]
 800815e:	e0f6      	b.n	800834e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008160:	88fb      	ldrh	r3, [r7, #6]
 8008162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d121      	bne.n	80081ae <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008184:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	441a      	add	r2, r3
 8008196:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800819a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800819e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	f040 80ca 	bne.w	800834e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	695a      	ldr	r2, [r3, #20]
 80081be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80081c2:	441a      	add	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	69da      	ldr	r2, [r3, #28]
 80081cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80081d0:	441a      	add	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6a1a      	ldr	r2, [r3, #32]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d30b      	bcc.n	80081fa <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6a1a      	ldr	r2, [r3, #32]
 80081ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081f2:	1ad2      	subs	r2, r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	621a      	str	r2, [r3, #32]
 80081f8:	e017      	b.n	800822a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d108      	bne.n	8008214 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8008202:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008212:	e00a      	b.n	800822a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	657b      	str	r3, [r7, #84]	; 0x54
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	785b      	ldrb	r3, [r3, #1]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d165      	bne.n	8008304 <HAL_PCD_EP_DB_Transmit+0x750>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008246:	b29b      	uxth	r3, r3
 8008248:	461a      	mov	r2, r3
 800824a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800824c:	4413      	add	r3, r2
 800824e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	011a      	lsls	r2, r3, #4
 8008256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008258:	4413      	add	r3, r2
 800825a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800825e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008262:	881b      	ldrh	r3, [r3, #0]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800826a:	b29a      	uxth	r2, r3
 800826c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008274:	2b3e      	cmp	r3, #62	; 0x3e
 8008276:	d91d      	bls.n	80082b4 <HAL_PCD_EP_DB_Transmit+0x700>
 8008278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800827c:	095b      	lsrs	r3, r3, #5
 800827e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <HAL_PCD_EP_DB_Transmit+0x6de>
 800828c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800828e:	3b01      	subs	r3, #1
 8008290:	66bb      	str	r3, [r7, #104]	; 0x68
 8008292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008294:	881b      	ldrh	r3, [r3, #0]
 8008296:	b29a      	uxth	r2, r3
 8008298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800829a:	b29b      	uxth	r3, r3
 800829c:	029b      	lsls	r3, r3, #10
 800829e:	b29b      	uxth	r3, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	e041      	b.n	8008338 <HAL_PCD_EP_DB_Transmit+0x784>
 80082b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <HAL_PCD_EP_DB_Transmit+0x71e>
 80082bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	e032      	b.n	8008338 <HAL_PCD_EP_DB_Transmit+0x784>
 80082d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082d6:	085b      	lsrs	r3, r3, #1
 80082d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80082da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_PCD_EP_DB_Transmit+0x738>
 80082e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082e8:	3301      	adds	r3, #1
 80082ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80082ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	029b      	lsls	r3, r3, #10
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	4313      	orrs	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	e019      	b.n	8008338 <HAL_PCD_EP_DB_Transmit+0x784>
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d115      	bne.n	8008338 <HAL_PCD_EP_DB_Transmit+0x784>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800831a:	4413      	add	r3, r2
 800831c:	657b      	str	r3, [r7, #84]	; 0x54
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	011a      	lsls	r2, r3, #4
 8008324:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008326:	4413      	add	r3, r2
 8008328:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800832c:	653b      	str	r3, [r7, #80]	; 0x50
 800832e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008332:	b29a      	uxth	r2, r3
 8008334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008336:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	6959      	ldr	r1, [r3, #20]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	895a      	ldrh	r2, [r3, #10]
 8008344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008348:	b29b      	uxth	r3, r3
 800834a:	f006 fd7e 	bl	800ee4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	b29b      	uxth	r3, r3
 8008360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008368:	82bb      	strh	r3, [r7, #20]
 800836a:	8abb      	ldrh	r3, [r7, #20]
 800836c:	f083 0310 	eor.w	r3, r3, #16
 8008370:	82bb      	strh	r3, [r7, #20]
 8008372:	8abb      	ldrh	r3, [r7, #20]
 8008374:	f083 0320 	eor.w	r3, r3, #32
 8008378:	82bb      	strh	r3, [r7, #20]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	441a      	add	r2, r3
 8008388:	8abb      	ldrh	r3, [r7, #20]
 800838a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800838e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839a:	b29b      	uxth	r3, r3
 800839c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3790      	adds	r7, #144	; 0x90
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	607b      	str	r3, [r7, #4]
 80083b2:	460b      	mov	r3, r1
 80083b4:	817b      	strh	r3, [r7, #10]
 80083b6:	4613      	mov	r3, r2
 80083b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80083ba:	897b      	ldrh	r3, [r7, #10]
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00b      	beq.n	80083de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083c6:	897b      	ldrh	r3, [r7, #10]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4413      	add	r3, r2
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e009      	b.n	80083f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80083de:	897a      	ldrh	r2, [r7, #10]
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80083f2:	893b      	ldrh	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d107      	bne.n	8008408 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2200      	movs	r2, #0
 80083fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	b29a      	uxth	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	80da      	strh	r2, [r3, #6]
 8008406:	e00b      	b.n	8008420 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2201      	movs	r2, #1
 800840c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	b29a      	uxth	r2, r3
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	0c1b      	lsrs	r3, r3, #16
 800841a:	b29a      	uxth	r2, r3
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr

0800842c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e272      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	2b00      	cmp	r3, #0
 8008448:	f000 8087 	beq.w	800855a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800844c:	4b92      	ldr	r3, [pc, #584]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f003 030c 	and.w	r3, r3, #12
 8008454:	2b04      	cmp	r3, #4
 8008456:	d00c      	beq.n	8008472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008458:	4b8f      	ldr	r3, [pc, #572]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f003 030c 	and.w	r3, r3, #12
 8008460:	2b08      	cmp	r3, #8
 8008462:	d112      	bne.n	800848a <HAL_RCC_OscConfig+0x5e>
 8008464:	4b8c      	ldr	r3, [pc, #560]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008470:	d10b      	bne.n	800848a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008472:	4b89      	ldr	r3, [pc, #548]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d06c      	beq.n	8008558 <HAL_RCC_OscConfig+0x12c>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d168      	bne.n	8008558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e24c      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008492:	d106      	bne.n	80084a2 <HAL_RCC_OscConfig+0x76>
 8008494:	4b80      	ldr	r3, [pc, #512]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a7f      	ldr	r2, [pc, #508]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 800849a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800849e:	6013      	str	r3, [r2, #0]
 80084a0:	e02e      	b.n	8008500 <HAL_RCC_OscConfig+0xd4>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10c      	bne.n	80084c4 <HAL_RCC_OscConfig+0x98>
 80084aa:	4b7b      	ldr	r3, [pc, #492]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a7a      	ldr	r2, [pc, #488]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	4b78      	ldr	r3, [pc, #480]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a77      	ldr	r2, [pc, #476]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	e01d      	b.n	8008500 <HAL_RCC_OscConfig+0xd4>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084cc:	d10c      	bne.n	80084e8 <HAL_RCC_OscConfig+0xbc>
 80084ce:	4b72      	ldr	r3, [pc, #456]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a71      	ldr	r2, [pc, #452]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	4b6f      	ldr	r3, [pc, #444]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a6e      	ldr	r2, [pc, #440]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084e4:	6013      	str	r3, [r2, #0]
 80084e6:	e00b      	b.n	8008500 <HAL_RCC_OscConfig+0xd4>
 80084e8:	4b6b      	ldr	r3, [pc, #428]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a6a      	ldr	r2, [pc, #424]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4b68      	ldr	r3, [pc, #416]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a67      	ldr	r2, [pc, #412]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80084fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d013      	beq.n	8008530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008508:	f7fb fbb0 	bl	8003c6c <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008510:	f7fb fbac 	bl	8003c6c <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b64      	cmp	r3, #100	; 0x64
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e200      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008522:	4b5d      	ldr	r3, [pc, #372]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f0      	beq.n	8008510 <HAL_RCC_OscConfig+0xe4>
 800852e:	e014      	b.n	800855a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008530:	f7fb fb9c 	bl	8003c6c <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008538:	f7fb fb98 	bl	8003c6c <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b64      	cmp	r3, #100	; 0x64
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e1ec      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800854a:	4b53      	ldr	r3, [pc, #332]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f0      	bne.n	8008538 <HAL_RCC_OscConfig+0x10c>
 8008556:	e000      	b.n	800855a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d063      	beq.n	800862e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008566:	4b4c      	ldr	r3, [pc, #304]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f003 030c 	and.w	r3, r3, #12
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008572:	4b49      	ldr	r3, [pc, #292]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f003 030c 	and.w	r3, r3, #12
 800857a:	2b08      	cmp	r3, #8
 800857c:	d11c      	bne.n	80085b8 <HAL_RCC_OscConfig+0x18c>
 800857e:	4b46      	ldr	r3, [pc, #280]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d116      	bne.n	80085b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800858a:	4b43      	ldr	r3, [pc, #268]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <HAL_RCC_OscConfig+0x176>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b01      	cmp	r3, #1
 800859c:	d001      	beq.n	80085a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e1c0      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a2:	4b3d      	ldr	r3, [pc, #244]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	4939      	ldr	r1, [pc, #228]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085b6:	e03a      	b.n	800862e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d020      	beq.n	8008602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085c0:	4b36      	ldr	r3, [pc, #216]	; (800869c <HAL_RCC_OscConfig+0x270>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c6:	f7fb fb51 	bl	8003c6c <HAL_GetTick>
 80085ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085cc:	e008      	b.n	80085e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085ce:	f7fb fb4d 	bl	8003c6c <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e1a1      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085e0:	4b2d      	ldr	r3, [pc, #180]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0f0      	beq.n	80085ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ec:	4b2a      	ldr	r3, [pc, #168]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	4927      	ldr	r1, [pc, #156]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	600b      	str	r3, [r1, #0]
 8008600:	e015      	b.n	800862e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008602:	4b26      	ldr	r3, [pc, #152]	; (800869c <HAL_RCC_OscConfig+0x270>)
 8008604:	2200      	movs	r2, #0
 8008606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008608:	f7fb fb30 	bl	8003c6c <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008610:	f7fb fb2c 	bl	8003c6c <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e180      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1f0      	bne.n	8008610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0308 	and.w	r3, r3, #8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d03a      	beq.n	80086b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d019      	beq.n	8008676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008642:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <HAL_RCC_OscConfig+0x274>)
 8008644:	2201      	movs	r2, #1
 8008646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008648:	f7fb fb10 	bl	8003c6c <HAL_GetTick>
 800864c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800864e:	e008      	b.n	8008662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008650:	f7fb fb0c 	bl	8003c6c <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	2b02      	cmp	r3, #2
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e160      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008662:	4b0d      	ldr	r3, [pc, #52]	; (8008698 <HAL_RCC_OscConfig+0x26c>)
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0f0      	beq.n	8008650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800866e:	2001      	movs	r0, #1
 8008670:	f000 face 	bl	8008c10 <RCC_Delay>
 8008674:	e01c      	b.n	80086b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <HAL_RCC_OscConfig+0x274>)
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800867c:	f7fb faf6 	bl	8003c6c <HAL_GetTick>
 8008680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008682:	e00f      	b.n	80086a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008684:	f7fb faf2 	bl	8003c6c <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d908      	bls.n	80086a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e146      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
 8008696:	bf00      	nop
 8008698:	40021000 	.word	0x40021000
 800869c:	42420000 	.word	0x42420000
 80086a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086a4:	4b92      	ldr	r3, [pc, #584]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	f003 0302 	and.w	r3, r3, #2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d1e9      	bne.n	8008684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0304 	and.w	r3, r3, #4
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 80a6 	beq.w	800880a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086c2:	4b8b      	ldr	r3, [pc, #556]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10d      	bne.n	80086ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ce:	4b88      	ldr	r3, [pc, #544]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	4a87      	ldr	r2, [pc, #540]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	61d3      	str	r3, [r2, #28]
 80086da:	4b85      	ldr	r3, [pc, #532]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086e6:	2301      	movs	r3, #1
 80086e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086ea:	4b82      	ldr	r3, [pc, #520]	; (80088f4 <HAL_RCC_OscConfig+0x4c8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d118      	bne.n	8008728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80086f6:	4b7f      	ldr	r3, [pc, #508]	; (80088f4 <HAL_RCC_OscConfig+0x4c8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a7e      	ldr	r2, [pc, #504]	; (80088f4 <HAL_RCC_OscConfig+0x4c8>)
 80086fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008702:	f7fb fab3 	bl	8003c6c <HAL_GetTick>
 8008706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008708:	e008      	b.n	800871c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800870a:	f7fb faaf 	bl	8003c6c <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b64      	cmp	r3, #100	; 0x64
 8008716:	d901      	bls.n	800871c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e103      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800871c:	4b75      	ldr	r3, [pc, #468]	; (80088f4 <HAL_RCC_OscConfig+0x4c8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008724:	2b00      	cmp	r3, #0
 8008726:	d0f0      	beq.n	800870a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d106      	bne.n	800873e <HAL_RCC_OscConfig+0x312>
 8008730:	4b6f      	ldr	r3, [pc, #444]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	4a6e      	ldr	r2, [pc, #440]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	6213      	str	r3, [r2, #32]
 800873c:	e02d      	b.n	800879a <HAL_RCC_OscConfig+0x36e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10c      	bne.n	8008760 <HAL_RCC_OscConfig+0x334>
 8008746:	4b6a      	ldr	r3, [pc, #424]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	4a69      	ldr	r2, [pc, #420]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	6213      	str	r3, [r2, #32]
 8008752:	4b67      	ldr	r3, [pc, #412]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	4a66      	ldr	r2, [pc, #408]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008758:	f023 0304 	bic.w	r3, r3, #4
 800875c:	6213      	str	r3, [r2, #32]
 800875e:	e01c      	b.n	800879a <HAL_RCC_OscConfig+0x36e>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b05      	cmp	r3, #5
 8008766:	d10c      	bne.n	8008782 <HAL_RCC_OscConfig+0x356>
 8008768:	4b61      	ldr	r3, [pc, #388]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 800876a:	6a1b      	ldr	r3, [r3, #32]
 800876c:	4a60      	ldr	r2, [pc, #384]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 800876e:	f043 0304 	orr.w	r3, r3, #4
 8008772:	6213      	str	r3, [r2, #32]
 8008774:	4b5e      	ldr	r3, [pc, #376]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008776:	6a1b      	ldr	r3, [r3, #32]
 8008778:	4a5d      	ldr	r2, [pc, #372]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	6213      	str	r3, [r2, #32]
 8008780:	e00b      	b.n	800879a <HAL_RCC_OscConfig+0x36e>
 8008782:	4b5b      	ldr	r3, [pc, #364]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	4a5a      	ldr	r2, [pc, #360]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	6213      	str	r3, [r2, #32]
 800878e:	4b58      	ldr	r3, [pc, #352]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	4a57      	ldr	r2, [pc, #348]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008794:	f023 0304 	bic.w	r3, r3, #4
 8008798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d015      	beq.n	80087ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087a2:	f7fb fa63 	bl	8003c6c <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087a8:	e00a      	b.n	80087c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087aa:	f7fb fa5f 	bl	8003c6c <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d901      	bls.n	80087c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e0b1      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087c0:	4b4b      	ldr	r3, [pc, #300]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d0ee      	beq.n	80087aa <HAL_RCC_OscConfig+0x37e>
 80087cc:	e014      	b.n	80087f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087ce:	f7fb fa4d 	bl	8003c6c <HAL_GetTick>
 80087d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087d4:	e00a      	b.n	80087ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d6:	f7fb fa49 	bl	8003c6c <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e09b      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087ec:	4b40      	ldr	r3, [pc, #256]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80087ee:	6a1b      	ldr	r3, [r3, #32]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1ee      	bne.n	80087d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d105      	bne.n	800880a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087fe:	4b3c      	ldr	r3, [pc, #240]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	4a3b      	ldr	r2, [pc, #236]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 8087 	beq.w	8008922 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008814:	4b36      	ldr	r3, [pc, #216]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f003 030c 	and.w	r3, r3, #12
 800881c:	2b08      	cmp	r3, #8
 800881e:	d061      	beq.n	80088e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	2b02      	cmp	r3, #2
 8008826:	d146      	bne.n	80088b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008828:	4b33      	ldr	r3, [pc, #204]	; (80088f8 <HAL_RCC_OscConfig+0x4cc>)
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882e:	f7fb fa1d 	bl	8003c6c <HAL_GetTick>
 8008832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008834:	e008      	b.n	8008848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008836:	f7fb fa19 	bl	8003c6c <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	d901      	bls.n	8008848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e06d      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008848:	4b29      	ldr	r3, [pc, #164]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f0      	bne.n	8008836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885c:	d108      	bne.n	8008870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	4921      	ldr	r1, [pc, #132]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 800886c:	4313      	orrs	r3, r2
 800886e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008870:	4b1f      	ldr	r3, [pc, #124]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a19      	ldr	r1, [r3, #32]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	430b      	orrs	r3, r1
 8008882:	491b      	ldr	r1, [pc, #108]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 8008884:	4313      	orrs	r3, r2
 8008886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008888:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <HAL_RCC_OscConfig+0x4cc>)
 800888a:	2201      	movs	r2, #1
 800888c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800888e:	f7fb f9ed 	bl	8003c6c <HAL_GetTick>
 8008892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008894:	e008      	b.n	80088a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008896:	f7fb f9e9 	bl	8003c6c <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e03d      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80088a8:	4b11      	ldr	r3, [pc, #68]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0f0      	beq.n	8008896 <HAL_RCC_OscConfig+0x46a>
 80088b4:	e035      	b.n	8008922 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088b6:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <HAL_RCC_OscConfig+0x4cc>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088bc:	f7fb f9d6 	bl	8003c6c <HAL_GetTick>
 80088c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088c2:	e008      	b.n	80088d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088c4:	f7fb f9d2 	bl	8003c6c <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d901      	bls.n	80088d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e026      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80088d6:	4b06      	ldr	r3, [pc, #24]	; (80088f0 <HAL_RCC_OscConfig+0x4c4>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f0      	bne.n	80088c4 <HAL_RCC_OscConfig+0x498>
 80088e2:	e01e      	b.n	8008922 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d107      	bne.n	80088fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e019      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
 80088f0:	40021000 	.word	0x40021000
 80088f4:	40007000 	.word	0x40007000
 80088f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80088fc:	4b0b      	ldr	r3, [pc, #44]	; (800892c <HAL_RCC_OscConfig+0x500>)
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	429a      	cmp	r2, r3
 800890e:	d106      	bne.n	800891e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800891a:	429a      	cmp	r2, r3
 800891c:	d001      	beq.n	8008922 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	40021000 	.word	0x40021000

08008930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e0d0      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008944:	4b6a      	ldr	r3, [pc, #424]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	683a      	ldr	r2, [r7, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d910      	bls.n	8008974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008952:	4b67      	ldr	r3, [pc, #412]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f023 0207 	bic.w	r2, r3, #7
 800895a:	4965      	ldr	r1, [pc, #404]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	4313      	orrs	r3, r2
 8008960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008962:	4b63      	ldr	r3, [pc, #396]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d001      	beq.n	8008974 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e0b8      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0302 	and.w	r3, r3, #2
 800897c:	2b00      	cmp	r3, #0
 800897e:	d020      	beq.n	80089c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800898c:	4b59      	ldr	r3, [pc, #356]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	4a58      	ldr	r2, [pc, #352]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008992:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008996:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0308 	and.w	r3, r3, #8
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d005      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089a4:	4b53      	ldr	r3, [pc, #332]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	4a52      	ldr	r2, [pc, #328]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 80089aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80089ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089b0:	4b50      	ldr	r3, [pc, #320]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	494d      	ldr	r1, [pc, #308]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d040      	beq.n	8008a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d107      	bne.n	80089e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089d6:	4b47      	ldr	r3, [pc, #284]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d115      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e07f      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d107      	bne.n	80089fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ee:	4b41      	ldr	r3, [pc, #260]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e073      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089fe:	4b3d      	ldr	r3, [pc, #244]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e06b      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a0e:	4b39      	ldr	r3, [pc, #228]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f023 0203 	bic.w	r2, r3, #3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4936      	ldr	r1, [pc, #216]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a20:	f7fb f924 	bl	8003c6c <HAL_GetTick>
 8008a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a26:	e00a      	b.n	8008a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a28:	f7fb f920 	bl	8003c6c <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e053      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a3e:	4b2d      	ldr	r3, [pc, #180]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f003 020c 	and.w	r2, r3, #12
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d1eb      	bne.n	8008a28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a50:	4b27      	ldr	r3, [pc, #156]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0307 	and.w	r3, r3, #7
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d210      	bcs.n	8008a80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5e:	4b24      	ldr	r3, [pc, #144]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f023 0207 	bic.w	r2, r3, #7
 8008a66:	4922      	ldr	r1, [pc, #136]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a6e:	4b20      	ldr	r3, [pc, #128]	; (8008af0 <HAL_RCC_ClockConfig+0x1c0>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0307 	and.w	r3, r3, #7
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d001      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e032      	b.n	8008ae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d008      	beq.n	8008a9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a8c:	4b19      	ldr	r3, [pc, #100]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	4916      	ldr	r1, [pc, #88]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0308 	and.w	r3, r3, #8
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d009      	beq.n	8008abe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008aaa:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	490e      	ldr	r1, [pc, #56]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008abe:	f000 f821 	bl	8008b04 <HAL_RCC_GetSysClockFreq>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <HAL_RCC_ClockConfig+0x1c4>)
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	091b      	lsrs	r3, r3, #4
 8008aca:	f003 030f 	and.w	r3, r3, #15
 8008ace:	490a      	ldr	r1, [pc, #40]	; (8008af8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ad0:	5ccb      	ldrb	r3, [r1, r3]
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	4a09      	ldr	r2, [pc, #36]	; (8008afc <HAL_RCC_ClockConfig+0x1cc>)
 8008ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <HAL_RCC_ClockConfig+0x1d0>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fb f882 	bl	8003be8 <HAL_InitTick>

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	40022000 	.word	0x40022000
 8008af4:	40021000 	.word	0x40021000
 8008af8:	0802fb00 	.word	0x0802fb00
 8008afc:	20000010 	.word	0x20000010
 8008b00:	20000014 	.word	0x20000014

08008b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60bb      	str	r3, [r7, #8]
 8008b12:	2300      	movs	r3, #0
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	2300      	movs	r3, #0
 8008b18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008b1e:	4b1e      	ldr	r3, [pc, #120]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x94>)
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 030c 	and.w	r3, r3, #12
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d002      	beq.n	8008b34 <HAL_RCC_GetSysClockFreq+0x30>
 8008b2e:	2b08      	cmp	r3, #8
 8008b30:	d003      	beq.n	8008b3a <HAL_RCC_GetSysClockFreq+0x36>
 8008b32:	e027      	b.n	8008b84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008b34:	4b19      	ldr	r3, [pc, #100]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x98>)
 8008b36:	613b      	str	r3, [r7, #16]
      break;
 8008b38:	e027      	b.n	8008b8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	0c9b      	lsrs	r3, r3, #18
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	4a17      	ldr	r2, [pc, #92]	; (8008ba0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d010      	beq.n	8008b74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b52:	4b11      	ldr	r3, [pc, #68]	; (8008b98 <HAL_RCC_GetSysClockFreq+0x94>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	0c5b      	lsrs	r3, r3, #17
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	4a11      	ldr	r2, [pc, #68]	; (8008ba4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008b5e:	5cd3      	ldrb	r3, [r2, r3]
 8008b60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a0d      	ldr	r2, [pc, #52]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x98>)
 8008b66:	fb03 f202 	mul.w	r2, r3, r2
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b70:	617b      	str	r3, [r7, #20]
 8008b72:	e004      	b.n	8008b7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a0c      	ldr	r2, [pc, #48]	; (8008ba8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008b78:	fb02 f303 	mul.w	r3, r2, r3
 8008b7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	613b      	str	r3, [r7, #16]
      break;
 8008b82:	e002      	b.n	8008b8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <HAL_RCC_GetSysClockFreq+0x98>)
 8008b86:	613b      	str	r3, [r7, #16]
      break;
 8008b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b8a:	693b      	ldr	r3, [r7, #16]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	40021000 	.word	0x40021000
 8008b9c:	007a1200 	.word	0x007a1200
 8008ba0:	0802fb18 	.word	0x0802fb18
 8008ba4:	0802fb28 	.word	0x0802fb28
 8008ba8:	003d0900 	.word	0x003d0900

08008bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bb0:	4b02      	ldr	r3, [pc, #8]	; (8008bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr
 8008bbc:	20000010 	.word	0x20000010

08008bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008bc4:	f7ff fff2 	bl	8008bac <HAL_RCC_GetHCLKFreq>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	0a1b      	lsrs	r3, r3, #8
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	4903      	ldr	r1, [pc, #12]	; (8008be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bd6:	5ccb      	ldrb	r3, [r1, r3]
 8008bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	40021000 	.word	0x40021000
 8008be4:	0802fb10 	.word	0x0802fb10

08008be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008bec:	f7ff ffde 	bl	8008bac <HAL_RCC_GetHCLKFreq>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	0adb      	lsrs	r3, r3, #11
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	4903      	ldr	r1, [pc, #12]	; (8008c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bfe:	5ccb      	ldrb	r3, [r1, r3]
 8008c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	40021000 	.word	0x40021000
 8008c0c:	0802fb10 	.word	0x0802fb10

08008c10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <RCC_Delay+0x34>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a0a      	ldr	r2, [pc, #40]	; (8008c48 <RCC_Delay+0x38>)
 8008c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c22:	0a5b      	lsrs	r3, r3, #9
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008c2c:	bf00      	nop
  }
  while (Delay --);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	1e5a      	subs	r2, r3, #1
 8008c32:	60fa      	str	r2, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1f9      	bne.n	8008c2c <RCC_Delay+0x1c>
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr
 8008c44:	20000010 	.word	0x20000010
 8008c48:	10624dd3 	.word	0x10624dd3

08008c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b086      	sub	sp, #24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d07d      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c6c:	4b4f      	ldr	r3, [pc, #316]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10d      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c78:	4b4c      	ldr	r3, [pc, #304]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	4a4b      	ldr	r2, [pc, #300]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c82:	61d3      	str	r3, [r2, #28]
 8008c84:	4b49      	ldr	r3, [pc, #292]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c8c:	60bb      	str	r3, [r7, #8]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c90:	2301      	movs	r3, #1
 8008c92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c94:	4b46      	ldr	r3, [pc, #280]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d118      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ca0:	4b43      	ldr	r3, [pc, #268]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a42      	ldr	r2, [pc, #264]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cac:	f7fa ffde 	bl	8003c6c <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cb2:	e008      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cb4:	f7fa ffda 	bl	8003c6c <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	2b64      	cmp	r3, #100	; 0x64
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e06d      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cc6:	4b3a      	ldr	r3, [pc, #232]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0f0      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008cd2:	4b36      	ldr	r3, [pc, #216]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d02e      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d027      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008cf0:	4b2e      	ldr	r3, [pc, #184]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008cfa:	4b2e      	ldr	r3, [pc, #184]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d00:	4b2c      	ldr	r3, [pc, #176]	; (8008db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008d06:	4a29      	ldr	r2, [pc, #164]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d014      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d16:	f7fa ffa9 	bl	8003c6c <HAL_GetTick>
 8008d1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d1c:	e00a      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d1e:	f7fa ffa5 	bl	8003c6c <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d901      	bls.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e036      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d34:	4b1d      	ldr	r3, [pc, #116]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d0ee      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d40:	4b1a      	ldr	r3, [pc, #104]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	4917      	ldr	r1, [pc, #92]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d105      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d58:	4b14      	ldr	r3, [pc, #80]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	4a13      	ldr	r2, [pc, #76]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d008      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d70:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	490b      	ldr	r1, [pc, #44]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0310 	and.w	r3, r3, #16
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d008      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d8e:	4b07      	ldr	r3, [pc, #28]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	4904      	ldr	r1, [pc, #16]	; (8008dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40021000 	.word	0x40021000
 8008db0:	40007000 	.word	0x40007000
 8008db4:	42420440 	.word	0x42420440

08008db8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	61fb      	str	r3, [r7, #28]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	2b0f      	cmp	r3, #15
 8008dda:	f200 80af 	bhi.w	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008ebb 	.word	0x08008ebb
 8008de8:	08008f21 	.word	0x08008f21
 8008dec:	08008f3d 	.word	0x08008f3d
 8008df0:	08008eab 	.word	0x08008eab
 8008df4:	08008f3d 	.word	0x08008f3d
 8008df8:	08008f3d 	.word	0x08008f3d
 8008dfc:	08008f3d 	.word	0x08008f3d
 8008e00:	08008eb3 	.word	0x08008eb3
 8008e04:	08008f3d 	.word	0x08008f3d
 8008e08:	08008f3d 	.word	0x08008f3d
 8008e0c:	08008f3d 	.word	0x08008f3d
 8008e10:	08008f3d 	.word	0x08008f3d
 8008e14:	08008f3d 	.word	0x08008f3d
 8008e18:	08008f3d 	.word	0x08008f3d
 8008e1c:	08008f3d 	.word	0x08008f3d
 8008e20:	08008e25 	.word	0x08008e25
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8008e24:	4b4a      	ldr	r3, [pc, #296]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8008e2a:	4b49      	ldr	r3, [pc, #292]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8084 	beq.w	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	0c9b      	lsrs	r3, r3, #18
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	4a44      	ldr	r2, [pc, #272]	; (8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8008e42:	5cd3      	ldrb	r3, [r2, r3]
 8008e44:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d015      	beq.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e50:	4b3f      	ldr	r3, [pc, #252]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	0c5b      	lsrs	r3, r3, #17
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	4a3f      	ldr	r2, [pc, #252]	; (8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8008e5c:	5cd3      	ldrb	r3, [r2, r3]
 8008e5e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00d      	beq.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8008e6a:	4a3c      	ldr	r2, [pc, #240]	; (8008f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	fb02 f303 	mul.w	r3, r2, r3
 8008e78:	61fb      	str	r3, [r7, #28]
 8008e7a:	e004      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	4a38      	ldr	r2, [pc, #224]	; (8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8008e80:	fb02 f303 	mul.w	r3, r2, r3
 8008e84:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008e86:	4b32      	ldr	r3, [pc, #200]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e92:	d102      	bne.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008e98:	e052      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	005b      	lsls	r3, r3, #1
 8008e9e:	4a31      	ldr	r2, [pc, #196]	; (8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8008ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	61bb      	str	r3, [r7, #24]
      break;
 8008ea8:	e04a      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008eaa:	f7ff fe2b 	bl	8008b04 <HAL_RCC_GetSysClockFreq>
 8008eae:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008eb0:	e049      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008eb2:	f7ff fe27 	bl	8008b04 <HAL_RCC_GetSysClockFreq>
 8008eb6:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008eb8:	e045      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008eba:	4b25      	ldr	r3, [pc, #148]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eca:	d108      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8008ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008eda:	61bb      	str	r3, [r7, #24]
 8008edc:	e01f      	b.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ee8:	d109      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008eea:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8008ef6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008efa:	61bb      	str	r3, [r7, #24]
 8008efc:	e00f      	b.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f08:	d11c      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008f0a:	4b11      	ldr	r3, [pc, #68]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d016      	beq.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8008f16:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008f1a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008f1c:	e012      	b.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008f1e:	e011      	b.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8008f20:	f7ff fe62 	bl	8008be8 <HAL_RCC_GetPCLK2Freq>
 8008f24:	4602      	mov	r2, r0
 8008f26:	4b0a      	ldr	r3, [pc, #40]	; (8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	0b9b      	lsrs	r3, r3, #14
 8008f2c:	f003 0303 	and.w	r3, r3, #3
 8008f30:	3301      	adds	r3, #1
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f38:	61bb      	str	r3, [r7, #24]
      break;
 8008f3a:	e004      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e002      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008f40:	bf00      	nop
 8008f42:	e000      	b.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8008f44:	bf00      	nop
    }
  }
  return (frequency);
 8008f46:	69bb      	ldr	r3, [r7, #24]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3720      	adds	r7, #32
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40021000 	.word	0x40021000
 8008f54:	0802fb2c 	.word	0x0802fb2c
 8008f58:	0802fb3c 	.word	0x0802fb3c
 8008f5c:	007a1200 	.word	0x007a1200
 8008f60:	003d0900 	.word	0x003d0900
 8008f64:	aaaaaaab 	.word	0xaaaaaaab

08008f68 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e022      	b.n	8008fc0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d105      	bne.n	8008f92 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7fa fb51 	bl	8003634 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2203      	movs	r2, #3
 8008f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f814 	bl	8008fc8 <HAL_SD_InitCard>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e00a      	b.n	8008fc0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fc8:	b5b0      	push	{r4, r5, r7, lr}
 8008fca:	b08e      	sub	sp, #56	; 0x38
 8008fcc:	af04      	add	r7, sp, #16
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008fe4:	2376      	movs	r3, #118	; 0x76
 8008fe6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681d      	ldr	r5, [r3, #0]
 8008fec:	466c      	mov	r4, sp
 8008fee:	f107 0314 	add.w	r3, r7, #20
 8008ff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009000:	4628      	mov	r0, r5
 8009002:	f002 feb5 	bl	800bd70 <SDIO_Init>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800900c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e04f      	b.n	80090b8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009018:	4b29      	ldr	r3, [pc, #164]	; (80090c0 <HAL_SD_InitCard+0xf8>)
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4618      	mov	r0, r3
 8009024:	f002 feea 	bl	800bdfc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009028:	4b25      	ldr	r3, [pc, #148]	; (80090c0 <HAL_SD_InitCard+0xf8>)
 800902a:	2201      	movs	r2, #1
 800902c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800902e:	2002      	movs	r0, #2
 8009030:	f7fa fe26 	bl	8003c80 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 ff03 	bl	8009e40 <SD_PowerON>
 800903a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e02e      	b.n	80090b8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fe22 	bl	8009ca4 <SD_InitCard>
 8009060:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e01b      	b.n	80090b8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009088:	4618      	mov	r0, r3
 800908a:	f002 ff43 	bl	800bf14 <SDMMC_CmdBlockLength>
 800908e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00f      	beq.n	80090b6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <HAL_SD_InitCard+0xfc>)
 800909c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	431a      	orrs	r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e000      	b.n	80090b8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3728      	adds	r7, #40	; 0x28
 80090bc:	46bd      	mov	sp, r7
 80090be:	bdb0      	pop	{r4, r5, r7, pc}
 80090c0:	423000a0 	.word	0x423000a0
 80090c4:	004005ff 	.word	0x004005ff

080090c8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b092      	sub	sp, #72	; 0x48
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090d6:	f7fa fdc9 	bl	8003c6c <HAL_GetTick>
 80090da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d107      	bne.n	80090fa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e1bd      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b01      	cmp	r3, #1
 8009104:	f040 81b0 	bne.w	8009468 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800910e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	441a      	add	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009118:	429a      	cmp	r2, r3
 800911a:	d907      	bls.n	800912c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009120:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e1a4      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2203      	movs	r2, #3
 8009130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2200      	movs	r2, #0
 800913a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009140:	2b01      	cmp	r3, #1
 8009142:	d002      	beq.n	800914a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	025b      	lsls	r3, r3, #9
 8009148:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800914a:	f04f 33ff 	mov.w	r3, #4294967295
 800914e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	025b      	lsls	r3, r3, #9
 8009154:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009156:	2390      	movs	r3, #144	; 0x90
 8009158:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800915a:	2302      	movs	r3, #2
 800915c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800915e:	2300      	movs	r3, #0
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8009162:	2301      	movs	r3, #1
 8009164:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f107 0214 	add.w	r2, r7, #20
 800916e:	4611      	mov	r1, r2
 8009170:	4618      	mov	r0, r3
 8009172:	f002 fea4 	bl	800bebe <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d90a      	bls.n	8009192 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2202      	movs	r2, #2
 8009180:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009188:	4618      	mov	r0, r3
 800918a:	f002 ff07 	bl	800bf9c <SDMMC_CmdReadMultiBlock>
 800918e:	6478      	str	r0, [r7, #68]	; 0x44
 8009190:	e009      	b.n	80091a6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2201      	movs	r2, #1
 8009196:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800919e:	4618      	mov	r0, r3
 80091a0:	f002 feda 	bl	800bf58 <SDMMC_CmdReadSingleBlock>
 80091a4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80091a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d012      	beq.n	80091d2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a7a      	ldr	r2, [pc, #488]	; (800939c <HAL_SD_ReadBlocks+0x2d4>)
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ba:	431a      	orrs	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e151      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80091d6:	e061      	b.n	800929c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d03c      	beq.n	8009260 <HAL_SD_ReadBlocks+0x198>
 80091e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d039      	beq.n	8009260 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80091ec:	2300      	movs	r3, #0
 80091ee:	643b      	str	r3, [r7, #64]	; 0x40
 80091f0:	e033      	b.n	800925a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f002 fde4 	bl	800bdc4 <SDIO_ReadFIFO>
 80091fc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	b2da      	uxtb	r2, r3
 8009202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009204:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	3301      	adds	r3, #1
 800920a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800920c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800920e:	3b01      	subs	r3, #1
 8009210:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	0a1b      	lsrs	r3, r3, #8
 8009216:	b2da      	uxtb	r2, r3
 8009218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	3301      	adds	r3, #1
 8009220:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	3b01      	subs	r3, #1
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	0c1b      	lsrs	r3, r3, #16
 800922c:	b2da      	uxtb	r2, r3
 800922e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009230:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009234:	3301      	adds	r3, #1
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923a:	3b01      	subs	r3, #1
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	0e1b      	lsrs	r3, r3, #24
 8009242:	b2da      	uxtb	r2, r3
 8009244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009246:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924a:	3301      	adds	r3, #1
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800924e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009250:	3b01      	subs	r3, #1
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8009254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009256:	3301      	adds	r3, #1
 8009258:	643b      	str	r3, [r7, #64]	; 0x40
 800925a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800925c:	2b07      	cmp	r3, #7
 800925e:	d9c8      	bls.n	80091f2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009260:	f7fa fd04 	bl	8003c6c <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800926c:	429a      	cmp	r2, r3
 800926e:	d902      	bls.n	8009276 <HAL_SD_ReadBlocks+0x1ae>
 8009270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009272:	2b00      	cmp	r3, #0
 8009274:	d112      	bne.n	800929c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a48      	ldr	r2, [pc, #288]	; (800939c <HAL_SD_ReadBlocks+0x2d4>)
 800927c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009282:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e0ec      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a2:	f240 332a 	movw	r3, #810	; 0x32a
 80092a6:	4013      	ands	r3, r2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d095      	beq.n	80091d8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d022      	beq.n	8009300 <HAL_SD_ReadBlocks+0x238>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d91f      	bls.n	8009300 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d01b      	beq.n	8009300 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4618      	mov	r0, r3
 80092ce:	f002 fecb 	bl	800c068 <SDMMC_CmdStopTransfer>
 80092d2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80092d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d012      	beq.n	8009300 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a2f      	ldr	r2, [pc, #188]	; (800939c <HAL_SD_ReadBlocks+0x2d4>)
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092e8:	431a      	orrs	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e0ba      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009306:	f003 0308 	and.w	r3, r3, #8
 800930a:	2b00      	cmp	r3, #0
 800930c:	d012      	beq.n	8009334 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a22      	ldr	r2, [pc, #136]	; (800939c <HAL_SD_ReadBlocks+0x2d4>)
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	f043 0208 	orr.w	r2, r3, #8
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e0a0      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b00      	cmp	r3, #0
 8009340:	d012      	beq.n	8009368 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a15      	ldr	r2, [pc, #84]	; (800939c <HAL_SD_ReadBlocks+0x2d4>)
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	f043 0202 	orr.w	r2, r3, #2
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e086      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b00      	cmp	r3, #0
 8009374:	d063      	beq.n	800943e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a08      	ldr	r2, [pc, #32]	; (800939c <HAL_SD_ReadBlocks+0x2d4>)
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	f043 0220 	orr.w	r2, r3, #32
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2201      	movs	r2, #1
 800938e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e06c      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
 800939c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f002 fd0d 	bl	800bdc4 <SDIO_ReadFIFO>
 80093aa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80093b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b6:	3301      	adds	r3, #1
 80093b8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80093ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093bc:	3b01      	subs	r3, #1
 80093be:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	0a1b      	lsrs	r3, r3, #8
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80093ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093cc:	3301      	adds	r3, #1
 80093ce:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80093d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d2:	3b01      	subs	r3, #1
 80093d4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	0c1b      	lsrs	r3, r3, #16
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093de:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80093e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e2:	3301      	adds	r3, #1
 80093e4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80093e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e8:	3b01      	subs	r3, #1
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	0e1b      	lsrs	r3, r3, #24
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80093f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f8:	3301      	adds	r3, #1
 80093fa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80093fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fe:	3b01      	subs	r3, #1
 8009400:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009402:	f7fa fc33 	bl	8003c6c <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800940e:	429a      	cmp	r2, r3
 8009410:	d902      	bls.n	8009418 <HAL_SD_ReadBlocks+0x350>
 8009412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009414:	2b00      	cmp	r3, #0
 8009416:	d112      	bne.n	800943e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a18      	ldr	r2, [pc, #96]	; (8009480 <HAL_SD_ReadBlocks+0x3b8>)
 800941e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009424:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e01b      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_SD_ReadBlocks+0x38a>
 800944c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1a6      	bne.n	80093a0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f240 523a 	movw	r2, #1338	; 0x53a
 800945a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	e006      	b.n	8009476 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
  }
}
 8009476:	4618      	mov	r0, r3
 8009478:	3748      	adds	r7, #72	; 0x48
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	004005ff 	.word	0x004005ff

08009484 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b092      	sub	sp, #72	; 0x48
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
 8009490:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009492:	f7fa fbeb 	bl	8003c6c <HAL_GetTick>
 8009496:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d107      	bne.n	80094b6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e166      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	2b01      	cmp	r3, #1
 80094c0:	f040 8159 	bne.w	8009776 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	441a      	add	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d907      	bls.n	80094e8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e14d      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2203      	movs	r2, #3
 80094ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2200      	movs	r2, #0
 80094f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d002      	beq.n	8009506 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	025b      	lsls	r3, r3, #9
 8009504:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009506:	f04f 33ff 	mov.w	r3, #4294967295
 800950a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	025b      	lsls	r3, r3, #9
 8009510:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009512:	2390      	movs	r3, #144	; 0x90
 8009514:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009516:	2300      	movs	r3, #0
 8009518:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800951a:	2300      	movs	r3, #0
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800951e:	2301      	movs	r3, #1
 8009520:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f107 0218 	add.w	r2, r7, #24
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f002 fcc6 	bl	800bebe <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d90a      	bls.n	800954e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2220      	movs	r2, #32
 800953c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009544:	4618      	mov	r0, r3
 8009546:	f002 fd6d 	bl	800c024 <SDMMC_CmdWriteMultiBlock>
 800954a:	6478      	str	r0, [r7, #68]	; 0x44
 800954c:	e009      	b.n	8009562 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2210      	movs	r2, #16
 8009552:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800955a:	4618      	mov	r0, r3
 800955c:	f002 fd40 	bl	800bfe0 <SDMMC_CmdWriteSingleBlock>
 8009560:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009564:	2b00      	cmp	r3, #0
 8009566:	d012      	beq.n	800958e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a87      	ldr	r2, [pc, #540]	; (800978c <HAL_SD_WriteBlocks+0x308>)
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009576:	431a      	orrs	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e0fa      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009592:	e065      	b.n	8009660 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800959a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d040      	beq.n	8009624 <HAL_SD_WriteBlocks+0x1a0>
 80095a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d03d      	beq.n	8009624 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80095a8:	2300      	movs	r3, #0
 80095aa:	643b      	str	r3, [r7, #64]	; 0x40
 80095ac:	e037      	b.n	800961e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80095ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80095b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095b6:	3301      	adds	r3, #1
 80095b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095bc:	3b01      	subs	r3, #1
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80095c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	021a      	lsls	r2, r3, #8
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80095cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ce:	3301      	adds	r3, #1
 80095d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d4:	3b01      	subs	r3, #1
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80095d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	041a      	lsls	r2, r3, #16
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80095e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e6:	3301      	adds	r3, #1
 80095e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80095ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ec:	3b01      	subs	r3, #1
 80095ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80095f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	061a      	lsls	r2, r3, #24
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80095fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095fe:	3301      	adds	r3, #1
 8009600:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8009602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009604:	3b01      	subs	r3, #1
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f107 0214 	add.w	r2, r7, #20
 8009610:	4611      	mov	r1, r2
 8009612:	4618      	mov	r0, r3
 8009614:	f002 fbe2 	bl	800bddc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961a:	3301      	adds	r3, #1
 800961c:	643b      	str	r3, [r7, #64]	; 0x40
 800961e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009620:	2b07      	cmp	r3, #7
 8009622:	d9c4      	bls.n	80095ae <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009624:	f7fa fb22 	bl	8003c6c <HAL_GetTick>
 8009628:	4602      	mov	r2, r0
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009630:	429a      	cmp	r2, r3
 8009632:	d902      	bls.n	800963a <HAL_SD_WriteBlocks+0x1b6>
 8009634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009636:	2b00      	cmp	r3, #0
 8009638:	d112      	bne.n	8009660 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a53      	ldr	r2, [pc, #332]	; (800978c <HAL_SD_WriteBlocks+0x308>)
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009648:	431a      	orrs	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	e091      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009666:	f240 331a 	movw	r3, #794	; 0x31a
 800966a:	4013      	ands	r3, r2
 800966c:	2b00      	cmp	r3, #0
 800966e:	d091      	beq.n	8009594 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967a:	2b00      	cmp	r3, #0
 800967c:	d022      	beq.n	80096c4 <HAL_SD_WriteBlocks+0x240>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d91f      	bls.n	80096c4 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009688:	2b03      	cmp	r3, #3
 800968a:	d01b      	beq.n	80096c4 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4618      	mov	r0, r3
 8009692:	f002 fce9 	bl	800c068 <SDMMC_CmdStopTransfer>
 8009696:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969a:	2b00      	cmp	r3, #0
 800969c:	d012      	beq.n	80096c4 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a3a      	ldr	r2, [pc, #232]	; (800978c <HAL_SD_WriteBlocks+0x308>)
 80096a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ac:	431a      	orrs	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e05f      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ca:	f003 0308 	and.w	r3, r3, #8
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d012      	beq.n	80096f8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a2d      	ldr	r2, [pc, #180]	; (800978c <HAL_SD_WriteBlocks+0x308>)
 80096d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096de:	f043 0208 	orr.w	r2, r3, #8
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e045      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d012      	beq.n	800972c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a20      	ldr	r2, [pc, #128]	; (800978c <HAL_SD_WriteBlocks+0x308>)
 800970c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	f043 0202 	orr.w	r2, r3, #2
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e02b      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	2b00      	cmp	r3, #0
 8009738:	d012      	beq.n	8009760 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a13      	ldr	r2, [pc, #76]	; (800978c <HAL_SD_WriteBlocks+0x308>)
 8009740:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	f043 0210 	orr.w	r2, r3, #16
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e011      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f240 523a 	movw	r2, #1338	; 0x53a
 8009768:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	e006      	b.n	8009784 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
  }
}
 8009784:	4618      	mov	r0, r3
 8009786:	3748      	adds	r7, #72	; 0x48
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	004005ff 	.word	0x004005ff

08009790 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800979e:	0f9b      	lsrs	r3, r3, #30
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097aa:	0e9b      	lsrs	r3, r3, #26
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	b2da      	uxtb	r2, r3
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097bc:	0e1b      	lsrs	r3, r3, #24
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	b2da      	uxtb	r2, r3
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097ce:	0c1b      	lsrs	r3, r3, #16
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097da:	0a1b      	lsrs	r3, r3, #8
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097f0:	0d1b      	lsrs	r3, r3, #20
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097fc:	0c1b      	lsrs	r3, r3, #16
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f003 030f 	and.w	r3, r3, #15
 8009804:	b2da      	uxtb	r2, r3
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800980e:	0bdb      	lsrs	r3, r3, #15
 8009810:	b2db      	uxtb	r3, r3
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	b2da      	uxtb	r2, r3
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009820:	0b9b      	lsrs	r3, r3, #14
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	b2da      	uxtb	r2, r3
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009832:	0b5b      	lsrs	r3, r3, #13
 8009834:	b2db      	uxtb	r3, r3
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	b2da      	uxtb	r2, r3
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009844:	0b1b      	lsrs	r3, r3, #12
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	b2da      	uxtb	r2, r3
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2200      	movs	r2, #0
 8009856:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985c:	2b00      	cmp	r3, #0
 800985e:	d163      	bne.n	8009928 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009864:	009a      	lsls	r2, r3, #2
 8009866:	f640 73fc 	movw	r3, #4092	; 0xffc
 800986a:	4013      	ands	r3, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009870:	0f92      	lsrs	r2, r2, #30
 8009872:	431a      	orrs	r2, r3
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800987c:	0edb      	lsrs	r3, r3, #27
 800987e:	b2db      	uxtb	r3, r3
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	b2da      	uxtb	r2, r3
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800988e:	0e1b      	lsrs	r3, r3, #24
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 0307 	and.w	r3, r3, #7
 8009896:	b2da      	uxtb	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a0:	0d5b      	lsrs	r3, r3, #21
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 0307 	and.w	r3, r3, #7
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098b2:	0c9b      	lsrs	r3, r3, #18
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c4:	0bdb      	lsrs	r3, r3, #15
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 0307 	and.w	r3, r3, #7
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	1c5a      	adds	r2, r3, #1
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	7e1b      	ldrb	r3, [r3, #24]
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	3302      	adds	r3, #2
 80098e8:	2201      	movs	r2, #1
 80098ea:	fa02 f303 	lsl.w	r3, r2, r3
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80098f2:	fb03 f202 	mul.w	r2, r3, r2
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	7a1b      	ldrb	r3, [r3, #8]
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 030f 	and.w	r3, r3, #15
 8009904:	2201      	movs	r2, #1
 8009906:	409a      	lsls	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009914:	0a52      	lsrs	r2, r2, #9
 8009916:	fb03 f202 	mul.w	r2, r3, r2
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009924:	661a      	str	r2, [r3, #96]	; 0x60
 8009926:	e031      	b.n	800998c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992c:	2b01      	cmp	r3, #1
 800992e:	d11d      	bne.n	800996c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009934:	041b      	lsls	r3, r3, #16
 8009936:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800993e:	0c1b      	lsrs	r3, r3, #16
 8009940:	431a      	orrs	r2, r3
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	3301      	adds	r3, #1
 800994c:	029a      	lsls	r2, r3, #10
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009960:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	661a      	str	r2, [r3, #96]	; 0x60
 800996a:	e00f      	b.n	800998c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a58      	ldr	r2, [pc, #352]	; (8009ad4 <HAL_SD_GetCardCSD+0x344>)
 8009972:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e09d      	b.n	8009ac8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009990:	0b9b      	lsrs	r3, r3, #14
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	b2da      	uxtb	r2, r3
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099a2:	09db      	lsrs	r3, r3, #7
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c4:	0fdb      	lsrs	r3, r3, #31
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d0:	0f5b      	lsrs	r3, r3, #29
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099e2:	0e9b      	lsrs	r3, r3, #26
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099f4:	0d9b      	lsrs	r3, r3, #22
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 030f 	and.w	r3, r3, #15
 80099fc:	b2da      	uxtb	r2, r3
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a06:	0d5b      	lsrs	r3, r3, #21
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0301 	and.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a22:	0c1b      	lsrs	r3, r3, #16
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	f003 0301 	and.w	r3, r3, #1
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a36:	0bdb      	lsrs	r3, r3, #15
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4a:	0b9b      	lsrs	r3, r3, #14
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	f003 0301 	and.w	r3, r3, #1
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5e:	0b5b      	lsrs	r3, r3, #13
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a72:	0b1b      	lsrs	r3, r3, #12
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	0a9b      	lsrs	r3, r3, #10
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	f003 0303 	and.w	r3, r3, #3
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9a:	0a1b      	lsrs	r3, r3, #8
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aae:	085b      	lsrs	r3, r3, #1
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	370c      	adds	r7, #12
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bc80      	pop	{r7}
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	004005ff 	.word	0x004005ff

08009ad8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bc80      	pop	{r7}
 8009b2c:	4770      	bx	lr
	...

08009b30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009b30:	b5b0      	push	{r4, r5, r7, lr}
 8009b32:	b08e      	sub	sp, #56	; 0x38
 8009b34:	af04      	add	r7, sp, #16
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2203      	movs	r2, #3
 8009b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d02e      	beq.n	8009bae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b56:	d106      	bne.n	8009b66 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38
 8009b64:	e029      	b.n	8009bba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b6c:	d10a      	bne.n	8009b84 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fa1c 	bl	8009fac <SD_WideBus_Enable>
 8009b74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
 8009b82:	e01a      	b.n	8009bba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10a      	bne.n	8009ba0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa59 	bl	800a042 <SD_WideBus_Disable>
 8009b90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	639a      	str	r2, [r3, #56]	; 0x38
 8009b9e:	e00c      	b.n	8009bba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	639a      	str	r2, [r3, #56]	; 0x38
 8009bac:	e005      	b.n	8009bba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00b      	beq.n	8009bda <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a26      	ldr	r2, [pc, #152]	; (8009c60 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009bc8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bd8:	e01f      	b.n	8009c1a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681d      	ldr	r5, [r3, #0]
 8009c00:	466c      	mov	r4, sp
 8009c02:	f107 0314 	add.w	r3, r7, #20
 8009c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c14:	4628      	mov	r0, r5
 8009c16:	f002 f8ab 	bl	800bd70 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c22:	4618      	mov	r0, r3
 8009c24:	f002 f976 	bl	800bf14 <SDMMC_CmdBlockLength>
 8009c28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c2a:	6a3b      	ldr	r3, [r7, #32]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00c      	beq.n	8009c4a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a0a      	ldr	r2, [pc, #40]	; (8009c60 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	431a      	orrs	r2, r3
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3728      	adds	r7, #40	; 0x28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	004005ff 	.word	0x004005ff

08009c64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009c70:	f107 030c 	add.w	r3, r7, #12
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f970 	bl	8009f5c <SD_SendStatus>
 8009c7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d005      	beq.n	8009c90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	0a5b      	lsrs	r3, r3, #9
 8009c94:	f003 030f 	and.w	r3, r3, #15
 8009c98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009c9a:	693b      	ldr	r3, [r7, #16]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009ca4:	b5b0      	push	{r4, r5, r7, lr}
 8009ca6:	b094      	sub	sp, #80	; 0x50
 8009ca8:	af04      	add	r7, sp, #16
 8009caa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009cac:	2301      	movs	r3, #1
 8009cae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f002 f8ae 	bl	800be16 <SDIO_GetPowerState>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009cc4:	e0b8      	b.n	8009e38 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d02f      	beq.n	8009d2e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 fad2 	bl	800c27c <SDMMC_CmdSendCID>
 8009cd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <SD_InitCard+0x40>
    {
      return errorstate;
 8009ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce2:	e0a9      	b.n	8009e38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f002 f8d5 	bl	800be9a <SDIO_GetResponse>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2104      	movs	r1, #4
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f002 f8cc 	bl	800be9a <SDIO_GetResponse>
 8009d02:	4602      	mov	r2, r0
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2108      	movs	r1, #8
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f002 f8c3 	bl	800be9a <SDIO_GetResponse>
 8009d14:	4602      	mov	r2, r0
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	210c      	movs	r1, #12
 8009d20:	4618      	mov	r0, r3
 8009d22:	f002 f8ba 	bl	800be9a <SDIO_GetResponse>
 8009d26:	4602      	mov	r2, r0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d32:	2b03      	cmp	r3, #3
 8009d34:	d00d      	beq.n	8009d52 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f107 020e 	add.w	r2, r7, #14
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f002 fad8 	bl	800c2f6 <SDMMC_CmdSetRelAdd>
 8009d46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <SD_InitCard+0xae>
    {
      return errorstate;
 8009d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d50:	e072      	b.n	8009e38 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d036      	beq.n	8009dc8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009d5a:	89fb      	ldrh	r3, [r7, #14]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d6a:	041b      	lsls	r3, r3, #16
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4610      	mov	r0, r2
 8009d70:	f002 faa2 	bl	800c2b8 <SDMMC_CmdSendCSD>
 8009d74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7e:	e05b      	b.n	8009e38 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2100      	movs	r1, #0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f002 f887 	bl	800be9a <SDIO_GetResponse>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2104      	movs	r1, #4
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f002 f87e 	bl	800be9a <SDIO_GetResponse>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2108      	movs	r1, #8
 8009daa:	4618      	mov	r0, r3
 8009dac:	f002 f875 	bl	800be9a <SDIO_GetResponse>
 8009db0:	4602      	mov	r2, r0
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	210c      	movs	r1, #12
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f002 f86c 	bl	800be9a <SDIO_GetResponse>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2104      	movs	r1, #4
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f002 f863 	bl	800be9a <SDIO_GetResponse>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	0d1a      	lsrs	r2, r3, #20
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ddc:	f107 0310 	add.w	r3, r7, #16
 8009de0:	4619      	mov	r1, r3
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff fcd4 	bl	8009790 <HAL_SD_GetCardCSD>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d002      	beq.n	8009df4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009df2:	e021      	b.n	8009e38 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6819      	ldr	r1, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dfc:	041b      	lsls	r3, r3, #16
 8009dfe:	2200      	movs	r2, #0
 8009e00:	461c      	mov	r4, r3
 8009e02:	4615      	mov	r5, r2
 8009e04:	4622      	mov	r2, r4
 8009e06:	462b      	mov	r3, r5
 8009e08:	4608      	mov	r0, r1
 8009e0a:	f002 f94f 	bl	800c0ac <SDMMC_CmdSelDesel>
 8009e0e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <SD_InitCard+0x176>
  {
    return errorstate;
 8009e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e18:	e00e      	b.n	8009e38 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681d      	ldr	r5, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	466c      	mov	r4, sp
 8009e22:	f103 0210 	add.w	r2, r3, #16
 8009e26:	ca07      	ldmia	r2, {r0, r1, r2}
 8009e28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e30:	4628      	mov	r0, r5
 8009e32:	f001 ff9d 	bl	800bd70 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3740      	adds	r7, #64	; 0x40
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bdb0      	pop	{r4, r5, r7, pc}

08009e40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	617b      	str	r3, [r7, #20]
 8009e50:	2300      	movs	r3, #0
 8009e52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f002 f94a 	bl	800c0f2 <SDMMC_CmdGoIdleState>
 8009e5e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	e072      	b.n	8009f50 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 f95d 	bl	800c12e <SDMMC_CmdOperCond>
 8009e74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00d      	beq.n	8009e98 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f002 f933 	bl	800c0f2 <SDMMC_CmdGoIdleState>
 8009e8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	e05b      	b.n	8009f50 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d137      	bne.n	8009f16 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	f002 f95d 	bl	800c16c <SDMMC_CmdAppCommand>
 8009eb2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d02d      	beq.n	8009f16 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ebe:	e047      	b.n	8009f50 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f002 f950 	bl	800c16c <SDMMC_CmdAppCommand>
 8009ecc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d001      	beq.n	8009ed8 <SD_PowerON+0x98>
    {
      return errorstate;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	e03b      	b.n	8009f50 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	491e      	ldr	r1, [pc, #120]	; (8009f58 <SD_PowerON+0x118>)
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f002 f966 	bl	800c1b0 <SDMMC_CmdAppOperCommand>
 8009ee4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009eec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ef0:	e02e      	b.n	8009f50 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 ffce 	bl	800be9a <SDIO_GetResponse>
 8009efe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	0fdb      	lsrs	r3, r3, #31
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <SD_PowerON+0xcc>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <SD_PowerON+0xce>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	613b      	str	r3, [r7, #16]

    count++;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d802      	bhi.n	8009f26 <SD_PowerON+0xe6>
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0cc      	beq.n	8009ec0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d902      	bls.n	8009f36 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f34:	e00c      	b.n	8009f50 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	645a      	str	r2, [r3, #68]	; 0x44
 8009f46:	e002      	b.n	8009f4e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	c1100000 	.word	0xc1100000

08009f5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d102      	bne.n	8009f72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009f6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f70:	e018      	b.n	8009fa4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f7a:	041b      	lsls	r3, r3, #16
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	4610      	mov	r0, r2
 8009f80:	f002 f9da 	bl	800c338 <SDMMC_CmdSendStatus>
 8009f84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	e009      	b.n	8009fa4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2100      	movs	r1, #0
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 ff7f 	bl	800be9a <SDIO_GetResponse>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 ff69 	bl	800be9a <SDIO_GetResponse>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fd2:	d102      	bne.n	8009fda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fd8:	e02f      	b.n	800a03a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009fda:	f107 030c 	add.w	r3, r7, #12
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f879 	bl	800a0d8 <SD_FindSCR>
 8009fe6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	e023      	b.n	800a03a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d01c      	beq.n	800a036 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a004:	041b      	lsls	r3, r3, #16
 800a006:	4619      	mov	r1, r3
 800a008:	4610      	mov	r0, r2
 800a00a:	f002 f8af 	bl	800c16c <SDMMC_CmdAppCommand>
 800a00e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	e00f      	b.n	800a03a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2102      	movs	r1, #2
 800a020:	4618      	mov	r0, r3
 800a022:	f002 f8e8 	bl	800c1f6 <SDMMC_CmdBusWidth>
 800a026:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	e003      	b.n	800a03a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a032:	2300      	movs	r3, #0
 800a034:	e001      	b.n	800a03a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a036:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3718      	adds	r7, #24
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b086      	sub	sp, #24
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	2300      	movs	r3, #0
 800a050:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 ff1e 	bl	800be9a <SDIO_GetResponse>
 800a05e:	4603      	mov	r3, r0
 800a060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a068:	d102      	bne.n	800a070 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a06a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a06e:	e02f      	b.n	800a0d0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a070:	f107 030c 	add.w	r3, r7, #12
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f82e 	bl	800a0d8 <SD_FindSCR>
 800a07c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	e023      	b.n	800a0d0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d01c      	beq.n	800a0cc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a09a:	041b      	lsls	r3, r3, #16
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f002 f864 	bl	800c16c <SDMMC_CmdAppCommand>
 800a0a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	e00f      	b.n	800a0d0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f002 f89d 	bl	800c1f6 <SDMMC_CmdBusWidth>
 800a0bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	e003      	b.n	800a0d0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e001      	b.n	800a0d0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a0d8:	b590      	push	{r4, r7, lr}
 800a0da:	b08f      	sub	sp, #60	; 0x3c
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a0e2:	f7f9 fdc3 	bl	8003c6c <HAL_GetTick>
 800a0e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60bb      	str	r3, [r7, #8]
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2108      	movs	r1, #8
 800a0fe:	4618      	mov	r0, r3
 800a100:	f001 ff08 	bl	800bf14 <SDMMC_CmdBlockLength>
 800a104:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	e0b2      	b.n	800a276 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a118:	041b      	lsls	r3, r3, #16
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f002 f825 	bl	800c16c <SDMMC_CmdAppCommand>
 800a122:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <SD_FindSCR+0x56>
  {
    return errorstate;
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	e0a3      	b.n	800a276 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a134:	2308      	movs	r3, #8
 800a136:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a138:	2330      	movs	r3, #48	; 0x30
 800a13a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a13c:	2302      	movs	r3, #2
 800a13e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a140:	2300      	movs	r3, #0
 800a142:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a144:	2301      	movs	r3, #1
 800a146:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f107 0210 	add.w	r2, r7, #16
 800a150:	4611      	mov	r1, r2
 800a152:	4618      	mov	r0, r3
 800a154:	f001 feb3 	bl	800bebe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f002 f86c 	bl	800c23a <SDMMC_CmdSendSCR>
 800a162:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	2b00      	cmp	r3, #0
 800a168:	d02a      	beq.n	800a1c0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	e083      	b.n	800a276 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00f      	beq.n	800a19c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6819      	ldr	r1, [r3, #0]
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	f107 0208 	add.w	r2, r7, #8
 800a188:	18d4      	adds	r4, r2, r3
 800a18a:	4608      	mov	r0, r1
 800a18c:	f001 fe1a 	bl	800bdc4 <SDIO_ReadFIFO>
 800a190:	4603      	mov	r3, r0
 800a192:	6023      	str	r3, [r4, #0]
      index++;
 800a194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a196:	3301      	adds	r3, #1
 800a198:	637b      	str	r3, [r7, #52]	; 0x34
 800a19a:	e006      	b.n	800a1aa <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d012      	beq.n	800a1d0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a1aa:	f7f9 fd5f 	bl	8003c6c <HAL_GetTick>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b8:	d102      	bne.n	800a1c0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a1ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1be:	e05a      	b.n	800a276 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0cf      	beq.n	800a16e <SD_FindSCR+0x96>
 800a1ce:	e000      	b.n	800a1d2 <SD_FindSCR+0xfa>
      break;
 800a1d0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2208      	movs	r2, #8
 800a1e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	e044      	b.n	800a276 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f2:	f003 0302 	and.w	r3, r3, #2
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d005      	beq.n	800a206 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2202      	movs	r2, #2
 800a200:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a202:	2302      	movs	r3, #2
 800a204:	e037      	b.n	800a276 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20c:	f003 0320 	and.w	r3, r3, #32
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2220      	movs	r2, #32
 800a21a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a21c:	2320      	movs	r3, #32
 800a21e:	e02a      	b.n	800a276 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f240 523a 	movw	r2, #1338	; 0x53a
 800a228:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	061a      	lsls	r2, r3, #24
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a236:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	0a1b      	lsrs	r3, r3, #8
 800a23c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a240:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	0e1b      	lsrs	r3, r3, #24
 800a246:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24a:	601a      	str	r2, [r3, #0]
    scr++;
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	3304      	adds	r3, #4
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	061a      	lsls	r2, r3, #24
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a25e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	0a1b      	lsrs	r3, r3, #8
 800a264:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a268:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	0e1b      	lsrs	r3, r3, #24
 800a26e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	373c      	adds	r7, #60	; 0x3c
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}

0800a27e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b082      	sub	sp, #8
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e076      	b.n	800a37e <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	d108      	bne.n	800a2aa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2a0:	d009      	beq.n	800a2b6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	61da      	str	r2, [r3, #28]
 800a2a8:	e005      	b.n	800a2b6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d106      	bne.n	800a2d6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7f9 fa09 	bl	80036e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	69db      	ldr	r3, [r3, #28]
 800a32c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33a:	ea42 0103 	orr.w	r1, r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a342:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	0c1a      	lsrs	r2, r3, #16
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f002 0204 	and.w	r2, r2, #4
 800a35c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69da      	ldr	r2, [r3, #28]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a36c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b088      	sub	sp, #32
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	603b      	str	r3, [r7, #0]
 800a392:	4613      	mov	r3, r2
 800a394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a396:	2300      	movs	r3, #0
 800a398:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d101      	bne.n	800a3a8 <HAL_SPI_Transmit+0x22>
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e12d      	b.n	800a604 <HAL_SPI_Transmit+0x27e>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3b0:	f7f9 fc5c 	bl	8003c6c <HAL_GetTick>
 800a3b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a3b6:	88fb      	ldrh	r3, [r7, #6]
 800a3b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d002      	beq.n	800a3cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3ca:	e116      	b.n	800a5fa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <HAL_SPI_Transmit+0x52>
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d102      	bne.n	800a3de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a3dc:	e10d      	b.n	800a5fa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2203      	movs	r2, #3
 800a3e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	88fa      	ldrh	r2, [r7, #6]
 800a3f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	88fa      	ldrh	r2, [r7, #6]
 800a3fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a424:	d10f      	bne.n	800a446 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a434:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a444:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a450:	2b40      	cmp	r3, #64	; 0x40
 800a452:	d007      	beq.n	800a464 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a462:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a46c:	d14f      	bne.n	800a50e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <HAL_SPI_Transmit+0xf6>
 800a476:	8afb      	ldrh	r3, [r7, #22]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d142      	bne.n	800a502 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a480:	881a      	ldrh	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	1c9a      	adds	r2, r3, #2
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a4a0:	e02f      	b.n	800a502 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f003 0302 	and.w	r3, r3, #2
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d112      	bne.n	800a4d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b4:	881a      	ldrh	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	1c9a      	adds	r2, r3, #2
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	86da      	strh	r2, [r3, #54]	; 0x36
 800a4d4:	e015      	b.n	800a502 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4d6:	f7f9 fbc9 	bl	8003c6c <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d803      	bhi.n	800a4ee <HAL_SPI_Transmit+0x168>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ec:	d102      	bne.n	800a4f4 <HAL_SPI_Transmit+0x16e>
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a500:	e07b      	b.n	800a5fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a506:	b29b      	uxth	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1ca      	bne.n	800a4a2 <HAL_SPI_Transmit+0x11c>
 800a50c:	e050      	b.n	800a5b0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <HAL_SPI_Transmit+0x196>
 800a516:	8afb      	ldrh	r3, [r7, #22]
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d144      	bne.n	800a5a6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	330c      	adds	r3, #12
 800a526:	7812      	ldrb	r2, [r2, #0]
 800a528:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a538:	b29b      	uxth	r3, r3
 800a53a:	3b01      	subs	r3, #1
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a542:	e030      	b.n	800a5a6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d113      	bne.n	800a57a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	330c      	adds	r3, #12
 800a55c:	7812      	ldrb	r2, [r2, #0]
 800a55e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a56e:	b29b      	uxth	r3, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	86da      	strh	r2, [r3, #54]	; 0x36
 800a578:	e015      	b.n	800a5a6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a57a:	f7f9 fb77 	bl	8003c6c <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d803      	bhi.n	800a592 <HAL_SPI_Transmit+0x20c>
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a590:	d102      	bne.n	800a598 <HAL_SPI_Transmit+0x212>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800a598:	2303      	movs	r3, #3
 800a59a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800a5a4:	e029      	b.n	800a5fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1c9      	bne.n	800a544 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a5b0:	69ba      	ldr	r2, [r7, #24]
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	68f8      	ldr	r0, [r7, #12]
 800a5b6:	f000 f8b1 	bl	800a71c <SPI_EndRxTxTransaction>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10a      	bne.n	800a5e4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	613b      	str	r3, [r7, #16]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	613b      	str	r3, [r7, #16]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	613b      	str	r3, [r7, #16]
 800a5e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	77fb      	strb	r3, [r7, #31]
 800a5f0:	e003      	b.n	800a5fa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a602:	7ffb      	ldrb	r3, [r7, #31]
}
 800a604:	4618      	mov	r0, r3
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b088      	sub	sp, #32
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	4613      	mov	r3, r2
 800a61a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a61c:	f7f9 fb26 	bl	8003c6c <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	1a9b      	subs	r3, r3, r2
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	4413      	add	r3, r2
 800a62a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a62c:	f7f9 fb1e 	bl	8003c6c <HAL_GetTick>
 800a630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a632:	4b39      	ldr	r3, [pc, #228]	; (800a718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	015b      	lsls	r3, r3, #5
 800a638:	0d1b      	lsrs	r3, r3, #20
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	fb02 f303 	mul.w	r3, r2, r3
 800a640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a642:	e054      	b.n	800a6ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d050      	beq.n	800a6ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a64c:	f7f9 fb0e 	bl	8003c6c <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	69fa      	ldr	r2, [r7, #28]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d902      	bls.n	800a662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d13d      	bne.n	800a6de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a67a:	d111      	bne.n	800a6a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a684:	d004      	beq.n	800a690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a68e:	d107      	bne.n	800a6a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a69e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a8:	d10f      	bne.n	800a6ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e017      	b.n	800a70e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4013      	ands	r3, r2
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	bf0c      	ite	eq
 800a6fe:	2301      	moveq	r3, #1
 800a700:	2300      	movne	r3, #0
 800a702:	b2db      	uxtb	r3, r3
 800a704:	461a      	mov	r2, r3
 800a706:	79fb      	ldrb	r3, [r7, #7]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d19b      	bne.n	800a644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20000010 	.word	0x20000010

0800a71c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af02      	add	r7, sp, #8
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2200      	movs	r2, #0
 800a730:	2180      	movs	r1, #128	; 0x80
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff ff6a 	bl	800a60c <SPI_WaitFlagStateUntilTimeout>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d007      	beq.n	800a74e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a742:	f043 0220 	orr.w	r2, r3, #32
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e000      	b.n	800a750 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e041      	b.n	800a7ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d106      	bne.n	800a784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7f8 fffe 	bl	8003780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	3304      	adds	r3, #4
 800a794:	4619      	mov	r1, r3
 800a796:	4610      	mov	r0, r2
 800a798:	f000 fb42 	bl	800ae20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b085      	sub	sp, #20
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d001      	beq.n	800a810 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e03c      	b.n	800a88a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2202      	movs	r2, #2
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a1d      	ldr	r2, [pc, #116]	; (800a894 <HAL_TIM_Base_Start+0x9c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d018      	beq.n	800a854 <HAL_TIM_Base_Start+0x5c>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a1c      	ldr	r2, [pc, #112]	; (800a898 <HAL_TIM_Base_Start+0xa0>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d013      	beq.n	800a854 <HAL_TIM_Base_Start+0x5c>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a834:	d00e      	beq.n	800a854 <HAL_TIM_Base_Start+0x5c>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a18      	ldr	r2, [pc, #96]	; (800a89c <HAL_TIM_Base_Start+0xa4>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d009      	beq.n	800a854 <HAL_TIM_Base_Start+0x5c>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a16      	ldr	r2, [pc, #88]	; (800a8a0 <HAL_TIM_Base_Start+0xa8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d004      	beq.n	800a854 <HAL_TIM_Base_Start+0x5c>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a15      	ldr	r2, [pc, #84]	; (800a8a4 <HAL_TIM_Base_Start+0xac>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d111      	bne.n	800a878 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f003 0307 	and.w	r3, r3, #7
 800a85e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b06      	cmp	r3, #6
 800a864:	d010      	beq.n	800a888 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f042 0201 	orr.w	r2, r2, #1
 800a874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a876:	e007      	b.n	800a888 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f042 0201 	orr.w	r2, r2, #1
 800a886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	bc80      	pop	{r7}
 800a892:	4770      	bx	lr
 800a894:	40012c00 	.word	0x40012c00
 800a898:	40013400 	.word	0x40013400
 800a89c:	40000400 	.word	0x40000400
 800a8a0:	40000800 	.word	0x40000800
 800a8a4:	40000c00 	.word	0x40000c00

0800a8a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6a1a      	ldr	r2, [r3, #32]
 800a8b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10f      	bne.n	800a8e0 <HAL_TIM_Base_Stop+0x38>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6a1a      	ldr	r2, [r3, #32]
 800a8c6:	f240 4344 	movw	r3, #1092	; 0x444
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d107      	bne.n	800a8e0 <HAL_TIM_Base_Stop+0x38>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0201 	bic.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bc80      	pop	{r7}
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b01      	cmp	r3, #1
 800a906:	d001      	beq.n	800a90c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e044      	b.n	800a996 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2202      	movs	r2, #2
 800a910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0201 	orr.w	r2, r2, #1
 800a922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a1d      	ldr	r2, [pc, #116]	; (800a9a0 <HAL_TIM_Base_Start_IT+0xac>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d018      	beq.n	800a960 <HAL_TIM_Base_Start_IT+0x6c>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1c      	ldr	r2, [pc, #112]	; (800a9a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d013      	beq.n	800a960 <HAL_TIM_Base_Start_IT+0x6c>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a940:	d00e      	beq.n	800a960 <HAL_TIM_Base_Start_IT+0x6c>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a18      	ldr	r2, [pc, #96]	; (800a9a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d009      	beq.n	800a960 <HAL_TIM_Base_Start_IT+0x6c>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a16      	ldr	r2, [pc, #88]	; (800a9ac <HAL_TIM_Base_Start_IT+0xb8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d004      	beq.n	800a960 <HAL_TIM_Base_Start_IT+0x6c>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a15      	ldr	r2, [pc, #84]	; (800a9b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d111      	bne.n	800a984 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b06      	cmp	r3, #6
 800a970:	d010      	beq.n	800a994 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f042 0201 	orr.w	r2, r2, #1
 800a980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a982:	e007      	b.n	800a994 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f042 0201 	orr.w	r2, r2, #1
 800a992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bc80      	pop	{r7}
 800a99e:	4770      	bx	lr
 800a9a0:	40012c00 	.word	0x40012c00
 800a9a4:	40013400 	.word	0x40013400
 800a9a8:	40000400 	.word	0x40000400
 800a9ac:	40000800 	.word	0x40000800
 800a9b0:	40000c00 	.word	0x40000c00

0800a9b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d122      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	f003 0302 	and.w	r3, r3, #2
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d11b      	bne.n	800aa10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f06f 0202 	mvn.w	r2, #2
 800a9e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d003      	beq.n	800a9fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f9f6 	bl	800ade8 <HAL_TIM_IC_CaptureCallback>
 800a9fc:	e005      	b.n	800aa0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f9e9 	bl	800add6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f9f8 	bl	800adfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d122      	bne.n	800aa64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d11b      	bne.n	800aa64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f06f 0204 	mvn.w	r2, #4
 800aa34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d003      	beq.n	800aa52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f9cc 	bl	800ade8 <HAL_TIM_IC_CaptureCallback>
 800aa50:	e005      	b.n	800aa5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f9bf 	bl	800add6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f9ce 	bl	800adfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	f003 0308 	and.w	r3, r3, #8
 800aa6e:	2b08      	cmp	r3, #8
 800aa70:	d122      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	f003 0308 	and.w	r3, r3, #8
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	d11b      	bne.n	800aab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f06f 0208 	mvn.w	r2, #8
 800aa88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2204      	movs	r2, #4
 800aa8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	f003 0303 	and.w	r3, r3, #3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f9a2 	bl	800ade8 <HAL_TIM_IC_CaptureCallback>
 800aaa4:	e005      	b.n	800aab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f995 	bl	800add6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f9a4 	bl	800adfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f003 0310 	and.w	r3, r3, #16
 800aac2:	2b10      	cmp	r3, #16
 800aac4:	d122      	bne.n	800ab0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	f003 0310 	and.w	r3, r3, #16
 800aad0:	2b10      	cmp	r3, #16
 800aad2:	d11b      	bne.n	800ab0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f06f 0210 	mvn.w	r2, #16
 800aadc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2208      	movs	r2, #8
 800aae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f978 	bl	800ade8 <HAL_TIM_IC_CaptureCallback>
 800aaf8:	e005      	b.n	800ab06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f96b 	bl	800add6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f97a 	bl	800adfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	f003 0301 	and.w	r3, r3, #1
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d10e      	bne.n	800ab38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	f003 0301 	and.w	r3, r3, #1
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d107      	bne.n	800ab38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f06f 0201 	mvn.w	r2, #1
 800ab30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f7f7 fdb6 	bl	80026a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab42:	2b80      	cmp	r3, #128	; 0x80
 800ab44:	d10e      	bne.n	800ab64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab50:	2b80      	cmp	r3, #128	; 0x80
 800ab52:	d107      	bne.n	800ab64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fb75 	bl	800b24e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6e:	2b40      	cmp	r3, #64	; 0x40
 800ab70:	d10e      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab7c:	2b40      	cmp	r3, #64	; 0x40
 800ab7e:	d107      	bne.n	800ab90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f93e 	bl	800ae0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f003 0320 	and.w	r3, r3, #32
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d10e      	bne.n	800abbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	f003 0320 	and.w	r3, r3, #32
 800aba8:	2b20      	cmp	r3, #32
 800abaa:	d107      	bne.n	800abbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f06f 0220 	mvn.w	r2, #32
 800abb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fb40 	bl	800b23c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800abbc:	bf00      	nop
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d101      	bne.n	800abe0 <HAL_TIM_ConfigClockSource+0x1c>
 800abdc:	2302      	movs	r3, #2
 800abde:	e0b4      	b.n	800ad4a <HAL_TIM_ConfigClockSource+0x186>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2202      	movs	r2, #2
 800abec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800abfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac18:	d03e      	beq.n	800ac98 <HAL_TIM_ConfigClockSource+0xd4>
 800ac1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac1e:	f200 8087 	bhi.w	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac26:	f000 8086 	beq.w	800ad36 <HAL_TIM_ConfigClockSource+0x172>
 800ac2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac2e:	d87f      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac30:	2b70      	cmp	r3, #112	; 0x70
 800ac32:	d01a      	beq.n	800ac6a <HAL_TIM_ConfigClockSource+0xa6>
 800ac34:	2b70      	cmp	r3, #112	; 0x70
 800ac36:	d87b      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac38:	2b60      	cmp	r3, #96	; 0x60
 800ac3a:	d050      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x11a>
 800ac3c:	2b60      	cmp	r3, #96	; 0x60
 800ac3e:	d877      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac40:	2b50      	cmp	r3, #80	; 0x50
 800ac42:	d03c      	beq.n	800acbe <HAL_TIM_ConfigClockSource+0xfa>
 800ac44:	2b50      	cmp	r3, #80	; 0x50
 800ac46:	d873      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac48:	2b40      	cmp	r3, #64	; 0x40
 800ac4a:	d058      	beq.n	800acfe <HAL_TIM_ConfigClockSource+0x13a>
 800ac4c:	2b40      	cmp	r3, #64	; 0x40
 800ac4e:	d86f      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac50:	2b30      	cmp	r3, #48	; 0x30
 800ac52:	d064      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x15a>
 800ac54:	2b30      	cmp	r3, #48	; 0x30
 800ac56:	d86b      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac58:	2b20      	cmp	r3, #32
 800ac5a:	d060      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x15a>
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d867      	bhi.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d05c      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x15a>
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d05a      	beq.n	800ad1e <HAL_TIM_ConfigClockSource+0x15a>
 800ac68:	e062      	b.n	800ad30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6818      	ldr	r0, [r3, #0]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	6899      	ldr	r1, [r3, #8]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	f000 fa53 	bl	800b124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	609a      	str	r2, [r3, #8]
      break;
 800ac96:	e04f      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6818      	ldr	r0, [r3, #0]
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	6899      	ldr	r1, [r3, #8]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f000 fa3c 	bl	800b124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689a      	ldr	r2, [r3, #8]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800acba:	609a      	str	r2, [r3, #8]
      break;
 800acbc:	e03c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6859      	ldr	r1, [r3, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	461a      	mov	r2, r3
 800accc:	f000 f9b3 	bl	800b036 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2150      	movs	r1, #80	; 0x50
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 fa0a 	bl	800b0f0 <TIM_ITRx_SetConfig>
      break;
 800acdc:	e02c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6859      	ldr	r1, [r3, #4]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	461a      	mov	r2, r3
 800acec:	f000 f9d1 	bl	800b092 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2160      	movs	r1, #96	; 0x60
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f9fa 	bl	800b0f0 <TIM_ITRx_SetConfig>
      break;
 800acfc:	e01c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	6859      	ldr	r1, [r3, #4]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	f000 f993 	bl	800b036 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2140      	movs	r1, #64	; 0x40
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 f9ea 	bl	800b0f0 <TIM_ITRx_SetConfig>
      break;
 800ad1c:	e00c      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f000 f9e1 	bl	800b0f0 <TIM_ITRx_SetConfig>
      break;
 800ad2e:	e003      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	73fb      	strb	r3, [r7, #15]
      break;
 800ad34:	e000      	b.n	800ad38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ad36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d101      	bne.n	800ad6a <HAL_TIM_SlaveConfigSynchro+0x18>
 800ad66:	2302      	movs	r3, #2
 800ad68:	e031      	b.n	800adce <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2202      	movs	r2, #2
 800ad76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f8c9 	bl	800af14 <TIM_SlaveTimer_SetConfig>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d009      	beq.n	800ad9c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e018      	b.n	800adce <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68da      	ldr	r2, [r3, #12]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adaa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800adba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800add6:	b480      	push	{r7}
 800add8:	b083      	sub	sp, #12
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adde:	bf00      	nop
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr

0800adfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae02:	bf00      	nop
 800ae04:	370c      	adds	r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bc80      	pop	{r7}
 800ae0a:	4770      	bx	lr

0800ae0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bc80      	pop	{r7}
 800ae1c:	4770      	bx	lr
	...

0800ae20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a33      	ldr	r2, [pc, #204]	; (800af00 <TIM_Base_SetConfig+0xe0>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d013      	beq.n	800ae60 <TIM_Base_SetConfig+0x40>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a32      	ldr	r2, [pc, #200]	; (800af04 <TIM_Base_SetConfig+0xe4>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d00f      	beq.n	800ae60 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae46:	d00b      	beq.n	800ae60 <TIM_Base_SetConfig+0x40>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a2f      	ldr	r2, [pc, #188]	; (800af08 <TIM_Base_SetConfig+0xe8>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d007      	beq.n	800ae60 <TIM_Base_SetConfig+0x40>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a2e      	ldr	r2, [pc, #184]	; (800af0c <TIM_Base_SetConfig+0xec>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d003      	beq.n	800ae60 <TIM_Base_SetConfig+0x40>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a2d      	ldr	r2, [pc, #180]	; (800af10 <TIM_Base_SetConfig+0xf0>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d108      	bne.n	800ae72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a22      	ldr	r2, [pc, #136]	; (800af00 <TIM_Base_SetConfig+0xe0>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d013      	beq.n	800aea2 <TIM_Base_SetConfig+0x82>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a21      	ldr	r2, [pc, #132]	; (800af04 <TIM_Base_SetConfig+0xe4>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00f      	beq.n	800aea2 <TIM_Base_SetConfig+0x82>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae88:	d00b      	beq.n	800aea2 <TIM_Base_SetConfig+0x82>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a1e      	ldr	r2, [pc, #120]	; (800af08 <TIM_Base_SetConfig+0xe8>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d007      	beq.n	800aea2 <TIM_Base_SetConfig+0x82>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a1d      	ldr	r2, [pc, #116]	; (800af0c <TIM_Base_SetConfig+0xec>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d003      	beq.n	800aea2 <TIM_Base_SetConfig+0x82>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a1c      	ldr	r2, [pc, #112]	; (800af10 <TIM_Base_SetConfig+0xf0>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d108      	bne.n	800aeb4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a09      	ldr	r2, [pc, #36]	; (800af00 <TIM_Base_SetConfig+0xe0>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d003      	beq.n	800aee8 <TIM_Base_SetConfig+0xc8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4a08      	ldr	r2, [pc, #32]	; (800af04 <TIM_Base_SetConfig+0xe4>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d103      	bne.n	800aef0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	691a      	ldr	r2, [r3, #16]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	615a      	str	r2, [r3, #20]
}
 800aef6:	bf00      	nop
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bc80      	pop	{r7}
 800aefe:	4770      	bx	lr
 800af00:	40012c00 	.word	0x40012c00
 800af04:	40013400 	.word	0x40013400
 800af08:	40000400 	.word	0x40000400
 800af0c:	40000800 	.word	0x40000800
 800af10:	40000c00 	.word	0x40000c00

0800af14 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af30:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	4313      	orrs	r3, r2
 800af3a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f023 0307 	bic.w	r3, r3, #7
 800af42:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	693a      	ldr	r2, [r7, #16]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	2b70      	cmp	r3, #112	; 0x70
 800af5c:	d01a      	beq.n	800af94 <TIM_SlaveTimer_SetConfig+0x80>
 800af5e:	2b70      	cmp	r3, #112	; 0x70
 800af60:	d860      	bhi.n	800b024 <TIM_SlaveTimer_SetConfig+0x110>
 800af62:	2b60      	cmp	r3, #96	; 0x60
 800af64:	d054      	beq.n	800b010 <TIM_SlaveTimer_SetConfig+0xfc>
 800af66:	2b60      	cmp	r3, #96	; 0x60
 800af68:	d85c      	bhi.n	800b024 <TIM_SlaveTimer_SetConfig+0x110>
 800af6a:	2b50      	cmp	r3, #80	; 0x50
 800af6c:	d046      	beq.n	800affc <TIM_SlaveTimer_SetConfig+0xe8>
 800af6e:	2b50      	cmp	r3, #80	; 0x50
 800af70:	d858      	bhi.n	800b024 <TIM_SlaveTimer_SetConfig+0x110>
 800af72:	2b40      	cmp	r3, #64	; 0x40
 800af74:	d019      	beq.n	800afaa <TIM_SlaveTimer_SetConfig+0x96>
 800af76:	2b40      	cmp	r3, #64	; 0x40
 800af78:	d854      	bhi.n	800b024 <TIM_SlaveTimer_SetConfig+0x110>
 800af7a:	2b30      	cmp	r3, #48	; 0x30
 800af7c:	d055      	beq.n	800b02a <TIM_SlaveTimer_SetConfig+0x116>
 800af7e:	2b30      	cmp	r3, #48	; 0x30
 800af80:	d850      	bhi.n	800b024 <TIM_SlaveTimer_SetConfig+0x110>
 800af82:	2b20      	cmp	r3, #32
 800af84:	d051      	beq.n	800b02a <TIM_SlaveTimer_SetConfig+0x116>
 800af86:	2b20      	cmp	r3, #32
 800af88:	d84c      	bhi.n	800b024 <TIM_SlaveTimer_SetConfig+0x110>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d04d      	beq.n	800b02a <TIM_SlaveTimer_SetConfig+0x116>
 800af8e:	2b10      	cmp	r3, #16
 800af90:	d04b      	beq.n	800b02a <TIM_SlaveTimer_SetConfig+0x116>
 800af92:	e047      	b.n	800b024 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6818      	ldr	r0, [r3, #0]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	68d9      	ldr	r1, [r3, #12]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	f000 f8be 	bl	800b124 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800afa8:	e040      	b.n	800b02c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b05      	cmp	r3, #5
 800afb0:	d101      	bne.n	800afb6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e03b      	b.n	800b02e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	6a1a      	ldr	r2, [r3, #32]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0201 	bic.w	r2, r2, #1
 800afcc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	699b      	ldr	r3, [r3, #24]
 800afd4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afdc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	621a      	str	r2, [r3, #32]
      break;
 800affa:	e017      	b.n	800b02c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6818      	ldr	r0, [r3, #0]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	6899      	ldr	r1, [r3, #8]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	461a      	mov	r2, r3
 800b00a:	f000 f814 	bl	800b036 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b00e:	e00d      	b.n	800b02c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	6899      	ldr	r1, [r3, #8]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	461a      	mov	r2, r3
 800b01e:	f000 f838 	bl	800b092 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b022:	e003      	b.n	800b02c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	75fb      	strb	r3, [r7, #23]
      break;
 800b028:	e000      	b.n	800b02c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800b02a:	bf00      	nop
  }

  return status;
 800b02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3718      	adds	r7, #24
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b036:	b480      	push	{r7}
 800b038:	b087      	sub	sp, #28
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	60f8      	str	r0, [r7, #12]
 800b03e:	60b9      	str	r1, [r7, #8]
 800b040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6a1b      	ldr	r3, [r3, #32]
 800b04c:	f023 0201 	bic.w	r2, r3, #1
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	4313      	orrs	r3, r2
 800b06a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f023 030a 	bic.w	r3, r3, #10
 800b072:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b074:	697a      	ldr	r2, [r7, #20]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	4313      	orrs	r3, r2
 800b07a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	621a      	str	r2, [r3, #32]
}
 800b088:	bf00      	nop
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bc80      	pop	{r7}
 800b090:	4770      	bx	lr

0800b092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b092:	b480      	push	{r7}
 800b094:	b087      	sub	sp, #28
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	f023 0210 	bic.w	r2, r3, #16
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b0bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	031b      	lsls	r3, r3, #12
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	011b      	lsls	r3, r3, #4
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	693a      	ldr	r2, [r7, #16]
 800b0de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	621a      	str	r2, [r3, #32]
}
 800b0e6:	bf00      	nop
 800b0e8:	371c      	adds	r7, #28
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bc80      	pop	{r7}
 800b0ee:	4770      	bx	lr

0800b0f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b106:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	f043 0307 	orr.w	r3, r3, #7
 800b112:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	609a      	str	r2, [r3, #8]
}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	bc80      	pop	{r7}
 800b122:	4770      	bx	lr

0800b124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b13e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	021a      	lsls	r2, r3, #8
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	431a      	orrs	r2, r3
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	4313      	orrs	r3, r2
 800b150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	697a      	ldr	r2, [r7, #20]
 800b156:	609a      	str	r2, [r3, #8]
}
 800b158:	bf00      	nop
 800b15a:	371c      	adds	r7, #28
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bc80      	pop	{r7}
 800b160:	4770      	bx	lr
	...

0800b164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b174:	2b01      	cmp	r3, #1
 800b176:	d101      	bne.n	800b17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b178:	2302      	movs	r3, #2
 800b17a:	e050      	b.n	800b21e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4a1b      	ldr	r2, [pc, #108]	; (800b228 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d018      	beq.n	800b1f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	4a19      	ldr	r2, [pc, #100]	; (800b22c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d013      	beq.n	800b1f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d2:	d00e      	beq.n	800b1f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a15      	ldr	r2, [pc, #84]	; (800b230 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d009      	beq.n	800b1f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a14      	ldr	r2, [pc, #80]	; (800b234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d004      	beq.n	800b1f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a12      	ldr	r2, [pc, #72]	; (800b238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d10c      	bne.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	4313      	orrs	r3, r2
 800b202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	bc80      	pop	{r7}
 800b226:	4770      	bx	lr
 800b228:	40012c00 	.word	0x40012c00
 800b22c:	40013400 	.word	0x40013400
 800b230:	40000400 	.word	0x40000400
 800b234:	40000800 	.word	0x40000800
 800b238:	40000c00 	.word	0x40000c00

0800b23c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b083      	sub	sp, #12
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b244:	bf00      	nop
 800b246:	370c      	adds	r7, #12
 800b248:	46bd      	mov	sp, r7
 800b24a:	bc80      	pop	{r7}
 800b24c:	4770      	bx	lr

0800b24e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bc80      	pop	{r7}
 800b25e:	4770      	bx	lr

0800b260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e042      	b.n	800b2f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7f8 face 	bl	8003828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2224      	movs	r2, #36	; 0x24
 800b290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68da      	ldr	r2, [r3, #12]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 fcd5 	bl	800bc54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b2b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	695a      	ldr	r2, [r3, #20]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68da      	ldr	r2, [r3, #12]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2220      	movs	r2, #32
 800b2ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	4613      	mov	r3, r2
 800b30c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b20      	cmp	r3, #32
 800b318:	d112      	bne.n	800b340 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <HAL_UART_Receive_IT+0x26>
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d101      	bne.n	800b32a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e00b      	b.n	800b342 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b330:	88fb      	ldrh	r3, [r7, #6]
 800b332:	461a      	mov	r2, r3
 800b334:	68b9      	ldr	r1, [r7, #8]
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f000 fab7 	bl	800b8aa <UART_Start_Receive_IT>
 800b33c:	4603      	mov	r3, r0
 800b33e:	e000      	b.n	800b342 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b340:	2302      	movs	r3, #2
  }
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
	...

0800b34c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b0ba      	sub	sp, #232	; 0xe8
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b372:	2300      	movs	r3, #0
 800b374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b378:	2300      	movs	r3, #0
 800b37a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b382:	f003 030f 	and.w	r3, r3, #15
 800b386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b38a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10f      	bne.n	800b3b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b396:	f003 0320 	and.w	r3, r3, #32
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d009      	beq.n	800b3b2 <HAL_UART_IRQHandler+0x66>
 800b39e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3a2:	f003 0320 	and.w	r3, r3, #32
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fb93 	bl	800bad6 <UART_Receive_IT>
      return;
 800b3b0:	e25b      	b.n	800b86a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b3b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f000 80de 	beq.w	800b578 <HAL_UART_IRQHandler+0x22c>
 800b3bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3c0:	f003 0301 	and.w	r3, r3, #1
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 80d1 	beq.w	800b578 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3da:	f003 0301 	and.w	r3, r3, #1
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00b      	beq.n	800b3fa <HAL_UART_IRQHandler+0xae>
 800b3e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d005      	beq.n	800b3fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f2:	f043 0201 	orr.w	r2, r3, #1
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3fe:	f003 0304 	and.w	r3, r3, #4
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00b      	beq.n	800b41e <HAL_UART_IRQHandler+0xd2>
 800b406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d005      	beq.n	800b41e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b416:	f043 0202 	orr.w	r2, r3, #2
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b41e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b422:	f003 0302 	and.w	r3, r3, #2
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00b      	beq.n	800b442 <HAL_UART_IRQHandler+0xf6>
 800b42a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b42e:	f003 0301 	and.w	r3, r3, #1
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b43a:	f043 0204 	orr.w	r2, r3, #4
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b446:	f003 0308 	and.w	r3, r3, #8
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d011      	beq.n	800b472 <HAL_UART_IRQHandler+0x126>
 800b44e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b452:	f003 0320 	and.w	r3, r3, #32
 800b456:	2b00      	cmp	r3, #0
 800b458:	d105      	bne.n	800b466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d005      	beq.n	800b472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46a:	f043 0208 	orr.w	r2, r3, #8
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 81f2 	beq.w	800b860 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b480:	f003 0320 	and.w	r3, r3, #32
 800b484:	2b00      	cmp	r3, #0
 800b486:	d008      	beq.n	800b49a <HAL_UART_IRQHandler+0x14e>
 800b488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b48c:	f003 0320 	and.w	r3, r3, #32
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fb1e 	bl	800bad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	bf14      	ite	ne
 800b4a8:	2301      	movne	r3, #1
 800b4aa:	2300      	moveq	r3, #0
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b6:	f003 0308 	and.w	r3, r3, #8
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <HAL_UART_IRQHandler+0x17a>
 800b4be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d04f      	beq.n	800b566 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fa28 	bl	800b91c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d041      	beq.n	800b55e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3314      	adds	r3, #20
 800b4e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3314      	adds	r3, #20
 800b502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b506:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b50a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1d9      	bne.n	800b4da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d013      	beq.n	800b556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b532:	4a7e      	ldr	r2, [pc, #504]	; (800b72c <HAL_UART_IRQHandler+0x3e0>)
 800b534:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7f9 fb70 	bl	8004c20 <HAL_DMA_Abort_IT>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d016      	beq.n	800b574 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b554:	e00e      	b.n	800b574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f993 	bl	800b882 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b55c:	e00a      	b.n	800b574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f98f 	bl	800b882 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b564:	e006      	b.n	800b574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f98b 	bl	800b882 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b572:	e175      	b.n	800b860 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b574:	bf00      	nop
    return;
 800b576:	e173      	b.n	800b860 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	f040 814f 	bne.w	800b820 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b586:	f003 0310 	and.w	r3, r3, #16
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 8148 	beq.w	800b820 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b594:	f003 0310 	and.w	r3, r3, #16
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 8141 	beq.w	800b820 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60bb      	str	r3, [r7, #8]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60bb      	str	r3, [r7, #8]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	60bb      	str	r3, [r7, #8]
 800b5b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	695b      	ldr	r3, [r3, #20]
 800b5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f000 80b6 	beq.w	800b730 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	f000 8145 	beq.w	800b864 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	f080 813e 	bcs.w	800b864 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f4:	699b      	ldr	r3, [r3, #24]
 800b5f6:	2b20      	cmp	r3, #32
 800b5f8:	f000 8088 	beq.w	800b70c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	330c      	adds	r3, #12
 800b602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b60a:	e853 3f00 	ldrex	r3, [r3]
 800b60e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b612:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b61a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	330c      	adds	r3, #12
 800b624:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b628:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b62c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b630:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b634:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b638:	e841 2300 	strex	r3, r2, [r1]
 800b63c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1d9      	bne.n	800b5fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	3314      	adds	r3, #20
 800b64e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b652:	e853 3f00 	ldrex	r3, [r3]
 800b656:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b65a:	f023 0301 	bic.w	r3, r3, #1
 800b65e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3314      	adds	r3, #20
 800b668:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b66c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b670:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b672:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b674:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b678:	e841 2300 	strex	r3, r2, [r1]
 800b67c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b67e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1e1      	bne.n	800b648 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	3314      	adds	r3, #20
 800b68a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b68e:	e853 3f00 	ldrex	r3, [r3]
 800b692:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b69a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3314      	adds	r3, #20
 800b6a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b6a8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b6aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b6ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b6b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e3      	bne.n	800b684 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	330c      	adds	r3, #12
 800b6d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d4:	e853 3f00 	ldrex	r3, [r3]
 800b6d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6dc:	f023 0310 	bic.w	r3, r3, #16
 800b6e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	330c      	adds	r3, #12
 800b6ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b6ee:	65ba      	str	r2, [r7, #88]	; 0x58
 800b6f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6f6:	e841 2300 	strex	r3, r2, [r1]
 800b6fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1e3      	bne.n	800b6ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b706:	4618      	mov	r0, r3
 800b708:	f7f9 fa4e 	bl	8004ba8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	b29b      	uxth	r3, r3
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f8b6 	bl	800b894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b728:	e09c      	b.n	800b864 <HAL_UART_IRQHandler+0x518>
 800b72a:	bf00      	nop
 800b72c:	0800b9e1 	.word	0x0800b9e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b738:	b29b      	uxth	r3, r3
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b744:	b29b      	uxth	r3, r3
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 808e 	beq.w	800b868 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b74c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 8089 	beq.w	800b868 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	330c      	adds	r3, #12
 800b75c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b760:	e853 3f00 	ldrex	r3, [r3]
 800b764:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b76c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	330c      	adds	r3, #12
 800b776:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b77a:	647a      	str	r2, [r7, #68]	; 0x44
 800b77c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b782:	e841 2300 	strex	r3, r2, [r1]
 800b786:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1e3      	bne.n	800b756 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3314      	adds	r3, #20
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	e853 3f00 	ldrex	r3, [r3]
 800b79c:	623b      	str	r3, [r7, #32]
   return(result);
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	f023 0301 	bic.w	r3, r3, #1
 800b7a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	3314      	adds	r3, #20
 800b7ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b7b2:	633a      	str	r2, [r7, #48]	; 0x30
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ba:	e841 2300 	strex	r3, r2, [r1]
 800b7be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1e3      	bne.n	800b78e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2220      	movs	r2, #32
 800b7ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	330c      	adds	r3, #12
 800b7da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	e853 3f00 	ldrex	r3, [r3]
 800b7e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 0310 	bic.w	r3, r3, #16
 800b7ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	330c      	adds	r3, #12
 800b7f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b7f8:	61fa      	str	r2, [r7, #28]
 800b7fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	69b9      	ldr	r1, [r7, #24]
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	617b      	str	r3, [r7, #20]
   return(result);
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e3      	bne.n	800b7d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b816:	4619      	mov	r1, r3
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f83b 	bl	800b894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b81e:	e023      	b.n	800b868 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d009      	beq.n	800b840 <HAL_UART_IRQHandler+0x4f4>
 800b82c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f8e5 	bl	800ba08 <UART_Transmit_IT>
    return;
 800b83e:	e014      	b.n	800b86a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00e      	beq.n	800b86a <HAL_UART_IRQHandler+0x51e>
 800b84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b854:	2b00      	cmp	r3, #0
 800b856:	d008      	beq.n	800b86a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f924 	bl	800baa6 <UART_EndTransmit_IT>
    return;
 800b85e:	e004      	b.n	800b86a <HAL_UART_IRQHandler+0x51e>
    return;
 800b860:	bf00      	nop
 800b862:	e002      	b.n	800b86a <HAL_UART_IRQHandler+0x51e>
      return;
 800b864:	bf00      	nop
 800b866:	e000      	b.n	800b86a <HAL_UART_IRQHandler+0x51e>
      return;
 800b868:	bf00      	nop
  }
}
 800b86a:	37e8      	adds	r7, #232	; 0xe8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b878:	bf00      	nop
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bc80      	pop	{r7}
 800b880:	4770      	bx	lr

0800b882 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b88a:	bf00      	nop
 800b88c:	370c      	adds	r7, #12
 800b88e:	46bd      	mov	sp, r7
 800b890:	bc80      	pop	{r7}
 800b892:	4770      	bx	lr

0800b894 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bc80      	pop	{r7}
 800b8a8:	4770      	bx	lr

0800b8aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	60f8      	str	r0, [r7, #12]
 800b8b2:	60b9      	str	r1, [r7, #8]
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	88fa      	ldrh	r2, [r7, #6]
 800b8c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	88fa      	ldrh	r2, [r7, #6]
 800b8c8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2222      	movs	r2, #34	; 0x22
 800b8d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d007      	beq.n	800b8f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	695a      	ldr	r2, [r3, #20]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f042 0201 	orr.w	r2, r2, #1
 800b8fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68da      	ldr	r2, [r3, #12]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f042 0220 	orr.w	r2, r2, #32
 800b90e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	bc80      	pop	{r7}
 800b91a:	4770      	bx	lr

0800b91c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b095      	sub	sp, #84	; 0x54
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	330c      	adds	r3, #12
 800b92a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b93a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	330c      	adds	r3, #12
 800b942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b944:	643a      	str	r2, [r7, #64]	; 0x40
 800b946:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b94a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e5      	bne.n	800b924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3314      	adds	r3, #20
 800b95e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	61fb      	str	r3, [r7, #28]
   return(result);
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f023 0301 	bic.w	r3, r3, #1
 800b96e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3314      	adds	r3, #20
 800b976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b978:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b97a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e5      	bne.n	800b958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b990:	2b01      	cmp	r3, #1
 800b992:	d119      	bne.n	800b9c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	330c      	adds	r3, #12
 800b99a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f023 0310 	bic.w	r3, r3, #16
 800b9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	330c      	adds	r3, #12
 800b9b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9b4:	61ba      	str	r2, [r7, #24]
 800b9b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	6979      	ldr	r1, [r7, #20]
 800b9ba:	69ba      	ldr	r2, [r7, #24]
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e5      	bne.n	800b994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b9d6:	bf00      	nop
 800b9d8:	3754      	adds	r7, #84	; 0x54
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bc80      	pop	{r7}
 800b9de:	4770      	bx	lr

0800b9e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7ff ff41 	bl	800b882 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba00:	bf00      	nop
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b21      	cmp	r3, #33	; 0x21
 800ba1a:	d13e      	bne.n	800ba9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba24:	d114      	bne.n	800ba50 <UART_Transmit_IT+0x48>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d110      	bne.n	800ba50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	461a      	mov	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	1c9a      	adds	r2, r3, #2
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	621a      	str	r2, [r3, #32]
 800ba4e:	e008      	b.n	800ba62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a1b      	ldr	r3, [r3, #32]
 800ba54:	1c59      	adds	r1, r3, #1
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6211      	str	r1, [r2, #32]
 800ba5a:	781a      	ldrb	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	4619      	mov	r1, r3
 800ba70:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d10f      	bne.n	800ba96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	e000      	b.n	800ba9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba9a:	2302      	movs	r3, #2
  }
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bc80      	pop	{r7}
 800baa4:	4770      	bx	lr

0800baa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68da      	ldr	r2, [r3, #12]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800babc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2220      	movs	r2, #32
 800bac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff fed2 	bl	800b870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b08c      	sub	sp, #48	; 0x30
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b22      	cmp	r3, #34	; 0x22
 800bae8:	f040 80ae 	bne.w	800bc48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf4:	d117      	bne.n	800bb26 <UART_Receive_IT+0x50>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d113      	bne.n	800bb26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb06:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1e:	1c9a      	adds	r2, r3, #2
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	629a      	str	r2, [r3, #40]	; 0x28
 800bb24:	e026      	b.n	800bb74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb38:	d007      	beq.n	800bb4a <UART_Receive_IT+0x74>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10a      	bne.n	800bb58 <UART_Receive_IT+0x82>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	b2da      	uxtb	r2, r3
 800bb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb54:	701a      	strb	r2, [r3, #0]
 800bb56:	e008      	b.n	800bb6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb64:	b2da      	uxtb	r2, r3
 800bb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	4619      	mov	r1, r3
 800bb82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d15d      	bne.n	800bc44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0220 	bic.w	r2, r2, #32
 800bb96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	695a      	ldr	r2, [r3, #20]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 0201 	bic.w	r2, r2, #1
 800bbb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d135      	bne.n	800bc3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	330c      	adds	r3, #12
 800bbda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	e853 3f00 	ldrex	r3, [r3]
 800bbe2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f023 0310 	bic.w	r3, r3, #16
 800bbea:	627b      	str	r3, [r7, #36]	; 0x24
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	330c      	adds	r3, #12
 800bbf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbf4:	623a      	str	r2, [r7, #32]
 800bbf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf8:	69f9      	ldr	r1, [r7, #28]
 800bbfa:	6a3a      	ldr	r2, [r7, #32]
 800bbfc:	e841 2300 	strex	r3, r2, [r1]
 800bc00:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1e5      	bne.n	800bbd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 0310 	and.w	r3, r3, #16
 800bc12:	2b10      	cmp	r3, #16
 800bc14:	d10a      	bne.n	800bc2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc16:	2300      	movs	r3, #0
 800bc18:	60fb      	str	r3, [r7, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	60fb      	str	r3, [r7, #12]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc30:	4619      	mov	r1, r3
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f7ff fe2e 	bl	800b894 <HAL_UARTEx_RxEventCallback>
 800bc38:	e002      	b.n	800bc40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7f6 fdf6 	bl	800282c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e002      	b.n	800bc4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	e000      	b.n	800bc4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bc48:	2302      	movs	r3, #2
  }
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3730      	adds	r7, #48	; 0x30
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	430a      	orrs	r2, r1
 800bc70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	689a      	ldr	r2, [r3, #8]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bc8e:	f023 030c 	bic.w	r3, r3, #12
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6812      	ldr	r2, [r2, #0]
 800bc96:	68b9      	ldr	r1, [r7, #8]
 800bc98:	430b      	orrs	r3, r1
 800bc9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	699a      	ldr	r2, [r3, #24]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a2c      	ldr	r2, [pc, #176]	; (800bd68 <UART_SetConfig+0x114>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d103      	bne.n	800bcc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bcbc:	f7fc ff94 	bl	8008be8 <HAL_RCC_GetPCLK2Freq>
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	e002      	b.n	800bcca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bcc4:	f7fc ff7c 	bl	8008bc0 <HAL_RCC_GetPCLK1Freq>
 800bcc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009a      	lsls	r2, r3, #2
 800bcd4:	441a      	add	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce0:	4a22      	ldr	r2, [pc, #136]	; (800bd6c <UART_SetConfig+0x118>)
 800bce2:	fba2 2303 	umull	r2, r3, r2, r3
 800bce6:	095b      	lsrs	r3, r3, #5
 800bce8:	0119      	lsls	r1, r3, #4
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	4613      	mov	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	4413      	add	r3, r2
 800bcf2:	009a      	lsls	r2, r3, #2
 800bcf4:	441a      	add	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd00:	4b1a      	ldr	r3, [pc, #104]	; (800bd6c <UART_SetConfig+0x118>)
 800bd02:	fba3 0302 	umull	r0, r3, r3, r2
 800bd06:	095b      	lsrs	r3, r3, #5
 800bd08:	2064      	movs	r0, #100	; 0x64
 800bd0a:	fb00 f303 	mul.w	r3, r0, r3
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	011b      	lsls	r3, r3, #4
 800bd12:	3332      	adds	r3, #50	; 0x32
 800bd14:	4a15      	ldr	r2, [pc, #84]	; (800bd6c <UART_SetConfig+0x118>)
 800bd16:	fba2 2303 	umull	r2, r3, r2, r3
 800bd1a:	095b      	lsrs	r3, r3, #5
 800bd1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd20:	4419      	add	r1, r3
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	4613      	mov	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	009a      	lsls	r2, r3, #2
 800bd2c:	441a      	add	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	fbb2 f2f3 	udiv	r2, r2, r3
 800bd38:	4b0c      	ldr	r3, [pc, #48]	; (800bd6c <UART_SetConfig+0x118>)
 800bd3a:	fba3 0302 	umull	r0, r3, r3, r2
 800bd3e:	095b      	lsrs	r3, r3, #5
 800bd40:	2064      	movs	r0, #100	; 0x64
 800bd42:	fb00 f303 	mul.w	r3, r0, r3
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	011b      	lsls	r3, r3, #4
 800bd4a:	3332      	adds	r3, #50	; 0x32
 800bd4c:	4a07      	ldr	r2, [pc, #28]	; (800bd6c <UART_SetConfig+0x118>)
 800bd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd52:	095b      	lsrs	r3, r3, #5
 800bd54:	f003 020f 	and.w	r2, r3, #15
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	440a      	add	r2, r1
 800bd5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bd60:	bf00      	nop
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	40013800 	.word	0x40013800
 800bd6c:	51eb851f 	.word	0x51eb851f

0800bd70 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800bd70:	b084      	sub	sp, #16
 800bd72:	b480      	push	{r7}
 800bd74:	b085      	sub	sp, #20
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	f107 001c 	add.w	r0, r7, #28
 800bd7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bd86:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bd88:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bd8a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bd8e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bd92:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bd96:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bd9a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800bdaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	431a      	orrs	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bc80      	pop	{r7}
 800bdc0:	b004      	add	sp, #16
 800bdc2:	4770      	bx	lr

0800bdc4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bc80      	pop	{r7}
 800bdda:	4770      	bx	lr

0800bddc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	370c      	adds	r7, #12
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bc80      	pop	{r7}
 800bdfa:	4770      	bx	lr

0800bdfc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2203      	movs	r2, #3
 800be08:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	bc80      	pop	{r7}
 800be14:	4770      	bx	lr

0800be16 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800be16:	b480      	push	{r7}
 800be18:	b083      	sub	sp, #12
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0303 	and.w	r3, r3, #3
}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800be4e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800be54:	431a      	orrs	r2, r3
                       Command->CPSM);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800be5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	4313      	orrs	r3, r2
 800be60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800be6a:	f023 030f 	bic.w	r3, r3, #15
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	431a      	orrs	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bc80      	pop	{r7}
 800be80:	4770      	bx	lr

0800be82 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	b2db      	uxtb	r3, r3
}
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	bc80      	pop	{r7}
 800be98:	4770      	bx	lr

0800be9a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b085      	sub	sp, #20
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	3314      	adds	r3, #20
 800bea8:	461a      	mov	r2, r3
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	4413      	add	r3, r2
 800beae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
}  
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	bc80      	pop	{r7}
 800bebc:	4770      	bx	lr

0800bebe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b085      	sub	sp, #20
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
 800bec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bee4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800beea:	431a      	orrs	r2, r3
                       Data->DPSM);
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bef0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	431a      	orrs	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0

}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bc80      	pop	{r7}
 800bf12:	4770      	bx	lr

0800bf14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bf22:	2310      	movs	r3, #16
 800bf24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf26:	2340      	movs	r3, #64	; 0x40
 800bf28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf34:	f107 0308 	add.w	r3, r7, #8
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f7ff ff78 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800bf40:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf44:	2110      	movs	r1, #16
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa18 	bl	800c37c <SDMMC_GetCmdResp1>
 800bf4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf4e:	69fb      	ldr	r3, [r7, #28]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bf66:	2311      	movs	r3, #17
 800bf68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bf72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bf78:	f107 0308 	add.w	r3, r7, #8
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff ff56 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bf84:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf88:	2111      	movs	r1, #17
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 f9f6 	bl	800c37c <SDMMC_GetCmdResp1>
 800bf90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf92:	69fb      	ldr	r3, [r7, #28]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3720      	adds	r7, #32
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bfaa:	2312      	movs	r3, #18
 800bfac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bfae:	2340      	movs	r3, #64	; 0x40
 800bfb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bfb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff ff34 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bfc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfcc:	2112      	movs	r1, #18
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f9d4 	bl	800c37c <SDMMC_GetCmdResp1>
 800bfd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd6:	69fb      	ldr	r3, [r7, #28]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3720      	adds	r7, #32
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bfee:	2318      	movs	r3, #24
 800bff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bff2:	2340      	movs	r3, #64	; 0x40
 800bff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bff6:	2300      	movs	r3, #0
 800bff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c000:	f107 0308 	add.w	r3, r7, #8
 800c004:	4619      	mov	r1, r3
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f7ff ff12 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c00c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c010:	2118      	movs	r1, #24
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f9b2 	bl	800c37c <SDMMC_GetCmdResp1>
 800c018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c01a:	69fb      	ldr	r3, [r7, #28]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c032:	2319      	movs	r3, #25
 800c034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c036:	2340      	movs	r3, #64	; 0x40
 800c038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c03a:	2300      	movs	r3, #0
 800c03c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c042:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c044:	f107 0308 	add.w	r3, r7, #8
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff fef0 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c050:	f241 3288 	movw	r2, #5000	; 0x1388
 800c054:	2119      	movs	r1, #25
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f990 	bl	800c37c <SDMMC_GetCmdResp1>
 800c05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c05e:	69fb      	ldr	r3, [r7, #28]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3720      	adds	r7, #32
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b088      	sub	sp, #32
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c074:	230c      	movs	r3, #12
 800c076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c078:	2340      	movs	r3, #64	; 0x40
 800c07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c07c:	2300      	movs	r3, #0
 800c07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c084:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c086:	f107 0308 	add.w	r3, r7, #8
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7ff fecf 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c092:	4a05      	ldr	r2, [pc, #20]	; (800c0a8 <SDMMC_CmdStopTransfer+0x40>)
 800c094:	210c      	movs	r1, #12
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f970 	bl	800c37c <SDMMC_GetCmdResp1>
 800c09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c09e:	69fb      	ldr	r3, [r7, #28]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3720      	adds	r7, #32
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	05f5e100 	.word	0x05f5e100

0800c0ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b08a      	sub	sp, #40	; 0x28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c0bc:	2307      	movs	r3, #7
 800c0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c0c0:	2340      	movs	r3, #64	; 0x40
 800c0c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c0ce:	f107 0310 	add.w	r3, r7, #16
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff feab 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c0da:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0de:	2107      	movs	r1, #7
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 f94b 	bl	800c37c <SDMMC_GetCmdResp1>
 800c0e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3728      	adds	r7, #40	; 0x28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b088      	sub	sp, #32
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c102:	2300      	movs	r3, #0
 800c104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c10e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c110:	f107 0308 	add.w	r3, r7, #8
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fe8a 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 fb63 	bl	800c7e8 <SDMMC_GetCmdError>
 800c122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c124:	69fb      	ldr	r3, [r7, #28]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3720      	adds	r7, #32
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b088      	sub	sp, #32
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c136:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c13c:	2308      	movs	r3, #8
 800c13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c140:	2340      	movs	r3, #64	; 0x40
 800c142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c144:	2300      	movs	r3, #0
 800c146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c14c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c14e:	f107 0308 	add.w	r3, r7, #8
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f7ff fe6b 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 faf6 	bl	800c74c <SDMMC_GetCmdResp7>
 800c160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c162:	69fb      	ldr	r3, [r7, #28]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b088      	sub	sp, #32
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c17a:	2337      	movs	r3, #55	; 0x37
 800c17c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c17e:	2340      	movs	r3, #64	; 0x40
 800c180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c182:	2300      	movs	r3, #0
 800c184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c18a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c18c:	f107 0308 	add.w	r3, r7, #8
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7ff fe4c 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c198:	f241 3288 	movw	r2, #5000	; 0x1388
 800c19c:	2137      	movs	r1, #55	; 0x37
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f8ec 	bl	800c37c <SDMMC_GetCmdResp1>
 800c1a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3720      	adds	r7, #32
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c1c6:	2329      	movs	r3, #41	; 0x29
 800c1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c1ca:	2340      	movs	r3, #64	; 0x40
 800c1cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1d8:	f107 0308 	add.w	r3, r7, #8
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7ff fe26 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 f9ff 	bl	800c5e8 <SDMMC_GetCmdResp3>
 800c1ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1ec:	69fb      	ldr	r3, [r7, #28]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3720      	adds	r7, #32
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b088      	sub	sp, #32
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c204:	2306      	movs	r3, #6
 800c206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c208:	2340      	movs	r3, #64	; 0x40
 800c20a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c20c:	2300      	movs	r3, #0
 800c20e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c216:	f107 0308 	add.w	r3, r7, #8
 800c21a:	4619      	mov	r1, r3
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff fe07 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c222:	f241 3288 	movw	r2, #5000	; 0x1388
 800c226:	2106      	movs	r1, #6
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f8a7 	bl	800c37c <SDMMC_GetCmdResp1>
 800c22e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c230:	69fb      	ldr	r3, [r7, #28]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3720      	adds	r7, #32
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b088      	sub	sp, #32
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c246:	2333      	movs	r3, #51	; 0x33
 800c248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c24a:	2340      	movs	r3, #64	; 0x40
 800c24c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c258:	f107 0308 	add.w	r3, r7, #8
 800c25c:	4619      	mov	r1, r3
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7ff fde6 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c264:	f241 3288 	movw	r2, #5000	; 0x1388
 800c268:	2133      	movs	r1, #51	; 0x33
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f886 	bl	800c37c <SDMMC_GetCmdResp1>
 800c270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c272:	69fb      	ldr	r3, [r7, #28]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3720      	adds	r7, #32
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c284:	2300      	movs	r3, #0
 800c286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c288:	2302      	movs	r3, #2
 800c28a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c28c:	23c0      	movs	r3, #192	; 0xc0
 800c28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c298:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c29a:	f107 0308 	add.w	r3, r7, #8
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f7ff fdc5 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 f956 	bl	800c558 <SDMMC_GetCmdResp2>
 800c2ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ae:	69fb      	ldr	r3, [r7, #28]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3720      	adds	r7, #32
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c2c6:	2309      	movs	r3, #9
 800c2c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c2ca:	23c0      	movs	r3, #192	; 0xc0
 800c2cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2d8:	f107 0308 	add.w	r3, r7, #8
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fda6 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f937 	bl	800c558 <SDMMC_GetCmdResp2>
 800c2ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ec:	69fb      	ldr	r3, [r7, #28]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3720      	adds	r7, #32
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b088      	sub	sp, #32
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
 800c2fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c300:	2300      	movs	r3, #0
 800c302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c304:	2303      	movs	r3, #3
 800c306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c308:	2340      	movs	r3, #64	; 0x40
 800c30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c30c:	2300      	movs	r3, #0
 800c30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c316:	f107 0308 	add.w	r3, r7, #8
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7ff fd87 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c322:	683a      	ldr	r2, [r7, #0]
 800c324:	2103      	movs	r1, #3
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f99a 	bl	800c660 <SDMMC_GetCmdResp6>
 800c32c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c32e:	69fb      	ldr	r3, [r7, #28]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3720      	adds	r7, #32
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}

0800c338 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b088      	sub	sp, #32
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c346:	230d      	movs	r3, #13
 800c348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c34a:	2340      	movs	r3, #64	; 0x40
 800c34c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c34e:	2300      	movs	r3, #0
 800c350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c358:	f107 0308 	add.w	r3, r7, #8
 800c35c:	4619      	mov	r1, r3
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7ff fd66 	bl	800be30 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c364:	f241 3288 	movw	r2, #5000	; 0x1388
 800c368:	210d      	movs	r1, #13
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f806 	bl	800c37c <SDMMC_GetCmdResp1>
 800c370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c372:	69fb      	ldr	r3, [r7, #28]
}
 800c374:	4618      	mov	r0, r3
 800c376:	3720      	adds	r7, #32
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b088      	sub	sp, #32
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	460b      	mov	r3, r1
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c38a:	4b70      	ldr	r3, [pc, #448]	; (800c54c <SDMMC_GetCmdResp1+0x1d0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a70      	ldr	r2, [pc, #448]	; (800c550 <SDMMC_GetCmdResp1+0x1d4>)
 800c390:	fba2 2303 	umull	r2, r3, r2, r3
 800c394:	0a5a      	lsrs	r2, r3, #9
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	fb02 f303 	mul.w	r3, r2, r3
 800c39c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	1e5a      	subs	r2, r3, #1
 800c3a2:	61fa      	str	r2, [r7, #28]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d102      	bne.n	800c3ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c3a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c3ac:	e0c9      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d0ef      	beq.n	800c39e <SDMMC_GetCmdResp1+0x22>
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1ea      	bne.n	800c39e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2204      	movs	r2, #4
 800c3d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3da:	2304      	movs	r3, #4
 800c3dc:	e0b1      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d004      	beq.n	800c3f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e0a6      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	22c5      	movs	r2, #197	; 0xc5
 800c3f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7ff fd41 	bl	800be82 <SDIO_GetCommandResponse>
 800c400:	4603      	mov	r3, r0
 800c402:	461a      	mov	r2, r3
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	4293      	cmp	r3, r2
 800c408:	d001      	beq.n	800c40e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e099      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c40e:	2100      	movs	r1, #0
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7ff fd42 	bl	800be9a <SDIO_GetResponse>
 800c416:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c418:	697a      	ldr	r2, [r7, #20]
 800c41a:	4b4e      	ldr	r3, [pc, #312]	; (800c554 <SDMMC_GetCmdResp1+0x1d8>)
 800c41c:	4013      	ands	r3, r2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d101      	bne.n	800c426 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c422:	2300      	movs	r3, #0
 800c424:	e08d      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	da02      	bge.n	800c432 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c42c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c430:	e087      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c43c:	2340      	movs	r3, #64	; 0x40
 800c43e:	e080      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c44a:	2380      	movs	r3, #128	; 0x80
 800c44c:	e079      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c45c:	e071      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c46c:	e069      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c47c:	e061      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c48c:	e059      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c49c:	e051      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c4a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c4ac:	e049      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c4b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4bc:	e041      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c4c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4cc:	e039      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4dc:	e031      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c4e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4ec:	e029      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4fc:	e021      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c508:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c50c:	e019      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c518:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c51c:	e011      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c528:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c52c:	e009      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f003 0308 	and.w	r3, r3, #8
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c538:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c53c:	e001      	b.n	800c542 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c53e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c542:	4618      	mov	r0, r3
 800c544:	3720      	adds	r7, #32
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	20000010 	.word	0x20000010
 800c550:	10624dd3 	.word	0x10624dd3
 800c554:	fdffe008 	.word	0xfdffe008

0800c558 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c560:	4b1f      	ldr	r3, [pc, #124]	; (800c5e0 <SDMMC_GetCmdResp2+0x88>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a1f      	ldr	r2, [pc, #124]	; (800c5e4 <SDMMC_GetCmdResp2+0x8c>)
 800c566:	fba2 2303 	umull	r2, r3, r2, r3
 800c56a:	0a5b      	lsrs	r3, r3, #9
 800c56c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c570:	fb02 f303 	mul.w	r3, r2, r3
 800c574:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	1e5a      	subs	r2, r3, #1
 800c57a:	60fa      	str	r2, [r7, #12]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c584:	e026      	b.n	800c5d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c58a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c592:	2b00      	cmp	r3, #0
 800c594:	d0ef      	beq.n	800c576 <SDMMC_GetCmdResp2+0x1e>
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1ea      	bne.n	800c576 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a4:	f003 0304 	and.w	r3, r3, #4
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d004      	beq.n	800c5b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2204      	movs	r2, #4
 800c5b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c5b2:	2304      	movs	r3, #4
 800c5b4:	e00e      	b.n	800c5d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d004      	beq.n	800c5cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e003      	b.n	800c5d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	22c5      	movs	r2, #197	; 0xc5
 800c5d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3714      	adds	r7, #20
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bc80      	pop	{r7}
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	20000010 	.word	0x20000010
 800c5e4:	10624dd3 	.word	0x10624dd3

0800c5e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5f0:	4b19      	ldr	r3, [pc, #100]	; (800c658 <SDMMC_GetCmdResp3+0x70>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a19      	ldr	r2, [pc, #100]	; (800c65c <SDMMC_GetCmdResp3+0x74>)
 800c5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5fa:	0a5b      	lsrs	r3, r3, #9
 800c5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c600:	fb02 f303 	mul.w	r3, r2, r3
 800c604:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	1e5a      	subs	r2, r3, #1
 800c60a:	60fa      	str	r2, [r7, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c614:	e01b      	b.n	800c64e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c61a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0ef      	beq.n	800c606 <SDMMC_GetCmdResp3+0x1e>
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1ea      	bne.n	800c606 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c634:	f003 0304 	and.w	r3, r3, #4
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d004      	beq.n	800c646 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2204      	movs	r2, #4
 800c640:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c642:	2304      	movs	r3, #4
 800c644:	e003      	b.n	800c64e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	22c5      	movs	r2, #197	; 0xc5
 800c64a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	bc80      	pop	{r7}
 800c656:	4770      	bx	lr
 800c658:	20000010 	.word	0x20000010
 800c65c:	10624dd3 	.word	0x10624dd3

0800c660 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	460b      	mov	r3, r1
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c66e:	4b35      	ldr	r3, [pc, #212]	; (800c744 <SDMMC_GetCmdResp6+0xe4>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a35      	ldr	r2, [pc, #212]	; (800c748 <SDMMC_GetCmdResp6+0xe8>)
 800c674:	fba2 2303 	umull	r2, r3, r2, r3
 800c678:	0a5b      	lsrs	r3, r3, #9
 800c67a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c67e:	fb02 f303 	mul.w	r3, r2, r3
 800c682:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	1e5a      	subs	r2, r3, #1
 800c688:	61fa      	str	r2, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d102      	bne.n	800c694 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c68e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c692:	e052      	b.n	800c73a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c698:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d0ef      	beq.n	800c684 <SDMMC_GetCmdResp6+0x24>
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1ea      	bne.n	800c684 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b2:	f003 0304 	and.w	r3, r3, #4
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d004      	beq.n	800c6c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2204      	movs	r2, #4
 800c6be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6c0:	2304      	movs	r3, #4
 800c6c2:	e03a      	b.n	800c73a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d004      	beq.n	800c6da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e02f      	b.n	800c73a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f7ff fbd1 	bl	800be82 <SDIO_GetCommandResponse>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	7afb      	ldrb	r3, [r7, #11]
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d001      	beq.n	800c6ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e025      	b.n	800c73a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	22c5      	movs	r2, #197	; 0xc5
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f7ff fbcf 	bl	800be9a <SDIO_GetResponse>
 800c6fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d106      	bne.n	800c716 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	0c1b      	lsrs	r3, r3, #16
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c712:	2300      	movs	r3, #0
 800c714:	e011      	b.n	800c73a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c724:	e009      	b.n	800c73a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c734:	e001      	b.n	800c73a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3720      	adds	r7, #32
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	20000010 	.word	0x20000010
 800c748:	10624dd3 	.word	0x10624dd3

0800c74c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c74c:	b480      	push	{r7}
 800c74e:	b085      	sub	sp, #20
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c754:	4b22      	ldr	r3, [pc, #136]	; (800c7e0 <SDMMC_GetCmdResp7+0x94>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a22      	ldr	r2, [pc, #136]	; (800c7e4 <SDMMC_GetCmdResp7+0x98>)
 800c75a:	fba2 2303 	umull	r2, r3, r2, r3
 800c75e:	0a5b      	lsrs	r3, r3, #9
 800c760:	f241 3288 	movw	r2, #5000	; 0x1388
 800c764:	fb02 f303 	mul.w	r3, r2, r3
 800c768:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	1e5a      	subs	r2, r3, #1
 800c76e:	60fa      	str	r2, [r7, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d102      	bne.n	800c77a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c778:	e02c      	b.n	800c7d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c77e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c786:	2b00      	cmp	r3, #0
 800c788:	d0ef      	beq.n	800c76a <SDMMC_GetCmdResp7+0x1e>
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1ea      	bne.n	800c76a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c798:	f003 0304 	and.w	r3, r3, #4
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d004      	beq.n	800c7aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2204      	movs	r2, #4
 800c7a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7a6:	2304      	movs	r3, #4
 800c7a8:	e014      	b.n	800c7d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ae:	f003 0301 	and.w	r3, r3, #1
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d004      	beq.n	800c7c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e009      	b.n	800c7d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2240      	movs	r2, #64	; 0x40
 800c7d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7d2:	2300      	movs	r3, #0
  
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bc80      	pop	{r7}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	20000010 	.word	0x20000010
 800c7e4:	10624dd3 	.word	0x10624dd3

0800c7e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7f0:	4b10      	ldr	r3, [pc, #64]	; (800c834 <SDMMC_GetCmdError+0x4c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a10      	ldr	r2, [pc, #64]	; (800c838 <SDMMC_GetCmdError+0x50>)
 800c7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fa:	0a5b      	lsrs	r3, r3, #9
 800c7fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c800:	fb02 f303 	mul.w	r3, r2, r3
 800c804:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	1e5a      	subs	r2, r3, #1
 800c80a:	60fa      	str	r2, [r7, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d102      	bne.n	800c816 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c814:	e009      	b.n	800c82a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0f1      	beq.n	800c806 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	22c5      	movs	r2, #197	; 0xc5
 800c826:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	bc80      	pop	{r7}
 800c832:	4770      	bx	lr
 800c834:	20000010 	.word	0x20000010
 800c838:	10624dd3 	.word	0x10624dd3

0800c83c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c83c:	b084      	sub	sp, #16
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	f107 0014 	add.w	r0, r7, #20
 800c84a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	bc80      	pop	{r7}
 800c858:	b004      	add	sp, #16
 800c85a:	4770      	bx	lr

0800c85c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c86c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c870:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	b29a      	uxth	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3714      	adds	r7, #20
 800c882:	46bd      	mov	sp, r7
 800c884:	bc80      	pop	{r7}
 800c886:	4770      	bx	lr

0800c888 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c890:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c894:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c89c:	b29a      	uxth	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	43db      	mvns	r3, r3
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bc80      	pop	{r7}
 800c8ba:	4770      	bx	lr

0800c8bc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bc80      	pop	{r7}
 800c8d2:	4770      	bx	lr

0800c8d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	b480      	push	{r7}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	f107 0014 	add.w	r0, r7, #20
 800c8e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bc80      	pop	{r7}
 800c910:	b004      	add	sp, #16
 800c912:	4770      	bx	lr

0800c914 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c914:	b480      	push	{r7}
 800c916:	b09d      	sub	sp, #116	; 0x74
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	b29b      	uxth	r3, r3
 800c932:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c93a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	78db      	ldrb	r3, [r3, #3]
 800c942:	2b03      	cmp	r3, #3
 800c944:	d81f      	bhi.n	800c986 <USB_ActivateEndpoint+0x72>
 800c946:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <USB_ActivateEndpoint+0x38>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c95d 	.word	0x0800c95d
 800c950:	0800c979 	.word	0x0800c979
 800c954:	0800c98f 	.word	0x0800c98f
 800c958:	0800c96b 	.word	0x0800c96b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c95c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c964:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c968:	e012      	b.n	800c990 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c96a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c96e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c972:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c976:	e00b      	b.n	800c990 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c97c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c980:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c984:	e004      	b.n	800c990 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c98c:	e000      	b.n	800c990 <USB_ActivateEndpoint+0x7c>
      break;
 800c98e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	441a      	add	r2, r3
 800c99a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c99e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	441a      	add	r2, r3
 800c9e0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c9e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	7b1b      	ldrb	r3, [r3, #12]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f040 8178 	bne.w	800ccf2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	785b      	ldrb	r3, [r3, #1]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 8084 	beq.w	800cb14 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	61bb      	str	r3, [r7, #24]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	461a      	mov	r2, r3
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	61bb      	str	r3, [r7, #24]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	011a      	lsls	r2, r3, #4
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca2e:	617b      	str	r3, [r7, #20]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	88db      	ldrh	r3, [r3, #6]
 800ca34:	085b      	lsrs	r3, r3, #1
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	827b      	strh	r3, [r7, #18]
 800ca4e:	8a7b      	ldrh	r3, [r7, #18]
 800ca50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01b      	beq.n	800ca90 <USB_ActivateEndpoint+0x17c>
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca6e:	823b      	strh	r3, [r7, #16]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	441a      	add	r2, r3
 800ca7a:	8a3b      	ldrh	r3, [r7, #16]
 800ca7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	78db      	ldrb	r3, [r3, #3]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d020      	beq.n	800cada <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4413      	add	r3, r2
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caae:	81bb      	strh	r3, [r7, #12]
 800cab0:	89bb      	ldrh	r3, [r7, #12]
 800cab2:	f083 0320 	eor.w	r3, r3, #32
 800cab6:	81bb      	strh	r3, [r7, #12]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	441a      	add	r2, r3
 800cac2:	89bb      	ldrh	r3, [r7, #12]
 800cac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cacc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	8013      	strh	r3, [r2, #0]
 800cad8:	e2d5      	b.n	800d086 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caf0:	81fb      	strh	r3, [r7, #14]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	441a      	add	r2, r3
 800cafc:	89fb      	ldrh	r3, [r7, #14]
 800cafe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	8013      	strh	r3, [r2, #0]
 800cb12:	e2b8      	b.n	800d086 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	633b      	str	r3, [r7, #48]	; 0x30
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	461a      	mov	r2, r3
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	4413      	add	r3, r2
 800cb26:	633b      	str	r3, [r7, #48]	; 0x30
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	011a      	lsls	r2, r3, #4
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	4413      	add	r3, r2
 800cb32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800cb36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	88db      	ldrh	r3, [r3, #6]
 800cb3c:	085b      	lsrs	r3, r3, #1
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	461a      	mov	r2, r3
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	4413      	add	r3, r2
 800cb5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	011a      	lsls	r2, r3, #4
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	4413      	add	r3, r2
 800cb66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cb6a:	627b      	str	r3, [r7, #36]	; 0x24
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	881b      	ldrh	r3, [r3, #0]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7a:	801a      	strh	r2, [r3, #0]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	2b3e      	cmp	r3, #62	; 0x3e
 800cb82:	d91d      	bls.n	800cbc0 <USB_ActivateEndpoint+0x2ac>
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	095b      	lsrs	r3, r3, #5
 800cb8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	f003 031f 	and.w	r3, r3, #31
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <USB_ActivateEndpoint+0x28a>
 800cb98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	029b      	lsls	r3, r3, #10
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	4313      	orrs	r3, r2
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbc:	801a      	strh	r2, [r3, #0]
 800cbbe:	e026      	b.n	800cc0e <USB_ActivateEndpoint+0x2fa>
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10a      	bne.n	800cbde <USB_ActivateEndpoint+0x2ca>
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	881b      	ldrh	r3, [r3, #0]
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	801a      	strh	r2, [r3, #0]
 800cbdc:	e017      	b.n	800cc0e <USB_ActivateEndpoint+0x2fa>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	085b      	lsrs	r3, r3, #1
 800cbe4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	f003 0301 	and.w	r3, r3, #1
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d002      	beq.n	800cbf8 <USB_ActivateEndpoint+0x2e4>
 800cbf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	029b      	lsls	r3, r3, #10
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	4313      	orrs	r3, r2
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	4413      	add	r3, r2
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	847b      	strh	r3, [r7, #34]	; 0x22
 800cc1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d01b      	beq.n	800cc5e <USB_ActivateEndpoint+0x34a>
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	881b      	ldrh	r3, [r3, #0]
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc3c:	843b      	strh	r3, [r7, #32]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	441a      	add	r2, r3
 800cc48:	8c3b      	ldrh	r3, [r7, #32]
 800cc4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d124      	bne.n	800ccb0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc7c:	83bb      	strh	r3, [r7, #28]
 800cc7e:	8bbb      	ldrh	r3, [r7, #28]
 800cc80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cc84:	83bb      	strh	r3, [r7, #28]
 800cc86:	8bbb      	ldrh	r3, [r7, #28]
 800cc88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cc8c:	83bb      	strh	r3, [r7, #28]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	441a      	add	r2, r3
 800cc98:	8bbb      	ldrh	r3, [r7, #28]
 800cc9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	8013      	strh	r3, [r2, #0]
 800ccae:	e1ea      	b.n	800d086 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc6:	83fb      	strh	r3, [r7, #30]
 800ccc8:	8bfb      	ldrh	r3, [r7, #30]
 800ccca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ccce:	83fb      	strh	r3, [r7, #30]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	009b      	lsls	r3, r3, #2
 800ccd8:	441a      	add	r2, r3
 800ccda:	8bfb      	ldrh	r3, [r7, #30]
 800ccdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	8013      	strh	r3, [r2, #0]
 800ccf0:	e1c9      	b.n	800d086 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	78db      	ldrb	r3, [r3, #3]
 800ccf6:	2b02      	cmp	r3, #2
 800ccf8:	d11e      	bne.n	800cd38 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	881b      	ldrh	r3, [r3, #0]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	441a      	add	r2, r3
 800cd1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cd22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cd2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	8013      	strh	r3, [r2, #0]
 800cd36:	e01d      	b.n	800cd74 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800cd4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	441a      	add	r2, r3
 800cd5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800cd60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	461a      	mov	r2, r3
 800cd82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd84:	4413      	add	r3, r2
 800cd86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	011a      	lsls	r2, r3, #4
 800cd8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd90:	4413      	add	r3, r2
 800cd92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd96:	65bb      	str	r3, [r7, #88]	; 0x58
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	891b      	ldrh	r3, [r3, #8]
 800cd9c:	085b      	lsrs	r3, r3, #1
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cda6:	801a      	strh	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	657b      	str	r3, [r7, #84]	; 0x54
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdb8:	4413      	add	r3, r2
 800cdba:	657b      	str	r3, [r7, #84]	; 0x54
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	011a      	lsls	r2, r3, #4
 800cdc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800cdca:	653b      	str	r3, [r7, #80]	; 0x50
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	895b      	ldrh	r3, [r3, #10]
 800cdd0:	085b      	lsrs	r3, r3, #1
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	005b      	lsls	r3, r3, #1
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f040 8093 	bne.w	800cf0c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	4413      	add	r3, r2
 800cdf0:	881b      	ldrh	r3, [r3, #0]
 800cdf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800cdf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800cdfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d01b      	beq.n	800ce3a <USB_ActivateEndpoint+0x526>
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4413      	add	r3, r2
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce18:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	441a      	add	r2, r3
 800ce24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ce32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	781b      	ldrb	r3, [r3, #0]
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ce48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d01b      	beq.n	800ce8a <USB_ActivateEndpoint+0x576>
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce68:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	441a      	add	r2, r3
 800ce74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ce76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cea0:	873b      	strh	r3, [r7, #56]	; 0x38
 800cea2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cea4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cea8:	873b      	strh	r3, [r7, #56]	; 0x38
 800ceaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ceac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ceb0:	873b      	strh	r3, [r7, #56]	; 0x38
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	441a      	add	r2, r3
 800cebc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ceca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cece:	b29b      	uxth	r3, r3
 800ced0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	b29b      	uxth	r3, r3
 800cee0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cee8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	441a      	add	r2, r3
 800cef4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cefa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cefe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	8013      	strh	r3, [r2, #0]
 800cf0a:	e0bc      	b.n	800d086 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4413      	add	r3, r2
 800cf16:	881b      	ldrh	r3, [r3, #0]
 800cf18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800cf1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cf20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01d      	beq.n	800cf64 <USB_ActivateEndpoint+0x650>
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4413      	add	r3, r2
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	441a      	add	r2, r3
 800cf4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800cf50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	881b      	ldrh	r3, [r3, #0]
 800cf70:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800cf74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800cf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d01d      	beq.n	800cfbc <USB_ActivateEndpoint+0x6a8>
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4413      	add	r3, r2
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf96:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	441a      	add	r2, r3
 800cfa4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cfa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	78db      	ldrb	r3, [r3, #3]
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d024      	beq.n	800d00e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	881b      	ldrh	r3, [r3, #0]
 800cfd0:	b29b      	uxth	r3, r3
 800cfd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cfde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cfe2:	f083 0320 	eor.w	r3, r3, #32
 800cfe6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	441a      	add	r2, r3
 800cff4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d008:	b29b      	uxth	r3, r3
 800d00a:	8013      	strh	r3, [r2, #0]
 800d00c:	e01d      	b.n	800d04a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	4413      	add	r3, r2
 800d018:	881b      	ldrh	r3, [r3, #0]
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d024:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	441a      	add	r2, r3
 800d032:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d03a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d03e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d046:	b29b      	uxth	r3, r3
 800d048:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4413      	add	r3, r2
 800d054:	881b      	ldrh	r3, [r3, #0]
 800d056:	b29b      	uxth	r3, r3
 800d058:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d05c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d060:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	441a      	add	r2, r3
 800d06e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d07a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d082:	b29b      	uxth	r3, r3
 800d084:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d086:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3774      	adds	r7, #116	; 0x74
 800d08e:	46bd      	mov	sp, r7
 800d090:	bc80      	pop	{r7}
 800d092:	4770      	bx	lr

0800d094 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d094:	b480      	push	{r7}
 800d096:	b08d      	sub	sp, #52	; 0x34
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	7b1b      	ldrb	r3, [r3, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f040 808e 	bne.w	800d1c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	785b      	ldrb	r3, [r3, #1]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d044      	beq.n	800d13a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	009b      	lsls	r3, r3, #2
 800d0b8:	4413      	add	r3, r2
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	81bb      	strh	r3, [r7, #12]
 800d0be:	89bb      	ldrh	r3, [r7, #12]
 800d0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d01b      	beq.n	800d100 <USB_DeactivateEndpoint+0x6c>
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	881b      	ldrh	r3, [r3, #0]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0de:	817b      	strh	r3, [r7, #10]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	441a      	add	r2, r3
 800d0ea:	897b      	ldrh	r3, [r7, #10]
 800d0ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4413      	add	r3, r2
 800d10a:	881b      	ldrh	r3, [r3, #0]
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d116:	813b      	strh	r3, [r7, #8]
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	441a      	add	r2, r3
 800d122:	893b      	ldrh	r3, [r7, #8]
 800d124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d12c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d134:	b29b      	uxth	r3, r3
 800d136:	8013      	strh	r3, [r2, #0]
 800d138:	e192      	b.n	800d460 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	827b      	strh	r3, [r7, #18]
 800d148:	8a7b      	ldrh	r3, [r7, #18]
 800d14a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d01b      	beq.n	800d18a <USB_DeactivateEndpoint+0xf6>
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d168:	823b      	strh	r3, [r7, #16]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	441a      	add	r2, r3
 800d174:	8a3b      	ldrh	r3, [r7, #16]
 800d176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d17a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d17e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d186:	b29b      	uxth	r3, r3
 800d188:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4413      	add	r3, r2
 800d194:	881b      	ldrh	r3, [r3, #0]
 800d196:	b29b      	uxth	r3, r3
 800d198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d19c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1a0:	81fb      	strh	r3, [r7, #14]
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	441a      	add	r2, r3
 800d1ac:	89fb      	ldrh	r3, [r7, #14]
 800d1ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	8013      	strh	r3, [r2, #0]
 800d1c2:	e14d      	b.n	800d460 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	785b      	ldrb	r3, [r3, #1]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f040 80a5 	bne.w	800d318 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	843b      	strh	r3, [r7, #32]
 800d1dc:	8c3b      	ldrh	r3, [r7, #32]
 800d1de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d01b      	beq.n	800d21e <USB_DeactivateEndpoint+0x18a>
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4413      	add	r3, r2
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1fc:	83fb      	strh	r3, [r7, #30]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	441a      	add	r2, r3
 800d208:	8bfb      	ldrh	r3, [r7, #30]
 800d20a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d20e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d21e:	687a      	ldr	r2, [r7, #4]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	83bb      	strh	r3, [r7, #28]
 800d22c:	8bbb      	ldrh	r3, [r7, #28]
 800d22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d232:	2b00      	cmp	r3, #0
 800d234:	d01b      	beq.n	800d26e <USB_DeactivateEndpoint+0x1da>
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4413      	add	r3, r2
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	b29b      	uxth	r3, r3
 800d244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d24c:	837b      	strh	r3, [r7, #26]
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	441a      	add	r2, r3
 800d258:	8b7b      	ldrh	r3, [r7, #26]
 800d25a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d25e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d266:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d284:	833b      	strh	r3, [r7, #24]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	441a      	add	r2, r3
 800d290:	8b3b      	ldrh	r3, [r7, #24]
 800d292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d29a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d29e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4413      	add	r3, r2
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2bc:	82fb      	strh	r3, [r7, #22]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	441a      	add	r2, r3
 800d2c8:	8afb      	ldrh	r3, [r7, #22]
 800d2ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2f4:	82bb      	strh	r3, [r7, #20]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	009b      	lsls	r3, r3, #2
 800d2fe:	441a      	add	r2, r3
 800d300:	8abb      	ldrh	r3, [r7, #20]
 800d302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d30a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d312:	b29b      	uxth	r3, r3
 800d314:	8013      	strh	r3, [r2, #0]
 800d316:	e0a3      	b.n	800d460 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	781b      	ldrb	r3, [r3, #0]
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	881b      	ldrh	r3, [r3, #0]
 800d324:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d326:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d01b      	beq.n	800d368 <USB_DeactivateEndpoint+0x2d4>
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	881b      	ldrh	r3, [r3, #0]
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d346:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	441a      	add	r2, r3
 800d352:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d35c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d364:	b29b      	uxth	r3, r3
 800d366:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01b      	beq.n	800d3b8 <USB_DeactivateEndpoint+0x324>
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d396:	853b      	strh	r3, [r7, #40]	; 0x28
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	441a      	add	r2, r3
 800d3a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	4413      	add	r3, r2
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	441a      	add	r2, r3
 800d3da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4413      	add	r3, r2
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d406:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	441a      	add	r2, r3
 800d412:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d41c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d424:	b29b      	uxth	r3, r3
 800d426:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	b29b      	uxth	r3, r3
 800d436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d43a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d43e:	847b      	strh	r3, [r7, #34]	; 0x22
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	441a      	add	r2, r3
 800d44a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d44c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3734      	adds	r7, #52	; 0x34
 800d466:	46bd      	mov	sp, r7
 800d468:	bc80      	pop	{r7}
 800d46a:	4770      	bx	lr

0800d46c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b0c2      	sub	sp, #264	; 0x108
 800d470:	af00      	add	r7, sp, #0
 800d472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d47a:	6018      	str	r0, [r3, #0]
 800d47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d484:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	2b01      	cmp	r3, #1
 800d494:	f040 86b7 	bne.w	800e206 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	699a      	ldr	r2, [r3, #24]
 800d4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d908      	bls.n	800d4c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	691b      	ldr	r3, [r3, #16]
 800d4c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d4c4:	e007      	b.n	800d4d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d4d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	7b1b      	ldrb	r3, [r3, #12]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d13a      	bne.n	800d55c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	6959      	ldr	r1, [r3, #20]
 800d4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	88da      	ldrh	r2, [r3, #6]
 800d4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d502:	b29b      	uxth	r3, r3
 800d504:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d508:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d50c:	6800      	ldr	r0, [r0, #0]
 800d50e:	f001 fc9c 	bl	800ee4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	613b      	str	r3, [r7, #16]
 800d51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	461a      	mov	r2, r3
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	4413      	add	r3, r2
 800d534:	613b      	str	r3, [r7, #16]
 800d536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d53a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	781b      	ldrb	r3, [r3, #0]
 800d542:	011a      	lsls	r2, r3, #4
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	4413      	add	r3, r2
 800d548:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d54c:	60fb      	str	r3, [r7, #12]
 800d54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d552:	b29a      	uxth	r2, r3
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	801a      	strh	r2, [r3, #0]
 800d558:	f000 be1f 	b.w	800e19a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	78db      	ldrb	r3, [r3, #3]
 800d568:	2b02      	cmp	r3, #2
 800d56a:	f040 8462 	bne.w	800de32 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6a1a      	ldr	r2, [r3, #32]
 800d57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	429a      	cmp	r2, r3
 800d588:	f240 83df 	bls.w	800dd4a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d594:	681a      	ldr	r2, [r3, #0]
 800d596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	4413      	add	r3, r2
 800d5a6:	881b      	ldrh	r3, [r3, #0]
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800d5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	441a      	add	r2, r3
 800d5d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d5d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6a1a      	ldr	r2, [r3, #32]
 800d5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5f8:	1ad2      	subs	r2, r2, r3
 800d5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	4413      	add	r3, r2
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	b29b      	uxth	r3, r3
 800d624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f000 81c7 	beq.w	800d9bc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d632:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	633b      	str	r3, [r7, #48]	; 0x30
 800d63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	785b      	ldrb	r3, [r3, #1]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d177      	bne.n	800d73a <USB_EPStartXfer+0x2ce>
 800d64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	62bb      	str	r3, [r7, #40]	; 0x28
 800d656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d65a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d664:	b29b      	uxth	r3, r3
 800d666:	461a      	mov	r2, r3
 800d668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d66a:	4413      	add	r3, r2
 800d66c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	011a      	lsls	r2, r3, #4
 800d67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67e:	4413      	add	r3, r2
 800d680:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d684:	627b      	str	r3, [r7, #36]	; 0x24
 800d686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d690:	b29a      	uxth	r2, r3
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	801a      	strh	r2, [r3, #0]
 800d696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d69a:	2b3e      	cmp	r3, #62	; 0x3e
 800d69c:	d921      	bls.n	800d6e2 <USB_EPStartXfer+0x276>
 800d69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6a2:	095b      	lsrs	r3, r3, #5
 800d6a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6ac:	f003 031f 	and.w	r3, r3, #31
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <USB_EPStartXfer+0x252>
 800d6b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	029b      	lsls	r3, r3, #10
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6de:	801a      	strh	r2, [r3, #0]
 800d6e0:	e050      	b.n	800d784 <USB_EPStartXfer+0x318>
 800d6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10a      	bne.n	800d700 <USB_EPStartXfer+0x294>
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fc:	801a      	strh	r2, [r3, #0]
 800d6fe:	e041      	b.n	800d784 <USB_EPStartXfer+0x318>
 800d700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d704:	085b      	lsrs	r3, r3, #1
 800d706:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d70e:	f003 0301 	and.w	r3, r3, #1
 800d712:	2b00      	cmp	r3, #0
 800d714:	d004      	beq.n	800d720 <USB_EPStartXfer+0x2b4>
 800d716:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d71a:	3301      	adds	r3, #1
 800d71c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	b29a      	uxth	r2, r3
 800d726:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	029b      	lsls	r3, r3, #10
 800d72e:	b29b      	uxth	r3, r3
 800d730:	4313      	orrs	r3, r2
 800d732:	b29a      	uxth	r2, r3
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d736:	801a      	strh	r2, [r3, #0]
 800d738:	e024      	b.n	800d784 <USB_EPStartXfer+0x318>
 800d73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d73e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	785b      	ldrb	r3, [r3, #1]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d11c      	bne.n	800d784 <USB_EPStartXfer+0x318>
 800d74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d74e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d758:	b29b      	uxth	r3, r3
 800d75a:	461a      	mov	r2, r3
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	4413      	add	r3, r2
 800d760:	633b      	str	r3, [r7, #48]	; 0x30
 800d762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	011a      	lsls	r2, r3, #4
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	4413      	add	r3, r2
 800d774:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d77e:	b29a      	uxth	r2, r3
 800d780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d782:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	895b      	ldrh	r3, [r3, #10]
 800d790:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6959      	ldr	r1, [r3, #20]
 800d7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d7aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d7ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d7b2:	6800      	ldr	r0, [r0, #0]
 800d7b4:	f001 fb49 	bl	800ee4a <USB_WritePMA>
            ep->xfer_buff += len;
 800d7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	695a      	ldr	r2, [r3, #20]
 800d7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7c8:	441a      	add	r2, r3
 800d7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d7d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	6a1a      	ldr	r2, [r3, #32]
 800d7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	691b      	ldr	r3, [r3, #16]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d90f      	bls.n	800d812 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6a1a      	ldr	r2, [r3, #32]
 800d7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d802:	1ad2      	subs	r2, r2, r3
 800d804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	621a      	str	r2, [r3, #32]
 800d810:	e00e      	b.n	800d830 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6a1b      	ldr	r3, [r3, #32]
 800d81e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d826:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2200      	movs	r2, #0
 800d82e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	785b      	ldrb	r3, [r3, #1]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d177      	bne.n	800d930 <USB_EPStartXfer+0x4c4>
 800d840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	61bb      	str	r3, [r7, #24]
 800d84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	461a      	mov	r2, r3
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	4413      	add	r3, r2
 800d862:	61bb      	str	r3, [r7, #24]
 800d864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	011a      	lsls	r2, r3, #4
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	4413      	add	r3, r2
 800d876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d87a:	617b      	str	r3, [r7, #20]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	b29b      	uxth	r3, r3
 800d882:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d886:	b29a      	uxth	r2, r3
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	801a      	strh	r2, [r3, #0]
 800d88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d890:	2b3e      	cmp	r3, #62	; 0x3e
 800d892:	d921      	bls.n	800d8d8 <USB_EPStartXfer+0x46c>
 800d894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d898:	095b      	lsrs	r3, r3, #5
 800d89a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8a2:	f003 031f 	and.w	r3, r3, #31
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d104      	bne.n	800d8b4 <USB_EPStartXfer+0x448>
 800d8aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	881b      	ldrh	r3, [r3, #0]
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	029b      	lsls	r3, r3, #10
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	801a      	strh	r2, [r3, #0]
 800d8d6:	e056      	b.n	800d986 <USB_EPStartXfer+0x51a>
 800d8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10a      	bne.n	800d8f6 <USB_EPStartXfer+0x48a>
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	801a      	strh	r2, [r3, #0]
 800d8f4:	e047      	b.n	800d986 <USB_EPStartXfer+0x51a>
 800d8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8fa:	085b      	lsrs	r3, r3, #1
 800d8fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d904:	f003 0301 	and.w	r3, r3, #1
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d004      	beq.n	800d916 <USB_EPStartXfer+0x4aa>
 800d90c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d910:	3301      	adds	r3, #1
 800d912:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	b29a      	uxth	r2, r3
 800d91c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d920:	b29b      	uxth	r3, r3
 800d922:	029b      	lsls	r3, r3, #10
 800d924:	b29b      	uxth	r3, r3
 800d926:	4313      	orrs	r3, r2
 800d928:	b29a      	uxth	r2, r3
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	801a      	strh	r2, [r3, #0]
 800d92e:	e02a      	b.n	800d986 <USB_EPStartXfer+0x51a>
 800d930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	785b      	ldrb	r3, [r3, #1]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d122      	bne.n	800d986 <USB_EPStartXfer+0x51a>
 800d940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	623b      	str	r3, [r7, #32]
 800d94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	461a      	mov	r2, r3
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	4413      	add	r3, r2
 800d962:	623b      	str	r3, [r7, #32]
 800d964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	011a      	lsls	r2, r3, #4
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	4413      	add	r3, r2
 800d976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d97a:	61fb      	str	r3, [r7, #28]
 800d97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d980:	b29a      	uxth	r2, r3
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	891b      	ldrh	r3, [r3, #8]
 800d992:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6959      	ldr	r1, [r3, #20]
 800d9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9a6:	b29b      	uxth	r3, r3
 800d9a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d9ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d9b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d9b4:	6800      	ldr	r0, [r0, #0]
 800d9b6:	f001 fa48 	bl	800ee4a <USB_WritePMA>
 800d9ba:	e3ee      	b.n	800e19a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	785b      	ldrb	r3, [r3, #1]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d177      	bne.n	800dabc <USB_EPStartXfer+0x650>
 800d9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9ec:	4413      	add	r3, r2
 800d9ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	011a      	lsls	r2, r3, #4
 800d9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da00:	4413      	add	r3, r2
 800da02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800da06:	647b      	str	r3, [r7, #68]	; 0x44
 800da08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da0a:	881b      	ldrh	r3, [r3, #0]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da12:	b29a      	uxth	r2, r3
 800da14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da16:	801a      	strh	r2, [r3, #0]
 800da18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da1c:	2b3e      	cmp	r3, #62	; 0x3e
 800da1e:	d921      	bls.n	800da64 <USB_EPStartXfer+0x5f8>
 800da20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da24:	095b      	lsrs	r3, r3, #5
 800da26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800da2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da2e:	f003 031f 	and.w	r3, r3, #31
 800da32:	2b00      	cmp	r3, #0
 800da34:	d104      	bne.n	800da40 <USB_EPStartXfer+0x5d4>
 800da36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800da3a:	3b01      	subs	r3, #1
 800da3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800da40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da42:	881b      	ldrh	r3, [r3, #0]
 800da44:	b29a      	uxth	r2, r3
 800da46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800da4a:	b29b      	uxth	r3, r3
 800da4c:	029b      	lsls	r3, r3, #10
 800da4e:	b29b      	uxth	r3, r3
 800da50:	4313      	orrs	r3, r2
 800da52:	b29b      	uxth	r3, r3
 800da54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da60:	801a      	strh	r2, [r3, #0]
 800da62:	e056      	b.n	800db12 <USB_EPStartXfer+0x6a6>
 800da64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10a      	bne.n	800da82 <USB_EPStartXfer+0x616>
 800da6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	b29b      	uxth	r3, r3
 800da72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da7e:	801a      	strh	r2, [r3, #0]
 800da80:	e047      	b.n	800db12 <USB_EPStartXfer+0x6a6>
 800da82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da86:	085b      	lsrs	r3, r3, #1
 800da88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800da8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da90:	f003 0301 	and.w	r3, r3, #1
 800da94:	2b00      	cmp	r3, #0
 800da96:	d004      	beq.n	800daa2 <USB_EPStartXfer+0x636>
 800da98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800da9c:	3301      	adds	r3, #1
 800da9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800daa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daa4:	881b      	ldrh	r3, [r3, #0]
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800daac:	b29b      	uxth	r3, r3
 800daae:	029b      	lsls	r3, r3, #10
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	4313      	orrs	r3, r2
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dab8:	801a      	strh	r2, [r3, #0]
 800daba:	e02a      	b.n	800db12 <USB_EPStartXfer+0x6a6>
 800dabc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	785b      	ldrb	r3, [r3, #1]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d122      	bne.n	800db12 <USB_EPStartXfer+0x6a6>
 800dacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	653b      	str	r3, [r7, #80]	; 0x50
 800dad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dadc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	461a      	mov	r2, r3
 800daea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daec:	4413      	add	r3, r2
 800daee:	653b      	str	r3, [r7, #80]	; 0x50
 800daf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	011a      	lsls	r2, r3, #4
 800dafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db00:	4413      	add	r3, r2
 800db02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800db06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db0c:	b29a      	uxth	r2, r3
 800db0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800db12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	891b      	ldrh	r3, [r3, #8]
 800db1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	6959      	ldr	r1, [r3, #20]
 800db2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db32:	b29b      	uxth	r3, r3
 800db34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800db38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800db3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800db40:	6800      	ldr	r0, [r0, #0]
 800db42:	f001 f982 	bl	800ee4a <USB_WritePMA>
            ep->xfer_buff += len;
 800db46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	695a      	ldr	r2, [r3, #20]
 800db52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db56:	441a      	add	r2, r3
 800db58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800db64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	6a1a      	ldr	r2, [r3, #32]
 800db70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	691b      	ldr	r3, [r3, #16]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d90f      	bls.n	800dba0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800db80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	6a1a      	ldr	r2, [r3, #32]
 800db8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db90:	1ad2      	subs	r2, r2, r3
 800db92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	621a      	str	r2, [r3, #32]
 800db9e:	e00e      	b.n	800dbbe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800dba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800dbb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dbbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	785b      	ldrb	r3, [r3, #1]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d177      	bne.n	800dcca <USB_EPStartXfer+0x85e>
 800dbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfa:	4413      	add	r3, r2
 800dbfc:	63bb      	str	r3, [r7, #56]	; 0x38
 800dbfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	011a      	lsls	r2, r3, #4
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0e:	4413      	add	r3, r2
 800dc10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dc14:	637b      	str	r3, [r7, #52]	; 0x34
 800dc16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc18:	881b      	ldrh	r3, [r3, #0]
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc24:	801a      	strh	r2, [r3, #0]
 800dc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc2a:	2b3e      	cmp	r3, #62	; 0x3e
 800dc2c:	d921      	bls.n	800dc72 <USB_EPStartXfer+0x806>
 800dc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc32:	095b      	lsrs	r3, r3, #5
 800dc34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dc38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc3c:	f003 031f 	and.w	r3, r3, #31
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d104      	bne.n	800dc4e <USB_EPStartXfer+0x7e2>
 800dc44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dc4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	029b      	lsls	r3, r3, #10
 800dc5c:	b29b      	uxth	r3, r3
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc6e:	801a      	strh	r2, [r3, #0]
 800dc70:	e050      	b.n	800dd14 <USB_EPStartXfer+0x8a8>
 800dc72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10a      	bne.n	800dc90 <USB_EPStartXfer+0x824>
 800dc7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc7c:	881b      	ldrh	r3, [r3, #0]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8c:	801a      	strh	r2, [r3, #0]
 800dc8e:	e041      	b.n	800dd14 <USB_EPStartXfer+0x8a8>
 800dc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc94:	085b      	lsrs	r3, r3, #1
 800dc96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dc9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc9e:	f003 0301 	and.w	r3, r3, #1
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d004      	beq.n	800dcb0 <USB_EPStartXfer+0x844>
 800dca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcaa:	3301      	adds	r3, #1
 800dcac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dcb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcb2:	881b      	ldrh	r3, [r3, #0]
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	029b      	lsls	r3, r3, #10
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc6:	801a      	strh	r2, [r3, #0]
 800dcc8:	e024      	b.n	800dd14 <USB_EPStartXfer+0x8a8>
 800dcca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	785b      	ldrb	r3, [r3, #1]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d11c      	bne.n	800dd14 <USB_EPStartXfer+0x8a8>
 800dcda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	461a      	mov	r2, r3
 800dcec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcee:	4413      	add	r3, r2
 800dcf0:	643b      	str	r3, [r7, #64]	; 0x40
 800dcf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	011a      	lsls	r2, r3, #4
 800dd00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd02:	4413      	add	r3, r2
 800dd04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dd08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800dd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	895b      	ldrh	r3, [r3, #10]
 800dd20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6959      	ldr	r1, [r3, #20]
 800dd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dd3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dd3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dd42:	6800      	ldr	r0, [r0, #0]
 800dd44:	f001 f881 	bl	800ee4a <USB_WritePMA>
 800dd48:	e227      	b.n	800e19a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800dd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800dd5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	4413      	add	r3, r2
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800dd7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd80:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800dd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd8c:	681a      	ldr	r2, [r3, #0]
 800dd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	441a      	add	r2, r3
 800dd9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800dda2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dda6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ddaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ddae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ddb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddd6:	4413      	add	r3, r2
 800ddd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	011a      	lsls	r2, r3, #4
 800dde8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddea:	4413      	add	r3, r2
 800ddec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ddf0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddf6:	b29a      	uxth	r2, r3
 800ddf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ddfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	891b      	ldrh	r3, [r3, #8]
 800de08:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6959      	ldr	r1, [r3, #20]
 800de18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800de22:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800de26:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800de2a:	6800      	ldr	r0, [r0, #0]
 800de2c:	f001 f80d 	bl	800ee4a <USB_WritePMA>
 800de30:	e1b3      	b.n	800e19a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800de32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6a1a      	ldr	r2, [r3, #32]
 800de3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de42:	1ad2      	subs	r2, r2, r3
 800de44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800de50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	881b      	ldrh	r3, [r3, #0]
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de72:	2b00      	cmp	r3, #0
 800de74:	f000 80c6 	beq.w	800e004 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800de78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	673b      	str	r3, [r7, #112]	; 0x70
 800de84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	785b      	ldrb	r3, [r3, #1]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d177      	bne.n	800df84 <USB_EPStartXfer+0xb18>
 800de94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800dea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800deae:	b29b      	uxth	r3, r3
 800deb0:	461a      	mov	r2, r3
 800deb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800deb4:	4413      	add	r3, r2
 800deb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800deb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800debc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	011a      	lsls	r2, r3, #4
 800dec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dec8:	4413      	add	r3, r2
 800deca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dece:	667b      	str	r3, [r7, #100]	; 0x64
 800ded0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deda:	b29a      	uxth	r2, r3
 800dedc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dede:	801a      	strh	r2, [r3, #0]
 800dee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dee4:	2b3e      	cmp	r3, #62	; 0x3e
 800dee6:	d921      	bls.n	800df2c <USB_EPStartXfer+0xac0>
 800dee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deec:	095b      	lsrs	r3, r3, #5
 800deee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800def2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800def6:	f003 031f 	and.w	r3, r3, #31
 800defa:	2b00      	cmp	r3, #0
 800defc:	d104      	bne.n	800df08 <USB_EPStartXfer+0xa9c>
 800defe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800df02:	3b01      	subs	r3, #1
 800df04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800df08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df0a:	881b      	ldrh	r3, [r3, #0]
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800df12:	b29b      	uxth	r3, r3
 800df14:	029b      	lsls	r3, r3, #10
 800df16:	b29b      	uxth	r3, r3
 800df18:	4313      	orrs	r3, r2
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df24:	b29a      	uxth	r2, r3
 800df26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df28:	801a      	strh	r2, [r3, #0]
 800df2a:	e050      	b.n	800dfce <USB_EPStartXfer+0xb62>
 800df2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10a      	bne.n	800df4a <USB_EPStartXfer+0xade>
 800df34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df36:	881b      	ldrh	r3, [r3, #0]
 800df38:	b29b      	uxth	r3, r3
 800df3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df42:	b29a      	uxth	r2, r3
 800df44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df46:	801a      	strh	r2, [r3, #0]
 800df48:	e041      	b.n	800dfce <USB_EPStartXfer+0xb62>
 800df4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df4e:	085b      	lsrs	r3, r3, #1
 800df50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800df54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d004      	beq.n	800df6a <USB_EPStartXfer+0xafe>
 800df60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800df64:	3301      	adds	r3, #1
 800df66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800df6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df6c:	881b      	ldrh	r3, [r3, #0]
 800df6e:	b29a      	uxth	r2, r3
 800df70:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800df74:	b29b      	uxth	r3, r3
 800df76:	029b      	lsls	r3, r3, #10
 800df78:	b29b      	uxth	r3, r3
 800df7a:	4313      	orrs	r3, r2
 800df7c:	b29a      	uxth	r2, r3
 800df7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df80:	801a      	strh	r2, [r3, #0]
 800df82:	e024      	b.n	800dfce <USB_EPStartXfer+0xb62>
 800df84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	785b      	ldrb	r3, [r3, #1]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d11c      	bne.n	800dfce <USB_EPStartXfer+0xb62>
 800df94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dfa8:	4413      	add	r3, r2
 800dfaa:	673b      	str	r3, [r7, #112]	; 0x70
 800dfac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	011a      	lsls	r2, r3, #4
 800dfba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dfc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfcc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	895b      	ldrh	r3, [r3, #10]
 800dfda:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6959      	ldr	r1, [r3, #20]
 800dfea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dff4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dff8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dffc:	6800      	ldr	r0, [r0, #0]
 800dffe:	f000 ff24 	bl	800ee4a <USB_WritePMA>
 800e002:	e0ca      	b.n	800e19a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	785b      	ldrb	r3, [r3, #1]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d177      	bne.n	800e104 <USB_EPStartXfer+0xc98>
 800e014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e02e:	b29b      	uxth	r3, r3
 800e030:	461a      	mov	r2, r3
 800e032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e034:	4413      	add	r3, r2
 800e036:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	011a      	lsls	r2, r3, #4
 800e046:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e048:	4413      	add	r3, r2
 800e04a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e04e:	67bb      	str	r3, [r7, #120]	; 0x78
 800e050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	b29b      	uxth	r3, r3
 800e056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e05e:	801a      	strh	r2, [r3, #0]
 800e060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e064:	2b3e      	cmp	r3, #62	; 0x3e
 800e066:	d921      	bls.n	800e0ac <USB_EPStartXfer+0xc40>
 800e068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e06c:	095b      	lsrs	r3, r3, #5
 800e06e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e076:	f003 031f 	and.w	r3, r3, #31
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d104      	bne.n	800e088 <USB_EPStartXfer+0xc1c>
 800e07e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e082:	3b01      	subs	r3, #1
 800e084:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	b29a      	uxth	r2, r3
 800e08e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e092:	b29b      	uxth	r3, r3
 800e094:	029b      	lsls	r3, r3, #10
 800e096:	b29b      	uxth	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0a8:	801a      	strh	r2, [r3, #0]
 800e0aa:	e05c      	b.n	800e166 <USB_EPStartXfer+0xcfa>
 800e0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10a      	bne.n	800e0ca <USB_EPStartXfer+0xc5e>
 800e0b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0c6:	801a      	strh	r2, [r3, #0]
 800e0c8:	e04d      	b.n	800e166 <USB_EPStartXfer+0xcfa>
 800e0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0ce:	085b      	lsrs	r3, r3, #1
 800e0d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0d8:	f003 0301 	and.w	r3, r3, #1
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d004      	beq.n	800e0ea <USB_EPStartXfer+0xc7e>
 800e0e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e0ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	029b      	lsls	r3, r3, #10
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e100:	801a      	strh	r2, [r3, #0]
 800e102:	e030      	b.n	800e166 <USB_EPStartXfer+0xcfa>
 800e104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	785b      	ldrb	r3, [r3, #1]
 800e110:	2b01      	cmp	r3, #1
 800e112:	d128      	bne.n	800e166 <USB_EPStartXfer+0xcfa>
 800e114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e118:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e130:	b29b      	uxth	r3, r3
 800e132:	461a      	mov	r2, r3
 800e134:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e138:	4413      	add	r3, r2
 800e13a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	011a      	lsls	r2, r3, #4
 800e14c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e150:	4413      	add	r3, r2
 800e152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e15e:	b29a      	uxth	r2, r3
 800e160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e164:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e16a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	891b      	ldrh	r3, [r3, #8]
 800e172:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	6959      	ldr	r1, [r3, #20]
 800e182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e186:	b29b      	uxth	r3, r3
 800e188:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e18c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e190:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e194:	6800      	ldr	r0, [r0, #0]
 800e196:	f000 fe58 	bl	800ee4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e19e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e1bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1c0:	817b      	strh	r3, [r7, #10]
 800e1c2:	897b      	ldrh	r3, [r7, #10]
 800e1c4:	f083 0310 	eor.w	r3, r3, #16
 800e1c8:	817b      	strh	r3, [r7, #10]
 800e1ca:	897b      	ldrh	r3, [r7, #10]
 800e1cc:	f083 0320 	eor.w	r3, r3, #32
 800e1d0:	817b      	strh	r3, [r7, #10]
 800e1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	441a      	add	r2, r3
 800e1ec:	897b      	ldrh	r3, [r7, #10]
 800e1ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	8013      	strh	r3, [r2, #0]
 800e202:	f000 bcde 	b.w	800ebc2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	7b1b      	ldrb	r3, [r3, #12]
 800e212:	2b00      	cmp	r3, #0
 800e214:	f040 80bb 	bne.w	800e38e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	699a      	ldr	r2, [r3, #24]
 800e224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	429a      	cmp	r2, r3
 800e232:	d917      	bls.n	800e264 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800e234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	691b      	ldr	r3, [r3, #16]
 800e240:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800e244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	699a      	ldr	r2, [r3, #24]
 800e250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e254:	1ad2      	subs	r2, r2, r3
 800e256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e25a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	619a      	str	r2, [r3, #24]
 800e262:	e00e      	b.n	800e282 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800e264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800e274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2200      	movs	r2, #0
 800e280:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2a6:	4413      	add	r3, r2
 800e2a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	011a      	lsls	r2, r3, #4
 800e2ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e2be:	4413      	add	r3, r2
 800e2c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e2c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e2c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e2da:	801a      	strh	r2, [r3, #0]
 800e2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2e0:	2b3e      	cmp	r3, #62	; 0x3e
 800e2e2:	d924      	bls.n	800e32e <USB_EPStartXfer+0xec2>
 800e2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2e8:	095b      	lsrs	r3, r3, #5
 800e2ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2f2:	f003 031f 	and.w	r3, r3, #31
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d104      	bne.n	800e304 <USB_EPStartXfer+0xe98>
 800e2fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e2fe:	3b01      	subs	r3, #1
 800e300:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e308:	881b      	ldrh	r3, [r3, #0]
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e310:	b29b      	uxth	r3, r3
 800e312:	029b      	lsls	r3, r3, #10
 800e314:	b29b      	uxth	r3, r3
 800e316:	4313      	orrs	r3, r2
 800e318:	b29b      	uxth	r3, r3
 800e31a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e31e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e322:	b29a      	uxth	r2, r3
 800e324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e328:	801a      	strh	r2, [r3, #0]
 800e32a:	f000 bc10 	b.w	800eb4e <USB_EPStartXfer+0x16e2>
 800e32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10c      	bne.n	800e350 <USB_EPStartXfer+0xee4>
 800e336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e346:	b29a      	uxth	r2, r3
 800e348:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e34c:	801a      	strh	r2, [r3, #0]
 800e34e:	e3fe      	b.n	800eb4e <USB_EPStartXfer+0x16e2>
 800e350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e354:	085b      	lsrs	r3, r3, #1
 800e356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e35e:	f003 0301 	and.w	r3, r3, #1
 800e362:	2b00      	cmp	r3, #0
 800e364:	d004      	beq.n	800e370 <USB_EPStartXfer+0xf04>
 800e366:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e36a:	3301      	adds	r3, #1
 800e36c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	b29a      	uxth	r2, r3
 800e378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	029b      	lsls	r3, r3, #10
 800e380:	b29b      	uxth	r3, r3
 800e382:	4313      	orrs	r3, r2
 800e384:	b29a      	uxth	r2, r3
 800e386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e38a:	801a      	strh	r2, [r3, #0]
 800e38c:	e3df      	b.n	800eb4e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	78db      	ldrb	r3, [r3, #3]
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	f040 8218 	bne.w	800e7d0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	785b      	ldrb	r3, [r3, #1]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f040 809d 	bne.w	800e4ec <USB_EPStartXfer+0x1080>
 800e3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3d6:	4413      	add	r3, r2
 800e3d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	011a      	lsls	r2, r3, #4
 800e3ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e3ee:	4413      	add	r3, r2
 800e3f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e3f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e3f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e404:	b29a      	uxth	r2, r3
 800e406:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e40a:	801a      	strh	r2, [r3, #0]
 800e40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	2b3e      	cmp	r3, #62	; 0x3e
 800e41a:	d92b      	bls.n	800e474 <USB_EPStartXfer+0x1008>
 800e41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	691b      	ldr	r3, [r3, #16]
 800e428:	095b      	lsrs	r3, r3, #5
 800e42a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	691b      	ldr	r3, [r3, #16]
 800e43a:	f003 031f 	and.w	r3, r3, #31
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d104      	bne.n	800e44c <USB_EPStartXfer+0xfe0>
 800e442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e446:	3b01      	subs	r3, #1
 800e448:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e44c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e450:	881b      	ldrh	r3, [r3, #0]
 800e452:	b29a      	uxth	r2, r3
 800e454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e458:	b29b      	uxth	r3, r3
 800e45a:	029b      	lsls	r3, r3, #10
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	4313      	orrs	r3, r2
 800e460:	b29b      	uxth	r3, r3
 800e462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e470:	801a      	strh	r2, [r3, #0]
 800e472:	e070      	b.n	800e556 <USB_EPStartXfer+0x10ea>
 800e474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10c      	bne.n	800e49e <USB_EPStartXfer+0x1032>
 800e484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e488:	881b      	ldrh	r3, [r3, #0]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e494:	b29a      	uxth	r2, r3
 800e496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e49a:	801a      	strh	r2, [r3, #0]
 800e49c:	e05b      	b.n	800e556 <USB_EPStartXfer+0x10ea>
 800e49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	085b      	lsrs	r3, r3, #1
 800e4ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	f003 0301 	and.w	r3, r3, #1
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d004      	beq.n	800e4ce <USB_EPStartXfer+0x1062>
 800e4c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e4ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e4d2:	881b      	ldrh	r3, [r3, #0]
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	029b      	lsls	r3, r3, #10
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4313      	orrs	r3, r2
 800e4e2:	b29a      	uxth	r2, r3
 800e4e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e4e8:	801a      	strh	r2, [r3, #0]
 800e4ea:	e034      	b.n	800e556 <USB_EPStartXfer+0x10ea>
 800e4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	785b      	ldrb	r3, [r3, #1]
 800e4f8:	2b01      	cmp	r3, #1
 800e4fa:	d12c      	bne.n	800e556 <USB_EPStartXfer+0x10ea>
 800e4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e50e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e518:	b29b      	uxth	r3, r3
 800e51a:	461a      	mov	r2, r3
 800e51c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e520:	4413      	add	r3, r2
 800e522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e52a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	011a      	lsls	r2, r3, #4
 800e534:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e538:	4413      	add	r3, r2
 800e53a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e53e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	b29a      	uxth	r2, r3
 800e550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e554:	801a      	strh	r2, [r3, #0]
 800e556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	785b      	ldrb	r3, [r3, #1]
 800e570:	2b00      	cmp	r3, #0
 800e572:	f040 809d 	bne.w	800e6b0 <USB_EPStartXfer+0x1244>
 800e576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e57a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e592:	b29b      	uxth	r3, r3
 800e594:	461a      	mov	r2, r3
 800e596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e59a:	4413      	add	r3, r2
 800e59c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	011a      	lsls	r2, r3, #4
 800e5ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e5b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e5bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5ce:	801a      	strh	r2, [r3, #0]
 800e5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	2b3e      	cmp	r3, #62	; 0x3e
 800e5de:	d92b      	bls.n	800e638 <USB_EPStartXfer+0x11cc>
 800e5e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	095b      	lsrs	r3, r3, #5
 800e5ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	f003 031f 	and.w	r3, r3, #31
 800e602:	2b00      	cmp	r3, #0
 800e604:	d104      	bne.n	800e610 <USB_EPStartXfer+0x11a4>
 800e606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e60a:	3b01      	subs	r3, #1
 800e60c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e614:	881b      	ldrh	r3, [r3, #0]
 800e616:	b29a      	uxth	r2, r3
 800e618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	029b      	lsls	r3, r3, #10
 800e620:	b29b      	uxth	r3, r3
 800e622:	4313      	orrs	r3, r2
 800e624:	b29b      	uxth	r3, r3
 800e626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e62a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e62e:	b29a      	uxth	r2, r3
 800e630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e634:	801a      	strh	r2, [r3, #0]
 800e636:	e069      	b.n	800e70c <USB_EPStartXfer+0x12a0>
 800e638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e63c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d10c      	bne.n	800e662 <USB_EPStartXfer+0x11f6>
 800e648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	b29b      	uxth	r3, r3
 800e650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e658:	b29a      	uxth	r2, r3
 800e65a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e65e:	801a      	strh	r2, [r3, #0]
 800e660:	e054      	b.n	800e70c <USB_EPStartXfer+0x12a0>
 800e662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	085b      	lsrs	r3, r3, #1
 800e670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	691b      	ldr	r3, [r3, #16]
 800e680:	f003 0301 	and.w	r3, r3, #1
 800e684:	2b00      	cmp	r3, #0
 800e686:	d004      	beq.n	800e692 <USB_EPStartXfer+0x1226>
 800e688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e68c:	3301      	adds	r3, #1
 800e68e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e692:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	b29a      	uxth	r2, r3
 800e69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	029b      	lsls	r3, r3, #10
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e6ac:	801a      	strh	r2, [r3, #0]
 800e6ae:	e02d      	b.n	800e70c <USB_EPStartXfer+0x12a0>
 800e6b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	785b      	ldrb	r3, [r3, #1]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d125      	bne.n	800e70c <USB_EPStartXfer+0x12a0>
 800e6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e6dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	011a      	lsls	r2, r3, #4
 800e6ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e6ee:	4413      	add	r3, r2
 800e6f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e6f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	691b      	ldr	r3, [r3, #16]
 800e704:	b29a      	uxth	r2, r3
 800e706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e70a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	69db      	ldr	r3, [r3, #28]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 8218 	beq.w	800eb4e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e72c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e73e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e746:	2b00      	cmp	r3, #0
 800e748:	d005      	beq.n	800e756 <USB_EPStartXfer+0x12ea>
 800e74a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e752:	2b00      	cmp	r3, #0
 800e754:	d10d      	bne.n	800e772 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e756:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e75a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f040 81f5 	bne.w	800eb4e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e764:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f040 81ee 	bne.w	800eb4e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	881b      	ldrh	r3, [r3, #0]
 800e78e:	b29b      	uxth	r3, r3
 800e790:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e798:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	441a      	add	r2, r3
 800e7b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e7ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	8013      	strh	r3, [r2, #0]
 800e7ce:	e1be      	b.n	800eb4e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	78db      	ldrb	r3, [r3, #3]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	f040 81b4 	bne.w	800eb4a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	699a      	ldr	r2, [r3, #24]
 800e7ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e7f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d917      	bls.n	800e82e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	691b      	ldr	r3, [r3, #16]
 800e80a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	699a      	ldr	r2, [r3, #24]
 800e81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e81e:	1ad2      	subs	r2, r2, r3
 800e820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	619a      	str	r2, [r3, #24]
 800e82c:	e00e      	b.n	800e84c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800e83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2200      	movs	r2, #0
 800e84a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	785b      	ldrb	r3, [r3, #1]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f040 8085 	bne.w	800e968 <USB_EPStartXfer+0x14fc>
 800e85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	461a      	mov	r2, r3
 800e87e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e882:	4413      	add	r3, r2
 800e884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e88c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	011a      	lsls	r2, r3, #4
 800e896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e89a:	4413      	add	r3, r2
 800e89c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e8a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e8a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e8b6:	801a      	strh	r2, [r3, #0]
 800e8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8bc:	2b3e      	cmp	r3, #62	; 0x3e
 800e8be:	d923      	bls.n	800e908 <USB_EPStartXfer+0x149c>
 800e8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8c4:	095b      	lsrs	r3, r3, #5
 800e8c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e8ce:	f003 031f 	and.w	r3, r3, #31
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d104      	bne.n	800e8e0 <USB_EPStartXfer+0x1474>
 800e8d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e8e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e8e4:	881b      	ldrh	r3, [r3, #0]
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8ec:	b29b      	uxth	r3, r3
 800e8ee:	029b      	lsls	r3, r3, #10
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8fe:	b29a      	uxth	r2, r3
 800e900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e904:	801a      	strh	r2, [r3, #0]
 800e906:	e060      	b.n	800e9ca <USB_EPStartXfer+0x155e>
 800e908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10c      	bne.n	800e92a <USB_EPStartXfer+0x14be>
 800e910:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e914:	881b      	ldrh	r3, [r3, #0]
 800e916:	b29b      	uxth	r3, r3
 800e918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e91c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e920:	b29a      	uxth	r2, r3
 800e922:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e926:	801a      	strh	r2, [r3, #0]
 800e928:	e04f      	b.n	800e9ca <USB_EPStartXfer+0x155e>
 800e92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e92e:	085b      	lsrs	r3, r3, #1
 800e930:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e938:	f003 0301 	and.w	r3, r3, #1
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d004      	beq.n	800e94a <USB_EPStartXfer+0x14de>
 800e940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e944:	3301      	adds	r3, #1
 800e946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e94a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	b29a      	uxth	r2, r3
 800e952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e956:	b29b      	uxth	r3, r3
 800e958:	029b      	lsls	r3, r3, #10
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	4313      	orrs	r3, r2
 800e95e:	b29a      	uxth	r2, r3
 800e960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e964:	801a      	strh	r2, [r3, #0]
 800e966:	e030      	b.n	800e9ca <USB_EPStartXfer+0x155e>
 800e968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e96c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	785b      	ldrb	r3, [r3, #1]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d128      	bne.n	800e9ca <USB_EPStartXfer+0x155e>
 800e978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e97c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e98a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e994:	b29b      	uxth	r3, r3
 800e996:	461a      	mov	r2, r3
 800e998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e99c:	4413      	add	r3, r2
 800e99e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	011a      	lsls	r2, r3, #4
 800e9b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e9b4:	4413      	add	r3, r2
 800e9b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e9ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e9c8:	801a      	strh	r2, [r3, #0]
 800e9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	785b      	ldrb	r3, [r3, #1]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f040 8085 	bne.w	800eaf4 <USB_EPStartXfer+0x1688>
 800e9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	461a      	mov	r2, r3
 800ea0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ea0e:	4413      	add	r3, r2
 800ea10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ea14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	011a      	lsls	r2, r3, #4
 800ea22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ea26:	4413      	add	r3, r2
 800ea28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ea2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ea30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ea42:	801a      	strh	r2, [r3, #0]
 800ea44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea48:	2b3e      	cmp	r3, #62	; 0x3e
 800ea4a:	d923      	bls.n	800ea94 <USB_EPStartXfer+0x1628>
 800ea4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea50:	095b      	lsrs	r3, r3, #5
 800ea52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ea56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea5a:	f003 031f 	and.w	r3, r3, #31
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d104      	bne.n	800ea6c <USB_EPStartXfer+0x1600>
 800ea62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea66:	3b01      	subs	r3, #1
 800ea68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ea6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	029b      	lsls	r3, r3, #10
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ea90:	801a      	strh	r2, [r3, #0]
 800ea92:	e05c      	b.n	800eb4e <USB_EPStartXfer+0x16e2>
 800ea94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d10c      	bne.n	800eab6 <USB_EPStartXfer+0x164a>
 800ea9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eaa0:	881b      	ldrh	r3, [r3, #0]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eab2:	801a      	strh	r2, [r3, #0]
 800eab4:	e04b      	b.n	800eb4e <USB_EPStartXfer+0x16e2>
 800eab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eaba:	085b      	lsrs	r3, r3, #1
 800eabc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eac4:	f003 0301 	and.w	r3, r3, #1
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d004      	beq.n	800ead6 <USB_EPStartXfer+0x166a>
 800eacc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ead0:	3301      	adds	r3, #1
 800ead2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ead6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eada:	881b      	ldrh	r3, [r3, #0]
 800eadc:	b29a      	uxth	r2, r3
 800eade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	029b      	lsls	r3, r3, #10
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	4313      	orrs	r3, r2
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eaf0:	801a      	strh	r2, [r3, #0]
 800eaf2:	e02c      	b.n	800eb4e <USB_EPStartXfer+0x16e2>
 800eaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	785b      	ldrb	r3, [r3, #1]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d124      	bne.n	800eb4e <USB_EPStartXfer+0x16e2>
 800eb04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	461a      	mov	r2, r3
 800eb16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800eb20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	011a      	lsls	r2, r3, #4
 800eb2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800eb32:	4413      	add	r3, r2
 800eb34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800eb38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800eb3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800eb46:	801a      	strh	r2, [r3, #0]
 800eb48:	e001      	b.n	800eb4e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e03a      	b.n	800ebc4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eb4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	4413      	add	r3, r2
 800eb68:	881b      	ldrh	r3, [r3, #0]
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800eb78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800eb7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800eb80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800eb84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800eb88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800eb8c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800eb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	009b      	lsls	r3, r3, #2
 800eba8:	441a      	add	r2, r3
 800ebaa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ebae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ebce:	b480      	push	{r7}
 800ebd0:	b085      	sub	sp, #20
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	785b      	ldrb	r3, [r3, #1]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d020      	beq.n	800ec22 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ebe0:	687a      	ldr	r2, [r7, #4]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	4413      	add	r3, r2
 800ebea:	881b      	ldrh	r3, [r3, #0]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebf6:	81bb      	strh	r3, [r7, #12]
 800ebf8:	89bb      	ldrh	r3, [r7, #12]
 800ebfa:	f083 0310 	eor.w	r3, r3, #16
 800ebfe:	81bb      	strh	r3, [r7, #12]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	781b      	ldrb	r3, [r3, #0]
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	441a      	add	r2, r3
 800ec0a:	89bb      	ldrh	r3, [r7, #12]
 800ec0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	8013      	strh	r3, [r2, #0]
 800ec20:	e01f      	b.n	800ec62 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4413      	add	r3, r2
 800ec2c:	881b      	ldrh	r3, [r3, #0]
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec38:	81fb      	strh	r3, [r7, #14]
 800ec3a:	89fb      	ldrh	r3, [r7, #14]
 800ec3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ec40:	81fb      	strh	r3, [r7, #14]
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	441a      	add	r2, r3
 800ec4c:	89fb      	ldrh	r3, [r7, #14]
 800ec4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3714      	adds	r7, #20
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bc80      	pop	{r7}
 800ec6c:	4770      	bx	lr

0800ec6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ec6e:	b480      	push	{r7}
 800ec70:	b087      	sub	sp, #28
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	7b1b      	ldrb	r3, [r3, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f040 809d 	bne.w	800edbc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	785b      	ldrb	r3, [r3, #1]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d04c      	beq.n	800ed24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	4413      	add	r3, r2
 800ec94:	881b      	ldrh	r3, [r3, #0]
 800ec96:	823b      	strh	r3, [r7, #16]
 800ec98:	8a3b      	ldrh	r3, [r7, #16]
 800ec9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d01b      	beq.n	800ecda <USB_EPClearStall+0x6c>
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4413      	add	r3, r2
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ecb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecb8:	81fb      	strh	r3, [r7, #14]
 800ecba:	687a      	ldr	r2, [r7, #4]
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	009b      	lsls	r3, r3, #2
 800ecc2:	441a      	add	r2, r3
 800ecc4:	89fb      	ldrh	r3, [r7, #14]
 800ecc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ecce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	78db      	ldrb	r3, [r3, #3]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d06c      	beq.n	800edbc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	781b      	ldrb	r3, [r3, #0]
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4413      	add	r3, r2
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ecf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecf8:	81bb      	strh	r3, [r7, #12]
 800ecfa:	89bb      	ldrh	r3, [r7, #12]
 800ecfc:	f083 0320 	eor.w	r3, r3, #32
 800ed00:	81bb      	strh	r3, [r7, #12]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	441a      	add	r2, r3
 800ed0c:	89bb      	ldrh	r3, [r7, #12]
 800ed0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	8013      	strh	r3, [r2, #0]
 800ed22:	e04b      	b.n	800edbc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	4413      	add	r3, r2
 800ed2e:	881b      	ldrh	r3, [r3, #0]
 800ed30:	82fb      	strh	r3, [r7, #22]
 800ed32:	8afb      	ldrh	r3, [r7, #22]
 800ed34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d01b      	beq.n	800ed74 <USB_EPClearStall+0x106>
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	4413      	add	r3, r2
 800ed46:	881b      	ldrh	r3, [r3, #0]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed52:	82bb      	strh	r3, [r7, #20]
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	781b      	ldrb	r3, [r3, #0]
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	441a      	add	r2, r3
 800ed5e:	8abb      	ldrh	r3, [r7, #20]
 800ed60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ed6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ed74:	687a      	ldr	r2, [r7, #4]
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	009b      	lsls	r3, r3, #2
 800ed7c:	4413      	add	r3, r2
 800ed7e:	881b      	ldrh	r3, [r3, #0]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed8a:	827b      	strh	r3, [r7, #18]
 800ed8c:	8a7b      	ldrh	r3, [r7, #18]
 800ed8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ed92:	827b      	strh	r3, [r7, #18]
 800ed94:	8a7b      	ldrh	r3, [r7, #18]
 800ed96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ed9a:	827b      	strh	r3, [r7, #18]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	781b      	ldrb	r3, [r3, #0]
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	441a      	add	r2, r3
 800eda6:	8a7b      	ldrh	r3, [r7, #18]
 800eda8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edb8:	b29b      	uxth	r3, r3
 800edba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800edbc:	2300      	movs	r3, #0
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	371c      	adds	r7, #28
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bc80      	pop	{r7}
 800edc6:	4770      	bx	lr

0800edc8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	460b      	mov	r3, r1
 800edd2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800edd4:	78fb      	ldrb	r3, [r7, #3]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d103      	bne.n	800ede2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2280      	movs	r2, #128	; 0x80
 800edde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	bc80      	pop	{r7}
 800edec:	4770      	bx	lr

0800edee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bc80      	pop	{r7}
 800ee00:	4770      	bx	lr

0800ee02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ee02:	b480      	push	{r7}
 800ee04:	b083      	sub	sp, #12
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ee0a:	2300      	movs	r3, #0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	370c      	adds	r7, #12
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bc80      	pop	{r7}
 800ee14:	4770      	bx	lr

0800ee16 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ee16:	b480      	push	{r7}
 800ee18:	b085      	sub	sp, #20
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ee28:	68fb      	ldr	r3, [r7, #12]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3714      	adds	r7, #20
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bc80      	pop	{r7}
 800ee32:	4770      	bx	lr

0800ee34 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ee3e:	2300      	movs	r3, #0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	370c      	adds	r7, #12
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bc80      	pop	{r7}
 800ee48:	4770      	bx	lr

0800ee4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ee4a:	b480      	push	{r7}
 800ee4c:	b08b      	sub	sp, #44	; 0x2c
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	60f8      	str	r0, [r7, #12]
 800ee52:	60b9      	str	r1, [r7, #8]
 800ee54:	4611      	mov	r1, r2
 800ee56:	461a      	mov	r2, r3
 800ee58:	460b      	mov	r3, r1
 800ee5a:	80fb      	strh	r3, [r7, #6]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ee60:	88bb      	ldrh	r3, [r7, #4]
 800ee62:	3301      	adds	r3, #1
 800ee64:	085b      	lsrs	r3, r3, #1
 800ee66:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ee70:	88fb      	ldrh	r3, [r7, #6]
 800ee72:	005a      	lsls	r2, r3, #1
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	4413      	add	r3, r2
 800ee78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ee7c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	627b      	str	r3, [r7, #36]	; 0x24
 800ee82:	e01e      	b.n	800eec2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	021b      	lsls	r3, r3, #8
 800ee92:	b21a      	sxth	r2, r3
 800ee94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ee98:	4313      	orrs	r3, r2
 800ee9a:	b21b      	sxth	r3, r3
 800ee9c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ee9e:	6a3b      	ldr	r3, [r7, #32]
 800eea0:	8a7a      	ldrh	r2, [r7, #18]
 800eea2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800eea4:	6a3b      	ldr	r3, [r7, #32]
 800eea6:	3302      	adds	r3, #2
 800eea8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800eeaa:	6a3b      	ldr	r3, [r7, #32]
 800eeac:	3302      	adds	r3, #2
 800eeae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebe:	3b01      	subs	r3, #1
 800eec0:	627b      	str	r3, [r7, #36]	; 0x24
 800eec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d1dd      	bne.n	800ee84 <USB_WritePMA+0x3a>
  }
}
 800eec8:	bf00      	nop
 800eeca:	bf00      	nop
 800eecc:	372c      	adds	r7, #44	; 0x2c
 800eece:	46bd      	mov	sp, r7
 800eed0:	bc80      	pop	{r7}
 800eed2:	4770      	bx	lr

0800eed4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b08b      	sub	sp, #44	; 0x2c
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	4611      	mov	r1, r2
 800eee0:	461a      	mov	r2, r3
 800eee2:	460b      	mov	r3, r1
 800eee4:	80fb      	strh	r3, [r7, #6]
 800eee6:	4613      	mov	r3, r2
 800eee8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800eeea:	88bb      	ldrh	r3, [r7, #4]
 800eeec:	085b      	lsrs	r3, r3, #1
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eefa:	88fb      	ldrh	r3, [r7, #6]
 800eefc:	005a      	lsls	r2, r3, #1
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	4413      	add	r3, r2
 800ef02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef06:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef0c:	e01b      	b.n	800ef46 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ef0e:	6a3b      	ldr	r3, [r7, #32]
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ef16:	6a3b      	ldr	r3, [r7, #32]
 800ef18:	3302      	adds	r3, #2
 800ef1a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	3301      	adds	r3, #1
 800ef28:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	0a1b      	lsrs	r3, r3, #8
 800ef2e:	b2da      	uxtb	r2, r3
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	3301      	adds	r3, #1
 800ef38:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ef3a:	6a3b      	ldr	r3, [r7, #32]
 800ef3c:	3302      	adds	r3, #2
 800ef3e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	3b01      	subs	r3, #1
 800ef44:	627b      	str	r3, [r7, #36]	; 0x24
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d1e0      	bne.n	800ef0e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ef4c:	88bb      	ldrh	r3, [r7, #4]
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d007      	beq.n	800ef68 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	881b      	ldrh	r3, [r3, #0]
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	701a      	strb	r2, [r3, #0]
  }
}
 800ef68:	bf00      	nop
 800ef6a:	372c      	adds	r7, #44	; 0x2c
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bc80      	pop	{r7}
 800ef70:	4770      	bx	lr
	...

0800ef74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ef78:	4904      	ldr	r1, [pc, #16]	; (800ef8c <MX_FATFS_Init+0x18>)
 800ef7a:	4805      	ldr	r0, [pc, #20]	; (800ef90 <MX_FATFS_Init+0x1c>)
 800ef7c:	f003 fed8 	bl	8012d30 <FATFS_LinkDriver>
 800ef80:	4603      	mov	r3, r0
 800ef82:	461a      	mov	r2, r3
 800ef84:	4b03      	ldr	r3, [pc, #12]	; (800ef94 <MX_FATFS_Init+0x20>)
 800ef86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ef88:	bf00      	nop
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	20000ee0 	.word	0x20000ee0
 800ef90:	0802fbc0 	.word	0x0802fbc0
 800ef94:	20000edc 	.word	0x20000edc

0800ef98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ef98:	b480      	push	{r7}
 800ef9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ef9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bc80      	pop	{r7}
 800efa4:	4770      	bx	lr
	...

0800efa8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800efb2:	f000 f879 	bl	800f0a8 <BSP_SD_IsDetected>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d001      	beq.n	800efc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800efbc:	2301      	movs	r3, #1
 800efbe:	e012      	b.n	800efe6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800efc0:	480b      	ldr	r0, [pc, #44]	; (800eff0 <BSP_SD_Init+0x48>)
 800efc2:	f7f9 ffd1 	bl	8008f68 <HAL_SD_Init>
 800efc6:	4603      	mov	r3, r0
 800efc8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800efca:	79fb      	ldrb	r3, [r7, #7]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d109      	bne.n	800efe4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800efd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800efd4:	4806      	ldr	r0, [pc, #24]	; (800eff0 <BSP_SD_Init+0x48>)
 800efd6:	f7fa fdab 	bl	8009b30 <HAL_SD_ConfigWideBusOperation>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d001      	beq.n	800efe4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800efe4:	79fb      	ldrb	r3, [r7, #7]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3708      	adds	r7, #8
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	20000c94 	.word	0x20000c94

0800eff4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b088      	sub	sp, #32
 800eff8:	af02      	add	r7, sp, #8
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
 800f000:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f002:	2300      	movs	r3, #0
 800f004:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	68f9      	ldr	r1, [r7, #12]
 800f010:	4806      	ldr	r0, [pc, #24]	; (800f02c <BSP_SD_ReadBlocks+0x38>)
 800f012:	f7fa f859 	bl	80090c8 <HAL_SD_ReadBlocks>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d001      	beq.n	800f020 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f01c:	2301      	movs	r3, #1
 800f01e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f020:	7dfb      	ldrb	r3, [r7, #23]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3718      	adds	r7, #24
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	20000c94 	.word	0x20000c94

0800f030 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b088      	sub	sp, #32
 800f034:	af02      	add	r7, sp, #8
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
 800f03c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	9300      	str	r3, [sp, #0]
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	68ba      	ldr	r2, [r7, #8]
 800f04a:	68f9      	ldr	r1, [r7, #12]
 800f04c:	4806      	ldr	r0, [pc, #24]	; (800f068 <BSP_SD_WriteBlocks+0x38>)
 800f04e:	f7fa fa19 	bl	8009484 <HAL_SD_WriteBlocks>
 800f052:	4603      	mov	r3, r0
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3718      	adds	r7, #24
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	20000c94 	.word	0x20000c94

0800f06c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f070:	4805      	ldr	r0, [pc, #20]	; (800f088 <BSP_SD_GetCardState+0x1c>)
 800f072:	f7fa fdf7 	bl	8009c64 <HAL_SD_GetCardState>
 800f076:	4603      	mov	r3, r0
 800f078:	2b04      	cmp	r3, #4
 800f07a:	bf14      	ite	ne
 800f07c:	2301      	movne	r3, #1
 800f07e:	2300      	moveq	r3, #0
 800f080:	b2db      	uxtb	r3, r3
}
 800f082:	4618      	mov	r0, r3
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	20000c94 	.word	0x20000c94

0800f08c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	4803      	ldr	r0, [pc, #12]	; (800f0a4 <BSP_SD_GetCardInfo+0x18>)
 800f098:	f7fa fd1e 	bl	8009ad8 <HAL_SD_GetCardInfo>
}
 800f09c:	bf00      	nop
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	20000c94 	.word	0x20000c94

0800f0a8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800f0b2:	79fb      	ldrb	r3, [r7, #7]
 800f0b4:	b2db      	uxtb	r3, r3
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	370c      	adds	r7, #12
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bc80      	pop	{r7}
 800f0be:	4770      	bx	lr

0800f0c0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800f0cc:	2304      	movs	r3, #4
 800f0ce:	2203      	movs	r2, #3
 800f0d0:	2181      	movs	r1, #129	; 0x81
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f004 f983 	bl	80133de <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800f0de:	2010      	movs	r0, #16
 800f0e0:	f004 fa92 	bl	8013608 <USBD_static_malloc>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d101      	bne.n	800f0fa <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	e005      	b.n	800f106 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f100:	2200      	movs	r2, #0
 800f102:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800f104:	2300      	movs	r3, #0
}
 800f106:	4618      	mov	r0, r3
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	460b      	mov	r3, r1
 800f118:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800f11a:	2181      	movs	r1, #129	; 0x81
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f004 f984 	bl	801342a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d009      	beq.n	800f146 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f138:	4618      	mov	r0, r3
 800f13a:	f004 fa71 	bl	8013620 <USBD_static_free>
    pdev->pClassData = NULL;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2200      	movs	r2, #0
 800f142:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b088      	sub	sp, #32
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f160:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800f162:	2300      	movs	r3, #0
 800f164:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800f166:	2300      	movs	r3, #0
 800f168:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800f16a:	2300      	movs	r3, #0
 800f16c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800f16e:	2300      	movs	r3, #0
 800f170:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d045      	beq.n	800f20a <USBD_HID_Setup+0xba>
 800f17e:	2b20      	cmp	r3, #32
 800f180:	f040 80d3 	bne.w	800f32a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	3b02      	subs	r3, #2
 800f18a:	2b09      	cmp	r3, #9
 800f18c:	d835      	bhi.n	800f1fa <USBD_HID_Setup+0xaa>
 800f18e:	a201      	add	r2, pc, #4	; (adr r2, 800f194 <USBD_HID_Setup+0x44>)
 800f190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f194:	0800f1eb 	.word	0x0800f1eb
 800f198:	0800f1cb 	.word	0x0800f1cb
 800f19c:	0800f1fb 	.word	0x0800f1fb
 800f1a0:	0800f1fb 	.word	0x0800f1fb
 800f1a4:	0800f1fb 	.word	0x0800f1fb
 800f1a8:	0800f1fb 	.word	0x0800f1fb
 800f1ac:	0800f1fb 	.word	0x0800f1fb
 800f1b0:	0800f1fb 	.word	0x0800f1fb
 800f1b4:	0800f1d9 	.word	0x0800f1d9
 800f1b8:	0800f1bd 	.word	0x0800f1bd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	885b      	ldrh	r3, [r3, #2]
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	601a      	str	r2, [r3, #0]
          break;
 800f1c8:	e01e      	b.n	800f208 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f001 f922 	bl	801041a <USBD_CtlSendData>
          break;
 800f1d6:	e017      	b.n	800f208 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	885b      	ldrh	r3, [r3, #2]
 800f1dc:	0a1b      	lsrs	r3, r3, #8
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	605a      	str	r2, [r3, #4]
          break;
 800f1e8:	e00e      	b.n	800f208 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	3304      	adds	r3, #4
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f001 f911 	bl	801041a <USBD_CtlSendData>
          break;
 800f1f8:	e006      	b.n	800f208 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800f1fa:	6839      	ldr	r1, [r7, #0]
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f001 f8a2 	bl	8010346 <USBD_CtlError>
          ret = USBD_FAIL;
 800f202:	2302      	movs	r3, #2
 800f204:	75fb      	strb	r3, [r7, #23]
          break;
 800f206:	bf00      	nop
      }
      break;
 800f208:	e096      	b.n	800f338 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	785b      	ldrb	r3, [r3, #1]
 800f20e:	2b0b      	cmp	r3, #11
 800f210:	f200 8083 	bhi.w	800f31a <USBD_HID_Setup+0x1ca>
 800f214:	a201      	add	r2, pc, #4	; (adr r2, 800f21c <USBD_HID_Setup+0xcc>)
 800f216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f21a:	bf00      	nop
 800f21c:	0800f24d 	.word	0x0800f24d
 800f220:	0800f31b 	.word	0x0800f31b
 800f224:	0800f31b 	.word	0x0800f31b
 800f228:	0800f31b 	.word	0x0800f31b
 800f22c:	0800f31b 	.word	0x0800f31b
 800f230:	0800f31b 	.word	0x0800f31b
 800f234:	0800f275 	.word	0x0800f275
 800f238:	0800f31b 	.word	0x0800f31b
 800f23c:	0800f31b 	.word	0x0800f31b
 800f240:	0800f31b 	.word	0x0800f31b
 800f244:	0800f2cd 	.word	0x0800f2cd
 800f248:	0800f2f5 	.word	0x0800f2f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f252:	2b03      	cmp	r3, #3
 800f254:	d107      	bne.n	800f266 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800f256:	f107 030e 	add.w	r3, r7, #14
 800f25a:	2202      	movs	r2, #2
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f001 f8db 	bl	801041a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f264:	e060      	b.n	800f328 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800f266:	6839      	ldr	r1, [r7, #0]
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f001 f86c 	bl	8010346 <USBD_CtlError>
            ret = USBD_FAIL;
 800f26e:	2302      	movs	r3, #2
 800f270:	75fb      	strb	r3, [r7, #23]
          break;
 800f272:	e059      	b.n	800f328 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	885b      	ldrh	r3, [r3, #2]
 800f278:	0a1b      	lsrs	r3, r3, #8
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	2b22      	cmp	r3, #34	; 0x22
 800f27e:	d108      	bne.n	800f292 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	88db      	ldrh	r3, [r3, #6]
 800f284:	2b4a      	cmp	r3, #74	; 0x4a
 800f286:	bf28      	it	cs
 800f288:	234a      	movcs	r3, #74	; 0x4a
 800f28a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800f28c:	4b2d      	ldr	r3, [pc, #180]	; (800f344 <USBD_HID_Setup+0x1f4>)
 800f28e:	61bb      	str	r3, [r7, #24]
 800f290:	e015      	b.n	800f2be <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	885b      	ldrh	r3, [r3, #2]
 800f296:	0a1b      	lsrs	r3, r3, #8
 800f298:	b29b      	uxth	r3, r3
 800f29a:	2b21      	cmp	r3, #33	; 0x21
 800f29c:	d108      	bne.n	800f2b0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800f29e:	4b2a      	ldr	r3, [pc, #168]	; (800f348 <USBD_HID_Setup+0x1f8>)
 800f2a0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	88db      	ldrh	r3, [r3, #6]
 800f2a6:	2b09      	cmp	r3, #9
 800f2a8:	bf28      	it	cs
 800f2aa:	2309      	movcs	r3, #9
 800f2ac:	83fb      	strh	r3, [r7, #30]
 800f2ae:	e006      	b.n	800f2be <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f001 f847 	bl	8010346 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2b8:	2302      	movs	r3, #2
 800f2ba:	75fb      	strb	r3, [r7, #23]
            break;
 800f2bc:	e034      	b.n	800f328 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800f2be:	8bfb      	ldrh	r3, [r7, #30]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	69b9      	ldr	r1, [r7, #24]
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f001 f8a8 	bl	801041a <USBD_CtlSendData>
          break;
 800f2ca:	e02d      	b.n	800f328 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d2:	2b03      	cmp	r3, #3
 800f2d4:	d107      	bne.n	800f2e6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	3308      	adds	r3, #8
 800f2da:	2201      	movs	r2, #1
 800f2dc:	4619      	mov	r1, r3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f001 f89b 	bl	801041a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f2e4:	e020      	b.n	800f328 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f001 f82c 	bl	8010346 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2ee:	2302      	movs	r3, #2
 800f2f0:	75fb      	strb	r3, [r7, #23]
          break;
 800f2f2:	e019      	b.n	800f328 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2fa:	2b03      	cmp	r3, #3
 800f2fc:	d106      	bne.n	800f30c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	885b      	ldrh	r3, [r3, #2]
 800f302:	b2db      	uxtb	r3, r3
 800f304:	461a      	mov	r2, r3
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f30a:	e00d      	b.n	800f328 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f001 f819 	bl	8010346 <USBD_CtlError>
            ret = USBD_FAIL;
 800f314:	2302      	movs	r3, #2
 800f316:	75fb      	strb	r3, [r7, #23]
          break;
 800f318:	e006      	b.n	800f328 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800f31a:	6839      	ldr	r1, [r7, #0]
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f001 f812 	bl	8010346 <USBD_CtlError>
          ret = USBD_FAIL;
 800f322:	2302      	movs	r3, #2
 800f324:	75fb      	strb	r3, [r7, #23]
          break;
 800f326:	bf00      	nop
      }
      break;
 800f328:	e006      	b.n	800f338 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f001 f80a 	bl	8010346 <USBD_CtlError>
      ret = USBD_FAIL;
 800f332:	2302      	movs	r3, #2
 800f334:	75fb      	strb	r3, [r7, #23]
      break;
 800f336:	bf00      	nop
  }

  return ret;
 800f338:	7dfb      	ldrb	r3, [r7, #23]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3720      	adds	r7, #32
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	200000d8 	.word	0x200000d8
 800f348:	200000c0 	.word	0x200000c0

0800f34c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2222      	movs	r2, #34	; 0x22
 800f358:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800f35a:	4b03      	ldr	r3, [pc, #12]	; (800f368 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	bc80      	pop	{r7}
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	20000054 	.word	0x20000054

0800f36c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2222      	movs	r2, #34	; 0x22
 800f378:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800f37a:	4b03      	ldr	r3, [pc, #12]	; (800f388 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	bc80      	pop	{r7}
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	20000078 	.word	0x20000078

0800f38c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2222      	movs	r2, #34	; 0x22
 800f398:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800f39a:	4b03      	ldr	r3, [pc, #12]	; (800f3a8 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bc80      	pop	{r7}
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	2000009c 	.word	0x2000009c

0800f3ac <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3be:	2200      	movs	r2, #0
 800f3c0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800f3c2:	2300      	movs	r3, #0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	370c      	adds	r7, #12
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bc80      	pop	{r7}
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	220a      	movs	r2, #10
 800f3dc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800f3de:	4b03      	ldr	r3, [pc, #12]	; (800f3ec <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bc80      	pop	{r7}
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	200000cc 	.word	0x200000cc

0800f3f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d101      	bne.n	800f408 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f404:	2302      	movs	r3, #2
 800f406:	e01a      	b.n	800f43e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d003      	beq.n	800f428 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	79fa      	ldrb	r2, [r7, #7]
 800f434:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800f436:	68f8      	ldr	r0, [r7, #12]
 800f438:	f003 ff6e 	bl	8013318 <USBD_LL_Init>

  return USBD_OK;
 800f43c:	2300      	movs	r3, #0
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f446:	b480      	push	{r7}
 800f448:	b085      	sub	sp, #20
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800f450:	2300      	movs	r3, #0
 800f452:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d006      	beq.n	800f468 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	683a      	ldr	r2, [r7, #0]
 800f45e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800f462:	2300      	movs	r3, #0
 800f464:	73fb      	strb	r3, [r7, #15]
 800f466:	e001      	b.n	800f46c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800f468:	2302      	movs	r3, #2
 800f46a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	bc80      	pop	{r7}
 800f476:	4770      	bx	lr

0800f478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b082      	sub	sp, #8
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f003 ff91 	bl	80133a8 <USBD_LL_Start>

  return USBD_OK;
 800f486:	2300      	movs	r3, #0
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f498:	2300      	movs	r3, #0
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	370c      	adds	r7, #12
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bc80      	pop	{r7}
 800f4a2:	4770      	bx	lr

0800f4a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	460b      	mov	r3, r1
 800f4ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00c      	beq.n	800f4d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	78fa      	ldrb	r2, [r7, #3]
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	4798      	blx	r3
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d101      	bne.n	800f4d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b082      	sub	sp, #8
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	78fa      	ldrb	r2, [r7, #3]
 800f4f8:	4611      	mov	r1, r2
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	4798      	blx	r3

  return USBD_OK;
 800f4fe:	2300      	movs	r3, #0
}
 800f500:	4618      	mov	r0, r3
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	4618      	mov	r0, r3
 800f51c:	f000 fed7 	bl	80102ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f52e:	461a      	mov	r2, r3
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f53c:	f003 031f 	and.w	r3, r3, #31
 800f540:	2b02      	cmp	r3, #2
 800f542:	d016      	beq.n	800f572 <USBD_LL_SetupStage+0x6a>
 800f544:	2b02      	cmp	r3, #2
 800f546:	d81c      	bhi.n	800f582 <USBD_LL_SetupStage+0x7a>
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d002      	beq.n	800f552 <USBD_LL_SetupStage+0x4a>
 800f54c:	2b01      	cmp	r3, #1
 800f54e:	d008      	beq.n	800f562 <USBD_LL_SetupStage+0x5a>
 800f550:	e017      	b.n	800f582 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f558:	4619      	mov	r1, r3
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f9ca 	bl	800f8f4 <USBD_StdDevReq>
      break;
 800f560:	e01a      	b.n	800f598 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f568:	4619      	mov	r1, r3
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fa2c 	bl	800f9c8 <USBD_StdItfReq>
      break;
 800f570:	e012      	b.n	800f598 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800f578:	4619      	mov	r1, r3
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 fa6c 	bl	800fa58 <USBD_StdEPReq>
      break;
 800f580:	e00a      	b.n	800f598 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800f588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	4619      	mov	r1, r3
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f003 ff69 	bl	8013468 <USBD_LL_StallEP>
      break;
 800f596:	bf00      	nop
  }

  return USBD_OK;
 800f598:	2300      	movs	r3, #0
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b086      	sub	sp, #24
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	60f8      	str	r0, [r7, #12]
 800f5aa:	460b      	mov	r3, r1
 800f5ac:	607a      	str	r2, [r7, #4]
 800f5ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f5b0:	7afb      	ldrb	r3, [r7, #11]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d14b      	bne.n	800f64e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f5bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f5c4:	2b03      	cmp	r3, #3
 800f5c6:	d134      	bne.n	800f632 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	68da      	ldr	r2, [r3, #12]
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	691b      	ldr	r3, [r3, #16]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d919      	bls.n	800f608 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	68da      	ldr	r2, [r3, #12]
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	691b      	ldr	r3, [r3, #16]
 800f5dc:	1ad2      	subs	r2, r2, r3
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	68da      	ldr	r2, [r3, #12]
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d203      	bcs.n	800f5f6 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	e002      	b.n	800f5fc <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800f5fa:	b29b      	uxth	r3, r3
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	6879      	ldr	r1, [r7, #4]
 800f600:	68f8      	ldr	r0, [r7, #12]
 800f602:	f000 ff38 	bl	8010476 <USBD_CtlContinueRx>
 800f606:	e038      	b.n	800f67a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f60e:	691b      	ldr	r3, [r3, #16]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00a      	beq.n	800f62a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f61a:	2b03      	cmp	r3, #3
 800f61c:	d105      	bne.n	800f62a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f000 ff35 	bl	801049a <USBD_CtlSendStatus>
 800f630:	e023      	b.n	800f67a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f638:	2b05      	cmp	r3, #5
 800f63a:	d11e      	bne.n	800f67a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2200      	movs	r2, #0
 800f640:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800f644:	2100      	movs	r1, #0
 800f646:	68f8      	ldr	r0, [r7, #12]
 800f648:	f003 ff0e 	bl	8013468 <USBD_LL_StallEP>
 800f64c:	e015      	b.n	800f67a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00d      	beq.n	800f676 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f660:	2b03      	cmp	r3, #3
 800f662:	d108      	bne.n	800f676 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f66a:	699b      	ldr	r3, [r3, #24]
 800f66c:	7afa      	ldrb	r2, [r7, #11]
 800f66e:	4611      	mov	r1, r2
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	4798      	blx	r3
 800f674:	e001      	b.n	800f67a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f676:	2302      	movs	r3, #2
 800f678:	e000      	b.n	800f67c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3718      	adds	r7, #24
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	460b      	mov	r3, r1
 800f68e:	607a      	str	r2, [r7, #4]
 800f690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f692:	7afb      	ldrb	r3, [r7, #11]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d17f      	bne.n	800f798 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	3314      	adds	r3, #20
 800f69c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6a4:	2b02      	cmp	r3, #2
 800f6a6:	d15c      	bne.n	800f762 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	68da      	ldr	r2, [r3, #12]
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d915      	bls.n	800f6e0 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	68da      	ldr	r2, [r3, #12]
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	1ad2      	subs	r2, r2, r3
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	68db      	ldr	r3, [r3, #12]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	6879      	ldr	r1, [r7, #4]
 800f6cc:	68f8      	ldr	r0, [r7, #12]
 800f6ce:	f000 fec0 	bl	8010452 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f003 ff71 	bl	80135c0 <USBD_LL_PrepareReceive>
 800f6de:	e04e      	b.n	800f77e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	6912      	ldr	r2, [r2, #16]
 800f6e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6ec:	fb01 f202 	mul.w	r2, r1, r2
 800f6f0:	1a9b      	subs	r3, r3, r2
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d11c      	bne.n	800f730 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	689a      	ldr	r2, [r3, #8]
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d316      	bcc.n	800f730 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	689a      	ldr	r2, [r3, #8]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d20f      	bcs.n	800f730 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f710:	2200      	movs	r2, #0
 800f712:	2100      	movs	r1, #0
 800f714:	68f8      	ldr	r0, [r7, #12]
 800f716:	f000 fe9c 	bl	8010452 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f722:	2300      	movs	r3, #0
 800f724:	2200      	movs	r2, #0
 800f726:	2100      	movs	r1, #0
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f003 ff49 	bl	80135c0 <USBD_LL_PrepareReceive>
 800f72e:	e026      	b.n	800f77e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d00a      	beq.n	800f752 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f742:	2b03      	cmp	r3, #3
 800f744:	d105      	bne.n	800f752 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f752:	2180      	movs	r1, #128	; 0x80
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f003 fe87 	bl	8013468 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f000 feb0 	bl	80104c0 <USBD_CtlReceiveStatus>
 800f760:	e00d      	b.n	800f77e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f768:	2b04      	cmp	r3, #4
 800f76a:	d004      	beq.n	800f776 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f772:	2b00      	cmp	r3, #0
 800f774:	d103      	bne.n	800f77e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f776:	2180      	movs	r1, #128	; 0x80
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f003 fe75 	bl	8013468 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f784:	2b01      	cmp	r3, #1
 800f786:	d11d      	bne.n	800f7c4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f7ff fe81 	bl	800f490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f796:	e015      	b.n	800f7c4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f79e:	695b      	ldr	r3, [r3, #20]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00d      	beq.n	800f7c0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f7aa:	2b03      	cmp	r3, #3
 800f7ac:	d108      	bne.n	800f7c0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7b4:	695b      	ldr	r3, [r3, #20]
 800f7b6:	7afa      	ldrb	r2, [r7, #11]
 800f7b8:	4611      	mov	r1, r2
 800f7ba:	68f8      	ldr	r0, [r7, #12]
 800f7bc:	4798      	blx	r3
 800f7be:	e001      	b.n	800f7c4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	e000      	b.n	800f7c6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f7c4:	2300      	movs	r3, #0
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3718      	adds	r7, #24
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}

0800f7ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b082      	sub	sp, #8
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f7d6:	2340      	movs	r3, #64	; 0x40
 800f7d8:	2200      	movs	r2, #0
 800f7da:	2100      	movs	r1, #0
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f003 fdfe 	bl	80133de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2240      	movs	r2, #64	; 0x40
 800f7ee:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f7f2:	2340      	movs	r3, #64	; 0x40
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	2180      	movs	r1, #128	; 0x80
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f003 fdf0 	bl	80133de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2201      	movs	r2, #1
 800f802:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2240      	movs	r2, #64	; 0x40
 800f808:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2201      	movs	r2, #1
 800f80e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2200      	movs	r2, #0
 800f816:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d009      	beq.n	800f846 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	6852      	ldr	r2, [r2, #4]
 800f83e:	b2d2      	uxtb	r2, r2
 800f840:	4611      	mov	r1, r2
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	4798      	blx	r3
  }

  return USBD_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	460b      	mov	r3, r1
 800f85a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	78fa      	ldrb	r2, [r7, #3]
 800f860:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	bc80      	pop	{r7}
 800f86c:	4770      	bx	lr

0800f86e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f86e:	b480      	push	{r7}
 800f870:	b083      	sub	sp, #12
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	2204      	movs	r2, #4
 800f886:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	370c      	adds	r7, #12
 800f890:	46bd      	mov	sp, r7
 800f892:	bc80      	pop	{r7}
 800f894:	4770      	bx	lr

0800f896 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f896:	b480      	push	{r7}
 800f898:	b083      	sub	sp, #12
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8a4:	2b04      	cmp	r3, #4
 800f8a6:	d105      	bne.n	800f8b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	370c      	adds	r7, #12
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bc80      	pop	{r7}
 800f8be:	4770      	bx	lr

0800f8c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ce:	2b03      	cmp	r3, #3
 800f8d0:	d10b      	bne.n	800f8ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8d8:	69db      	ldr	r3, [r3, #28]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d005      	beq.n	800f8ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8e4:	69db      	ldr	r3, [r3, #28]
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3708      	adds	r7, #8
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f90a:	2b40      	cmp	r3, #64	; 0x40
 800f90c:	d005      	beq.n	800f91a <USBD_StdDevReq+0x26>
 800f90e:	2b40      	cmp	r3, #64	; 0x40
 800f910:	d84f      	bhi.n	800f9b2 <USBD_StdDevReq+0xbe>
 800f912:	2b00      	cmp	r3, #0
 800f914:	d009      	beq.n	800f92a <USBD_StdDevReq+0x36>
 800f916:	2b20      	cmp	r3, #32
 800f918:	d14b      	bne.n	800f9b2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	6839      	ldr	r1, [r7, #0]
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	4798      	blx	r3
      break;
 800f928:	e048      	b.n	800f9bc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	785b      	ldrb	r3, [r3, #1]
 800f92e:	2b09      	cmp	r3, #9
 800f930:	d839      	bhi.n	800f9a6 <USBD_StdDevReq+0xb2>
 800f932:	a201      	add	r2, pc, #4	; (adr r2, 800f938 <USBD_StdDevReq+0x44>)
 800f934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f938:	0800f989 	.word	0x0800f989
 800f93c:	0800f99d 	.word	0x0800f99d
 800f940:	0800f9a7 	.word	0x0800f9a7
 800f944:	0800f993 	.word	0x0800f993
 800f948:	0800f9a7 	.word	0x0800f9a7
 800f94c:	0800f96b 	.word	0x0800f96b
 800f950:	0800f961 	.word	0x0800f961
 800f954:	0800f9a7 	.word	0x0800f9a7
 800f958:	0800f97f 	.word	0x0800f97f
 800f95c:	0800f975 	.word	0x0800f975
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f960:	6839      	ldr	r1, [r7, #0]
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 f9dc 	bl	800fd20 <USBD_GetDescriptor>
          break;
 800f968:	e022      	b.n	800f9b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 fb3f 	bl	800fff0 <USBD_SetAddress>
          break;
 800f972:	e01d      	b.n	800f9b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800f974:	6839      	ldr	r1, [r7, #0]
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fb7e 	bl	8010078 <USBD_SetConfig>
          break;
 800f97c:	e018      	b.n	800f9b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f97e:	6839      	ldr	r1, [r7, #0]
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 fc07 	bl	8010194 <USBD_GetConfig>
          break;
 800f986:	e013      	b.n	800f9b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f988:	6839      	ldr	r1, [r7, #0]
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f000 fc37 	bl	80101fe <USBD_GetStatus>
          break;
 800f990:	e00e      	b.n	800f9b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f992:	6839      	ldr	r1, [r7, #0]
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f000 fc65 	bl	8010264 <USBD_SetFeature>
          break;
 800f99a:	e009      	b.n	800f9b0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f99c:	6839      	ldr	r1, [r7, #0]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 fc74 	bl	801028c <USBD_ClrFeature>
          break;
 800f9a4:	e004      	b.n	800f9b0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fccc 	bl	8010346 <USBD_CtlError>
          break;
 800f9ae:	bf00      	nop
      }
      break;
 800f9b0:	e004      	b.n	800f9bc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800f9b2:	6839      	ldr	r1, [r7, #0]
 800f9b4:	6878      	ldr	r0, [r7, #4]
 800f9b6:	f000 fcc6 	bl	8010346 <USBD_CtlError>
      break;
 800f9ba:	bf00      	nop
  }

  return ret;
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop

0800f9c8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9de:	2b40      	cmp	r3, #64	; 0x40
 800f9e0:	d005      	beq.n	800f9ee <USBD_StdItfReq+0x26>
 800f9e2:	2b40      	cmp	r3, #64	; 0x40
 800f9e4:	d82e      	bhi.n	800fa44 <USBD_StdItfReq+0x7c>
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <USBD_StdItfReq+0x26>
 800f9ea:	2b20      	cmp	r3, #32
 800f9ec:	d12a      	bne.n	800fa44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9f4:	3b01      	subs	r3, #1
 800f9f6:	2b02      	cmp	r3, #2
 800f9f8:	d81d      	bhi.n	800fa36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	889b      	ldrh	r3, [r3, #4]
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d813      	bhi.n	800fa2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa0a:	689b      	ldr	r3, [r3, #8]
 800fa0c:	6839      	ldr	r1, [r7, #0]
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	4798      	blx	r3
 800fa12:	4603      	mov	r3, r0
 800fa14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	88db      	ldrh	r3, [r3, #6]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d110      	bne.n	800fa40 <USBD_StdItfReq+0x78>
 800fa1e:	7bfb      	ldrb	r3, [r7, #15]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10d      	bne.n	800fa40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f000 fd38 	bl	801049a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fa2a:	e009      	b.n	800fa40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800fa2c:	6839      	ldr	r1, [r7, #0]
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 fc89 	bl	8010346 <USBD_CtlError>
          break;
 800fa34:	e004      	b.n	800fa40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fc84 	bl	8010346 <USBD_CtlError>
          break;
 800fa3e:	e000      	b.n	800fa42 <USBD_StdItfReq+0x7a>
          break;
 800fa40:	bf00      	nop
      }
      break;
 800fa42:	e004      	b.n	800fa4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800fa44:	6839      	ldr	r1, [r7, #0]
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 fc7d 	bl	8010346 <USBD_CtlError>
      break;
 800fa4c:	bf00      	nop
  }

  return USBD_OK;
 800fa4e:	2300      	movs	r3, #0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fa62:	2300      	movs	r3, #0
 800fa64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	889b      	ldrh	r3, [r3, #4]
 800fa6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fa74:	2b40      	cmp	r3, #64	; 0x40
 800fa76:	d007      	beq.n	800fa88 <USBD_StdEPReq+0x30>
 800fa78:	2b40      	cmp	r3, #64	; 0x40
 800fa7a:	f200 8146 	bhi.w	800fd0a <USBD_StdEPReq+0x2b2>
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00a      	beq.n	800fa98 <USBD_StdEPReq+0x40>
 800fa82:	2b20      	cmp	r3, #32
 800fa84:	f040 8141 	bne.w	800fd0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	6839      	ldr	r1, [r7, #0]
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	4798      	blx	r3
      break;
 800fa96:	e13d      	b.n	800fd14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800faa0:	2b20      	cmp	r3, #32
 800faa2:	d10a      	bne.n	800faba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	6839      	ldr	r1, [r7, #0]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	4798      	blx	r3
 800fab2:	4603      	mov	r3, r0
 800fab4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800fab6:	7bfb      	ldrb	r3, [r7, #15]
 800fab8:	e12d      	b.n	800fd16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	785b      	ldrb	r3, [r3, #1]
 800fabe:	2b03      	cmp	r3, #3
 800fac0:	d007      	beq.n	800fad2 <USBD_StdEPReq+0x7a>
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	f300 811b 	bgt.w	800fcfe <USBD_StdEPReq+0x2a6>
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d072      	beq.n	800fbb2 <USBD_StdEPReq+0x15a>
 800facc:	2b01      	cmp	r3, #1
 800face:	d03a      	beq.n	800fb46 <USBD_StdEPReq+0xee>
 800fad0:	e115      	b.n	800fcfe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fad8:	2b02      	cmp	r3, #2
 800fada:	d002      	beq.n	800fae2 <USBD_StdEPReq+0x8a>
 800fadc:	2b03      	cmp	r3, #3
 800fade:	d015      	beq.n	800fb0c <USBD_StdEPReq+0xb4>
 800fae0:	e02b      	b.n	800fb3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fae2:	7bbb      	ldrb	r3, [r7, #14]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00c      	beq.n	800fb02 <USBD_StdEPReq+0xaa>
 800fae8:	7bbb      	ldrb	r3, [r7, #14]
 800faea:	2b80      	cmp	r3, #128	; 0x80
 800faec:	d009      	beq.n	800fb02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800faee:	7bbb      	ldrb	r3, [r7, #14]
 800faf0:	4619      	mov	r1, r3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f003 fcb8 	bl	8013468 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800faf8:	2180      	movs	r1, #128	; 0x80
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f003 fcb4 	bl	8013468 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fb00:	e020      	b.n	800fb44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800fb02:	6839      	ldr	r1, [r7, #0]
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 fc1e 	bl	8010346 <USBD_CtlError>
              break;
 800fb0a:	e01b      	b.n	800fb44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	885b      	ldrh	r3, [r3, #2]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d10e      	bne.n	800fb32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800fb14:	7bbb      	ldrb	r3, [r7, #14]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00b      	beq.n	800fb32 <USBD_StdEPReq+0xda>
 800fb1a:	7bbb      	ldrb	r3, [r7, #14]
 800fb1c:	2b80      	cmp	r3, #128	; 0x80
 800fb1e:	d008      	beq.n	800fb32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	88db      	ldrh	r3, [r3, #6]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d104      	bne.n	800fb32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800fb28:	7bbb      	ldrb	r3, [r7, #14]
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f003 fc9b 	bl	8013468 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 fcb1 	bl	801049a <USBD_CtlSendStatus>

              break;
 800fb38:	e004      	b.n	800fb44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800fb3a:	6839      	ldr	r1, [r7, #0]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 fc02 	bl	8010346 <USBD_CtlError>
              break;
 800fb42:	bf00      	nop
          }
          break;
 800fb44:	e0e0      	b.n	800fd08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb4c:	2b02      	cmp	r3, #2
 800fb4e:	d002      	beq.n	800fb56 <USBD_StdEPReq+0xfe>
 800fb50:	2b03      	cmp	r3, #3
 800fb52:	d015      	beq.n	800fb80 <USBD_StdEPReq+0x128>
 800fb54:	e026      	b.n	800fba4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb56:	7bbb      	ldrb	r3, [r7, #14]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00c      	beq.n	800fb76 <USBD_StdEPReq+0x11e>
 800fb5c:	7bbb      	ldrb	r3, [r7, #14]
 800fb5e:	2b80      	cmp	r3, #128	; 0x80
 800fb60:	d009      	beq.n	800fb76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800fb62:	7bbb      	ldrb	r3, [r7, #14]
 800fb64:	4619      	mov	r1, r3
 800fb66:	6878      	ldr	r0, [r7, #4]
 800fb68:	f003 fc7e 	bl	8013468 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800fb6c:	2180      	movs	r1, #128	; 0x80
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f003 fc7a 	bl	8013468 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fb74:	e01c      	b.n	800fbb0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f000 fbe4 	bl	8010346 <USBD_CtlError>
              break;
 800fb7e:	e017      	b.n	800fbb0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	885b      	ldrh	r3, [r3, #2]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d112      	bne.n	800fbae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fb88:	7bbb      	ldrb	r3, [r7, #14]
 800fb8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d004      	beq.n	800fb9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800fb92:	7bbb      	ldrb	r3, [r7, #14]
 800fb94:	4619      	mov	r1, r3
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f003 fc85 	bl	80134a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f000 fc7c 	bl	801049a <USBD_CtlSendStatus>
              }
              break;
 800fba2:	e004      	b.n	800fbae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800fba4:	6839      	ldr	r1, [r7, #0]
 800fba6:	6878      	ldr	r0, [r7, #4]
 800fba8:	f000 fbcd 	bl	8010346 <USBD_CtlError>
              break;
 800fbac:	e000      	b.n	800fbb0 <USBD_StdEPReq+0x158>
              break;
 800fbae:	bf00      	nop
          }
          break;
 800fbb0:	e0aa      	b.n	800fd08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d002      	beq.n	800fbc2 <USBD_StdEPReq+0x16a>
 800fbbc:	2b03      	cmp	r3, #3
 800fbbe:	d032      	beq.n	800fc26 <USBD_StdEPReq+0x1ce>
 800fbc0:	e097      	b.n	800fcf2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbc2:	7bbb      	ldrb	r3, [r7, #14]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d007      	beq.n	800fbd8 <USBD_StdEPReq+0x180>
 800fbc8:	7bbb      	ldrb	r3, [r7, #14]
 800fbca:	2b80      	cmp	r3, #128	; 0x80
 800fbcc:	d004      	beq.n	800fbd8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 fbb8 	bl	8010346 <USBD_CtlError>
                break;
 800fbd6:	e091      	b.n	800fcfc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	da0b      	bge.n	800fbf8 <USBD_StdEPReq+0x1a0>
 800fbe0:	7bbb      	ldrb	r3, [r7, #14]
 800fbe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbe6:	4613      	mov	r3, r2
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	4413      	add	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	3310      	adds	r3, #16
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	e00b      	b.n	800fc10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fbf8:	7bbb      	ldrb	r3, [r7, #14]
 800fbfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbfe:	4613      	mov	r3, r2
 800fc00:	009b      	lsls	r3, r3, #2
 800fc02:	4413      	add	r3, r2
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fc0a:	687a      	ldr	r2, [r7, #4]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	3304      	adds	r3, #4
 800fc10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	2200      	movs	r2, #0
 800fc16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	2202      	movs	r2, #2
 800fc1c:	4619      	mov	r1, r3
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fbfb 	bl	801041a <USBD_CtlSendData>
              break;
 800fc24:	e06a      	b.n	800fcfc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fc26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	da11      	bge.n	800fc52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc2e:	7bbb      	ldrb	r3, [r7, #14]
 800fc30:	f003 020f 	and.w	r2, r3, #15
 800fc34:	6879      	ldr	r1, [r7, #4]
 800fc36:	4613      	mov	r3, r2
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	4413      	add	r3, r2
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	440b      	add	r3, r1
 800fc40:	3318      	adds	r3, #24
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d117      	bne.n	800fc78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800fc48:	6839      	ldr	r1, [r7, #0]
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 fb7b 	bl	8010346 <USBD_CtlError>
                  break;
 800fc50:	e054      	b.n	800fcfc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc52:	7bbb      	ldrb	r3, [r7, #14]
 800fc54:	f003 020f 	and.w	r2, r3, #15
 800fc58:	6879      	ldr	r1, [r7, #4]
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	4413      	add	r3, r2
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	440b      	add	r3, r1
 800fc64:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d104      	bne.n	800fc78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fb68 	bl	8010346 <USBD_CtlError>
                  break;
 800fc76:	e041      	b.n	800fcfc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	da0b      	bge.n	800fc98 <USBD_StdEPReq+0x240>
 800fc80:	7bbb      	ldrb	r3, [r7, #14]
 800fc82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc86:	4613      	mov	r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	4413      	add	r3, r2
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	3310      	adds	r3, #16
 800fc90:	687a      	ldr	r2, [r7, #4]
 800fc92:	4413      	add	r3, r2
 800fc94:	3304      	adds	r3, #4
 800fc96:	e00b      	b.n	800fcb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fc98:	7bbb      	ldrb	r3, [r7, #14]
 800fc9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc9e:	4613      	mov	r3, r2
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	4413      	add	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	4413      	add	r3, r2
 800fcae:	3304      	adds	r3, #4
 800fcb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fcb2:	7bbb      	ldrb	r3, [r7, #14]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d002      	beq.n	800fcbe <USBD_StdEPReq+0x266>
 800fcb8:	7bbb      	ldrb	r3, [r7, #14]
 800fcba:	2b80      	cmp	r3, #128	; 0x80
 800fcbc:	d103      	bne.n	800fcc6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	e00e      	b.n	800fce4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800fcc6:	7bbb      	ldrb	r3, [r7, #14]
 800fcc8:	4619      	mov	r1, r3
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f003 fc0a 	bl	80134e4 <USBD_LL_IsStallEP>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d003      	beq.n	800fcde <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	601a      	str	r2, [r3, #0]
 800fcdc:	e002      	b.n	800fce4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2200      	movs	r2, #0
 800fce2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	2202      	movs	r2, #2
 800fce8:	4619      	mov	r1, r3
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 fb95 	bl	801041a <USBD_CtlSendData>
              break;
 800fcf0:	e004      	b.n	800fcfc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800fcf2:	6839      	ldr	r1, [r7, #0]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 fb26 	bl	8010346 <USBD_CtlError>
              break;
 800fcfa:	bf00      	nop
          }
          break;
 800fcfc:	e004      	b.n	800fd08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800fcfe:	6839      	ldr	r1, [r7, #0]
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 fb20 	bl	8010346 <USBD_CtlError>
          break;
 800fd06:	bf00      	nop
      }
      break;
 800fd08:	e004      	b.n	800fd14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 fb1a 	bl	8010346 <USBD_CtlError>
      break;
 800fd12:	bf00      	nop
  }

  return ret;
 800fd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
	...

0800fd20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fd32:	2300      	movs	r3, #0
 800fd34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	885b      	ldrh	r3, [r3, #2]
 800fd3a:	0a1b      	lsrs	r3, r3, #8
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	3b01      	subs	r3, #1
 800fd40:	2b06      	cmp	r3, #6
 800fd42:	f200 8128 	bhi.w	800ff96 <USBD_GetDescriptor+0x276>
 800fd46:	a201      	add	r2, pc, #4	; (adr r2, 800fd4c <USBD_GetDescriptor+0x2c>)
 800fd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4c:	0800fd69 	.word	0x0800fd69
 800fd50:	0800fd81 	.word	0x0800fd81
 800fd54:	0800fdc1 	.word	0x0800fdc1
 800fd58:	0800ff97 	.word	0x0800ff97
 800fd5c:	0800ff97 	.word	0x0800ff97
 800fd60:	0800ff37 	.word	0x0800ff37
 800fd64:	0800ff63 	.word	0x0800ff63
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	7c12      	ldrb	r2, [r2, #16]
 800fd74:	f107 0108 	add.w	r1, r7, #8
 800fd78:	4610      	mov	r0, r2
 800fd7a:	4798      	blx	r3
 800fd7c:	60f8      	str	r0, [r7, #12]
      break;
 800fd7e:	e112      	b.n	800ffa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	7c1b      	ldrb	r3, [r3, #16]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d10d      	bne.n	800fda4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd90:	f107 0208 	add.w	r2, r7, #8
 800fd94:	4610      	mov	r0, r2
 800fd96:	4798      	blx	r3
 800fd98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	2202      	movs	r2, #2
 800fda0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fda2:	e100      	b.n	800ffa6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdac:	f107 0208 	add.w	r2, r7, #8
 800fdb0:	4610      	mov	r0, r2
 800fdb2:	4798      	blx	r3
 800fdb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	2202      	movs	r2, #2
 800fdbc:	701a      	strb	r2, [r3, #0]
      break;
 800fdbe:	e0f2      	b.n	800ffa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	885b      	ldrh	r3, [r3, #2]
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b05      	cmp	r3, #5
 800fdc8:	f200 80ac 	bhi.w	800ff24 <USBD_GetDescriptor+0x204>
 800fdcc:	a201      	add	r2, pc, #4	; (adr r2, 800fdd4 <USBD_GetDescriptor+0xb4>)
 800fdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd2:	bf00      	nop
 800fdd4:	0800fded 	.word	0x0800fded
 800fdd8:	0800fe21 	.word	0x0800fe21
 800fddc:	0800fe55 	.word	0x0800fe55
 800fde0:	0800fe89 	.word	0x0800fe89
 800fde4:	0800febd 	.word	0x0800febd
 800fde8:	0800fef1 	.word	0x0800fef1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00b      	beq.n	800fe10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	687a      	ldr	r2, [r7, #4]
 800fe02:	7c12      	ldrb	r2, [r2, #16]
 800fe04:	f107 0108 	add.w	r1, r7, #8
 800fe08:	4610      	mov	r0, r2
 800fe0a:	4798      	blx	r3
 800fe0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe0e:	e091      	b.n	800ff34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fe10:	6839      	ldr	r1, [r7, #0]
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 fa97 	bl	8010346 <USBD_CtlError>
            err++;
 800fe18:	7afb      	ldrb	r3, [r7, #11]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	72fb      	strb	r3, [r7, #11]
          break;
 800fe1e:	e089      	b.n	800ff34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00b      	beq.n	800fe44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fe32:	689b      	ldr	r3, [r3, #8]
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	7c12      	ldrb	r2, [r2, #16]
 800fe38:	f107 0108 	add.w	r1, r7, #8
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	4798      	blx	r3
 800fe40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe42:	e077      	b.n	800ff34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fe44:	6839      	ldr	r1, [r7, #0]
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 fa7d 	bl	8010346 <USBD_CtlError>
            err++;
 800fe4c:	7afb      	ldrb	r3, [r7, #11]
 800fe4e:	3301      	adds	r3, #1
 800fe50:	72fb      	strb	r3, [r7, #11]
          break;
 800fe52:	e06f      	b.n	800ff34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00b      	beq.n	800fe78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	7c12      	ldrb	r2, [r2, #16]
 800fe6c:	f107 0108 	add.w	r1, r7, #8
 800fe70:	4610      	mov	r0, r2
 800fe72:	4798      	blx	r3
 800fe74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe76:	e05d      	b.n	800ff34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fe78:	6839      	ldr	r1, [r7, #0]
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f000 fa63 	bl	8010346 <USBD_CtlError>
            err++;
 800fe80:	7afb      	ldrb	r3, [r7, #11]
 800fe82:	3301      	adds	r3, #1
 800fe84:	72fb      	strb	r3, [r7, #11]
          break;
 800fe86:	e055      	b.n	800ff34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fe8e:	691b      	ldr	r3, [r3, #16]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d00b      	beq.n	800feac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fe9a:	691b      	ldr	r3, [r3, #16]
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	7c12      	ldrb	r2, [r2, #16]
 800fea0:	f107 0108 	add.w	r1, r7, #8
 800fea4:	4610      	mov	r0, r2
 800fea6:	4798      	blx	r3
 800fea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800feaa:	e043      	b.n	800ff34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800feac:	6839      	ldr	r1, [r7, #0]
 800feae:	6878      	ldr	r0, [r7, #4]
 800feb0:	f000 fa49 	bl	8010346 <USBD_CtlError>
            err++;
 800feb4:	7afb      	ldrb	r3, [r7, #11]
 800feb6:	3301      	adds	r3, #1
 800feb8:	72fb      	strb	r3, [r7, #11]
          break;
 800feba:	e03b      	b.n	800ff34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fec2:	695b      	ldr	r3, [r3, #20]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00b      	beq.n	800fee0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fece:	695b      	ldr	r3, [r3, #20]
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	7c12      	ldrb	r2, [r2, #16]
 800fed4:	f107 0108 	add.w	r1, r7, #8
 800fed8:	4610      	mov	r0, r2
 800feda:	4798      	blx	r3
 800fedc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fede:	e029      	b.n	800ff34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fee0:	6839      	ldr	r1, [r7, #0]
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fa2f 	bl	8010346 <USBD_CtlError>
            err++;
 800fee8:	7afb      	ldrb	r3, [r7, #11]
 800feea:	3301      	adds	r3, #1
 800feec:	72fb      	strb	r3, [r7, #11]
          break;
 800feee:	e021      	b.n	800ff34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800fef6:	699b      	ldr	r3, [r3, #24]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00b      	beq.n	800ff14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ff02:	699b      	ldr	r3, [r3, #24]
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	7c12      	ldrb	r2, [r2, #16]
 800ff08:	f107 0108 	add.w	r1, r7, #8
 800ff0c:	4610      	mov	r0, r2
 800ff0e:	4798      	blx	r3
 800ff10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff12:	e00f      	b.n	800ff34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ff14:	6839      	ldr	r1, [r7, #0]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 fa15 	bl	8010346 <USBD_CtlError>
            err++;
 800ff1c:	7afb      	ldrb	r3, [r7, #11]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	72fb      	strb	r3, [r7, #11]
          break;
 800ff22:	e007      	b.n	800ff34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ff24:	6839      	ldr	r1, [r7, #0]
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 fa0d 	bl	8010346 <USBD_CtlError>
          err++;
 800ff2c:	7afb      	ldrb	r3, [r7, #11]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800ff32:	e038      	b.n	800ffa6 <USBD_GetDescriptor+0x286>
 800ff34:	e037      	b.n	800ffa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	7c1b      	ldrb	r3, [r3, #16]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d109      	bne.n	800ff52 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff46:	f107 0208 	add.w	r2, r7, #8
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	4798      	blx	r3
 800ff4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff50:	e029      	b.n	800ffa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ff52:	6839      	ldr	r1, [r7, #0]
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f000 f9f6 	bl	8010346 <USBD_CtlError>
        err++;
 800ff5a:	7afb      	ldrb	r3, [r7, #11]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ff60:	e021      	b.n	800ffa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	7c1b      	ldrb	r3, [r3, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10d      	bne.n	800ff86 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff72:	f107 0208 	add.w	r2, r7, #8
 800ff76:	4610      	mov	r0, r2
 800ff78:	4798      	blx	r3
 800ff7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	2207      	movs	r2, #7
 800ff82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff84:	e00f      	b.n	800ffa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ff86:	6839      	ldr	r1, [r7, #0]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 f9dc 	bl	8010346 <USBD_CtlError>
        err++;
 800ff8e:	7afb      	ldrb	r3, [r7, #11]
 800ff90:	3301      	adds	r3, #1
 800ff92:	72fb      	strb	r3, [r7, #11]
      break;
 800ff94:	e007      	b.n	800ffa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ff96:	6839      	ldr	r1, [r7, #0]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f9d4 	bl	8010346 <USBD_CtlError>
      err++;
 800ff9e:	7afb      	ldrb	r3, [r7, #11]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	72fb      	strb	r3, [r7, #11]
      break;
 800ffa4:	bf00      	nop
  }

  if (err != 0U)
 800ffa6:	7afb      	ldrb	r3, [r7, #11]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d11c      	bne.n	800ffe6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800ffac:	893b      	ldrh	r3, [r7, #8]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d011      	beq.n	800ffd6 <USBD_GetDescriptor+0x2b6>
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	88db      	ldrh	r3, [r3, #6]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d00d      	beq.n	800ffd6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	88da      	ldrh	r2, [r3, #6]
 800ffbe:	893b      	ldrh	r3, [r7, #8]
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	bf28      	it	cs
 800ffc4:	4613      	movcs	r3, r2
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ffca:	893b      	ldrh	r3, [r7, #8]
 800ffcc:	461a      	mov	r2, r3
 800ffce:	68f9      	ldr	r1, [r7, #12]
 800ffd0:	6878      	ldr	r0, [r7, #4]
 800ffd2:	f000 fa22 	bl	801041a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	88db      	ldrh	r3, [r3, #6]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d104      	bne.n	800ffe8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 fa5b 	bl	801049a <USBD_CtlSendStatus>
 800ffe4:	e000      	b.n	800ffe8 <USBD_GetDescriptor+0x2c8>
    return;
 800ffe6:	bf00      	nop
    }
  }
}
 800ffe8:	3710      	adds	r7, #16
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop

0800fff0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b084      	sub	sp, #16
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	889b      	ldrh	r3, [r3, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d130      	bne.n	8010064 <USBD_SetAddress+0x74>
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	88db      	ldrh	r3, [r3, #6]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d12c      	bne.n	8010064 <USBD_SetAddress+0x74>
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	885b      	ldrh	r3, [r3, #2]
 801000e:	2b7f      	cmp	r3, #127	; 0x7f
 8010010:	d828      	bhi.n	8010064 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	885b      	ldrh	r3, [r3, #2]
 8010016:	b2db      	uxtb	r3, r3
 8010018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801001c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010024:	2b03      	cmp	r3, #3
 8010026:	d104      	bne.n	8010032 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010028:	6839      	ldr	r1, [r7, #0]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f98b 	bl	8010346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010030:	e01d      	b.n	801006e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	7bfa      	ldrb	r2, [r7, #15]
 8010036:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801003a:	7bfb      	ldrb	r3, [r7, #15]
 801003c:	4619      	mov	r1, r3
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f003 fa7c 	bl	801353c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 fa28 	bl	801049a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d004      	beq.n	801005a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2202      	movs	r2, #2
 8010054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010058:	e009      	b.n	801006e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010062:	e004      	b.n	801006e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010064:	6839      	ldr	r1, [r7, #0]
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 f96d 	bl	8010346 <USBD_CtlError>
  }
}
 801006c:	bf00      	nop
 801006e:	bf00      	nop
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
	...

08010078 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010082:	683b      	ldr	r3, [r7, #0]
 8010084:	885b      	ldrh	r3, [r3, #2]
 8010086:	b2da      	uxtb	r2, r3
 8010088:	4b41      	ldr	r3, [pc, #260]	; (8010190 <USBD_SetConfig+0x118>)
 801008a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801008c:	4b40      	ldr	r3, [pc, #256]	; (8010190 <USBD_SetConfig+0x118>)
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d904      	bls.n	801009e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8010094:	6839      	ldr	r1, [r7, #0]
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f000 f955 	bl	8010346 <USBD_CtlError>
 801009c:	e075      	b.n	801018a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d002      	beq.n	80100ae <USBD_SetConfig+0x36>
 80100a8:	2b03      	cmp	r3, #3
 80100aa:	d023      	beq.n	80100f4 <USBD_SetConfig+0x7c>
 80100ac:	e062      	b.n	8010174 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80100ae:	4b38      	ldr	r3, [pc, #224]	; (8010190 <USBD_SetConfig+0x118>)
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d01a      	beq.n	80100ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80100b6:	4b36      	ldr	r3, [pc, #216]	; (8010190 <USBD_SetConfig+0x118>)
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2203      	movs	r2, #3
 80100c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80100c8:	4b31      	ldr	r3, [pc, #196]	; (8010190 <USBD_SetConfig+0x118>)
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	4619      	mov	r1, r3
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f7ff f9e8 	bl	800f4a4 <USBD_SetClassConfig>
 80100d4:	4603      	mov	r3, r0
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d104      	bne.n	80100e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80100da:	6839      	ldr	r1, [r7, #0]
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 f932 	bl	8010346 <USBD_CtlError>
            return;
 80100e2:	e052      	b.n	801018a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 f9d8 	bl	801049a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80100ea:	e04e      	b.n	801018a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f000 f9d4 	bl	801049a <USBD_CtlSendStatus>
        break;
 80100f2:	e04a      	b.n	801018a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80100f4:	4b26      	ldr	r3, [pc, #152]	; (8010190 <USBD_SetConfig+0x118>)
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d112      	bne.n	8010122 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2202      	movs	r2, #2
 8010100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8010104:	4b22      	ldr	r3, [pc, #136]	; (8010190 <USBD_SetConfig+0x118>)
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	461a      	mov	r2, r3
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801010e:	4b20      	ldr	r3, [pc, #128]	; (8010190 <USBD_SetConfig+0x118>)
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	4619      	mov	r1, r3
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f7ff f9e4 	bl	800f4e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f000 f9bd 	bl	801049a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8010120:	e033      	b.n	801018a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8010122:	4b1b      	ldr	r3, [pc, #108]	; (8010190 <USBD_SetConfig+0x118>)
 8010124:	781b      	ldrb	r3, [r3, #0]
 8010126:	461a      	mov	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	429a      	cmp	r2, r3
 801012e:	d01d      	beq.n	801016c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	b2db      	uxtb	r3, r3
 8010136:	4619      	mov	r1, r3
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7ff f9d2 	bl	800f4e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801013e:	4b14      	ldr	r3, [pc, #80]	; (8010190 <USBD_SetConfig+0x118>)
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	461a      	mov	r2, r3
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8010148:	4b11      	ldr	r3, [pc, #68]	; (8010190 <USBD_SetConfig+0x118>)
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	4619      	mov	r1, r3
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7ff f9a8 	bl	800f4a4 <USBD_SetClassConfig>
 8010154:	4603      	mov	r3, r0
 8010156:	2b02      	cmp	r3, #2
 8010158:	d104      	bne.n	8010164 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801015a:	6839      	ldr	r1, [r7, #0]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 f8f2 	bl	8010346 <USBD_CtlError>
            return;
 8010162:	e012      	b.n	801018a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f000 f998 	bl	801049a <USBD_CtlSendStatus>
        break;
 801016a:	e00e      	b.n	801018a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 f994 	bl	801049a <USBD_CtlSendStatus>
        break;
 8010172:	e00a      	b.n	801018a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8010174:	6839      	ldr	r1, [r7, #0]
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 f8e5 	bl	8010346 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801017c:	4b04      	ldr	r3, [pc, #16]	; (8010190 <USBD_SetConfig+0x118>)
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7ff f9ad 	bl	800f4e2 <USBD_ClrClassConfig>
        break;
 8010188:	bf00      	nop
    }
  }
}
 801018a:	3708      	adds	r7, #8
 801018c:	46bd      	mov	sp, r7
 801018e:	bd80      	pop	{r7, pc}
 8010190:	20000ee4 	.word	0x20000ee4

08010194 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	88db      	ldrh	r3, [r3, #6]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d004      	beq.n	80101b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80101a6:	6839      	ldr	r1, [r7, #0]
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f000 f8cc 	bl	8010346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80101ae:	e022      	b.n	80101f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101b6:	2b02      	cmp	r3, #2
 80101b8:	dc02      	bgt.n	80101c0 <USBD_GetConfig+0x2c>
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	dc03      	bgt.n	80101c6 <USBD_GetConfig+0x32>
 80101be:	e015      	b.n	80101ec <USBD_GetConfig+0x58>
 80101c0:	2b03      	cmp	r3, #3
 80101c2:	d00b      	beq.n	80101dc <USBD_GetConfig+0x48>
 80101c4:	e012      	b.n	80101ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	2200      	movs	r2, #0
 80101ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	3308      	adds	r3, #8
 80101d0:	2201      	movs	r2, #1
 80101d2:	4619      	mov	r1, r3
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 f920 	bl	801041a <USBD_CtlSendData>
        break;
 80101da:	e00c      	b.n	80101f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	3304      	adds	r3, #4
 80101e0:	2201      	movs	r2, #1
 80101e2:	4619      	mov	r1, r3
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 f918 	bl	801041a <USBD_CtlSendData>
        break;
 80101ea:	e004      	b.n	80101f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 f8a9 	bl	8010346 <USBD_CtlError>
        break;
 80101f4:	bf00      	nop
}
 80101f6:	bf00      	nop
 80101f8:	3708      	adds	r7, #8
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}

080101fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101fe:	b580      	push	{r7, lr}
 8010200:	b082      	sub	sp, #8
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
 8010206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801020e:	3b01      	subs	r3, #1
 8010210:	2b02      	cmp	r3, #2
 8010212:	d81e      	bhi.n	8010252 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	88db      	ldrh	r3, [r3, #6]
 8010218:	2b02      	cmp	r3, #2
 801021a:	d004      	beq.n	8010226 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801021c:	6839      	ldr	r1, [r7, #0]
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f891 	bl	8010346 <USBD_CtlError>
        break;
 8010224:	e01a      	b.n	801025c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2201      	movs	r2, #1
 801022a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010232:	2b00      	cmp	r3, #0
 8010234:	d005      	beq.n	8010242 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	68db      	ldr	r3, [r3, #12]
 801023a:	f043 0202 	orr.w	r2, r3, #2
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	330c      	adds	r3, #12
 8010246:	2202      	movs	r2, #2
 8010248:	4619      	mov	r1, r3
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f8e5 	bl	801041a <USBD_CtlSendData>
      break;
 8010250:	e004      	b.n	801025c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8010252:	6839      	ldr	r1, [r7, #0]
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 f876 	bl	8010346 <USBD_CtlError>
      break;
 801025a:	bf00      	nop
  }
}
 801025c:	bf00      	nop
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	885b      	ldrh	r3, [r3, #2]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d106      	bne.n	8010284 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2201      	movs	r2, #1
 801027a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f000 f90b 	bl	801049a <USBD_CtlSendStatus>
  }
}
 8010284:	bf00      	nop
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801029c:	3b01      	subs	r3, #1
 801029e:	2b02      	cmp	r3, #2
 80102a0:	d80b      	bhi.n	80102ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	885b      	ldrh	r3, [r3, #2]
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d10c      	bne.n	80102c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 f8f1 	bl	801049a <USBD_CtlSendStatus>
      }
      break;
 80102b8:	e004      	b.n	80102c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80102ba:	6839      	ldr	r1, [r7, #0]
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 f842 	bl	8010346 <USBD_CtlError>
      break;
 80102c2:	e000      	b.n	80102c6 <USBD_ClrFeature+0x3a>
      break;
 80102c4:	bf00      	nop
  }
}
 80102c6:	bf00      	nop
 80102c8:	3708      	adds	r7, #8
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80102ce:	b480      	push	{r7}
 80102d0:	b083      	sub	sp, #12
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	781a      	ldrb	r2, [r3, #0]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	785a      	ldrb	r2, [r3, #1]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	3302      	adds	r3, #2
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	3303      	adds	r3, #3
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	b29b      	uxth	r3, r3
 80102f8:	021b      	lsls	r3, r3, #8
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	4413      	add	r3, r2
 80102fe:	b29a      	uxth	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	3304      	adds	r3, #4
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	b29a      	uxth	r2, r3
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	3305      	adds	r3, #5
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	b29b      	uxth	r3, r3
 8010314:	021b      	lsls	r3, r3, #8
 8010316:	b29b      	uxth	r3, r3
 8010318:	4413      	add	r3, r2
 801031a:	b29a      	uxth	r2, r3
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	3306      	adds	r3, #6
 8010324:	781b      	ldrb	r3, [r3, #0]
 8010326:	b29a      	uxth	r2, r3
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	3307      	adds	r3, #7
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	b29b      	uxth	r3, r3
 8010330:	021b      	lsls	r3, r3, #8
 8010332:	b29b      	uxth	r3, r3
 8010334:	4413      	add	r3, r2
 8010336:	b29a      	uxth	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	80da      	strh	r2, [r3, #6]

}
 801033c:	bf00      	nop
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	bc80      	pop	{r7}
 8010344:	4770      	bx	lr

08010346 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b082      	sub	sp, #8
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
 801034e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8010350:	2180      	movs	r1, #128	; 0x80
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f003 f888 	bl	8013468 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8010358:	2100      	movs	r1, #0
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f003 f884 	bl	8013468 <USBD_LL_StallEP>
}
 8010360:	bf00      	nop
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b086      	sub	sp, #24
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010374:	2300      	movs	r3, #0
 8010376:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d032      	beq.n	80103e4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801037e:	68f8      	ldr	r0, [r7, #12]
 8010380:	f000 f834 	bl	80103ec <USBD_GetLen>
 8010384:	4603      	mov	r3, r0
 8010386:	3301      	adds	r3, #1
 8010388:	b29b      	uxth	r3, r3
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	b29a      	uxth	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8010392:	7dfb      	ldrb	r3, [r7, #23]
 8010394:	1c5a      	adds	r2, r3, #1
 8010396:	75fa      	strb	r2, [r7, #23]
 8010398:	461a      	mov	r2, r3
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	4413      	add	r3, r2
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	7812      	ldrb	r2, [r2, #0]
 80103a2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80103a4:	7dfb      	ldrb	r3, [r7, #23]
 80103a6:	1c5a      	adds	r2, r3, #1
 80103a8:	75fa      	strb	r2, [r7, #23]
 80103aa:	461a      	mov	r2, r3
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	4413      	add	r3, r2
 80103b0:	2203      	movs	r2, #3
 80103b2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80103b4:	e012      	b.n	80103dc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	1c5a      	adds	r2, r3, #1
 80103ba:	60fa      	str	r2, [r7, #12]
 80103bc:	7dfa      	ldrb	r2, [r7, #23]
 80103be:	1c51      	adds	r1, r2, #1
 80103c0:	75f9      	strb	r1, [r7, #23]
 80103c2:	4611      	mov	r1, r2
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	440a      	add	r2, r1
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80103cc:	7dfb      	ldrb	r3, [r7, #23]
 80103ce:	1c5a      	adds	r2, r3, #1
 80103d0:	75fa      	strb	r2, [r7, #23]
 80103d2:	461a      	mov	r2, r3
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	4413      	add	r3, r2
 80103d8:	2200      	movs	r2, #0
 80103da:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d1e8      	bne.n	80103b6 <USBD_GetString+0x4e>
    }
  }
}
 80103e4:	bf00      	nop
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80103ec:	b480      	push	{r7}
 80103ee:	b085      	sub	sp, #20
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80103f4:	2300      	movs	r3, #0
 80103f6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80103f8:	e005      	b.n	8010406 <USBD_GetLen+0x1a>
  {
    len++;
 80103fa:	7bfb      	ldrb	r3, [r7, #15]
 80103fc:	3301      	adds	r3, #1
 80103fe:	73fb      	strb	r3, [r7, #15]
    buf++;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	3301      	adds	r3, #1
 8010404:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1f5      	bne.n	80103fa <USBD_GetLen+0xe>
  }

  return len;
 801040e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3714      	adds	r7, #20
 8010414:	46bd      	mov	sp, r7
 8010416:	bc80      	pop	{r7}
 8010418:	4770      	bx	lr

0801041a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801041a:	b580      	push	{r7, lr}
 801041c:	b084      	sub	sp, #16
 801041e:	af00      	add	r7, sp, #0
 8010420:	60f8      	str	r0, [r7, #12]
 8010422:	60b9      	str	r1, [r7, #8]
 8010424:	4613      	mov	r3, r2
 8010426:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	2202      	movs	r2, #2
 801042c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010430:	88fa      	ldrh	r2, [r7, #6]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8010436:	88fa      	ldrh	r2, [r7, #6]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801043c:	88fb      	ldrh	r3, [r7, #6]
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	2100      	movs	r1, #0
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f003 f899 	bl	801357a <USBD_LL_Transmit>

  return USBD_OK;
 8010448:	2300      	movs	r3, #0
}
 801044a:	4618      	mov	r0, r3
 801044c:	3710      	adds	r7, #16
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}

08010452 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8010452:	b580      	push	{r7, lr}
 8010454:	b084      	sub	sp, #16
 8010456:	af00      	add	r7, sp, #0
 8010458:	60f8      	str	r0, [r7, #12]
 801045a:	60b9      	str	r1, [r7, #8]
 801045c:	4613      	mov	r3, r2
 801045e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010460:	88fb      	ldrh	r3, [r7, #6]
 8010462:	68ba      	ldr	r2, [r7, #8]
 8010464:	2100      	movs	r1, #0
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f003 f887 	bl	801357a <USBD_LL_Transmit>

  return USBD_OK;
 801046c:	2300      	movs	r3, #0
}
 801046e:	4618      	mov	r0, r3
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b084      	sub	sp, #16
 801047a:	af00      	add	r7, sp, #0
 801047c:	60f8      	str	r0, [r7, #12]
 801047e:	60b9      	str	r1, [r7, #8]
 8010480:	4613      	mov	r3, r2
 8010482:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010484:	88fb      	ldrh	r3, [r7, #6]
 8010486:	68ba      	ldr	r2, [r7, #8]
 8010488:	2100      	movs	r1, #0
 801048a:	68f8      	ldr	r0, [r7, #12]
 801048c:	f003 f898 	bl	80135c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b082      	sub	sp, #8
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2204      	movs	r2, #4
 80104a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80104aa:	2300      	movs	r3, #0
 80104ac:	2200      	movs	r2, #0
 80104ae:	2100      	movs	r1, #0
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f003 f862 	bl	801357a <USBD_LL_Transmit>

  return USBD_OK;
 80104b6:	2300      	movs	r3, #0
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2205      	movs	r2, #5
 80104cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80104d0:	2300      	movs	r3, #0
 80104d2:	2200      	movs	r2, #0
 80104d4:	2100      	movs	r1, #0
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f003 f872 	bl	80135c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
	...

080104e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4603      	mov	r3, r0
 80104f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80104f2:	79fb      	ldrb	r3, [r7, #7]
 80104f4:	4a08      	ldr	r2, [pc, #32]	; (8010518 <disk_status+0x30>)
 80104f6:	009b      	lsls	r3, r3, #2
 80104f8:	4413      	add	r3, r2
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	685b      	ldr	r3, [r3, #4]
 80104fe:	79fa      	ldrb	r2, [r7, #7]
 8010500:	4905      	ldr	r1, [pc, #20]	; (8010518 <disk_status+0x30>)
 8010502:	440a      	add	r2, r1
 8010504:	7a12      	ldrb	r2, [r2, #8]
 8010506:	4610      	mov	r0, r2
 8010508:	4798      	blx	r3
 801050a:	4603      	mov	r3, r0
 801050c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801050e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	20000f08 	.word	0x20000f08

0801051c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b084      	sub	sp, #16
 8010520:	af00      	add	r7, sp, #0
 8010522:	4603      	mov	r3, r0
 8010524:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010526:	2300      	movs	r3, #0
 8010528:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 801052a:	79fb      	ldrb	r3, [r7, #7]
 801052c:	4a0d      	ldr	r2, [pc, #52]	; (8010564 <disk_initialize+0x48>)
 801052e:	5cd3      	ldrb	r3, [r2, r3]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d111      	bne.n	8010558 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8010534:	79fb      	ldrb	r3, [r7, #7]
 8010536:	4a0b      	ldr	r2, [pc, #44]	; (8010564 <disk_initialize+0x48>)
 8010538:	2101      	movs	r1, #1
 801053a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801053c:	79fb      	ldrb	r3, [r7, #7]
 801053e:	4a09      	ldr	r2, [pc, #36]	; (8010564 <disk_initialize+0x48>)
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	4413      	add	r3, r2
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	79fa      	ldrb	r2, [r7, #7]
 801054a:	4906      	ldr	r1, [pc, #24]	; (8010564 <disk_initialize+0x48>)
 801054c:	440a      	add	r2, r1
 801054e:	7a12      	ldrb	r2, [r2, #8]
 8010550:	4610      	mov	r0, r2
 8010552:	4798      	blx	r3
 8010554:	4603      	mov	r3, r0
 8010556:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010558:	7bfb      	ldrb	r3, [r7, #15]
}
 801055a:	4618      	mov	r0, r3
 801055c:	3710      	adds	r7, #16
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop
 8010564:	20000f08 	.word	0x20000f08

08010568 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010568:	b590      	push	{r4, r7, lr}
 801056a:	b087      	sub	sp, #28
 801056c:	af00      	add	r7, sp, #0
 801056e:	60b9      	str	r1, [r7, #8]
 8010570:	607a      	str	r2, [r7, #4]
 8010572:	603b      	str	r3, [r7, #0]
 8010574:	4603      	mov	r3, r0
 8010576:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010578:	7bfb      	ldrb	r3, [r7, #15]
 801057a:	4a0a      	ldr	r2, [pc, #40]	; (80105a4 <disk_read+0x3c>)
 801057c:	009b      	lsls	r3, r3, #2
 801057e:	4413      	add	r3, r2
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	689c      	ldr	r4, [r3, #8]
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	4a07      	ldr	r2, [pc, #28]	; (80105a4 <disk_read+0x3c>)
 8010588:	4413      	add	r3, r2
 801058a:	7a18      	ldrb	r0, [r3, #8]
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	68b9      	ldr	r1, [r7, #8]
 8010592:	47a0      	blx	r4
 8010594:	4603      	mov	r3, r0
 8010596:	75fb      	strb	r3, [r7, #23]
  return res;
 8010598:	7dfb      	ldrb	r3, [r7, #23]
}
 801059a:	4618      	mov	r0, r3
 801059c:	371c      	adds	r7, #28
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd90      	pop	{r4, r7, pc}
 80105a2:	bf00      	nop
 80105a4:	20000f08 	.word	0x20000f08

080105a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80105a8:	b590      	push	{r4, r7, lr}
 80105aa:	b087      	sub	sp, #28
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	60b9      	str	r1, [r7, #8]
 80105b0:	607a      	str	r2, [r7, #4]
 80105b2:	603b      	str	r3, [r7, #0]
 80105b4:	4603      	mov	r3, r0
 80105b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
 80105ba:	4a0a      	ldr	r2, [pc, #40]	; (80105e4 <disk_write+0x3c>)
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	4413      	add	r3, r2
 80105c0:	685b      	ldr	r3, [r3, #4]
 80105c2:	68dc      	ldr	r4, [r3, #12]
 80105c4:	7bfb      	ldrb	r3, [r7, #15]
 80105c6:	4a07      	ldr	r2, [pc, #28]	; (80105e4 <disk_write+0x3c>)
 80105c8:	4413      	add	r3, r2
 80105ca:	7a18      	ldrb	r0, [r3, #8]
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	68b9      	ldr	r1, [r7, #8]
 80105d2:	47a0      	blx	r4
 80105d4:	4603      	mov	r3, r0
 80105d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80105d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	371c      	adds	r7, #28
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd90      	pop	{r4, r7, pc}
 80105e2:	bf00      	nop
 80105e4:	20000f08 	.word	0x20000f08

080105e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	4603      	mov	r3, r0
 80105f0:	603a      	str	r2, [r7, #0]
 80105f2:	71fb      	strb	r3, [r7, #7]
 80105f4:	460b      	mov	r3, r1
 80105f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80105f8:	79fb      	ldrb	r3, [r7, #7]
 80105fa:	4a09      	ldr	r2, [pc, #36]	; (8010620 <disk_ioctl+0x38>)
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	4413      	add	r3, r2
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	79fa      	ldrb	r2, [r7, #7]
 8010606:	4906      	ldr	r1, [pc, #24]	; (8010620 <disk_ioctl+0x38>)
 8010608:	440a      	add	r2, r1
 801060a:	7a10      	ldrb	r0, [r2, #8]
 801060c:	79b9      	ldrb	r1, [r7, #6]
 801060e:	683a      	ldr	r2, [r7, #0]
 8010610:	4798      	blx	r3
 8010612:	4603      	mov	r3, r0
 8010614:	73fb      	strb	r3, [r7, #15]
  return res;
 8010616:	7bfb      	ldrb	r3, [r7, #15]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	20000f08 	.word	0x20000f08

08010624 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010624:	b480      	push	{r7}
 8010626:	b087      	sub	sp, #28
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8010638:	e007      	b.n	801064a <mem_cpy+0x26>
		*d++ = *s++;
 801063a:	693a      	ldr	r2, [r7, #16]
 801063c:	1c53      	adds	r3, r2, #1
 801063e:	613b      	str	r3, [r7, #16]
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	1c59      	adds	r1, r3, #1
 8010644:	6179      	str	r1, [r7, #20]
 8010646:	7812      	ldrb	r2, [r2, #0]
 8010648:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	1e5a      	subs	r2, r3, #1
 801064e:	607a      	str	r2, [r7, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1f2      	bne.n	801063a <mem_cpy+0x16>
}
 8010654:	bf00      	nop
 8010656:	bf00      	nop
 8010658:	371c      	adds	r7, #28
 801065a:	46bd      	mov	sp, r7
 801065c:	bc80      	pop	{r7}
 801065e:	4770      	bx	lr

08010660 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010660:	b480      	push	{r7}
 8010662:	b087      	sub	sp, #28
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8010670:	e005      	b.n	801067e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	1c5a      	adds	r2, r3, #1
 8010676:	617a      	str	r2, [r7, #20]
 8010678:	68ba      	ldr	r2, [r7, #8]
 801067a:	b2d2      	uxtb	r2, r2
 801067c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	1e5a      	subs	r2, r3, #1
 8010682:	607a      	str	r2, [r7, #4]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d1f4      	bne.n	8010672 <mem_set+0x12>
}
 8010688:	bf00      	nop
 801068a:	bf00      	nop
 801068c:	371c      	adds	r7, #28
 801068e:	46bd      	mov	sp, r7
 8010690:	bc80      	pop	{r7}
 8010692:	4770      	bx	lr

08010694 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8010694:	b480      	push	{r7}
 8010696:	b089      	sub	sp, #36	; 0x24
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	61fb      	str	r3, [r7, #28]
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80106a8:	2300      	movs	r3, #0
 80106aa:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80106ac:	bf00      	nop
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	1e5a      	subs	r2, r3, #1
 80106b2:	607a      	str	r2, [r7, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00d      	beq.n	80106d4 <mem_cmp+0x40>
 80106b8:	69fb      	ldr	r3, [r7, #28]
 80106ba:	1c5a      	adds	r2, r3, #1
 80106bc:	61fa      	str	r2, [r7, #28]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	4619      	mov	r1, r3
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	1c5a      	adds	r2, r3, #1
 80106c6:	61ba      	str	r2, [r7, #24]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	1acb      	subs	r3, r1, r3
 80106cc:	617b      	str	r3, [r7, #20]
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d0ec      	beq.n	80106ae <mem_cmp+0x1a>
	return r;
 80106d4:	697b      	ldr	r3, [r7, #20]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3724      	adds	r7, #36	; 0x24
 80106da:	46bd      	mov	sp, r7
 80106dc:	bc80      	pop	{r7}
 80106de:	4770      	bx	lr

080106e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80106ea:	e002      	b.n	80106f2 <chk_chr+0x12>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	3301      	adds	r3, #1
 80106f0:	607b      	str	r3, [r7, #4]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d005      	beq.n	8010706 <chk_chr+0x26>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	461a      	mov	r2, r3
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	4293      	cmp	r3, r2
 8010704:	d1f2      	bne.n	80106ec <chk_chr+0xc>
	return *str;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	781b      	ldrb	r3, [r3, #0]
}
 801070a:	4618      	mov	r0, r3
 801070c:	370c      	adds	r7, #12
 801070e:	46bd      	mov	sp, r7
 8010710:	bc80      	pop	{r7}
 8010712:	4770      	bx	lr

08010714 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010714:	b480      	push	{r7}
 8010716:	b085      	sub	sp, #20
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801071e:	2300      	movs	r3, #0
 8010720:	60bb      	str	r3, [r7, #8]
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	60fb      	str	r3, [r7, #12]
 8010726:	e038      	b.n	801079a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8010728:	492f      	ldr	r1, [pc, #188]	; (80107e8 <chk_lock+0xd4>)
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	4613      	mov	r3, r2
 801072e:	005b      	lsls	r3, r3, #1
 8010730:	4413      	add	r3, r2
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	440b      	add	r3, r1
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d029      	beq.n	8010790 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 801073c:	492a      	ldr	r1, [pc, #168]	; (80107e8 <chk_lock+0xd4>)
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	4613      	mov	r3, r2
 8010742:	005b      	lsls	r3, r3, #1
 8010744:	4413      	add	r3, r2
 8010746:	009b      	lsls	r3, r3, #2
 8010748:	440b      	add	r3, r1
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010752:	429a      	cmp	r2, r3
 8010754:	d11e      	bne.n	8010794 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8010756:	4924      	ldr	r1, [pc, #144]	; (80107e8 <chk_lock+0xd4>)
 8010758:	68fa      	ldr	r2, [r7, #12]
 801075a:	4613      	mov	r3, r2
 801075c:	005b      	lsls	r3, r3, #1
 801075e:	4413      	add	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	440b      	add	r3, r1
 8010764:	3304      	adds	r3, #4
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 801076e:	429a      	cmp	r2, r3
 8010770:	d110      	bne.n	8010794 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8010772:	491d      	ldr	r1, [pc, #116]	; (80107e8 <chk_lock+0xd4>)
 8010774:	68fa      	ldr	r2, [r7, #12]
 8010776:	4613      	mov	r3, r2
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	4413      	add	r3, r2
 801077c:	009b      	lsls	r3, r3, #2
 801077e:	440b      	add	r3, r1
 8010780:	3308      	adds	r3, #8
 8010782:	881a      	ldrh	r2, [r3, #0]
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 801078a:	429a      	cmp	r2, r3
 801078c:	d102      	bne.n	8010794 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801078e:	e007      	b.n	80107a0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8010790:	2301      	movs	r3, #1
 8010792:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	3301      	adds	r3, #1
 8010798:	60fb      	str	r3, [r7, #12]
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b01      	cmp	r3, #1
 801079e:	d9c3      	bls.n	8010728 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d109      	bne.n	80107ba <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d102      	bne.n	80107b2 <chk_lock+0x9e>
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	2b02      	cmp	r3, #2
 80107b0:	d101      	bne.n	80107b6 <chk_lock+0xa2>
 80107b2:	2300      	movs	r3, #0
 80107b4:	e013      	b.n	80107de <chk_lock+0xca>
 80107b6:	2312      	movs	r3, #18
 80107b8:	e011      	b.n	80107de <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d10b      	bne.n	80107d8 <chk_lock+0xc4>
 80107c0:	4909      	ldr	r1, [pc, #36]	; (80107e8 <chk_lock+0xd4>)
 80107c2:	68fa      	ldr	r2, [r7, #12]
 80107c4:	4613      	mov	r3, r2
 80107c6:	005b      	lsls	r3, r3, #1
 80107c8:	4413      	add	r3, r2
 80107ca:	009b      	lsls	r3, r3, #2
 80107cc:	440b      	add	r3, r1
 80107ce:	330a      	adds	r3, #10
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107d6:	d101      	bne.n	80107dc <chk_lock+0xc8>
 80107d8:	2310      	movs	r3, #16
 80107da:	e000      	b.n	80107de <chk_lock+0xca>
 80107dc:	2300      	movs	r3, #0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3714      	adds	r7, #20
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bc80      	pop	{r7}
 80107e6:	4770      	bx	lr
 80107e8:	20000ef0 	.word	0x20000ef0

080107ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80107f2:	2300      	movs	r3, #0
 80107f4:	607b      	str	r3, [r7, #4]
 80107f6:	e002      	b.n	80107fe <enq_lock+0x12>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	3301      	adds	r3, #1
 80107fc:	607b      	str	r3, [r7, #4]
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d809      	bhi.n	8010818 <enq_lock+0x2c>
 8010804:	490a      	ldr	r1, [pc, #40]	; (8010830 <enq_lock+0x44>)
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	4613      	mov	r3, r2
 801080a:	005b      	lsls	r3, r3, #1
 801080c:	4413      	add	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	440b      	add	r3, r1
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1ef      	bne.n	80107f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b02      	cmp	r3, #2
 801081c:	bf14      	ite	ne
 801081e:	2301      	movne	r3, #1
 8010820:	2300      	moveq	r3, #0
 8010822:	b2db      	uxtb	r3, r3
}
 8010824:	4618      	mov	r0, r3
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	bc80      	pop	{r7}
 801082c:	4770      	bx	lr
 801082e:	bf00      	nop
 8010830:	20000ef0 	.word	0x20000ef0

08010834 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010834:	b480      	push	{r7}
 8010836:	b085      	sub	sp, #20
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801083e:	2300      	movs	r3, #0
 8010840:	60fb      	str	r3, [r7, #12]
 8010842:	e02b      	b.n	801089c <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8010844:	4955      	ldr	r1, [pc, #340]	; (801099c <inc_lock+0x168>)
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	4613      	mov	r3, r2
 801084a:	005b      	lsls	r3, r3, #1
 801084c:	4413      	add	r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	440b      	add	r3, r1
 8010852:	681a      	ldr	r2, [r3, #0]
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801085a:	429a      	cmp	r2, r3
 801085c:	d11b      	bne.n	8010896 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 801085e:	494f      	ldr	r1, [pc, #316]	; (801099c <inc_lock+0x168>)
 8010860:	68fa      	ldr	r2, [r7, #12]
 8010862:	4613      	mov	r3, r2
 8010864:	005b      	lsls	r3, r3, #1
 8010866:	4413      	add	r3, r2
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	440b      	add	r3, r1
 801086c:	3304      	adds	r3, #4
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8010876:	429a      	cmp	r2, r3
 8010878:	d10d      	bne.n	8010896 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 801087a:	4948      	ldr	r1, [pc, #288]	; (801099c <inc_lock+0x168>)
 801087c:	68fa      	ldr	r2, [r7, #12]
 801087e:	4613      	mov	r3, r2
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	4413      	add	r3, r2
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	440b      	add	r3, r1
 8010888:	3308      	adds	r3, #8
 801088a:	881a      	ldrh	r2, [r3, #0]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8010892:	429a      	cmp	r2, r3
 8010894:	d006      	beq.n	80108a4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	3301      	adds	r3, #1
 801089a:	60fb      	str	r3, [r7, #12]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d9d0      	bls.n	8010844 <inc_lock+0x10>
 80108a2:	e000      	b.n	80108a6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80108a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d145      	bne.n	8010938 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80108ac:	2300      	movs	r3, #0
 80108ae:	60fb      	str	r3, [r7, #12]
 80108b0:	e002      	b.n	80108b8 <inc_lock+0x84>
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3301      	adds	r3, #1
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d809      	bhi.n	80108d2 <inc_lock+0x9e>
 80108be:	4937      	ldr	r1, [pc, #220]	; (801099c <inc_lock+0x168>)
 80108c0:	68fa      	ldr	r2, [r7, #12]
 80108c2:	4613      	mov	r3, r2
 80108c4:	005b      	lsls	r3, r3, #1
 80108c6:	4413      	add	r3, r2
 80108c8:	009b      	lsls	r3, r3, #2
 80108ca:	440b      	add	r3, r1
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1ef      	bne.n	80108b2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2b02      	cmp	r3, #2
 80108d6:	d101      	bne.n	80108dc <inc_lock+0xa8>
 80108d8:	2300      	movs	r3, #0
 80108da:	e05a      	b.n	8010992 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80108e2:	482e      	ldr	r0, [pc, #184]	; (801099c <inc_lock+0x168>)
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	4613      	mov	r3, r2
 80108e8:	005b      	lsls	r3, r3, #1
 80108ea:	4413      	add	r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4403      	add	r3, r0
 80108f0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 80108f8:	4828      	ldr	r0, [pc, #160]	; (801099c <inc_lock+0x168>)
 80108fa:	68fa      	ldr	r2, [r7, #12]
 80108fc:	4613      	mov	r3, r2
 80108fe:	005b      	lsls	r3, r3, #1
 8010900:	4413      	add	r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	4403      	add	r3, r0
 8010906:	3304      	adds	r3, #4
 8010908:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8010910:	4922      	ldr	r1, [pc, #136]	; (801099c <inc_lock+0x168>)
 8010912:	68fa      	ldr	r2, [r7, #12]
 8010914:	4613      	mov	r3, r2
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	4413      	add	r3, r2
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	440b      	add	r3, r1
 801091e:	3308      	adds	r3, #8
 8010920:	4602      	mov	r2, r0
 8010922:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8010924:	491d      	ldr	r1, [pc, #116]	; (801099c <inc_lock+0x168>)
 8010926:	68fa      	ldr	r2, [r7, #12]
 8010928:	4613      	mov	r3, r2
 801092a:	005b      	lsls	r3, r3, #1
 801092c:	4413      	add	r3, r2
 801092e:	009b      	lsls	r3, r3, #2
 8010930:	440b      	add	r3, r1
 8010932:	330a      	adds	r3, #10
 8010934:	2200      	movs	r2, #0
 8010936:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00c      	beq.n	8010958 <inc_lock+0x124>
 801093e:	4917      	ldr	r1, [pc, #92]	; (801099c <inc_lock+0x168>)
 8010940:	68fa      	ldr	r2, [r7, #12]
 8010942:	4613      	mov	r3, r2
 8010944:	005b      	lsls	r3, r3, #1
 8010946:	4413      	add	r3, r2
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	440b      	add	r3, r1
 801094c:	330a      	adds	r3, #10
 801094e:	881b      	ldrh	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d001      	beq.n	8010958 <inc_lock+0x124>
 8010954:	2300      	movs	r3, #0
 8010956:	e01c      	b.n	8010992 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d10b      	bne.n	8010976 <inc_lock+0x142>
 801095e:	490f      	ldr	r1, [pc, #60]	; (801099c <inc_lock+0x168>)
 8010960:	68fa      	ldr	r2, [r7, #12]
 8010962:	4613      	mov	r3, r2
 8010964:	005b      	lsls	r3, r3, #1
 8010966:	4413      	add	r3, r2
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	440b      	add	r3, r1
 801096c:	330a      	adds	r3, #10
 801096e:	881b      	ldrh	r3, [r3, #0]
 8010970:	3301      	adds	r3, #1
 8010972:	b299      	uxth	r1, r3
 8010974:	e001      	b.n	801097a <inc_lock+0x146>
 8010976:	f44f 7180 	mov.w	r1, #256	; 0x100
 801097a:	4808      	ldr	r0, [pc, #32]	; (801099c <inc_lock+0x168>)
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	4613      	mov	r3, r2
 8010980:	005b      	lsls	r3, r3, #1
 8010982:	4413      	add	r3, r2
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4403      	add	r3, r0
 8010988:	330a      	adds	r3, #10
 801098a:	460a      	mov	r2, r1
 801098c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	3301      	adds	r3, #1
}
 8010992:	4618      	mov	r0, r3
 8010994:	3714      	adds	r7, #20
 8010996:	46bd      	mov	sp, r7
 8010998:	bc80      	pop	{r7}
 801099a:	4770      	bx	lr
 801099c:	20000ef0 	.word	0x20000ef0

080109a0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	3b01      	subs	r3, #1
 80109ac:	607b      	str	r3, [r7, #4]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d82e      	bhi.n	8010a12 <dec_lock+0x72>
		n = Files[i].ctr;
 80109b4:	491b      	ldr	r1, [pc, #108]	; (8010a24 <dec_lock+0x84>)
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	4613      	mov	r3, r2
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	4413      	add	r3, r2
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	440b      	add	r3, r1
 80109c2:	330a      	adds	r3, #10
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80109c8:	89fb      	ldrh	r3, [r7, #14]
 80109ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109ce:	d101      	bne.n	80109d4 <dec_lock+0x34>
 80109d0:	2300      	movs	r3, #0
 80109d2:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80109d4:	89fb      	ldrh	r3, [r7, #14]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d002      	beq.n	80109e0 <dec_lock+0x40>
 80109da:	89fb      	ldrh	r3, [r7, #14]
 80109dc:	3b01      	subs	r3, #1
 80109de:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80109e0:	4910      	ldr	r1, [pc, #64]	; (8010a24 <dec_lock+0x84>)
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	4613      	mov	r3, r2
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	4413      	add	r3, r2
 80109ea:	009b      	lsls	r3, r3, #2
 80109ec:	440b      	add	r3, r1
 80109ee:	330a      	adds	r3, #10
 80109f0:	89fa      	ldrh	r2, [r7, #14]
 80109f2:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80109f4:	89fb      	ldrh	r3, [r7, #14]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d108      	bne.n	8010a0c <dec_lock+0x6c>
 80109fa:	490a      	ldr	r1, [pc, #40]	; (8010a24 <dec_lock+0x84>)
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	4613      	mov	r3, r2
 8010a00:	005b      	lsls	r3, r3, #1
 8010a02:	4413      	add	r3, r2
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	440b      	add	r3, r1
 8010a08:	2200      	movs	r2, #0
 8010a0a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	737b      	strb	r3, [r7, #13]
 8010a10:	e001      	b.n	8010a16 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010a12:	2302      	movs	r3, #2
 8010a14:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010a16:	7b7b      	ldrb	r3, [r7, #13]
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bc80      	pop	{r7}
 8010a20:	4770      	bx	lr
 8010a22:	bf00      	nop
 8010a24:	20000ef0 	.word	0x20000ef0

08010a28 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010a30:	2300      	movs	r3, #0
 8010a32:	60fb      	str	r3, [r7, #12]
 8010a34:	e016      	b.n	8010a64 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010a36:	4910      	ldr	r1, [pc, #64]	; (8010a78 <clear_lock+0x50>)
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	005b      	lsls	r3, r3, #1
 8010a3e:	4413      	add	r3, r2
 8010a40:	009b      	lsls	r3, r3, #2
 8010a42:	440b      	add	r3, r1
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d108      	bne.n	8010a5e <clear_lock+0x36>
 8010a4c:	490a      	ldr	r1, [pc, #40]	; (8010a78 <clear_lock+0x50>)
 8010a4e:	68fa      	ldr	r2, [r7, #12]
 8010a50:	4613      	mov	r3, r2
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	4413      	add	r3, r2
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	440b      	add	r3, r1
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	3301      	adds	r3, #1
 8010a62:	60fb      	str	r3, [r7, #12]
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2b01      	cmp	r3, #1
 8010a68:	d9e5      	bls.n	8010a36 <clear_lock+0xe>
	}
}
 8010a6a:	bf00      	nop
 8010a6c:	bf00      	nop
 8010a6e:	3714      	adds	r7, #20
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bc80      	pop	{r7}
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop
 8010a78:	20000ef0 	.word	0x20000ef0

08010a7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b086      	sub	sp, #24
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010a84:	2300      	movs	r3, #0
 8010a86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d038      	beq.n	8010b04 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8010a98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010aa0:	6879      	ldr	r1, [r7, #4]
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	697a      	ldr	r2, [r7, #20]
 8010aa6:	f7ff fd7f 	bl	80105a8 <disk_write>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d002      	beq.n	8010ab6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	73fb      	strb	r3, [r7, #15]
 8010ab4:	e026      	b.n	8010b04 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010ac4:	697a      	ldr	r2, [r7, #20]
 8010ac6:	1ad2      	subs	r2, r2, r3
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d218      	bcs.n	8010b04 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8010ad8:	613b      	str	r3, [r7, #16]
 8010ada:	e010      	b.n	8010afe <sync_window+0x82>
					wsect += fs->fsize;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010ae2:	697a      	ldr	r2, [r7, #20]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010aee:	6879      	ldr	r1, [r7, #4]
 8010af0:	2301      	movs	r3, #1
 8010af2:	697a      	ldr	r2, [r7, #20]
 8010af4:	f7ff fd58 	bl	80105a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010af8:	693b      	ldr	r3, [r7, #16]
 8010afa:	3b01      	subs	r3, #1
 8010afc:	613b      	str	r3, [r7, #16]
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d8eb      	bhi.n	8010adc <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8010b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b084      	sub	sp, #16
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
 8010b16:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d01b      	beq.n	8010b60 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f7ff ffa7 	bl	8010a7c <sync_window>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010b32:	7bfb      	ldrb	r3, [r7, #15]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d113      	bne.n	8010b60 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010b3e:	6879      	ldr	r1, [r7, #4]
 8010b40:	2301      	movs	r3, #1
 8010b42:	683a      	ldr	r2, [r7, #0]
 8010b44:	f7ff fd10 	bl	8010568 <disk_read>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d004      	beq.n	8010b58 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b52:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010b54:	2301      	movs	r3, #1
 8010b56:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8010b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3710      	adds	r7, #16
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b084      	sub	sp, #16
 8010b6e:	af00      	add	r7, sp, #0
 8010b70:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7ff ff82 	bl	8010a7c <sync_window>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b7c:	7bfb      	ldrb	r3, [r7, #15]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	f040 809b 	bne.w	8010cba <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010b8a:	2b03      	cmp	r3, #3
 8010b8c:	f040 8088 	bne.w	8010ca0 <sync_fs+0x136>
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	f040 8082 	bne.w	8010ca0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7ff fd5b 	bl	8010660 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2255      	movs	r2, #85	; 0x55
 8010bae:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	22aa      	movs	r2, #170	; 0xaa
 8010bb6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2252      	movs	r2, #82	; 0x52
 8010bbe:	701a      	strb	r2, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2252      	movs	r2, #82	; 0x52
 8010bc4:	705a      	strb	r2, [r3, #1]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2261      	movs	r2, #97	; 0x61
 8010bca:	709a      	strb	r2, [r3, #2]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2241      	movs	r2, #65	; 0x41
 8010bd0:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2272      	movs	r2, #114	; 0x72
 8010bd6:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2272      	movs	r2, #114	; 0x72
 8010bde:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2241      	movs	r2, #65	; 0x41
 8010be6:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2261      	movs	r2, #97	; 0x61
 8010bee:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bf8:	b2da      	uxtb	r2, r3
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	0a1b      	lsrs	r3, r3, #8
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	b2da      	uxtb	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010c1a:	0c1b      	lsrs	r3, r3, #16
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010c2a:	0e1b      	lsrs	r3, r3, #24
 8010c2c:	b2da      	uxtb	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010c3a:	b2da      	uxtb	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	0a1b      	lsrs	r3, r3, #8
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	b2da      	uxtb	r2, r3
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010c5c:	0c1b      	lsrs	r3, r3, #16
 8010c5e:	b2da      	uxtb	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010c6c:	0e1b      	lsrs	r3, r3, #24
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8010c7c:	1c5a      	adds	r2, r3, #1
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8010c92:	2301      	movs	r3, #1
 8010c94:	f7ff fc88 	bl	80105a8 <disk_write>
			fs->fsi_flag = 0;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	2100      	movs	r1, #0
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7ff fc9c 	bl	80105e8 <disk_ioctl>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <sync_fs+0x150>
			res = FR_DISK_ERR;
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b083      	sub	sp, #12
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	3b02      	subs	r3, #2
 8010cd2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010cda:	3b02      	subs	r3, #2
 8010cdc:	683a      	ldr	r2, [r7, #0]
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d301      	bcc.n	8010ce6 <clust2sect+0x22>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	e00a      	b.n	8010cfc <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010cec:	461a      	mov	r2, r3
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	fb03 f202 	mul.w	r2, r3, r2
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010cfa:	4413      	add	r3, r2
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	370c      	adds	r7, #12
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bc80      	pop	{r7}
 8010d04:	4770      	bx	lr

08010d06 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b086      	sub	sp, #24
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
 8010d0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	d905      	bls.n	8010d22 <get_fat+0x1c>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010d1c:	683a      	ldr	r2, [r7, #0]
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d302      	bcc.n	8010d28 <get_fat+0x22>
		val = 1;	/* Internal error */
 8010d22:	2301      	movs	r3, #1
 8010d24:	617b      	str	r3, [r7, #20]
 8010d26:	e0a3      	b.n	8010e70 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010d28:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010d34:	2b03      	cmp	r3, #3
 8010d36:	d068      	beq.n	8010e0a <get_fat+0x104>
 8010d38:	2b03      	cmp	r3, #3
 8010d3a:	f300 808f 	bgt.w	8010e5c <get_fat+0x156>
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	d002      	beq.n	8010d48 <get_fat+0x42>
 8010d42:	2b02      	cmp	r3, #2
 8010d44:	d040      	beq.n	8010dc8 <get_fat+0xc2>
 8010d46:	e089      	b.n	8010e5c <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	60fb      	str	r3, [r7, #12]
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	085b      	lsrs	r3, r3, #1
 8010d50:	68fa      	ldr	r2, [r7, #12]
 8010d52:	4413      	add	r3, r2
 8010d54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	0a5b      	lsrs	r3, r3, #9
 8010d60:	4413      	add	r3, r2
 8010d62:	4619      	mov	r1, r3
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fed2 	bl	8010b0e <move_window>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d178      	bne.n	8010e62 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	1c5a      	adds	r2, r3, #1
 8010d74:	60fa      	str	r2, [r7, #12]
 8010d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	5cd3      	ldrb	r3, [r2, r3]
 8010d7e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	0a5b      	lsrs	r3, r3, #9
 8010d8a:	4413      	add	r3, r2
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f7ff febd 	bl	8010b0e <move_window>
 8010d94:	4603      	mov	r3, r0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d165      	bne.n	8010e66 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	5cd3      	ldrb	r3, [r2, r3]
 8010da4:	021b      	lsls	r3, r3, #8
 8010da6:	461a      	mov	r2, r3
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	4313      	orrs	r3, r2
 8010dac:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	f003 0301 	and.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d002      	beq.n	8010dbe <get_fat+0xb8>
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	091b      	lsrs	r3, r3, #4
 8010dbc:	e002      	b.n	8010dc4 <get_fat+0xbe>
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010dc4:	617b      	str	r3, [r7, #20]
			break;
 8010dc6:	e053      	b.n	8010e70 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	0a1b      	lsrs	r3, r3, #8
 8010dd2:	4413      	add	r3, r2
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f7ff fe99 	bl	8010b0e <move_window>
 8010ddc:	4603      	mov	r3, r0
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d143      	bne.n	8010e6a <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	005b      	lsls	r3, r3, #1
 8010de6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010dea:	687a      	ldr	r2, [r7, #4]
 8010dec:	4413      	add	r3, r2
 8010dee:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	3301      	adds	r3, #1
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	021b      	lsls	r3, r3, #8
 8010df8:	b21a      	sxth	r2, r3
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	b21b      	sxth	r3, r3
 8010e00:	4313      	orrs	r3, r2
 8010e02:	b21b      	sxth	r3, r3
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	617b      	str	r3, [r7, #20]
			break;
 8010e08:	e032      	b.n	8010e70 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	09db      	lsrs	r3, r3, #7
 8010e14:	4413      	add	r3, r2
 8010e16:	4619      	mov	r1, r3
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff fe78 	bl	8010b0e <move_window>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d124      	bne.n	8010e6e <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	4413      	add	r3, r2
 8010e30:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	3303      	adds	r3, #3
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	061a      	lsls	r2, r3, #24
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	3302      	adds	r3, #2
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	041b      	lsls	r3, r3, #16
 8010e42:	4313      	orrs	r3, r2
 8010e44:	693a      	ldr	r2, [r7, #16]
 8010e46:	3201      	adds	r2, #1
 8010e48:	7812      	ldrb	r2, [r2, #0]
 8010e4a:	0212      	lsls	r2, r2, #8
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	693a      	ldr	r2, [r7, #16]
 8010e50:	7812      	ldrb	r2, [r2, #0]
 8010e52:	4313      	orrs	r3, r2
 8010e54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010e58:	617b      	str	r3, [r7, #20]
			break;
 8010e5a:	e009      	b.n	8010e70 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	617b      	str	r3, [r7, #20]
 8010e60:	e006      	b.n	8010e70 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e62:	bf00      	nop
 8010e64:	e004      	b.n	8010e70 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010e66:	bf00      	nop
 8010e68:	e002      	b.n	8010e70 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010e6a:	bf00      	nop
 8010e6c:	e000      	b.n	8010e70 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010e6e:	bf00      	nop
		}
	}

	return val;
 8010e70:	697b      	ldr	r3, [r7, #20]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3718      	adds	r7, #24
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b088      	sub	sp, #32
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	60f8      	str	r0, [r7, #12]
 8010e82:	60b9      	str	r1, [r7, #8]
 8010e84:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d905      	bls.n	8010e98 <put_fat+0x1e>
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d302      	bcc.n	8010e9e <put_fat+0x24>
		res = FR_INT_ERR;
 8010e98:	2302      	movs	r3, #2
 8010e9a:	77fb      	strb	r3, [r7, #31]
 8010e9c:	e0f6      	b.n	801108c <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010ea4:	2b03      	cmp	r3, #3
 8010ea6:	f000 809e 	beq.w	8010fe6 <put_fat+0x16c>
 8010eaa:	2b03      	cmp	r3, #3
 8010eac:	f300 80e4 	bgt.w	8011078 <put_fat+0x1fe>
 8010eb0:	2b01      	cmp	r3, #1
 8010eb2:	d002      	beq.n	8010eba <put_fat+0x40>
 8010eb4:	2b02      	cmp	r3, #2
 8010eb6:	d06f      	beq.n	8010f98 <put_fat+0x11e>
 8010eb8:	e0de      	b.n	8011078 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	617b      	str	r3, [r7, #20]
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	085b      	lsrs	r3, r3, #1
 8010ec2:	697a      	ldr	r2, [r7, #20]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	0a5b      	lsrs	r3, r3, #9
 8010ed2:	4413      	add	r3, r2
 8010ed4:	4619      	mov	r1, r3
 8010ed6:	68f8      	ldr	r0, [r7, #12]
 8010ed8:	f7ff fe19 	bl	8010b0e <move_window>
 8010edc:	4603      	mov	r3, r0
 8010ede:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ee0:	7ffb      	ldrb	r3, [r7, #31]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f040 80cb 	bne.w	801107e <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	1c5a      	adds	r2, r3, #1
 8010eec:	617a      	str	r2, [r7, #20]
 8010eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	f003 0301 	and.w	r3, r3, #1
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d00d      	beq.n	8010f1e <put_fat+0xa4>
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	b25b      	sxtb	r3, r3
 8010f08:	f003 030f 	and.w	r3, r3, #15
 8010f0c:	b25a      	sxtb	r2, r3
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	011b      	lsls	r3, r3, #4
 8010f14:	b25b      	sxtb	r3, r3
 8010f16:	4313      	orrs	r3, r2
 8010f18:	b25b      	sxtb	r3, r3
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	e001      	b.n	8010f22 <put_fat+0xa8>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	69ba      	ldr	r2, [r7, #24]
 8010f24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	0a5b      	lsrs	r3, r3, #9
 8010f38:	4413      	add	r3, r2
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	68f8      	ldr	r0, [r7, #12]
 8010f3e:	f7ff fde6 	bl	8010b0e <move_window>
 8010f42:	4603      	mov	r3, r0
 8010f44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010f46:	7ffb      	ldrb	r3, [r7, #31]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	f040 809a 	bne.w	8011082 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f54:	68fa      	ldr	r2, [r7, #12]
 8010f56:	4413      	add	r3, r2
 8010f58:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	f003 0301 	and.w	r3, r3, #1
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d003      	beq.n	8010f6c <put_fat+0xf2>
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	091b      	lsrs	r3, r3, #4
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	e00e      	b.n	8010f8a <put_fat+0x110>
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	b25b      	sxtb	r3, r3
 8010f72:	f023 030f 	bic.w	r3, r3, #15
 8010f76:	b25a      	sxtb	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	0a1b      	lsrs	r3, r3, #8
 8010f7c:	b25b      	sxtb	r3, r3
 8010f7e:	f003 030f 	and.w	r3, r3, #15
 8010f82:	b25b      	sxtb	r3, r3
 8010f84:	4313      	orrs	r3, r2
 8010f86:	b25b      	sxtb	r3, r3
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	69ba      	ldr	r2, [r7, #24]
 8010f8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	2201      	movs	r2, #1
 8010f92:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010f96:	e079      	b.n	801108c <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	0a1b      	lsrs	r3, r3, #8
 8010fa2:	4413      	add	r3, r2
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	f7ff fdb1 	bl	8010b0e <move_window>
 8010fac:	4603      	mov	r3, r0
 8010fae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010fb0:	7ffb      	ldrb	r3, [r7, #31]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d167      	bne.n	8011086 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	005b      	lsls	r3, r3, #1
 8010fba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010fbe:	68fa      	ldr	r2, [r7, #12]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	69bb      	ldr	r3, [r7, #24]
 8010fca:	701a      	strb	r2, [r3, #0]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	0a1b      	lsrs	r3, r3, #8
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	b2d2      	uxtb	r2, r2
 8010fda:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2201      	movs	r2, #1
 8010fe0:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010fe4:	e052      	b.n	801108c <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	09db      	lsrs	r3, r3, #7
 8010ff0:	4413      	add	r3, r2
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	68f8      	ldr	r0, [r7, #12]
 8010ff6:	f7ff fd8a 	bl	8010b0e <move_window>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ffe:	7ffb      	ldrb	r3, [r7, #31]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d142      	bne.n	801108a <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801100c:	68fa      	ldr	r2, [r7, #12]
 801100e:	4413      	add	r3, r2
 8011010:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	3303      	adds	r3, #3
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	061a      	lsls	r2, r3, #24
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	3302      	adds	r3, #2
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	041b      	lsls	r3, r3, #16
 8011022:	4313      	orrs	r3, r2
 8011024:	69ba      	ldr	r2, [r7, #24]
 8011026:	3201      	adds	r2, #1
 8011028:	7812      	ldrb	r2, [r2, #0]
 801102a:	0212      	lsls	r2, r2, #8
 801102c:	4313      	orrs	r3, r2
 801102e:	69ba      	ldr	r2, [r7, #24]
 8011030:	7812      	ldrb	r2, [r2, #0]
 8011032:	4313      	orrs	r3, r2
 8011034:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	4313      	orrs	r3, r2
 801103c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	b2da      	uxtb	r2, r3
 8011042:	69bb      	ldr	r3, [r7, #24]
 8011044:	701a      	strb	r2, [r3, #0]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	b29b      	uxth	r3, r3
 801104a:	0a1b      	lsrs	r3, r3, #8
 801104c:	b29a      	uxth	r2, r3
 801104e:	69bb      	ldr	r3, [r7, #24]
 8011050:	3301      	adds	r3, #1
 8011052:	b2d2      	uxtb	r2, r2
 8011054:	701a      	strb	r2, [r3, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	0c1a      	lsrs	r2, r3, #16
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	3302      	adds	r3, #2
 801105e:	b2d2      	uxtb	r2, r2
 8011060:	701a      	strb	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	0e1a      	lsrs	r2, r3, #24
 8011066:	69bb      	ldr	r3, [r7, #24]
 8011068:	3303      	adds	r3, #3
 801106a:	b2d2      	uxtb	r2, r2
 801106c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2201      	movs	r2, #1
 8011072:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8011076:	e009      	b.n	801108c <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8011078:	2302      	movs	r3, #2
 801107a:	77fb      	strb	r3, [r7, #31]
 801107c:	e006      	b.n	801108c <put_fat+0x212>
			if (res != FR_OK) break;
 801107e:	bf00      	nop
 8011080:	e004      	b.n	801108c <put_fat+0x212>
			if (res != FR_OK) break;
 8011082:	bf00      	nop
 8011084:	e002      	b.n	801108c <put_fat+0x212>
			if (res != FR_OK) break;
 8011086:	bf00      	nop
 8011088:	e000      	b.n	801108c <put_fat+0x212>
			if (res != FR_OK) break;
 801108a:	bf00      	nop
		}
	}

	return res;
 801108c:	7ffb      	ldrb	r3, [r7, #31]
}
 801108e:	4618      	mov	r0, r3
 8011090:	3720      	adds	r7, #32
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}

08011096 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8011096:	b580      	push	{r7, lr}
 8011098:	b084      	sub	sp, #16
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
 801109e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80110a0:	683b      	ldr	r3, [r7, #0]
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d905      	bls.n	80110b2 <remove_chain+0x1c>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d302      	bcc.n	80110b8 <remove_chain+0x22>
		res = FR_INT_ERR;
 80110b2:	2302      	movs	r3, #2
 80110b4:	73fb      	strb	r3, [r7, #15]
 80110b6:	e043      	b.n	8011140 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 80110b8:	2300      	movs	r3, #0
 80110ba:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80110bc:	e036      	b.n	801112c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80110be:	6839      	ldr	r1, [r7, #0]
 80110c0:	6878      	ldr	r0, [r7, #4]
 80110c2:	f7ff fe20 	bl	8010d06 <get_fat>
 80110c6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d035      	beq.n	801113a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d102      	bne.n	80110da <remove_chain+0x44>
 80110d4:	2302      	movs	r3, #2
 80110d6:	73fb      	strb	r3, [r7, #15]
 80110d8:	e032      	b.n	8011140 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e0:	d102      	bne.n	80110e8 <remove_chain+0x52>
 80110e2:	2301      	movs	r3, #1
 80110e4:	73fb      	strb	r3, [r7, #15]
 80110e6:	e02b      	b.n	8011140 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80110e8:	2200      	movs	r2, #0
 80110ea:	6839      	ldr	r1, [r7, #0]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f7ff fec4 	bl	8010e7a <put_fat>
 80110f2:	4603      	mov	r3, r0
 80110f4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80110f6:	7bfb      	ldrb	r3, [r7, #15]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d120      	bne.n	801113e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011106:	d00f      	beq.n	8011128 <remove_chain+0x92>
				fs->free_clust++;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801110e:	1c5a      	adds	r2, r3, #1
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 801111c:	f043 0301 	orr.w	r3, r3, #1
 8011120:	b2da      	uxtb	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	429a      	cmp	r2, r3
 8011136:	d3c2      	bcc.n	80110be <remove_chain+0x28>
 8011138:	e002      	b.n	8011140 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 801113a:	bf00      	nop
 801113c:	e000      	b.n	8011140 <remove_chain+0xaa>
			if (res != FR_OK) break;
 801113e:	bf00      	nop
		}
	}

	return res;
 8011140:	7bfb      	ldrb	r3, [r7, #15]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b086      	sub	sp, #24
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d10f      	bne.n	801117a <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8011160:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d005      	beq.n	8011174 <create_chain+0x2a>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801116e:	693a      	ldr	r2, [r7, #16]
 8011170:	429a      	cmp	r2, r3
 8011172:	d31c      	bcc.n	80111ae <create_chain+0x64>
 8011174:	2301      	movs	r3, #1
 8011176:	613b      	str	r3, [r7, #16]
 8011178:	e019      	b.n	80111ae <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 801117a:	6839      	ldr	r1, [r7, #0]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff fdc2 	bl	8010d06 <get_fat>
 8011182:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	2b01      	cmp	r3, #1
 8011188:	d801      	bhi.n	801118e <create_chain+0x44>
 801118a:	2301      	movs	r3, #1
 801118c:	e076      	b.n	801127c <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011194:	d101      	bne.n	801119a <create_chain+0x50>
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	e070      	b.n	801127c <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111a0:	68ba      	ldr	r2, [r7, #8]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d201      	bcs.n	80111aa <create_chain+0x60>
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	e068      	b.n	801127c <create_chain+0x132>
		scl = clst;
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	3301      	adds	r3, #1
 80111b6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80111be:	697a      	ldr	r2, [r7, #20]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d307      	bcc.n	80111d4 <create_chain+0x8a>
			ncl = 2;
 80111c4:	2302      	movs	r3, #2
 80111c6:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80111c8:	697a      	ldr	r2, [r7, #20]
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d901      	bls.n	80111d4 <create_chain+0x8a>
 80111d0:	2300      	movs	r3, #0
 80111d2:	e053      	b.n	801127c <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80111d4:	6979      	ldr	r1, [r7, #20]
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff fd95 	bl	8010d06 <get_fat>
 80111dc:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00e      	beq.n	8011202 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ea:	d002      	beq.n	80111f2 <create_chain+0xa8>
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d101      	bne.n	80111f6 <create_chain+0xac>
			return cs;
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	e042      	b.n	801127c <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80111f6:	697a      	ldr	r2, [r7, #20]
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d1d9      	bne.n	80111b2 <create_chain+0x68>
 80111fe:	2300      	movs	r3, #0
 8011200:	e03c      	b.n	801127c <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8011202:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8011204:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8011208:	6979      	ldr	r1, [r7, #20]
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff fe35 	bl	8010e7a <put_fat>
 8011210:	4603      	mov	r3, r0
 8011212:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d109      	bne.n	801122e <create_chain+0xe4>
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d006      	beq.n	801122e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8011220:	697a      	ldr	r2, [r7, #20]
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7ff fe28 	bl	8010e7a <put_fat>
 801122a:	4603      	mov	r3, r0
 801122c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 801122e:	7bfb      	ldrb	r3, [r7, #15]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d11a      	bne.n	801126a <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011246:	d018      	beq.n	801127a <create_chain+0x130>
			fs->free_clust--;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801124e:	1e5a      	subs	r2, r3, #1
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 801125c:	f043 0301 	orr.w	r3, r3, #1
 8011260:	b2da      	uxtb	r2, r3
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8011268:	e007      	b.n	801127a <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 801126a:	7bfb      	ldrb	r3, [r7, #15]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d102      	bne.n	8011276 <create_chain+0x12c>
 8011270:	f04f 33ff 	mov.w	r3, #4294967295
 8011274:	e000      	b.n	8011278 <create_chain+0x12e>
 8011276:	2301      	movs	r3, #1
 8011278:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 801127a:	697b      	ldr	r3, [r7, #20]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3718      	adds	r7, #24
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8011284:	b480      	push	{r7}
 8011286:	b087      	sub	sp, #28
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8011294:	3304      	adds	r3, #4
 8011296:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	0a5b      	lsrs	r3, r3, #9
 801129c:	687a      	ldr	r2, [r7, #4]
 801129e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80112a2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80112a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80112aa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80112ac:	693b      	ldr	r3, [r7, #16]
 80112ae:	1d1a      	adds	r2, r3, #4
 80112b0:	613a      	str	r2, [r7, #16]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d101      	bne.n	80112c0 <clmt_clust+0x3c>
 80112bc:	2300      	movs	r3, #0
 80112be:	e010      	b.n	80112e2 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 80112c0:	697a      	ldr	r2, [r7, #20]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d307      	bcc.n	80112d8 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 80112c8:	697a      	ldr	r2, [r7, #20]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	1ad3      	subs	r3, r2, r3
 80112ce:	617b      	str	r3, [r7, #20]
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	3304      	adds	r3, #4
 80112d4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80112d6:	e7e9      	b.n	80112ac <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 80112d8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	4413      	add	r3, r2
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	371c      	adds	r7, #28
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bc80      	pop	{r7}
 80112ea:	4770      	bx	lr

080112ec <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b086      	sub	sp, #24
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	b29a      	uxth	r2, r3
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8011306:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d007      	beq.n	801131e <dir_sdi+0x32>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011314:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011318:	697a      	ldr	r2, [r7, #20]
 801131a:	429a      	cmp	r2, r3
 801131c:	d301      	bcc.n	8011322 <dir_sdi+0x36>
		return FR_INT_ERR;
 801131e:	2302      	movs	r3, #2
 8011320:	e074      	b.n	801140c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d10c      	bne.n	8011342 <dir_sdi+0x56>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801132e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011332:	2b03      	cmp	r3, #3
 8011334:	d105      	bne.n	8011342 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801133c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8011340:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d111      	bne.n	801136c <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801134e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011352:	461a      	mov	r2, r3
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	4293      	cmp	r3, r2
 8011358:	d301      	bcc.n	801135e <dir_sdi+0x72>
			return FR_INT_ERR;
 801135a:	2302      	movs	r3, #2
 801135c:	e056      	b.n	801140c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011364:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8011368:	613b      	str	r3, [r7, #16]
 801136a:	e032      	b.n	80113d2 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011372:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011376:	011b      	lsls	r3, r3, #4
 8011378:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 801137a:	e01e      	b.n	80113ba <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011382:	6979      	ldr	r1, [r7, #20]
 8011384:	4618      	mov	r0, r3
 8011386:	f7ff fcbe 	bl	8010d06 <get_fat>
 801138a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011392:	d101      	bne.n	8011398 <dir_sdi+0xac>
 8011394:	2301      	movs	r3, #1
 8011396:	e039      	b.n	801140c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d907      	bls.n	80113ae <dir_sdi+0xc2>
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80113a8:	697a      	ldr	r2, [r7, #20]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d301      	bcc.n	80113b2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80113ae:	2302      	movs	r3, #2
 80113b0:	e02c      	b.n	801140c <dir_sdi+0x120>
			idx -= ic;
 80113b2:	683a      	ldr	r2, [r7, #0]
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80113ba:	683a      	ldr	r2, [r7, #0]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d2dc      	bcs.n	801137c <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113c8:	6979      	ldr	r1, [r7, #20]
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7ff fc7a 	bl	8010cc4 <clust2sect>
 80113d0:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	697a      	ldr	r2, [r7, #20]
 80113d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d101      	bne.n	80113e4 <dir_sdi+0xf8>
 80113e0:	2302      	movs	r3, #2
 80113e2:	e013      	b.n	801140c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	091a      	lsrs	r2, r3, #4
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	441a      	add	r2, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113f8:	461a      	mov	r2, r3
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	f003 030f 	and.w	r3, r3, #15
 8011400:	015b      	lsls	r3, r3, #5
 8011402:	441a      	add	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 801140a:	2300      	movs	r3, #0
}
 801140c:	4618      	mov	r0, r3
 801140e:	3718      	adds	r7, #24
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011414:	b590      	push	{r4, r7, lr}
 8011416:	b087      	sub	sp, #28
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
 801141c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8011424:	3301      	adds	r3, #1
 8011426:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	b29b      	uxth	r3, r3
 801142c:	2b00      	cmp	r3, #0
 801142e:	d004      	beq.n	801143a <dir_next+0x26>
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011436:	2b00      	cmp	r3, #0
 8011438:	d101      	bne.n	801143e <dir_next+0x2a>
		return FR_NO_FILE;
 801143a:	2304      	movs	r3, #4
 801143c:	e0dd      	b.n	80115fa <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f003 030f 	and.w	r3, r3, #15
 8011444:	2b00      	cmp	r3, #0
 8011446:	f040 80c6 	bne.w	80115d6 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011450:	1c5a      	adds	r2, r3, #1
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801145e:	2b00      	cmp	r3, #0
 8011460:	d10b      	bne.n	801147a <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011468:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801146c:	461a      	mov	r2, r3
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	4293      	cmp	r3, r2
 8011472:	f0c0 80b0 	bcc.w	80115d6 <dir_next+0x1c2>
				return FR_NO_FILE;
 8011476:	2304      	movs	r3, #4
 8011478:	e0bf      	b.n	80115fa <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	091b      	lsrs	r3, r3, #4
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8011484:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8011488:	3a01      	subs	r2, #1
 801148a:	4013      	ands	r3, r2
 801148c:	2b00      	cmp	r3, #0
 801148e:	f040 80a2 	bne.w	80115d6 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801149e:	4619      	mov	r1, r3
 80114a0:	4610      	mov	r0, r2
 80114a2:	f7ff fc30 	bl	8010d06 <get_fat>
 80114a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d801      	bhi.n	80114b2 <dir_next+0x9e>
 80114ae:	2302      	movs	r3, #2
 80114b0:	e0a3      	b.n	80115fa <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b8:	d101      	bne.n	80114be <dir_next+0xaa>
 80114ba:	2301      	movs	r3, #1
 80114bc:	e09d      	b.n	80115fa <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80114c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80114c8:	697a      	ldr	r2, [r7, #20]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d374      	bcc.n	80115b8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d101      	bne.n	80114d8 <dir_next+0xc4>
 80114d4:	2304      	movs	r3, #4
 80114d6:	e090      	b.n	80115fa <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80114e4:	4619      	mov	r1, r3
 80114e6:	4610      	mov	r0, r2
 80114e8:	f7ff fe2f 	bl	801114a <create_chain>
 80114ec:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d101      	bne.n	80114f8 <dir_next+0xe4>
 80114f4:	2307      	movs	r3, #7
 80114f6:	e080      	b.n	80115fa <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d101      	bne.n	8011502 <dir_next+0xee>
 80114fe:	2302      	movs	r3, #2
 8011500:	e07b      	b.n	80115fa <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011508:	d101      	bne.n	801150e <dir_next+0xfa>
 801150a:	2301      	movs	r3, #1
 801150c:	e075      	b.n	80115fa <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011514:	4618      	mov	r0, r3
 8011516:	f7ff fab1 	bl	8010a7c <sync_window>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <dir_next+0x110>
 8011520:	2301      	movs	r3, #1
 8011522:	e06a      	b.n	80115fa <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801152a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801152e:	2100      	movs	r1, #0
 8011530:	4618      	mov	r0, r3
 8011532:	f7ff f895 	bl	8010660 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8011542:	6979      	ldr	r1, [r7, #20]
 8011544:	4610      	mov	r0, r2
 8011546:	f7ff fbbd 	bl	8010cc4 <clust2sect>
 801154a:	4603      	mov	r3, r0
 801154c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8011550:	2300      	movs	r3, #0
 8011552:	613b      	str	r3, [r7, #16]
 8011554:	e01b      	b.n	801158e <dir_next+0x17a>
						dp->fs->wflag = 1;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801155c:	2201      	movs	r2, #1
 801155e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011568:	4618      	mov	r0, r3
 801156a:	f7ff fa87 	bl	8010a7c <sync_window>
 801156e:	4603      	mov	r3, r0
 8011570:	2b00      	cmp	r3, #0
 8011572:	d001      	beq.n	8011578 <dir_next+0x164>
 8011574:	2301      	movs	r3, #1
 8011576:	e040      	b.n	80115fa <dir_next+0x1e6>
						dp->fs->winsect++;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801157e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8011582:	3201      	adds	r2, #1
 8011584:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	3301      	adds	r3, #1
 801158c:	613b      	str	r3, [r7, #16]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011594:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011598:	461a      	mov	r2, r3
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	4293      	cmp	r3, r2
 801159e:	d3da      	bcc.n	8011556 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115a6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115b0:	693a      	ldr	r2, [r7, #16]
 80115b2:	1a8a      	subs	r2, r1, r2
 80115b4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	697a      	ldr	r2, [r7, #20]
 80115bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115c6:	6979      	ldr	r1, [r7, #20]
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7ff fb7b 	bl	8010cc4 <clust2sect>
 80115ce:	4602      	mov	r2, r0
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	b29a      	uxth	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80115e6:	461a      	mov	r2, r3
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f003 030f 	and.w	r3, r3, #15
 80115ee:	015b      	lsls	r3, r3, #5
 80115f0:	441a      	add	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	371c      	adds	r7, #28
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd90      	pop	{r4, r7, pc}

08011602 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8011602:	b580      	push	{r7, lr}
 8011604:	b084      	sub	sp, #16
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
 801160a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 801160c:	2100      	movs	r1, #0
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f7ff fe6c 	bl	80112ec <dir_sdi>
 8011614:	4603      	mov	r3, r0
 8011616:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011618:	7bfb      	ldrb	r3, [r7, #15]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d131      	bne.n	8011682 <dir_alloc+0x80>
		n = 0;
 801161e:	2300      	movs	r3, #0
 8011620:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801162e:	4619      	mov	r1, r3
 8011630:	4610      	mov	r0, r2
 8011632:	f7ff fa6c 	bl	8010b0e <move_window>
 8011636:	4603      	mov	r3, r0
 8011638:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801163a:	7bfb      	ldrb	r3, [r7, #15]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d11f      	bne.n	8011680 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	2be5      	cmp	r3, #229	; 0xe5
 801164a:	d005      	beq.n	8011658 <dir_alloc+0x56>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d107      	bne.n	8011668 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	3301      	adds	r3, #1
 801165c:	60bb      	str	r3, [r7, #8]
 801165e:	68ba      	ldr	r2, [r7, #8]
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	429a      	cmp	r2, r3
 8011664:	d102      	bne.n	801166c <dir_alloc+0x6a>
 8011666:	e00c      	b.n	8011682 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011668:	2300      	movs	r3, #0
 801166a:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 801166c:	2101      	movs	r1, #1
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f7ff fed0 	bl	8011414 <dir_next>
 8011674:	4603      	mov	r3, r0
 8011676:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8011678:	7bfb      	ldrb	r3, [r7, #15]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d0d1      	beq.n	8011622 <dir_alloc+0x20>
 801167e:	e000      	b.n	8011682 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8011680:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011682:	7bfb      	ldrb	r3, [r7, #15]
 8011684:	2b04      	cmp	r3, #4
 8011686:	d101      	bne.n	801168c <dir_alloc+0x8a>
 8011688:	2307      	movs	r3, #7
 801168a:	73fb      	strb	r3, [r7, #15]
	return res;
 801168c:	7bfb      	ldrb	r3, [r7, #15]
}
 801168e:	4618      	mov	r0, r3
 8011690:	3710      	adds	r7, #16
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}

08011696 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8011696:	b480      	push	{r7}
 8011698:	b085      	sub	sp, #20
 801169a:	af00      	add	r7, sp, #0
 801169c:	6078      	str	r0, [r7, #4]
 801169e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	331b      	adds	r3, #27
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	021b      	lsls	r3, r3, #8
 80116a8:	b21a      	sxth	r2, r3
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	331a      	adds	r3, #26
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	b21b      	sxth	r3, r3
 80116b2:	4313      	orrs	r3, r2
 80116b4:	b21b      	sxth	r3, r3
 80116b6:	b29b      	uxth	r3, r3
 80116b8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80116c0:	2b03      	cmp	r3, #3
 80116c2:	d10f      	bne.n	80116e4 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	3315      	adds	r3, #21
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	021b      	lsls	r3, r3, #8
 80116cc:	b21a      	sxth	r2, r3
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	3314      	adds	r3, #20
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	b21b      	sxth	r3, r3
 80116d6:	4313      	orrs	r3, r2
 80116d8:	b21b      	sxth	r3, r3
 80116da:	b29b      	uxth	r3, r3
 80116dc:	041b      	lsls	r3, r3, #16
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	4313      	orrs	r3, r2
 80116e2:	60fb      	str	r3, [r7, #12]

	return cl;
 80116e4:	68fb      	ldr	r3, [r7, #12]
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3714      	adds	r7, #20
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bc80      	pop	{r7}
 80116ee:	4770      	bx	lr

080116f0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b083      	sub	sp, #12
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	331a      	adds	r3, #26
 80116fe:	683a      	ldr	r2, [r7, #0]
 8011700:	b2d2      	uxtb	r2, r2
 8011702:	701a      	strb	r2, [r3, #0]
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	b29b      	uxth	r3, r3
 8011708:	0a1b      	lsrs	r3, r3, #8
 801170a:	b29a      	uxth	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	331b      	adds	r3, #27
 8011710:	b2d2      	uxtb	r2, r2
 8011712:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	0c1a      	lsrs	r2, r3, #16
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	3314      	adds	r3, #20
 801171c:	b2d2      	uxtb	r2, r2
 801171e:	701a      	strb	r2, [r3, #0]
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	0c1b      	lsrs	r3, r3, #16
 8011724:	b29b      	uxth	r3, r3
 8011726:	0a1b      	lsrs	r3, r3, #8
 8011728:	b29a      	uxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	3315      	adds	r3, #21
 801172e:	b2d2      	uxtb	r2, r2
 8011730:	701a      	strb	r2, [r3, #0]
}
 8011732:	bf00      	nop
 8011734:	370c      	adds	r7, #12
 8011736:	46bd      	mov	sp, r7
 8011738:	bc80      	pop	{r7}
 801173a:	4770      	bx	lr

0801173c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b086      	sub	sp, #24
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011744:	2100      	movs	r1, #0
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7ff fdd0 	bl	80112ec <dir_sdi>
 801174c:	4603      	mov	r3, r0
 801174e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011750:	7dfb      	ldrb	r3, [r7, #23]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d001      	beq.n	801175a <dir_find+0x1e>
 8011756:	7dfb      	ldrb	r3, [r7, #23]
 8011758:	e03b      	b.n	80117d2 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011766:	4619      	mov	r1, r3
 8011768:	4610      	mov	r0, r2
 801176a:	f7ff f9d0 	bl	8010b0e <move_window>
 801176e:	4603      	mov	r3, r0
 8011770:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011772:	7dfb      	ldrb	r3, [r7, #23]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d128      	bne.n	80117ca <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801177e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011786:	7bfb      	ldrb	r3, [r7, #15]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <dir_find+0x56>
 801178c:	2304      	movs	r3, #4
 801178e:	75fb      	strb	r3, [r7, #23]
 8011790:	e01e      	b.n	80117d0 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	330b      	adds	r3, #11
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	f003 0308 	and.w	r3, r3, #8
 801179c:	2b00      	cmp	r3, #0
 801179e:	d10a      	bne.n	80117b6 <dir_find+0x7a>
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80117a6:	220b      	movs	r2, #11
 80117a8:	4619      	mov	r1, r3
 80117aa:	6938      	ldr	r0, [r7, #16]
 80117ac:	f7fe ff72 	bl	8010694 <mem_cmp>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d00b      	beq.n	80117ce <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80117b6:	2100      	movs	r1, #0
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f7ff fe2b 	bl	8011414 <dir_next>
 80117be:	4603      	mov	r3, r0
 80117c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80117c2:	7dfb      	ldrb	r3, [r7, #23]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d0c8      	beq.n	801175a <dir_find+0x1e>
 80117c8:	e002      	b.n	80117d0 <dir_find+0x94>
		if (res != FR_OK) break;
 80117ca:	bf00      	nop
 80117cc:	e000      	b.n	80117d0 <dir_find+0x94>
			break;
 80117ce:	bf00      	nop

	return res;
 80117d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3718      	adds	r7, #24
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}

080117da <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80117da:	b580      	push	{r7, lr}
 80117dc:	b084      	sub	sp, #16
 80117de:	af00      	add	r7, sp, #0
 80117e0:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80117e2:	2101      	movs	r1, #1
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f7ff ff0c 	bl	8011602 <dir_alloc>
 80117ea:	4603      	mov	r3, r0
 80117ec:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80117ee:	7bfb      	ldrb	r3, [r7, #15]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d126      	bne.n	8011842 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011800:	4619      	mov	r1, r3
 8011802:	4610      	mov	r0, r2
 8011804:	f7ff f983 	bl	8010b0e <move_window>
 8011808:	4603      	mov	r3, r0
 801180a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801180c:	7bfb      	ldrb	r3, [r7, #15]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d117      	bne.n	8011842 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011818:	2220      	movs	r2, #32
 801181a:	2100      	movs	r1, #0
 801181c:	4618      	mov	r0, r3
 801181e:	f7fe ff1f 	bl	8010660 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801182e:	220b      	movs	r2, #11
 8011830:	4619      	mov	r1, r3
 8011832:	f7fe fef7 	bl	8010624 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801183c:	2201      	movs	r2, #1
 801183e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8011842:	7bfb      	ldrb	r3, [r7, #15]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b088      	sub	sp, #32
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	60fb      	str	r3, [r7, #12]
 801185c:	e002      	b.n	8011864 <create_name+0x18>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	3301      	adds	r3, #1
 8011862:	60fb      	str	r3, [r7, #12]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	2b2f      	cmp	r3, #47	; 0x2f
 801186a:	d0f8      	beq.n	801185e <create_name+0x12>
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	2b5c      	cmp	r3, #92	; 0x5c
 8011872:	d0f4      	beq.n	801185e <create_name+0x12>
	sfn = dp->fn;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801187a:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801187c:	220b      	movs	r2, #11
 801187e:	2120      	movs	r1, #32
 8011880:	68b8      	ldr	r0, [r7, #8]
 8011882:	f7fe feed 	bl	8010660 <mem_set>
	si = i = b = 0; ni = 8;
 8011886:	2300      	movs	r3, #0
 8011888:	77fb      	strb	r3, [r7, #31]
 801188a:	2300      	movs	r3, #0
 801188c:	613b      	str	r3, [r7, #16]
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	617b      	str	r3, [r7, #20]
 8011892:	2308      	movs	r3, #8
 8011894:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	1c5a      	adds	r2, r3, #1
 801189a:	617a      	str	r2, [r7, #20]
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	4413      	add	r3, r2
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80118a4:	7fbb      	ldrb	r3, [r7, #30]
 80118a6:	2b20      	cmp	r3, #32
 80118a8:	d953      	bls.n	8011952 <create_name+0x106>
 80118aa:	7fbb      	ldrb	r3, [r7, #30]
 80118ac:	2b2f      	cmp	r3, #47	; 0x2f
 80118ae:	d050      	beq.n	8011952 <create_name+0x106>
 80118b0:	7fbb      	ldrb	r3, [r7, #30]
 80118b2:	2b5c      	cmp	r3, #92	; 0x5c
 80118b4:	d04d      	beq.n	8011952 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80118b6:	7fbb      	ldrb	r3, [r7, #30]
 80118b8:	2b2e      	cmp	r3, #46	; 0x2e
 80118ba:	d003      	beq.n	80118c4 <create_name+0x78>
 80118bc:	693a      	ldr	r2, [r7, #16]
 80118be:	69bb      	ldr	r3, [r7, #24]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d30f      	bcc.n	80118e4 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	2b08      	cmp	r3, #8
 80118c8:	d102      	bne.n	80118d0 <create_name+0x84>
 80118ca:	7fbb      	ldrb	r3, [r7, #30]
 80118cc:	2b2e      	cmp	r3, #46	; 0x2e
 80118ce:	d001      	beq.n	80118d4 <create_name+0x88>
 80118d0:	2306      	movs	r3, #6
 80118d2:	e073      	b.n	80119bc <create_name+0x170>
			i = 8; ni = 11;
 80118d4:	2308      	movs	r3, #8
 80118d6:	613b      	str	r3, [r7, #16]
 80118d8:	230b      	movs	r3, #11
 80118da:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 80118dc:	7ffb      	ldrb	r3, [r7, #31]
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	77fb      	strb	r3, [r7, #31]
 80118e2:	e035      	b.n	8011950 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 80118e4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	da08      	bge.n	80118fe <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 80118ec:	7ffb      	ldrb	r3, [r7, #31]
 80118ee:	f043 0303 	orr.w	r3, r3, #3
 80118f2:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80118f4:	7fbb      	ldrb	r3, [r7, #30]
 80118f6:	3b80      	subs	r3, #128	; 0x80
 80118f8:	4a32      	ldr	r2, [pc, #200]	; (80119c4 <create_name+0x178>)
 80118fa:	5cd3      	ldrb	r3, [r2, r3]
 80118fc:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 80118fe:	7fbb      	ldrb	r3, [r7, #30]
 8011900:	4619      	mov	r1, r3
 8011902:	4831      	ldr	r0, [pc, #196]	; (80119c8 <create_name+0x17c>)
 8011904:	f7fe feec 	bl	80106e0 <chk_chr>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d001      	beq.n	8011912 <create_name+0xc6>
				return FR_INVALID_NAME;
 801190e:	2306      	movs	r3, #6
 8011910:	e054      	b.n	80119bc <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8011912:	7fbb      	ldrb	r3, [r7, #30]
 8011914:	2b40      	cmp	r3, #64	; 0x40
 8011916:	d907      	bls.n	8011928 <create_name+0xdc>
 8011918:	7fbb      	ldrb	r3, [r7, #30]
 801191a:	2b5a      	cmp	r3, #90	; 0x5a
 801191c:	d804      	bhi.n	8011928 <create_name+0xdc>
				b |= 2;
 801191e:	7ffb      	ldrb	r3, [r7, #31]
 8011920:	f043 0302 	orr.w	r3, r3, #2
 8011924:	77fb      	strb	r3, [r7, #31]
 8011926:	e00c      	b.n	8011942 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8011928:	7fbb      	ldrb	r3, [r7, #30]
 801192a:	2b60      	cmp	r3, #96	; 0x60
 801192c:	d909      	bls.n	8011942 <create_name+0xf6>
 801192e:	7fbb      	ldrb	r3, [r7, #30]
 8011930:	2b7a      	cmp	r3, #122	; 0x7a
 8011932:	d806      	bhi.n	8011942 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8011934:	7ffb      	ldrb	r3, [r7, #31]
 8011936:	f043 0301 	orr.w	r3, r3, #1
 801193a:	77fb      	strb	r3, [r7, #31]
 801193c:	7fbb      	ldrb	r3, [r7, #30]
 801193e:	3b20      	subs	r3, #32
 8011940:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	1c5a      	adds	r2, r3, #1
 8011946:	613a      	str	r2, [r7, #16]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	4413      	add	r3, r2
 801194c:	7fba      	ldrb	r2, [r7, #30]
 801194e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011950:	e7a1      	b.n	8011896 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011952:	68fa      	ldr	r2, [r7, #12]
 8011954:	697b      	ldr	r3, [r7, #20]
 8011956:	441a      	add	r2, r3
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 801195c:	7fbb      	ldrb	r3, [r7, #30]
 801195e:	2b20      	cmp	r3, #32
 8011960:	d801      	bhi.n	8011966 <create_name+0x11a>
 8011962:	2304      	movs	r3, #4
 8011964:	e000      	b.n	8011968 <create_name+0x11c>
 8011966:	2300      	movs	r3, #0
 8011968:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d101      	bne.n	8011974 <create_name+0x128>
 8011970:	2306      	movs	r3, #6
 8011972:	e023      	b.n	80119bc <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	2be5      	cmp	r3, #229	; 0xe5
 801197a:	d102      	bne.n	8011982 <create_name+0x136>
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	2205      	movs	r2, #5
 8011980:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	2b08      	cmp	r3, #8
 8011986:	d102      	bne.n	801198e <create_name+0x142>
 8011988:	7ffb      	ldrb	r3, [r7, #31]
 801198a:	009b      	lsls	r3, r3, #2
 801198c:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 801198e:	7ffb      	ldrb	r3, [r7, #31]
 8011990:	f003 0303 	and.w	r3, r3, #3
 8011994:	2b01      	cmp	r3, #1
 8011996:	d103      	bne.n	80119a0 <create_name+0x154>
 8011998:	7fbb      	ldrb	r3, [r7, #30]
 801199a:	f043 0310 	orr.w	r3, r3, #16
 801199e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80119a0:	7ffb      	ldrb	r3, [r7, #31]
 80119a2:	f003 030c 	and.w	r3, r3, #12
 80119a6:	2b04      	cmp	r3, #4
 80119a8:	d103      	bne.n	80119b2 <create_name+0x166>
 80119aa:	7fbb      	ldrb	r3, [r7, #30]
 80119ac:	f043 0308 	orr.w	r3, r3, #8
 80119b0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	330b      	adds	r3, #11
 80119b6:	7fba      	ldrb	r2, [r7, #30]
 80119b8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80119ba:	2300      	movs	r3, #0
#endif
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3720      	adds	r7, #32
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}
 80119c4:	0802fb40 	.word	0x0802fb40
 80119c8:	08016874 	.word	0x08016874

080119cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b084      	sub	sp, #16
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	781b      	ldrb	r3, [r3, #0]
 80119da:	2b2f      	cmp	r3, #47	; 0x2f
 80119dc:	d003      	beq.n	80119e6 <follow_path+0x1a>
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	2b5c      	cmp	r3, #92	; 0x5c
 80119e4:	d102      	bne.n	80119ec <follow_path+0x20>
		path++;
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	3301      	adds	r3, #1
 80119ea:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2200      	movs	r2, #0
 80119f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	2b1f      	cmp	r3, #31
 80119fa:	d80a      	bhi.n	8011a12 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80119fc:	2100      	movs	r1, #0
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f7ff fc74 	bl	80112ec <dir_sdi>
 8011a04:	4603      	mov	r3, r0
 8011a06:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011a10:	e045      	b.n	8011a9e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a12:	463b      	mov	r3, r7
 8011a14:	4619      	mov	r1, r3
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7ff ff18 	bl	801184c <create_name>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8011a20:	7bfb      	ldrb	r3, [r7, #15]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d136      	bne.n	8011a94 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8011a26:	6878      	ldr	r0, [r7, #4]
 8011a28:	f7ff fe88 	bl	801173c <dir_find>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011a36:	7adb      	ldrb	r3, [r3, #11]
 8011a38:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8011a3a:	7bfb      	ldrb	r3, [r7, #15]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00a      	beq.n	8011a56 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011a40:	7bfb      	ldrb	r3, [r7, #15]
 8011a42:	2b04      	cmp	r3, #4
 8011a44:	d128      	bne.n	8011a98 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011a46:	7bbb      	ldrb	r3, [r7, #14]
 8011a48:	f003 0304 	and.w	r3, r3, #4
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d123      	bne.n	8011a98 <follow_path+0xcc>
 8011a50:	2305      	movs	r3, #5
 8011a52:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8011a54:	e020      	b.n	8011a98 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011a56:	7bbb      	ldrb	r3, [r7, #14]
 8011a58:	f003 0304 	and.w	r3, r3, #4
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d11d      	bne.n	8011a9c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011a66:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	330b      	adds	r3, #11
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	f003 0310 	and.w	r3, r3, #16
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d102      	bne.n	8011a7c <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8011a76:	2305      	movs	r3, #5
 8011a78:	73fb      	strb	r3, [r7, #15]
 8011a7a:	e010      	b.n	8011a9e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011a82:	68b9      	ldr	r1, [r7, #8]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7ff fe06 	bl	8011696 <ld_clust>
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a92:	e7be      	b.n	8011a12 <follow_path+0x46>
			if (res != FR_OK) break;
 8011a94:	bf00      	nop
 8011a96:	e002      	b.n	8011a9e <follow_path+0xd2>
				break;
 8011a98:	bf00      	nop
 8011a9a:	e000      	b.n	8011a9e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011a9c:	bf00      	nop
		}
	}

	return res;
 8011a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3710      	adds	r7, #16
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b087      	sub	sp, #28
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d031      	beq.n	8011b22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	617b      	str	r3, [r7, #20]
 8011ac4:	e002      	b.n	8011acc <get_ldnumber+0x24>
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	617b      	str	r3, [r7, #20]
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	781b      	ldrb	r3, [r3, #0]
 8011ad0:	2b20      	cmp	r3, #32
 8011ad2:	d903      	bls.n	8011adc <get_ldnumber+0x34>
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	2b3a      	cmp	r3, #58	; 0x3a
 8011ada:	d1f4      	bne.n	8011ac6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	2b3a      	cmp	r3, #58	; 0x3a
 8011ae2:	d11c      	bne.n	8011b1e <get_ldnumber+0x76>
			tp = *path;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	1c5a      	adds	r2, r3, #1
 8011aee:	60fa      	str	r2, [r7, #12]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	3b30      	subs	r3, #48	; 0x30
 8011af4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	2b09      	cmp	r3, #9
 8011afa:	d80e      	bhi.n	8011b1a <get_ldnumber+0x72>
 8011afc:	68fa      	ldr	r2, [r7, #12]
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d10a      	bne.n	8011b1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d107      	bne.n	8011b1a <get_ldnumber+0x72>
					vol = (int)i;
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	3301      	adds	r3, #1
 8011b12:	617b      	str	r3, [r7, #20]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	697a      	ldr	r2, [r7, #20]
 8011b18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	e002      	b.n	8011b24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011b1e:	2300      	movs	r3, #0
 8011b20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011b22:	693b      	ldr	r3, [r7, #16]
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	371c      	adds	r7, #28
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bc80      	pop	{r7}
 8011b2c:	4770      	bx	lr
	...

08011b30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f04f 32ff 	mov.w	r2, #4294967295
 8011b48:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7fe ffdd 	bl	8010b0e <move_window>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <check_fs+0x2e>
		return 3;
 8011b5a:	2303      	movs	r3, #3
 8011b5c:	e04a      	b.n	8011bf4 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b64:	3301      	adds	r3, #1
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	021b      	lsls	r3, r3, #8
 8011b6a:	b21a      	sxth	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8011b72:	b21b      	sxth	r3, r3
 8011b74:	4313      	orrs	r3, r2
 8011b76:	b21b      	sxth	r3, r3
 8011b78:	4a20      	ldr	r2, [pc, #128]	; (8011bfc <check_fs+0xcc>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d001      	beq.n	8011b82 <check_fs+0x52>
		return 2;
 8011b7e:	2302      	movs	r3, #2
 8011b80:	e038      	b.n	8011bf4 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	3336      	adds	r3, #54	; 0x36
 8011b86:	3303      	adds	r3, #3
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	061a      	lsls	r2, r3, #24
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	3336      	adds	r3, #54	; 0x36
 8011b90:	3302      	adds	r3, #2
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	041b      	lsls	r3, r3, #16
 8011b96:	4313      	orrs	r3, r2
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	3236      	adds	r2, #54	; 0x36
 8011b9c:	3201      	adds	r2, #1
 8011b9e:	7812      	ldrb	r2, [r2, #0]
 8011ba0:	0212      	lsls	r2, r2, #8
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8011baa:	4313      	orrs	r3, r2
 8011bac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011bb0:	4a13      	ldr	r2, [pc, #76]	; (8011c00 <check_fs+0xd0>)
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	d101      	bne.n	8011bba <check_fs+0x8a>
		return 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	e01c      	b.n	8011bf4 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	3352      	adds	r3, #82	; 0x52
 8011bbe:	3303      	adds	r3, #3
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	061a      	lsls	r2, r3, #24
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	3352      	adds	r3, #82	; 0x52
 8011bc8:	3302      	adds	r3, #2
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	041b      	lsls	r3, r3, #16
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	3252      	adds	r2, #82	; 0x52
 8011bd4:	3201      	adds	r2, #1
 8011bd6:	7812      	ldrb	r2, [r2, #0]
 8011bd8:	0212      	lsls	r2, r2, #8
 8011bda:	4313      	orrs	r3, r2
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8011be2:	4313      	orrs	r3, r2
 8011be4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011be8:	4a05      	ldr	r2, [pc, #20]	; (8011c00 <check_fs+0xd0>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d101      	bne.n	8011bf2 <check_fs+0xc2>
		return 0;
 8011bee:	2300      	movs	r3, #0
 8011bf0:	e000      	b.n	8011bf4 <check_fs+0xc4>

	return 1;
 8011bf2:	2301      	movs	r3, #1
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3708      	adds	r7, #8
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	ffffaa55 	.word	0xffffaa55
 8011c00:	00544146 	.word	0x00544146

08011c04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b096      	sub	sp, #88	; 0x58
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2200      	movs	r2, #0
 8011c16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011c18:	68b8      	ldr	r0, [r7, #8]
 8011c1a:	f7ff ff45 	bl	8011aa8 <get_ldnumber>
 8011c1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	da01      	bge.n	8011c2a <find_volume+0x26>
 8011c26:	230b      	movs	r3, #11
 8011c28:	e2a8      	b.n	801217c <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011c2a:	4a9d      	ldr	r2, [pc, #628]	; (8011ea0 <find_volume+0x29c>)
 8011c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d101      	bne.n	8011c3e <find_volume+0x3a>
 8011c3a:	230c      	movs	r3, #12
 8011c3c:	e29e      	b.n	801217c <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c42:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8011c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d01b      	beq.n	8011c86 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c50:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe fc47 	bl	80104e8 <disk_status>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c64:	f003 0301 	and.w	r3, r3, #1
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d10c      	bne.n	8011c86 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8011c6c:	79fb      	ldrb	r3, [r7, #7]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d007      	beq.n	8011c82 <find_volume+0x7e>
 8011c72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c76:	f003 0304 	and.w	r3, r3, #4
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d001      	beq.n	8011c82 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8011c7e:	230a      	movs	r3, #10
 8011c80:	e27c      	b.n	801217c <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8011c82:	2300      	movs	r3, #0
 8011c84:	e27a      	b.n	801217c <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c90:	b2da      	uxtb	r2, r3
 8011c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7fe fc3c 	bl	801051c <disk_initialize>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8011caa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cae:	f003 0301 	and.w	r3, r3, #1
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d001      	beq.n	8011cba <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011cb6:	2303      	movs	r3, #3
 8011cb8:	e260      	b.n	801217c <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8011cba:	79fb      	ldrb	r3, [r7, #7]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d007      	beq.n	8011cd0 <find_volume+0xcc>
 8011cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cc4:	f003 0304 	and.w	r3, r3, #4
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d001      	beq.n	8011cd0 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8011ccc:	230a      	movs	r3, #10
 8011cce:	e255      	b.n	801217c <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8011cd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011cd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011cd8:	f7ff ff2a 	bl	8011b30 <check_fs>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8011ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d153      	bne.n	8011d92 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011cea:	2300      	movs	r3, #0
 8011cec:	643b      	str	r3, [r7, #64]	; 0x40
 8011cee:	e028      	b.n	8011d42 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8011cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cf4:	011b      	lsls	r3, r3, #4
 8011cf6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011cfa:	4413      	add	r3, r2
 8011cfc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8011cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d00:	3304      	adds	r3, #4
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d012      	beq.n	8011d2e <find_volume+0x12a>
 8011d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0a:	330b      	adds	r3, #11
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	061a      	lsls	r2, r3, #24
 8011d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d12:	330a      	adds	r3, #10
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	041b      	lsls	r3, r3, #16
 8011d18:	4313      	orrs	r3, r2
 8011d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d1c:	3209      	adds	r2, #9
 8011d1e:	7812      	ldrb	r2, [r2, #0]
 8011d20:	0212      	lsls	r2, r2, #8
 8011d22:	4313      	orrs	r3, r2
 8011d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d26:	3208      	adds	r2, #8
 8011d28:	7812      	ldrb	r2, [r2, #0]
 8011d2a:	431a      	orrs	r2, r3
 8011d2c:	e000      	b.n	8011d30 <find_volume+0x12c>
 8011d2e:	2200      	movs	r2, #0
 8011d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	3358      	adds	r3, #88	; 0x58
 8011d36:	443b      	add	r3, r7
 8011d38:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d3e:	3301      	adds	r3, #1
 8011d40:	643b      	str	r3, [r7, #64]	; 0x40
 8011d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d44:	2b03      	cmp	r3, #3
 8011d46:	d9d3      	bls.n	8011cf0 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8011d48:	2300      	movs	r3, #0
 8011d4a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d002      	beq.n	8011d58 <find_volume+0x154>
 8011d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d54:	3b01      	subs	r3, #1
 8011d56:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8011d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	3358      	adds	r3, #88	; 0x58
 8011d5e:	443b      	add	r3, r7
 8011d60:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011d64:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8011d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d005      	beq.n	8011d78 <find_volume+0x174>
 8011d6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d70:	f7ff fede 	bl	8011b30 <check_fs>
 8011d74:	4603      	mov	r3, r0
 8011d76:	e000      	b.n	8011d7a <find_volume+0x176>
 8011d78:	2302      	movs	r3, #2
 8011d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8011d7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d005      	beq.n	8011d92 <find_volume+0x18e>
 8011d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d88:	3301      	adds	r3, #1
 8011d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8011d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d8e:	2b03      	cmp	r3, #3
 8011d90:	d9e2      	bls.n	8011d58 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011d92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d96:	2b03      	cmp	r3, #3
 8011d98:	d101      	bne.n	8011d9e <find_volume+0x19a>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e1ee      	b.n	801217c <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8011d9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d001      	beq.n	8011daa <find_volume+0x1a6>
 8011da6:	230d      	movs	r3, #13
 8011da8:	e1e8      	b.n	801217c <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dac:	7b1b      	ldrb	r3, [r3, #12]
 8011dae:	021b      	lsls	r3, r3, #8
 8011db0:	b21a      	sxth	r2, r3
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	7adb      	ldrb	r3, [r3, #11]
 8011db6:	b21b      	sxth	r3, r3
 8011db8:	4313      	orrs	r3, r2
 8011dba:	b21b      	sxth	r3, r3
 8011dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dc0:	d001      	beq.n	8011dc6 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8011dc2:	230d      	movs	r3, #13
 8011dc4:	e1da      	b.n	801217c <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8011dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc8:	7ddb      	ldrb	r3, [r3, #23]
 8011dca:	021b      	lsls	r3, r3, #8
 8011dcc:	b21a      	sxth	r2, r3
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	7d9b      	ldrb	r3, [r3, #22]
 8011dd2:	b21b      	sxth	r3, r3
 8011dd4:	4313      	orrs	r3, r2
 8011dd6:	b21b      	sxth	r3, r3
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8011ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d112      	bne.n	8011e08 <find_volume+0x204>
 8011de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011de8:	061a      	lsls	r2, r3, #24
 8011dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8011df0:	041b      	lsls	r3, r3, #16
 8011df2:	4313      	orrs	r3, r2
 8011df4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011df6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8011dfa:	0212      	lsls	r2, r2, #8
 8011dfc:	4313      	orrs	r3, r2
 8011dfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e00:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011e04:	4313      	orrs	r3, r2
 8011e06:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8011e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8011e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e12:	7c1a      	ldrb	r2, [r3, #16]
 8011e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e16:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011e20:	2b01      	cmp	r3, #1
 8011e22:	d006      	beq.n	8011e32 <find_volume+0x22e>
 8011e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e26:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011e2a:	2b02      	cmp	r3, #2
 8011e2c:	d001      	beq.n	8011e32 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8011e2e:	230d      	movs	r3, #13
 8011e30:	e1a4      	b.n	801217c <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8011e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e34:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8011e38:	461a      	mov	r2, r3
 8011e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e3c:	fb02 f303 	mul.w	r3, r2, r3
 8011e40:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8011e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e44:	7b5a      	ldrb	r2, [r3, #13]
 8011e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e48:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8011e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d00a      	beq.n	8011e6c <find_volume+0x268>
 8011e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e58:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e60:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8011e64:	3b01      	subs	r3, #1
 8011e66:	4013      	ands	r3, r2
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8011e6c:	230d      	movs	r3, #13
 8011e6e:	e185      	b.n	801217c <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8011e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e72:	7c9b      	ldrb	r3, [r3, #18]
 8011e74:	021b      	lsls	r3, r3, #8
 8011e76:	b21a      	sxth	r2, r3
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	7c5b      	ldrb	r3, [r3, #17]
 8011e7c:	b21b      	sxth	r3, r3
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	b21b      	sxth	r3, r3
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e86:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8011e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011e90:	f003 030f 	and.w	r3, r3, #15
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d004      	beq.n	8011ea4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8011e9a:	230d      	movs	r3, #13
 8011e9c:	e16e      	b.n	801217c <find_volume+0x578>
 8011e9e:	bf00      	nop
 8011ea0:	20000ee8 	.word	0x20000ee8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8011ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea6:	7d1b      	ldrb	r3, [r3, #20]
 8011ea8:	021b      	lsls	r3, r3, #8
 8011eaa:	b21a      	sxth	r2, r3
 8011eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eae:	7cdb      	ldrb	r3, [r3, #19]
 8011eb0:	b21b      	sxth	r3, r3
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	b21b      	sxth	r3, r3
 8011eb6:	b29b      	uxth	r3, r3
 8011eb8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8011eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d112      	bne.n	8011ee6 <find_volume+0x2e2>
 8011ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011ec6:	061a      	lsls	r2, r3, #24
 8011ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8011ece:	041b      	lsls	r3, r3, #16
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ed4:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8011ed8:	0212      	lsls	r2, r2, #8
 8011eda:	4313      	orrs	r3, r2
 8011edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ede:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8011ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee8:	7bdb      	ldrb	r3, [r3, #15]
 8011eea:	021b      	lsls	r3, r3, #8
 8011eec:	b21a      	sxth	r2, r3
 8011eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef0:	7b9b      	ldrb	r3, [r3, #14]
 8011ef2:	b21b      	sxth	r3, r3
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	b21b      	sxth	r3, r3
 8011ef8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8011efa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d101      	bne.n	8011f04 <find_volume+0x300>
 8011f00:	230d      	movs	r3, #13
 8011f02:	e13b      	b.n	801217c <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8011f04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f08:	4413      	add	r3, r2
 8011f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f0c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8011f10:	0912      	lsrs	r2, r2, #4
 8011f12:	b292      	uxth	r2, r2
 8011f14:	4413      	add	r3, r2
 8011f16:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d201      	bcs.n	8011f24 <find_volume+0x320>
 8011f20:	230d      	movs	r3, #13
 8011f22:	e12b      	b.n	801217c <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8011f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f28:	1ad3      	subs	r3, r2, r3
 8011f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f2c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8011f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f34:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8011f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d101      	bne.n	8011f40 <find_volume+0x33c>
 8011f3c:	230d      	movs	r3, #13
 8011f3e:	e11d      	b.n	801217c <find_volume+0x578>
	fmt = FS_FAT12;
 8011f40:	2301      	movs	r3, #1
 8011f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8011f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f48:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d902      	bls.n	8011f56 <find_volume+0x352>
 8011f50:	2302      	movs	r3, #2
 8011f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011f5c:	4293      	cmp	r3, r2
 8011f5e:	d902      	bls.n	8011f66 <find_volume+0x362>
 8011f60:	2303      	movs	r3, #3
 8011f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8011f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f68:	1c9a      	adds	r2, r3, #2
 8011f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8011f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f74:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8011f78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f7c:	441a      	add	r2, r3
 8011f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f80:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8011f84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f88:	441a      	add	r2, r3
 8011f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8011f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f94:	2b03      	cmp	r3, #3
 8011f96:	d121      	bne.n	8011fdc <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8011f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d001      	beq.n	8011fa6 <find_volume+0x3a2>
 8011fa2:	230d      	movs	r3, #13
 8011fa4:	e0ea      	b.n	801217c <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011fac:	061a      	lsls	r2, r3, #24
 8011fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011fb4:	041b      	lsls	r3, r3, #16
 8011fb6:	4313      	orrs	r3, r2
 8011fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fba:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8011fbe:	0212      	lsls	r2, r2, #8
 8011fc0:	4313      	orrs	r3, r2
 8011fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fc4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8011fc8:	431a      	orrs	r2, r3
 8011fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fcc:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011fd6:	009b      	lsls	r3, r3, #2
 8011fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8011fda:	e025      	b.n	8012028 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8011fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fde:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d101      	bne.n	8011fea <find_volume+0x3e6>
 8011fe6:	230d      	movs	r3, #13
 8011fe8:	e0c8      	b.n	801217c <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8011fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fec:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8011ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ff2:	441a      	add	r2, r3
 8011ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011ffa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ffe:	2b02      	cmp	r3, #2
 8012000:	d104      	bne.n	801200c <find_volume+0x408>
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	e00c      	b.n	8012026 <find_volume+0x422>
 801200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012012:	4613      	mov	r3, r2
 8012014:	005b      	lsls	r3, r3, #1
 8012016:	4413      	add	r3, r2
 8012018:	085a      	lsrs	r2, r3, #1
 801201a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012020:	f003 0301 	and.w	r3, r3, #1
 8012024:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8012026:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8012028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801202a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801202e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012030:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012034:	0a5b      	lsrs	r3, r3, #9
 8012036:	429a      	cmp	r2, r3
 8012038:	d201      	bcs.n	801203e <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 801203a:	230d      	movs	r3, #13
 801203c:	e09e      	b.n	801217c <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 801203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012040:	f04f 32ff 	mov.w	r2, #4294967295
 8012044:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8012048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012050:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8012054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012056:	2280      	movs	r2, #128	; 0x80
 8012058:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 801205c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012060:	2b03      	cmp	r3, #3
 8012062:	d177      	bne.n	8012154 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8012064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012066:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801206a:	021b      	lsls	r3, r3, #8
 801206c:	b21a      	sxth	r2, r3
 801206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012074:	b21b      	sxth	r3, r3
 8012076:	4313      	orrs	r3, r2
 8012078:	b21b      	sxth	r3, r3
 801207a:	2b01      	cmp	r3, #1
 801207c:	d16a      	bne.n	8012154 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 801207e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012080:	3301      	adds	r3, #1
 8012082:	4619      	mov	r1, r3
 8012084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012086:	f7fe fd42 	bl	8010b0e <move_window>
 801208a:	4603      	mov	r3, r0
 801208c:	2b00      	cmp	r3, #0
 801208e:	d161      	bne.n	8012154 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8012090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012092:	2200      	movs	r2, #0
 8012094:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 801209e:	021b      	lsls	r3, r3, #8
 80120a0:	b21a      	sxth	r2, r3
 80120a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80120a8:	b21b      	sxth	r3, r3
 80120aa:	4313      	orrs	r3, r2
 80120ac:	b21b      	sxth	r3, r3
 80120ae:	4a35      	ldr	r2, [pc, #212]	; (8012184 <find_volume+0x580>)
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d14f      	bne.n	8012154 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80120b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b6:	78db      	ldrb	r3, [r3, #3]
 80120b8:	061a      	lsls	r2, r3, #24
 80120ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120bc:	789b      	ldrb	r3, [r3, #2]
 80120be:	041b      	lsls	r3, r3, #16
 80120c0:	4313      	orrs	r3, r2
 80120c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120c4:	7852      	ldrb	r2, [r2, #1]
 80120c6:	0212      	lsls	r2, r2, #8
 80120c8:	4313      	orrs	r3, r2
 80120ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120cc:	7812      	ldrb	r2, [r2, #0]
 80120ce:	4313      	orrs	r3, r2
 80120d0:	4a2d      	ldr	r2, [pc, #180]	; (8012188 <find_volume+0x584>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d13e      	bne.n	8012154 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80120d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d8:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 80120dc:	061a      	lsls	r2, r3, #24
 80120de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e0:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 80120e4:	041b      	lsls	r3, r3, #16
 80120e6:	4313      	orrs	r3, r2
 80120e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120ea:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 80120ee:	0212      	lsls	r2, r2, #8
 80120f0:	4313      	orrs	r3, r2
 80120f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120f4:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 80120f8:	4313      	orrs	r3, r2
 80120fa:	4a24      	ldr	r2, [pc, #144]	; (801218c <find_volume+0x588>)
 80120fc:	4293      	cmp	r3, r2
 80120fe:	d129      	bne.n	8012154 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8012100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012102:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8012106:	061a      	lsls	r2, r3, #24
 8012108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 801210e:	041b      	lsls	r3, r3, #16
 8012110:	4313      	orrs	r3, r2
 8012112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012114:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8012118:	0212      	lsls	r2, r2, #8
 801211a:	4313      	orrs	r3, r2
 801211c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801211e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8012122:	431a      	orrs	r2, r3
 8012124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 801212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8012130:	061a      	lsls	r2, r3, #24
 8012132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012134:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8012138:	041b      	lsls	r3, r3, #16
 801213a:	4313      	orrs	r3, r2
 801213c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801213e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8012142:	0212      	lsls	r2, r2, #8
 8012144:	4313      	orrs	r3, r2
 8012146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012148:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 801214c:	431a      	orrs	r2, r3
 801214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012150:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8012154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012156:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801215a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 801215e:	4b0c      	ldr	r3, [pc, #48]	; (8012190 <find_volume+0x58c>)
 8012160:	881b      	ldrh	r3, [r3, #0]
 8012162:	3301      	adds	r3, #1
 8012164:	b29a      	uxth	r2, r3
 8012166:	4b0a      	ldr	r3, [pc, #40]	; (8012190 <find_volume+0x58c>)
 8012168:	801a      	strh	r2, [r3, #0]
 801216a:	4b09      	ldr	r3, [pc, #36]	; (8012190 <find_volume+0x58c>)
 801216c:	881a      	ldrh	r2, [r3, #0]
 801216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012170:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8012174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012176:	f7fe fc57 	bl	8010a28 <clear_lock>
#endif

	return FR_OK;
 801217a:	2300      	movs	r3, #0
}
 801217c:	4618      	mov	r0, r3
 801217e:	3758      	adds	r7, #88	; 0x58
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	ffffaa55 	.word	0xffffaa55
 8012188:	41615252 	.word	0x41615252
 801218c:	61417272 	.word	0x61417272
 8012190:	20000eec 	.word	0x20000eec

08012194 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d022      	beq.n	80121ec <validate+0x58>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d01d      	beq.n	80121ec <validate+0x58>
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80121b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d016      	beq.n	80121ec <validate+0x58>
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80121c4:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d10c      	bne.n	80121ec <validate+0x58>
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80121d8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fe f983 	bl	80104e8 <disk_status>
 80121e2:	4603      	mov	r3, r0
 80121e4:	f003 0301 	and.w	r3, r3, #1
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <validate+0x5c>
		return FR_INVALID_OBJECT;
 80121ec:	2309      	movs	r3, #9
 80121ee:	e000      	b.n	80121f2 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 80121f0:	2300      	movs	r3, #0
}
 80121f2:	4618      	mov	r0, r3
 80121f4:	3710      	adds	r7, #16
 80121f6:	46bd      	mov	sp, r7
 80121f8:	bd80      	pop	{r7, pc}
	...

080121fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b088      	sub	sp, #32
 8012200:	af00      	add	r7, sp, #0
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	4613      	mov	r3, r2
 8012208:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 801220e:	f107 0310 	add.w	r3, r7, #16
 8012212:	4618      	mov	r0, r3
 8012214:	f7ff fc48 	bl	8011aa8 <get_ldnumber>
 8012218:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	2b00      	cmp	r3, #0
 801221e:	da01      	bge.n	8012224 <f_mount+0x28>
 8012220:	230b      	movs	r3, #11
 8012222:	e02d      	b.n	8012280 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012224:	4a18      	ldr	r2, [pc, #96]	; (8012288 <f_mount+0x8c>)
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801222c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d006      	beq.n	8012242 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8012234:	69b8      	ldr	r0, [r7, #24]
 8012236:	f7fe fbf7 	bl	8010a28 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801223a:	69bb      	ldr	r3, [r7, #24]
 801223c:	2200      	movs	r2, #0
 801223e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d003      	beq.n	8012250 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2200      	movs	r2, #0
 801224c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012250:	68fa      	ldr	r2, [r7, #12]
 8012252:	490d      	ldr	r1, [pc, #52]	; (8012288 <f_mount+0x8c>)
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d002      	beq.n	8012266 <f_mount+0x6a>
 8012260:	79fb      	ldrb	r3, [r7, #7]
 8012262:	2b01      	cmp	r3, #1
 8012264:	d001      	beq.n	801226a <f_mount+0x6e>
 8012266:	2300      	movs	r3, #0
 8012268:	e00a      	b.n	8012280 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 801226a:	f107 0108 	add.w	r1, r7, #8
 801226e:	f107 030c 	add.w	r3, r7, #12
 8012272:	2200      	movs	r2, #0
 8012274:	4618      	mov	r0, r3
 8012276:	f7ff fcc5 	bl	8011c04 <find_volume>
 801227a:	4603      	mov	r3, r0
 801227c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801227e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012280:	4618      	mov	r0, r3
 8012282:	3720      	adds	r7, #32
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	20000ee8 	.word	0x20000ee8

0801228c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8012292:	af00      	add	r7, sp, #0
 8012294:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012298:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801229c:	6018      	str	r0, [r3, #0]
 801229e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122a2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80122a6:	6019      	str	r1, [r3, #0]
 80122a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122ac:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80122b0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80122b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122b6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d101      	bne.n	80122c4 <f_open+0x38>
 80122c0:	2309      	movs	r3, #9
 80122c2:	e257      	b.n	8012774 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 80122c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122c8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2200      	movs	r2, #0
 80122d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80122d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122d8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80122dc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80122e0:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80122e4:	7812      	ldrb	r2, [r2, #0]
 80122e6:	f002 021f 	and.w	r2, r2, #31
 80122ea:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80122ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80122f0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	f023 0301 	bic.w	r3, r3, #1
 80122fa:	b2da      	uxtb	r2, r3
 80122fc:	f107 0108 	add.w	r1, r7, #8
 8012300:	f107 0320 	add.w	r3, r7, #32
 8012304:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8012308:	4618      	mov	r0, r3
 801230a:	f7ff fc7b 	bl	8011c04 <find_volume>
 801230e:	4603      	mov	r3, r0
 8012310:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8012314:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012318:	2b00      	cmp	r3, #0
 801231a:	f040 8229 	bne.w	8012770 <f_open+0x4e4>
		INIT_BUF(dj);
 801231e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012322:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012326:	f107 0214 	add.w	r2, r7, #20
 801232a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 801232e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012332:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	f107 0320 	add.w	r3, r7, #32
 801233c:	4611      	mov	r1, r2
 801233e:	4618      	mov	r0, r3
 8012340:	f7ff fb44 	bl	80119cc <follow_path>
 8012344:	4603      	mov	r3, r0
 8012346:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 801234a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801234e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012352:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012356:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801235a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801235e:	2b00      	cmp	r3, #0
 8012360:	d11d      	bne.n	801239e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8012362:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012366:	2b00      	cmp	r3, #0
 8012368:	d103      	bne.n	8012372 <f_open+0xe6>
				res = FR_INVALID_NAME;
 801236a:	2306      	movs	r3, #6
 801236c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012370:	e015      	b.n	801239e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012372:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012376:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	f023 0301 	bic.w	r3, r3, #1
 8012380:	2b00      	cmp	r3, #0
 8012382:	bf14      	ite	ne
 8012384:	2301      	movne	r3, #1
 8012386:	2300      	moveq	r3, #0
 8012388:	b2db      	uxtb	r3, r3
 801238a:	461a      	mov	r2, r3
 801238c:	f107 0320 	add.w	r3, r7, #32
 8012390:	4611      	mov	r1, r2
 8012392:	4618      	mov	r0, r3
 8012394:	f7fe f9be 	bl	8010714 <chk_lock>
 8012398:	4603      	mov	r3, r0
 801239a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801239e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80123a2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	f003 031c 	and.w	r3, r3, #28
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 80e6 	beq.w	801257e <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80123b2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d027      	beq.n	801240a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80123ba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80123be:	2b04      	cmp	r3, #4
 80123c0:	d10e      	bne.n	80123e0 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80123c2:	f7fe fa13 	bl	80107ec <enq_lock>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d006      	beq.n	80123da <f_open+0x14e>
 80123cc:	f107 0320 	add.w	r3, r7, #32
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7ff fa02 	bl	80117da <dir_register>
 80123d6:	4603      	mov	r3, r0
 80123d8:	e000      	b.n	80123dc <f_open+0x150>
 80123da:	2312      	movs	r3, #18
 80123dc:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80123e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80123e4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80123e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80123ec:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80123f0:	7812      	ldrb	r2, [r2, #0]
 80123f2:	f042 0208 	orr.w	r2, r2, #8
 80123f6:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80123f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80123fc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012400:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012404:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8012408:	e017      	b.n	801243a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801240a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801240e:	330b      	adds	r3, #11
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	f003 0311 	and.w	r3, r3, #17
 8012416:	2b00      	cmp	r3, #0
 8012418:	d003      	beq.n	8012422 <f_open+0x196>
					res = FR_DENIED;
 801241a:	2307      	movs	r3, #7
 801241c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8012420:	e00b      	b.n	801243a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8012422:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012426:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	f003 0304 	and.w	r3, r3, #4
 8012430:	2b00      	cmp	r3, #0
 8012432:	d002      	beq.n	801243a <f_open+0x1ae>
						res = FR_EXIST;
 8012434:	2308      	movs	r3, #8
 8012436:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801243a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801243e:	2b00      	cmp	r3, #0
 8012440:	f040 80c1 	bne.w	80125c6 <f_open+0x33a>
 8012444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012448:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 801244c:	781b      	ldrb	r3, [r3, #0]
 801244e:	f003 0308 	and.w	r3, r3, #8
 8012452:	2b00      	cmp	r3, #0
 8012454:	f000 80b7 	beq.w	80125c6 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8012458:	f7fc fd9e 	bl	800ef98 <get_fattime>
 801245c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8012460:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012464:	330e      	adds	r3, #14
 8012466:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 801246a:	b2d2      	uxtb	r2, r2
 801246c:	701a      	strb	r2, [r3, #0]
 801246e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012472:	b29b      	uxth	r3, r3
 8012474:	0a1b      	lsrs	r3, r3, #8
 8012476:	b29a      	uxth	r2, r3
 8012478:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801247c:	330f      	adds	r3, #15
 801247e:	b2d2      	uxtb	r2, r2
 8012480:	701a      	strb	r2, [r3, #0]
 8012482:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012486:	0c1a      	lsrs	r2, r3, #16
 8012488:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801248c:	3310      	adds	r3, #16
 801248e:	b2d2      	uxtb	r2, r2
 8012490:	701a      	strb	r2, [r3, #0]
 8012492:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012496:	0e1a      	lsrs	r2, r3, #24
 8012498:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801249c:	3311      	adds	r3, #17
 801249e:	b2d2      	uxtb	r2, r2
 80124a0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80124a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80124a6:	330b      	adds	r3, #11
 80124a8:	2200      	movs	r2, #0
 80124aa:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80124ac:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80124b0:	331c      	adds	r3, #28
 80124b2:	2200      	movs	r2, #0
 80124b4:	701a      	strb	r2, [r3, #0]
 80124b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80124ba:	331d      	adds	r3, #29
 80124bc:	2200      	movs	r2, #0
 80124be:	701a      	strb	r2, [r3, #0]
 80124c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80124c4:	331e      	adds	r3, #30
 80124c6:	2200      	movs	r2, #0
 80124c8:	701a      	strb	r2, [r3, #0]
 80124ca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80124ce:	331f      	adds	r3, #31
 80124d0:	2200      	movs	r2, #0
 80124d2:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80124d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80124d8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80124dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80124e0:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7ff f8d6 	bl	8011696 <ld_clust>
 80124ea:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 80124ee:	2100      	movs	r1, #0
 80124f0:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 80124f4:	f7ff f8fc 	bl	80116f0 <st_clust>
				dj.fs->wflag = 1;
 80124f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80124fc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012500:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012504:	2201      	movs	r2, #1
 8012506:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 801250a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801250e:	2b00      	cmp	r3, #0
 8012510:	d059      	beq.n	80125c6 <f_open+0x33a>
					dw = dj.fs->winsect;
 8012512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012516:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801251a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801251e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8012522:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8012526:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801252a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801252e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012532:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8012536:	4618      	mov	r0, r3
 8012538:	f7fe fdad 	bl	8011096 <remove_chain>
 801253c:	4603      	mov	r3, r0
 801253e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8012542:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012546:	2b00      	cmp	r3, #0
 8012548:	d13d      	bne.n	80125c6 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 801254a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801254e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012552:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012556:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801255a:	3a01      	subs	r2, #1
 801255c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8012560:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012564:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012568:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801256c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012570:	4618      	mov	r0, r3
 8012572:	f7fe facc 	bl	8010b0e <move_window>
 8012576:	4603      	mov	r3, r0
 8012578:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801257c:	e023      	b.n	80125c6 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 801257e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8012582:	2b00      	cmp	r3, #0
 8012584:	d11f      	bne.n	80125c6 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8012586:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801258a:	330b      	adds	r3, #11
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	f003 0310 	and.w	r3, r3, #16
 8012592:	2b00      	cmp	r3, #0
 8012594:	d003      	beq.n	801259e <f_open+0x312>
					res = FR_NO_FILE;
 8012596:	2304      	movs	r3, #4
 8012598:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 801259c:	e013      	b.n	80125c6 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 801259e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125a2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	f003 0302 	and.w	r3, r3, #2
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00a      	beq.n	80125c6 <f_open+0x33a>
 80125b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80125b4:	330b      	adds	r3, #11
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	f003 0301 	and.w	r3, r3, #1
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d002      	beq.n	80125c6 <f_open+0x33a>
						res = FR_DENIED;
 80125c0:	2307      	movs	r3, #7
 80125c2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 80125c6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d153      	bne.n	8012676 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80125ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125d2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	f003 0308 	and.w	r3, r3, #8
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d00b      	beq.n	80125f8 <f_open+0x36c>
				mode |= FA__WRITTEN;
 80125e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125e4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80125e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80125ec:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80125f0:	7812      	ldrb	r2, [r2, #0]
 80125f2:	f042 0220 	orr.w	r2, r2, #32
 80125f6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80125f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80125fc:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8012600:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012604:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8012608:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801260c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8012616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801261a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012624:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012628:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801262c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	f023 0301 	bic.w	r3, r3, #1
 8012636:	2b00      	cmp	r3, #0
 8012638:	bf14      	ite	ne
 801263a:	2301      	movne	r3, #1
 801263c:	2300      	moveq	r3, #0
 801263e:	b2db      	uxtb	r3, r3
 8012640:	461a      	mov	r2, r3
 8012642:	f107 0320 	add.w	r3, r7, #32
 8012646:	4611      	mov	r1, r2
 8012648:	4618      	mov	r0, r3
 801264a:	f7fe f8f3 	bl	8010834 <inc_lock>
 801264e:	4602      	mov	r2, r0
 8012650:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012654:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 801265e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012662:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 801266c:	2b00      	cmp	r3, #0
 801266e:	d102      	bne.n	8012676 <f_open+0x3ea>
 8012670:	2302      	movs	r3, #2
 8012672:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8012676:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 801267a:	2b00      	cmp	r3, #0
 801267c:	d178      	bne.n	8012770 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 801267e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012682:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801268c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8012690:	7812      	ldrb	r2, [r2, #0]
 8012692:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8012696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801269a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2200      	movs	r2, #0
 80126a2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80126a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80126aa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80126ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80126b2:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7fe ffed 	bl	8011696 <ld_clust>
 80126bc:	4602      	mov	r2, r0
 80126be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80126c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80126cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80126d0:	331f      	adds	r3, #31
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	061a      	lsls	r2, r3, #24
 80126d6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80126da:	331e      	adds	r3, #30
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	041b      	lsls	r3, r3, #16
 80126e0:	4313      	orrs	r3, r2
 80126e2:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80126e6:	321d      	adds	r2, #29
 80126e8:	7812      	ldrb	r2, [r2, #0]
 80126ea:	0212      	lsls	r2, r2, #8
 80126ec:	4313      	orrs	r3, r2
 80126ee:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80126f2:	321c      	adds	r2, #28
 80126f4:	7812      	ldrb	r2, [r2, #0]
 80126f6:	431a      	orrs	r2, r3
 80126f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80126fc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8012706:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801270a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	2200      	movs	r2, #0
 8012712:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8012716:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801271a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2200      	movs	r2, #0
 8012722:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8012726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801272a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	2200      	movs	r2, #0
 8012732:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8012736:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801273a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801273e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012746:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8012750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012754:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801275e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8012762:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012766:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8012770:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 8012774:	4618      	mov	r0, r3
 8012776:	f507 7714 	add.w	r7, r7, #592	; 0x250
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}

0801277e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801277e:	b580      	push	{r7, lr}
 8012780:	b08a      	sub	sp, #40	; 0x28
 8012782:	af00      	add	r7, sp, #0
 8012784:	60f8      	str	r0, [r7, #12]
 8012786:	60b9      	str	r1, [r7, #8]
 8012788:	607a      	str	r2, [r7, #4]
 801278a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	2200      	movs	r2, #0
 8012794:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8012796:	68f8      	ldr	r0, [r7, #12]
 8012798:	f7ff fcfc 	bl	8012194 <validate>
 801279c:	4603      	mov	r3, r0
 801279e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80127a0:	7dfb      	ldrb	r3, [r7, #23]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d001      	beq.n	80127aa <f_write+0x2c>
 80127a6:	7dfb      	ldrb	r3, [r7, #23]
 80127a8:	e192      	b.n	8012ad0 <f_write+0x352>
	if (fp->err)							/* Check error */
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d003      	beq.n	80127bc <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80127ba:	e189      	b.n	8012ad0 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80127c2:	f003 0302 	and.w	r3, r3, #2
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d101      	bne.n	80127ce <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80127ca:	2307      	movs	r3, #7
 80127cc:	e180      	b.n	8012ad0 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	441a      	add	r2, r3
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80127de:	429a      	cmp	r2, r3
 80127e0:	f080 8158 	bcs.w	8012a94 <f_write+0x316>
 80127e4:	2300      	movs	r3, #0
 80127e6:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80127e8:	e154      	b.n	8012a94 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80127f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f040 8114 	bne.w	8012a22 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012800:	0a5b      	lsrs	r3, r3, #9
 8012802:	b2da      	uxtb	r2, r3
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801280a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801280e:	3b01      	subs	r3, #1
 8012810:	b2db      	uxtb	r3, r3
 8012812:	4013      	ands	r3, r2
 8012814:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8012816:	7dbb      	ldrb	r3, [r7, #22]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d151      	bne.n	80128c0 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012822:	2b00      	cmp	r3, #0
 8012824:	d10f      	bne.n	8012846 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801282c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	2b00      	cmp	r3, #0
 8012832:	d121      	bne.n	8012878 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801283a:	2100      	movs	r1, #0
 801283c:	4618      	mov	r0, r3
 801283e:	f7fe fc84 	bl	801114a <create_chain>
 8012842:	6278      	str	r0, [r7, #36]	; 0x24
 8012844:	e018      	b.n	8012878 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801284c:	2b00      	cmp	r3, #0
 801284e:	d008      	beq.n	8012862 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012856:	4619      	mov	r1, r3
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f7fe fd13 	bl	8011284 <clmt_clust>
 801285e:	6278      	str	r0, [r7, #36]	; 0x24
 8012860:	e00a      	b.n	8012878 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801286e:	4619      	mov	r1, r3
 8012870:	4610      	mov	r0, r2
 8012872:	f7fe fc6a 	bl	801114a <create_chain>
 8012876:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287a:	2b00      	cmp	r3, #0
 801287c:	f000 810f 	beq.w	8012a9e <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8012880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012882:	2b01      	cmp	r3, #1
 8012884:	d105      	bne.n	8012892 <f_write+0x114>
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2202      	movs	r2, #2
 801288a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801288e:	2302      	movs	r3, #2
 8012890:	e11e      	b.n	8012ad0 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8012892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012898:	d105      	bne.n	80128a6 <f_write+0x128>
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2201      	movs	r2, #1
 801289e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80128a2:	2301      	movs	r3, #1
 80128a4:	e114      	b.n	8012ad0 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d103      	bne.n	80128c0 <f_write+0x142>
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128bc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80128c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d01d      	beq.n	801290a <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80128d4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80128d8:	68f9      	ldr	r1, [r7, #12]
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80128e0:	2301      	movs	r3, #1
 80128e2:	f7fd fe61 	bl	80105a8 <disk_write>
 80128e6:	4603      	mov	r3, r0
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d005      	beq.n	80128f8 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2201      	movs	r2, #1
 80128f0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80128f4:	2301      	movs	r3, #1
 80128f6:	e0eb      	b.n	8012ad0 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80128fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012902:	b2da      	uxtb	r2, r3
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012916:	4619      	mov	r1, r3
 8012918:	4610      	mov	r0, r2
 801291a:	f7fe f9d3 	bl	8010cc4 <clust2sect>
 801291e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d105      	bne.n	8012932 <f_write+0x1b4>
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2202      	movs	r2, #2
 801292a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801292e:	2302      	movs	r3, #2
 8012930:	e0ce      	b.n	8012ad0 <f_write+0x352>
			sect += csect;
 8012932:	7dbb      	ldrb	r3, [r7, #22]
 8012934:	693a      	ldr	r2, [r7, #16]
 8012936:	4413      	add	r3, r2
 8012938:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	0a5b      	lsrs	r3, r3, #9
 801293e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012940:	69fb      	ldr	r3, [r7, #28]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d048      	beq.n	80129d8 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8012946:	7dba      	ldrb	r2, [r7, #22]
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	4413      	add	r3, r2
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8012952:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8012956:	4293      	cmp	r3, r2
 8012958:	d908      	bls.n	801296c <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012960:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8012964:	461a      	mov	r2, r3
 8012966:	7dbb      	ldrb	r3, [r7, #22]
 8012968:	1ad3      	subs	r3, r2, r3
 801296a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012972:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	693a      	ldr	r2, [r7, #16]
 801297a:	69b9      	ldr	r1, [r7, #24]
 801297c:	f7fd fe14 	bl	80105a8 <disk_write>
 8012980:	4603      	mov	r3, r0
 8012982:	2b00      	cmp	r3, #0
 8012984:	d005      	beq.n	8012992 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	2201      	movs	r2, #1
 801298a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801298e:	2301      	movs	r3, #1
 8012990:	e09e      	b.n	8012ad0 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	1ad3      	subs	r3, r2, r3
 801299c:	69fa      	ldr	r2, [r7, #28]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d916      	bls.n	80129d0 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	1ad3      	subs	r3, r2, r3
 80129ae:	025b      	lsls	r3, r3, #9
 80129b0:	69ba      	ldr	r2, [r7, #24]
 80129b2:	4413      	add	r3, r2
 80129b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129b8:	4619      	mov	r1, r3
 80129ba:	f7fd fe33 	bl	8010624 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80129c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80129d0:	69fb      	ldr	r3, [r7, #28]
 80129d2:	025b      	lsls	r3, r3, #9
 80129d4:	623b      	str	r3, [r7, #32]
				continue;
 80129d6:	e047      	b.n	8012a68 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80129de:	693a      	ldr	r2, [r7, #16]
 80129e0:	429a      	cmp	r2, r3
 80129e2:	d01a      	beq.n	8012a1a <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d212      	bcs.n	8012a1a <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80129fa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80129fe:	68f9      	ldr	r1, [r7, #12]
 8012a00:	2301      	movs	r3, #1
 8012a02:	693a      	ldr	r2, [r7, #16]
 8012a04:	f7fd fdb0 	bl	8010568 <disk_read>
 8012a08:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d005      	beq.n	8012a1a <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2201      	movs	r2, #1
 8012a12:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012a16:	2301      	movs	r3, #1
 8012a18:	e05a      	b.n	8012ad0 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	693a      	ldr	r2, [r7, #16]
 8012a1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012a30:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8012a32:	6a3a      	ldr	r2, [r7, #32]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d901      	bls.n	8012a3e <f_write+0x2c0>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8012a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a48:	68fa      	ldr	r2, [r7, #12]
 8012a4a:	4413      	add	r3, r2
 8012a4c:	6a3a      	ldr	r2, [r7, #32]
 8012a4e:	69b9      	ldr	r1, [r7, #24]
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7fd fde7 	bl	8010624 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a60:	b2da      	uxtb	r2, r3
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8012a68:	69ba      	ldr	r2, [r7, #24]
 8012a6a:	6a3b      	ldr	r3, [r7, #32]
 8012a6c:	4413      	add	r3, r2
 8012a6e:	61bb      	str	r3, [r7, #24]
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012a76:	6a3b      	ldr	r3, [r7, #32]
 8012a78:	441a      	add	r2, r3
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	6a3b      	ldr	r3, [r7, #32]
 8012a86:	441a      	add	r2, r3
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	601a      	str	r2, [r3, #0]
 8012a8c:	687a      	ldr	r2, [r7, #4]
 8012a8e:	6a3b      	ldr	r3, [r7, #32]
 8012a90:	1ad3      	subs	r3, r2, r3
 8012a92:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f47f aea7 	bne.w	80127ea <f_write+0x6c>
 8012a9c:	e000      	b.n	8012aa0 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012a9e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d905      	bls.n	8012abc <f_write+0x33e>
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012ac2:	f043 0320 	orr.w	r3, r3, #32
 8012ac6:	b2da      	uxtb	r2, r3
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8012ace:	2300      	movs	r3, #0
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3728      	adds	r7, #40	; 0x28
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b086      	sub	sp, #24
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f7ff fb57 	bl	8012194 <validate>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012aea:	7dfb      	ldrb	r3, [r7, #23]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f040 80a8 	bne.w	8012c42 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012af8:	f003 0320 	and.w	r3, r3, #32
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f000 80a0 	beq.w	8012c42 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d019      	beq.n	8012b44 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012b16:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012b1a:	6879      	ldr	r1, [r7, #4]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012b22:	2301      	movs	r3, #1
 8012b24:	f7fd fd40 	bl	80105a8 <disk_write>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d001      	beq.n	8012b32 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8012b2e:	2301      	movs	r3, #1
 8012b30:	e088      	b.n	8012c44 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b3c:	b2da      	uxtb	r2, r3
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8012b50:	4619      	mov	r1, r3
 8012b52:	4610      	mov	r0, r2
 8012b54:	f7fd ffdb 	bl	8010b0e <move_window>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8012b5c:	7dfb      	ldrb	r3, [r7, #23]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d16f      	bne.n	8012c42 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012b68:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	330b      	adds	r3, #11
 8012b6e:	781a      	ldrb	r2, [r3, #0]
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	330b      	adds	r3, #11
 8012b74:	f042 0220 	orr.w	r2, r2, #32
 8012b78:	b2d2      	uxtb	r2, r2
 8012b7a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	331c      	adds	r3, #28
 8012b86:	b2d2      	uxtb	r2, r2
 8012b88:	701a      	strb	r2, [r3, #0]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	0a1b      	lsrs	r3, r3, #8
 8012b94:	b29a      	uxth	r2, r3
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	331d      	adds	r3, #29
 8012b9a:	b2d2      	uxtb	r2, r2
 8012b9c:	701a      	strb	r2, [r3, #0]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012ba4:	0c1a      	lsrs	r2, r3, #16
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	331e      	adds	r3, #30
 8012baa:	b2d2      	uxtb	r2, r2
 8012bac:	701a      	strb	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012bb4:	0e1a      	lsrs	r2, r3, #24
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	331f      	adds	r3, #31
 8012bba:	b2d2      	uxtb	r2, r2
 8012bbc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012bc4:	4619      	mov	r1, r3
 8012bc6:	6938      	ldr	r0, [r7, #16]
 8012bc8:	f7fe fd92 	bl	80116f0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8012bcc:	f7fc f9e4 	bl	800ef98 <get_fattime>
 8012bd0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8012bd2:	693b      	ldr	r3, [r7, #16]
 8012bd4:	3316      	adds	r3, #22
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	b2d2      	uxtb	r2, r2
 8012bda:	701a      	strb	r2, [r3, #0]
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	0a1b      	lsrs	r3, r3, #8
 8012be2:	b29a      	uxth	r2, r3
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	3317      	adds	r3, #23
 8012be8:	b2d2      	uxtb	r2, r2
 8012bea:	701a      	strb	r2, [r3, #0]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	0c1a      	lsrs	r2, r3, #16
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	3318      	adds	r3, #24
 8012bf4:	b2d2      	uxtb	r2, r2
 8012bf6:	701a      	strb	r2, [r3, #0]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	0e1a      	lsrs	r2, r3, #24
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	3319      	adds	r3, #25
 8012c00:	b2d2      	uxtb	r2, r2
 8012c02:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	3312      	adds	r3, #18
 8012c08:	2200      	movs	r2, #0
 8012c0a:	701a      	strb	r2, [r3, #0]
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	3313      	adds	r3, #19
 8012c10:	2200      	movs	r2, #0
 8012c12:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012c1a:	f023 0320 	bic.w	r3, r3, #32
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7fd ff96 	bl	8010b6a <sync_fs>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8012c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3718      	adds	r7, #24
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}

08012c4c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f7ff ff3f 	bl	8012ad8 <f_sync>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012c5e:	7bfb      	ldrb	r3, [r7, #15]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d116      	bne.n	8012c92 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff fa95 	bl	8012194 <validate>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012c6e:	7bfb      	ldrb	r3, [r7, #15]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d10e      	bne.n	8012c92 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fd fe90 	bl	80109a0 <dec_lock>
 8012c80:	4603      	mov	r3, r0
 8012c82:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012c84:	7bfb      	ldrb	r3, [r7, #15]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d103      	bne.n	8012c92 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3710      	adds	r7, #16
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b087      	sub	sp, #28
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	60f8      	str	r0, [r7, #12]
 8012ca4:	60b9      	str	r1, [r7, #8]
 8012ca6:	4613      	mov	r3, r2
 8012ca8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012caa:	2301      	movs	r3, #1
 8012cac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8012cb2:	4b1e      	ldr	r3, [pc, #120]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012cb4:	7a5b      	ldrb	r3, [r3, #9]
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d831      	bhi.n	8012d20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012cbc:	4b1b      	ldr	r3, [pc, #108]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012cbe:	7a5b      	ldrb	r3, [r3, #9]
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	4b19      	ldr	r3, [pc, #100]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8012cca:	4b18      	ldr	r3, [pc, #96]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012ccc:	7a5b      	ldrb	r3, [r3, #9]
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	4a16      	ldr	r2, [pc, #88]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8012cda:	4b14      	ldr	r3, [pc, #80]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012cdc:	7a5b      	ldrb	r3, [r3, #9]
 8012cde:	b2db      	uxtb	r3, r3
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	4b12      	ldr	r3, [pc, #72]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012ce4:	4413      	add	r3, r2
 8012ce6:	79fa      	ldrb	r2, [r7, #7]
 8012ce8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012cea:	4b10      	ldr	r3, [pc, #64]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012cec:	7a5b      	ldrb	r3, [r3, #9]
 8012cee:	b2db      	uxtb	r3, r3
 8012cf0:	1c5a      	adds	r2, r3, #1
 8012cf2:	b2d1      	uxtb	r1, r2
 8012cf4:	4a0d      	ldr	r2, [pc, #52]	; (8012d2c <FATFS_LinkDriverEx+0x90>)
 8012cf6:	7251      	strb	r1, [r2, #9]
 8012cf8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012cfa:	7dbb      	ldrb	r3, [r7, #22]
 8012cfc:	3330      	adds	r3, #48	; 0x30
 8012cfe:	b2da      	uxtb	r2, r3
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	3301      	adds	r3, #1
 8012d08:	223a      	movs	r2, #58	; 0x3a
 8012d0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	3302      	adds	r3, #2
 8012d10:	222f      	movs	r2, #47	; 0x2f
 8012d12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012d14:	68bb      	ldr	r3, [r7, #8]
 8012d16:	3303      	adds	r3, #3
 8012d18:	2200      	movs	r2, #0
 8012d1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8012d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	371c      	adds	r7, #28
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bc80      	pop	{r7}
 8012d2a:	4770      	bx	lr
 8012d2c:	20000f08 	.word	0x20000f08

08012d30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f7ff ffac 	bl	8012c9c <FATFS_LinkDriverEx>
 8012d44:	4603      	mov	r3, r0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3708      	adds	r7, #8
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
	...

08012d50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	4603      	mov	r3, r0
 8012d58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012d5a:	4b0b      	ldr	r3, [pc, #44]	; (8012d88 <SD_initialize+0x38>)
 8012d5c:	2201      	movs	r2, #1
 8012d5e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8012d60:	f7fc f922 	bl	800efa8 <BSP_SD_Init>
 8012d64:	4603      	mov	r3, r0
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d107      	bne.n	8012d7a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012d6a:	4b07      	ldr	r3, [pc, #28]	; (8012d88 <SD_initialize+0x38>)
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	f023 0301 	bic.w	r3, r3, #1
 8012d74:	b2da      	uxtb	r2, r3
 8012d76:	4b04      	ldr	r3, [pc, #16]	; (8012d88 <SD_initialize+0x38>)
 8012d78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012d7a:	4b03      	ldr	r3, [pc, #12]	; (8012d88 <SD_initialize+0x38>)
 8012d7c:	781b      	ldrb	r3, [r3, #0]
 8012d7e:	b2db      	uxtb	r3, r3
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3708      	adds	r7, #8
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	20000122 	.word	0x20000122

08012d8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	4603      	mov	r3, r0
 8012d94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012d96:	4b0b      	ldr	r3, [pc, #44]	; (8012dc4 <SD_status+0x38>)
 8012d98:	2201      	movs	r2, #1
 8012d9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012d9c:	f7fc f966 	bl	800f06c <BSP_SD_GetCardState>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d107      	bne.n	8012db6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012da6:	4b07      	ldr	r3, [pc, #28]	; (8012dc4 <SD_status+0x38>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	f023 0301 	bic.w	r3, r3, #1
 8012db0:	b2da      	uxtb	r2, r3
 8012db2:	4b04      	ldr	r3, [pc, #16]	; (8012dc4 <SD_status+0x38>)
 8012db4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8012db6:	4b03      	ldr	r3, [pc, #12]	; (8012dc4 <SD_status+0x38>)
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	b2db      	uxtb	r3, r3
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	20000122 	.word	0x20000122

08012dc8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b086      	sub	sp, #24
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	60b9      	str	r1, [r7, #8]
 8012dd0:	607a      	str	r2, [r7, #4]
 8012dd2:	603b      	str	r3, [r7, #0]
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012dd8:	2301      	movs	r3, #1
 8012dda:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012ddc:	4b0f      	ldr	r3, [pc, #60]	; (8012e1c <SD_read+0x54>)
 8012dde:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8012de0:	4b0f      	ldr	r3, [pc, #60]	; (8012e20 <SD_read+0x58>)
 8012de2:	683a      	ldr	r2, [r7, #0]
 8012de4:	6879      	ldr	r1, [r7, #4]
 8012de6:	68b8      	ldr	r0, [r7, #8]
 8012de8:	f7fc f904 	bl	800eff4 <BSP_SD_ReadBlocks>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d10e      	bne.n	8012e10 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012df2:	e006      	b.n	8012e02 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	1e5a      	subs	r2, r3, #1
 8012df8:	613a      	str	r2, [r7, #16]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d101      	bne.n	8012e02 <SD_read+0x3a>
      {
        return RES_ERROR;
 8012dfe:	2301      	movs	r3, #1
 8012e00:	e007      	b.n	8012e12 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012e02:	f7fc f933 	bl	800f06c <BSP_SD_GetCardState>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1f3      	bne.n	8012df4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8012e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3718      	adds	r7, #24
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	000186a0 	.word	0x000186a0
 8012e20:	05f5e100 	.word	0x05f5e100

08012e24 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b086      	sub	sp, #24
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60b9      	str	r1, [r7, #8]
 8012e2c:	607a      	str	r2, [r7, #4]
 8012e2e:	603b      	str	r3, [r7, #0]
 8012e30:	4603      	mov	r3, r0
 8012e32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012e34:	2301      	movs	r3, #1
 8012e36:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012e38:	4b0f      	ldr	r3, [pc, #60]	; (8012e78 <SD_write+0x54>)
 8012e3a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8012e3c:	4b0f      	ldr	r3, [pc, #60]	; (8012e7c <SD_write+0x58>)
 8012e3e:	683a      	ldr	r2, [r7, #0]
 8012e40:	6879      	ldr	r1, [r7, #4]
 8012e42:	68b8      	ldr	r0, [r7, #8]
 8012e44:	f7fc f8f4 	bl	800f030 <BSP_SD_WriteBlocks>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d10e      	bne.n	8012e6c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012e4e:	e006      	b.n	8012e5e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	1e5a      	subs	r2, r3, #1
 8012e54:	613a      	str	r2, [r7, #16]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d101      	bne.n	8012e5e <SD_write+0x3a>
      {
        return RES_ERROR;
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	e007      	b.n	8012e6e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8012e5e:	f7fc f905 	bl	800f06c <BSP_SD_GetCardState>
 8012e62:	4603      	mov	r3, r0
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d1f3      	bne.n	8012e50 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8012e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3718      	adds	r7, #24
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	000186a0 	.word	0x000186a0
 8012e7c:	05f5e100 	.word	0x05f5e100

08012e80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b08c      	sub	sp, #48	; 0x30
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	4603      	mov	r3, r0
 8012e88:	603a      	str	r2, [r7, #0]
 8012e8a:	71fb      	strb	r3, [r7, #7]
 8012e8c:	460b      	mov	r3, r1
 8012e8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012e90:	2301      	movs	r3, #1
 8012e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012e96:	4b24      	ldr	r3, [pc, #144]	; (8012f28 <SD_ioctl+0xa8>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	b2db      	uxtb	r3, r3
 8012e9c:	f003 0301 	and.w	r3, r3, #1
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d001      	beq.n	8012ea8 <SD_ioctl+0x28>
 8012ea4:	2303      	movs	r3, #3
 8012ea6:	e03b      	b.n	8012f20 <SD_ioctl+0xa0>
  
  switch (cmd)
 8012ea8:	79bb      	ldrb	r3, [r7, #6]
 8012eaa:	2b03      	cmp	r3, #3
 8012eac:	d833      	bhi.n	8012f16 <SD_ioctl+0x96>
 8012eae:	a201      	add	r2, pc, #4	; (adr r2, 8012eb4 <SD_ioctl+0x34>)
 8012eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb4:	08012ec5 	.word	0x08012ec5
 8012eb8:	08012ecd 	.word	0x08012ecd
 8012ebc:	08012ee5 	.word	0x08012ee5
 8012ec0:	08012eff 	.word	0x08012eff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012eca:	e027      	b.n	8012f1c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012ecc:	f107 030c 	add.w	r3, r7, #12
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7fc f8db 	bl	800f08c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012edc:	2300      	movs	r3, #0
 8012ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012ee2:	e01b      	b.n	8012f1c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012ee4:	f107 030c 	add.w	r3, r7, #12
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fc f8cf 	bl	800f08c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012efc:	e00e      	b.n	8012f1c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012efe:	f107 030c 	add.w	r3, r7, #12
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7fc f8c2 	bl	800f08c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8012f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012f14:	e002      	b.n	8012f1c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8012f16:	2304      	movs	r3, #4
 8012f18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8012f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3730      	adds	r7, #48	; 0x30
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	20000122 	.word	0x20000122

08012f2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012f30:	2200      	movs	r2, #0
 8012f32:	490e      	ldr	r1, [pc, #56]	; (8012f6c <MX_USB_DEVICE_Init+0x40>)
 8012f34:	480e      	ldr	r0, [pc, #56]	; (8012f70 <MX_USB_DEVICE_Init+0x44>)
 8012f36:	f7fc fa5b 	bl	800f3f0 <USBD_Init>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d001      	beq.n	8012f44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012f40:	f7f0 fa14 	bl	800336c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8012f44:	490b      	ldr	r1, [pc, #44]	; (8012f74 <MX_USB_DEVICE_Init+0x48>)
 8012f46:	480a      	ldr	r0, [pc, #40]	; (8012f70 <MX_USB_DEVICE_Init+0x44>)
 8012f48:	f7fc fa7d 	bl	800f446 <USBD_RegisterClass>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d001      	beq.n	8012f56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012f52:	f7f0 fa0b 	bl	800336c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012f56:	4806      	ldr	r0, [pc, #24]	; (8012f70 <MX_USB_DEVICE_Init+0x44>)
 8012f58:	f7fc fa8e 	bl	800f478 <USBD_Start>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d001      	beq.n	8012f66 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8012f62:	f7f0 fa03 	bl	800336c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012f66:	bf00      	nop
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	20000124 	.word	0x20000124
 8012f70:	20000f14 	.word	0x20000f14
 8012f74:	2000001c 	.word	0x2000001c

08012f78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f78:	b480      	push	{r7}
 8012f7a:	b083      	sub	sp, #12
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	4603      	mov	r3, r0
 8012f80:	6039      	str	r1, [r7, #0]
 8012f82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	2212      	movs	r2, #18
 8012f88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012f8a:	4b03      	ldr	r3, [pc, #12]	; (8012f98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bc80      	pop	{r7}
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop
 8012f98:	20000140 	.word	0x20000140

08012f9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	6039      	str	r1, [r7, #0]
 8012fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2204      	movs	r2, #4
 8012fac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012fae:	4b03      	ldr	r3, [pc, #12]	; (8012fbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bc80      	pop	{r7}
 8012fb8:	4770      	bx	lr
 8012fba:	bf00      	nop
 8012fbc:	20000154 	.word	0x20000154

08012fc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b082      	sub	sp, #8
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	6039      	str	r1, [r7, #0]
 8012fca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012fcc:	79fb      	ldrb	r3, [r7, #7]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d105      	bne.n	8012fde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012fd2:	683a      	ldr	r2, [r7, #0]
 8012fd4:	4907      	ldr	r1, [pc, #28]	; (8012ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012fd6:	4808      	ldr	r0, [pc, #32]	; (8012ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012fd8:	f7fd f9c6 	bl	8010368 <USBD_GetString>
 8012fdc:	e004      	b.n	8012fe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012fde:	683a      	ldr	r2, [r7, #0]
 8012fe0:	4904      	ldr	r1, [pc, #16]	; (8012ff4 <USBD_FS_ProductStrDescriptor+0x34>)
 8012fe2:	4805      	ldr	r0, [pc, #20]	; (8012ff8 <USBD_FS_ProductStrDescriptor+0x38>)
 8012fe4:	f7fd f9c0 	bl	8010368 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012fe8:	4b02      	ldr	r3, [pc, #8]	; (8012ff4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	3708      	adds	r7, #8
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	200011d8 	.word	0x200011d8
 8012ff8:	080168b8 	.word	0x080168b8

08012ffc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	4603      	mov	r3, r0
 8013004:	6039      	str	r1, [r7, #0]
 8013006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013008:	683a      	ldr	r2, [r7, #0]
 801300a:	4904      	ldr	r1, [pc, #16]	; (801301c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801300c:	4804      	ldr	r0, [pc, #16]	; (8013020 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801300e:	f7fd f9ab 	bl	8010368 <USBD_GetString>
  return USBD_StrDesc;
 8013012:	4b02      	ldr	r3, [pc, #8]	; (801301c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013014:	4618      	mov	r0, r3
 8013016:	3708      	adds	r7, #8
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}
 801301c:	200011d8 	.word	0x200011d8
 8013020:	080168d0 	.word	0x080168d0

08013024 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	4603      	mov	r3, r0
 801302c:	6039      	str	r1, [r7, #0]
 801302e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	221a      	movs	r2, #26
 8013034:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013036:	f000 f843 	bl	80130c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801303a:	4b02      	ldr	r3, [pc, #8]	; (8013044 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801303c:	4618      	mov	r0, r3
 801303e:	3708      	adds	r7, #8
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	20000158 	.word	0x20000158

08013048 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	af00      	add	r7, sp, #0
 801304e:	4603      	mov	r3, r0
 8013050:	6039      	str	r1, [r7, #0]
 8013052:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013054:	79fb      	ldrb	r3, [r7, #7]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d105      	bne.n	8013066 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801305a:	683a      	ldr	r2, [r7, #0]
 801305c:	4907      	ldr	r1, [pc, #28]	; (801307c <USBD_FS_ConfigStrDescriptor+0x34>)
 801305e:	4808      	ldr	r0, [pc, #32]	; (8013080 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013060:	f7fd f982 	bl	8010368 <USBD_GetString>
 8013064:	e004      	b.n	8013070 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	4904      	ldr	r1, [pc, #16]	; (801307c <USBD_FS_ConfigStrDescriptor+0x34>)
 801306a:	4805      	ldr	r0, [pc, #20]	; (8013080 <USBD_FS_ConfigStrDescriptor+0x38>)
 801306c:	f7fd f97c 	bl	8010368 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013070:	4b02      	ldr	r3, [pc, #8]	; (801307c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013072:	4618      	mov	r0, r3
 8013074:	3708      	adds	r7, #8
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}
 801307a:	bf00      	nop
 801307c:	200011d8 	.word	0x200011d8
 8013080:	080168e4 	.word	0x080168e4

08013084 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	4603      	mov	r3, r0
 801308c:	6039      	str	r1, [r7, #0]
 801308e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013090:	79fb      	ldrb	r3, [r7, #7]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d105      	bne.n	80130a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013096:	683a      	ldr	r2, [r7, #0]
 8013098:	4907      	ldr	r1, [pc, #28]	; (80130b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801309a:	4808      	ldr	r0, [pc, #32]	; (80130bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801309c:	f7fd f964 	bl	8010368 <USBD_GetString>
 80130a0:	e004      	b.n	80130ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80130a2:	683a      	ldr	r2, [r7, #0]
 80130a4:	4904      	ldr	r1, [pc, #16]	; (80130b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80130a6:	4805      	ldr	r0, [pc, #20]	; (80130bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80130a8:	f7fd f95e 	bl	8010368 <USBD_GetString>
  }
  return USBD_StrDesc;
 80130ac:	4b02      	ldr	r3, [pc, #8]	; (80130b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3708      	adds	r7, #8
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	200011d8 	.word	0x200011d8
 80130bc:	080168f0 	.word	0x080168f0

080130c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80130c6:	4b0f      	ldr	r3, [pc, #60]	; (8013104 <Get_SerialNum+0x44>)
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80130cc:	4b0e      	ldr	r3, [pc, #56]	; (8013108 <Get_SerialNum+0x48>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80130d2:	4b0e      	ldr	r3, [pc, #56]	; (801310c <Get_SerialNum+0x4c>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80130d8:	68fa      	ldr	r2, [r7, #12]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4413      	add	r3, r2
 80130de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d009      	beq.n	80130fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80130e6:	2208      	movs	r2, #8
 80130e8:	4909      	ldr	r1, [pc, #36]	; (8013110 <Get_SerialNum+0x50>)
 80130ea:	68f8      	ldr	r0, [r7, #12]
 80130ec:	f000 f814 	bl	8013118 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80130f0:	2204      	movs	r2, #4
 80130f2:	4908      	ldr	r1, [pc, #32]	; (8013114 <Get_SerialNum+0x54>)
 80130f4:	68b8      	ldr	r0, [r7, #8]
 80130f6:	f000 f80f 	bl	8013118 <IntToUnicode>
  }
}
 80130fa:	bf00      	nop
 80130fc:	3710      	adds	r7, #16
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	1ffff7e8 	.word	0x1ffff7e8
 8013108:	1ffff7ec 	.word	0x1ffff7ec
 801310c:	1ffff7f0 	.word	0x1ffff7f0
 8013110:	2000015a 	.word	0x2000015a
 8013114:	2000016a 	.word	0x2000016a

08013118 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013118:	b480      	push	{r7}
 801311a:	b087      	sub	sp, #28
 801311c:	af00      	add	r7, sp, #0
 801311e:	60f8      	str	r0, [r7, #12]
 8013120:	60b9      	str	r1, [r7, #8]
 8013122:	4613      	mov	r3, r2
 8013124:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013126:	2300      	movs	r3, #0
 8013128:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801312a:	2300      	movs	r3, #0
 801312c:	75fb      	strb	r3, [r7, #23]
 801312e:	e027      	b.n	8013180 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	0f1b      	lsrs	r3, r3, #28
 8013134:	2b09      	cmp	r3, #9
 8013136:	d80b      	bhi.n	8013150 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	0f1b      	lsrs	r3, r3, #28
 801313c:	b2da      	uxtb	r2, r3
 801313e:	7dfb      	ldrb	r3, [r7, #23]
 8013140:	005b      	lsls	r3, r3, #1
 8013142:	4619      	mov	r1, r3
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	440b      	add	r3, r1
 8013148:	3230      	adds	r2, #48	; 0x30
 801314a:	b2d2      	uxtb	r2, r2
 801314c:	701a      	strb	r2, [r3, #0]
 801314e:	e00a      	b.n	8013166 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	0f1b      	lsrs	r3, r3, #28
 8013154:	b2da      	uxtb	r2, r3
 8013156:	7dfb      	ldrb	r3, [r7, #23]
 8013158:	005b      	lsls	r3, r3, #1
 801315a:	4619      	mov	r1, r3
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	440b      	add	r3, r1
 8013160:	3237      	adds	r2, #55	; 0x37
 8013162:	b2d2      	uxtb	r2, r2
 8013164:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	011b      	lsls	r3, r3, #4
 801316a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801316c:	7dfb      	ldrb	r3, [r7, #23]
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	3301      	adds	r3, #1
 8013172:	68ba      	ldr	r2, [r7, #8]
 8013174:	4413      	add	r3, r2
 8013176:	2200      	movs	r2, #0
 8013178:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	3301      	adds	r3, #1
 801317e:	75fb      	strb	r3, [r7, #23]
 8013180:	7dfa      	ldrb	r2, [r7, #23]
 8013182:	79fb      	ldrb	r3, [r7, #7]
 8013184:	429a      	cmp	r2, r3
 8013186:	d3d3      	bcc.n	8013130 <IntToUnicode+0x18>
  }
}
 8013188:	bf00      	nop
 801318a:	bf00      	nop
 801318c:	371c      	adds	r7, #28
 801318e:	46bd      	mov	sp, r7
 8013190:	bc80      	pop	{r7}
 8013192:	4770      	bx	lr

08013194 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b084      	sub	sp, #16
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4a0d      	ldr	r2, [pc, #52]	; (80131d8 <HAL_PCD_MspInit+0x44>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d113      	bne.n	80131ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80131a6:	4b0d      	ldr	r3, [pc, #52]	; (80131dc <HAL_PCD_MspInit+0x48>)
 80131a8:	69db      	ldr	r3, [r3, #28]
 80131aa:	4a0c      	ldr	r2, [pc, #48]	; (80131dc <HAL_PCD_MspInit+0x48>)
 80131ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80131b0:	61d3      	str	r3, [r2, #28]
 80131b2:	4b0a      	ldr	r3, [pc, #40]	; (80131dc <HAL_PCD_MspInit+0x48>)
 80131b4:	69db      	ldr	r3, [r3, #28]
 80131b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80131ba:	60fb      	str	r3, [r7, #12]
 80131bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80131be:	2200      	movs	r2, #0
 80131c0:	2100      	movs	r1, #0
 80131c2:	2014      	movs	r0, #20
 80131c4:	f7f1 f983 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80131c8:	2014      	movs	r0, #20
 80131ca:	f7f1 f99c 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80131ce:	bf00      	nop
 80131d0:	3710      	adds	r7, #16
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop
 80131d8:	40005c00 	.word	0x40005c00
 80131dc:	40021000 	.word	0x40021000

080131e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80131f4:	4619      	mov	r1, r3
 80131f6:	4610      	mov	r0, r2
 80131f8:	f7fc f986 	bl	800f508 <USBD_LL_SetupStage>
}
 80131fc:	bf00      	nop
 80131fe:	3708      	adds	r7, #8
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}

08013204 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	460b      	mov	r3, r1
 801320e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8013216:	78fa      	ldrb	r2, [r7, #3]
 8013218:	6879      	ldr	r1, [r7, #4]
 801321a:	4613      	mov	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	4413      	add	r3, r2
 8013220:	00db      	lsls	r3, r3, #3
 8013222:	440b      	add	r3, r1
 8013224:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	78fb      	ldrb	r3, [r7, #3]
 801322c:	4619      	mov	r1, r3
 801322e:	f7fc f9b8 	bl	800f5a2 <USBD_LL_DataOutStage>
}
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}

0801323a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b082      	sub	sp, #8
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	460b      	mov	r3, r1
 8013244:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801324c:	78fa      	ldrb	r2, [r7, #3]
 801324e:	6879      	ldr	r1, [r7, #4]
 8013250:	4613      	mov	r3, r2
 8013252:	009b      	lsls	r3, r3, #2
 8013254:	4413      	add	r3, r2
 8013256:	00db      	lsls	r3, r3, #3
 8013258:	440b      	add	r3, r1
 801325a:	333c      	adds	r3, #60	; 0x3c
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	78fb      	ldrb	r3, [r7, #3]
 8013260:	4619      	mov	r1, r3
 8013262:	f7fc fa0f 	bl	800f684 <USBD_LL_DataInStage>
}
 8013266:	bf00      	nop
 8013268:	3708      	adds	r7, #8
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}

0801326e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b082      	sub	sp, #8
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801327c:	4618      	mov	r0, r3
 801327e:	f7fc fb1f 	bl	800f8c0 <USBD_LL_SOF>
}
 8013282:	bf00      	nop
 8013284:	3708      	adds	r7, #8
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}

0801328a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801328a:	b580      	push	{r7, lr}
 801328c:	b084      	sub	sp, #16
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013292:	2301      	movs	r3, #1
 8013294:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	689b      	ldr	r3, [r3, #8]
 801329a:	2b02      	cmp	r3, #2
 801329c:	d001      	beq.n	80132a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801329e:	f7f0 f865 	bl	800336c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80132a8:	7bfa      	ldrb	r2, [r7, #15]
 80132aa:	4611      	mov	r1, r2
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fc facf 	bl	800f850 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80132b8:	4618      	mov	r0, r3
 80132ba:	f7fc fa88 	bl	800f7ce <USBD_LL_Reset>
}
 80132be:	bf00      	nop
 80132c0:	3710      	adds	r7, #16
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}
	...

080132c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b082      	sub	sp, #8
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7fc fac9 	bl	800f86e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	699b      	ldr	r3, [r3, #24]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d005      	beq.n	80132f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80132e4:	4b04      	ldr	r3, [pc, #16]	; (80132f8 <HAL_PCD_SuspendCallback+0x30>)
 80132e6:	691b      	ldr	r3, [r3, #16]
 80132e8:	4a03      	ldr	r2, [pc, #12]	; (80132f8 <HAL_PCD_SuspendCallback+0x30>)
 80132ea:	f043 0306 	orr.w	r3, r3, #6
 80132ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80132f0:	bf00      	nop
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	e000ed00 	.word	0xe000ed00

080132fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801330a:	4618      	mov	r0, r3
 801330c:	f7fc fac3 	bl	800f896 <USBD_LL_Resume>
}
 8013310:	bf00      	nop
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b082      	sub	sp, #8
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8013320:	4a1f      	ldr	r2, [pc, #124]	; (80133a0 <USBD_LL_Init+0x88>)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	4a1d      	ldr	r2, [pc, #116]	; (80133a0 <USBD_LL_Init+0x88>)
 801332c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8013330:	4b1b      	ldr	r3, [pc, #108]	; (80133a0 <USBD_LL_Init+0x88>)
 8013332:	4a1c      	ldr	r2, [pc, #112]	; (80133a4 <USBD_LL_Init+0x8c>)
 8013334:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8013336:	4b1a      	ldr	r3, [pc, #104]	; (80133a0 <USBD_LL_Init+0x88>)
 8013338:	2208      	movs	r2, #8
 801333a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801333c:	4b18      	ldr	r3, [pc, #96]	; (80133a0 <USBD_LL_Init+0x88>)
 801333e:	2202      	movs	r2, #2
 8013340:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8013342:	4b17      	ldr	r3, [pc, #92]	; (80133a0 <USBD_LL_Init+0x88>)
 8013344:	2200      	movs	r2, #0
 8013346:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8013348:	4b15      	ldr	r3, [pc, #84]	; (80133a0 <USBD_LL_Init+0x88>)
 801334a:	2200      	movs	r2, #0
 801334c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801334e:	4b14      	ldr	r3, [pc, #80]	; (80133a0 <USBD_LL_Init+0x88>)
 8013350:	2200      	movs	r2, #0
 8013352:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8013354:	4812      	ldr	r0, [pc, #72]	; (80133a0 <USBD_LL_Init+0x88>)
 8013356:	f7f3 fb12 	bl	800697e <HAL_PCD_Init>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d001      	beq.n	8013364 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8013360:	f7f0 f804 	bl	800336c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801336a:	2318      	movs	r3, #24
 801336c:	2200      	movs	r2, #0
 801336e:	2100      	movs	r1, #0
 8013370:	f7f5 f81a 	bl	80083a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801337a:	2358      	movs	r3, #88	; 0x58
 801337c:	2200      	movs	r2, #0
 801337e:	2180      	movs	r1, #128	; 0x80
 8013380:	f7f5 f812 	bl	80083a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801338a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801338e:	2200      	movs	r2, #0
 8013390:	2181      	movs	r1, #129	; 0x81
 8013392:	f7f5 f809 	bl	80083a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8013396:	2300      	movs	r3, #0
}
 8013398:	4618      	mov	r0, r3
 801339a:	3708      	adds	r7, #8
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}
 80133a0:	200013d8 	.word	0x200013d8
 80133a4:	40005c00 	.word	0x40005c00

080133a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b084      	sub	sp, #16
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133b0:	2300      	movs	r3, #0
 80133b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133b4:	2300      	movs	r3, #0
 80133b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80133be:	4618      	mov	r0, r3
 80133c0:	f7f3 fbdc 	bl	8006b7c <HAL_PCD_Start>
 80133c4:	4603      	mov	r3, r0
 80133c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133c8:	7bfb      	ldrb	r3, [r7, #15]
 80133ca:	4618      	mov	r0, r3
 80133cc:	f000 f93c 	bl	8013648 <USBD_Get_USB_Status>
 80133d0:	4603      	mov	r3, r0
 80133d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3710      	adds	r7, #16
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}

080133de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80133de:	b580      	push	{r7, lr}
 80133e0:	b084      	sub	sp, #16
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	6078      	str	r0, [r7, #4]
 80133e6:	4608      	mov	r0, r1
 80133e8:	4611      	mov	r1, r2
 80133ea:	461a      	mov	r2, r3
 80133ec:	4603      	mov	r3, r0
 80133ee:	70fb      	strb	r3, [r7, #3]
 80133f0:	460b      	mov	r3, r1
 80133f2:	70bb      	strb	r3, [r7, #2]
 80133f4:	4613      	mov	r3, r2
 80133f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133f8:	2300      	movs	r3, #0
 80133fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133fc:	2300      	movs	r3, #0
 80133fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8013406:	78bb      	ldrb	r3, [r7, #2]
 8013408:	883a      	ldrh	r2, [r7, #0]
 801340a:	78f9      	ldrb	r1, [r7, #3]
 801340c:	f7f3 fd31 	bl	8006e72 <HAL_PCD_EP_Open>
 8013410:	4603      	mov	r3, r0
 8013412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013414:	7bfb      	ldrb	r3, [r7, #15]
 8013416:	4618      	mov	r0, r3
 8013418:	f000 f916 	bl	8013648 <USBD_Get_USB_Status>
 801341c:	4603      	mov	r3, r0
 801341e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013420:	7bbb      	ldrb	r3, [r7, #14]
}
 8013422:	4618      	mov	r0, r3
 8013424:	3710      	adds	r7, #16
 8013426:	46bd      	mov	sp, r7
 8013428:	bd80      	pop	{r7, pc}

0801342a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801342a:	b580      	push	{r7, lr}
 801342c:	b084      	sub	sp, #16
 801342e:	af00      	add	r7, sp, #0
 8013430:	6078      	str	r0, [r7, #4]
 8013432:	460b      	mov	r3, r1
 8013434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013436:	2300      	movs	r3, #0
 8013438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801343a:	2300      	movs	r3, #0
 801343c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013444:	78fa      	ldrb	r2, [r7, #3]
 8013446:	4611      	mov	r1, r2
 8013448:	4618      	mov	r0, r3
 801344a:	f7f3 fd6f 	bl	8006f2c <HAL_PCD_EP_Close>
 801344e:	4603      	mov	r3, r0
 8013450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013452:	7bfb      	ldrb	r3, [r7, #15]
 8013454:	4618      	mov	r0, r3
 8013456:	f000 f8f7 	bl	8013648 <USBD_Get_USB_Status>
 801345a:	4603      	mov	r3, r0
 801345c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801345e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3710      	adds	r7, #16
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}

08013468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	460b      	mov	r3, r1
 8013472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013474:	2300      	movs	r3, #0
 8013476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013478:	2300      	movs	r3, #0
 801347a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013482:	78fa      	ldrb	r2, [r7, #3]
 8013484:	4611      	mov	r1, r2
 8013486:	4618      	mov	r0, r3
 8013488:	f7f3 fe00 	bl	800708c <HAL_PCD_EP_SetStall>
 801348c:	4603      	mov	r3, r0
 801348e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013490:	7bfb      	ldrb	r3, [r7, #15]
 8013492:	4618      	mov	r0, r3
 8013494:	f000 f8d8 	bl	8013648 <USBD_Get_USB_Status>
 8013498:	4603      	mov	r3, r0
 801349a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801349c:	7bbb      	ldrb	r3, [r7, #14]
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3710      	adds	r7, #16
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b084      	sub	sp, #16
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	460b      	mov	r3, r1
 80134b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134b2:	2300      	movs	r3, #0
 80134b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134b6:	2300      	movs	r3, #0
 80134b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134c0:	78fa      	ldrb	r2, [r7, #3]
 80134c2:	4611      	mov	r1, r2
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7f3 fe41 	bl	800714c <HAL_PCD_EP_ClrStall>
 80134ca:	4603      	mov	r3, r0
 80134cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134ce:	7bfb      	ldrb	r3, [r7, #15]
 80134d0:	4618      	mov	r0, r3
 80134d2:	f000 f8b9 	bl	8013648 <USBD_Get_USB_Status>
 80134d6:	4603      	mov	r3, r0
 80134d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134da:	7bbb      	ldrb	r3, [r7, #14]
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3710      	adds	r7, #16
 80134e0:	46bd      	mov	sp, r7
 80134e2:	bd80      	pop	{r7, pc}

080134e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134e4:	b480      	push	{r7}
 80134e6:	b085      	sub	sp, #20
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	460b      	mov	r3, r1
 80134ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80134f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80134f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	da0c      	bge.n	801351a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013500:	78fb      	ldrb	r3, [r7, #3]
 8013502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013506:	68f9      	ldr	r1, [r7, #12]
 8013508:	1c5a      	adds	r2, r3, #1
 801350a:	4613      	mov	r3, r2
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	4413      	add	r3, r2
 8013510:	00db      	lsls	r3, r3, #3
 8013512:	440b      	add	r3, r1
 8013514:	3302      	adds	r3, #2
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	e00b      	b.n	8013532 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801351a:	78fb      	ldrb	r3, [r7, #3]
 801351c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013520:	68f9      	ldr	r1, [r7, #12]
 8013522:	4613      	mov	r3, r2
 8013524:	009b      	lsls	r3, r3, #2
 8013526:	4413      	add	r3, r2
 8013528:	00db      	lsls	r3, r3, #3
 801352a:	440b      	add	r3, r1
 801352c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8013530:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013532:	4618      	mov	r0, r3
 8013534:	3714      	adds	r7, #20
 8013536:	46bd      	mov	sp, r7
 8013538:	bc80      	pop	{r7}
 801353a:	4770      	bx	lr

0801353c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b084      	sub	sp, #16
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013548:	2300      	movs	r3, #0
 801354a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801354c:	2300      	movs	r3, #0
 801354e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013556:	78fa      	ldrb	r2, [r7, #3]
 8013558:	4611      	mov	r1, r2
 801355a:	4618      	mov	r0, r3
 801355c:	f7f3 fc64 	bl	8006e28 <HAL_PCD_SetAddress>
 8013560:	4603      	mov	r3, r0
 8013562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013564:	7bfb      	ldrb	r3, [r7, #15]
 8013566:	4618      	mov	r0, r3
 8013568:	f000 f86e 	bl	8013648 <USBD_Get_USB_Status>
 801356c:	4603      	mov	r3, r0
 801356e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013570:	7bbb      	ldrb	r3, [r7, #14]
}
 8013572:	4618      	mov	r0, r3
 8013574:	3710      	adds	r7, #16
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}

0801357a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801357a:	b580      	push	{r7, lr}
 801357c:	b086      	sub	sp, #24
 801357e:	af00      	add	r7, sp, #0
 8013580:	60f8      	str	r0, [r7, #12]
 8013582:	607a      	str	r2, [r7, #4]
 8013584:	461a      	mov	r2, r3
 8013586:	460b      	mov	r3, r1
 8013588:	72fb      	strb	r3, [r7, #11]
 801358a:	4613      	mov	r3, r2
 801358c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801358e:	2300      	movs	r3, #0
 8013590:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013592:	2300      	movs	r3, #0
 8013594:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801359c:	893b      	ldrh	r3, [r7, #8]
 801359e:	7af9      	ldrb	r1, [r7, #11]
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	f7f3 fd3c 	bl	800701e <HAL_PCD_EP_Transmit>
 80135a6:	4603      	mov	r3, r0
 80135a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135aa:	7dfb      	ldrb	r3, [r7, #23]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f000 f84b 	bl	8013648 <USBD_Get_USB_Status>
 80135b2:	4603      	mov	r3, r0
 80135b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80135b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3718      	adds	r7, #24
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b086      	sub	sp, #24
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	607a      	str	r2, [r7, #4]
 80135ca:	461a      	mov	r2, r3
 80135cc:	460b      	mov	r3, r1
 80135ce:	72fb      	strb	r3, [r7, #11]
 80135d0:	4613      	mov	r3, r2
 80135d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135d4:	2300      	movs	r3, #0
 80135d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135d8:	2300      	movs	r3, #0
 80135da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80135e2:	893b      	ldrh	r3, [r7, #8]
 80135e4:	7af9      	ldrb	r1, [r7, #11]
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	f7f3 fce8 	bl	8006fbc <HAL_PCD_EP_Receive>
 80135ec:	4603      	mov	r3, r0
 80135ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135f0:	7dfb      	ldrb	r3, [r7, #23]
 80135f2:	4618      	mov	r0, r3
 80135f4:	f000 f828 	bl	8013648 <USBD_Get_USB_Status>
 80135f8:	4603      	mov	r3, r0
 80135fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80135fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3718      	adds	r7, #24
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
	...

08013608 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013610:	4b02      	ldr	r3, [pc, #8]	; (801361c <USBD_static_malloc+0x14>)
}
 8013612:	4618      	mov	r0, r3
 8013614:	370c      	adds	r7, #12
 8013616:	46bd      	mov	sp, r7
 8013618:	bc80      	pop	{r7}
 801361a:	4770      	bx	lr
 801361c:	200016c8 	.word	0x200016c8

08013620 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013620:	b480      	push	{r7}
 8013622:	b083      	sub	sp, #12
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]

}
 8013628:	bf00      	nop
 801362a:	370c      	adds	r7, #12
 801362c:	46bd      	mov	sp, r7
 801362e:	bc80      	pop	{r7}
 8013630:	4770      	bx	lr

08013632 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013632:	b480      	push	{r7}
 8013634:	b083      	sub	sp, #12
 8013636:	af00      	add	r7, sp, #0
 8013638:	6078      	str	r0, [r7, #4]
 801363a:	460b      	mov	r3, r1
 801363c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801363e:	bf00      	nop
 8013640:	370c      	adds	r7, #12
 8013642:	46bd      	mov	sp, r7
 8013644:	bc80      	pop	{r7}
 8013646:	4770      	bx	lr

08013648 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013648:	b480      	push	{r7}
 801364a:	b085      	sub	sp, #20
 801364c:	af00      	add	r7, sp, #0
 801364e:	4603      	mov	r3, r0
 8013650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013656:	79fb      	ldrb	r3, [r7, #7]
 8013658:	2b03      	cmp	r3, #3
 801365a:	d817      	bhi.n	801368c <USBD_Get_USB_Status+0x44>
 801365c:	a201      	add	r2, pc, #4	; (adr r2, 8013664 <USBD_Get_USB_Status+0x1c>)
 801365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013662:	bf00      	nop
 8013664:	08013675 	.word	0x08013675
 8013668:	0801367b 	.word	0x0801367b
 801366c:	08013681 	.word	0x08013681
 8013670:	08013687 	.word	0x08013687
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013674:	2300      	movs	r3, #0
 8013676:	73fb      	strb	r3, [r7, #15]
    break;
 8013678:	e00b      	b.n	8013692 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801367a:	2302      	movs	r3, #2
 801367c:	73fb      	strb	r3, [r7, #15]
    break;
 801367e:	e008      	b.n	8013692 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013680:	2301      	movs	r3, #1
 8013682:	73fb      	strb	r3, [r7, #15]
    break;
 8013684:	e005      	b.n	8013692 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013686:	2302      	movs	r3, #2
 8013688:	73fb      	strb	r3, [r7, #15]
    break;
 801368a:	e002      	b.n	8013692 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801368c:	2302      	movs	r3, #2
 801368e:	73fb      	strb	r3, [r7, #15]
    break;
 8013690:	bf00      	nop
  }
  return usb_status;
 8013692:	7bfb      	ldrb	r3, [r7, #15]
}
 8013694:	4618      	mov	r0, r3
 8013696:	3714      	adds	r7, #20
 8013698:	46bd      	mov	sp, r7
 801369a:	bc80      	pop	{r7}
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop

080136a0 <__errno>:
 80136a0:	4b01      	ldr	r3, [pc, #4]	; (80136a8 <__errno+0x8>)
 80136a2:	6818      	ldr	r0, [r3, #0]
 80136a4:	4770      	bx	lr
 80136a6:	bf00      	nop
 80136a8:	20000174 	.word	0x20000174

080136ac <__libc_init_array>:
 80136ac:	b570      	push	{r4, r5, r6, lr}
 80136ae:	2600      	movs	r6, #0
 80136b0:	4d0c      	ldr	r5, [pc, #48]	; (80136e4 <__libc_init_array+0x38>)
 80136b2:	4c0d      	ldr	r4, [pc, #52]	; (80136e8 <__libc_init_array+0x3c>)
 80136b4:	1b64      	subs	r4, r4, r5
 80136b6:	10a4      	asrs	r4, r4, #2
 80136b8:	42a6      	cmp	r6, r4
 80136ba:	d109      	bne.n	80136d0 <__libc_init_array+0x24>
 80136bc:	f003 f832 	bl	8016724 <_init>
 80136c0:	2600      	movs	r6, #0
 80136c2:	4d0a      	ldr	r5, [pc, #40]	; (80136ec <__libc_init_array+0x40>)
 80136c4:	4c0a      	ldr	r4, [pc, #40]	; (80136f0 <__libc_init_array+0x44>)
 80136c6:	1b64      	subs	r4, r4, r5
 80136c8:	10a4      	asrs	r4, r4, #2
 80136ca:	42a6      	cmp	r6, r4
 80136cc:	d105      	bne.n	80136da <__libc_init_array+0x2e>
 80136ce:	bd70      	pop	{r4, r5, r6, pc}
 80136d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80136d4:	4798      	blx	r3
 80136d6:	3601      	adds	r6, #1
 80136d8:	e7ee      	b.n	80136b8 <__libc_init_array+0xc>
 80136da:	f855 3b04 	ldr.w	r3, [r5], #4
 80136de:	4798      	blx	r3
 80136e0:	3601      	adds	r6, #1
 80136e2:	e7f2      	b.n	80136ca <__libc_init_array+0x1e>
 80136e4:	0802ffac 	.word	0x0802ffac
 80136e8:	0802ffac 	.word	0x0802ffac
 80136ec:	0802ffac 	.word	0x0802ffac
 80136f0:	0802ffb0 	.word	0x0802ffb0

080136f4 <malloc>:
 80136f4:	4b02      	ldr	r3, [pc, #8]	; (8013700 <malloc+0xc>)
 80136f6:	4601      	mov	r1, r0
 80136f8:	6818      	ldr	r0, [r3, #0]
 80136fa:	f000 b87b 	b.w	80137f4 <_malloc_r>
 80136fe:	bf00      	nop
 8013700:	20000174 	.word	0x20000174

08013704 <free>:
 8013704:	4b02      	ldr	r3, [pc, #8]	; (8013710 <free+0xc>)
 8013706:	4601      	mov	r1, r0
 8013708:	6818      	ldr	r0, [r3, #0]
 801370a:	f000 b80b 	b.w	8013724 <_free_r>
 801370e:	bf00      	nop
 8013710:	20000174 	.word	0x20000174

08013714 <memset>:
 8013714:	4603      	mov	r3, r0
 8013716:	4402      	add	r2, r0
 8013718:	4293      	cmp	r3, r2
 801371a:	d100      	bne.n	801371e <memset+0xa>
 801371c:	4770      	bx	lr
 801371e:	f803 1b01 	strb.w	r1, [r3], #1
 8013722:	e7f9      	b.n	8013718 <memset+0x4>

08013724 <_free_r>:
 8013724:	b538      	push	{r3, r4, r5, lr}
 8013726:	4605      	mov	r5, r0
 8013728:	2900      	cmp	r1, #0
 801372a:	d040      	beq.n	80137ae <_free_r+0x8a>
 801372c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013730:	1f0c      	subs	r4, r1, #4
 8013732:	2b00      	cmp	r3, #0
 8013734:	bfb8      	it	lt
 8013736:	18e4      	addlt	r4, r4, r3
 8013738:	f001 fc14 	bl	8014f64 <__malloc_lock>
 801373c:	4a1c      	ldr	r2, [pc, #112]	; (80137b0 <_free_r+0x8c>)
 801373e:	6813      	ldr	r3, [r2, #0]
 8013740:	b933      	cbnz	r3, 8013750 <_free_r+0x2c>
 8013742:	6063      	str	r3, [r4, #4]
 8013744:	6014      	str	r4, [r2, #0]
 8013746:	4628      	mov	r0, r5
 8013748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801374c:	f001 bc10 	b.w	8014f70 <__malloc_unlock>
 8013750:	42a3      	cmp	r3, r4
 8013752:	d908      	bls.n	8013766 <_free_r+0x42>
 8013754:	6820      	ldr	r0, [r4, #0]
 8013756:	1821      	adds	r1, r4, r0
 8013758:	428b      	cmp	r3, r1
 801375a:	bf01      	itttt	eq
 801375c:	6819      	ldreq	r1, [r3, #0]
 801375e:	685b      	ldreq	r3, [r3, #4]
 8013760:	1809      	addeq	r1, r1, r0
 8013762:	6021      	streq	r1, [r4, #0]
 8013764:	e7ed      	b.n	8013742 <_free_r+0x1e>
 8013766:	461a      	mov	r2, r3
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	b10b      	cbz	r3, 8013770 <_free_r+0x4c>
 801376c:	42a3      	cmp	r3, r4
 801376e:	d9fa      	bls.n	8013766 <_free_r+0x42>
 8013770:	6811      	ldr	r1, [r2, #0]
 8013772:	1850      	adds	r0, r2, r1
 8013774:	42a0      	cmp	r0, r4
 8013776:	d10b      	bne.n	8013790 <_free_r+0x6c>
 8013778:	6820      	ldr	r0, [r4, #0]
 801377a:	4401      	add	r1, r0
 801377c:	1850      	adds	r0, r2, r1
 801377e:	4283      	cmp	r3, r0
 8013780:	6011      	str	r1, [r2, #0]
 8013782:	d1e0      	bne.n	8013746 <_free_r+0x22>
 8013784:	6818      	ldr	r0, [r3, #0]
 8013786:	685b      	ldr	r3, [r3, #4]
 8013788:	4401      	add	r1, r0
 801378a:	6011      	str	r1, [r2, #0]
 801378c:	6053      	str	r3, [r2, #4]
 801378e:	e7da      	b.n	8013746 <_free_r+0x22>
 8013790:	d902      	bls.n	8013798 <_free_r+0x74>
 8013792:	230c      	movs	r3, #12
 8013794:	602b      	str	r3, [r5, #0]
 8013796:	e7d6      	b.n	8013746 <_free_r+0x22>
 8013798:	6820      	ldr	r0, [r4, #0]
 801379a:	1821      	adds	r1, r4, r0
 801379c:	428b      	cmp	r3, r1
 801379e:	bf01      	itttt	eq
 80137a0:	6819      	ldreq	r1, [r3, #0]
 80137a2:	685b      	ldreq	r3, [r3, #4]
 80137a4:	1809      	addeq	r1, r1, r0
 80137a6:	6021      	streq	r1, [r4, #0]
 80137a8:	6063      	str	r3, [r4, #4]
 80137aa:	6054      	str	r4, [r2, #4]
 80137ac:	e7cb      	b.n	8013746 <_free_r+0x22>
 80137ae:	bd38      	pop	{r3, r4, r5, pc}
 80137b0:	200016dc 	.word	0x200016dc

080137b4 <sbrk_aligned>:
 80137b4:	b570      	push	{r4, r5, r6, lr}
 80137b6:	4e0e      	ldr	r6, [pc, #56]	; (80137f0 <sbrk_aligned+0x3c>)
 80137b8:	460c      	mov	r4, r1
 80137ba:	6831      	ldr	r1, [r6, #0]
 80137bc:	4605      	mov	r5, r0
 80137be:	b911      	cbnz	r1, 80137c6 <sbrk_aligned+0x12>
 80137c0:	f000 fcec 	bl	801419c <_sbrk_r>
 80137c4:	6030      	str	r0, [r6, #0]
 80137c6:	4621      	mov	r1, r4
 80137c8:	4628      	mov	r0, r5
 80137ca:	f000 fce7 	bl	801419c <_sbrk_r>
 80137ce:	1c43      	adds	r3, r0, #1
 80137d0:	d00a      	beq.n	80137e8 <sbrk_aligned+0x34>
 80137d2:	1cc4      	adds	r4, r0, #3
 80137d4:	f024 0403 	bic.w	r4, r4, #3
 80137d8:	42a0      	cmp	r0, r4
 80137da:	d007      	beq.n	80137ec <sbrk_aligned+0x38>
 80137dc:	1a21      	subs	r1, r4, r0
 80137de:	4628      	mov	r0, r5
 80137e0:	f000 fcdc 	bl	801419c <_sbrk_r>
 80137e4:	3001      	adds	r0, #1
 80137e6:	d101      	bne.n	80137ec <sbrk_aligned+0x38>
 80137e8:	f04f 34ff 	mov.w	r4, #4294967295
 80137ec:	4620      	mov	r0, r4
 80137ee:	bd70      	pop	{r4, r5, r6, pc}
 80137f0:	200016e0 	.word	0x200016e0

080137f4 <_malloc_r>:
 80137f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f8:	1ccd      	adds	r5, r1, #3
 80137fa:	f025 0503 	bic.w	r5, r5, #3
 80137fe:	3508      	adds	r5, #8
 8013800:	2d0c      	cmp	r5, #12
 8013802:	bf38      	it	cc
 8013804:	250c      	movcc	r5, #12
 8013806:	2d00      	cmp	r5, #0
 8013808:	4607      	mov	r7, r0
 801380a:	db01      	blt.n	8013810 <_malloc_r+0x1c>
 801380c:	42a9      	cmp	r1, r5
 801380e:	d905      	bls.n	801381c <_malloc_r+0x28>
 8013810:	230c      	movs	r3, #12
 8013812:	2600      	movs	r6, #0
 8013814:	603b      	str	r3, [r7, #0]
 8013816:	4630      	mov	r0, r6
 8013818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801381c:	4e2e      	ldr	r6, [pc, #184]	; (80138d8 <_malloc_r+0xe4>)
 801381e:	f001 fba1 	bl	8014f64 <__malloc_lock>
 8013822:	6833      	ldr	r3, [r6, #0]
 8013824:	461c      	mov	r4, r3
 8013826:	bb34      	cbnz	r4, 8013876 <_malloc_r+0x82>
 8013828:	4629      	mov	r1, r5
 801382a:	4638      	mov	r0, r7
 801382c:	f7ff ffc2 	bl	80137b4 <sbrk_aligned>
 8013830:	1c43      	adds	r3, r0, #1
 8013832:	4604      	mov	r4, r0
 8013834:	d14d      	bne.n	80138d2 <_malloc_r+0xde>
 8013836:	6834      	ldr	r4, [r6, #0]
 8013838:	4626      	mov	r6, r4
 801383a:	2e00      	cmp	r6, #0
 801383c:	d140      	bne.n	80138c0 <_malloc_r+0xcc>
 801383e:	6823      	ldr	r3, [r4, #0]
 8013840:	4631      	mov	r1, r6
 8013842:	4638      	mov	r0, r7
 8013844:	eb04 0803 	add.w	r8, r4, r3
 8013848:	f000 fca8 	bl	801419c <_sbrk_r>
 801384c:	4580      	cmp	r8, r0
 801384e:	d13a      	bne.n	80138c6 <_malloc_r+0xd2>
 8013850:	6821      	ldr	r1, [r4, #0]
 8013852:	3503      	adds	r5, #3
 8013854:	1a6d      	subs	r5, r5, r1
 8013856:	f025 0503 	bic.w	r5, r5, #3
 801385a:	3508      	adds	r5, #8
 801385c:	2d0c      	cmp	r5, #12
 801385e:	bf38      	it	cc
 8013860:	250c      	movcc	r5, #12
 8013862:	4638      	mov	r0, r7
 8013864:	4629      	mov	r1, r5
 8013866:	f7ff ffa5 	bl	80137b4 <sbrk_aligned>
 801386a:	3001      	adds	r0, #1
 801386c:	d02b      	beq.n	80138c6 <_malloc_r+0xd2>
 801386e:	6823      	ldr	r3, [r4, #0]
 8013870:	442b      	add	r3, r5
 8013872:	6023      	str	r3, [r4, #0]
 8013874:	e00e      	b.n	8013894 <_malloc_r+0xa0>
 8013876:	6822      	ldr	r2, [r4, #0]
 8013878:	1b52      	subs	r2, r2, r5
 801387a:	d41e      	bmi.n	80138ba <_malloc_r+0xc6>
 801387c:	2a0b      	cmp	r2, #11
 801387e:	d916      	bls.n	80138ae <_malloc_r+0xba>
 8013880:	1961      	adds	r1, r4, r5
 8013882:	42a3      	cmp	r3, r4
 8013884:	6025      	str	r5, [r4, #0]
 8013886:	bf18      	it	ne
 8013888:	6059      	strne	r1, [r3, #4]
 801388a:	6863      	ldr	r3, [r4, #4]
 801388c:	bf08      	it	eq
 801388e:	6031      	streq	r1, [r6, #0]
 8013890:	5162      	str	r2, [r4, r5]
 8013892:	604b      	str	r3, [r1, #4]
 8013894:	4638      	mov	r0, r7
 8013896:	f104 060b 	add.w	r6, r4, #11
 801389a:	f001 fb69 	bl	8014f70 <__malloc_unlock>
 801389e:	f026 0607 	bic.w	r6, r6, #7
 80138a2:	1d23      	adds	r3, r4, #4
 80138a4:	1af2      	subs	r2, r6, r3
 80138a6:	d0b6      	beq.n	8013816 <_malloc_r+0x22>
 80138a8:	1b9b      	subs	r3, r3, r6
 80138aa:	50a3      	str	r3, [r4, r2]
 80138ac:	e7b3      	b.n	8013816 <_malloc_r+0x22>
 80138ae:	6862      	ldr	r2, [r4, #4]
 80138b0:	42a3      	cmp	r3, r4
 80138b2:	bf0c      	ite	eq
 80138b4:	6032      	streq	r2, [r6, #0]
 80138b6:	605a      	strne	r2, [r3, #4]
 80138b8:	e7ec      	b.n	8013894 <_malloc_r+0xa0>
 80138ba:	4623      	mov	r3, r4
 80138bc:	6864      	ldr	r4, [r4, #4]
 80138be:	e7b2      	b.n	8013826 <_malloc_r+0x32>
 80138c0:	4634      	mov	r4, r6
 80138c2:	6876      	ldr	r6, [r6, #4]
 80138c4:	e7b9      	b.n	801383a <_malloc_r+0x46>
 80138c6:	230c      	movs	r3, #12
 80138c8:	4638      	mov	r0, r7
 80138ca:	603b      	str	r3, [r7, #0]
 80138cc:	f001 fb50 	bl	8014f70 <__malloc_unlock>
 80138d0:	e7a1      	b.n	8013816 <_malloc_r+0x22>
 80138d2:	6025      	str	r5, [r4, #0]
 80138d4:	e7de      	b.n	8013894 <_malloc_r+0xa0>
 80138d6:	bf00      	nop
 80138d8:	200016dc 	.word	0x200016dc

080138dc <__cvt>:
 80138dc:	2b00      	cmp	r3, #0
 80138de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138e2:	461f      	mov	r7, r3
 80138e4:	bfbb      	ittet	lt
 80138e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80138ea:	461f      	movlt	r7, r3
 80138ec:	2300      	movge	r3, #0
 80138ee:	232d      	movlt	r3, #45	; 0x2d
 80138f0:	b088      	sub	sp, #32
 80138f2:	4614      	mov	r4, r2
 80138f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80138f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80138f8:	7013      	strb	r3, [r2, #0]
 80138fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80138fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8013900:	f023 0820 	bic.w	r8, r3, #32
 8013904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013908:	d005      	beq.n	8013916 <__cvt+0x3a>
 801390a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801390e:	d100      	bne.n	8013912 <__cvt+0x36>
 8013910:	3501      	adds	r5, #1
 8013912:	2302      	movs	r3, #2
 8013914:	e000      	b.n	8013918 <__cvt+0x3c>
 8013916:	2303      	movs	r3, #3
 8013918:	aa07      	add	r2, sp, #28
 801391a:	9204      	str	r2, [sp, #16]
 801391c:	aa06      	add	r2, sp, #24
 801391e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8013922:	e9cd 3500 	strd	r3, r5, [sp]
 8013926:	4622      	mov	r2, r4
 8013928:	463b      	mov	r3, r7
 801392a:	f000 fd0d 	bl	8014348 <_dtoa_r>
 801392e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013932:	4606      	mov	r6, r0
 8013934:	d102      	bne.n	801393c <__cvt+0x60>
 8013936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013938:	07db      	lsls	r3, r3, #31
 801393a:	d522      	bpl.n	8013982 <__cvt+0xa6>
 801393c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013940:	eb06 0905 	add.w	r9, r6, r5
 8013944:	d110      	bne.n	8013968 <__cvt+0x8c>
 8013946:	7833      	ldrb	r3, [r6, #0]
 8013948:	2b30      	cmp	r3, #48	; 0x30
 801394a:	d10a      	bne.n	8013962 <__cvt+0x86>
 801394c:	2200      	movs	r2, #0
 801394e:	2300      	movs	r3, #0
 8013950:	4620      	mov	r0, r4
 8013952:	4639      	mov	r1, r7
 8013954:	f7ed f894 	bl	8000a80 <__aeabi_dcmpeq>
 8013958:	b918      	cbnz	r0, 8013962 <__cvt+0x86>
 801395a:	f1c5 0501 	rsb	r5, r5, #1
 801395e:	f8ca 5000 	str.w	r5, [sl]
 8013962:	f8da 3000 	ldr.w	r3, [sl]
 8013966:	4499      	add	r9, r3
 8013968:	2200      	movs	r2, #0
 801396a:	2300      	movs	r3, #0
 801396c:	4620      	mov	r0, r4
 801396e:	4639      	mov	r1, r7
 8013970:	f7ed f886 	bl	8000a80 <__aeabi_dcmpeq>
 8013974:	b108      	cbz	r0, 801397a <__cvt+0x9e>
 8013976:	f8cd 901c 	str.w	r9, [sp, #28]
 801397a:	2230      	movs	r2, #48	; 0x30
 801397c:	9b07      	ldr	r3, [sp, #28]
 801397e:	454b      	cmp	r3, r9
 8013980:	d307      	bcc.n	8013992 <__cvt+0xb6>
 8013982:	4630      	mov	r0, r6
 8013984:	9b07      	ldr	r3, [sp, #28]
 8013986:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013988:	1b9b      	subs	r3, r3, r6
 801398a:	6013      	str	r3, [r2, #0]
 801398c:	b008      	add	sp, #32
 801398e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013992:	1c59      	adds	r1, r3, #1
 8013994:	9107      	str	r1, [sp, #28]
 8013996:	701a      	strb	r2, [r3, #0]
 8013998:	e7f0      	b.n	801397c <__cvt+0xa0>

0801399a <__exponent>:
 801399a:	4603      	mov	r3, r0
 801399c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801399e:	2900      	cmp	r1, #0
 80139a0:	f803 2b02 	strb.w	r2, [r3], #2
 80139a4:	bfb6      	itet	lt
 80139a6:	222d      	movlt	r2, #45	; 0x2d
 80139a8:	222b      	movge	r2, #43	; 0x2b
 80139aa:	4249      	neglt	r1, r1
 80139ac:	2909      	cmp	r1, #9
 80139ae:	7042      	strb	r2, [r0, #1]
 80139b0:	dd2b      	ble.n	8013a0a <__exponent+0x70>
 80139b2:	f10d 0407 	add.w	r4, sp, #7
 80139b6:	46a4      	mov	ip, r4
 80139b8:	270a      	movs	r7, #10
 80139ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80139be:	460a      	mov	r2, r1
 80139c0:	46a6      	mov	lr, r4
 80139c2:	fb07 1516 	mls	r5, r7, r6, r1
 80139c6:	2a63      	cmp	r2, #99	; 0x63
 80139c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80139cc:	4631      	mov	r1, r6
 80139ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80139d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80139d6:	dcf0      	bgt.n	80139ba <__exponent+0x20>
 80139d8:	3130      	adds	r1, #48	; 0x30
 80139da:	f1ae 0502 	sub.w	r5, lr, #2
 80139de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80139e2:	4629      	mov	r1, r5
 80139e4:	1c44      	adds	r4, r0, #1
 80139e6:	4561      	cmp	r1, ip
 80139e8:	d30a      	bcc.n	8013a00 <__exponent+0x66>
 80139ea:	f10d 0209 	add.w	r2, sp, #9
 80139ee:	eba2 020e 	sub.w	r2, r2, lr
 80139f2:	4565      	cmp	r5, ip
 80139f4:	bf88      	it	hi
 80139f6:	2200      	movhi	r2, #0
 80139f8:	4413      	add	r3, r2
 80139fa:	1a18      	subs	r0, r3, r0
 80139fc:	b003      	add	sp, #12
 80139fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013a08:	e7ed      	b.n	80139e6 <__exponent+0x4c>
 8013a0a:	2330      	movs	r3, #48	; 0x30
 8013a0c:	3130      	adds	r1, #48	; 0x30
 8013a0e:	7083      	strb	r3, [r0, #2]
 8013a10:	70c1      	strb	r1, [r0, #3]
 8013a12:	1d03      	adds	r3, r0, #4
 8013a14:	e7f1      	b.n	80139fa <__exponent+0x60>
	...

08013a18 <_printf_float>:
 8013a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1c:	b091      	sub	sp, #68	; 0x44
 8013a1e:	460c      	mov	r4, r1
 8013a20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8013a24:	4616      	mov	r6, r2
 8013a26:	461f      	mov	r7, r3
 8013a28:	4605      	mov	r5, r0
 8013a2a:	f001 fa7b 	bl	8014f24 <_localeconv_r>
 8013a2e:	6803      	ldr	r3, [r0, #0]
 8013a30:	4618      	mov	r0, r3
 8013a32:	9309      	str	r3, [sp, #36]	; 0x24
 8013a34:	f7ec fbf8 	bl	8000228 <strlen>
 8013a38:	2300      	movs	r3, #0
 8013a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8013a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8013a40:	900a      	str	r0, [sp, #40]	; 0x28
 8013a42:	3307      	adds	r3, #7
 8013a44:	f023 0307 	bic.w	r3, r3, #7
 8013a48:	f103 0208 	add.w	r2, r3, #8
 8013a4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013a50:	f8d4 b000 	ldr.w	fp, [r4]
 8013a54:	f8c8 2000 	str.w	r2, [r8]
 8013a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013a60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8013a64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8013a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a6e:	4640      	mov	r0, r8
 8013a70:	4b9c      	ldr	r3, [pc, #624]	; (8013ce4 <_printf_float+0x2cc>)
 8013a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a74:	f7ed f836 	bl	8000ae4 <__aeabi_dcmpun>
 8013a78:	bb70      	cbnz	r0, 8013ad8 <_printf_float+0xc0>
 8013a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8013a7e:	4640      	mov	r0, r8
 8013a80:	4b98      	ldr	r3, [pc, #608]	; (8013ce4 <_printf_float+0x2cc>)
 8013a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013a84:	f7ed f810 	bl	8000aa8 <__aeabi_dcmple>
 8013a88:	bb30      	cbnz	r0, 8013ad8 <_printf_float+0xc0>
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	4640      	mov	r0, r8
 8013a90:	4651      	mov	r1, sl
 8013a92:	f7ec ffff 	bl	8000a94 <__aeabi_dcmplt>
 8013a96:	b110      	cbz	r0, 8013a9e <_printf_float+0x86>
 8013a98:	232d      	movs	r3, #45	; 0x2d
 8013a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a9e:	4b92      	ldr	r3, [pc, #584]	; (8013ce8 <_printf_float+0x2d0>)
 8013aa0:	4892      	ldr	r0, [pc, #584]	; (8013cec <_printf_float+0x2d4>)
 8013aa2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013aa6:	bf94      	ite	ls
 8013aa8:	4698      	movls	r8, r3
 8013aaa:	4680      	movhi	r8, r0
 8013aac:	2303      	movs	r3, #3
 8013aae:	f04f 0a00 	mov.w	sl, #0
 8013ab2:	6123      	str	r3, [r4, #16]
 8013ab4:	f02b 0304 	bic.w	r3, fp, #4
 8013ab8:	6023      	str	r3, [r4, #0]
 8013aba:	4633      	mov	r3, r6
 8013abc:	4621      	mov	r1, r4
 8013abe:	4628      	mov	r0, r5
 8013ac0:	9700      	str	r7, [sp, #0]
 8013ac2:	aa0f      	add	r2, sp, #60	; 0x3c
 8013ac4:	f000 f9d4 	bl	8013e70 <_printf_common>
 8013ac8:	3001      	adds	r0, #1
 8013aca:	f040 8090 	bne.w	8013bee <_printf_float+0x1d6>
 8013ace:	f04f 30ff 	mov.w	r0, #4294967295
 8013ad2:	b011      	add	sp, #68	; 0x44
 8013ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ad8:	4642      	mov	r2, r8
 8013ada:	4653      	mov	r3, sl
 8013adc:	4640      	mov	r0, r8
 8013ade:	4651      	mov	r1, sl
 8013ae0:	f7ed f800 	bl	8000ae4 <__aeabi_dcmpun>
 8013ae4:	b148      	cbz	r0, 8013afa <_printf_float+0xe2>
 8013ae6:	f1ba 0f00 	cmp.w	sl, #0
 8013aea:	bfb8      	it	lt
 8013aec:	232d      	movlt	r3, #45	; 0x2d
 8013aee:	4880      	ldr	r0, [pc, #512]	; (8013cf0 <_printf_float+0x2d8>)
 8013af0:	bfb8      	it	lt
 8013af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013af6:	4b7f      	ldr	r3, [pc, #508]	; (8013cf4 <_printf_float+0x2dc>)
 8013af8:	e7d3      	b.n	8013aa2 <_printf_float+0x8a>
 8013afa:	6863      	ldr	r3, [r4, #4]
 8013afc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013b00:	1c5a      	adds	r2, r3, #1
 8013b02:	d142      	bne.n	8013b8a <_printf_float+0x172>
 8013b04:	2306      	movs	r3, #6
 8013b06:	6063      	str	r3, [r4, #4]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	9206      	str	r2, [sp, #24]
 8013b0c:	aa0e      	add	r2, sp, #56	; 0x38
 8013b0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8013b12:	aa0d      	add	r2, sp, #52	; 0x34
 8013b14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8013b18:	9203      	str	r2, [sp, #12]
 8013b1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8013b1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013b22:	6023      	str	r3, [r4, #0]
 8013b24:	6863      	ldr	r3, [r4, #4]
 8013b26:	4642      	mov	r2, r8
 8013b28:	9300      	str	r3, [sp, #0]
 8013b2a:	4628      	mov	r0, r5
 8013b2c:	4653      	mov	r3, sl
 8013b2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8013b30:	f7ff fed4 	bl	80138dc <__cvt>
 8013b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013b36:	4680      	mov	r8, r0
 8013b38:	2947      	cmp	r1, #71	; 0x47
 8013b3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b3c:	d108      	bne.n	8013b50 <_printf_float+0x138>
 8013b3e:	1cc8      	adds	r0, r1, #3
 8013b40:	db02      	blt.n	8013b48 <_printf_float+0x130>
 8013b42:	6863      	ldr	r3, [r4, #4]
 8013b44:	4299      	cmp	r1, r3
 8013b46:	dd40      	ble.n	8013bca <_printf_float+0x1b2>
 8013b48:	f1a9 0902 	sub.w	r9, r9, #2
 8013b4c:	fa5f f989 	uxtb.w	r9, r9
 8013b50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013b54:	d81f      	bhi.n	8013b96 <_printf_float+0x17e>
 8013b56:	464a      	mov	r2, r9
 8013b58:	3901      	subs	r1, #1
 8013b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013b5e:	910d      	str	r1, [sp, #52]	; 0x34
 8013b60:	f7ff ff1b 	bl	801399a <__exponent>
 8013b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b66:	4682      	mov	sl, r0
 8013b68:	1813      	adds	r3, r2, r0
 8013b6a:	2a01      	cmp	r2, #1
 8013b6c:	6123      	str	r3, [r4, #16]
 8013b6e:	dc02      	bgt.n	8013b76 <_printf_float+0x15e>
 8013b70:	6822      	ldr	r2, [r4, #0]
 8013b72:	07d2      	lsls	r2, r2, #31
 8013b74:	d501      	bpl.n	8013b7a <_printf_float+0x162>
 8013b76:	3301      	adds	r3, #1
 8013b78:	6123      	str	r3, [r4, #16]
 8013b7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d09b      	beq.n	8013aba <_printf_float+0xa2>
 8013b82:	232d      	movs	r3, #45	; 0x2d
 8013b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b88:	e797      	b.n	8013aba <_printf_float+0xa2>
 8013b8a:	2947      	cmp	r1, #71	; 0x47
 8013b8c:	d1bc      	bne.n	8013b08 <_printf_float+0xf0>
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d1ba      	bne.n	8013b08 <_printf_float+0xf0>
 8013b92:	2301      	movs	r3, #1
 8013b94:	e7b7      	b.n	8013b06 <_printf_float+0xee>
 8013b96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013b9a:	d118      	bne.n	8013bce <_printf_float+0x1b6>
 8013b9c:	2900      	cmp	r1, #0
 8013b9e:	6863      	ldr	r3, [r4, #4]
 8013ba0:	dd0b      	ble.n	8013bba <_printf_float+0x1a2>
 8013ba2:	6121      	str	r1, [r4, #16]
 8013ba4:	b913      	cbnz	r3, 8013bac <_printf_float+0x194>
 8013ba6:	6822      	ldr	r2, [r4, #0]
 8013ba8:	07d0      	lsls	r0, r2, #31
 8013baa:	d502      	bpl.n	8013bb2 <_printf_float+0x19a>
 8013bac:	3301      	adds	r3, #1
 8013bae:	440b      	add	r3, r1
 8013bb0:	6123      	str	r3, [r4, #16]
 8013bb2:	f04f 0a00 	mov.w	sl, #0
 8013bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8013bb8:	e7df      	b.n	8013b7a <_printf_float+0x162>
 8013bba:	b913      	cbnz	r3, 8013bc2 <_printf_float+0x1aa>
 8013bbc:	6822      	ldr	r2, [r4, #0]
 8013bbe:	07d2      	lsls	r2, r2, #31
 8013bc0:	d501      	bpl.n	8013bc6 <_printf_float+0x1ae>
 8013bc2:	3302      	adds	r3, #2
 8013bc4:	e7f4      	b.n	8013bb0 <_printf_float+0x198>
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e7f2      	b.n	8013bb0 <_printf_float+0x198>
 8013bca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013bd0:	4299      	cmp	r1, r3
 8013bd2:	db05      	blt.n	8013be0 <_printf_float+0x1c8>
 8013bd4:	6823      	ldr	r3, [r4, #0]
 8013bd6:	6121      	str	r1, [r4, #16]
 8013bd8:	07d8      	lsls	r0, r3, #31
 8013bda:	d5ea      	bpl.n	8013bb2 <_printf_float+0x19a>
 8013bdc:	1c4b      	adds	r3, r1, #1
 8013bde:	e7e7      	b.n	8013bb0 <_printf_float+0x198>
 8013be0:	2900      	cmp	r1, #0
 8013be2:	bfcc      	ite	gt
 8013be4:	2201      	movgt	r2, #1
 8013be6:	f1c1 0202 	rsble	r2, r1, #2
 8013bea:	4413      	add	r3, r2
 8013bec:	e7e0      	b.n	8013bb0 <_printf_float+0x198>
 8013bee:	6823      	ldr	r3, [r4, #0]
 8013bf0:	055a      	lsls	r2, r3, #21
 8013bf2:	d407      	bmi.n	8013c04 <_printf_float+0x1ec>
 8013bf4:	6923      	ldr	r3, [r4, #16]
 8013bf6:	4642      	mov	r2, r8
 8013bf8:	4631      	mov	r1, r6
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	47b8      	blx	r7
 8013bfe:	3001      	adds	r0, #1
 8013c00:	d12b      	bne.n	8013c5a <_printf_float+0x242>
 8013c02:	e764      	b.n	8013ace <_printf_float+0xb6>
 8013c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013c08:	f240 80dd 	bls.w	8013dc6 <_printf_float+0x3ae>
 8013c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c10:	2200      	movs	r2, #0
 8013c12:	2300      	movs	r3, #0
 8013c14:	f7ec ff34 	bl	8000a80 <__aeabi_dcmpeq>
 8013c18:	2800      	cmp	r0, #0
 8013c1a:	d033      	beq.n	8013c84 <_printf_float+0x26c>
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	4631      	mov	r1, r6
 8013c20:	4628      	mov	r0, r5
 8013c22:	4a35      	ldr	r2, [pc, #212]	; (8013cf8 <_printf_float+0x2e0>)
 8013c24:	47b8      	blx	r7
 8013c26:	3001      	adds	r0, #1
 8013c28:	f43f af51 	beq.w	8013ace <_printf_float+0xb6>
 8013c2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013c30:	429a      	cmp	r2, r3
 8013c32:	db02      	blt.n	8013c3a <_printf_float+0x222>
 8013c34:	6823      	ldr	r3, [r4, #0]
 8013c36:	07d8      	lsls	r0, r3, #31
 8013c38:	d50f      	bpl.n	8013c5a <_printf_float+0x242>
 8013c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c3e:	4631      	mov	r1, r6
 8013c40:	4628      	mov	r0, r5
 8013c42:	47b8      	blx	r7
 8013c44:	3001      	adds	r0, #1
 8013c46:	f43f af42 	beq.w	8013ace <_printf_float+0xb6>
 8013c4a:	f04f 0800 	mov.w	r8, #0
 8013c4e:	f104 091a 	add.w	r9, r4, #26
 8013c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c54:	3b01      	subs	r3, #1
 8013c56:	4543      	cmp	r3, r8
 8013c58:	dc09      	bgt.n	8013c6e <_printf_float+0x256>
 8013c5a:	6823      	ldr	r3, [r4, #0]
 8013c5c:	079b      	lsls	r3, r3, #30
 8013c5e:	f100 8102 	bmi.w	8013e66 <_printf_float+0x44e>
 8013c62:	68e0      	ldr	r0, [r4, #12]
 8013c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013c66:	4298      	cmp	r0, r3
 8013c68:	bfb8      	it	lt
 8013c6a:	4618      	movlt	r0, r3
 8013c6c:	e731      	b.n	8013ad2 <_printf_float+0xba>
 8013c6e:	2301      	movs	r3, #1
 8013c70:	464a      	mov	r2, r9
 8013c72:	4631      	mov	r1, r6
 8013c74:	4628      	mov	r0, r5
 8013c76:	47b8      	blx	r7
 8013c78:	3001      	adds	r0, #1
 8013c7a:	f43f af28 	beq.w	8013ace <_printf_float+0xb6>
 8013c7e:	f108 0801 	add.w	r8, r8, #1
 8013c82:	e7e6      	b.n	8013c52 <_printf_float+0x23a>
 8013c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	dc38      	bgt.n	8013cfc <_printf_float+0x2e4>
 8013c8a:	2301      	movs	r3, #1
 8013c8c:	4631      	mov	r1, r6
 8013c8e:	4628      	mov	r0, r5
 8013c90:	4a19      	ldr	r2, [pc, #100]	; (8013cf8 <_printf_float+0x2e0>)
 8013c92:	47b8      	blx	r7
 8013c94:	3001      	adds	r0, #1
 8013c96:	f43f af1a 	beq.w	8013ace <_printf_float+0xb6>
 8013c9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013c9e:	4313      	orrs	r3, r2
 8013ca0:	d102      	bne.n	8013ca8 <_printf_float+0x290>
 8013ca2:	6823      	ldr	r3, [r4, #0]
 8013ca4:	07d9      	lsls	r1, r3, #31
 8013ca6:	d5d8      	bpl.n	8013c5a <_printf_float+0x242>
 8013ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cac:	4631      	mov	r1, r6
 8013cae:	4628      	mov	r0, r5
 8013cb0:	47b8      	blx	r7
 8013cb2:	3001      	adds	r0, #1
 8013cb4:	f43f af0b 	beq.w	8013ace <_printf_float+0xb6>
 8013cb8:	f04f 0900 	mov.w	r9, #0
 8013cbc:	f104 0a1a 	add.w	sl, r4, #26
 8013cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cc2:	425b      	negs	r3, r3
 8013cc4:	454b      	cmp	r3, r9
 8013cc6:	dc01      	bgt.n	8013ccc <_printf_float+0x2b4>
 8013cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013cca:	e794      	b.n	8013bf6 <_printf_float+0x1de>
 8013ccc:	2301      	movs	r3, #1
 8013cce:	4652      	mov	r2, sl
 8013cd0:	4631      	mov	r1, r6
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	47b8      	blx	r7
 8013cd6:	3001      	adds	r0, #1
 8013cd8:	f43f aef9 	beq.w	8013ace <_printf_float+0xb6>
 8013cdc:	f109 0901 	add.w	r9, r9, #1
 8013ce0:	e7ee      	b.n	8013cc0 <_printf_float+0x2a8>
 8013ce2:	bf00      	nop
 8013ce4:	7fefffff 	.word	0x7fefffff
 8013ce8:	0802fbd8 	.word	0x0802fbd8
 8013cec:	0802fbdc 	.word	0x0802fbdc
 8013cf0:	0802fbe4 	.word	0x0802fbe4
 8013cf4:	0802fbe0 	.word	0x0802fbe0
 8013cf8:	0802fbe8 	.word	0x0802fbe8
 8013cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d00:	429a      	cmp	r2, r3
 8013d02:	bfa8      	it	ge
 8013d04:	461a      	movge	r2, r3
 8013d06:	2a00      	cmp	r2, #0
 8013d08:	4691      	mov	r9, r2
 8013d0a:	dc37      	bgt.n	8013d7c <_printf_float+0x364>
 8013d0c:	f04f 0b00 	mov.w	fp, #0
 8013d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d14:	f104 021a 	add.w	r2, r4, #26
 8013d18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013d1c:	ebaa 0309 	sub.w	r3, sl, r9
 8013d20:	455b      	cmp	r3, fp
 8013d22:	dc33      	bgt.n	8013d8c <_printf_float+0x374>
 8013d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013d28:	429a      	cmp	r2, r3
 8013d2a:	db3b      	blt.n	8013da4 <_printf_float+0x38c>
 8013d2c:	6823      	ldr	r3, [r4, #0]
 8013d2e:	07da      	lsls	r2, r3, #31
 8013d30:	d438      	bmi.n	8013da4 <_printf_float+0x38c>
 8013d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013d34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013d36:	eba3 020a 	sub.w	r2, r3, sl
 8013d3a:	eba3 0901 	sub.w	r9, r3, r1
 8013d3e:	4591      	cmp	r9, r2
 8013d40:	bfa8      	it	ge
 8013d42:	4691      	movge	r9, r2
 8013d44:	f1b9 0f00 	cmp.w	r9, #0
 8013d48:	dc34      	bgt.n	8013db4 <_printf_float+0x39c>
 8013d4a:	f04f 0800 	mov.w	r8, #0
 8013d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d52:	f104 0a1a 	add.w	sl, r4, #26
 8013d56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013d5a:	1a9b      	subs	r3, r3, r2
 8013d5c:	eba3 0309 	sub.w	r3, r3, r9
 8013d60:	4543      	cmp	r3, r8
 8013d62:	f77f af7a 	ble.w	8013c5a <_printf_float+0x242>
 8013d66:	2301      	movs	r3, #1
 8013d68:	4652      	mov	r2, sl
 8013d6a:	4631      	mov	r1, r6
 8013d6c:	4628      	mov	r0, r5
 8013d6e:	47b8      	blx	r7
 8013d70:	3001      	adds	r0, #1
 8013d72:	f43f aeac 	beq.w	8013ace <_printf_float+0xb6>
 8013d76:	f108 0801 	add.w	r8, r8, #1
 8013d7a:	e7ec      	b.n	8013d56 <_printf_float+0x33e>
 8013d7c:	4613      	mov	r3, r2
 8013d7e:	4631      	mov	r1, r6
 8013d80:	4642      	mov	r2, r8
 8013d82:	4628      	mov	r0, r5
 8013d84:	47b8      	blx	r7
 8013d86:	3001      	adds	r0, #1
 8013d88:	d1c0      	bne.n	8013d0c <_printf_float+0x2f4>
 8013d8a:	e6a0      	b.n	8013ace <_printf_float+0xb6>
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	4631      	mov	r1, r6
 8013d90:	4628      	mov	r0, r5
 8013d92:	920b      	str	r2, [sp, #44]	; 0x2c
 8013d94:	47b8      	blx	r7
 8013d96:	3001      	adds	r0, #1
 8013d98:	f43f ae99 	beq.w	8013ace <_printf_float+0xb6>
 8013d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013d9e:	f10b 0b01 	add.w	fp, fp, #1
 8013da2:	e7b9      	b.n	8013d18 <_printf_float+0x300>
 8013da4:	4631      	mov	r1, r6
 8013da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013daa:	4628      	mov	r0, r5
 8013dac:	47b8      	blx	r7
 8013dae:	3001      	adds	r0, #1
 8013db0:	d1bf      	bne.n	8013d32 <_printf_float+0x31a>
 8013db2:	e68c      	b.n	8013ace <_printf_float+0xb6>
 8013db4:	464b      	mov	r3, r9
 8013db6:	4631      	mov	r1, r6
 8013db8:	4628      	mov	r0, r5
 8013dba:	eb08 020a 	add.w	r2, r8, sl
 8013dbe:	47b8      	blx	r7
 8013dc0:	3001      	adds	r0, #1
 8013dc2:	d1c2      	bne.n	8013d4a <_printf_float+0x332>
 8013dc4:	e683      	b.n	8013ace <_printf_float+0xb6>
 8013dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dc8:	2a01      	cmp	r2, #1
 8013dca:	dc01      	bgt.n	8013dd0 <_printf_float+0x3b8>
 8013dcc:	07db      	lsls	r3, r3, #31
 8013dce:	d537      	bpl.n	8013e40 <_printf_float+0x428>
 8013dd0:	2301      	movs	r3, #1
 8013dd2:	4642      	mov	r2, r8
 8013dd4:	4631      	mov	r1, r6
 8013dd6:	4628      	mov	r0, r5
 8013dd8:	47b8      	blx	r7
 8013dda:	3001      	adds	r0, #1
 8013ddc:	f43f ae77 	beq.w	8013ace <_printf_float+0xb6>
 8013de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013de4:	4631      	mov	r1, r6
 8013de6:	4628      	mov	r0, r5
 8013de8:	47b8      	blx	r7
 8013dea:	3001      	adds	r0, #1
 8013dec:	f43f ae6f 	beq.w	8013ace <_printf_float+0xb6>
 8013df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013df4:	2200      	movs	r2, #0
 8013df6:	2300      	movs	r3, #0
 8013df8:	f7ec fe42 	bl	8000a80 <__aeabi_dcmpeq>
 8013dfc:	b9d8      	cbnz	r0, 8013e36 <_printf_float+0x41e>
 8013dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e00:	f108 0201 	add.w	r2, r8, #1
 8013e04:	3b01      	subs	r3, #1
 8013e06:	4631      	mov	r1, r6
 8013e08:	4628      	mov	r0, r5
 8013e0a:	47b8      	blx	r7
 8013e0c:	3001      	adds	r0, #1
 8013e0e:	d10e      	bne.n	8013e2e <_printf_float+0x416>
 8013e10:	e65d      	b.n	8013ace <_printf_float+0xb6>
 8013e12:	2301      	movs	r3, #1
 8013e14:	464a      	mov	r2, r9
 8013e16:	4631      	mov	r1, r6
 8013e18:	4628      	mov	r0, r5
 8013e1a:	47b8      	blx	r7
 8013e1c:	3001      	adds	r0, #1
 8013e1e:	f43f ae56 	beq.w	8013ace <_printf_float+0xb6>
 8013e22:	f108 0801 	add.w	r8, r8, #1
 8013e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e28:	3b01      	subs	r3, #1
 8013e2a:	4543      	cmp	r3, r8
 8013e2c:	dcf1      	bgt.n	8013e12 <_printf_float+0x3fa>
 8013e2e:	4653      	mov	r3, sl
 8013e30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013e34:	e6e0      	b.n	8013bf8 <_printf_float+0x1e0>
 8013e36:	f04f 0800 	mov.w	r8, #0
 8013e3a:	f104 091a 	add.w	r9, r4, #26
 8013e3e:	e7f2      	b.n	8013e26 <_printf_float+0x40e>
 8013e40:	2301      	movs	r3, #1
 8013e42:	4642      	mov	r2, r8
 8013e44:	e7df      	b.n	8013e06 <_printf_float+0x3ee>
 8013e46:	2301      	movs	r3, #1
 8013e48:	464a      	mov	r2, r9
 8013e4a:	4631      	mov	r1, r6
 8013e4c:	4628      	mov	r0, r5
 8013e4e:	47b8      	blx	r7
 8013e50:	3001      	adds	r0, #1
 8013e52:	f43f ae3c 	beq.w	8013ace <_printf_float+0xb6>
 8013e56:	f108 0801 	add.w	r8, r8, #1
 8013e5a:	68e3      	ldr	r3, [r4, #12]
 8013e5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e5e:	1a5b      	subs	r3, r3, r1
 8013e60:	4543      	cmp	r3, r8
 8013e62:	dcf0      	bgt.n	8013e46 <_printf_float+0x42e>
 8013e64:	e6fd      	b.n	8013c62 <_printf_float+0x24a>
 8013e66:	f04f 0800 	mov.w	r8, #0
 8013e6a:	f104 0919 	add.w	r9, r4, #25
 8013e6e:	e7f4      	b.n	8013e5a <_printf_float+0x442>

08013e70 <_printf_common>:
 8013e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e74:	4616      	mov	r6, r2
 8013e76:	4699      	mov	r9, r3
 8013e78:	688a      	ldr	r2, [r1, #8]
 8013e7a:	690b      	ldr	r3, [r1, #16]
 8013e7c:	4607      	mov	r7, r0
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	bfb8      	it	lt
 8013e82:	4613      	movlt	r3, r2
 8013e84:	6033      	str	r3, [r6, #0]
 8013e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013e8a:	460c      	mov	r4, r1
 8013e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013e90:	b10a      	cbz	r2, 8013e96 <_printf_common+0x26>
 8013e92:	3301      	adds	r3, #1
 8013e94:	6033      	str	r3, [r6, #0]
 8013e96:	6823      	ldr	r3, [r4, #0]
 8013e98:	0699      	lsls	r1, r3, #26
 8013e9a:	bf42      	ittt	mi
 8013e9c:	6833      	ldrmi	r3, [r6, #0]
 8013e9e:	3302      	addmi	r3, #2
 8013ea0:	6033      	strmi	r3, [r6, #0]
 8013ea2:	6825      	ldr	r5, [r4, #0]
 8013ea4:	f015 0506 	ands.w	r5, r5, #6
 8013ea8:	d106      	bne.n	8013eb8 <_printf_common+0x48>
 8013eaa:	f104 0a19 	add.w	sl, r4, #25
 8013eae:	68e3      	ldr	r3, [r4, #12]
 8013eb0:	6832      	ldr	r2, [r6, #0]
 8013eb2:	1a9b      	subs	r3, r3, r2
 8013eb4:	42ab      	cmp	r3, r5
 8013eb6:	dc28      	bgt.n	8013f0a <_printf_common+0x9a>
 8013eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013ebc:	1e13      	subs	r3, r2, #0
 8013ebe:	6822      	ldr	r2, [r4, #0]
 8013ec0:	bf18      	it	ne
 8013ec2:	2301      	movne	r3, #1
 8013ec4:	0692      	lsls	r2, r2, #26
 8013ec6:	d42d      	bmi.n	8013f24 <_printf_common+0xb4>
 8013ec8:	4649      	mov	r1, r9
 8013eca:	4638      	mov	r0, r7
 8013ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013ed0:	47c0      	blx	r8
 8013ed2:	3001      	adds	r0, #1
 8013ed4:	d020      	beq.n	8013f18 <_printf_common+0xa8>
 8013ed6:	6823      	ldr	r3, [r4, #0]
 8013ed8:	68e5      	ldr	r5, [r4, #12]
 8013eda:	f003 0306 	and.w	r3, r3, #6
 8013ede:	2b04      	cmp	r3, #4
 8013ee0:	bf18      	it	ne
 8013ee2:	2500      	movne	r5, #0
 8013ee4:	6832      	ldr	r2, [r6, #0]
 8013ee6:	f04f 0600 	mov.w	r6, #0
 8013eea:	68a3      	ldr	r3, [r4, #8]
 8013eec:	bf08      	it	eq
 8013eee:	1aad      	subeq	r5, r5, r2
 8013ef0:	6922      	ldr	r2, [r4, #16]
 8013ef2:	bf08      	it	eq
 8013ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	bfc4      	itt	gt
 8013efc:	1a9b      	subgt	r3, r3, r2
 8013efe:	18ed      	addgt	r5, r5, r3
 8013f00:	341a      	adds	r4, #26
 8013f02:	42b5      	cmp	r5, r6
 8013f04:	d11a      	bne.n	8013f3c <_printf_common+0xcc>
 8013f06:	2000      	movs	r0, #0
 8013f08:	e008      	b.n	8013f1c <_printf_common+0xac>
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	4652      	mov	r2, sl
 8013f0e:	4649      	mov	r1, r9
 8013f10:	4638      	mov	r0, r7
 8013f12:	47c0      	blx	r8
 8013f14:	3001      	adds	r0, #1
 8013f16:	d103      	bne.n	8013f20 <_printf_common+0xb0>
 8013f18:	f04f 30ff 	mov.w	r0, #4294967295
 8013f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f20:	3501      	adds	r5, #1
 8013f22:	e7c4      	b.n	8013eae <_printf_common+0x3e>
 8013f24:	2030      	movs	r0, #48	; 0x30
 8013f26:	18e1      	adds	r1, r4, r3
 8013f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013f2c:	1c5a      	adds	r2, r3, #1
 8013f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013f32:	4422      	add	r2, r4
 8013f34:	3302      	adds	r3, #2
 8013f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013f3a:	e7c5      	b.n	8013ec8 <_printf_common+0x58>
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	4622      	mov	r2, r4
 8013f40:	4649      	mov	r1, r9
 8013f42:	4638      	mov	r0, r7
 8013f44:	47c0      	blx	r8
 8013f46:	3001      	adds	r0, #1
 8013f48:	d0e6      	beq.n	8013f18 <_printf_common+0xa8>
 8013f4a:	3601      	adds	r6, #1
 8013f4c:	e7d9      	b.n	8013f02 <_printf_common+0x92>
	...

08013f50 <_printf_i>:
 8013f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f54:	7e0f      	ldrb	r7, [r1, #24]
 8013f56:	4691      	mov	r9, r2
 8013f58:	2f78      	cmp	r7, #120	; 0x78
 8013f5a:	4680      	mov	r8, r0
 8013f5c:	460c      	mov	r4, r1
 8013f5e:	469a      	mov	sl, r3
 8013f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013f66:	d807      	bhi.n	8013f78 <_printf_i+0x28>
 8013f68:	2f62      	cmp	r7, #98	; 0x62
 8013f6a:	d80a      	bhi.n	8013f82 <_printf_i+0x32>
 8013f6c:	2f00      	cmp	r7, #0
 8013f6e:	f000 80d9 	beq.w	8014124 <_printf_i+0x1d4>
 8013f72:	2f58      	cmp	r7, #88	; 0x58
 8013f74:	f000 80a4 	beq.w	80140c0 <_printf_i+0x170>
 8013f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013f80:	e03a      	b.n	8013ff8 <_printf_i+0xa8>
 8013f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013f86:	2b15      	cmp	r3, #21
 8013f88:	d8f6      	bhi.n	8013f78 <_printf_i+0x28>
 8013f8a:	a101      	add	r1, pc, #4	; (adr r1, 8013f90 <_printf_i+0x40>)
 8013f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f90:	08013fe9 	.word	0x08013fe9
 8013f94:	08013ffd 	.word	0x08013ffd
 8013f98:	08013f79 	.word	0x08013f79
 8013f9c:	08013f79 	.word	0x08013f79
 8013fa0:	08013f79 	.word	0x08013f79
 8013fa4:	08013f79 	.word	0x08013f79
 8013fa8:	08013ffd 	.word	0x08013ffd
 8013fac:	08013f79 	.word	0x08013f79
 8013fb0:	08013f79 	.word	0x08013f79
 8013fb4:	08013f79 	.word	0x08013f79
 8013fb8:	08013f79 	.word	0x08013f79
 8013fbc:	0801410b 	.word	0x0801410b
 8013fc0:	0801402d 	.word	0x0801402d
 8013fc4:	080140ed 	.word	0x080140ed
 8013fc8:	08013f79 	.word	0x08013f79
 8013fcc:	08013f79 	.word	0x08013f79
 8013fd0:	0801412d 	.word	0x0801412d
 8013fd4:	08013f79 	.word	0x08013f79
 8013fd8:	0801402d 	.word	0x0801402d
 8013fdc:	08013f79 	.word	0x08013f79
 8013fe0:	08013f79 	.word	0x08013f79
 8013fe4:	080140f5 	.word	0x080140f5
 8013fe8:	682b      	ldr	r3, [r5, #0]
 8013fea:	1d1a      	adds	r2, r3, #4
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	602a      	str	r2, [r5, #0]
 8013ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	e0a4      	b.n	8014146 <_printf_i+0x1f6>
 8013ffc:	6820      	ldr	r0, [r4, #0]
 8013ffe:	6829      	ldr	r1, [r5, #0]
 8014000:	0606      	lsls	r6, r0, #24
 8014002:	f101 0304 	add.w	r3, r1, #4
 8014006:	d50a      	bpl.n	801401e <_printf_i+0xce>
 8014008:	680e      	ldr	r6, [r1, #0]
 801400a:	602b      	str	r3, [r5, #0]
 801400c:	2e00      	cmp	r6, #0
 801400e:	da03      	bge.n	8014018 <_printf_i+0xc8>
 8014010:	232d      	movs	r3, #45	; 0x2d
 8014012:	4276      	negs	r6, r6
 8014014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014018:	230a      	movs	r3, #10
 801401a:	485e      	ldr	r0, [pc, #376]	; (8014194 <_printf_i+0x244>)
 801401c:	e019      	b.n	8014052 <_printf_i+0x102>
 801401e:	680e      	ldr	r6, [r1, #0]
 8014020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014024:	602b      	str	r3, [r5, #0]
 8014026:	bf18      	it	ne
 8014028:	b236      	sxthne	r6, r6
 801402a:	e7ef      	b.n	801400c <_printf_i+0xbc>
 801402c:	682b      	ldr	r3, [r5, #0]
 801402e:	6820      	ldr	r0, [r4, #0]
 8014030:	1d19      	adds	r1, r3, #4
 8014032:	6029      	str	r1, [r5, #0]
 8014034:	0601      	lsls	r1, r0, #24
 8014036:	d501      	bpl.n	801403c <_printf_i+0xec>
 8014038:	681e      	ldr	r6, [r3, #0]
 801403a:	e002      	b.n	8014042 <_printf_i+0xf2>
 801403c:	0646      	lsls	r6, r0, #25
 801403e:	d5fb      	bpl.n	8014038 <_printf_i+0xe8>
 8014040:	881e      	ldrh	r6, [r3, #0]
 8014042:	2f6f      	cmp	r7, #111	; 0x6f
 8014044:	bf0c      	ite	eq
 8014046:	2308      	moveq	r3, #8
 8014048:	230a      	movne	r3, #10
 801404a:	4852      	ldr	r0, [pc, #328]	; (8014194 <_printf_i+0x244>)
 801404c:	2100      	movs	r1, #0
 801404e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014052:	6865      	ldr	r5, [r4, #4]
 8014054:	2d00      	cmp	r5, #0
 8014056:	bfa8      	it	ge
 8014058:	6821      	ldrge	r1, [r4, #0]
 801405a:	60a5      	str	r5, [r4, #8]
 801405c:	bfa4      	itt	ge
 801405e:	f021 0104 	bicge.w	r1, r1, #4
 8014062:	6021      	strge	r1, [r4, #0]
 8014064:	b90e      	cbnz	r6, 801406a <_printf_i+0x11a>
 8014066:	2d00      	cmp	r5, #0
 8014068:	d04d      	beq.n	8014106 <_printf_i+0x1b6>
 801406a:	4615      	mov	r5, r2
 801406c:	fbb6 f1f3 	udiv	r1, r6, r3
 8014070:	fb03 6711 	mls	r7, r3, r1, r6
 8014074:	5dc7      	ldrb	r7, [r0, r7]
 8014076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801407a:	4637      	mov	r7, r6
 801407c:	42bb      	cmp	r3, r7
 801407e:	460e      	mov	r6, r1
 8014080:	d9f4      	bls.n	801406c <_printf_i+0x11c>
 8014082:	2b08      	cmp	r3, #8
 8014084:	d10b      	bne.n	801409e <_printf_i+0x14e>
 8014086:	6823      	ldr	r3, [r4, #0]
 8014088:	07de      	lsls	r6, r3, #31
 801408a:	d508      	bpl.n	801409e <_printf_i+0x14e>
 801408c:	6923      	ldr	r3, [r4, #16]
 801408e:	6861      	ldr	r1, [r4, #4]
 8014090:	4299      	cmp	r1, r3
 8014092:	bfde      	ittt	le
 8014094:	2330      	movle	r3, #48	; 0x30
 8014096:	f805 3c01 	strble.w	r3, [r5, #-1]
 801409a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801409e:	1b52      	subs	r2, r2, r5
 80140a0:	6122      	str	r2, [r4, #16]
 80140a2:	464b      	mov	r3, r9
 80140a4:	4621      	mov	r1, r4
 80140a6:	4640      	mov	r0, r8
 80140a8:	f8cd a000 	str.w	sl, [sp]
 80140ac:	aa03      	add	r2, sp, #12
 80140ae:	f7ff fedf 	bl	8013e70 <_printf_common>
 80140b2:	3001      	adds	r0, #1
 80140b4:	d14c      	bne.n	8014150 <_printf_i+0x200>
 80140b6:	f04f 30ff 	mov.w	r0, #4294967295
 80140ba:	b004      	add	sp, #16
 80140bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140c0:	4834      	ldr	r0, [pc, #208]	; (8014194 <_printf_i+0x244>)
 80140c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80140c6:	6829      	ldr	r1, [r5, #0]
 80140c8:	6823      	ldr	r3, [r4, #0]
 80140ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80140ce:	6029      	str	r1, [r5, #0]
 80140d0:	061d      	lsls	r5, r3, #24
 80140d2:	d514      	bpl.n	80140fe <_printf_i+0x1ae>
 80140d4:	07df      	lsls	r7, r3, #31
 80140d6:	bf44      	itt	mi
 80140d8:	f043 0320 	orrmi.w	r3, r3, #32
 80140dc:	6023      	strmi	r3, [r4, #0]
 80140de:	b91e      	cbnz	r6, 80140e8 <_printf_i+0x198>
 80140e0:	6823      	ldr	r3, [r4, #0]
 80140e2:	f023 0320 	bic.w	r3, r3, #32
 80140e6:	6023      	str	r3, [r4, #0]
 80140e8:	2310      	movs	r3, #16
 80140ea:	e7af      	b.n	801404c <_printf_i+0xfc>
 80140ec:	6823      	ldr	r3, [r4, #0]
 80140ee:	f043 0320 	orr.w	r3, r3, #32
 80140f2:	6023      	str	r3, [r4, #0]
 80140f4:	2378      	movs	r3, #120	; 0x78
 80140f6:	4828      	ldr	r0, [pc, #160]	; (8014198 <_printf_i+0x248>)
 80140f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80140fc:	e7e3      	b.n	80140c6 <_printf_i+0x176>
 80140fe:	0659      	lsls	r1, r3, #25
 8014100:	bf48      	it	mi
 8014102:	b2b6      	uxthmi	r6, r6
 8014104:	e7e6      	b.n	80140d4 <_printf_i+0x184>
 8014106:	4615      	mov	r5, r2
 8014108:	e7bb      	b.n	8014082 <_printf_i+0x132>
 801410a:	682b      	ldr	r3, [r5, #0]
 801410c:	6826      	ldr	r6, [r4, #0]
 801410e:	1d18      	adds	r0, r3, #4
 8014110:	6961      	ldr	r1, [r4, #20]
 8014112:	6028      	str	r0, [r5, #0]
 8014114:	0635      	lsls	r5, r6, #24
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	d501      	bpl.n	801411e <_printf_i+0x1ce>
 801411a:	6019      	str	r1, [r3, #0]
 801411c:	e002      	b.n	8014124 <_printf_i+0x1d4>
 801411e:	0670      	lsls	r0, r6, #25
 8014120:	d5fb      	bpl.n	801411a <_printf_i+0x1ca>
 8014122:	8019      	strh	r1, [r3, #0]
 8014124:	2300      	movs	r3, #0
 8014126:	4615      	mov	r5, r2
 8014128:	6123      	str	r3, [r4, #16]
 801412a:	e7ba      	b.n	80140a2 <_printf_i+0x152>
 801412c:	682b      	ldr	r3, [r5, #0]
 801412e:	2100      	movs	r1, #0
 8014130:	1d1a      	adds	r2, r3, #4
 8014132:	602a      	str	r2, [r5, #0]
 8014134:	681d      	ldr	r5, [r3, #0]
 8014136:	6862      	ldr	r2, [r4, #4]
 8014138:	4628      	mov	r0, r5
 801413a:	f000 fef7 	bl	8014f2c <memchr>
 801413e:	b108      	cbz	r0, 8014144 <_printf_i+0x1f4>
 8014140:	1b40      	subs	r0, r0, r5
 8014142:	6060      	str	r0, [r4, #4]
 8014144:	6863      	ldr	r3, [r4, #4]
 8014146:	6123      	str	r3, [r4, #16]
 8014148:	2300      	movs	r3, #0
 801414a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801414e:	e7a8      	b.n	80140a2 <_printf_i+0x152>
 8014150:	462a      	mov	r2, r5
 8014152:	4649      	mov	r1, r9
 8014154:	4640      	mov	r0, r8
 8014156:	6923      	ldr	r3, [r4, #16]
 8014158:	47d0      	blx	sl
 801415a:	3001      	adds	r0, #1
 801415c:	d0ab      	beq.n	80140b6 <_printf_i+0x166>
 801415e:	6823      	ldr	r3, [r4, #0]
 8014160:	079b      	lsls	r3, r3, #30
 8014162:	d413      	bmi.n	801418c <_printf_i+0x23c>
 8014164:	68e0      	ldr	r0, [r4, #12]
 8014166:	9b03      	ldr	r3, [sp, #12]
 8014168:	4298      	cmp	r0, r3
 801416a:	bfb8      	it	lt
 801416c:	4618      	movlt	r0, r3
 801416e:	e7a4      	b.n	80140ba <_printf_i+0x16a>
 8014170:	2301      	movs	r3, #1
 8014172:	4632      	mov	r2, r6
 8014174:	4649      	mov	r1, r9
 8014176:	4640      	mov	r0, r8
 8014178:	47d0      	blx	sl
 801417a:	3001      	adds	r0, #1
 801417c:	d09b      	beq.n	80140b6 <_printf_i+0x166>
 801417e:	3501      	adds	r5, #1
 8014180:	68e3      	ldr	r3, [r4, #12]
 8014182:	9903      	ldr	r1, [sp, #12]
 8014184:	1a5b      	subs	r3, r3, r1
 8014186:	42ab      	cmp	r3, r5
 8014188:	dcf2      	bgt.n	8014170 <_printf_i+0x220>
 801418a:	e7eb      	b.n	8014164 <_printf_i+0x214>
 801418c:	2500      	movs	r5, #0
 801418e:	f104 0619 	add.w	r6, r4, #25
 8014192:	e7f5      	b.n	8014180 <_printf_i+0x230>
 8014194:	0802fbea 	.word	0x0802fbea
 8014198:	0802fbfb 	.word	0x0802fbfb

0801419c <_sbrk_r>:
 801419c:	b538      	push	{r3, r4, r5, lr}
 801419e:	2300      	movs	r3, #0
 80141a0:	4d05      	ldr	r5, [pc, #20]	; (80141b8 <_sbrk_r+0x1c>)
 80141a2:	4604      	mov	r4, r0
 80141a4:	4608      	mov	r0, r1
 80141a6:	602b      	str	r3, [r5, #0]
 80141a8:	f7ef fca6 	bl	8003af8 <_sbrk>
 80141ac:	1c43      	adds	r3, r0, #1
 80141ae:	d102      	bne.n	80141b6 <_sbrk_r+0x1a>
 80141b0:	682b      	ldr	r3, [r5, #0]
 80141b2:	b103      	cbz	r3, 80141b6 <_sbrk_r+0x1a>
 80141b4:	6023      	str	r3, [r4, #0]
 80141b6:	bd38      	pop	{r3, r4, r5, pc}
 80141b8:	200016e4 	.word	0x200016e4

080141bc <_vsniprintf_r>:
 80141bc:	b530      	push	{r4, r5, lr}
 80141be:	4614      	mov	r4, r2
 80141c0:	2c00      	cmp	r4, #0
 80141c2:	4605      	mov	r5, r0
 80141c4:	461a      	mov	r2, r3
 80141c6:	b09b      	sub	sp, #108	; 0x6c
 80141c8:	da05      	bge.n	80141d6 <_vsniprintf_r+0x1a>
 80141ca:	238b      	movs	r3, #139	; 0x8b
 80141cc:	6003      	str	r3, [r0, #0]
 80141ce:	f04f 30ff 	mov.w	r0, #4294967295
 80141d2:	b01b      	add	sp, #108	; 0x6c
 80141d4:	bd30      	pop	{r4, r5, pc}
 80141d6:	f44f 7302 	mov.w	r3, #520	; 0x208
 80141da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80141de:	bf0c      	ite	eq
 80141e0:	4623      	moveq	r3, r4
 80141e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80141e6:	9302      	str	r3, [sp, #8]
 80141e8:	9305      	str	r3, [sp, #20]
 80141ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141ee:	9100      	str	r1, [sp, #0]
 80141f0:	9104      	str	r1, [sp, #16]
 80141f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80141f6:	4669      	mov	r1, sp
 80141f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80141fa:	f001 fab1 	bl	8015760 <_svfiprintf_r>
 80141fe:	1c43      	adds	r3, r0, #1
 8014200:	bfbc      	itt	lt
 8014202:	238b      	movlt	r3, #139	; 0x8b
 8014204:	602b      	strlt	r3, [r5, #0]
 8014206:	2c00      	cmp	r4, #0
 8014208:	d0e3      	beq.n	80141d2 <_vsniprintf_r+0x16>
 801420a:	2200      	movs	r2, #0
 801420c:	9b00      	ldr	r3, [sp, #0]
 801420e:	701a      	strb	r2, [r3, #0]
 8014210:	e7df      	b.n	80141d2 <_vsniprintf_r+0x16>
	...

08014214 <vsniprintf>:
 8014214:	b507      	push	{r0, r1, r2, lr}
 8014216:	9300      	str	r3, [sp, #0]
 8014218:	4613      	mov	r3, r2
 801421a:	460a      	mov	r2, r1
 801421c:	4601      	mov	r1, r0
 801421e:	4803      	ldr	r0, [pc, #12]	; (801422c <vsniprintf+0x18>)
 8014220:	6800      	ldr	r0, [r0, #0]
 8014222:	f7ff ffcb 	bl	80141bc <_vsniprintf_r>
 8014226:	b003      	add	sp, #12
 8014228:	f85d fb04 	ldr.w	pc, [sp], #4
 801422c:	20000174 	.word	0x20000174

08014230 <quorem>:
 8014230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014234:	6903      	ldr	r3, [r0, #16]
 8014236:	690c      	ldr	r4, [r1, #16]
 8014238:	4607      	mov	r7, r0
 801423a:	42a3      	cmp	r3, r4
 801423c:	f2c0 8082 	blt.w	8014344 <quorem+0x114>
 8014240:	3c01      	subs	r4, #1
 8014242:	f100 0514 	add.w	r5, r0, #20
 8014246:	f101 0814 	add.w	r8, r1, #20
 801424a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801424e:	9301      	str	r3, [sp, #4]
 8014250:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014254:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014258:	3301      	adds	r3, #1
 801425a:	429a      	cmp	r2, r3
 801425c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014268:	d331      	bcc.n	80142ce <quorem+0x9e>
 801426a:	f04f 0e00 	mov.w	lr, #0
 801426e:	4640      	mov	r0, r8
 8014270:	46ac      	mov	ip, r5
 8014272:	46f2      	mov	sl, lr
 8014274:	f850 2b04 	ldr.w	r2, [r0], #4
 8014278:	b293      	uxth	r3, r2
 801427a:	fb06 e303 	mla	r3, r6, r3, lr
 801427e:	0c12      	lsrs	r2, r2, #16
 8014280:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014284:	b29b      	uxth	r3, r3
 8014286:	fb06 e202 	mla	r2, r6, r2, lr
 801428a:	ebaa 0303 	sub.w	r3, sl, r3
 801428e:	f8dc a000 	ldr.w	sl, [ip]
 8014292:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014296:	fa1f fa8a 	uxth.w	sl, sl
 801429a:	4453      	add	r3, sl
 801429c:	f8dc a000 	ldr.w	sl, [ip]
 80142a0:	b292      	uxth	r2, r2
 80142a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80142a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80142b0:	4581      	cmp	r9, r0
 80142b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80142b6:	f84c 3b04 	str.w	r3, [ip], #4
 80142ba:	d2db      	bcs.n	8014274 <quorem+0x44>
 80142bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80142c0:	b92b      	cbnz	r3, 80142ce <quorem+0x9e>
 80142c2:	9b01      	ldr	r3, [sp, #4]
 80142c4:	3b04      	subs	r3, #4
 80142c6:	429d      	cmp	r5, r3
 80142c8:	461a      	mov	r2, r3
 80142ca:	d32f      	bcc.n	801432c <quorem+0xfc>
 80142cc:	613c      	str	r4, [r7, #16]
 80142ce:	4638      	mov	r0, r7
 80142d0:	f001 f8d2 	bl	8015478 <__mcmp>
 80142d4:	2800      	cmp	r0, #0
 80142d6:	db25      	blt.n	8014324 <quorem+0xf4>
 80142d8:	4628      	mov	r0, r5
 80142da:	f04f 0c00 	mov.w	ip, #0
 80142de:	3601      	adds	r6, #1
 80142e0:	f858 1b04 	ldr.w	r1, [r8], #4
 80142e4:	f8d0 e000 	ldr.w	lr, [r0]
 80142e8:	b28b      	uxth	r3, r1
 80142ea:	ebac 0303 	sub.w	r3, ip, r3
 80142ee:	fa1f f28e 	uxth.w	r2, lr
 80142f2:	4413      	add	r3, r2
 80142f4:	0c0a      	lsrs	r2, r1, #16
 80142f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80142fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80142fe:	b29b      	uxth	r3, r3
 8014300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014304:	45c1      	cmp	r9, r8
 8014306:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801430a:	f840 3b04 	str.w	r3, [r0], #4
 801430e:	d2e7      	bcs.n	80142e0 <quorem+0xb0>
 8014310:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014314:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014318:	b922      	cbnz	r2, 8014324 <quorem+0xf4>
 801431a:	3b04      	subs	r3, #4
 801431c:	429d      	cmp	r5, r3
 801431e:	461a      	mov	r2, r3
 8014320:	d30a      	bcc.n	8014338 <quorem+0x108>
 8014322:	613c      	str	r4, [r7, #16]
 8014324:	4630      	mov	r0, r6
 8014326:	b003      	add	sp, #12
 8014328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801432c:	6812      	ldr	r2, [r2, #0]
 801432e:	3b04      	subs	r3, #4
 8014330:	2a00      	cmp	r2, #0
 8014332:	d1cb      	bne.n	80142cc <quorem+0x9c>
 8014334:	3c01      	subs	r4, #1
 8014336:	e7c6      	b.n	80142c6 <quorem+0x96>
 8014338:	6812      	ldr	r2, [r2, #0]
 801433a:	3b04      	subs	r3, #4
 801433c:	2a00      	cmp	r2, #0
 801433e:	d1f0      	bne.n	8014322 <quorem+0xf2>
 8014340:	3c01      	subs	r4, #1
 8014342:	e7eb      	b.n	801431c <quorem+0xec>
 8014344:	2000      	movs	r0, #0
 8014346:	e7ee      	b.n	8014326 <quorem+0xf6>

08014348 <_dtoa_r>:
 8014348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801434c:	4616      	mov	r6, r2
 801434e:	461f      	mov	r7, r3
 8014350:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014352:	b099      	sub	sp, #100	; 0x64
 8014354:	4605      	mov	r5, r0
 8014356:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801435a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801435e:	b974      	cbnz	r4, 801437e <_dtoa_r+0x36>
 8014360:	2010      	movs	r0, #16
 8014362:	f7ff f9c7 	bl	80136f4 <malloc>
 8014366:	4602      	mov	r2, r0
 8014368:	6268      	str	r0, [r5, #36]	; 0x24
 801436a:	b920      	cbnz	r0, 8014376 <_dtoa_r+0x2e>
 801436c:	21ea      	movs	r1, #234	; 0xea
 801436e:	4ba8      	ldr	r3, [pc, #672]	; (8014610 <_dtoa_r+0x2c8>)
 8014370:	48a8      	ldr	r0, [pc, #672]	; (8014614 <_dtoa_r+0x2cc>)
 8014372:	f001 faf5 	bl	8015960 <__assert_func>
 8014376:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801437a:	6004      	str	r4, [r0, #0]
 801437c:	60c4      	str	r4, [r0, #12]
 801437e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014380:	6819      	ldr	r1, [r3, #0]
 8014382:	b151      	cbz	r1, 801439a <_dtoa_r+0x52>
 8014384:	685a      	ldr	r2, [r3, #4]
 8014386:	2301      	movs	r3, #1
 8014388:	4093      	lsls	r3, r2
 801438a:	604a      	str	r2, [r1, #4]
 801438c:	608b      	str	r3, [r1, #8]
 801438e:	4628      	mov	r0, r5
 8014390:	f000 fe34 	bl	8014ffc <_Bfree>
 8014394:	2200      	movs	r2, #0
 8014396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014398:	601a      	str	r2, [r3, #0]
 801439a:	1e3b      	subs	r3, r7, #0
 801439c:	bfaf      	iteee	ge
 801439e:	2300      	movge	r3, #0
 80143a0:	2201      	movlt	r2, #1
 80143a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80143a6:	9305      	strlt	r3, [sp, #20]
 80143a8:	bfa8      	it	ge
 80143aa:	f8c8 3000 	strge.w	r3, [r8]
 80143ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80143b2:	4b99      	ldr	r3, [pc, #612]	; (8014618 <_dtoa_r+0x2d0>)
 80143b4:	bfb8      	it	lt
 80143b6:	f8c8 2000 	strlt.w	r2, [r8]
 80143ba:	ea33 0309 	bics.w	r3, r3, r9
 80143be:	d119      	bne.n	80143f4 <_dtoa_r+0xac>
 80143c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80143c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80143c6:	6013      	str	r3, [r2, #0]
 80143c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80143cc:	4333      	orrs	r3, r6
 80143ce:	f000 857f 	beq.w	8014ed0 <_dtoa_r+0xb88>
 80143d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80143d4:	b953      	cbnz	r3, 80143ec <_dtoa_r+0xa4>
 80143d6:	4b91      	ldr	r3, [pc, #580]	; (801461c <_dtoa_r+0x2d4>)
 80143d8:	e022      	b.n	8014420 <_dtoa_r+0xd8>
 80143da:	4b91      	ldr	r3, [pc, #580]	; (8014620 <_dtoa_r+0x2d8>)
 80143dc:	9303      	str	r3, [sp, #12]
 80143de:	3308      	adds	r3, #8
 80143e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80143e2:	6013      	str	r3, [r2, #0]
 80143e4:	9803      	ldr	r0, [sp, #12]
 80143e6:	b019      	add	sp, #100	; 0x64
 80143e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ec:	4b8b      	ldr	r3, [pc, #556]	; (801461c <_dtoa_r+0x2d4>)
 80143ee:	9303      	str	r3, [sp, #12]
 80143f0:	3303      	adds	r3, #3
 80143f2:	e7f5      	b.n	80143e0 <_dtoa_r+0x98>
 80143f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80143f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80143fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014400:	2200      	movs	r2, #0
 8014402:	2300      	movs	r3, #0
 8014404:	f7ec fb3c 	bl	8000a80 <__aeabi_dcmpeq>
 8014408:	4680      	mov	r8, r0
 801440a:	b158      	cbz	r0, 8014424 <_dtoa_r+0xdc>
 801440c:	2301      	movs	r3, #1
 801440e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014410:	6013      	str	r3, [r2, #0]
 8014412:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8558 	beq.w	8014eca <_dtoa_r+0xb82>
 801441a:	4882      	ldr	r0, [pc, #520]	; (8014624 <_dtoa_r+0x2dc>)
 801441c:	6018      	str	r0, [r3, #0]
 801441e:	1e43      	subs	r3, r0, #1
 8014420:	9303      	str	r3, [sp, #12]
 8014422:	e7df      	b.n	80143e4 <_dtoa_r+0x9c>
 8014424:	ab16      	add	r3, sp, #88	; 0x58
 8014426:	9301      	str	r3, [sp, #4]
 8014428:	ab17      	add	r3, sp, #92	; 0x5c
 801442a:	9300      	str	r3, [sp, #0]
 801442c:	4628      	mov	r0, r5
 801442e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014432:	f001 f8c9 	bl	80155c8 <__d2b>
 8014436:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801443a:	4683      	mov	fp, r0
 801443c:	2c00      	cmp	r4, #0
 801443e:	d07f      	beq.n	8014540 <_dtoa_r+0x1f8>
 8014440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014446:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801444a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801444e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8014452:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014456:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801445a:	2200      	movs	r2, #0
 801445c:	4b72      	ldr	r3, [pc, #456]	; (8014628 <_dtoa_r+0x2e0>)
 801445e:	f7eb feef 	bl	8000240 <__aeabi_dsub>
 8014462:	a365      	add	r3, pc, #404	; (adr r3, 80145f8 <_dtoa_r+0x2b0>)
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	f7ec f8a2 	bl	80005b0 <__aeabi_dmul>
 801446c:	a364      	add	r3, pc, #400	; (adr r3, 8014600 <_dtoa_r+0x2b8>)
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	f7eb fee7 	bl	8000244 <__adddf3>
 8014476:	4606      	mov	r6, r0
 8014478:	4620      	mov	r0, r4
 801447a:	460f      	mov	r7, r1
 801447c:	f7ec f82e 	bl	80004dc <__aeabi_i2d>
 8014480:	a361      	add	r3, pc, #388	; (adr r3, 8014608 <_dtoa_r+0x2c0>)
 8014482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014486:	f7ec f893 	bl	80005b0 <__aeabi_dmul>
 801448a:	4602      	mov	r2, r0
 801448c:	460b      	mov	r3, r1
 801448e:	4630      	mov	r0, r6
 8014490:	4639      	mov	r1, r7
 8014492:	f7eb fed7 	bl	8000244 <__adddf3>
 8014496:	4606      	mov	r6, r0
 8014498:	460f      	mov	r7, r1
 801449a:	f7ec fb39 	bl	8000b10 <__aeabi_d2iz>
 801449e:	2200      	movs	r2, #0
 80144a0:	4682      	mov	sl, r0
 80144a2:	2300      	movs	r3, #0
 80144a4:	4630      	mov	r0, r6
 80144a6:	4639      	mov	r1, r7
 80144a8:	f7ec faf4 	bl	8000a94 <__aeabi_dcmplt>
 80144ac:	b148      	cbz	r0, 80144c2 <_dtoa_r+0x17a>
 80144ae:	4650      	mov	r0, sl
 80144b0:	f7ec f814 	bl	80004dc <__aeabi_i2d>
 80144b4:	4632      	mov	r2, r6
 80144b6:	463b      	mov	r3, r7
 80144b8:	f7ec fae2 	bl	8000a80 <__aeabi_dcmpeq>
 80144bc:	b908      	cbnz	r0, 80144c2 <_dtoa_r+0x17a>
 80144be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144c2:	f1ba 0f16 	cmp.w	sl, #22
 80144c6:	d858      	bhi.n	801457a <_dtoa_r+0x232>
 80144c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80144cc:	4b57      	ldr	r3, [pc, #348]	; (801462c <_dtoa_r+0x2e4>)
 80144ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80144d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d6:	f7ec fadd 	bl	8000a94 <__aeabi_dcmplt>
 80144da:	2800      	cmp	r0, #0
 80144dc:	d04f      	beq.n	801457e <_dtoa_r+0x236>
 80144de:	2300      	movs	r3, #0
 80144e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80144e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80144e8:	1b1c      	subs	r4, r3, r4
 80144ea:	1e63      	subs	r3, r4, #1
 80144ec:	9309      	str	r3, [sp, #36]	; 0x24
 80144ee:	bf49      	itett	mi
 80144f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80144f4:	2300      	movpl	r3, #0
 80144f6:	9306      	strmi	r3, [sp, #24]
 80144f8:	2300      	movmi	r3, #0
 80144fa:	bf54      	ite	pl
 80144fc:	9306      	strpl	r3, [sp, #24]
 80144fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8014500:	f1ba 0f00 	cmp.w	sl, #0
 8014504:	db3d      	blt.n	8014582 <_dtoa_r+0x23a>
 8014506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014508:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801450c:	4453      	add	r3, sl
 801450e:	9309      	str	r3, [sp, #36]	; 0x24
 8014510:	2300      	movs	r3, #0
 8014512:	930a      	str	r3, [sp, #40]	; 0x28
 8014514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014516:	2b09      	cmp	r3, #9
 8014518:	f200 808c 	bhi.w	8014634 <_dtoa_r+0x2ec>
 801451c:	2b05      	cmp	r3, #5
 801451e:	bfc4      	itt	gt
 8014520:	3b04      	subgt	r3, #4
 8014522:	9322      	strgt	r3, [sp, #136]	; 0x88
 8014524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014526:	bfc8      	it	gt
 8014528:	2400      	movgt	r4, #0
 801452a:	f1a3 0302 	sub.w	r3, r3, #2
 801452e:	bfd8      	it	le
 8014530:	2401      	movle	r4, #1
 8014532:	2b03      	cmp	r3, #3
 8014534:	f200 808a 	bhi.w	801464c <_dtoa_r+0x304>
 8014538:	e8df f003 	tbb	[pc, r3]
 801453c:	5b4d4f2d 	.word	0x5b4d4f2d
 8014540:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8014544:	441c      	add	r4, r3
 8014546:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801454a:	2b20      	cmp	r3, #32
 801454c:	bfc3      	ittte	gt
 801454e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014552:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8014556:	fa09 f303 	lslgt.w	r3, r9, r3
 801455a:	f1c3 0320 	rsble	r3, r3, #32
 801455e:	bfc6      	itte	gt
 8014560:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014564:	4318      	orrgt	r0, r3
 8014566:	fa06 f003 	lslle.w	r0, r6, r3
 801456a:	f7eb ffa7 	bl	80004bc <__aeabi_ui2d>
 801456e:	2301      	movs	r3, #1
 8014570:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014574:	3c01      	subs	r4, #1
 8014576:	9313      	str	r3, [sp, #76]	; 0x4c
 8014578:	e76f      	b.n	801445a <_dtoa_r+0x112>
 801457a:	2301      	movs	r3, #1
 801457c:	e7b2      	b.n	80144e4 <_dtoa_r+0x19c>
 801457e:	900f      	str	r0, [sp, #60]	; 0x3c
 8014580:	e7b1      	b.n	80144e6 <_dtoa_r+0x19e>
 8014582:	9b06      	ldr	r3, [sp, #24]
 8014584:	eba3 030a 	sub.w	r3, r3, sl
 8014588:	9306      	str	r3, [sp, #24]
 801458a:	f1ca 0300 	rsb	r3, sl, #0
 801458e:	930a      	str	r3, [sp, #40]	; 0x28
 8014590:	2300      	movs	r3, #0
 8014592:	930e      	str	r3, [sp, #56]	; 0x38
 8014594:	e7be      	b.n	8014514 <_dtoa_r+0x1cc>
 8014596:	2300      	movs	r3, #0
 8014598:	930b      	str	r3, [sp, #44]	; 0x2c
 801459a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801459c:	2b00      	cmp	r3, #0
 801459e:	dc58      	bgt.n	8014652 <_dtoa_r+0x30a>
 80145a0:	f04f 0901 	mov.w	r9, #1
 80145a4:	464b      	mov	r3, r9
 80145a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80145aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80145ae:	2200      	movs	r2, #0
 80145b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80145b2:	6042      	str	r2, [r0, #4]
 80145b4:	2204      	movs	r2, #4
 80145b6:	f102 0614 	add.w	r6, r2, #20
 80145ba:	429e      	cmp	r6, r3
 80145bc:	6841      	ldr	r1, [r0, #4]
 80145be:	d94e      	bls.n	801465e <_dtoa_r+0x316>
 80145c0:	4628      	mov	r0, r5
 80145c2:	f000 fcdb 	bl	8014f7c <_Balloc>
 80145c6:	9003      	str	r0, [sp, #12]
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d14c      	bne.n	8014666 <_dtoa_r+0x31e>
 80145cc:	4602      	mov	r2, r0
 80145ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80145d2:	4b17      	ldr	r3, [pc, #92]	; (8014630 <_dtoa_r+0x2e8>)
 80145d4:	e6cc      	b.n	8014370 <_dtoa_r+0x28>
 80145d6:	2301      	movs	r3, #1
 80145d8:	e7de      	b.n	8014598 <_dtoa_r+0x250>
 80145da:	2300      	movs	r3, #0
 80145dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80145de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80145e0:	eb0a 0903 	add.w	r9, sl, r3
 80145e4:	f109 0301 	add.w	r3, r9, #1
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	9308      	str	r3, [sp, #32]
 80145ec:	bfb8      	it	lt
 80145ee:	2301      	movlt	r3, #1
 80145f0:	e7dd      	b.n	80145ae <_dtoa_r+0x266>
 80145f2:	2301      	movs	r3, #1
 80145f4:	e7f2      	b.n	80145dc <_dtoa_r+0x294>
 80145f6:	bf00      	nop
 80145f8:	636f4361 	.word	0x636f4361
 80145fc:	3fd287a7 	.word	0x3fd287a7
 8014600:	8b60c8b3 	.word	0x8b60c8b3
 8014604:	3fc68a28 	.word	0x3fc68a28
 8014608:	509f79fb 	.word	0x509f79fb
 801460c:	3fd34413 	.word	0x3fd34413
 8014610:	0802fc19 	.word	0x0802fc19
 8014614:	0802fc30 	.word	0x0802fc30
 8014618:	7ff00000 	.word	0x7ff00000
 801461c:	0802fc15 	.word	0x0802fc15
 8014620:	0802fc0c 	.word	0x0802fc0c
 8014624:	0802fbe9 	.word	0x0802fbe9
 8014628:	3ff80000 	.word	0x3ff80000
 801462c:	0802fd20 	.word	0x0802fd20
 8014630:	0802fc8b 	.word	0x0802fc8b
 8014634:	2401      	movs	r4, #1
 8014636:	2300      	movs	r3, #0
 8014638:	940b      	str	r4, [sp, #44]	; 0x2c
 801463a:	9322      	str	r3, [sp, #136]	; 0x88
 801463c:	f04f 39ff 	mov.w	r9, #4294967295
 8014640:	2200      	movs	r2, #0
 8014642:	2312      	movs	r3, #18
 8014644:	f8cd 9020 	str.w	r9, [sp, #32]
 8014648:	9223      	str	r2, [sp, #140]	; 0x8c
 801464a:	e7b0      	b.n	80145ae <_dtoa_r+0x266>
 801464c:	2301      	movs	r3, #1
 801464e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014650:	e7f4      	b.n	801463c <_dtoa_r+0x2f4>
 8014652:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8014656:	464b      	mov	r3, r9
 8014658:	f8cd 9020 	str.w	r9, [sp, #32]
 801465c:	e7a7      	b.n	80145ae <_dtoa_r+0x266>
 801465e:	3101      	adds	r1, #1
 8014660:	6041      	str	r1, [r0, #4]
 8014662:	0052      	lsls	r2, r2, #1
 8014664:	e7a7      	b.n	80145b6 <_dtoa_r+0x26e>
 8014666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014668:	9a03      	ldr	r2, [sp, #12]
 801466a:	601a      	str	r2, [r3, #0]
 801466c:	9b08      	ldr	r3, [sp, #32]
 801466e:	2b0e      	cmp	r3, #14
 8014670:	f200 80a8 	bhi.w	80147c4 <_dtoa_r+0x47c>
 8014674:	2c00      	cmp	r4, #0
 8014676:	f000 80a5 	beq.w	80147c4 <_dtoa_r+0x47c>
 801467a:	f1ba 0f00 	cmp.w	sl, #0
 801467e:	dd34      	ble.n	80146ea <_dtoa_r+0x3a2>
 8014680:	4a9a      	ldr	r2, [pc, #616]	; (80148ec <_dtoa_r+0x5a4>)
 8014682:	f00a 030f 	and.w	r3, sl, #15
 8014686:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801468a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801468e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014692:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014696:	ea4f 142a 	mov.w	r4, sl, asr #4
 801469a:	d016      	beq.n	80146ca <_dtoa_r+0x382>
 801469c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80146a0:	4b93      	ldr	r3, [pc, #588]	; (80148f0 <_dtoa_r+0x5a8>)
 80146a2:	2703      	movs	r7, #3
 80146a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80146a8:	f7ec f8ac 	bl	8000804 <__aeabi_ddiv>
 80146ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80146b0:	f004 040f 	and.w	r4, r4, #15
 80146b4:	4e8e      	ldr	r6, [pc, #568]	; (80148f0 <_dtoa_r+0x5a8>)
 80146b6:	b954      	cbnz	r4, 80146ce <_dtoa_r+0x386>
 80146b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80146bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146c0:	f7ec f8a0 	bl	8000804 <__aeabi_ddiv>
 80146c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80146c8:	e029      	b.n	801471e <_dtoa_r+0x3d6>
 80146ca:	2702      	movs	r7, #2
 80146cc:	e7f2      	b.n	80146b4 <_dtoa_r+0x36c>
 80146ce:	07e1      	lsls	r1, r4, #31
 80146d0:	d508      	bpl.n	80146e4 <_dtoa_r+0x39c>
 80146d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80146d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80146da:	f7eb ff69 	bl	80005b0 <__aeabi_dmul>
 80146de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80146e2:	3701      	adds	r7, #1
 80146e4:	1064      	asrs	r4, r4, #1
 80146e6:	3608      	adds	r6, #8
 80146e8:	e7e5      	b.n	80146b6 <_dtoa_r+0x36e>
 80146ea:	f000 80a5 	beq.w	8014838 <_dtoa_r+0x4f0>
 80146ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80146f2:	f1ca 0400 	rsb	r4, sl, #0
 80146f6:	4b7d      	ldr	r3, [pc, #500]	; (80148ec <_dtoa_r+0x5a4>)
 80146f8:	f004 020f 	and.w	r2, r4, #15
 80146fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014704:	f7eb ff54 	bl	80005b0 <__aeabi_dmul>
 8014708:	2702      	movs	r7, #2
 801470a:	2300      	movs	r3, #0
 801470c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014710:	4e77      	ldr	r6, [pc, #476]	; (80148f0 <_dtoa_r+0x5a8>)
 8014712:	1124      	asrs	r4, r4, #4
 8014714:	2c00      	cmp	r4, #0
 8014716:	f040 8084 	bne.w	8014822 <_dtoa_r+0x4da>
 801471a:	2b00      	cmp	r3, #0
 801471c:	d1d2      	bne.n	80146c4 <_dtoa_r+0x37c>
 801471e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014720:	2b00      	cmp	r3, #0
 8014722:	f000 808b 	beq.w	801483c <_dtoa_r+0x4f4>
 8014726:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801472a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801472e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014732:	2200      	movs	r2, #0
 8014734:	4b6f      	ldr	r3, [pc, #444]	; (80148f4 <_dtoa_r+0x5ac>)
 8014736:	f7ec f9ad 	bl	8000a94 <__aeabi_dcmplt>
 801473a:	2800      	cmp	r0, #0
 801473c:	d07e      	beq.n	801483c <_dtoa_r+0x4f4>
 801473e:	9b08      	ldr	r3, [sp, #32]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d07b      	beq.n	801483c <_dtoa_r+0x4f4>
 8014744:	f1b9 0f00 	cmp.w	r9, #0
 8014748:	dd38      	ble.n	80147bc <_dtoa_r+0x474>
 801474a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801474e:	2200      	movs	r2, #0
 8014750:	4b69      	ldr	r3, [pc, #420]	; (80148f8 <_dtoa_r+0x5b0>)
 8014752:	f7eb ff2d 	bl	80005b0 <__aeabi_dmul>
 8014756:	464c      	mov	r4, r9
 8014758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801475c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8014760:	3701      	adds	r7, #1
 8014762:	4638      	mov	r0, r7
 8014764:	f7eb feba 	bl	80004dc <__aeabi_i2d>
 8014768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801476c:	f7eb ff20 	bl	80005b0 <__aeabi_dmul>
 8014770:	2200      	movs	r2, #0
 8014772:	4b62      	ldr	r3, [pc, #392]	; (80148fc <_dtoa_r+0x5b4>)
 8014774:	f7eb fd66 	bl	8000244 <__adddf3>
 8014778:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801477c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014780:	9611      	str	r6, [sp, #68]	; 0x44
 8014782:	2c00      	cmp	r4, #0
 8014784:	d15d      	bne.n	8014842 <_dtoa_r+0x4fa>
 8014786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801478a:	2200      	movs	r2, #0
 801478c:	4b5c      	ldr	r3, [pc, #368]	; (8014900 <_dtoa_r+0x5b8>)
 801478e:	f7eb fd57 	bl	8000240 <__aeabi_dsub>
 8014792:	4602      	mov	r2, r0
 8014794:	460b      	mov	r3, r1
 8014796:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801479a:	4633      	mov	r3, r6
 801479c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801479e:	f7ec f997 	bl	8000ad0 <__aeabi_dcmpgt>
 80147a2:	2800      	cmp	r0, #0
 80147a4:	f040 829c 	bne.w	8014ce0 <_dtoa_r+0x998>
 80147a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80147ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80147ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80147b2:	f7ec f96f 	bl	8000a94 <__aeabi_dcmplt>
 80147b6:	2800      	cmp	r0, #0
 80147b8:	f040 8290 	bne.w	8014cdc <_dtoa_r+0x994>
 80147bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80147c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80147c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	f2c0 8152 	blt.w	8014a70 <_dtoa_r+0x728>
 80147cc:	f1ba 0f0e 	cmp.w	sl, #14
 80147d0:	f300 814e 	bgt.w	8014a70 <_dtoa_r+0x728>
 80147d4:	4b45      	ldr	r3, [pc, #276]	; (80148ec <_dtoa_r+0x5a4>)
 80147d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80147da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80147de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80147e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	f280 80db 	bge.w	80149a0 <_dtoa_r+0x658>
 80147ea:	9b08      	ldr	r3, [sp, #32]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	f300 80d7 	bgt.w	80149a0 <_dtoa_r+0x658>
 80147f2:	f040 8272 	bne.w	8014cda <_dtoa_r+0x992>
 80147f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80147fa:	2200      	movs	r2, #0
 80147fc:	4b40      	ldr	r3, [pc, #256]	; (8014900 <_dtoa_r+0x5b8>)
 80147fe:	f7eb fed7 	bl	80005b0 <__aeabi_dmul>
 8014802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014806:	f7ec f959 	bl	8000abc <__aeabi_dcmpge>
 801480a:	9c08      	ldr	r4, [sp, #32]
 801480c:	4626      	mov	r6, r4
 801480e:	2800      	cmp	r0, #0
 8014810:	f040 8248 	bne.w	8014ca4 <_dtoa_r+0x95c>
 8014814:	2331      	movs	r3, #49	; 0x31
 8014816:	9f03      	ldr	r7, [sp, #12]
 8014818:	f10a 0a01 	add.w	sl, sl, #1
 801481c:	f807 3b01 	strb.w	r3, [r7], #1
 8014820:	e244      	b.n	8014cac <_dtoa_r+0x964>
 8014822:	07e2      	lsls	r2, r4, #31
 8014824:	d505      	bpl.n	8014832 <_dtoa_r+0x4ea>
 8014826:	e9d6 2300 	ldrd	r2, r3, [r6]
 801482a:	f7eb fec1 	bl	80005b0 <__aeabi_dmul>
 801482e:	2301      	movs	r3, #1
 8014830:	3701      	adds	r7, #1
 8014832:	1064      	asrs	r4, r4, #1
 8014834:	3608      	adds	r6, #8
 8014836:	e76d      	b.n	8014714 <_dtoa_r+0x3cc>
 8014838:	2702      	movs	r7, #2
 801483a:	e770      	b.n	801471e <_dtoa_r+0x3d6>
 801483c:	46d0      	mov	r8, sl
 801483e:	9c08      	ldr	r4, [sp, #32]
 8014840:	e78f      	b.n	8014762 <_dtoa_r+0x41a>
 8014842:	9903      	ldr	r1, [sp, #12]
 8014844:	4b29      	ldr	r3, [pc, #164]	; (80148ec <_dtoa_r+0x5a4>)
 8014846:	4421      	add	r1, r4
 8014848:	9112      	str	r1, [sp, #72]	; 0x48
 801484a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801484c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014850:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8014854:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014858:	2900      	cmp	r1, #0
 801485a:	d055      	beq.n	8014908 <_dtoa_r+0x5c0>
 801485c:	2000      	movs	r0, #0
 801485e:	4929      	ldr	r1, [pc, #164]	; (8014904 <_dtoa_r+0x5bc>)
 8014860:	f7eb ffd0 	bl	8000804 <__aeabi_ddiv>
 8014864:	463b      	mov	r3, r7
 8014866:	4632      	mov	r2, r6
 8014868:	f7eb fcea 	bl	8000240 <__aeabi_dsub>
 801486c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014870:	9f03      	ldr	r7, [sp, #12]
 8014872:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014876:	f7ec f94b 	bl	8000b10 <__aeabi_d2iz>
 801487a:	4604      	mov	r4, r0
 801487c:	f7eb fe2e 	bl	80004dc <__aeabi_i2d>
 8014880:	4602      	mov	r2, r0
 8014882:	460b      	mov	r3, r1
 8014884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014888:	f7eb fcda 	bl	8000240 <__aeabi_dsub>
 801488c:	4602      	mov	r2, r0
 801488e:	460b      	mov	r3, r1
 8014890:	3430      	adds	r4, #48	; 0x30
 8014892:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014896:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801489a:	f807 4b01 	strb.w	r4, [r7], #1
 801489e:	f7ec f8f9 	bl	8000a94 <__aeabi_dcmplt>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d174      	bne.n	8014990 <_dtoa_r+0x648>
 80148a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148aa:	2000      	movs	r0, #0
 80148ac:	4911      	ldr	r1, [pc, #68]	; (80148f4 <_dtoa_r+0x5ac>)
 80148ae:	f7eb fcc7 	bl	8000240 <__aeabi_dsub>
 80148b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80148b6:	f7ec f8ed 	bl	8000a94 <__aeabi_dcmplt>
 80148ba:	2800      	cmp	r0, #0
 80148bc:	f040 80b7 	bne.w	8014a2e <_dtoa_r+0x6e6>
 80148c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80148c2:	429f      	cmp	r7, r3
 80148c4:	f43f af7a 	beq.w	80147bc <_dtoa_r+0x474>
 80148c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80148cc:	2200      	movs	r2, #0
 80148ce:	4b0a      	ldr	r3, [pc, #40]	; (80148f8 <_dtoa_r+0x5b0>)
 80148d0:	f7eb fe6e 	bl	80005b0 <__aeabi_dmul>
 80148d4:	2200      	movs	r2, #0
 80148d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80148da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80148de:	4b06      	ldr	r3, [pc, #24]	; (80148f8 <_dtoa_r+0x5b0>)
 80148e0:	f7eb fe66 	bl	80005b0 <__aeabi_dmul>
 80148e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80148e8:	e7c3      	b.n	8014872 <_dtoa_r+0x52a>
 80148ea:	bf00      	nop
 80148ec:	0802fd20 	.word	0x0802fd20
 80148f0:	0802fcf8 	.word	0x0802fcf8
 80148f4:	3ff00000 	.word	0x3ff00000
 80148f8:	40240000 	.word	0x40240000
 80148fc:	401c0000 	.word	0x401c0000
 8014900:	40140000 	.word	0x40140000
 8014904:	3fe00000 	.word	0x3fe00000
 8014908:	4630      	mov	r0, r6
 801490a:	4639      	mov	r1, r7
 801490c:	f7eb fe50 	bl	80005b0 <__aeabi_dmul>
 8014910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014912:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014916:	9c03      	ldr	r4, [sp, #12]
 8014918:	9314      	str	r3, [sp, #80]	; 0x50
 801491a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801491e:	f7ec f8f7 	bl	8000b10 <__aeabi_d2iz>
 8014922:	9015      	str	r0, [sp, #84]	; 0x54
 8014924:	f7eb fdda 	bl	80004dc <__aeabi_i2d>
 8014928:	4602      	mov	r2, r0
 801492a:	460b      	mov	r3, r1
 801492c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014930:	f7eb fc86 	bl	8000240 <__aeabi_dsub>
 8014934:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014936:	4606      	mov	r6, r0
 8014938:	3330      	adds	r3, #48	; 0x30
 801493a:	f804 3b01 	strb.w	r3, [r4], #1
 801493e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014940:	460f      	mov	r7, r1
 8014942:	429c      	cmp	r4, r3
 8014944:	f04f 0200 	mov.w	r2, #0
 8014948:	d124      	bne.n	8014994 <_dtoa_r+0x64c>
 801494a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801494e:	4bb0      	ldr	r3, [pc, #704]	; (8014c10 <_dtoa_r+0x8c8>)
 8014950:	f7eb fc78 	bl	8000244 <__adddf3>
 8014954:	4602      	mov	r2, r0
 8014956:	460b      	mov	r3, r1
 8014958:	4630      	mov	r0, r6
 801495a:	4639      	mov	r1, r7
 801495c:	f7ec f8b8 	bl	8000ad0 <__aeabi_dcmpgt>
 8014960:	2800      	cmp	r0, #0
 8014962:	d163      	bne.n	8014a2c <_dtoa_r+0x6e4>
 8014964:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014968:	2000      	movs	r0, #0
 801496a:	49a9      	ldr	r1, [pc, #676]	; (8014c10 <_dtoa_r+0x8c8>)
 801496c:	f7eb fc68 	bl	8000240 <__aeabi_dsub>
 8014970:	4602      	mov	r2, r0
 8014972:	460b      	mov	r3, r1
 8014974:	4630      	mov	r0, r6
 8014976:	4639      	mov	r1, r7
 8014978:	f7ec f88c 	bl	8000a94 <__aeabi_dcmplt>
 801497c:	2800      	cmp	r0, #0
 801497e:	f43f af1d 	beq.w	80147bc <_dtoa_r+0x474>
 8014982:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014984:	1e7b      	subs	r3, r7, #1
 8014986:	9314      	str	r3, [sp, #80]	; 0x50
 8014988:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801498c:	2b30      	cmp	r3, #48	; 0x30
 801498e:	d0f8      	beq.n	8014982 <_dtoa_r+0x63a>
 8014990:	46c2      	mov	sl, r8
 8014992:	e03b      	b.n	8014a0c <_dtoa_r+0x6c4>
 8014994:	4b9f      	ldr	r3, [pc, #636]	; (8014c14 <_dtoa_r+0x8cc>)
 8014996:	f7eb fe0b 	bl	80005b0 <__aeabi_dmul>
 801499a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801499e:	e7bc      	b.n	801491a <_dtoa_r+0x5d2>
 80149a0:	9f03      	ldr	r7, [sp, #12]
 80149a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80149a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149aa:	4640      	mov	r0, r8
 80149ac:	4649      	mov	r1, r9
 80149ae:	f7eb ff29 	bl	8000804 <__aeabi_ddiv>
 80149b2:	f7ec f8ad 	bl	8000b10 <__aeabi_d2iz>
 80149b6:	4604      	mov	r4, r0
 80149b8:	f7eb fd90 	bl	80004dc <__aeabi_i2d>
 80149bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149c0:	f7eb fdf6 	bl	80005b0 <__aeabi_dmul>
 80149c4:	4602      	mov	r2, r0
 80149c6:	460b      	mov	r3, r1
 80149c8:	4640      	mov	r0, r8
 80149ca:	4649      	mov	r1, r9
 80149cc:	f7eb fc38 	bl	8000240 <__aeabi_dsub>
 80149d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80149d4:	f807 6b01 	strb.w	r6, [r7], #1
 80149d8:	9e03      	ldr	r6, [sp, #12]
 80149da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80149de:	1bbe      	subs	r6, r7, r6
 80149e0:	45b4      	cmp	ip, r6
 80149e2:	4602      	mov	r2, r0
 80149e4:	460b      	mov	r3, r1
 80149e6:	d136      	bne.n	8014a56 <_dtoa_r+0x70e>
 80149e8:	f7eb fc2c 	bl	8000244 <__adddf3>
 80149ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149f0:	4680      	mov	r8, r0
 80149f2:	4689      	mov	r9, r1
 80149f4:	f7ec f86c 	bl	8000ad0 <__aeabi_dcmpgt>
 80149f8:	bb58      	cbnz	r0, 8014a52 <_dtoa_r+0x70a>
 80149fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149fe:	4640      	mov	r0, r8
 8014a00:	4649      	mov	r1, r9
 8014a02:	f7ec f83d 	bl	8000a80 <__aeabi_dcmpeq>
 8014a06:	b108      	cbz	r0, 8014a0c <_dtoa_r+0x6c4>
 8014a08:	07e1      	lsls	r1, r4, #31
 8014a0a:	d422      	bmi.n	8014a52 <_dtoa_r+0x70a>
 8014a0c:	4628      	mov	r0, r5
 8014a0e:	4659      	mov	r1, fp
 8014a10:	f000 faf4 	bl	8014ffc <_Bfree>
 8014a14:	2300      	movs	r3, #0
 8014a16:	703b      	strb	r3, [r7, #0]
 8014a18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014a1a:	f10a 0001 	add.w	r0, sl, #1
 8014a1e:	6018      	str	r0, [r3, #0]
 8014a20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	f43f acde 	beq.w	80143e4 <_dtoa_r+0x9c>
 8014a28:	601f      	str	r7, [r3, #0]
 8014a2a:	e4db      	b.n	80143e4 <_dtoa_r+0x9c>
 8014a2c:	4627      	mov	r7, r4
 8014a2e:	463b      	mov	r3, r7
 8014a30:	461f      	mov	r7, r3
 8014a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014a36:	2a39      	cmp	r2, #57	; 0x39
 8014a38:	d107      	bne.n	8014a4a <_dtoa_r+0x702>
 8014a3a:	9a03      	ldr	r2, [sp, #12]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d1f7      	bne.n	8014a30 <_dtoa_r+0x6e8>
 8014a40:	2230      	movs	r2, #48	; 0x30
 8014a42:	9903      	ldr	r1, [sp, #12]
 8014a44:	f108 0801 	add.w	r8, r8, #1
 8014a48:	700a      	strb	r2, [r1, #0]
 8014a4a:	781a      	ldrb	r2, [r3, #0]
 8014a4c:	3201      	adds	r2, #1
 8014a4e:	701a      	strb	r2, [r3, #0]
 8014a50:	e79e      	b.n	8014990 <_dtoa_r+0x648>
 8014a52:	46d0      	mov	r8, sl
 8014a54:	e7eb      	b.n	8014a2e <_dtoa_r+0x6e6>
 8014a56:	2200      	movs	r2, #0
 8014a58:	4b6e      	ldr	r3, [pc, #440]	; (8014c14 <_dtoa_r+0x8cc>)
 8014a5a:	f7eb fda9 	bl	80005b0 <__aeabi_dmul>
 8014a5e:	2200      	movs	r2, #0
 8014a60:	2300      	movs	r3, #0
 8014a62:	4680      	mov	r8, r0
 8014a64:	4689      	mov	r9, r1
 8014a66:	f7ec f80b 	bl	8000a80 <__aeabi_dcmpeq>
 8014a6a:	2800      	cmp	r0, #0
 8014a6c:	d09b      	beq.n	80149a6 <_dtoa_r+0x65e>
 8014a6e:	e7cd      	b.n	8014a0c <_dtoa_r+0x6c4>
 8014a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014a72:	2a00      	cmp	r2, #0
 8014a74:	f000 80d0 	beq.w	8014c18 <_dtoa_r+0x8d0>
 8014a78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014a7a:	2a01      	cmp	r2, #1
 8014a7c:	f300 80ae 	bgt.w	8014bdc <_dtoa_r+0x894>
 8014a80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014a82:	2a00      	cmp	r2, #0
 8014a84:	f000 80a6 	beq.w	8014bd4 <_dtoa_r+0x88c>
 8014a88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014a8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014a8e:	9f06      	ldr	r7, [sp, #24]
 8014a90:	9a06      	ldr	r2, [sp, #24]
 8014a92:	2101      	movs	r1, #1
 8014a94:	441a      	add	r2, r3
 8014a96:	9206      	str	r2, [sp, #24]
 8014a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	441a      	add	r2, r3
 8014a9e:	9209      	str	r2, [sp, #36]	; 0x24
 8014aa0:	f000 fb62 	bl	8015168 <__i2b>
 8014aa4:	4606      	mov	r6, r0
 8014aa6:	2f00      	cmp	r7, #0
 8014aa8:	dd0c      	ble.n	8014ac4 <_dtoa_r+0x77c>
 8014aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	dd09      	ble.n	8014ac4 <_dtoa_r+0x77c>
 8014ab0:	42bb      	cmp	r3, r7
 8014ab2:	bfa8      	it	ge
 8014ab4:	463b      	movge	r3, r7
 8014ab6:	9a06      	ldr	r2, [sp, #24]
 8014ab8:	1aff      	subs	r7, r7, r3
 8014aba:	1ad2      	subs	r2, r2, r3
 8014abc:	9206      	str	r2, [sp, #24]
 8014abe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ac0:	1ad3      	subs	r3, r2, r3
 8014ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8014ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ac6:	b1f3      	cbz	r3, 8014b06 <_dtoa_r+0x7be>
 8014ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	f000 80a8 	beq.w	8014c20 <_dtoa_r+0x8d8>
 8014ad0:	2c00      	cmp	r4, #0
 8014ad2:	dd10      	ble.n	8014af6 <_dtoa_r+0x7ae>
 8014ad4:	4631      	mov	r1, r6
 8014ad6:	4622      	mov	r2, r4
 8014ad8:	4628      	mov	r0, r5
 8014ada:	f000 fc03 	bl	80152e4 <__pow5mult>
 8014ade:	465a      	mov	r2, fp
 8014ae0:	4601      	mov	r1, r0
 8014ae2:	4606      	mov	r6, r0
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	f000 fb55 	bl	8015194 <__multiply>
 8014aea:	4680      	mov	r8, r0
 8014aec:	4659      	mov	r1, fp
 8014aee:	4628      	mov	r0, r5
 8014af0:	f000 fa84 	bl	8014ffc <_Bfree>
 8014af4:	46c3      	mov	fp, r8
 8014af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014af8:	1b1a      	subs	r2, r3, r4
 8014afa:	d004      	beq.n	8014b06 <_dtoa_r+0x7be>
 8014afc:	4659      	mov	r1, fp
 8014afe:	4628      	mov	r0, r5
 8014b00:	f000 fbf0 	bl	80152e4 <__pow5mult>
 8014b04:	4683      	mov	fp, r0
 8014b06:	2101      	movs	r1, #1
 8014b08:	4628      	mov	r0, r5
 8014b0a:	f000 fb2d 	bl	8015168 <__i2b>
 8014b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b10:	4604      	mov	r4, r0
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	f340 8086 	ble.w	8014c24 <_dtoa_r+0x8dc>
 8014b18:	461a      	mov	r2, r3
 8014b1a:	4601      	mov	r1, r0
 8014b1c:	4628      	mov	r0, r5
 8014b1e:	f000 fbe1 	bl	80152e4 <__pow5mult>
 8014b22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014b24:	4604      	mov	r4, r0
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	dd7f      	ble.n	8014c2a <_dtoa_r+0x8e2>
 8014b2a:	f04f 0800 	mov.w	r8, #0
 8014b2e:	6923      	ldr	r3, [r4, #16]
 8014b30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014b34:	6918      	ldr	r0, [r3, #16]
 8014b36:	f000 fac9 	bl	80150cc <__hi0bits>
 8014b3a:	f1c0 0020 	rsb	r0, r0, #32
 8014b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b40:	4418      	add	r0, r3
 8014b42:	f010 001f 	ands.w	r0, r0, #31
 8014b46:	f000 8092 	beq.w	8014c6e <_dtoa_r+0x926>
 8014b4a:	f1c0 0320 	rsb	r3, r0, #32
 8014b4e:	2b04      	cmp	r3, #4
 8014b50:	f340 808a 	ble.w	8014c68 <_dtoa_r+0x920>
 8014b54:	f1c0 001c 	rsb	r0, r0, #28
 8014b58:	9b06      	ldr	r3, [sp, #24]
 8014b5a:	4407      	add	r7, r0
 8014b5c:	4403      	add	r3, r0
 8014b5e:	9306      	str	r3, [sp, #24]
 8014b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b62:	4403      	add	r3, r0
 8014b64:	9309      	str	r3, [sp, #36]	; 0x24
 8014b66:	9b06      	ldr	r3, [sp, #24]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	dd05      	ble.n	8014b78 <_dtoa_r+0x830>
 8014b6c:	4659      	mov	r1, fp
 8014b6e:	461a      	mov	r2, r3
 8014b70:	4628      	mov	r0, r5
 8014b72:	f000 fc11 	bl	8015398 <__lshift>
 8014b76:	4683      	mov	fp, r0
 8014b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	dd05      	ble.n	8014b8a <_dtoa_r+0x842>
 8014b7e:	4621      	mov	r1, r4
 8014b80:	461a      	mov	r2, r3
 8014b82:	4628      	mov	r0, r5
 8014b84:	f000 fc08 	bl	8015398 <__lshift>
 8014b88:	4604      	mov	r4, r0
 8014b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d070      	beq.n	8014c72 <_dtoa_r+0x92a>
 8014b90:	4621      	mov	r1, r4
 8014b92:	4658      	mov	r0, fp
 8014b94:	f000 fc70 	bl	8015478 <__mcmp>
 8014b98:	2800      	cmp	r0, #0
 8014b9a:	da6a      	bge.n	8014c72 <_dtoa_r+0x92a>
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	4659      	mov	r1, fp
 8014ba0:	220a      	movs	r2, #10
 8014ba2:	4628      	mov	r0, r5
 8014ba4:	f000 fa4c 	bl	8015040 <__multadd>
 8014ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014baa:	4683      	mov	fp, r0
 8014bac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	f000 8194 	beq.w	8014ede <_dtoa_r+0xb96>
 8014bb6:	4631      	mov	r1, r6
 8014bb8:	2300      	movs	r3, #0
 8014bba:	220a      	movs	r2, #10
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	f000 fa3f 	bl	8015040 <__multadd>
 8014bc2:	f1b9 0f00 	cmp.w	r9, #0
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	f300 8093 	bgt.w	8014cf2 <_dtoa_r+0x9aa>
 8014bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014bce:	2b02      	cmp	r3, #2
 8014bd0:	dc57      	bgt.n	8014c82 <_dtoa_r+0x93a>
 8014bd2:	e08e      	b.n	8014cf2 <_dtoa_r+0x9aa>
 8014bd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014bd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014bda:	e757      	b.n	8014a8c <_dtoa_r+0x744>
 8014bdc:	9b08      	ldr	r3, [sp, #32]
 8014bde:	1e5c      	subs	r4, r3, #1
 8014be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014be2:	42a3      	cmp	r3, r4
 8014be4:	bfb7      	itett	lt
 8014be6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014be8:	1b1c      	subge	r4, r3, r4
 8014bea:	1ae2      	sublt	r2, r4, r3
 8014bec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014bee:	bfbe      	ittt	lt
 8014bf0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014bf2:	189b      	addlt	r3, r3, r2
 8014bf4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014bf6:	9b08      	ldr	r3, [sp, #32]
 8014bf8:	bfb8      	it	lt
 8014bfa:	2400      	movlt	r4, #0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	bfbb      	ittet	lt
 8014c00:	9b06      	ldrlt	r3, [sp, #24]
 8014c02:	9a08      	ldrlt	r2, [sp, #32]
 8014c04:	9f06      	ldrge	r7, [sp, #24]
 8014c06:	1a9f      	sublt	r7, r3, r2
 8014c08:	bfac      	ite	ge
 8014c0a:	9b08      	ldrge	r3, [sp, #32]
 8014c0c:	2300      	movlt	r3, #0
 8014c0e:	e73f      	b.n	8014a90 <_dtoa_r+0x748>
 8014c10:	3fe00000 	.word	0x3fe00000
 8014c14:	40240000 	.word	0x40240000
 8014c18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014c1a:	9f06      	ldr	r7, [sp, #24]
 8014c1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8014c1e:	e742      	b.n	8014aa6 <_dtoa_r+0x75e>
 8014c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c22:	e76b      	b.n	8014afc <_dtoa_r+0x7b4>
 8014c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014c26:	2b01      	cmp	r3, #1
 8014c28:	dc19      	bgt.n	8014c5e <_dtoa_r+0x916>
 8014c2a:	9b04      	ldr	r3, [sp, #16]
 8014c2c:	b9bb      	cbnz	r3, 8014c5e <_dtoa_r+0x916>
 8014c2e:	9b05      	ldr	r3, [sp, #20]
 8014c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c34:	b99b      	cbnz	r3, 8014c5e <_dtoa_r+0x916>
 8014c36:	9b05      	ldr	r3, [sp, #20]
 8014c38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c3c:	0d1b      	lsrs	r3, r3, #20
 8014c3e:	051b      	lsls	r3, r3, #20
 8014c40:	b183      	cbz	r3, 8014c64 <_dtoa_r+0x91c>
 8014c42:	f04f 0801 	mov.w	r8, #1
 8014c46:	9b06      	ldr	r3, [sp, #24]
 8014c48:	3301      	adds	r3, #1
 8014c4a:	9306      	str	r3, [sp, #24]
 8014c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c4e:	3301      	adds	r3, #1
 8014c50:	9309      	str	r3, [sp, #36]	; 0x24
 8014c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	f47f af6a 	bne.w	8014b2e <_dtoa_r+0x7e6>
 8014c5a:	2001      	movs	r0, #1
 8014c5c:	e76f      	b.n	8014b3e <_dtoa_r+0x7f6>
 8014c5e:	f04f 0800 	mov.w	r8, #0
 8014c62:	e7f6      	b.n	8014c52 <_dtoa_r+0x90a>
 8014c64:	4698      	mov	r8, r3
 8014c66:	e7f4      	b.n	8014c52 <_dtoa_r+0x90a>
 8014c68:	f43f af7d 	beq.w	8014b66 <_dtoa_r+0x81e>
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	301c      	adds	r0, #28
 8014c70:	e772      	b.n	8014b58 <_dtoa_r+0x810>
 8014c72:	9b08      	ldr	r3, [sp, #32]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dc36      	bgt.n	8014ce6 <_dtoa_r+0x99e>
 8014c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014c7a:	2b02      	cmp	r3, #2
 8014c7c:	dd33      	ble.n	8014ce6 <_dtoa_r+0x99e>
 8014c7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014c82:	f1b9 0f00 	cmp.w	r9, #0
 8014c86:	d10d      	bne.n	8014ca4 <_dtoa_r+0x95c>
 8014c88:	4621      	mov	r1, r4
 8014c8a:	464b      	mov	r3, r9
 8014c8c:	2205      	movs	r2, #5
 8014c8e:	4628      	mov	r0, r5
 8014c90:	f000 f9d6 	bl	8015040 <__multadd>
 8014c94:	4601      	mov	r1, r0
 8014c96:	4604      	mov	r4, r0
 8014c98:	4658      	mov	r0, fp
 8014c9a:	f000 fbed 	bl	8015478 <__mcmp>
 8014c9e:	2800      	cmp	r0, #0
 8014ca0:	f73f adb8 	bgt.w	8014814 <_dtoa_r+0x4cc>
 8014ca4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014ca6:	9f03      	ldr	r7, [sp, #12]
 8014ca8:	ea6f 0a03 	mvn.w	sl, r3
 8014cac:	f04f 0800 	mov.w	r8, #0
 8014cb0:	4621      	mov	r1, r4
 8014cb2:	4628      	mov	r0, r5
 8014cb4:	f000 f9a2 	bl	8014ffc <_Bfree>
 8014cb8:	2e00      	cmp	r6, #0
 8014cba:	f43f aea7 	beq.w	8014a0c <_dtoa_r+0x6c4>
 8014cbe:	f1b8 0f00 	cmp.w	r8, #0
 8014cc2:	d005      	beq.n	8014cd0 <_dtoa_r+0x988>
 8014cc4:	45b0      	cmp	r8, r6
 8014cc6:	d003      	beq.n	8014cd0 <_dtoa_r+0x988>
 8014cc8:	4641      	mov	r1, r8
 8014cca:	4628      	mov	r0, r5
 8014ccc:	f000 f996 	bl	8014ffc <_Bfree>
 8014cd0:	4631      	mov	r1, r6
 8014cd2:	4628      	mov	r0, r5
 8014cd4:	f000 f992 	bl	8014ffc <_Bfree>
 8014cd8:	e698      	b.n	8014a0c <_dtoa_r+0x6c4>
 8014cda:	2400      	movs	r4, #0
 8014cdc:	4626      	mov	r6, r4
 8014cde:	e7e1      	b.n	8014ca4 <_dtoa_r+0x95c>
 8014ce0:	46c2      	mov	sl, r8
 8014ce2:	4626      	mov	r6, r4
 8014ce4:	e596      	b.n	8014814 <_dtoa_r+0x4cc>
 8014ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	f000 80fd 	beq.w	8014eec <_dtoa_r+0xba4>
 8014cf2:	2f00      	cmp	r7, #0
 8014cf4:	dd05      	ble.n	8014d02 <_dtoa_r+0x9ba>
 8014cf6:	4631      	mov	r1, r6
 8014cf8:	463a      	mov	r2, r7
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	f000 fb4c 	bl	8015398 <__lshift>
 8014d00:	4606      	mov	r6, r0
 8014d02:	f1b8 0f00 	cmp.w	r8, #0
 8014d06:	d05c      	beq.n	8014dc2 <_dtoa_r+0xa7a>
 8014d08:	4628      	mov	r0, r5
 8014d0a:	6871      	ldr	r1, [r6, #4]
 8014d0c:	f000 f936 	bl	8014f7c <_Balloc>
 8014d10:	4607      	mov	r7, r0
 8014d12:	b928      	cbnz	r0, 8014d20 <_dtoa_r+0x9d8>
 8014d14:	4602      	mov	r2, r0
 8014d16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014d1a:	4b7f      	ldr	r3, [pc, #508]	; (8014f18 <_dtoa_r+0xbd0>)
 8014d1c:	f7ff bb28 	b.w	8014370 <_dtoa_r+0x28>
 8014d20:	6932      	ldr	r2, [r6, #16]
 8014d22:	f106 010c 	add.w	r1, r6, #12
 8014d26:	3202      	adds	r2, #2
 8014d28:	0092      	lsls	r2, r2, #2
 8014d2a:	300c      	adds	r0, #12
 8014d2c:	f000 f90c 	bl	8014f48 <memcpy>
 8014d30:	2201      	movs	r2, #1
 8014d32:	4639      	mov	r1, r7
 8014d34:	4628      	mov	r0, r5
 8014d36:	f000 fb2f 	bl	8015398 <__lshift>
 8014d3a:	46b0      	mov	r8, r6
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	9b03      	ldr	r3, [sp, #12]
 8014d40:	3301      	adds	r3, #1
 8014d42:	9308      	str	r3, [sp, #32]
 8014d44:	9b03      	ldr	r3, [sp, #12]
 8014d46:	444b      	add	r3, r9
 8014d48:	930a      	str	r3, [sp, #40]	; 0x28
 8014d4a:	9b04      	ldr	r3, [sp, #16]
 8014d4c:	f003 0301 	and.w	r3, r3, #1
 8014d50:	9309      	str	r3, [sp, #36]	; 0x24
 8014d52:	9b08      	ldr	r3, [sp, #32]
 8014d54:	4621      	mov	r1, r4
 8014d56:	3b01      	subs	r3, #1
 8014d58:	4658      	mov	r0, fp
 8014d5a:	9304      	str	r3, [sp, #16]
 8014d5c:	f7ff fa68 	bl	8014230 <quorem>
 8014d60:	4603      	mov	r3, r0
 8014d62:	4641      	mov	r1, r8
 8014d64:	3330      	adds	r3, #48	; 0x30
 8014d66:	9006      	str	r0, [sp, #24]
 8014d68:	4658      	mov	r0, fp
 8014d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d6c:	f000 fb84 	bl	8015478 <__mcmp>
 8014d70:	4632      	mov	r2, r6
 8014d72:	4681      	mov	r9, r0
 8014d74:	4621      	mov	r1, r4
 8014d76:	4628      	mov	r0, r5
 8014d78:	f000 fb9a 	bl	80154b0 <__mdiff>
 8014d7c:	68c2      	ldr	r2, [r0, #12]
 8014d7e:	4607      	mov	r7, r0
 8014d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d82:	bb02      	cbnz	r2, 8014dc6 <_dtoa_r+0xa7e>
 8014d84:	4601      	mov	r1, r0
 8014d86:	4658      	mov	r0, fp
 8014d88:	f000 fb76 	bl	8015478 <__mcmp>
 8014d8c:	4602      	mov	r2, r0
 8014d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d90:	4639      	mov	r1, r7
 8014d92:	4628      	mov	r0, r5
 8014d94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8014d98:	f000 f930 	bl	8014ffc <_Bfree>
 8014d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014da0:	9f08      	ldr	r7, [sp, #32]
 8014da2:	ea43 0102 	orr.w	r1, r3, r2
 8014da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014da8:	430b      	orrs	r3, r1
 8014daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dac:	d10d      	bne.n	8014dca <_dtoa_r+0xa82>
 8014dae:	2b39      	cmp	r3, #57	; 0x39
 8014db0:	d029      	beq.n	8014e06 <_dtoa_r+0xabe>
 8014db2:	f1b9 0f00 	cmp.w	r9, #0
 8014db6:	dd01      	ble.n	8014dbc <_dtoa_r+0xa74>
 8014db8:	9b06      	ldr	r3, [sp, #24]
 8014dba:	3331      	adds	r3, #49	; 0x31
 8014dbc:	9a04      	ldr	r2, [sp, #16]
 8014dbe:	7013      	strb	r3, [r2, #0]
 8014dc0:	e776      	b.n	8014cb0 <_dtoa_r+0x968>
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	e7b9      	b.n	8014d3a <_dtoa_r+0x9f2>
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	e7e2      	b.n	8014d90 <_dtoa_r+0xa48>
 8014dca:	f1b9 0f00 	cmp.w	r9, #0
 8014dce:	db06      	blt.n	8014dde <_dtoa_r+0xa96>
 8014dd0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014dd2:	ea41 0909 	orr.w	r9, r1, r9
 8014dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dd8:	ea59 0101 	orrs.w	r1, r9, r1
 8014ddc:	d120      	bne.n	8014e20 <_dtoa_r+0xad8>
 8014dde:	2a00      	cmp	r2, #0
 8014de0:	ddec      	ble.n	8014dbc <_dtoa_r+0xa74>
 8014de2:	4659      	mov	r1, fp
 8014de4:	2201      	movs	r2, #1
 8014de6:	4628      	mov	r0, r5
 8014de8:	9308      	str	r3, [sp, #32]
 8014dea:	f000 fad5 	bl	8015398 <__lshift>
 8014dee:	4621      	mov	r1, r4
 8014df0:	4683      	mov	fp, r0
 8014df2:	f000 fb41 	bl	8015478 <__mcmp>
 8014df6:	2800      	cmp	r0, #0
 8014df8:	9b08      	ldr	r3, [sp, #32]
 8014dfa:	dc02      	bgt.n	8014e02 <_dtoa_r+0xaba>
 8014dfc:	d1de      	bne.n	8014dbc <_dtoa_r+0xa74>
 8014dfe:	07da      	lsls	r2, r3, #31
 8014e00:	d5dc      	bpl.n	8014dbc <_dtoa_r+0xa74>
 8014e02:	2b39      	cmp	r3, #57	; 0x39
 8014e04:	d1d8      	bne.n	8014db8 <_dtoa_r+0xa70>
 8014e06:	2339      	movs	r3, #57	; 0x39
 8014e08:	9a04      	ldr	r2, [sp, #16]
 8014e0a:	7013      	strb	r3, [r2, #0]
 8014e0c:	463b      	mov	r3, r7
 8014e0e:	461f      	mov	r7, r3
 8014e10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8014e14:	3b01      	subs	r3, #1
 8014e16:	2a39      	cmp	r2, #57	; 0x39
 8014e18:	d050      	beq.n	8014ebc <_dtoa_r+0xb74>
 8014e1a:	3201      	adds	r2, #1
 8014e1c:	701a      	strb	r2, [r3, #0]
 8014e1e:	e747      	b.n	8014cb0 <_dtoa_r+0x968>
 8014e20:	2a00      	cmp	r2, #0
 8014e22:	dd03      	ble.n	8014e2c <_dtoa_r+0xae4>
 8014e24:	2b39      	cmp	r3, #57	; 0x39
 8014e26:	d0ee      	beq.n	8014e06 <_dtoa_r+0xabe>
 8014e28:	3301      	adds	r3, #1
 8014e2a:	e7c7      	b.n	8014dbc <_dtoa_r+0xa74>
 8014e2c:	9a08      	ldr	r2, [sp, #32]
 8014e2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014e30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014e34:	428a      	cmp	r2, r1
 8014e36:	d02a      	beq.n	8014e8e <_dtoa_r+0xb46>
 8014e38:	4659      	mov	r1, fp
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	220a      	movs	r2, #10
 8014e3e:	4628      	mov	r0, r5
 8014e40:	f000 f8fe 	bl	8015040 <__multadd>
 8014e44:	45b0      	cmp	r8, r6
 8014e46:	4683      	mov	fp, r0
 8014e48:	f04f 0300 	mov.w	r3, #0
 8014e4c:	f04f 020a 	mov.w	r2, #10
 8014e50:	4641      	mov	r1, r8
 8014e52:	4628      	mov	r0, r5
 8014e54:	d107      	bne.n	8014e66 <_dtoa_r+0xb1e>
 8014e56:	f000 f8f3 	bl	8015040 <__multadd>
 8014e5a:	4680      	mov	r8, r0
 8014e5c:	4606      	mov	r6, r0
 8014e5e:	9b08      	ldr	r3, [sp, #32]
 8014e60:	3301      	adds	r3, #1
 8014e62:	9308      	str	r3, [sp, #32]
 8014e64:	e775      	b.n	8014d52 <_dtoa_r+0xa0a>
 8014e66:	f000 f8eb 	bl	8015040 <__multadd>
 8014e6a:	4631      	mov	r1, r6
 8014e6c:	4680      	mov	r8, r0
 8014e6e:	2300      	movs	r3, #0
 8014e70:	220a      	movs	r2, #10
 8014e72:	4628      	mov	r0, r5
 8014e74:	f000 f8e4 	bl	8015040 <__multadd>
 8014e78:	4606      	mov	r6, r0
 8014e7a:	e7f0      	b.n	8014e5e <_dtoa_r+0xb16>
 8014e7c:	f1b9 0f00 	cmp.w	r9, #0
 8014e80:	bfcc      	ite	gt
 8014e82:	464f      	movgt	r7, r9
 8014e84:	2701      	movle	r7, #1
 8014e86:	f04f 0800 	mov.w	r8, #0
 8014e8a:	9a03      	ldr	r2, [sp, #12]
 8014e8c:	4417      	add	r7, r2
 8014e8e:	4659      	mov	r1, fp
 8014e90:	2201      	movs	r2, #1
 8014e92:	4628      	mov	r0, r5
 8014e94:	9308      	str	r3, [sp, #32]
 8014e96:	f000 fa7f 	bl	8015398 <__lshift>
 8014e9a:	4621      	mov	r1, r4
 8014e9c:	4683      	mov	fp, r0
 8014e9e:	f000 faeb 	bl	8015478 <__mcmp>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	dcb2      	bgt.n	8014e0c <_dtoa_r+0xac4>
 8014ea6:	d102      	bne.n	8014eae <_dtoa_r+0xb66>
 8014ea8:	9b08      	ldr	r3, [sp, #32]
 8014eaa:	07db      	lsls	r3, r3, #31
 8014eac:	d4ae      	bmi.n	8014e0c <_dtoa_r+0xac4>
 8014eae:	463b      	mov	r3, r7
 8014eb0:	461f      	mov	r7, r3
 8014eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014eb6:	2a30      	cmp	r2, #48	; 0x30
 8014eb8:	d0fa      	beq.n	8014eb0 <_dtoa_r+0xb68>
 8014eba:	e6f9      	b.n	8014cb0 <_dtoa_r+0x968>
 8014ebc:	9a03      	ldr	r2, [sp, #12]
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d1a5      	bne.n	8014e0e <_dtoa_r+0xac6>
 8014ec2:	2331      	movs	r3, #49	; 0x31
 8014ec4:	f10a 0a01 	add.w	sl, sl, #1
 8014ec8:	e779      	b.n	8014dbe <_dtoa_r+0xa76>
 8014eca:	4b14      	ldr	r3, [pc, #80]	; (8014f1c <_dtoa_r+0xbd4>)
 8014ecc:	f7ff baa8 	b.w	8014420 <_dtoa_r+0xd8>
 8014ed0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	f47f aa81 	bne.w	80143da <_dtoa_r+0x92>
 8014ed8:	4b11      	ldr	r3, [pc, #68]	; (8014f20 <_dtoa_r+0xbd8>)
 8014eda:	f7ff baa1 	b.w	8014420 <_dtoa_r+0xd8>
 8014ede:	f1b9 0f00 	cmp.w	r9, #0
 8014ee2:	dc03      	bgt.n	8014eec <_dtoa_r+0xba4>
 8014ee4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014ee6:	2b02      	cmp	r3, #2
 8014ee8:	f73f aecb 	bgt.w	8014c82 <_dtoa_r+0x93a>
 8014eec:	9f03      	ldr	r7, [sp, #12]
 8014eee:	4621      	mov	r1, r4
 8014ef0:	4658      	mov	r0, fp
 8014ef2:	f7ff f99d 	bl	8014230 <quorem>
 8014ef6:	9a03      	ldr	r2, [sp, #12]
 8014ef8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014efc:	f807 3b01 	strb.w	r3, [r7], #1
 8014f00:	1aba      	subs	r2, r7, r2
 8014f02:	4591      	cmp	r9, r2
 8014f04:	ddba      	ble.n	8014e7c <_dtoa_r+0xb34>
 8014f06:	4659      	mov	r1, fp
 8014f08:	2300      	movs	r3, #0
 8014f0a:	220a      	movs	r2, #10
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	f000 f897 	bl	8015040 <__multadd>
 8014f12:	4683      	mov	fp, r0
 8014f14:	e7eb      	b.n	8014eee <_dtoa_r+0xba6>
 8014f16:	bf00      	nop
 8014f18:	0802fc8b 	.word	0x0802fc8b
 8014f1c:	0802fbe8 	.word	0x0802fbe8
 8014f20:	0802fc0c 	.word	0x0802fc0c

08014f24 <_localeconv_r>:
 8014f24:	4800      	ldr	r0, [pc, #0]	; (8014f28 <_localeconv_r+0x4>)
 8014f26:	4770      	bx	lr
 8014f28:	200002c8 	.word	0x200002c8

08014f2c <memchr>:
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	b510      	push	{r4, lr}
 8014f30:	b2c9      	uxtb	r1, r1
 8014f32:	4402      	add	r2, r0
 8014f34:	4293      	cmp	r3, r2
 8014f36:	4618      	mov	r0, r3
 8014f38:	d101      	bne.n	8014f3e <memchr+0x12>
 8014f3a:	2000      	movs	r0, #0
 8014f3c:	e003      	b.n	8014f46 <memchr+0x1a>
 8014f3e:	7804      	ldrb	r4, [r0, #0]
 8014f40:	3301      	adds	r3, #1
 8014f42:	428c      	cmp	r4, r1
 8014f44:	d1f6      	bne.n	8014f34 <memchr+0x8>
 8014f46:	bd10      	pop	{r4, pc}

08014f48 <memcpy>:
 8014f48:	440a      	add	r2, r1
 8014f4a:	4291      	cmp	r1, r2
 8014f4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014f50:	d100      	bne.n	8014f54 <memcpy+0xc>
 8014f52:	4770      	bx	lr
 8014f54:	b510      	push	{r4, lr}
 8014f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f5a:	4291      	cmp	r1, r2
 8014f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014f60:	d1f9      	bne.n	8014f56 <memcpy+0xe>
 8014f62:	bd10      	pop	{r4, pc}

08014f64 <__malloc_lock>:
 8014f64:	4801      	ldr	r0, [pc, #4]	; (8014f6c <__malloc_lock+0x8>)
 8014f66:	f000 bd2c 	b.w	80159c2 <__retarget_lock_acquire_recursive>
 8014f6a:	bf00      	nop
 8014f6c:	200016e8 	.word	0x200016e8

08014f70 <__malloc_unlock>:
 8014f70:	4801      	ldr	r0, [pc, #4]	; (8014f78 <__malloc_unlock+0x8>)
 8014f72:	f000 bd27 	b.w	80159c4 <__retarget_lock_release_recursive>
 8014f76:	bf00      	nop
 8014f78:	200016e8 	.word	0x200016e8

08014f7c <_Balloc>:
 8014f7c:	b570      	push	{r4, r5, r6, lr}
 8014f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014f80:	4604      	mov	r4, r0
 8014f82:	460d      	mov	r5, r1
 8014f84:	b976      	cbnz	r6, 8014fa4 <_Balloc+0x28>
 8014f86:	2010      	movs	r0, #16
 8014f88:	f7fe fbb4 	bl	80136f4 <malloc>
 8014f8c:	4602      	mov	r2, r0
 8014f8e:	6260      	str	r0, [r4, #36]	; 0x24
 8014f90:	b920      	cbnz	r0, 8014f9c <_Balloc+0x20>
 8014f92:	2166      	movs	r1, #102	; 0x66
 8014f94:	4b17      	ldr	r3, [pc, #92]	; (8014ff4 <_Balloc+0x78>)
 8014f96:	4818      	ldr	r0, [pc, #96]	; (8014ff8 <_Balloc+0x7c>)
 8014f98:	f000 fce2 	bl	8015960 <__assert_func>
 8014f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014fa0:	6006      	str	r6, [r0, #0]
 8014fa2:	60c6      	str	r6, [r0, #12]
 8014fa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014fa6:	68f3      	ldr	r3, [r6, #12]
 8014fa8:	b183      	cbz	r3, 8014fcc <_Balloc+0x50>
 8014faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fac:	68db      	ldr	r3, [r3, #12]
 8014fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014fb2:	b9b8      	cbnz	r0, 8014fe4 <_Balloc+0x68>
 8014fb4:	2101      	movs	r1, #1
 8014fb6:	fa01 f605 	lsl.w	r6, r1, r5
 8014fba:	1d72      	adds	r2, r6, #5
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	0092      	lsls	r2, r2, #2
 8014fc0:	f000 fb5e 	bl	8015680 <_calloc_r>
 8014fc4:	b160      	cbz	r0, 8014fe0 <_Balloc+0x64>
 8014fc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014fca:	e00e      	b.n	8014fea <_Balloc+0x6e>
 8014fcc:	2221      	movs	r2, #33	; 0x21
 8014fce:	2104      	movs	r1, #4
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	f000 fb55 	bl	8015680 <_calloc_r>
 8014fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fd8:	60f0      	str	r0, [r6, #12]
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d1e4      	bne.n	8014faa <_Balloc+0x2e>
 8014fe0:	2000      	movs	r0, #0
 8014fe2:	bd70      	pop	{r4, r5, r6, pc}
 8014fe4:	6802      	ldr	r2, [r0, #0]
 8014fe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014fea:	2300      	movs	r3, #0
 8014fec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ff0:	e7f7      	b.n	8014fe2 <_Balloc+0x66>
 8014ff2:	bf00      	nop
 8014ff4:	0802fc19 	.word	0x0802fc19
 8014ff8:	0802fc9c 	.word	0x0802fc9c

08014ffc <_Bfree>:
 8014ffc:	b570      	push	{r4, r5, r6, lr}
 8014ffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015000:	4605      	mov	r5, r0
 8015002:	460c      	mov	r4, r1
 8015004:	b976      	cbnz	r6, 8015024 <_Bfree+0x28>
 8015006:	2010      	movs	r0, #16
 8015008:	f7fe fb74 	bl	80136f4 <malloc>
 801500c:	4602      	mov	r2, r0
 801500e:	6268      	str	r0, [r5, #36]	; 0x24
 8015010:	b920      	cbnz	r0, 801501c <_Bfree+0x20>
 8015012:	218a      	movs	r1, #138	; 0x8a
 8015014:	4b08      	ldr	r3, [pc, #32]	; (8015038 <_Bfree+0x3c>)
 8015016:	4809      	ldr	r0, [pc, #36]	; (801503c <_Bfree+0x40>)
 8015018:	f000 fca2 	bl	8015960 <__assert_func>
 801501c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015020:	6006      	str	r6, [r0, #0]
 8015022:	60c6      	str	r6, [r0, #12]
 8015024:	b13c      	cbz	r4, 8015036 <_Bfree+0x3a>
 8015026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015028:	6862      	ldr	r2, [r4, #4]
 801502a:	68db      	ldr	r3, [r3, #12]
 801502c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015030:	6021      	str	r1, [r4, #0]
 8015032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015036:	bd70      	pop	{r4, r5, r6, pc}
 8015038:	0802fc19 	.word	0x0802fc19
 801503c:	0802fc9c 	.word	0x0802fc9c

08015040 <__multadd>:
 8015040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015044:	4607      	mov	r7, r0
 8015046:	460c      	mov	r4, r1
 8015048:	461e      	mov	r6, r3
 801504a:	2000      	movs	r0, #0
 801504c:	690d      	ldr	r5, [r1, #16]
 801504e:	f101 0c14 	add.w	ip, r1, #20
 8015052:	f8dc 3000 	ldr.w	r3, [ip]
 8015056:	3001      	adds	r0, #1
 8015058:	b299      	uxth	r1, r3
 801505a:	fb02 6101 	mla	r1, r2, r1, r6
 801505e:	0c1e      	lsrs	r6, r3, #16
 8015060:	0c0b      	lsrs	r3, r1, #16
 8015062:	fb02 3306 	mla	r3, r2, r6, r3
 8015066:	b289      	uxth	r1, r1
 8015068:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801506c:	4285      	cmp	r5, r0
 801506e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015072:	f84c 1b04 	str.w	r1, [ip], #4
 8015076:	dcec      	bgt.n	8015052 <__multadd+0x12>
 8015078:	b30e      	cbz	r6, 80150be <__multadd+0x7e>
 801507a:	68a3      	ldr	r3, [r4, #8]
 801507c:	42ab      	cmp	r3, r5
 801507e:	dc19      	bgt.n	80150b4 <__multadd+0x74>
 8015080:	6861      	ldr	r1, [r4, #4]
 8015082:	4638      	mov	r0, r7
 8015084:	3101      	adds	r1, #1
 8015086:	f7ff ff79 	bl	8014f7c <_Balloc>
 801508a:	4680      	mov	r8, r0
 801508c:	b928      	cbnz	r0, 801509a <__multadd+0x5a>
 801508e:	4602      	mov	r2, r0
 8015090:	21b5      	movs	r1, #181	; 0xb5
 8015092:	4b0c      	ldr	r3, [pc, #48]	; (80150c4 <__multadd+0x84>)
 8015094:	480c      	ldr	r0, [pc, #48]	; (80150c8 <__multadd+0x88>)
 8015096:	f000 fc63 	bl	8015960 <__assert_func>
 801509a:	6922      	ldr	r2, [r4, #16]
 801509c:	f104 010c 	add.w	r1, r4, #12
 80150a0:	3202      	adds	r2, #2
 80150a2:	0092      	lsls	r2, r2, #2
 80150a4:	300c      	adds	r0, #12
 80150a6:	f7ff ff4f 	bl	8014f48 <memcpy>
 80150aa:	4621      	mov	r1, r4
 80150ac:	4638      	mov	r0, r7
 80150ae:	f7ff ffa5 	bl	8014ffc <_Bfree>
 80150b2:	4644      	mov	r4, r8
 80150b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80150b8:	3501      	adds	r5, #1
 80150ba:	615e      	str	r6, [r3, #20]
 80150bc:	6125      	str	r5, [r4, #16]
 80150be:	4620      	mov	r0, r4
 80150c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150c4:	0802fc8b 	.word	0x0802fc8b
 80150c8:	0802fc9c 	.word	0x0802fc9c

080150cc <__hi0bits>:
 80150cc:	0c02      	lsrs	r2, r0, #16
 80150ce:	0412      	lsls	r2, r2, #16
 80150d0:	4603      	mov	r3, r0
 80150d2:	b9ca      	cbnz	r2, 8015108 <__hi0bits+0x3c>
 80150d4:	0403      	lsls	r3, r0, #16
 80150d6:	2010      	movs	r0, #16
 80150d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80150dc:	bf04      	itt	eq
 80150de:	021b      	lsleq	r3, r3, #8
 80150e0:	3008      	addeq	r0, #8
 80150e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80150e6:	bf04      	itt	eq
 80150e8:	011b      	lsleq	r3, r3, #4
 80150ea:	3004      	addeq	r0, #4
 80150ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80150f0:	bf04      	itt	eq
 80150f2:	009b      	lsleq	r3, r3, #2
 80150f4:	3002      	addeq	r0, #2
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	db05      	blt.n	8015106 <__hi0bits+0x3a>
 80150fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80150fe:	f100 0001 	add.w	r0, r0, #1
 8015102:	bf08      	it	eq
 8015104:	2020      	moveq	r0, #32
 8015106:	4770      	bx	lr
 8015108:	2000      	movs	r0, #0
 801510a:	e7e5      	b.n	80150d8 <__hi0bits+0xc>

0801510c <__lo0bits>:
 801510c:	6803      	ldr	r3, [r0, #0]
 801510e:	4602      	mov	r2, r0
 8015110:	f013 0007 	ands.w	r0, r3, #7
 8015114:	d00b      	beq.n	801512e <__lo0bits+0x22>
 8015116:	07d9      	lsls	r1, r3, #31
 8015118:	d421      	bmi.n	801515e <__lo0bits+0x52>
 801511a:	0798      	lsls	r0, r3, #30
 801511c:	bf49      	itett	mi
 801511e:	085b      	lsrmi	r3, r3, #1
 8015120:	089b      	lsrpl	r3, r3, #2
 8015122:	2001      	movmi	r0, #1
 8015124:	6013      	strmi	r3, [r2, #0]
 8015126:	bf5c      	itt	pl
 8015128:	2002      	movpl	r0, #2
 801512a:	6013      	strpl	r3, [r2, #0]
 801512c:	4770      	bx	lr
 801512e:	b299      	uxth	r1, r3
 8015130:	b909      	cbnz	r1, 8015136 <__lo0bits+0x2a>
 8015132:	2010      	movs	r0, #16
 8015134:	0c1b      	lsrs	r3, r3, #16
 8015136:	b2d9      	uxtb	r1, r3
 8015138:	b909      	cbnz	r1, 801513e <__lo0bits+0x32>
 801513a:	3008      	adds	r0, #8
 801513c:	0a1b      	lsrs	r3, r3, #8
 801513e:	0719      	lsls	r1, r3, #28
 8015140:	bf04      	itt	eq
 8015142:	091b      	lsreq	r3, r3, #4
 8015144:	3004      	addeq	r0, #4
 8015146:	0799      	lsls	r1, r3, #30
 8015148:	bf04      	itt	eq
 801514a:	089b      	lsreq	r3, r3, #2
 801514c:	3002      	addeq	r0, #2
 801514e:	07d9      	lsls	r1, r3, #31
 8015150:	d403      	bmi.n	801515a <__lo0bits+0x4e>
 8015152:	085b      	lsrs	r3, r3, #1
 8015154:	f100 0001 	add.w	r0, r0, #1
 8015158:	d003      	beq.n	8015162 <__lo0bits+0x56>
 801515a:	6013      	str	r3, [r2, #0]
 801515c:	4770      	bx	lr
 801515e:	2000      	movs	r0, #0
 8015160:	4770      	bx	lr
 8015162:	2020      	movs	r0, #32
 8015164:	4770      	bx	lr
	...

08015168 <__i2b>:
 8015168:	b510      	push	{r4, lr}
 801516a:	460c      	mov	r4, r1
 801516c:	2101      	movs	r1, #1
 801516e:	f7ff ff05 	bl	8014f7c <_Balloc>
 8015172:	4602      	mov	r2, r0
 8015174:	b928      	cbnz	r0, 8015182 <__i2b+0x1a>
 8015176:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801517a:	4b04      	ldr	r3, [pc, #16]	; (801518c <__i2b+0x24>)
 801517c:	4804      	ldr	r0, [pc, #16]	; (8015190 <__i2b+0x28>)
 801517e:	f000 fbef 	bl	8015960 <__assert_func>
 8015182:	2301      	movs	r3, #1
 8015184:	6144      	str	r4, [r0, #20]
 8015186:	6103      	str	r3, [r0, #16]
 8015188:	bd10      	pop	{r4, pc}
 801518a:	bf00      	nop
 801518c:	0802fc8b 	.word	0x0802fc8b
 8015190:	0802fc9c 	.word	0x0802fc9c

08015194 <__multiply>:
 8015194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015198:	4691      	mov	r9, r2
 801519a:	690a      	ldr	r2, [r1, #16]
 801519c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80151a0:	460c      	mov	r4, r1
 80151a2:	429a      	cmp	r2, r3
 80151a4:	bfbe      	ittt	lt
 80151a6:	460b      	movlt	r3, r1
 80151a8:	464c      	movlt	r4, r9
 80151aa:	4699      	movlt	r9, r3
 80151ac:	6927      	ldr	r7, [r4, #16]
 80151ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80151b2:	68a3      	ldr	r3, [r4, #8]
 80151b4:	6861      	ldr	r1, [r4, #4]
 80151b6:	eb07 060a 	add.w	r6, r7, sl
 80151ba:	42b3      	cmp	r3, r6
 80151bc:	b085      	sub	sp, #20
 80151be:	bfb8      	it	lt
 80151c0:	3101      	addlt	r1, #1
 80151c2:	f7ff fedb 	bl	8014f7c <_Balloc>
 80151c6:	b930      	cbnz	r0, 80151d6 <__multiply+0x42>
 80151c8:	4602      	mov	r2, r0
 80151ca:	f240 115d 	movw	r1, #349	; 0x15d
 80151ce:	4b43      	ldr	r3, [pc, #268]	; (80152dc <__multiply+0x148>)
 80151d0:	4843      	ldr	r0, [pc, #268]	; (80152e0 <__multiply+0x14c>)
 80151d2:	f000 fbc5 	bl	8015960 <__assert_func>
 80151d6:	f100 0514 	add.w	r5, r0, #20
 80151da:	462b      	mov	r3, r5
 80151dc:	2200      	movs	r2, #0
 80151de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80151e2:	4543      	cmp	r3, r8
 80151e4:	d321      	bcc.n	801522a <__multiply+0x96>
 80151e6:	f104 0314 	add.w	r3, r4, #20
 80151ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80151ee:	f109 0314 	add.w	r3, r9, #20
 80151f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80151f6:	9202      	str	r2, [sp, #8]
 80151f8:	1b3a      	subs	r2, r7, r4
 80151fa:	3a15      	subs	r2, #21
 80151fc:	f022 0203 	bic.w	r2, r2, #3
 8015200:	3204      	adds	r2, #4
 8015202:	f104 0115 	add.w	r1, r4, #21
 8015206:	428f      	cmp	r7, r1
 8015208:	bf38      	it	cc
 801520a:	2204      	movcc	r2, #4
 801520c:	9201      	str	r2, [sp, #4]
 801520e:	9a02      	ldr	r2, [sp, #8]
 8015210:	9303      	str	r3, [sp, #12]
 8015212:	429a      	cmp	r2, r3
 8015214:	d80c      	bhi.n	8015230 <__multiply+0x9c>
 8015216:	2e00      	cmp	r6, #0
 8015218:	dd03      	ble.n	8015222 <__multiply+0x8e>
 801521a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801521e:	2b00      	cmp	r3, #0
 8015220:	d059      	beq.n	80152d6 <__multiply+0x142>
 8015222:	6106      	str	r6, [r0, #16]
 8015224:	b005      	add	sp, #20
 8015226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522a:	f843 2b04 	str.w	r2, [r3], #4
 801522e:	e7d8      	b.n	80151e2 <__multiply+0x4e>
 8015230:	f8b3 a000 	ldrh.w	sl, [r3]
 8015234:	f1ba 0f00 	cmp.w	sl, #0
 8015238:	d023      	beq.n	8015282 <__multiply+0xee>
 801523a:	46a9      	mov	r9, r5
 801523c:	f04f 0c00 	mov.w	ip, #0
 8015240:	f104 0e14 	add.w	lr, r4, #20
 8015244:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015248:	f8d9 1000 	ldr.w	r1, [r9]
 801524c:	fa1f fb82 	uxth.w	fp, r2
 8015250:	b289      	uxth	r1, r1
 8015252:	fb0a 110b 	mla	r1, sl, fp, r1
 8015256:	4461      	add	r1, ip
 8015258:	f8d9 c000 	ldr.w	ip, [r9]
 801525c:	0c12      	lsrs	r2, r2, #16
 801525e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8015262:	fb0a c202 	mla	r2, sl, r2, ip
 8015266:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801526a:	b289      	uxth	r1, r1
 801526c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015270:	4577      	cmp	r7, lr
 8015272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015276:	f849 1b04 	str.w	r1, [r9], #4
 801527a:	d8e3      	bhi.n	8015244 <__multiply+0xb0>
 801527c:	9a01      	ldr	r2, [sp, #4]
 801527e:	f845 c002 	str.w	ip, [r5, r2]
 8015282:	9a03      	ldr	r2, [sp, #12]
 8015284:	3304      	adds	r3, #4
 8015286:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801528a:	f1b9 0f00 	cmp.w	r9, #0
 801528e:	d020      	beq.n	80152d2 <__multiply+0x13e>
 8015290:	46ae      	mov	lr, r5
 8015292:	f04f 0a00 	mov.w	sl, #0
 8015296:	6829      	ldr	r1, [r5, #0]
 8015298:	f104 0c14 	add.w	ip, r4, #20
 801529c:	f8bc b000 	ldrh.w	fp, [ip]
 80152a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80152a4:	b289      	uxth	r1, r1
 80152a6:	fb09 220b 	mla	r2, r9, fp, r2
 80152aa:	4492      	add	sl, r2
 80152ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80152b0:	f84e 1b04 	str.w	r1, [lr], #4
 80152b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80152b8:	f8be 1000 	ldrh.w	r1, [lr]
 80152bc:	0c12      	lsrs	r2, r2, #16
 80152be:	fb09 1102 	mla	r1, r9, r2, r1
 80152c2:	4567      	cmp	r7, ip
 80152c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80152c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80152cc:	d8e6      	bhi.n	801529c <__multiply+0x108>
 80152ce:	9a01      	ldr	r2, [sp, #4]
 80152d0:	50a9      	str	r1, [r5, r2]
 80152d2:	3504      	adds	r5, #4
 80152d4:	e79b      	b.n	801520e <__multiply+0x7a>
 80152d6:	3e01      	subs	r6, #1
 80152d8:	e79d      	b.n	8015216 <__multiply+0x82>
 80152da:	bf00      	nop
 80152dc:	0802fc8b 	.word	0x0802fc8b
 80152e0:	0802fc9c 	.word	0x0802fc9c

080152e4 <__pow5mult>:
 80152e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80152e8:	4615      	mov	r5, r2
 80152ea:	f012 0203 	ands.w	r2, r2, #3
 80152ee:	4606      	mov	r6, r0
 80152f0:	460f      	mov	r7, r1
 80152f2:	d007      	beq.n	8015304 <__pow5mult+0x20>
 80152f4:	4c25      	ldr	r4, [pc, #148]	; (801538c <__pow5mult+0xa8>)
 80152f6:	3a01      	subs	r2, #1
 80152f8:	2300      	movs	r3, #0
 80152fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80152fe:	f7ff fe9f 	bl	8015040 <__multadd>
 8015302:	4607      	mov	r7, r0
 8015304:	10ad      	asrs	r5, r5, #2
 8015306:	d03d      	beq.n	8015384 <__pow5mult+0xa0>
 8015308:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801530a:	b97c      	cbnz	r4, 801532c <__pow5mult+0x48>
 801530c:	2010      	movs	r0, #16
 801530e:	f7fe f9f1 	bl	80136f4 <malloc>
 8015312:	4602      	mov	r2, r0
 8015314:	6270      	str	r0, [r6, #36]	; 0x24
 8015316:	b928      	cbnz	r0, 8015324 <__pow5mult+0x40>
 8015318:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801531c:	4b1c      	ldr	r3, [pc, #112]	; (8015390 <__pow5mult+0xac>)
 801531e:	481d      	ldr	r0, [pc, #116]	; (8015394 <__pow5mult+0xb0>)
 8015320:	f000 fb1e 	bl	8015960 <__assert_func>
 8015324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015328:	6004      	str	r4, [r0, #0]
 801532a:	60c4      	str	r4, [r0, #12]
 801532c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015334:	b94c      	cbnz	r4, 801534a <__pow5mult+0x66>
 8015336:	f240 2171 	movw	r1, #625	; 0x271
 801533a:	4630      	mov	r0, r6
 801533c:	f7ff ff14 	bl	8015168 <__i2b>
 8015340:	2300      	movs	r3, #0
 8015342:	4604      	mov	r4, r0
 8015344:	f8c8 0008 	str.w	r0, [r8, #8]
 8015348:	6003      	str	r3, [r0, #0]
 801534a:	f04f 0900 	mov.w	r9, #0
 801534e:	07eb      	lsls	r3, r5, #31
 8015350:	d50a      	bpl.n	8015368 <__pow5mult+0x84>
 8015352:	4639      	mov	r1, r7
 8015354:	4622      	mov	r2, r4
 8015356:	4630      	mov	r0, r6
 8015358:	f7ff ff1c 	bl	8015194 <__multiply>
 801535c:	4680      	mov	r8, r0
 801535e:	4639      	mov	r1, r7
 8015360:	4630      	mov	r0, r6
 8015362:	f7ff fe4b 	bl	8014ffc <_Bfree>
 8015366:	4647      	mov	r7, r8
 8015368:	106d      	asrs	r5, r5, #1
 801536a:	d00b      	beq.n	8015384 <__pow5mult+0xa0>
 801536c:	6820      	ldr	r0, [r4, #0]
 801536e:	b938      	cbnz	r0, 8015380 <__pow5mult+0x9c>
 8015370:	4622      	mov	r2, r4
 8015372:	4621      	mov	r1, r4
 8015374:	4630      	mov	r0, r6
 8015376:	f7ff ff0d 	bl	8015194 <__multiply>
 801537a:	6020      	str	r0, [r4, #0]
 801537c:	f8c0 9000 	str.w	r9, [r0]
 8015380:	4604      	mov	r4, r0
 8015382:	e7e4      	b.n	801534e <__pow5mult+0x6a>
 8015384:	4638      	mov	r0, r7
 8015386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801538a:	bf00      	nop
 801538c:	0802fde8 	.word	0x0802fde8
 8015390:	0802fc19 	.word	0x0802fc19
 8015394:	0802fc9c 	.word	0x0802fc9c

08015398 <__lshift>:
 8015398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801539c:	460c      	mov	r4, r1
 801539e:	4607      	mov	r7, r0
 80153a0:	4691      	mov	r9, r2
 80153a2:	6923      	ldr	r3, [r4, #16]
 80153a4:	6849      	ldr	r1, [r1, #4]
 80153a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80153aa:	68a3      	ldr	r3, [r4, #8]
 80153ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80153b0:	f108 0601 	add.w	r6, r8, #1
 80153b4:	42b3      	cmp	r3, r6
 80153b6:	db0b      	blt.n	80153d0 <__lshift+0x38>
 80153b8:	4638      	mov	r0, r7
 80153ba:	f7ff fddf 	bl	8014f7c <_Balloc>
 80153be:	4605      	mov	r5, r0
 80153c0:	b948      	cbnz	r0, 80153d6 <__lshift+0x3e>
 80153c2:	4602      	mov	r2, r0
 80153c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80153c8:	4b29      	ldr	r3, [pc, #164]	; (8015470 <__lshift+0xd8>)
 80153ca:	482a      	ldr	r0, [pc, #168]	; (8015474 <__lshift+0xdc>)
 80153cc:	f000 fac8 	bl	8015960 <__assert_func>
 80153d0:	3101      	adds	r1, #1
 80153d2:	005b      	lsls	r3, r3, #1
 80153d4:	e7ee      	b.n	80153b4 <__lshift+0x1c>
 80153d6:	2300      	movs	r3, #0
 80153d8:	f100 0114 	add.w	r1, r0, #20
 80153dc:	f100 0210 	add.w	r2, r0, #16
 80153e0:	4618      	mov	r0, r3
 80153e2:	4553      	cmp	r3, sl
 80153e4:	db37      	blt.n	8015456 <__lshift+0xbe>
 80153e6:	6920      	ldr	r0, [r4, #16]
 80153e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80153ec:	f104 0314 	add.w	r3, r4, #20
 80153f0:	f019 091f 	ands.w	r9, r9, #31
 80153f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80153f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80153fc:	d02f      	beq.n	801545e <__lshift+0xc6>
 80153fe:	468a      	mov	sl, r1
 8015400:	f04f 0c00 	mov.w	ip, #0
 8015404:	f1c9 0e20 	rsb	lr, r9, #32
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	fa02 f209 	lsl.w	r2, r2, r9
 801540e:	ea42 020c 	orr.w	r2, r2, ip
 8015412:	f84a 2b04 	str.w	r2, [sl], #4
 8015416:	f853 2b04 	ldr.w	r2, [r3], #4
 801541a:	4298      	cmp	r0, r3
 801541c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015420:	d8f2      	bhi.n	8015408 <__lshift+0x70>
 8015422:	1b03      	subs	r3, r0, r4
 8015424:	3b15      	subs	r3, #21
 8015426:	f023 0303 	bic.w	r3, r3, #3
 801542a:	3304      	adds	r3, #4
 801542c:	f104 0215 	add.w	r2, r4, #21
 8015430:	4290      	cmp	r0, r2
 8015432:	bf38      	it	cc
 8015434:	2304      	movcc	r3, #4
 8015436:	f841 c003 	str.w	ip, [r1, r3]
 801543a:	f1bc 0f00 	cmp.w	ip, #0
 801543e:	d001      	beq.n	8015444 <__lshift+0xac>
 8015440:	f108 0602 	add.w	r6, r8, #2
 8015444:	3e01      	subs	r6, #1
 8015446:	4638      	mov	r0, r7
 8015448:	4621      	mov	r1, r4
 801544a:	612e      	str	r6, [r5, #16]
 801544c:	f7ff fdd6 	bl	8014ffc <_Bfree>
 8015450:	4628      	mov	r0, r5
 8015452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015456:	f842 0f04 	str.w	r0, [r2, #4]!
 801545a:	3301      	adds	r3, #1
 801545c:	e7c1      	b.n	80153e2 <__lshift+0x4a>
 801545e:	3904      	subs	r1, #4
 8015460:	f853 2b04 	ldr.w	r2, [r3], #4
 8015464:	4298      	cmp	r0, r3
 8015466:	f841 2f04 	str.w	r2, [r1, #4]!
 801546a:	d8f9      	bhi.n	8015460 <__lshift+0xc8>
 801546c:	e7ea      	b.n	8015444 <__lshift+0xac>
 801546e:	bf00      	nop
 8015470:	0802fc8b 	.word	0x0802fc8b
 8015474:	0802fc9c 	.word	0x0802fc9c

08015478 <__mcmp>:
 8015478:	4603      	mov	r3, r0
 801547a:	690a      	ldr	r2, [r1, #16]
 801547c:	6900      	ldr	r0, [r0, #16]
 801547e:	b530      	push	{r4, r5, lr}
 8015480:	1a80      	subs	r0, r0, r2
 8015482:	d10d      	bne.n	80154a0 <__mcmp+0x28>
 8015484:	3314      	adds	r3, #20
 8015486:	3114      	adds	r1, #20
 8015488:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801548c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015490:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015494:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015498:	4295      	cmp	r5, r2
 801549a:	d002      	beq.n	80154a2 <__mcmp+0x2a>
 801549c:	d304      	bcc.n	80154a8 <__mcmp+0x30>
 801549e:	2001      	movs	r0, #1
 80154a0:	bd30      	pop	{r4, r5, pc}
 80154a2:	42a3      	cmp	r3, r4
 80154a4:	d3f4      	bcc.n	8015490 <__mcmp+0x18>
 80154a6:	e7fb      	b.n	80154a0 <__mcmp+0x28>
 80154a8:	f04f 30ff 	mov.w	r0, #4294967295
 80154ac:	e7f8      	b.n	80154a0 <__mcmp+0x28>
	...

080154b0 <__mdiff>:
 80154b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154b4:	460d      	mov	r5, r1
 80154b6:	4607      	mov	r7, r0
 80154b8:	4611      	mov	r1, r2
 80154ba:	4628      	mov	r0, r5
 80154bc:	4614      	mov	r4, r2
 80154be:	f7ff ffdb 	bl	8015478 <__mcmp>
 80154c2:	1e06      	subs	r6, r0, #0
 80154c4:	d111      	bne.n	80154ea <__mdiff+0x3a>
 80154c6:	4631      	mov	r1, r6
 80154c8:	4638      	mov	r0, r7
 80154ca:	f7ff fd57 	bl	8014f7c <_Balloc>
 80154ce:	4602      	mov	r2, r0
 80154d0:	b928      	cbnz	r0, 80154de <__mdiff+0x2e>
 80154d2:	f240 2132 	movw	r1, #562	; 0x232
 80154d6:	4b3a      	ldr	r3, [pc, #232]	; (80155c0 <__mdiff+0x110>)
 80154d8:	483a      	ldr	r0, [pc, #232]	; (80155c4 <__mdiff+0x114>)
 80154da:	f000 fa41 	bl	8015960 <__assert_func>
 80154de:	2301      	movs	r3, #1
 80154e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80154e4:	4610      	mov	r0, r2
 80154e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ea:	bfa4      	itt	ge
 80154ec:	4623      	movge	r3, r4
 80154ee:	462c      	movge	r4, r5
 80154f0:	4638      	mov	r0, r7
 80154f2:	6861      	ldr	r1, [r4, #4]
 80154f4:	bfa6      	itte	ge
 80154f6:	461d      	movge	r5, r3
 80154f8:	2600      	movge	r6, #0
 80154fa:	2601      	movlt	r6, #1
 80154fc:	f7ff fd3e 	bl	8014f7c <_Balloc>
 8015500:	4602      	mov	r2, r0
 8015502:	b918      	cbnz	r0, 801550c <__mdiff+0x5c>
 8015504:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015508:	4b2d      	ldr	r3, [pc, #180]	; (80155c0 <__mdiff+0x110>)
 801550a:	e7e5      	b.n	80154d8 <__mdiff+0x28>
 801550c:	f102 0814 	add.w	r8, r2, #20
 8015510:	46c2      	mov	sl, r8
 8015512:	f04f 0c00 	mov.w	ip, #0
 8015516:	6927      	ldr	r7, [r4, #16]
 8015518:	60c6      	str	r6, [r0, #12]
 801551a:	692e      	ldr	r6, [r5, #16]
 801551c:	f104 0014 	add.w	r0, r4, #20
 8015520:	f105 0914 	add.w	r9, r5, #20
 8015524:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8015528:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801552c:	3410      	adds	r4, #16
 801552e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8015532:	f859 3b04 	ldr.w	r3, [r9], #4
 8015536:	fa1f f18b 	uxth.w	r1, fp
 801553a:	448c      	add	ip, r1
 801553c:	b299      	uxth	r1, r3
 801553e:	0c1b      	lsrs	r3, r3, #16
 8015540:	ebac 0101 	sub.w	r1, ip, r1
 8015544:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015548:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801554c:	b289      	uxth	r1, r1
 801554e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8015552:	454e      	cmp	r6, r9
 8015554:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015558:	f84a 3b04 	str.w	r3, [sl], #4
 801555c:	d8e7      	bhi.n	801552e <__mdiff+0x7e>
 801555e:	1b73      	subs	r3, r6, r5
 8015560:	3b15      	subs	r3, #21
 8015562:	f023 0303 	bic.w	r3, r3, #3
 8015566:	3515      	adds	r5, #21
 8015568:	3304      	adds	r3, #4
 801556a:	42ae      	cmp	r6, r5
 801556c:	bf38      	it	cc
 801556e:	2304      	movcc	r3, #4
 8015570:	4418      	add	r0, r3
 8015572:	4443      	add	r3, r8
 8015574:	461e      	mov	r6, r3
 8015576:	4605      	mov	r5, r0
 8015578:	4575      	cmp	r5, lr
 801557a:	d30e      	bcc.n	801559a <__mdiff+0xea>
 801557c:	f10e 0103 	add.w	r1, lr, #3
 8015580:	1a09      	subs	r1, r1, r0
 8015582:	f021 0103 	bic.w	r1, r1, #3
 8015586:	3803      	subs	r0, #3
 8015588:	4586      	cmp	lr, r0
 801558a:	bf38      	it	cc
 801558c:	2100      	movcc	r1, #0
 801558e:	4419      	add	r1, r3
 8015590:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8015594:	b18b      	cbz	r3, 80155ba <__mdiff+0x10a>
 8015596:	6117      	str	r7, [r2, #16]
 8015598:	e7a4      	b.n	80154e4 <__mdiff+0x34>
 801559a:	f855 8b04 	ldr.w	r8, [r5], #4
 801559e:	fa1f f188 	uxth.w	r1, r8
 80155a2:	4461      	add	r1, ip
 80155a4:	140c      	asrs	r4, r1, #16
 80155a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80155aa:	b289      	uxth	r1, r1
 80155ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80155b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80155b4:	f846 1b04 	str.w	r1, [r6], #4
 80155b8:	e7de      	b.n	8015578 <__mdiff+0xc8>
 80155ba:	3f01      	subs	r7, #1
 80155bc:	e7e8      	b.n	8015590 <__mdiff+0xe0>
 80155be:	bf00      	nop
 80155c0:	0802fc8b 	.word	0x0802fc8b
 80155c4:	0802fc9c 	.word	0x0802fc9c

080155c8 <__d2b>:
 80155c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80155cc:	2101      	movs	r1, #1
 80155ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80155d2:	4690      	mov	r8, r2
 80155d4:	461d      	mov	r5, r3
 80155d6:	f7ff fcd1 	bl	8014f7c <_Balloc>
 80155da:	4604      	mov	r4, r0
 80155dc:	b930      	cbnz	r0, 80155ec <__d2b+0x24>
 80155de:	4602      	mov	r2, r0
 80155e0:	f240 310a 	movw	r1, #778	; 0x30a
 80155e4:	4b24      	ldr	r3, [pc, #144]	; (8015678 <__d2b+0xb0>)
 80155e6:	4825      	ldr	r0, [pc, #148]	; (801567c <__d2b+0xb4>)
 80155e8:	f000 f9ba 	bl	8015960 <__assert_func>
 80155ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80155f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80155f4:	bb2d      	cbnz	r5, 8015642 <__d2b+0x7a>
 80155f6:	9301      	str	r3, [sp, #4]
 80155f8:	f1b8 0300 	subs.w	r3, r8, #0
 80155fc:	d026      	beq.n	801564c <__d2b+0x84>
 80155fe:	4668      	mov	r0, sp
 8015600:	9300      	str	r3, [sp, #0]
 8015602:	f7ff fd83 	bl	801510c <__lo0bits>
 8015606:	9900      	ldr	r1, [sp, #0]
 8015608:	b1f0      	cbz	r0, 8015648 <__d2b+0x80>
 801560a:	9a01      	ldr	r2, [sp, #4]
 801560c:	f1c0 0320 	rsb	r3, r0, #32
 8015610:	fa02 f303 	lsl.w	r3, r2, r3
 8015614:	430b      	orrs	r3, r1
 8015616:	40c2      	lsrs	r2, r0
 8015618:	6163      	str	r3, [r4, #20]
 801561a:	9201      	str	r2, [sp, #4]
 801561c:	9b01      	ldr	r3, [sp, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	bf14      	ite	ne
 8015622:	2102      	movne	r1, #2
 8015624:	2101      	moveq	r1, #1
 8015626:	61a3      	str	r3, [r4, #24]
 8015628:	6121      	str	r1, [r4, #16]
 801562a:	b1c5      	cbz	r5, 801565e <__d2b+0x96>
 801562c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015630:	4405      	add	r5, r0
 8015632:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015636:	603d      	str	r5, [r7, #0]
 8015638:	6030      	str	r0, [r6, #0]
 801563a:	4620      	mov	r0, r4
 801563c:	b002      	add	sp, #8
 801563e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015646:	e7d6      	b.n	80155f6 <__d2b+0x2e>
 8015648:	6161      	str	r1, [r4, #20]
 801564a:	e7e7      	b.n	801561c <__d2b+0x54>
 801564c:	a801      	add	r0, sp, #4
 801564e:	f7ff fd5d 	bl	801510c <__lo0bits>
 8015652:	2101      	movs	r1, #1
 8015654:	9b01      	ldr	r3, [sp, #4]
 8015656:	6121      	str	r1, [r4, #16]
 8015658:	6163      	str	r3, [r4, #20]
 801565a:	3020      	adds	r0, #32
 801565c:	e7e5      	b.n	801562a <__d2b+0x62>
 801565e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8015662:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015666:	6038      	str	r0, [r7, #0]
 8015668:	6918      	ldr	r0, [r3, #16]
 801566a:	f7ff fd2f 	bl	80150cc <__hi0bits>
 801566e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8015672:	6031      	str	r1, [r6, #0]
 8015674:	e7e1      	b.n	801563a <__d2b+0x72>
 8015676:	bf00      	nop
 8015678:	0802fc8b 	.word	0x0802fc8b
 801567c:	0802fc9c 	.word	0x0802fc9c

08015680 <_calloc_r>:
 8015680:	b570      	push	{r4, r5, r6, lr}
 8015682:	fba1 5402 	umull	r5, r4, r1, r2
 8015686:	b934      	cbnz	r4, 8015696 <_calloc_r+0x16>
 8015688:	4629      	mov	r1, r5
 801568a:	f7fe f8b3 	bl	80137f4 <_malloc_r>
 801568e:	4606      	mov	r6, r0
 8015690:	b928      	cbnz	r0, 801569e <_calloc_r+0x1e>
 8015692:	4630      	mov	r0, r6
 8015694:	bd70      	pop	{r4, r5, r6, pc}
 8015696:	220c      	movs	r2, #12
 8015698:	2600      	movs	r6, #0
 801569a:	6002      	str	r2, [r0, #0]
 801569c:	e7f9      	b.n	8015692 <_calloc_r+0x12>
 801569e:	462a      	mov	r2, r5
 80156a0:	4621      	mov	r1, r4
 80156a2:	f7fe f837 	bl	8013714 <memset>
 80156a6:	e7f4      	b.n	8015692 <_calloc_r+0x12>

080156a8 <__ssputs_r>:
 80156a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156ac:	688e      	ldr	r6, [r1, #8]
 80156ae:	4682      	mov	sl, r0
 80156b0:	429e      	cmp	r6, r3
 80156b2:	460c      	mov	r4, r1
 80156b4:	4690      	mov	r8, r2
 80156b6:	461f      	mov	r7, r3
 80156b8:	d838      	bhi.n	801572c <__ssputs_r+0x84>
 80156ba:	898a      	ldrh	r2, [r1, #12]
 80156bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80156c0:	d032      	beq.n	8015728 <__ssputs_r+0x80>
 80156c2:	6825      	ldr	r5, [r4, #0]
 80156c4:	6909      	ldr	r1, [r1, #16]
 80156c6:	3301      	adds	r3, #1
 80156c8:	eba5 0901 	sub.w	r9, r5, r1
 80156cc:	6965      	ldr	r5, [r4, #20]
 80156ce:	444b      	add	r3, r9
 80156d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80156d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80156d8:	106d      	asrs	r5, r5, #1
 80156da:	429d      	cmp	r5, r3
 80156dc:	bf38      	it	cc
 80156de:	461d      	movcc	r5, r3
 80156e0:	0553      	lsls	r3, r2, #21
 80156e2:	d531      	bpl.n	8015748 <__ssputs_r+0xa0>
 80156e4:	4629      	mov	r1, r5
 80156e6:	f7fe f885 	bl	80137f4 <_malloc_r>
 80156ea:	4606      	mov	r6, r0
 80156ec:	b950      	cbnz	r0, 8015704 <__ssputs_r+0x5c>
 80156ee:	230c      	movs	r3, #12
 80156f0:	f04f 30ff 	mov.w	r0, #4294967295
 80156f4:	f8ca 3000 	str.w	r3, [sl]
 80156f8:	89a3      	ldrh	r3, [r4, #12]
 80156fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156fe:	81a3      	strh	r3, [r4, #12]
 8015700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015704:	464a      	mov	r2, r9
 8015706:	6921      	ldr	r1, [r4, #16]
 8015708:	f7ff fc1e 	bl	8014f48 <memcpy>
 801570c:	89a3      	ldrh	r3, [r4, #12]
 801570e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015716:	81a3      	strh	r3, [r4, #12]
 8015718:	6126      	str	r6, [r4, #16]
 801571a:	444e      	add	r6, r9
 801571c:	6026      	str	r6, [r4, #0]
 801571e:	463e      	mov	r6, r7
 8015720:	6165      	str	r5, [r4, #20]
 8015722:	eba5 0509 	sub.w	r5, r5, r9
 8015726:	60a5      	str	r5, [r4, #8]
 8015728:	42be      	cmp	r6, r7
 801572a:	d900      	bls.n	801572e <__ssputs_r+0x86>
 801572c:	463e      	mov	r6, r7
 801572e:	4632      	mov	r2, r6
 8015730:	4641      	mov	r1, r8
 8015732:	6820      	ldr	r0, [r4, #0]
 8015734:	f000 f959 	bl	80159ea <memmove>
 8015738:	68a3      	ldr	r3, [r4, #8]
 801573a:	2000      	movs	r0, #0
 801573c:	1b9b      	subs	r3, r3, r6
 801573e:	60a3      	str	r3, [r4, #8]
 8015740:	6823      	ldr	r3, [r4, #0]
 8015742:	4433      	add	r3, r6
 8015744:	6023      	str	r3, [r4, #0]
 8015746:	e7db      	b.n	8015700 <__ssputs_r+0x58>
 8015748:	462a      	mov	r2, r5
 801574a:	f000 f968 	bl	8015a1e <_realloc_r>
 801574e:	4606      	mov	r6, r0
 8015750:	2800      	cmp	r0, #0
 8015752:	d1e1      	bne.n	8015718 <__ssputs_r+0x70>
 8015754:	4650      	mov	r0, sl
 8015756:	6921      	ldr	r1, [r4, #16]
 8015758:	f7fd ffe4 	bl	8013724 <_free_r>
 801575c:	e7c7      	b.n	80156ee <__ssputs_r+0x46>
	...

08015760 <_svfiprintf_r>:
 8015760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015764:	4698      	mov	r8, r3
 8015766:	898b      	ldrh	r3, [r1, #12]
 8015768:	4607      	mov	r7, r0
 801576a:	061b      	lsls	r3, r3, #24
 801576c:	460d      	mov	r5, r1
 801576e:	4614      	mov	r4, r2
 8015770:	b09d      	sub	sp, #116	; 0x74
 8015772:	d50e      	bpl.n	8015792 <_svfiprintf_r+0x32>
 8015774:	690b      	ldr	r3, [r1, #16]
 8015776:	b963      	cbnz	r3, 8015792 <_svfiprintf_r+0x32>
 8015778:	2140      	movs	r1, #64	; 0x40
 801577a:	f7fe f83b 	bl	80137f4 <_malloc_r>
 801577e:	6028      	str	r0, [r5, #0]
 8015780:	6128      	str	r0, [r5, #16]
 8015782:	b920      	cbnz	r0, 801578e <_svfiprintf_r+0x2e>
 8015784:	230c      	movs	r3, #12
 8015786:	603b      	str	r3, [r7, #0]
 8015788:	f04f 30ff 	mov.w	r0, #4294967295
 801578c:	e0d1      	b.n	8015932 <_svfiprintf_r+0x1d2>
 801578e:	2340      	movs	r3, #64	; 0x40
 8015790:	616b      	str	r3, [r5, #20]
 8015792:	2300      	movs	r3, #0
 8015794:	9309      	str	r3, [sp, #36]	; 0x24
 8015796:	2320      	movs	r3, #32
 8015798:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801579c:	2330      	movs	r3, #48	; 0x30
 801579e:	f04f 0901 	mov.w	r9, #1
 80157a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80157a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801594c <_svfiprintf_r+0x1ec>
 80157aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80157ae:	4623      	mov	r3, r4
 80157b0:	469a      	mov	sl, r3
 80157b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157b6:	b10a      	cbz	r2, 80157bc <_svfiprintf_r+0x5c>
 80157b8:	2a25      	cmp	r2, #37	; 0x25
 80157ba:	d1f9      	bne.n	80157b0 <_svfiprintf_r+0x50>
 80157bc:	ebba 0b04 	subs.w	fp, sl, r4
 80157c0:	d00b      	beq.n	80157da <_svfiprintf_r+0x7a>
 80157c2:	465b      	mov	r3, fp
 80157c4:	4622      	mov	r2, r4
 80157c6:	4629      	mov	r1, r5
 80157c8:	4638      	mov	r0, r7
 80157ca:	f7ff ff6d 	bl	80156a8 <__ssputs_r>
 80157ce:	3001      	adds	r0, #1
 80157d0:	f000 80aa 	beq.w	8015928 <_svfiprintf_r+0x1c8>
 80157d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157d6:	445a      	add	r2, fp
 80157d8:	9209      	str	r2, [sp, #36]	; 0x24
 80157da:	f89a 3000 	ldrb.w	r3, [sl]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	f000 80a2 	beq.w	8015928 <_svfiprintf_r+0x1c8>
 80157e4:	2300      	movs	r3, #0
 80157e6:	f04f 32ff 	mov.w	r2, #4294967295
 80157ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157ee:	f10a 0a01 	add.w	sl, sl, #1
 80157f2:	9304      	str	r3, [sp, #16]
 80157f4:	9307      	str	r3, [sp, #28]
 80157f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157fa:	931a      	str	r3, [sp, #104]	; 0x68
 80157fc:	4654      	mov	r4, sl
 80157fe:	2205      	movs	r2, #5
 8015800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015804:	4851      	ldr	r0, [pc, #324]	; (801594c <_svfiprintf_r+0x1ec>)
 8015806:	f7ff fb91 	bl	8014f2c <memchr>
 801580a:	9a04      	ldr	r2, [sp, #16]
 801580c:	b9d8      	cbnz	r0, 8015846 <_svfiprintf_r+0xe6>
 801580e:	06d0      	lsls	r0, r2, #27
 8015810:	bf44      	itt	mi
 8015812:	2320      	movmi	r3, #32
 8015814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015818:	0711      	lsls	r1, r2, #28
 801581a:	bf44      	itt	mi
 801581c:	232b      	movmi	r3, #43	; 0x2b
 801581e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015822:	f89a 3000 	ldrb.w	r3, [sl]
 8015826:	2b2a      	cmp	r3, #42	; 0x2a
 8015828:	d015      	beq.n	8015856 <_svfiprintf_r+0xf6>
 801582a:	4654      	mov	r4, sl
 801582c:	2000      	movs	r0, #0
 801582e:	f04f 0c0a 	mov.w	ip, #10
 8015832:	9a07      	ldr	r2, [sp, #28]
 8015834:	4621      	mov	r1, r4
 8015836:	f811 3b01 	ldrb.w	r3, [r1], #1
 801583a:	3b30      	subs	r3, #48	; 0x30
 801583c:	2b09      	cmp	r3, #9
 801583e:	d94e      	bls.n	80158de <_svfiprintf_r+0x17e>
 8015840:	b1b0      	cbz	r0, 8015870 <_svfiprintf_r+0x110>
 8015842:	9207      	str	r2, [sp, #28]
 8015844:	e014      	b.n	8015870 <_svfiprintf_r+0x110>
 8015846:	eba0 0308 	sub.w	r3, r0, r8
 801584a:	fa09 f303 	lsl.w	r3, r9, r3
 801584e:	4313      	orrs	r3, r2
 8015850:	46a2      	mov	sl, r4
 8015852:	9304      	str	r3, [sp, #16]
 8015854:	e7d2      	b.n	80157fc <_svfiprintf_r+0x9c>
 8015856:	9b03      	ldr	r3, [sp, #12]
 8015858:	1d19      	adds	r1, r3, #4
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	9103      	str	r1, [sp, #12]
 801585e:	2b00      	cmp	r3, #0
 8015860:	bfbb      	ittet	lt
 8015862:	425b      	neglt	r3, r3
 8015864:	f042 0202 	orrlt.w	r2, r2, #2
 8015868:	9307      	strge	r3, [sp, #28]
 801586a:	9307      	strlt	r3, [sp, #28]
 801586c:	bfb8      	it	lt
 801586e:	9204      	strlt	r2, [sp, #16]
 8015870:	7823      	ldrb	r3, [r4, #0]
 8015872:	2b2e      	cmp	r3, #46	; 0x2e
 8015874:	d10c      	bne.n	8015890 <_svfiprintf_r+0x130>
 8015876:	7863      	ldrb	r3, [r4, #1]
 8015878:	2b2a      	cmp	r3, #42	; 0x2a
 801587a:	d135      	bne.n	80158e8 <_svfiprintf_r+0x188>
 801587c:	9b03      	ldr	r3, [sp, #12]
 801587e:	3402      	adds	r4, #2
 8015880:	1d1a      	adds	r2, r3, #4
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	9203      	str	r2, [sp, #12]
 8015886:	2b00      	cmp	r3, #0
 8015888:	bfb8      	it	lt
 801588a:	f04f 33ff 	movlt.w	r3, #4294967295
 801588e:	9305      	str	r3, [sp, #20]
 8015890:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8015950 <_svfiprintf_r+0x1f0>
 8015894:	2203      	movs	r2, #3
 8015896:	4650      	mov	r0, sl
 8015898:	7821      	ldrb	r1, [r4, #0]
 801589a:	f7ff fb47 	bl	8014f2c <memchr>
 801589e:	b140      	cbz	r0, 80158b2 <_svfiprintf_r+0x152>
 80158a0:	2340      	movs	r3, #64	; 0x40
 80158a2:	eba0 000a 	sub.w	r0, r0, sl
 80158a6:	fa03 f000 	lsl.w	r0, r3, r0
 80158aa:	9b04      	ldr	r3, [sp, #16]
 80158ac:	3401      	adds	r4, #1
 80158ae:	4303      	orrs	r3, r0
 80158b0:	9304      	str	r3, [sp, #16]
 80158b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158b6:	2206      	movs	r2, #6
 80158b8:	4826      	ldr	r0, [pc, #152]	; (8015954 <_svfiprintf_r+0x1f4>)
 80158ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80158be:	f7ff fb35 	bl	8014f2c <memchr>
 80158c2:	2800      	cmp	r0, #0
 80158c4:	d038      	beq.n	8015938 <_svfiprintf_r+0x1d8>
 80158c6:	4b24      	ldr	r3, [pc, #144]	; (8015958 <_svfiprintf_r+0x1f8>)
 80158c8:	bb1b      	cbnz	r3, 8015912 <_svfiprintf_r+0x1b2>
 80158ca:	9b03      	ldr	r3, [sp, #12]
 80158cc:	3307      	adds	r3, #7
 80158ce:	f023 0307 	bic.w	r3, r3, #7
 80158d2:	3308      	adds	r3, #8
 80158d4:	9303      	str	r3, [sp, #12]
 80158d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158d8:	4433      	add	r3, r6
 80158da:	9309      	str	r3, [sp, #36]	; 0x24
 80158dc:	e767      	b.n	80157ae <_svfiprintf_r+0x4e>
 80158de:	460c      	mov	r4, r1
 80158e0:	2001      	movs	r0, #1
 80158e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80158e6:	e7a5      	b.n	8015834 <_svfiprintf_r+0xd4>
 80158e8:	2300      	movs	r3, #0
 80158ea:	f04f 0c0a 	mov.w	ip, #10
 80158ee:	4619      	mov	r1, r3
 80158f0:	3401      	adds	r4, #1
 80158f2:	9305      	str	r3, [sp, #20]
 80158f4:	4620      	mov	r0, r4
 80158f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158fa:	3a30      	subs	r2, #48	; 0x30
 80158fc:	2a09      	cmp	r2, #9
 80158fe:	d903      	bls.n	8015908 <_svfiprintf_r+0x1a8>
 8015900:	2b00      	cmp	r3, #0
 8015902:	d0c5      	beq.n	8015890 <_svfiprintf_r+0x130>
 8015904:	9105      	str	r1, [sp, #20]
 8015906:	e7c3      	b.n	8015890 <_svfiprintf_r+0x130>
 8015908:	4604      	mov	r4, r0
 801590a:	2301      	movs	r3, #1
 801590c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015910:	e7f0      	b.n	80158f4 <_svfiprintf_r+0x194>
 8015912:	ab03      	add	r3, sp, #12
 8015914:	9300      	str	r3, [sp, #0]
 8015916:	462a      	mov	r2, r5
 8015918:	4638      	mov	r0, r7
 801591a:	4b10      	ldr	r3, [pc, #64]	; (801595c <_svfiprintf_r+0x1fc>)
 801591c:	a904      	add	r1, sp, #16
 801591e:	f7fe f87b 	bl	8013a18 <_printf_float>
 8015922:	1c42      	adds	r2, r0, #1
 8015924:	4606      	mov	r6, r0
 8015926:	d1d6      	bne.n	80158d6 <_svfiprintf_r+0x176>
 8015928:	89ab      	ldrh	r3, [r5, #12]
 801592a:	065b      	lsls	r3, r3, #25
 801592c:	f53f af2c 	bmi.w	8015788 <_svfiprintf_r+0x28>
 8015930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015932:	b01d      	add	sp, #116	; 0x74
 8015934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015938:	ab03      	add	r3, sp, #12
 801593a:	9300      	str	r3, [sp, #0]
 801593c:	462a      	mov	r2, r5
 801593e:	4638      	mov	r0, r7
 8015940:	4b06      	ldr	r3, [pc, #24]	; (801595c <_svfiprintf_r+0x1fc>)
 8015942:	a904      	add	r1, sp, #16
 8015944:	f7fe fb04 	bl	8013f50 <_printf_i>
 8015948:	e7eb      	b.n	8015922 <_svfiprintf_r+0x1c2>
 801594a:	bf00      	nop
 801594c:	0802fdf4 	.word	0x0802fdf4
 8015950:	0802fdfa 	.word	0x0802fdfa
 8015954:	0802fdfe 	.word	0x0802fdfe
 8015958:	08013a19 	.word	0x08013a19
 801595c:	080156a9 	.word	0x080156a9

08015960 <__assert_func>:
 8015960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015962:	4614      	mov	r4, r2
 8015964:	461a      	mov	r2, r3
 8015966:	4b09      	ldr	r3, [pc, #36]	; (801598c <__assert_func+0x2c>)
 8015968:	4605      	mov	r5, r0
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	68d8      	ldr	r0, [r3, #12]
 801596e:	b14c      	cbz	r4, 8015984 <__assert_func+0x24>
 8015970:	4b07      	ldr	r3, [pc, #28]	; (8015990 <__assert_func+0x30>)
 8015972:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015976:	9100      	str	r1, [sp, #0]
 8015978:	462b      	mov	r3, r5
 801597a:	4906      	ldr	r1, [pc, #24]	; (8015994 <__assert_func+0x34>)
 801597c:	f000 f80e 	bl	801599c <fiprintf>
 8015980:	f000 faa2 	bl	8015ec8 <abort>
 8015984:	4b04      	ldr	r3, [pc, #16]	; (8015998 <__assert_func+0x38>)
 8015986:	461c      	mov	r4, r3
 8015988:	e7f3      	b.n	8015972 <__assert_func+0x12>
 801598a:	bf00      	nop
 801598c:	20000174 	.word	0x20000174
 8015990:	0802fe05 	.word	0x0802fe05
 8015994:	0802fe12 	.word	0x0802fe12
 8015998:	0802fe40 	.word	0x0802fe40

0801599c <fiprintf>:
 801599c:	b40e      	push	{r1, r2, r3}
 801599e:	b503      	push	{r0, r1, lr}
 80159a0:	4601      	mov	r1, r0
 80159a2:	ab03      	add	r3, sp, #12
 80159a4:	4805      	ldr	r0, [pc, #20]	; (80159bc <fiprintf+0x20>)
 80159a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80159aa:	6800      	ldr	r0, [r0, #0]
 80159ac:	9301      	str	r3, [sp, #4]
 80159ae:	f000 f88d 	bl	8015acc <_vfiprintf_r>
 80159b2:	b002      	add	sp, #8
 80159b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80159b8:	b003      	add	sp, #12
 80159ba:	4770      	bx	lr
 80159bc:	20000174 	.word	0x20000174

080159c0 <__retarget_lock_init_recursive>:
 80159c0:	4770      	bx	lr

080159c2 <__retarget_lock_acquire_recursive>:
 80159c2:	4770      	bx	lr

080159c4 <__retarget_lock_release_recursive>:
 80159c4:	4770      	bx	lr

080159c6 <__ascii_mbtowc>:
 80159c6:	b082      	sub	sp, #8
 80159c8:	b901      	cbnz	r1, 80159cc <__ascii_mbtowc+0x6>
 80159ca:	a901      	add	r1, sp, #4
 80159cc:	b142      	cbz	r2, 80159e0 <__ascii_mbtowc+0x1a>
 80159ce:	b14b      	cbz	r3, 80159e4 <__ascii_mbtowc+0x1e>
 80159d0:	7813      	ldrb	r3, [r2, #0]
 80159d2:	600b      	str	r3, [r1, #0]
 80159d4:	7812      	ldrb	r2, [r2, #0]
 80159d6:	1e10      	subs	r0, r2, #0
 80159d8:	bf18      	it	ne
 80159da:	2001      	movne	r0, #1
 80159dc:	b002      	add	sp, #8
 80159de:	4770      	bx	lr
 80159e0:	4610      	mov	r0, r2
 80159e2:	e7fb      	b.n	80159dc <__ascii_mbtowc+0x16>
 80159e4:	f06f 0001 	mvn.w	r0, #1
 80159e8:	e7f8      	b.n	80159dc <__ascii_mbtowc+0x16>

080159ea <memmove>:
 80159ea:	4288      	cmp	r0, r1
 80159ec:	b510      	push	{r4, lr}
 80159ee:	eb01 0402 	add.w	r4, r1, r2
 80159f2:	d902      	bls.n	80159fa <memmove+0x10>
 80159f4:	4284      	cmp	r4, r0
 80159f6:	4623      	mov	r3, r4
 80159f8:	d807      	bhi.n	8015a0a <memmove+0x20>
 80159fa:	1e43      	subs	r3, r0, #1
 80159fc:	42a1      	cmp	r1, r4
 80159fe:	d008      	beq.n	8015a12 <memmove+0x28>
 8015a00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a04:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a08:	e7f8      	b.n	80159fc <memmove+0x12>
 8015a0a:	4601      	mov	r1, r0
 8015a0c:	4402      	add	r2, r0
 8015a0e:	428a      	cmp	r2, r1
 8015a10:	d100      	bne.n	8015a14 <memmove+0x2a>
 8015a12:	bd10      	pop	{r4, pc}
 8015a14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a1c:	e7f7      	b.n	8015a0e <memmove+0x24>

08015a1e <_realloc_r>:
 8015a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a22:	4680      	mov	r8, r0
 8015a24:	4614      	mov	r4, r2
 8015a26:	460e      	mov	r6, r1
 8015a28:	b921      	cbnz	r1, 8015a34 <_realloc_r+0x16>
 8015a2a:	4611      	mov	r1, r2
 8015a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a30:	f7fd bee0 	b.w	80137f4 <_malloc_r>
 8015a34:	b92a      	cbnz	r2, 8015a42 <_realloc_r+0x24>
 8015a36:	f7fd fe75 	bl	8013724 <_free_r>
 8015a3a:	4625      	mov	r5, r4
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a42:	f000 fc61 	bl	8016308 <_malloc_usable_size_r>
 8015a46:	4284      	cmp	r4, r0
 8015a48:	4607      	mov	r7, r0
 8015a4a:	d802      	bhi.n	8015a52 <_realloc_r+0x34>
 8015a4c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015a50:	d812      	bhi.n	8015a78 <_realloc_r+0x5a>
 8015a52:	4621      	mov	r1, r4
 8015a54:	4640      	mov	r0, r8
 8015a56:	f7fd fecd 	bl	80137f4 <_malloc_r>
 8015a5a:	4605      	mov	r5, r0
 8015a5c:	2800      	cmp	r0, #0
 8015a5e:	d0ed      	beq.n	8015a3c <_realloc_r+0x1e>
 8015a60:	42bc      	cmp	r4, r7
 8015a62:	4622      	mov	r2, r4
 8015a64:	4631      	mov	r1, r6
 8015a66:	bf28      	it	cs
 8015a68:	463a      	movcs	r2, r7
 8015a6a:	f7ff fa6d 	bl	8014f48 <memcpy>
 8015a6e:	4631      	mov	r1, r6
 8015a70:	4640      	mov	r0, r8
 8015a72:	f7fd fe57 	bl	8013724 <_free_r>
 8015a76:	e7e1      	b.n	8015a3c <_realloc_r+0x1e>
 8015a78:	4635      	mov	r5, r6
 8015a7a:	e7df      	b.n	8015a3c <_realloc_r+0x1e>

08015a7c <__sfputc_r>:
 8015a7c:	6893      	ldr	r3, [r2, #8]
 8015a7e:	b410      	push	{r4}
 8015a80:	3b01      	subs	r3, #1
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	6093      	str	r3, [r2, #8]
 8015a86:	da07      	bge.n	8015a98 <__sfputc_r+0x1c>
 8015a88:	6994      	ldr	r4, [r2, #24]
 8015a8a:	42a3      	cmp	r3, r4
 8015a8c:	db01      	blt.n	8015a92 <__sfputc_r+0x16>
 8015a8e:	290a      	cmp	r1, #10
 8015a90:	d102      	bne.n	8015a98 <__sfputc_r+0x1c>
 8015a92:	bc10      	pop	{r4}
 8015a94:	f000 b94a 	b.w	8015d2c <__swbuf_r>
 8015a98:	6813      	ldr	r3, [r2, #0]
 8015a9a:	1c58      	adds	r0, r3, #1
 8015a9c:	6010      	str	r0, [r2, #0]
 8015a9e:	7019      	strb	r1, [r3, #0]
 8015aa0:	4608      	mov	r0, r1
 8015aa2:	bc10      	pop	{r4}
 8015aa4:	4770      	bx	lr

08015aa6 <__sfputs_r>:
 8015aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aa8:	4606      	mov	r6, r0
 8015aaa:	460f      	mov	r7, r1
 8015aac:	4614      	mov	r4, r2
 8015aae:	18d5      	adds	r5, r2, r3
 8015ab0:	42ac      	cmp	r4, r5
 8015ab2:	d101      	bne.n	8015ab8 <__sfputs_r+0x12>
 8015ab4:	2000      	movs	r0, #0
 8015ab6:	e007      	b.n	8015ac8 <__sfputs_r+0x22>
 8015ab8:	463a      	mov	r2, r7
 8015aba:	4630      	mov	r0, r6
 8015abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ac0:	f7ff ffdc 	bl	8015a7c <__sfputc_r>
 8015ac4:	1c43      	adds	r3, r0, #1
 8015ac6:	d1f3      	bne.n	8015ab0 <__sfputs_r+0xa>
 8015ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015acc <_vfiprintf_r>:
 8015acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad0:	460d      	mov	r5, r1
 8015ad2:	4614      	mov	r4, r2
 8015ad4:	4698      	mov	r8, r3
 8015ad6:	4606      	mov	r6, r0
 8015ad8:	b09d      	sub	sp, #116	; 0x74
 8015ada:	b118      	cbz	r0, 8015ae4 <_vfiprintf_r+0x18>
 8015adc:	6983      	ldr	r3, [r0, #24]
 8015ade:	b90b      	cbnz	r3, 8015ae4 <_vfiprintf_r+0x18>
 8015ae0:	f000 fb10 	bl	8016104 <__sinit>
 8015ae4:	4b89      	ldr	r3, [pc, #548]	; (8015d0c <_vfiprintf_r+0x240>)
 8015ae6:	429d      	cmp	r5, r3
 8015ae8:	d11b      	bne.n	8015b22 <_vfiprintf_r+0x56>
 8015aea:	6875      	ldr	r5, [r6, #4]
 8015aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015aee:	07d9      	lsls	r1, r3, #31
 8015af0:	d405      	bmi.n	8015afe <_vfiprintf_r+0x32>
 8015af2:	89ab      	ldrh	r3, [r5, #12]
 8015af4:	059a      	lsls	r2, r3, #22
 8015af6:	d402      	bmi.n	8015afe <_vfiprintf_r+0x32>
 8015af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015afa:	f7ff ff62 	bl	80159c2 <__retarget_lock_acquire_recursive>
 8015afe:	89ab      	ldrh	r3, [r5, #12]
 8015b00:	071b      	lsls	r3, r3, #28
 8015b02:	d501      	bpl.n	8015b08 <_vfiprintf_r+0x3c>
 8015b04:	692b      	ldr	r3, [r5, #16]
 8015b06:	b9eb      	cbnz	r3, 8015b44 <_vfiprintf_r+0x78>
 8015b08:	4629      	mov	r1, r5
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	f000 f96e 	bl	8015dec <__swsetup_r>
 8015b10:	b1c0      	cbz	r0, 8015b44 <_vfiprintf_r+0x78>
 8015b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b14:	07dc      	lsls	r4, r3, #31
 8015b16:	d50e      	bpl.n	8015b36 <_vfiprintf_r+0x6a>
 8015b18:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1c:	b01d      	add	sp, #116	; 0x74
 8015b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b22:	4b7b      	ldr	r3, [pc, #492]	; (8015d10 <_vfiprintf_r+0x244>)
 8015b24:	429d      	cmp	r5, r3
 8015b26:	d101      	bne.n	8015b2c <_vfiprintf_r+0x60>
 8015b28:	68b5      	ldr	r5, [r6, #8]
 8015b2a:	e7df      	b.n	8015aec <_vfiprintf_r+0x20>
 8015b2c:	4b79      	ldr	r3, [pc, #484]	; (8015d14 <_vfiprintf_r+0x248>)
 8015b2e:	429d      	cmp	r5, r3
 8015b30:	bf08      	it	eq
 8015b32:	68f5      	ldreq	r5, [r6, #12]
 8015b34:	e7da      	b.n	8015aec <_vfiprintf_r+0x20>
 8015b36:	89ab      	ldrh	r3, [r5, #12]
 8015b38:	0598      	lsls	r0, r3, #22
 8015b3a:	d4ed      	bmi.n	8015b18 <_vfiprintf_r+0x4c>
 8015b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b3e:	f7ff ff41 	bl	80159c4 <__retarget_lock_release_recursive>
 8015b42:	e7e9      	b.n	8015b18 <_vfiprintf_r+0x4c>
 8015b44:	2300      	movs	r3, #0
 8015b46:	9309      	str	r3, [sp, #36]	; 0x24
 8015b48:	2320      	movs	r3, #32
 8015b4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b4e:	2330      	movs	r3, #48	; 0x30
 8015b50:	f04f 0901 	mov.w	r9, #1
 8015b54:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b58:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015d18 <_vfiprintf_r+0x24c>
 8015b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b60:	4623      	mov	r3, r4
 8015b62:	469a      	mov	sl, r3
 8015b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b68:	b10a      	cbz	r2, 8015b6e <_vfiprintf_r+0xa2>
 8015b6a:	2a25      	cmp	r2, #37	; 0x25
 8015b6c:	d1f9      	bne.n	8015b62 <_vfiprintf_r+0x96>
 8015b6e:	ebba 0b04 	subs.w	fp, sl, r4
 8015b72:	d00b      	beq.n	8015b8c <_vfiprintf_r+0xc0>
 8015b74:	465b      	mov	r3, fp
 8015b76:	4622      	mov	r2, r4
 8015b78:	4629      	mov	r1, r5
 8015b7a:	4630      	mov	r0, r6
 8015b7c:	f7ff ff93 	bl	8015aa6 <__sfputs_r>
 8015b80:	3001      	adds	r0, #1
 8015b82:	f000 80aa 	beq.w	8015cda <_vfiprintf_r+0x20e>
 8015b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b88:	445a      	add	r2, fp
 8015b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8015b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	f000 80a2 	beq.w	8015cda <_vfiprintf_r+0x20e>
 8015b96:	2300      	movs	r3, #0
 8015b98:	f04f 32ff 	mov.w	r2, #4294967295
 8015b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ba0:	f10a 0a01 	add.w	sl, sl, #1
 8015ba4:	9304      	str	r3, [sp, #16]
 8015ba6:	9307      	str	r3, [sp, #28]
 8015ba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bac:	931a      	str	r3, [sp, #104]	; 0x68
 8015bae:	4654      	mov	r4, sl
 8015bb0:	2205      	movs	r2, #5
 8015bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bb6:	4858      	ldr	r0, [pc, #352]	; (8015d18 <_vfiprintf_r+0x24c>)
 8015bb8:	f7ff f9b8 	bl	8014f2c <memchr>
 8015bbc:	9a04      	ldr	r2, [sp, #16]
 8015bbe:	b9d8      	cbnz	r0, 8015bf8 <_vfiprintf_r+0x12c>
 8015bc0:	06d1      	lsls	r1, r2, #27
 8015bc2:	bf44      	itt	mi
 8015bc4:	2320      	movmi	r3, #32
 8015bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bca:	0713      	lsls	r3, r2, #28
 8015bcc:	bf44      	itt	mi
 8015bce:	232b      	movmi	r3, #43	; 0x2b
 8015bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8015bda:	d015      	beq.n	8015c08 <_vfiprintf_r+0x13c>
 8015bdc:	4654      	mov	r4, sl
 8015bde:	2000      	movs	r0, #0
 8015be0:	f04f 0c0a 	mov.w	ip, #10
 8015be4:	9a07      	ldr	r2, [sp, #28]
 8015be6:	4621      	mov	r1, r4
 8015be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bec:	3b30      	subs	r3, #48	; 0x30
 8015bee:	2b09      	cmp	r3, #9
 8015bf0:	d94e      	bls.n	8015c90 <_vfiprintf_r+0x1c4>
 8015bf2:	b1b0      	cbz	r0, 8015c22 <_vfiprintf_r+0x156>
 8015bf4:	9207      	str	r2, [sp, #28]
 8015bf6:	e014      	b.n	8015c22 <_vfiprintf_r+0x156>
 8015bf8:	eba0 0308 	sub.w	r3, r0, r8
 8015bfc:	fa09 f303 	lsl.w	r3, r9, r3
 8015c00:	4313      	orrs	r3, r2
 8015c02:	46a2      	mov	sl, r4
 8015c04:	9304      	str	r3, [sp, #16]
 8015c06:	e7d2      	b.n	8015bae <_vfiprintf_r+0xe2>
 8015c08:	9b03      	ldr	r3, [sp, #12]
 8015c0a:	1d19      	adds	r1, r3, #4
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	9103      	str	r1, [sp, #12]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	bfbb      	ittet	lt
 8015c14:	425b      	neglt	r3, r3
 8015c16:	f042 0202 	orrlt.w	r2, r2, #2
 8015c1a:	9307      	strge	r3, [sp, #28]
 8015c1c:	9307      	strlt	r3, [sp, #28]
 8015c1e:	bfb8      	it	lt
 8015c20:	9204      	strlt	r2, [sp, #16]
 8015c22:	7823      	ldrb	r3, [r4, #0]
 8015c24:	2b2e      	cmp	r3, #46	; 0x2e
 8015c26:	d10c      	bne.n	8015c42 <_vfiprintf_r+0x176>
 8015c28:	7863      	ldrb	r3, [r4, #1]
 8015c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8015c2c:	d135      	bne.n	8015c9a <_vfiprintf_r+0x1ce>
 8015c2e:	9b03      	ldr	r3, [sp, #12]
 8015c30:	3402      	adds	r4, #2
 8015c32:	1d1a      	adds	r2, r3, #4
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	9203      	str	r2, [sp, #12]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	bfb8      	it	lt
 8015c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c40:	9305      	str	r3, [sp, #20]
 8015c42:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8015d1c <_vfiprintf_r+0x250>
 8015c46:	2203      	movs	r2, #3
 8015c48:	4650      	mov	r0, sl
 8015c4a:	7821      	ldrb	r1, [r4, #0]
 8015c4c:	f7ff f96e 	bl	8014f2c <memchr>
 8015c50:	b140      	cbz	r0, 8015c64 <_vfiprintf_r+0x198>
 8015c52:	2340      	movs	r3, #64	; 0x40
 8015c54:	eba0 000a 	sub.w	r0, r0, sl
 8015c58:	fa03 f000 	lsl.w	r0, r3, r0
 8015c5c:	9b04      	ldr	r3, [sp, #16]
 8015c5e:	3401      	adds	r4, #1
 8015c60:	4303      	orrs	r3, r0
 8015c62:	9304      	str	r3, [sp, #16]
 8015c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c68:	2206      	movs	r2, #6
 8015c6a:	482d      	ldr	r0, [pc, #180]	; (8015d20 <_vfiprintf_r+0x254>)
 8015c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c70:	f7ff f95c 	bl	8014f2c <memchr>
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d03f      	beq.n	8015cf8 <_vfiprintf_r+0x22c>
 8015c78:	4b2a      	ldr	r3, [pc, #168]	; (8015d24 <_vfiprintf_r+0x258>)
 8015c7a:	bb1b      	cbnz	r3, 8015cc4 <_vfiprintf_r+0x1f8>
 8015c7c:	9b03      	ldr	r3, [sp, #12]
 8015c7e:	3307      	adds	r3, #7
 8015c80:	f023 0307 	bic.w	r3, r3, #7
 8015c84:	3308      	adds	r3, #8
 8015c86:	9303      	str	r3, [sp, #12]
 8015c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c8a:	443b      	add	r3, r7
 8015c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8015c8e:	e767      	b.n	8015b60 <_vfiprintf_r+0x94>
 8015c90:	460c      	mov	r4, r1
 8015c92:	2001      	movs	r0, #1
 8015c94:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c98:	e7a5      	b.n	8015be6 <_vfiprintf_r+0x11a>
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	f04f 0c0a 	mov.w	ip, #10
 8015ca0:	4619      	mov	r1, r3
 8015ca2:	3401      	adds	r4, #1
 8015ca4:	9305      	str	r3, [sp, #20]
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cac:	3a30      	subs	r2, #48	; 0x30
 8015cae:	2a09      	cmp	r2, #9
 8015cb0:	d903      	bls.n	8015cba <_vfiprintf_r+0x1ee>
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d0c5      	beq.n	8015c42 <_vfiprintf_r+0x176>
 8015cb6:	9105      	str	r1, [sp, #20]
 8015cb8:	e7c3      	b.n	8015c42 <_vfiprintf_r+0x176>
 8015cba:	4604      	mov	r4, r0
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cc2:	e7f0      	b.n	8015ca6 <_vfiprintf_r+0x1da>
 8015cc4:	ab03      	add	r3, sp, #12
 8015cc6:	9300      	str	r3, [sp, #0]
 8015cc8:	462a      	mov	r2, r5
 8015cca:	4630      	mov	r0, r6
 8015ccc:	4b16      	ldr	r3, [pc, #88]	; (8015d28 <_vfiprintf_r+0x25c>)
 8015cce:	a904      	add	r1, sp, #16
 8015cd0:	f7fd fea2 	bl	8013a18 <_printf_float>
 8015cd4:	4607      	mov	r7, r0
 8015cd6:	1c78      	adds	r0, r7, #1
 8015cd8:	d1d6      	bne.n	8015c88 <_vfiprintf_r+0x1bc>
 8015cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015cdc:	07d9      	lsls	r1, r3, #31
 8015cde:	d405      	bmi.n	8015cec <_vfiprintf_r+0x220>
 8015ce0:	89ab      	ldrh	r3, [r5, #12]
 8015ce2:	059a      	lsls	r2, r3, #22
 8015ce4:	d402      	bmi.n	8015cec <_vfiprintf_r+0x220>
 8015ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015ce8:	f7ff fe6c 	bl	80159c4 <__retarget_lock_release_recursive>
 8015cec:	89ab      	ldrh	r3, [r5, #12]
 8015cee:	065b      	lsls	r3, r3, #25
 8015cf0:	f53f af12 	bmi.w	8015b18 <_vfiprintf_r+0x4c>
 8015cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cf6:	e711      	b.n	8015b1c <_vfiprintf_r+0x50>
 8015cf8:	ab03      	add	r3, sp, #12
 8015cfa:	9300      	str	r3, [sp, #0]
 8015cfc:	462a      	mov	r2, r5
 8015cfe:	4630      	mov	r0, r6
 8015d00:	4b09      	ldr	r3, [pc, #36]	; (8015d28 <_vfiprintf_r+0x25c>)
 8015d02:	a904      	add	r1, sp, #16
 8015d04:	f7fe f924 	bl	8013f50 <_printf_i>
 8015d08:	e7e4      	b.n	8015cd4 <_vfiprintf_r+0x208>
 8015d0a:	bf00      	nop
 8015d0c:	0802ff6c 	.word	0x0802ff6c
 8015d10:	0802ff8c 	.word	0x0802ff8c
 8015d14:	0802ff4c 	.word	0x0802ff4c
 8015d18:	0802fdf4 	.word	0x0802fdf4
 8015d1c:	0802fdfa 	.word	0x0802fdfa
 8015d20:	0802fdfe 	.word	0x0802fdfe
 8015d24:	08013a19 	.word	0x08013a19
 8015d28:	08015aa7 	.word	0x08015aa7

08015d2c <__swbuf_r>:
 8015d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d2e:	460e      	mov	r6, r1
 8015d30:	4614      	mov	r4, r2
 8015d32:	4605      	mov	r5, r0
 8015d34:	b118      	cbz	r0, 8015d3e <__swbuf_r+0x12>
 8015d36:	6983      	ldr	r3, [r0, #24]
 8015d38:	b90b      	cbnz	r3, 8015d3e <__swbuf_r+0x12>
 8015d3a:	f000 f9e3 	bl	8016104 <__sinit>
 8015d3e:	4b21      	ldr	r3, [pc, #132]	; (8015dc4 <__swbuf_r+0x98>)
 8015d40:	429c      	cmp	r4, r3
 8015d42:	d12b      	bne.n	8015d9c <__swbuf_r+0x70>
 8015d44:	686c      	ldr	r4, [r5, #4]
 8015d46:	69a3      	ldr	r3, [r4, #24]
 8015d48:	60a3      	str	r3, [r4, #8]
 8015d4a:	89a3      	ldrh	r3, [r4, #12]
 8015d4c:	071a      	lsls	r2, r3, #28
 8015d4e:	d52f      	bpl.n	8015db0 <__swbuf_r+0x84>
 8015d50:	6923      	ldr	r3, [r4, #16]
 8015d52:	b36b      	cbz	r3, 8015db0 <__swbuf_r+0x84>
 8015d54:	6923      	ldr	r3, [r4, #16]
 8015d56:	6820      	ldr	r0, [r4, #0]
 8015d58:	b2f6      	uxtb	r6, r6
 8015d5a:	1ac0      	subs	r0, r0, r3
 8015d5c:	6963      	ldr	r3, [r4, #20]
 8015d5e:	4637      	mov	r7, r6
 8015d60:	4283      	cmp	r3, r0
 8015d62:	dc04      	bgt.n	8015d6e <__swbuf_r+0x42>
 8015d64:	4621      	mov	r1, r4
 8015d66:	4628      	mov	r0, r5
 8015d68:	f000 f938 	bl	8015fdc <_fflush_r>
 8015d6c:	bb30      	cbnz	r0, 8015dbc <__swbuf_r+0x90>
 8015d6e:	68a3      	ldr	r3, [r4, #8]
 8015d70:	3001      	adds	r0, #1
 8015d72:	3b01      	subs	r3, #1
 8015d74:	60a3      	str	r3, [r4, #8]
 8015d76:	6823      	ldr	r3, [r4, #0]
 8015d78:	1c5a      	adds	r2, r3, #1
 8015d7a:	6022      	str	r2, [r4, #0]
 8015d7c:	701e      	strb	r6, [r3, #0]
 8015d7e:	6963      	ldr	r3, [r4, #20]
 8015d80:	4283      	cmp	r3, r0
 8015d82:	d004      	beq.n	8015d8e <__swbuf_r+0x62>
 8015d84:	89a3      	ldrh	r3, [r4, #12]
 8015d86:	07db      	lsls	r3, r3, #31
 8015d88:	d506      	bpl.n	8015d98 <__swbuf_r+0x6c>
 8015d8a:	2e0a      	cmp	r6, #10
 8015d8c:	d104      	bne.n	8015d98 <__swbuf_r+0x6c>
 8015d8e:	4621      	mov	r1, r4
 8015d90:	4628      	mov	r0, r5
 8015d92:	f000 f923 	bl	8015fdc <_fflush_r>
 8015d96:	b988      	cbnz	r0, 8015dbc <__swbuf_r+0x90>
 8015d98:	4638      	mov	r0, r7
 8015d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d9c:	4b0a      	ldr	r3, [pc, #40]	; (8015dc8 <__swbuf_r+0x9c>)
 8015d9e:	429c      	cmp	r4, r3
 8015da0:	d101      	bne.n	8015da6 <__swbuf_r+0x7a>
 8015da2:	68ac      	ldr	r4, [r5, #8]
 8015da4:	e7cf      	b.n	8015d46 <__swbuf_r+0x1a>
 8015da6:	4b09      	ldr	r3, [pc, #36]	; (8015dcc <__swbuf_r+0xa0>)
 8015da8:	429c      	cmp	r4, r3
 8015daa:	bf08      	it	eq
 8015dac:	68ec      	ldreq	r4, [r5, #12]
 8015dae:	e7ca      	b.n	8015d46 <__swbuf_r+0x1a>
 8015db0:	4621      	mov	r1, r4
 8015db2:	4628      	mov	r0, r5
 8015db4:	f000 f81a 	bl	8015dec <__swsetup_r>
 8015db8:	2800      	cmp	r0, #0
 8015dba:	d0cb      	beq.n	8015d54 <__swbuf_r+0x28>
 8015dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8015dc0:	e7ea      	b.n	8015d98 <__swbuf_r+0x6c>
 8015dc2:	bf00      	nop
 8015dc4:	0802ff6c 	.word	0x0802ff6c
 8015dc8:	0802ff8c 	.word	0x0802ff8c
 8015dcc:	0802ff4c 	.word	0x0802ff4c

08015dd0 <__ascii_wctomb>:
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	4608      	mov	r0, r1
 8015dd4:	b141      	cbz	r1, 8015de8 <__ascii_wctomb+0x18>
 8015dd6:	2aff      	cmp	r2, #255	; 0xff
 8015dd8:	d904      	bls.n	8015de4 <__ascii_wctomb+0x14>
 8015dda:	228a      	movs	r2, #138	; 0x8a
 8015ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8015de0:	601a      	str	r2, [r3, #0]
 8015de2:	4770      	bx	lr
 8015de4:	2001      	movs	r0, #1
 8015de6:	700a      	strb	r2, [r1, #0]
 8015de8:	4770      	bx	lr
	...

08015dec <__swsetup_r>:
 8015dec:	4b32      	ldr	r3, [pc, #200]	; (8015eb8 <__swsetup_r+0xcc>)
 8015dee:	b570      	push	{r4, r5, r6, lr}
 8015df0:	681d      	ldr	r5, [r3, #0]
 8015df2:	4606      	mov	r6, r0
 8015df4:	460c      	mov	r4, r1
 8015df6:	b125      	cbz	r5, 8015e02 <__swsetup_r+0x16>
 8015df8:	69ab      	ldr	r3, [r5, #24]
 8015dfa:	b913      	cbnz	r3, 8015e02 <__swsetup_r+0x16>
 8015dfc:	4628      	mov	r0, r5
 8015dfe:	f000 f981 	bl	8016104 <__sinit>
 8015e02:	4b2e      	ldr	r3, [pc, #184]	; (8015ebc <__swsetup_r+0xd0>)
 8015e04:	429c      	cmp	r4, r3
 8015e06:	d10f      	bne.n	8015e28 <__swsetup_r+0x3c>
 8015e08:	686c      	ldr	r4, [r5, #4]
 8015e0a:	89a3      	ldrh	r3, [r4, #12]
 8015e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e10:	0719      	lsls	r1, r3, #28
 8015e12:	d42c      	bmi.n	8015e6e <__swsetup_r+0x82>
 8015e14:	06dd      	lsls	r5, r3, #27
 8015e16:	d411      	bmi.n	8015e3c <__swsetup_r+0x50>
 8015e18:	2309      	movs	r3, #9
 8015e1a:	6033      	str	r3, [r6, #0]
 8015e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015e20:	f04f 30ff 	mov.w	r0, #4294967295
 8015e24:	81a3      	strh	r3, [r4, #12]
 8015e26:	e03e      	b.n	8015ea6 <__swsetup_r+0xba>
 8015e28:	4b25      	ldr	r3, [pc, #148]	; (8015ec0 <__swsetup_r+0xd4>)
 8015e2a:	429c      	cmp	r4, r3
 8015e2c:	d101      	bne.n	8015e32 <__swsetup_r+0x46>
 8015e2e:	68ac      	ldr	r4, [r5, #8]
 8015e30:	e7eb      	b.n	8015e0a <__swsetup_r+0x1e>
 8015e32:	4b24      	ldr	r3, [pc, #144]	; (8015ec4 <__swsetup_r+0xd8>)
 8015e34:	429c      	cmp	r4, r3
 8015e36:	bf08      	it	eq
 8015e38:	68ec      	ldreq	r4, [r5, #12]
 8015e3a:	e7e6      	b.n	8015e0a <__swsetup_r+0x1e>
 8015e3c:	0758      	lsls	r0, r3, #29
 8015e3e:	d512      	bpl.n	8015e66 <__swsetup_r+0x7a>
 8015e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e42:	b141      	cbz	r1, 8015e56 <__swsetup_r+0x6a>
 8015e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e48:	4299      	cmp	r1, r3
 8015e4a:	d002      	beq.n	8015e52 <__swsetup_r+0x66>
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	f7fd fc69 	bl	8013724 <_free_r>
 8015e52:	2300      	movs	r3, #0
 8015e54:	6363      	str	r3, [r4, #52]	; 0x34
 8015e56:	89a3      	ldrh	r3, [r4, #12]
 8015e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015e5c:	81a3      	strh	r3, [r4, #12]
 8015e5e:	2300      	movs	r3, #0
 8015e60:	6063      	str	r3, [r4, #4]
 8015e62:	6923      	ldr	r3, [r4, #16]
 8015e64:	6023      	str	r3, [r4, #0]
 8015e66:	89a3      	ldrh	r3, [r4, #12]
 8015e68:	f043 0308 	orr.w	r3, r3, #8
 8015e6c:	81a3      	strh	r3, [r4, #12]
 8015e6e:	6923      	ldr	r3, [r4, #16]
 8015e70:	b94b      	cbnz	r3, 8015e86 <__swsetup_r+0x9a>
 8015e72:	89a3      	ldrh	r3, [r4, #12]
 8015e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e7c:	d003      	beq.n	8015e86 <__swsetup_r+0x9a>
 8015e7e:	4621      	mov	r1, r4
 8015e80:	4630      	mov	r0, r6
 8015e82:	f000 fa01 	bl	8016288 <__smakebuf_r>
 8015e86:	89a0      	ldrh	r0, [r4, #12]
 8015e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e8c:	f010 0301 	ands.w	r3, r0, #1
 8015e90:	d00a      	beq.n	8015ea8 <__swsetup_r+0xbc>
 8015e92:	2300      	movs	r3, #0
 8015e94:	60a3      	str	r3, [r4, #8]
 8015e96:	6963      	ldr	r3, [r4, #20]
 8015e98:	425b      	negs	r3, r3
 8015e9a:	61a3      	str	r3, [r4, #24]
 8015e9c:	6923      	ldr	r3, [r4, #16]
 8015e9e:	b943      	cbnz	r3, 8015eb2 <__swsetup_r+0xc6>
 8015ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015ea4:	d1ba      	bne.n	8015e1c <__swsetup_r+0x30>
 8015ea6:	bd70      	pop	{r4, r5, r6, pc}
 8015ea8:	0781      	lsls	r1, r0, #30
 8015eaa:	bf58      	it	pl
 8015eac:	6963      	ldrpl	r3, [r4, #20]
 8015eae:	60a3      	str	r3, [r4, #8]
 8015eb0:	e7f4      	b.n	8015e9c <__swsetup_r+0xb0>
 8015eb2:	2000      	movs	r0, #0
 8015eb4:	e7f7      	b.n	8015ea6 <__swsetup_r+0xba>
 8015eb6:	bf00      	nop
 8015eb8:	20000174 	.word	0x20000174
 8015ebc:	0802ff6c 	.word	0x0802ff6c
 8015ec0:	0802ff8c 	.word	0x0802ff8c
 8015ec4:	0802ff4c 	.word	0x0802ff4c

08015ec8 <abort>:
 8015ec8:	2006      	movs	r0, #6
 8015eca:	b508      	push	{r3, lr}
 8015ecc:	f000 fa4c 	bl	8016368 <raise>
 8015ed0:	2001      	movs	r0, #1
 8015ed2:	f7ed fd9e 	bl	8003a12 <_exit>
	...

08015ed8 <__sflush_r>:
 8015ed8:	898a      	ldrh	r2, [r1, #12]
 8015eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015edc:	4605      	mov	r5, r0
 8015ede:	0710      	lsls	r0, r2, #28
 8015ee0:	460c      	mov	r4, r1
 8015ee2:	d457      	bmi.n	8015f94 <__sflush_r+0xbc>
 8015ee4:	684b      	ldr	r3, [r1, #4]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	dc04      	bgt.n	8015ef4 <__sflush_r+0x1c>
 8015eea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	dc01      	bgt.n	8015ef4 <__sflush_r+0x1c>
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ef6:	2e00      	cmp	r6, #0
 8015ef8:	d0fa      	beq.n	8015ef0 <__sflush_r+0x18>
 8015efa:	2300      	movs	r3, #0
 8015efc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015f00:	682f      	ldr	r7, [r5, #0]
 8015f02:	602b      	str	r3, [r5, #0]
 8015f04:	d032      	beq.n	8015f6c <__sflush_r+0x94>
 8015f06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015f08:	89a3      	ldrh	r3, [r4, #12]
 8015f0a:	075a      	lsls	r2, r3, #29
 8015f0c:	d505      	bpl.n	8015f1a <__sflush_r+0x42>
 8015f0e:	6863      	ldr	r3, [r4, #4]
 8015f10:	1ac0      	subs	r0, r0, r3
 8015f12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015f14:	b10b      	cbz	r3, 8015f1a <__sflush_r+0x42>
 8015f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f18:	1ac0      	subs	r0, r0, r3
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	4602      	mov	r2, r0
 8015f1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f20:	4628      	mov	r0, r5
 8015f22:	6a21      	ldr	r1, [r4, #32]
 8015f24:	47b0      	blx	r6
 8015f26:	1c43      	adds	r3, r0, #1
 8015f28:	89a3      	ldrh	r3, [r4, #12]
 8015f2a:	d106      	bne.n	8015f3a <__sflush_r+0x62>
 8015f2c:	6829      	ldr	r1, [r5, #0]
 8015f2e:	291d      	cmp	r1, #29
 8015f30:	d82c      	bhi.n	8015f8c <__sflush_r+0xb4>
 8015f32:	4a29      	ldr	r2, [pc, #164]	; (8015fd8 <__sflush_r+0x100>)
 8015f34:	40ca      	lsrs	r2, r1
 8015f36:	07d6      	lsls	r6, r2, #31
 8015f38:	d528      	bpl.n	8015f8c <__sflush_r+0xb4>
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	6062      	str	r2, [r4, #4]
 8015f3e:	6922      	ldr	r2, [r4, #16]
 8015f40:	04d9      	lsls	r1, r3, #19
 8015f42:	6022      	str	r2, [r4, #0]
 8015f44:	d504      	bpl.n	8015f50 <__sflush_r+0x78>
 8015f46:	1c42      	adds	r2, r0, #1
 8015f48:	d101      	bne.n	8015f4e <__sflush_r+0x76>
 8015f4a:	682b      	ldr	r3, [r5, #0]
 8015f4c:	b903      	cbnz	r3, 8015f50 <__sflush_r+0x78>
 8015f4e:	6560      	str	r0, [r4, #84]	; 0x54
 8015f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f52:	602f      	str	r7, [r5, #0]
 8015f54:	2900      	cmp	r1, #0
 8015f56:	d0cb      	beq.n	8015ef0 <__sflush_r+0x18>
 8015f58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f5c:	4299      	cmp	r1, r3
 8015f5e:	d002      	beq.n	8015f66 <__sflush_r+0x8e>
 8015f60:	4628      	mov	r0, r5
 8015f62:	f7fd fbdf 	bl	8013724 <_free_r>
 8015f66:	2000      	movs	r0, #0
 8015f68:	6360      	str	r0, [r4, #52]	; 0x34
 8015f6a:	e7c2      	b.n	8015ef2 <__sflush_r+0x1a>
 8015f6c:	6a21      	ldr	r1, [r4, #32]
 8015f6e:	2301      	movs	r3, #1
 8015f70:	4628      	mov	r0, r5
 8015f72:	47b0      	blx	r6
 8015f74:	1c41      	adds	r1, r0, #1
 8015f76:	d1c7      	bne.n	8015f08 <__sflush_r+0x30>
 8015f78:	682b      	ldr	r3, [r5, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d0c4      	beq.n	8015f08 <__sflush_r+0x30>
 8015f7e:	2b1d      	cmp	r3, #29
 8015f80:	d001      	beq.n	8015f86 <__sflush_r+0xae>
 8015f82:	2b16      	cmp	r3, #22
 8015f84:	d101      	bne.n	8015f8a <__sflush_r+0xb2>
 8015f86:	602f      	str	r7, [r5, #0]
 8015f88:	e7b2      	b.n	8015ef0 <__sflush_r+0x18>
 8015f8a:	89a3      	ldrh	r3, [r4, #12]
 8015f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f90:	81a3      	strh	r3, [r4, #12]
 8015f92:	e7ae      	b.n	8015ef2 <__sflush_r+0x1a>
 8015f94:	690f      	ldr	r7, [r1, #16]
 8015f96:	2f00      	cmp	r7, #0
 8015f98:	d0aa      	beq.n	8015ef0 <__sflush_r+0x18>
 8015f9a:	0793      	lsls	r3, r2, #30
 8015f9c:	bf18      	it	ne
 8015f9e:	2300      	movne	r3, #0
 8015fa0:	680e      	ldr	r6, [r1, #0]
 8015fa2:	bf08      	it	eq
 8015fa4:	694b      	ldreq	r3, [r1, #20]
 8015fa6:	1bf6      	subs	r6, r6, r7
 8015fa8:	600f      	str	r7, [r1, #0]
 8015faa:	608b      	str	r3, [r1, #8]
 8015fac:	2e00      	cmp	r6, #0
 8015fae:	dd9f      	ble.n	8015ef0 <__sflush_r+0x18>
 8015fb0:	4633      	mov	r3, r6
 8015fb2:	463a      	mov	r2, r7
 8015fb4:	4628      	mov	r0, r5
 8015fb6:	6a21      	ldr	r1, [r4, #32]
 8015fb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015fbc:	47e0      	blx	ip
 8015fbe:	2800      	cmp	r0, #0
 8015fc0:	dc06      	bgt.n	8015fd0 <__sflush_r+0xf8>
 8015fc2:	89a3      	ldrh	r3, [r4, #12]
 8015fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8015fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fcc:	81a3      	strh	r3, [r4, #12]
 8015fce:	e790      	b.n	8015ef2 <__sflush_r+0x1a>
 8015fd0:	4407      	add	r7, r0
 8015fd2:	1a36      	subs	r6, r6, r0
 8015fd4:	e7ea      	b.n	8015fac <__sflush_r+0xd4>
 8015fd6:	bf00      	nop
 8015fd8:	20400001 	.word	0x20400001

08015fdc <_fflush_r>:
 8015fdc:	b538      	push	{r3, r4, r5, lr}
 8015fde:	690b      	ldr	r3, [r1, #16]
 8015fe0:	4605      	mov	r5, r0
 8015fe2:	460c      	mov	r4, r1
 8015fe4:	b913      	cbnz	r3, 8015fec <_fflush_r+0x10>
 8015fe6:	2500      	movs	r5, #0
 8015fe8:	4628      	mov	r0, r5
 8015fea:	bd38      	pop	{r3, r4, r5, pc}
 8015fec:	b118      	cbz	r0, 8015ff6 <_fflush_r+0x1a>
 8015fee:	6983      	ldr	r3, [r0, #24]
 8015ff0:	b90b      	cbnz	r3, 8015ff6 <_fflush_r+0x1a>
 8015ff2:	f000 f887 	bl	8016104 <__sinit>
 8015ff6:	4b14      	ldr	r3, [pc, #80]	; (8016048 <_fflush_r+0x6c>)
 8015ff8:	429c      	cmp	r4, r3
 8015ffa:	d11b      	bne.n	8016034 <_fflush_r+0x58>
 8015ffc:	686c      	ldr	r4, [r5, #4]
 8015ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d0ef      	beq.n	8015fe6 <_fflush_r+0xa>
 8016006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016008:	07d0      	lsls	r0, r2, #31
 801600a:	d404      	bmi.n	8016016 <_fflush_r+0x3a>
 801600c:	0599      	lsls	r1, r3, #22
 801600e:	d402      	bmi.n	8016016 <_fflush_r+0x3a>
 8016010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016012:	f7ff fcd6 	bl	80159c2 <__retarget_lock_acquire_recursive>
 8016016:	4628      	mov	r0, r5
 8016018:	4621      	mov	r1, r4
 801601a:	f7ff ff5d 	bl	8015ed8 <__sflush_r>
 801601e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016020:	4605      	mov	r5, r0
 8016022:	07da      	lsls	r2, r3, #31
 8016024:	d4e0      	bmi.n	8015fe8 <_fflush_r+0xc>
 8016026:	89a3      	ldrh	r3, [r4, #12]
 8016028:	059b      	lsls	r3, r3, #22
 801602a:	d4dd      	bmi.n	8015fe8 <_fflush_r+0xc>
 801602c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801602e:	f7ff fcc9 	bl	80159c4 <__retarget_lock_release_recursive>
 8016032:	e7d9      	b.n	8015fe8 <_fflush_r+0xc>
 8016034:	4b05      	ldr	r3, [pc, #20]	; (801604c <_fflush_r+0x70>)
 8016036:	429c      	cmp	r4, r3
 8016038:	d101      	bne.n	801603e <_fflush_r+0x62>
 801603a:	68ac      	ldr	r4, [r5, #8]
 801603c:	e7df      	b.n	8015ffe <_fflush_r+0x22>
 801603e:	4b04      	ldr	r3, [pc, #16]	; (8016050 <_fflush_r+0x74>)
 8016040:	429c      	cmp	r4, r3
 8016042:	bf08      	it	eq
 8016044:	68ec      	ldreq	r4, [r5, #12]
 8016046:	e7da      	b.n	8015ffe <_fflush_r+0x22>
 8016048:	0802ff6c 	.word	0x0802ff6c
 801604c:	0802ff8c 	.word	0x0802ff8c
 8016050:	0802ff4c 	.word	0x0802ff4c

08016054 <std>:
 8016054:	2300      	movs	r3, #0
 8016056:	b510      	push	{r4, lr}
 8016058:	4604      	mov	r4, r0
 801605a:	e9c0 3300 	strd	r3, r3, [r0]
 801605e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016062:	6083      	str	r3, [r0, #8]
 8016064:	8181      	strh	r1, [r0, #12]
 8016066:	6643      	str	r3, [r0, #100]	; 0x64
 8016068:	81c2      	strh	r2, [r0, #14]
 801606a:	6183      	str	r3, [r0, #24]
 801606c:	4619      	mov	r1, r3
 801606e:	2208      	movs	r2, #8
 8016070:	305c      	adds	r0, #92	; 0x5c
 8016072:	f7fd fb4f 	bl	8013714 <memset>
 8016076:	4b05      	ldr	r3, [pc, #20]	; (801608c <std+0x38>)
 8016078:	6224      	str	r4, [r4, #32]
 801607a:	6263      	str	r3, [r4, #36]	; 0x24
 801607c:	4b04      	ldr	r3, [pc, #16]	; (8016090 <std+0x3c>)
 801607e:	62a3      	str	r3, [r4, #40]	; 0x28
 8016080:	4b04      	ldr	r3, [pc, #16]	; (8016094 <std+0x40>)
 8016082:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016084:	4b04      	ldr	r3, [pc, #16]	; (8016098 <std+0x44>)
 8016086:	6323      	str	r3, [r4, #48]	; 0x30
 8016088:	bd10      	pop	{r4, pc}
 801608a:	bf00      	nop
 801608c:	080163a1 	.word	0x080163a1
 8016090:	080163c3 	.word	0x080163c3
 8016094:	080163fb 	.word	0x080163fb
 8016098:	0801641f 	.word	0x0801641f

0801609c <_cleanup_r>:
 801609c:	4901      	ldr	r1, [pc, #4]	; (80160a4 <_cleanup_r+0x8>)
 801609e:	f000 b8af 	b.w	8016200 <_fwalk_reent>
 80160a2:	bf00      	nop
 80160a4:	08015fdd 	.word	0x08015fdd

080160a8 <__sfmoreglue>:
 80160a8:	2268      	movs	r2, #104	; 0x68
 80160aa:	b570      	push	{r4, r5, r6, lr}
 80160ac:	1e4d      	subs	r5, r1, #1
 80160ae:	4355      	muls	r5, r2
 80160b0:	460e      	mov	r6, r1
 80160b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80160b6:	f7fd fb9d 	bl	80137f4 <_malloc_r>
 80160ba:	4604      	mov	r4, r0
 80160bc:	b140      	cbz	r0, 80160d0 <__sfmoreglue+0x28>
 80160be:	2100      	movs	r1, #0
 80160c0:	e9c0 1600 	strd	r1, r6, [r0]
 80160c4:	300c      	adds	r0, #12
 80160c6:	60a0      	str	r0, [r4, #8]
 80160c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80160cc:	f7fd fb22 	bl	8013714 <memset>
 80160d0:	4620      	mov	r0, r4
 80160d2:	bd70      	pop	{r4, r5, r6, pc}

080160d4 <__sfp_lock_acquire>:
 80160d4:	4801      	ldr	r0, [pc, #4]	; (80160dc <__sfp_lock_acquire+0x8>)
 80160d6:	f7ff bc74 	b.w	80159c2 <__retarget_lock_acquire_recursive>
 80160da:	bf00      	nop
 80160dc:	200016e9 	.word	0x200016e9

080160e0 <__sfp_lock_release>:
 80160e0:	4801      	ldr	r0, [pc, #4]	; (80160e8 <__sfp_lock_release+0x8>)
 80160e2:	f7ff bc6f 	b.w	80159c4 <__retarget_lock_release_recursive>
 80160e6:	bf00      	nop
 80160e8:	200016e9 	.word	0x200016e9

080160ec <__sinit_lock_acquire>:
 80160ec:	4801      	ldr	r0, [pc, #4]	; (80160f4 <__sinit_lock_acquire+0x8>)
 80160ee:	f7ff bc68 	b.w	80159c2 <__retarget_lock_acquire_recursive>
 80160f2:	bf00      	nop
 80160f4:	200016ea 	.word	0x200016ea

080160f8 <__sinit_lock_release>:
 80160f8:	4801      	ldr	r0, [pc, #4]	; (8016100 <__sinit_lock_release+0x8>)
 80160fa:	f7ff bc63 	b.w	80159c4 <__retarget_lock_release_recursive>
 80160fe:	bf00      	nop
 8016100:	200016ea 	.word	0x200016ea

08016104 <__sinit>:
 8016104:	b510      	push	{r4, lr}
 8016106:	4604      	mov	r4, r0
 8016108:	f7ff fff0 	bl	80160ec <__sinit_lock_acquire>
 801610c:	69a3      	ldr	r3, [r4, #24]
 801610e:	b11b      	cbz	r3, 8016118 <__sinit+0x14>
 8016110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016114:	f7ff bff0 	b.w	80160f8 <__sinit_lock_release>
 8016118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801611c:	6523      	str	r3, [r4, #80]	; 0x50
 801611e:	4b13      	ldr	r3, [pc, #76]	; (801616c <__sinit+0x68>)
 8016120:	4a13      	ldr	r2, [pc, #76]	; (8016170 <__sinit+0x6c>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	62a2      	str	r2, [r4, #40]	; 0x28
 8016126:	42a3      	cmp	r3, r4
 8016128:	bf08      	it	eq
 801612a:	2301      	moveq	r3, #1
 801612c:	4620      	mov	r0, r4
 801612e:	bf08      	it	eq
 8016130:	61a3      	streq	r3, [r4, #24]
 8016132:	f000 f81f 	bl	8016174 <__sfp>
 8016136:	6060      	str	r0, [r4, #4]
 8016138:	4620      	mov	r0, r4
 801613a:	f000 f81b 	bl	8016174 <__sfp>
 801613e:	60a0      	str	r0, [r4, #8]
 8016140:	4620      	mov	r0, r4
 8016142:	f000 f817 	bl	8016174 <__sfp>
 8016146:	2200      	movs	r2, #0
 8016148:	2104      	movs	r1, #4
 801614a:	60e0      	str	r0, [r4, #12]
 801614c:	6860      	ldr	r0, [r4, #4]
 801614e:	f7ff ff81 	bl	8016054 <std>
 8016152:	2201      	movs	r2, #1
 8016154:	2109      	movs	r1, #9
 8016156:	68a0      	ldr	r0, [r4, #8]
 8016158:	f7ff ff7c 	bl	8016054 <std>
 801615c:	2202      	movs	r2, #2
 801615e:	2112      	movs	r1, #18
 8016160:	68e0      	ldr	r0, [r4, #12]
 8016162:	f7ff ff77 	bl	8016054 <std>
 8016166:	2301      	movs	r3, #1
 8016168:	61a3      	str	r3, [r4, #24]
 801616a:	e7d1      	b.n	8016110 <__sinit+0xc>
 801616c:	0802fbd4 	.word	0x0802fbd4
 8016170:	0801609d 	.word	0x0801609d

08016174 <__sfp>:
 8016174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016176:	4607      	mov	r7, r0
 8016178:	f7ff ffac 	bl	80160d4 <__sfp_lock_acquire>
 801617c:	4b1e      	ldr	r3, [pc, #120]	; (80161f8 <__sfp+0x84>)
 801617e:	681e      	ldr	r6, [r3, #0]
 8016180:	69b3      	ldr	r3, [r6, #24]
 8016182:	b913      	cbnz	r3, 801618a <__sfp+0x16>
 8016184:	4630      	mov	r0, r6
 8016186:	f7ff ffbd 	bl	8016104 <__sinit>
 801618a:	3648      	adds	r6, #72	; 0x48
 801618c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016190:	3b01      	subs	r3, #1
 8016192:	d503      	bpl.n	801619c <__sfp+0x28>
 8016194:	6833      	ldr	r3, [r6, #0]
 8016196:	b30b      	cbz	r3, 80161dc <__sfp+0x68>
 8016198:	6836      	ldr	r6, [r6, #0]
 801619a:	e7f7      	b.n	801618c <__sfp+0x18>
 801619c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80161a0:	b9d5      	cbnz	r5, 80161d8 <__sfp+0x64>
 80161a2:	4b16      	ldr	r3, [pc, #88]	; (80161fc <__sfp+0x88>)
 80161a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80161a8:	60e3      	str	r3, [r4, #12]
 80161aa:	6665      	str	r5, [r4, #100]	; 0x64
 80161ac:	f7ff fc08 	bl	80159c0 <__retarget_lock_init_recursive>
 80161b0:	f7ff ff96 	bl	80160e0 <__sfp_lock_release>
 80161b4:	2208      	movs	r2, #8
 80161b6:	4629      	mov	r1, r5
 80161b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80161bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80161c0:	6025      	str	r5, [r4, #0]
 80161c2:	61a5      	str	r5, [r4, #24]
 80161c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80161c8:	f7fd faa4 	bl	8013714 <memset>
 80161cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80161d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80161d4:	4620      	mov	r0, r4
 80161d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161d8:	3468      	adds	r4, #104	; 0x68
 80161da:	e7d9      	b.n	8016190 <__sfp+0x1c>
 80161dc:	2104      	movs	r1, #4
 80161de:	4638      	mov	r0, r7
 80161e0:	f7ff ff62 	bl	80160a8 <__sfmoreglue>
 80161e4:	4604      	mov	r4, r0
 80161e6:	6030      	str	r0, [r6, #0]
 80161e8:	2800      	cmp	r0, #0
 80161ea:	d1d5      	bne.n	8016198 <__sfp+0x24>
 80161ec:	f7ff ff78 	bl	80160e0 <__sfp_lock_release>
 80161f0:	230c      	movs	r3, #12
 80161f2:	603b      	str	r3, [r7, #0]
 80161f4:	e7ee      	b.n	80161d4 <__sfp+0x60>
 80161f6:	bf00      	nop
 80161f8:	0802fbd4 	.word	0x0802fbd4
 80161fc:	ffff0001 	.word	0xffff0001

08016200 <_fwalk_reent>:
 8016200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016204:	4606      	mov	r6, r0
 8016206:	4688      	mov	r8, r1
 8016208:	2700      	movs	r7, #0
 801620a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801620e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016212:	f1b9 0901 	subs.w	r9, r9, #1
 8016216:	d505      	bpl.n	8016224 <_fwalk_reent+0x24>
 8016218:	6824      	ldr	r4, [r4, #0]
 801621a:	2c00      	cmp	r4, #0
 801621c:	d1f7      	bne.n	801620e <_fwalk_reent+0xe>
 801621e:	4638      	mov	r0, r7
 8016220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016224:	89ab      	ldrh	r3, [r5, #12]
 8016226:	2b01      	cmp	r3, #1
 8016228:	d907      	bls.n	801623a <_fwalk_reent+0x3a>
 801622a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801622e:	3301      	adds	r3, #1
 8016230:	d003      	beq.n	801623a <_fwalk_reent+0x3a>
 8016232:	4629      	mov	r1, r5
 8016234:	4630      	mov	r0, r6
 8016236:	47c0      	blx	r8
 8016238:	4307      	orrs	r7, r0
 801623a:	3568      	adds	r5, #104	; 0x68
 801623c:	e7e9      	b.n	8016212 <_fwalk_reent+0x12>

0801623e <__swhatbuf_r>:
 801623e:	b570      	push	{r4, r5, r6, lr}
 8016240:	460e      	mov	r6, r1
 8016242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016246:	4614      	mov	r4, r2
 8016248:	2900      	cmp	r1, #0
 801624a:	461d      	mov	r5, r3
 801624c:	b096      	sub	sp, #88	; 0x58
 801624e:	da08      	bge.n	8016262 <__swhatbuf_r+0x24>
 8016250:	2200      	movs	r2, #0
 8016252:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016256:	602a      	str	r2, [r5, #0]
 8016258:	061a      	lsls	r2, r3, #24
 801625a:	d410      	bmi.n	801627e <__swhatbuf_r+0x40>
 801625c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016260:	e00e      	b.n	8016280 <__swhatbuf_r+0x42>
 8016262:	466a      	mov	r2, sp
 8016264:	f000 f902 	bl	801646c <_fstat_r>
 8016268:	2800      	cmp	r0, #0
 801626a:	dbf1      	blt.n	8016250 <__swhatbuf_r+0x12>
 801626c:	9a01      	ldr	r2, [sp, #4]
 801626e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016272:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016276:	425a      	negs	r2, r3
 8016278:	415a      	adcs	r2, r3
 801627a:	602a      	str	r2, [r5, #0]
 801627c:	e7ee      	b.n	801625c <__swhatbuf_r+0x1e>
 801627e:	2340      	movs	r3, #64	; 0x40
 8016280:	2000      	movs	r0, #0
 8016282:	6023      	str	r3, [r4, #0]
 8016284:	b016      	add	sp, #88	; 0x58
 8016286:	bd70      	pop	{r4, r5, r6, pc}

08016288 <__smakebuf_r>:
 8016288:	898b      	ldrh	r3, [r1, #12]
 801628a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801628c:	079d      	lsls	r5, r3, #30
 801628e:	4606      	mov	r6, r0
 8016290:	460c      	mov	r4, r1
 8016292:	d507      	bpl.n	80162a4 <__smakebuf_r+0x1c>
 8016294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016298:	6023      	str	r3, [r4, #0]
 801629a:	6123      	str	r3, [r4, #16]
 801629c:	2301      	movs	r3, #1
 801629e:	6163      	str	r3, [r4, #20]
 80162a0:	b002      	add	sp, #8
 80162a2:	bd70      	pop	{r4, r5, r6, pc}
 80162a4:	466a      	mov	r2, sp
 80162a6:	ab01      	add	r3, sp, #4
 80162a8:	f7ff ffc9 	bl	801623e <__swhatbuf_r>
 80162ac:	9900      	ldr	r1, [sp, #0]
 80162ae:	4605      	mov	r5, r0
 80162b0:	4630      	mov	r0, r6
 80162b2:	f7fd fa9f 	bl	80137f4 <_malloc_r>
 80162b6:	b948      	cbnz	r0, 80162cc <__smakebuf_r+0x44>
 80162b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162bc:	059a      	lsls	r2, r3, #22
 80162be:	d4ef      	bmi.n	80162a0 <__smakebuf_r+0x18>
 80162c0:	f023 0303 	bic.w	r3, r3, #3
 80162c4:	f043 0302 	orr.w	r3, r3, #2
 80162c8:	81a3      	strh	r3, [r4, #12]
 80162ca:	e7e3      	b.n	8016294 <__smakebuf_r+0xc>
 80162cc:	4b0d      	ldr	r3, [pc, #52]	; (8016304 <__smakebuf_r+0x7c>)
 80162ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80162d0:	89a3      	ldrh	r3, [r4, #12]
 80162d2:	6020      	str	r0, [r4, #0]
 80162d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162d8:	81a3      	strh	r3, [r4, #12]
 80162da:	9b00      	ldr	r3, [sp, #0]
 80162dc:	6120      	str	r0, [r4, #16]
 80162de:	6163      	str	r3, [r4, #20]
 80162e0:	9b01      	ldr	r3, [sp, #4]
 80162e2:	b15b      	cbz	r3, 80162fc <__smakebuf_r+0x74>
 80162e4:	4630      	mov	r0, r6
 80162e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162ea:	f000 f8d1 	bl	8016490 <_isatty_r>
 80162ee:	b128      	cbz	r0, 80162fc <__smakebuf_r+0x74>
 80162f0:	89a3      	ldrh	r3, [r4, #12]
 80162f2:	f023 0303 	bic.w	r3, r3, #3
 80162f6:	f043 0301 	orr.w	r3, r3, #1
 80162fa:	81a3      	strh	r3, [r4, #12]
 80162fc:	89a0      	ldrh	r0, [r4, #12]
 80162fe:	4305      	orrs	r5, r0
 8016300:	81a5      	strh	r5, [r4, #12]
 8016302:	e7cd      	b.n	80162a0 <__smakebuf_r+0x18>
 8016304:	0801609d 	.word	0x0801609d

08016308 <_malloc_usable_size_r>:
 8016308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801630c:	1f18      	subs	r0, r3, #4
 801630e:	2b00      	cmp	r3, #0
 8016310:	bfbc      	itt	lt
 8016312:	580b      	ldrlt	r3, [r1, r0]
 8016314:	18c0      	addlt	r0, r0, r3
 8016316:	4770      	bx	lr

08016318 <_raise_r>:
 8016318:	291f      	cmp	r1, #31
 801631a:	b538      	push	{r3, r4, r5, lr}
 801631c:	4604      	mov	r4, r0
 801631e:	460d      	mov	r5, r1
 8016320:	d904      	bls.n	801632c <_raise_r+0x14>
 8016322:	2316      	movs	r3, #22
 8016324:	6003      	str	r3, [r0, #0]
 8016326:	f04f 30ff 	mov.w	r0, #4294967295
 801632a:	bd38      	pop	{r3, r4, r5, pc}
 801632c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801632e:	b112      	cbz	r2, 8016336 <_raise_r+0x1e>
 8016330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016334:	b94b      	cbnz	r3, 801634a <_raise_r+0x32>
 8016336:	4620      	mov	r0, r4
 8016338:	f000 f830 	bl	801639c <_getpid_r>
 801633c:	462a      	mov	r2, r5
 801633e:	4601      	mov	r1, r0
 8016340:	4620      	mov	r0, r4
 8016342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016346:	f000 b817 	b.w	8016378 <_kill_r>
 801634a:	2b01      	cmp	r3, #1
 801634c:	d00a      	beq.n	8016364 <_raise_r+0x4c>
 801634e:	1c59      	adds	r1, r3, #1
 8016350:	d103      	bne.n	801635a <_raise_r+0x42>
 8016352:	2316      	movs	r3, #22
 8016354:	6003      	str	r3, [r0, #0]
 8016356:	2001      	movs	r0, #1
 8016358:	e7e7      	b.n	801632a <_raise_r+0x12>
 801635a:	2400      	movs	r4, #0
 801635c:	4628      	mov	r0, r5
 801635e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016362:	4798      	blx	r3
 8016364:	2000      	movs	r0, #0
 8016366:	e7e0      	b.n	801632a <_raise_r+0x12>

08016368 <raise>:
 8016368:	4b02      	ldr	r3, [pc, #8]	; (8016374 <raise+0xc>)
 801636a:	4601      	mov	r1, r0
 801636c:	6818      	ldr	r0, [r3, #0]
 801636e:	f7ff bfd3 	b.w	8016318 <_raise_r>
 8016372:	bf00      	nop
 8016374:	20000174 	.word	0x20000174

08016378 <_kill_r>:
 8016378:	b538      	push	{r3, r4, r5, lr}
 801637a:	2300      	movs	r3, #0
 801637c:	4d06      	ldr	r5, [pc, #24]	; (8016398 <_kill_r+0x20>)
 801637e:	4604      	mov	r4, r0
 8016380:	4608      	mov	r0, r1
 8016382:	4611      	mov	r1, r2
 8016384:	602b      	str	r3, [r5, #0]
 8016386:	f7ed fb34 	bl	80039f2 <_kill>
 801638a:	1c43      	adds	r3, r0, #1
 801638c:	d102      	bne.n	8016394 <_kill_r+0x1c>
 801638e:	682b      	ldr	r3, [r5, #0]
 8016390:	b103      	cbz	r3, 8016394 <_kill_r+0x1c>
 8016392:	6023      	str	r3, [r4, #0]
 8016394:	bd38      	pop	{r3, r4, r5, pc}
 8016396:	bf00      	nop
 8016398:	200016e4 	.word	0x200016e4

0801639c <_getpid_r>:
 801639c:	f7ed bb22 	b.w	80039e4 <_getpid>

080163a0 <__sread>:
 80163a0:	b510      	push	{r4, lr}
 80163a2:	460c      	mov	r4, r1
 80163a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163a8:	f000 f894 	bl	80164d4 <_read_r>
 80163ac:	2800      	cmp	r0, #0
 80163ae:	bfab      	itete	ge
 80163b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80163b2:	89a3      	ldrhlt	r3, [r4, #12]
 80163b4:	181b      	addge	r3, r3, r0
 80163b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80163ba:	bfac      	ite	ge
 80163bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80163be:	81a3      	strhlt	r3, [r4, #12]
 80163c0:	bd10      	pop	{r4, pc}

080163c2 <__swrite>:
 80163c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163c6:	461f      	mov	r7, r3
 80163c8:	898b      	ldrh	r3, [r1, #12]
 80163ca:	4605      	mov	r5, r0
 80163cc:	05db      	lsls	r3, r3, #23
 80163ce:	460c      	mov	r4, r1
 80163d0:	4616      	mov	r6, r2
 80163d2:	d505      	bpl.n	80163e0 <__swrite+0x1e>
 80163d4:	2302      	movs	r3, #2
 80163d6:	2200      	movs	r2, #0
 80163d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163dc:	f000 f868 	bl	80164b0 <_lseek_r>
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	4632      	mov	r2, r6
 80163e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163e8:	81a3      	strh	r3, [r4, #12]
 80163ea:	4628      	mov	r0, r5
 80163ec:	463b      	mov	r3, r7
 80163ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163f6:	f000 b817 	b.w	8016428 <_write_r>

080163fa <__sseek>:
 80163fa:	b510      	push	{r4, lr}
 80163fc:	460c      	mov	r4, r1
 80163fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016402:	f000 f855 	bl	80164b0 <_lseek_r>
 8016406:	1c43      	adds	r3, r0, #1
 8016408:	89a3      	ldrh	r3, [r4, #12]
 801640a:	bf15      	itete	ne
 801640c:	6560      	strne	r0, [r4, #84]	; 0x54
 801640e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016416:	81a3      	strheq	r3, [r4, #12]
 8016418:	bf18      	it	ne
 801641a:	81a3      	strhne	r3, [r4, #12]
 801641c:	bd10      	pop	{r4, pc}

0801641e <__sclose>:
 801641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016422:	f000 b813 	b.w	801644c <_close_r>
	...

08016428 <_write_r>:
 8016428:	b538      	push	{r3, r4, r5, lr}
 801642a:	4604      	mov	r4, r0
 801642c:	4608      	mov	r0, r1
 801642e:	4611      	mov	r1, r2
 8016430:	2200      	movs	r2, #0
 8016432:	4d05      	ldr	r5, [pc, #20]	; (8016448 <_write_r+0x20>)
 8016434:	602a      	str	r2, [r5, #0]
 8016436:	461a      	mov	r2, r3
 8016438:	f7ed fb12 	bl	8003a60 <_write>
 801643c:	1c43      	adds	r3, r0, #1
 801643e:	d102      	bne.n	8016446 <_write_r+0x1e>
 8016440:	682b      	ldr	r3, [r5, #0]
 8016442:	b103      	cbz	r3, 8016446 <_write_r+0x1e>
 8016444:	6023      	str	r3, [r4, #0]
 8016446:	bd38      	pop	{r3, r4, r5, pc}
 8016448:	200016e4 	.word	0x200016e4

0801644c <_close_r>:
 801644c:	b538      	push	{r3, r4, r5, lr}
 801644e:	2300      	movs	r3, #0
 8016450:	4d05      	ldr	r5, [pc, #20]	; (8016468 <_close_r+0x1c>)
 8016452:	4604      	mov	r4, r0
 8016454:	4608      	mov	r0, r1
 8016456:	602b      	str	r3, [r5, #0]
 8016458:	f7ed fb1e 	bl	8003a98 <_close>
 801645c:	1c43      	adds	r3, r0, #1
 801645e:	d102      	bne.n	8016466 <_close_r+0x1a>
 8016460:	682b      	ldr	r3, [r5, #0]
 8016462:	b103      	cbz	r3, 8016466 <_close_r+0x1a>
 8016464:	6023      	str	r3, [r4, #0]
 8016466:	bd38      	pop	{r3, r4, r5, pc}
 8016468:	200016e4 	.word	0x200016e4

0801646c <_fstat_r>:
 801646c:	b538      	push	{r3, r4, r5, lr}
 801646e:	2300      	movs	r3, #0
 8016470:	4d06      	ldr	r5, [pc, #24]	; (801648c <_fstat_r+0x20>)
 8016472:	4604      	mov	r4, r0
 8016474:	4608      	mov	r0, r1
 8016476:	4611      	mov	r1, r2
 8016478:	602b      	str	r3, [r5, #0]
 801647a:	f7ed fb18 	bl	8003aae <_fstat>
 801647e:	1c43      	adds	r3, r0, #1
 8016480:	d102      	bne.n	8016488 <_fstat_r+0x1c>
 8016482:	682b      	ldr	r3, [r5, #0]
 8016484:	b103      	cbz	r3, 8016488 <_fstat_r+0x1c>
 8016486:	6023      	str	r3, [r4, #0]
 8016488:	bd38      	pop	{r3, r4, r5, pc}
 801648a:	bf00      	nop
 801648c:	200016e4 	.word	0x200016e4

08016490 <_isatty_r>:
 8016490:	b538      	push	{r3, r4, r5, lr}
 8016492:	2300      	movs	r3, #0
 8016494:	4d05      	ldr	r5, [pc, #20]	; (80164ac <_isatty_r+0x1c>)
 8016496:	4604      	mov	r4, r0
 8016498:	4608      	mov	r0, r1
 801649a:	602b      	str	r3, [r5, #0]
 801649c:	f7ed fb16 	bl	8003acc <_isatty>
 80164a0:	1c43      	adds	r3, r0, #1
 80164a2:	d102      	bne.n	80164aa <_isatty_r+0x1a>
 80164a4:	682b      	ldr	r3, [r5, #0]
 80164a6:	b103      	cbz	r3, 80164aa <_isatty_r+0x1a>
 80164a8:	6023      	str	r3, [r4, #0]
 80164aa:	bd38      	pop	{r3, r4, r5, pc}
 80164ac:	200016e4 	.word	0x200016e4

080164b0 <_lseek_r>:
 80164b0:	b538      	push	{r3, r4, r5, lr}
 80164b2:	4604      	mov	r4, r0
 80164b4:	4608      	mov	r0, r1
 80164b6:	4611      	mov	r1, r2
 80164b8:	2200      	movs	r2, #0
 80164ba:	4d05      	ldr	r5, [pc, #20]	; (80164d0 <_lseek_r+0x20>)
 80164bc:	602a      	str	r2, [r5, #0]
 80164be:	461a      	mov	r2, r3
 80164c0:	f7ed fb0e 	bl	8003ae0 <_lseek>
 80164c4:	1c43      	adds	r3, r0, #1
 80164c6:	d102      	bne.n	80164ce <_lseek_r+0x1e>
 80164c8:	682b      	ldr	r3, [r5, #0]
 80164ca:	b103      	cbz	r3, 80164ce <_lseek_r+0x1e>
 80164cc:	6023      	str	r3, [r4, #0]
 80164ce:	bd38      	pop	{r3, r4, r5, pc}
 80164d0:	200016e4 	.word	0x200016e4

080164d4 <_read_r>:
 80164d4:	b538      	push	{r3, r4, r5, lr}
 80164d6:	4604      	mov	r4, r0
 80164d8:	4608      	mov	r0, r1
 80164da:	4611      	mov	r1, r2
 80164dc:	2200      	movs	r2, #0
 80164de:	4d05      	ldr	r5, [pc, #20]	; (80164f4 <_read_r+0x20>)
 80164e0:	602a      	str	r2, [r5, #0]
 80164e2:	461a      	mov	r2, r3
 80164e4:	f7ed fa9f 	bl	8003a26 <_read>
 80164e8:	1c43      	adds	r3, r0, #1
 80164ea:	d102      	bne.n	80164f2 <_read_r+0x1e>
 80164ec:	682b      	ldr	r3, [r5, #0]
 80164ee:	b103      	cbz	r3, 80164f2 <_read_r+0x1e>
 80164f0:	6023      	str	r3, [r4, #0]
 80164f2:	bd38      	pop	{r3, r4, r5, pc}
 80164f4:	200016e4 	.word	0x200016e4

080164f8 <fmin>:
 80164f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164fa:	4604      	mov	r4, r0
 80164fc:	460d      	mov	r5, r1
 80164fe:	4616      	mov	r6, r2
 8016500:	461f      	mov	r7, r3
 8016502:	f000 f813 	bl	801652c <__fpclassifyd>
 8016506:	b158      	cbz	r0, 8016520 <fmin+0x28>
 8016508:	4630      	mov	r0, r6
 801650a:	4639      	mov	r1, r7
 801650c:	f000 f80e 	bl	801652c <__fpclassifyd>
 8016510:	b140      	cbz	r0, 8016524 <fmin+0x2c>
 8016512:	4632      	mov	r2, r6
 8016514:	463b      	mov	r3, r7
 8016516:	4620      	mov	r0, r4
 8016518:	4629      	mov	r1, r5
 801651a:	f7ea fabb 	bl	8000a94 <__aeabi_dcmplt>
 801651e:	b908      	cbnz	r0, 8016524 <fmin+0x2c>
 8016520:	4634      	mov	r4, r6
 8016522:	463d      	mov	r5, r7
 8016524:	4620      	mov	r0, r4
 8016526:	4629      	mov	r1, r5
 8016528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801652c <__fpclassifyd>:
 801652c:	b510      	push	{r4, lr}
 801652e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8016532:	460b      	mov	r3, r1
 8016534:	d019      	beq.n	801656a <__fpclassifyd+0x3e>
 8016536:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801653a:	490e      	ldr	r1, [pc, #56]	; (8016574 <__fpclassifyd+0x48>)
 801653c:	428a      	cmp	r2, r1
 801653e:	d90e      	bls.n	801655e <__fpclassifyd+0x32>
 8016540:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8016544:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8016548:	428a      	cmp	r2, r1
 801654a:	d908      	bls.n	801655e <__fpclassifyd+0x32>
 801654c:	4a0a      	ldr	r2, [pc, #40]	; (8016578 <__fpclassifyd+0x4c>)
 801654e:	4213      	tst	r3, r2
 8016550:	d007      	beq.n	8016562 <__fpclassifyd+0x36>
 8016552:	4294      	cmp	r4, r2
 8016554:	d107      	bne.n	8016566 <__fpclassifyd+0x3a>
 8016556:	fab0 f080 	clz	r0, r0
 801655a:	0940      	lsrs	r0, r0, #5
 801655c:	bd10      	pop	{r4, pc}
 801655e:	2004      	movs	r0, #4
 8016560:	e7fc      	b.n	801655c <__fpclassifyd+0x30>
 8016562:	2003      	movs	r0, #3
 8016564:	e7fa      	b.n	801655c <__fpclassifyd+0x30>
 8016566:	2000      	movs	r0, #0
 8016568:	e7f8      	b.n	801655c <__fpclassifyd+0x30>
 801656a:	2800      	cmp	r0, #0
 801656c:	d1ee      	bne.n	801654c <__fpclassifyd+0x20>
 801656e:	2002      	movs	r0, #2
 8016570:	e7f4      	b.n	801655c <__fpclassifyd+0x30>
 8016572:	bf00      	nop
 8016574:	7fdfffff 	.word	0x7fdfffff
 8016578:	7ff00000 	.word	0x7ff00000

0801657c <sqrt>:
 801657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801657e:	4606      	mov	r6, r0
 8016580:	460f      	mov	r7, r1
 8016582:	f000 f81f 	bl	80165c4 <__ieee754_sqrt>
 8016586:	4632      	mov	r2, r6
 8016588:	4604      	mov	r4, r0
 801658a:	460d      	mov	r5, r1
 801658c:	463b      	mov	r3, r7
 801658e:	4630      	mov	r0, r6
 8016590:	4639      	mov	r1, r7
 8016592:	f7ea faa7 	bl	8000ae4 <__aeabi_dcmpun>
 8016596:	b990      	cbnz	r0, 80165be <sqrt+0x42>
 8016598:	2200      	movs	r2, #0
 801659a:	2300      	movs	r3, #0
 801659c:	4630      	mov	r0, r6
 801659e:	4639      	mov	r1, r7
 80165a0:	f7ea fa78 	bl	8000a94 <__aeabi_dcmplt>
 80165a4:	b158      	cbz	r0, 80165be <sqrt+0x42>
 80165a6:	f7fd f87b 	bl	80136a0 <__errno>
 80165aa:	2321      	movs	r3, #33	; 0x21
 80165ac:	2200      	movs	r2, #0
 80165ae:	6003      	str	r3, [r0, #0]
 80165b0:	2300      	movs	r3, #0
 80165b2:	4610      	mov	r0, r2
 80165b4:	4619      	mov	r1, r3
 80165b6:	f7ea f925 	bl	8000804 <__aeabi_ddiv>
 80165ba:	4604      	mov	r4, r0
 80165bc:	460d      	mov	r5, r1
 80165be:	4620      	mov	r0, r4
 80165c0:	4629      	mov	r1, r5
 80165c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080165c4 <__ieee754_sqrt>:
 80165c4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8016720 <__ieee754_sqrt+0x15c>
 80165c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80165d0:	4606      	mov	r6, r0
 80165d2:	460d      	mov	r5, r1
 80165d4:	460c      	mov	r4, r1
 80165d6:	460a      	mov	r2, r1
 80165d8:	4607      	mov	r7, r0
 80165da:	4603      	mov	r3, r0
 80165dc:	d10f      	bne.n	80165fe <__ieee754_sqrt+0x3a>
 80165de:	4602      	mov	r2, r0
 80165e0:	460b      	mov	r3, r1
 80165e2:	f7e9 ffe5 	bl	80005b0 <__aeabi_dmul>
 80165e6:	4602      	mov	r2, r0
 80165e8:	460b      	mov	r3, r1
 80165ea:	4630      	mov	r0, r6
 80165ec:	4629      	mov	r1, r5
 80165ee:	f7e9 fe29 	bl	8000244 <__adddf3>
 80165f2:	4606      	mov	r6, r0
 80165f4:	460d      	mov	r5, r1
 80165f6:	4630      	mov	r0, r6
 80165f8:	4629      	mov	r1, r5
 80165fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165fe:	2900      	cmp	r1, #0
 8016600:	dc0e      	bgt.n	8016620 <__ieee754_sqrt+0x5c>
 8016602:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8016606:	ea5c 0707 	orrs.w	r7, ip, r7
 801660a:	d0f4      	beq.n	80165f6 <__ieee754_sqrt+0x32>
 801660c:	b141      	cbz	r1, 8016620 <__ieee754_sqrt+0x5c>
 801660e:	4602      	mov	r2, r0
 8016610:	460b      	mov	r3, r1
 8016612:	f7e9 fe15 	bl	8000240 <__aeabi_dsub>
 8016616:	4602      	mov	r2, r0
 8016618:	460b      	mov	r3, r1
 801661a:	f7ea f8f3 	bl	8000804 <__aeabi_ddiv>
 801661e:	e7e8      	b.n	80165f2 <__ieee754_sqrt+0x2e>
 8016620:	1521      	asrs	r1, r4, #20
 8016622:	d075      	beq.n	8016710 <__ieee754_sqrt+0x14c>
 8016624:	07cc      	lsls	r4, r1, #31
 8016626:	f04f 0400 	mov.w	r4, #0
 801662a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801662e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8016632:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8016636:	bf5e      	ittt	pl
 8016638:	0fd9      	lsrpl	r1, r3, #31
 801663a:	005b      	lslpl	r3, r3, #1
 801663c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8016640:	0fd9      	lsrs	r1, r3, #31
 8016642:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8016646:	2516      	movs	r5, #22
 8016648:	4620      	mov	r0, r4
 801664a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801664e:	107f      	asrs	r7, r7, #1
 8016650:	005b      	lsls	r3, r3, #1
 8016652:	1846      	adds	r6, r0, r1
 8016654:	4296      	cmp	r6, r2
 8016656:	bfde      	ittt	le
 8016658:	1b92      	suble	r2, r2, r6
 801665a:	1870      	addle	r0, r6, r1
 801665c:	1864      	addle	r4, r4, r1
 801665e:	0052      	lsls	r2, r2, #1
 8016660:	3d01      	subs	r5, #1
 8016662:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8016666:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801666a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801666e:	d1f0      	bne.n	8016652 <__ieee754_sqrt+0x8e>
 8016670:	4629      	mov	r1, r5
 8016672:	f04f 0e20 	mov.w	lr, #32
 8016676:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801667a:	4282      	cmp	r2, r0
 801667c:	eb06 0c05 	add.w	ip, r6, r5
 8016680:	dc02      	bgt.n	8016688 <__ieee754_sqrt+0xc4>
 8016682:	d113      	bne.n	80166ac <__ieee754_sqrt+0xe8>
 8016684:	459c      	cmp	ip, r3
 8016686:	d811      	bhi.n	80166ac <__ieee754_sqrt+0xe8>
 8016688:	f1bc 0f00 	cmp.w	ip, #0
 801668c:	eb0c 0506 	add.w	r5, ip, r6
 8016690:	da43      	bge.n	801671a <__ieee754_sqrt+0x156>
 8016692:	2d00      	cmp	r5, #0
 8016694:	db41      	blt.n	801671a <__ieee754_sqrt+0x156>
 8016696:	f100 0801 	add.w	r8, r0, #1
 801669a:	1a12      	subs	r2, r2, r0
 801669c:	4640      	mov	r0, r8
 801669e:	459c      	cmp	ip, r3
 80166a0:	bf88      	it	hi
 80166a2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80166a6:	eba3 030c 	sub.w	r3, r3, ip
 80166aa:	4431      	add	r1, r6
 80166ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80166b0:	f1be 0e01 	subs.w	lr, lr, #1
 80166b4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80166b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80166bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80166c0:	d1db      	bne.n	801667a <__ieee754_sqrt+0xb6>
 80166c2:	4313      	orrs	r3, r2
 80166c4:	d006      	beq.n	80166d4 <__ieee754_sqrt+0x110>
 80166c6:	1c48      	adds	r0, r1, #1
 80166c8:	bf0b      	itete	eq
 80166ca:	4671      	moveq	r1, lr
 80166cc:	3101      	addne	r1, #1
 80166ce:	3401      	addeq	r4, #1
 80166d0:	f021 0101 	bicne.w	r1, r1, #1
 80166d4:	1063      	asrs	r3, r4, #1
 80166d6:	0849      	lsrs	r1, r1, #1
 80166d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80166dc:	07e2      	lsls	r2, r4, #31
 80166de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80166e2:	bf48      	it	mi
 80166e4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80166e8:	460e      	mov	r6, r1
 80166ea:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80166ee:	e782      	b.n	80165f6 <__ieee754_sqrt+0x32>
 80166f0:	0ada      	lsrs	r2, r3, #11
 80166f2:	3815      	subs	r0, #21
 80166f4:	055b      	lsls	r3, r3, #21
 80166f6:	2a00      	cmp	r2, #0
 80166f8:	d0fa      	beq.n	80166f0 <__ieee754_sqrt+0x12c>
 80166fa:	02d5      	lsls	r5, r2, #11
 80166fc:	d50a      	bpl.n	8016714 <__ieee754_sqrt+0x150>
 80166fe:	f1c1 0420 	rsb	r4, r1, #32
 8016702:	fa23 f404 	lsr.w	r4, r3, r4
 8016706:	1e4d      	subs	r5, r1, #1
 8016708:	408b      	lsls	r3, r1
 801670a:	4322      	orrs	r2, r4
 801670c:	1b41      	subs	r1, r0, r5
 801670e:	e789      	b.n	8016624 <__ieee754_sqrt+0x60>
 8016710:	4608      	mov	r0, r1
 8016712:	e7f0      	b.n	80166f6 <__ieee754_sqrt+0x132>
 8016714:	0052      	lsls	r2, r2, #1
 8016716:	3101      	adds	r1, #1
 8016718:	e7ef      	b.n	80166fa <__ieee754_sqrt+0x136>
 801671a:	4680      	mov	r8, r0
 801671c:	e7bd      	b.n	801669a <__ieee754_sqrt+0xd6>
 801671e:	bf00      	nop
 8016720:	7ff00000 	.word	0x7ff00000

08016724 <_init>:
 8016724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016726:	bf00      	nop
 8016728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801672a:	bc08      	pop	{r3}
 801672c:	469e      	mov	lr, r3
 801672e:	4770      	bx	lr

08016730 <_fini>:
 8016730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016732:	bf00      	nop
 8016734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016736:	bc08      	pop	{r3}
 8016738:	469e      	mov	lr, r3
 801673a:	4770      	bx	lr
