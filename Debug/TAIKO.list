
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ed4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019844  080160c0  080160c0  000260c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f904  0802f904  00040344  2**0
                  CONTENTS
  4 .ARM          00000000  0802f904  0802f904  00040344  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802f904  0802f904  00040344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f904  0802f904  0003f904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f908  0802f908  0003f908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  0802f90c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  20000348  0802fc50  00040348  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200016d0  0802fc50  000416d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028415  00000000  00000000  0004036d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c0a  00000000  00000000  00068782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022c8  00000000  00000000  0006e390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  00070658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002202a  00000000  00000000  000726b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d141  00000000  00000000  000946da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b2e8f  00000000  00000000  000c181b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001746aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a490  00000000  00000000  001746fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000348 	.word	0x20000348
 8000204:	00000000 	.word	0x00000000
 8000208:	080160a4 	.word	0x080160a4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000034c 	.word	0x2000034c
 8000224:	080160a4 	.word	0x080160a4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <AddDrum>:

AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <AddDrum+0x38>)
 8000bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 8000bb2:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <AddDrum+0x3c>)
 8000bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8000bbc:	81bb      	strh	r3, [r7, #12]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	81fb      	strh	r3, [r7, #14]
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bca:	f000 f809 	bl	8000be0 <AddTrack>
		.pos = 0
	});
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000000 	.word	0x20000000
 8000bdc:	08016254 	.word	0x08016254

08000be0 <AddTrack>:

void AddTrack(AudioTrack track) {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	463b      	mov	r3, r7
 8000be8:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <AddTrack+0x3c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b09      	cmp	r3, #9
 8000bf2:	dc0d      	bgt.n	8000c10 <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <AddTrack+0x3c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <AddTrack+0x3c>)
 8000bfc:	600a      	str	r2, [r1, #0]
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <AddTrack+0x40>)
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	4413      	add	r3, r2
 8000c04:	463a      	mov	r2, r7
 8000c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c0a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c0e:	e000      	b.n	8000c12 <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 8000c10:	bf00      	nop
}
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	2000079c 	.word	0x2000079c
 8000c20:	2000074c 	.word	0x2000074c

08000c24 <RemoveTrack>:

void RemoveTrack(uint16_t index) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	if (num_tracks <= 0) return;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <RemoveTrack+0x44>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	dd12      	ble.n	8000c5c <RemoveTrack+0x38>
	audio_tracks[index] = audio_tracks[--num_tracks];
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <RemoveTrack+0x44>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <RemoveTrack+0x44>)
 8000c3e:	6013      	str	r3, [r2, #0]
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <RemoveTrack+0x44>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <RemoveTrack+0x48>)
 8000c48:	4908      	ldr	r1, [pc, #32]	; (8000c6c <RemoveTrack+0x48>)
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4403      	add	r3, r0
 8000c4e:	00d2      	lsls	r2, r2, #3
 8000c50:	440a      	add	r2, r1
 8000c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c56:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c5a:	e000      	b.n	8000c5e <RemoveTrack+0x3a>
	if (num_tracks <= 0) return;
 8000c5c:	bf00      	nop
}
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000079c 	.word	0x2000079c
 8000c6c:	2000074c 	.word	0x2000074c

08000c70 <PrecomputeMix>:

void PrecomputeMix() {
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8000c76:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <PrecomputeMix+0x15c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	dc11      	bgt.n	8000ca2 <PrecomputeMix+0x32>
		if (audio_dma_on) {
 8000c7e:	4b54      	ldr	r3, [pc, #336]	; (8000dd0 <PrecomputeMix+0x160>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <PrecomputeMix+0x24>
			HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000c86:	2100      	movs	r1, #0
 8000c88:	4852      	ldr	r0, [pc, #328]	; (8000dd4 <PrecomputeMix+0x164>)
 8000c8a:	f003 fa3d 	bl	8004108 <HAL_DAC_Stop_DMA>
			audio_dma_on = 0;
 8000c8e:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <PrecomputeMix+0x160>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
		}
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8000c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c98:	2100      	movs	r1, #0
 8000c9a:	484f      	ldr	r0, [pc, #316]	; (8000dd8 <PrecomputeMix+0x168>)
 8000c9c:	f012 f9f8 	bl	8013090 <memset>
			}
		}

	}

}
 8000ca0:	e090      	b.n	8000dc4 <PrecomputeMix+0x154>
		if (!audio_dma_on) {
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <PrecomputeMix+0x160>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d126      	bne.n	8000cf8 <PrecomputeMix+0x88>
			HAL_TIM_Base_Stop(&htim2);
 8000caa:	484c      	ldr	r0, [pc, #304]	; (8000ddc <PrecomputeMix+0x16c>)
 8000cac:	f009 faba 	bl	800a224 <HAL_TIM_Base_Stop>
			HAL_TIM_Base_Stop(&htim4);
 8000cb0:	484b      	ldr	r0, [pc, #300]	; (8000de0 <PrecomputeMix+0x170>)
 8000cb2:	f009 fab7 	bl	800a224 <HAL_TIM_Base_Stop>
			HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cbe:	4a46      	ldr	r2, [pc, #280]	; (8000dd8 <PrecomputeMix+0x168>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4844      	ldr	r0, [pc, #272]	; (8000dd4 <PrecomputeMix+0x164>)
 8000cc4:	f003 f970 	bl	8003fa8 <HAL_DAC_Start_DMA>
			TIM2->CNT = 0;
 8000cc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
			TIM4->CNT = 0;
 8000cd0:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <PrecomputeMix+0x174>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim4);
 8000cd6:	4842      	ldr	r0, [pc, #264]	; (8000de0 <PrecomputeMix+0x170>)
 8000cd8:	f009 faca 	bl	800a270 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start(&htim2);
 8000cdc:	483f      	ldr	r0, [pc, #252]	; (8000ddc <PrecomputeMix+0x16c>)
 8000cde:	f009 fa49 	bl	800a174 <HAL_TIM_Base_Start>
			__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	; (8000ddc <PrecomputeMix+0x16c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <PrecomputeMix+0x16c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 0201 	orr.w	r2, r2, #1
 8000cf0:	60da      	str	r2, [r3, #12]
			audio_dma_on = 1;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <PrecomputeMix+0x160>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e05e      	b.n	8000dbc <PrecomputeMix+0x14c>
			int32_t sum = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
			int j = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 8000d06:	e033      	b.n	8000d70 <PrecomputeMix+0x100>
				sum += audio_tracks[j].buff[audio_tracks[j].pos++] / 4;
 8000d08:	4a37      	ldr	r2, [pc, #220]	; (8000de8 <PrecomputeMix+0x178>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000d10:	4a35      	ldr	r2, [pc, #212]	; (8000de8 <PrecomputeMix+0x178>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	4413      	add	r3, r2
 8000d18:	88da      	ldrh	r2, [r3, #6]
 8000d1a:	1c53      	adds	r3, r2, #1
 8000d1c:	b29c      	uxth	r4, r3
 8000d1e:	4832      	ldr	r0, [pc, #200]	; (8000de8 <PrecomputeMix+0x178>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4403      	add	r3, r0
 8000d26:	4620      	mov	r0, r4
 8000d28:	80d8      	strh	r0, [r3, #6]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	440b      	add	r3, r1
 8000d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	da00      	bge.n	8000d3a <PrecomputeMix+0xca>
 8000d38:	3303      	adds	r3, #3
 8000d3a:	109b      	asrs	r3, r3, #2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4413      	add	r3, r2
 8000d44:	60bb      	str	r3, [r7, #8]
				if (audio_tracks[j].pos > audio_tracks[j].length) {
 8000d46:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <PrecomputeMix+0x178>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	88da      	ldrh	r2, [r3, #6]
 8000d50:	4925      	ldr	r1, [pc, #148]	; (8000de8 <PrecomputeMix+0x178>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	889b      	ldrh	r3, [r3, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d905      	bls.n	8000d6a <PrecomputeMix+0xfa>
					RemoveTrack(j);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff5e 	bl	8000c24 <RemoveTrack>
 8000d68:	e002      	b.n	8000d70 <PrecomputeMix+0x100>
					j++;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
			while (j < num_tracks) {
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <PrecomputeMix+0x15c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dbc6      	blt.n	8000d08 <PrecomputeMix+0x98>
			if (sum < -32768) {
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000d80:	da05      	bge.n	8000d8e <PrecomputeMix+0x11e>
				audio_buff[i] = 0;
 8000d82:	4a15      	ldr	r2, [pc, #84]	; (8000dd8 <PrecomputeMix+0x168>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2100      	movs	r1, #0
 8000d88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d8c:	e013      	b.n	8000db6 <PrecomputeMix+0x146>
			} else if (sum > 32767) {
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d94:	db06      	blt.n	8000da4 <PrecomputeMix+0x134>
				audio_buff[i] = 65535;
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <PrecomputeMix+0x168>)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000da2:	e008      	b.n	8000db6 <PrecomputeMix+0x146>
				audio_buff[i] = sum + 32768;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000dac:	b299      	uxth	r1, r3
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <PrecomputeMix+0x168>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dc2:	db9c      	blt.n	8000cfe <PrecomputeMix+0x8e>
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	2000079c 	.word	0x2000079c
 8000dd0:	200007a0 	.word	0x200007a0
 8000dd4:	20000ba4 	.word	0x20000ba4
 8000dd8:	20000364 	.word	0x20000364
 8000ddc:	20000d70 	.word	0x20000d70
 8000de0:	20000e00 	.word	0x20000e00
 8000de4:	40000800 	.word	0x40000800
 8000de8:	2000074c 	.word	0x2000074c

08000dec <ButtonPadInit>:
#include "button.h"

GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
void ButtonPadInit() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2110      	movs	r1, #16
 8000df4:	480a      	ldr	r0, [pc, #40]	; (8000e20 <ButtonPadInit+0x34>)
 8000df6:	f004 f8ee 	bl	8004fd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	4808      	ldr	r0, [pc, #32]	; (8000e20 <ButtonPadInit+0x34>)
 8000e00:	f004 f8e9 	bl	8004fd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	; 0x40
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <ButtonPadInit+0x34>)
 8000e0a:	f004 f8e4 	bl	8004fd6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <ButtonPadInit+0x38>)
 8000e16:	f004 f8de 	bl	8004fd6 <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40011800 	.word	0x40011800
 8000e24:	40011000 	.word	0x40011000

08000e28 <ButtonPadCallback>:

uint32_t previousMillis = 0;
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
int ButtonPadCallback(int GPIO_Pin) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <ButtonPadCallback+0x2c>)
 8000e38:	f004 f8b6 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10a      	bne.n	8000e5c <ButtonPadCallback+0x34>
		previousMillis = HAL_GetTick();
 8000e46:	f002 fc25 	bl	8003694 <HAL_GetTick>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a02      	ldr	r2, [pc, #8]	; (8000e58 <ButtonPadCallback+0x30>)
 8000e4e:	6013      	str	r3, [r2, #0]
		return 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e14c      	b.n	80010ee <ButtonPadCallback+0x2c6>
 8000e54:	40011800 	.word	0x40011800
 8000e58:	200007b4 	.word	0x200007b4
	}

	currentMillis = HAL_GetTick();
 8000e5c:	f002 fc1a 	bl	8003694 <HAL_GetTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4aa5      	ldr	r2, [pc, #660]	; (80010f8 <ButtonPadCallback+0x2d0>)
 8000e64:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 8000e66:	4ba5      	ldr	r3, [pc, #660]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 8000e6c:	4ba2      	ldr	r3, [pc, #648]	; (80010f8 <ButtonPadCallback+0x2d0>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4ba3      	ldr	r3, [pc, #652]	; (8001100 <ButtonPadCallback+0x2d8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b14      	cmp	r3, #20
 8000e78:	f240 8133 	bls.w	80010e2 <ButtonPadCallback+0x2ba>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8000e7c:	4ba1      	ldr	r3, [pc, #644]	; (8001104 <ButtonPadCallback+0x2dc>)
 8000e7e:	220f      	movs	r2, #15
 8000e80:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000e82:	4ba0      	ldr	r3, [pc, #640]	; (8001104 <ButtonPadCallback+0x2dc>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000e88:	4b9e      	ldr	r3, [pc, #632]	; (8001104 <ButtonPadCallback+0x2dc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	4b9d      	ldr	r3, [pc, #628]	; (8001104 <ButtonPadCallback+0x2dc>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8000e94:	499b      	ldr	r1, [pc, #620]	; (8001104 <ButtonPadCallback+0x2dc>)
 8000e96:	489c      	ldr	r0, [pc, #624]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000e98:	f003 fef2 	bl	8004c80 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	4899      	ldr	r0, [pc, #612]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000ea2:	f004 f898 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4897      	ldr	r0, [pc, #604]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000eac:	f004 f893 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	4894      	ldr	r0, [pc, #592]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000eb6:	f004 f88e 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec0:	4892      	ldr	r0, [pc, #584]	; (800110c <ButtonPadCallback+0x2e4>)
 8000ec2:	f004 f888 	bl	8004fd6 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	488f      	ldr	r0, [pc, #572]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000eca:	f004 f86d 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <ButtonPadCallback+0xb8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d102      	bne.n	8000ee0 <ButtonPadCallback+0xb8>
 8000eda:	4b88      	ldr	r3, [pc, #544]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000edc:	2210      	movs	r2, #16
 8000ede:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4889      	ldr	r0, [pc, #548]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000ee4:	f004 f860 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d005      	beq.n	8000efa <ButtonPadCallback+0xd2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d102      	bne.n	8000efa <ButtonPadCallback+0xd2>
 8000ef4:	4b81      	ldr	r3, [pc, #516]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 8000efa:	2104      	movs	r1, #4
 8000efc:	4882      	ldr	r0, [pc, #520]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000efe:	f004 f853 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <ButtonPadCallback+0xec>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d102      	bne.n	8000f14 <ButtonPadCallback+0xec>
 8000f0e:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000f10:	220e      	movs	r2, #14
 8000f12:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 8000f14:	2108      	movs	r1, #8
 8000f16:	487c      	ldr	r0, [pc, #496]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000f18:	f004 f846 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <ButtonPadCallback+0x106>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d102      	bne.n	8000f2e <ButtonPadCallback+0x106>
 8000f28:	4b74      	ldr	r3, [pc, #464]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000f2a:	220d      	movs	r2, #13
 8000f2c:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	4875      	ldr	r0, [pc, #468]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000f34:	f004 f84f 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4872      	ldr	r0, [pc, #456]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000f3e:	f004 f84a 	bl	8004fd6 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 8000f42:	2101      	movs	r1, #1
 8000f44:	4870      	ldr	r0, [pc, #448]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000f46:	f004 f82f 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <ButtonPadCallback+0x134>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d102      	bne.n	8000f5c <ButtonPadCallback+0x134>
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000f58:	220c      	movs	r2, #12
 8000f5a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	486a      	ldr	r0, [pc, #424]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000f60:	f004 f822 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <ButtonPadCallback+0x14e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d102      	bne.n	8000f76 <ButtonPadCallback+0x14e>
 8000f70:	4b62      	ldr	r3, [pc, #392]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000f72:	220b      	movs	r2, #11
 8000f74:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 8000f76:	2104      	movs	r1, #4
 8000f78:	4863      	ldr	r0, [pc, #396]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000f7a:	f004 f815 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <ButtonPadCallback+0x168>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d102      	bne.n	8000f90 <ButtonPadCallback+0x168>
 8000f8a:	4b5c      	ldr	r3, [pc, #368]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000f8c:	220a      	movs	r2, #10
 8000f8e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 8000f90:	2108      	movs	r1, #8
 8000f92:	485d      	ldr	r0, [pc, #372]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000f94:	f004 f808 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <ButtonPadCallback+0x182>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d102      	bne.n	8000faa <ButtonPadCallback+0x182>
 8000fa4:	4b55      	ldr	r3, [pc, #340]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000fa6:	2209      	movs	r2, #9
 8000fa8:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2120      	movs	r1, #32
 8000fae:	4856      	ldr	r0, [pc, #344]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000fb0:	f004 f811 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	4853      	ldr	r0, [pc, #332]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000fba:	f004 f80c 	bl	8004fd6 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4851      	ldr	r0, [pc, #324]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000fc2:	f003 fff1 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <ButtonPadCallback+0x1b0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d102      	bne.n	8000fd8 <ButtonPadCallback+0x1b0>
 8000fd2:	4b4a      	ldr	r3, [pc, #296]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 8000fd8:	2102      	movs	r1, #2
 8000fda:	484b      	ldr	r0, [pc, #300]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000fdc:	f003 ffe4 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <ButtonPadCallback+0x1ca>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d102      	bne.n	8000ff2 <ButtonPadCallback+0x1ca>
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <ButtonPadCallback+0x2d4>)
 8000fee:	2207      	movs	r2, #7
 8000ff0:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	4844      	ldr	r0, [pc, #272]	; (8001108 <ButtonPadCallback+0x2e0>)
 8000ff6:	f003 ffd7 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <ButtonPadCallback+0x1e4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b04      	cmp	r3, #4
 8001004:	d102      	bne.n	800100c <ButtonPadCallback+0x1e4>
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <ButtonPadCallback+0x2d4>)
 8001008:	2206      	movs	r2, #6
 800100a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 800100c:	2108      	movs	r1, #8
 800100e:	483e      	ldr	r0, [pc, #248]	; (8001108 <ButtonPadCallback+0x2e0>)
 8001010:	f003 ffca 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <ButtonPadCallback+0x1fe>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b08      	cmp	r3, #8
 800101e:	d102      	bne.n	8001026 <ButtonPadCallback+0x1fe>
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <ButtonPadCallback+0x2d4>)
 8001022:	2205      	movs	r2, #5
 8001024:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4837      	ldr	r0, [pc, #220]	; (8001108 <ButtonPadCallback+0x2e0>)
 800102c:	f003 ffd3 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001036:	4835      	ldr	r0, [pc, #212]	; (800110c <ButtonPadCallback+0x2e4>)
 8001038:	f003 ffcd 	bl	8004fd6 <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 800103c:	2101      	movs	r1, #1
 800103e:	4832      	ldr	r0, [pc, #200]	; (8001108 <ButtonPadCallback+0x2e0>)
 8001040:	f003 ffb2 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <ButtonPadCallback+0x22e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d102      	bne.n	8001056 <ButtonPadCallback+0x22e>
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <ButtonPadCallback+0x2d4>)
 8001052:	2204      	movs	r2, #4
 8001054:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 8001056:	2102      	movs	r1, #2
 8001058:	482b      	ldr	r0, [pc, #172]	; (8001108 <ButtonPadCallback+0x2e0>)
 800105a:	f003 ffa5 	bl	8004fa8 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <ButtonPadCallback+0x248>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d102      	bne.n	8001070 <ButtonPadCallback+0x248>
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <ButtonPadCallback+0x2d4>)
 800106c:	2203      	movs	r2, #3
 800106e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 8001070:	2104      	movs	r1, #4
 8001072:	4825      	ldr	r0, [pc, #148]	; (8001108 <ButtonPadCallback+0x2e0>)
 8001074:	f003 ff98 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d005      	beq.n	800108a <ButtonPadCallback+0x262>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d102      	bne.n	800108a <ButtonPadCallback+0x262>
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <ButtonPadCallback+0x2d4>)
 8001086:	2202      	movs	r2, #2
 8001088:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 800108a:	2108      	movs	r1, #8
 800108c:	481e      	ldr	r0, [pc, #120]	; (8001108 <ButtonPadCallback+0x2e0>)
 800108e:	f003 ff8b 	bl	8004fa8 <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <ButtonPadCallback+0x27c>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b08      	cmp	r3, #8
 800109c:	d102      	bne.n	80010a4 <ButtonPadCallback+0x27c>
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <ButtonPadCallback+0x2d4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2110      	movs	r1, #16
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <ButtonPadCallback+0x2e0>)
 80010aa:	f003 ff94 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2120      	movs	r1, #32
 80010b2:	4815      	ldr	r0, [pc, #84]	; (8001108 <ButtonPadCallback+0x2e0>)
 80010b4:	f003 ff8f 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2140      	movs	r1, #64	; 0x40
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <ButtonPadCallback+0x2e0>)
 80010be:	f003 ff8a 	bl	8004fd6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <ButtonPadCallback+0x2e4>)
 80010ca:	f003 ff84 	bl	8004fd6 <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <ButtonPadCallback+0x2dc>)
 80010d0:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <ButtonPadCallback+0x2e8>)
 80010d2:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <ButtonPadCallback+0x2dc>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 80010da:	490a      	ldr	r1, [pc, #40]	; (8001104 <ButtonPadCallback+0x2dc>)
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <ButtonPadCallback+0x2e0>)
 80010de:	f003 fdcf 	bl	8004c80 <HAL_GPIO_Init>
	}

	previousMillis = currentMillis;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <ButtonPadCallback+0x2d0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <ButtonPadCallback+0x2d8>)
 80010e8:	6013      	str	r3, [r2, #0]
	return keyPressed;
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <ButtonPadCallback+0x2d4>)
 80010ec:	881b      	ldrh	r3, [r3, #0]

}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200007b8 	.word	0x200007b8
 80010fc:	200007bc 	.word	0x200007bc
 8001100:	200007b4 	.word	0x200007b4
 8001104:	200007a4 	.word	0x200007a4
 8001108:	40011800 	.word	0x40011800
 800110c:	40011000 	.word	0x40011000
 8001110:	10310000 	.word	0x10310000

08001114 <DrumInit>:
uint8_t drum_i2c_buff[20];
DrumStruct drums[NUM_DRUMS];
DrumOutputDevice drum_output_device;
uint32_t drum_max_val[NUM_DRUMS] = {0};

void DrumInit() {
 8001114:	b580      	push	{r7, lr}
 8001116:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 800111a:	af00      	add	r7, sp, #0

	// init ADC
//	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);

	// init drums struct
	drum_output_device = DRUM_OUTPUT_NONE;
 800111c:	4bb9      	ldr	r3, [pc, #740]	; (8001404 <DrumInit+0x2f0>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
//	drum_output_callback = &DrumOutputDefault;
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8001128:	e070      	b.n	800120c <DrumInit+0xf8>
		drums[i].type = i;
 800112a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 800112e:	b2d8      	uxtb	r0, r3
 8001130:	49b5      	ldr	r1, [pc, #724]	; (8001408 <DrumInit+0x2f4>)
 8001132:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	440b      	add	r3, r1
 8001140:	4602      	mov	r2, r0
 8001142:	701a      	strb	r2, [r3, #0]
		if (drums[i].type == DRUM_LEFT_KA || drums[i].type == DRUM_RIGHT_KA)
 8001144:	49b0      	ldr	r1, [pc, #704]	; (8001408 <DrumInit+0x2f4>)
 8001146:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	440b      	add	r3, r1
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00a      	beq.n	8001170 <DrumInit+0x5c>
 800115a:	49ab      	ldr	r1, [pc, #684]	; (8001408 <DrumInit+0x2f4>)
 800115c:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	440b      	add	r3, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b03      	cmp	r3, #3
 800116e:	d10b      	bne.n	8001188 <DrumInit+0x74>
			drums[i].sound = DRUM_KA;
 8001170:	49a5      	ldr	r1, [pc, #660]	; (8001408 <DrumInit+0x2f4>)
 8001172:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	3301      	adds	r3, #1
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e00a      	b.n	800119e <DrumInit+0x8a>
		else
			drums[i].sound = DRUM_DON;
 8001188:	499f      	ldr	r1, [pc, #636]	; (8001408 <DrumInit+0x2f4>)
 800118a:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 800118e:	4613      	mov	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	3301      	adds	r3, #1
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 800119e:	499a      	ldr	r1, [pc, #616]	; (8001408 <DrumInit+0x2f4>)
 80011a0:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	440b      	add	r3, r1
 80011ae:	3308      	adds	r3, #8
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 80011b4:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4a94      	ldr	r2, [pc, #592]	; (800140c <DrumInit+0x2f8>)
 80011bc:	1899      	adds	r1, r3, r2
 80011be:	4892      	ldr	r0, [pc, #584]	; (8001408 <DrumInit+0x2f4>)
 80011c0:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	4403      	add	r3, r0
 80011ce:	3310      	adds	r3, #16
 80011d0:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 80011d2:	498d      	ldr	r1, [pc, #564]	; (8001408 <DrumInit+0x2f4>)
 80011d4:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80011d8:	4613      	mov	r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	4413      	add	r3, r2
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	440b      	add	r3, r1
 80011e2:	3304      	adds	r3, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80011e8:	f002 fa54 	bl	8003694 <HAL_GetTick>
 80011ec:	4601      	mov	r1, r0
 80011ee:	4886      	ldr	r0, [pc, #536]	; (8001408 <DrumInit+0x2f4>)
 80011f0:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4403      	add	r3, r0
 80011fe:	330c      	adds	r3, #12
 8001200:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001202:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001206:	3301      	adds	r3, #1
 8001208:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800120c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8001210:	2b03      	cmp	r3, #3
 8001212:	dd8a      	ble.n	800112a <DrumInit+0x16>

	// deal with sd card stuff
	// Format: {drum[0], drum[1], drum[2], drum[3], checksum}
	FIL file;
	uint16_t temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 8001214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001218:	2203      	movs	r2, #3
 800121a:	497d      	ldr	r1, [pc, #500]	; (8001410 <DrumInit+0x2fc>)
 800121c:	4618      	mov	r0, r3
 800121e:	f010 fcf3 	bl	8011c08 <f_open>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
	if (fresult == FR_OK) {
 8001228:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800122c:	2b00      	cmp	r3, #0
 800122e:	f040 8084 	bne.w	800133a <DrumInit+0x226>
		uint32_t buff[5];
//		fresult = f_read(&file, buff, 5 * 4, &temp);
		if (buff[0] + buff[1] + buff[2] + buff[3] == buff[4]) {
 8001232:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001236:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001240:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	441a      	add	r2, r3
 8001248:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800124c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	441a      	add	r2, r3
 8001254:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001258:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	441a      	add	r2, r3
 8001260:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001264:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	429a      	cmp	r2, r3
 800126c:	d11f      	bne.n	80012ae <DrumInit+0x19a>
			for (int i = 0; i < 4; i++) drums[i].sensor_thresh = buff[i];
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8001274:	e016      	b.n	80012a4 <DrumInit+0x190>
 8001276:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800127a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800127e:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8001282:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001286:	4860      	ldr	r0, [pc, #384]	; (8001408 <DrumInit+0x2f4>)
 8001288:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	4403      	add	r3, r0
 8001296:	3328      	adds	r3, #40	; 0x28
 8001298:	6019      	str	r1, [r3, #0]
 800129a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800129e:	3301      	adds	r3, #1
 80012a0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80012a4:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	dde4      	ble.n	8001276 <DrumInit+0x162>
 80012ac:	e03d      	b.n	800132a <DrumInit+0x216>
		} else {
			DrumCalibrate();
 80012ae:	f000 f96b 	bl	8001588 <DrumCalibrate>
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80012b2:	4b55      	ldr	r3, [pc, #340]	; (8001408 <DrumInit+0x2f4>)
 80012b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b6:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80012ba:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	4b51      	ldr	r3, [pc, #324]	; (8001408 <DrumInit+0x2f4>)
 80012c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012c4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80012c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	4b4e      	ldr	r3, [pc, #312]	; (8001408 <DrumInit+0x2f4>)
 80012d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80012d4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80012d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	4b4a      	ldr	r3, [pc, #296]	; (8001408 <DrumInit+0x2f4>)
 80012e0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80012e4:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80012e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80012ec:	60da      	str	r2, [r3, #12]
					drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80012ee:	4b46      	ldr	r3, [pc, #280]	; (8001408 <DrumInit+0x2f4>)
 80012f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012f2:	4b45      	ldr	r3, [pc, #276]	; (8001408 <DrumInit+0x2f4>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	441a      	add	r2, r3
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <DrumInit+0x2f4>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	441a      	add	r2, r3
 8001300:	4b41      	ldr	r3, [pc, #260]	; (8001408 <DrumInit+0x2f4>)
 8001302:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001306:	441a      	add	r2, r3
			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001308:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800130c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8001310:	611a      	str	r2, [r3, #16]
			fresult = f_write(&file, buff, 5 * 4, &temp);
 8001312:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8001316:	f107 0114 	add.w	r1, r7, #20
 800131a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800131e:	2214      	movs	r2, #20
 8001320:	f010 feeb 	bl	80120fa <f_write>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		}
		LCD_Print(0, 19, "Success: Have file, reading... %d", fresult);
 800132a:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800132e:	4a39      	ldr	r2, [pc, #228]	; (8001414 <DrumInit+0x300>)
 8001330:	2113      	movs	r1, #19
 8001332:	2000      	movs	r0, #0
 8001334:	f000 ff30 	bl	8002198 <LCD_Print>
 8001338:	e05a      	b.n	80013f0 <DrumInit+0x2dc>
	} else if (fresult == FR_NO_FILE) {
 800133a:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 800133e:	2b04      	cmp	r3, #4
 8001340:	d14e      	bne.n	80013e0 <DrumInit+0x2cc>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 8001342:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001346:	2206      	movs	r2, #6
 8001348:	4931      	ldr	r1, [pc, #196]	; (8001410 <DrumInit+0x2fc>)
 800134a:	4618      	mov	r0, r3
 800134c:	f010 fc5c 	bl	8011c08 <f_open>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		DrumCalibrate();
 8001356:	f000 f917 	bl	8001588 <DrumCalibrate>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <DrumInit+0x2f4>)
 800135c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800135e:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001362:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <DrumInit+0x2f4>)
 800136a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800136c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001370:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <DrumInit+0x2f4>)
 8001378:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800137c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001380:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <DrumInit+0x2f4>)
 8001388:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800138c:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8001390:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001394:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <DrumInit+0x2f4>)
 8001398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <DrumInit+0x2f4>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	441a      	add	r2, r3
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <DrumInit+0x2f4>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	441a      	add	r2, r3
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <DrumInit+0x2f4>)
 80013aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80013ae:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80013b0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80013b4:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 80013b8:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 80013ba:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80013be:	4639      	mov	r1, r7
 80013c0:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80013c4:	2214      	movs	r2, #20
 80013c6:	f010 fe98 	bl	80120fa <f_write>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f887 3273 	strb.w	r3, [r7, #627]	; 0x273
		LCD_Print(0, 19, "Error: No file, calibrating... %d", fresult);
 80013d0:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80013d4:	4a10      	ldr	r2, [pc, #64]	; (8001418 <DrumInit+0x304>)
 80013d6:	2113      	movs	r1, #19
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 fedd 	bl	8002198 <LCD_Print>
 80013de:	e007      	b.n	80013f0 <DrumInit+0x2dc>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 80013e0:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <DrumInit+0x308>)
 80013e6:	2113      	movs	r1, #19
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 fed5 	bl	8002198 <LCD_Print>
 80013ee:	e7fe      	b.n	80013ee <DrumInit+0x2da>
	}
	f_close(&file);
 80013f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013f4:	4618      	mov	r0, r3
 80013f6:	f011 f8e7 	bl	80125c8 <f_close>

}
 80013fa:	bf00      	nop
 80013fc:	f507 771e 	add.w	r7, r7, #632	; 0x278
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000ac0 	.word	0x20000ac0
 8001408:	20000a00 	.word	0x20000a00
 800140c:	200009f0 	.word	0x200009f0
 8001410:	080160c0 	.word	0x080160c0
 8001414:	080160cc 	.word	0x080160cc
 8001418:	080160f0 	.word	0x080160f0
 800141c:	08016114 	.word	0x08016114

08001420 <DrumThreshWrite>:

void DrumThreshWrite() {
 8001420:	b580      	push	{r7, lr}
 8001422:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8001426:	af00      	add	r7, sp, #0
	FIL file;
	int temp;
	FRESULT fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 8001428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800142c:	2203      	movs	r2, #3
 800142e:	4952      	ldr	r1, [pc, #328]	; (8001578 <DrumThreshWrite+0x158>)
 8001430:	4618      	mov	r0, r3
 8001432:	f010 fbe9 	bl	8011c08 <f_open>
 8001436:	4603      	mov	r3, r0
 8001438:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	if (fresult == FR_OK) {
 800143c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001440:	2b00      	cmp	r3, #0
 8001442:	d13c      	bne.n	80014be <DrumThreshWrite+0x9e>
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <DrumThreshWrite+0x15c>)
 8001446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001448:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800144c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <DrumThreshWrite+0x15c>)
 8001454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001456:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800145a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <DrumThreshWrite+0x15c>)
 8001462:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001466:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800146a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <DrumThreshWrite+0x15c>)
 8001472:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001476:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800147a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800147e:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001480:	4b3e      	ldr	r3, [pc, #248]	; (800157c <DrumThreshWrite+0x15c>)
 8001482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <DrumThreshWrite+0x15c>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	441a      	add	r2, r3
 800148a:	4b3c      	ldr	r3, [pc, #240]	; (800157c <DrumThreshWrite+0x15c>)
 800148c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001490:	441a      	add	r2, r3
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <DrumThreshWrite+0x15c>)
 8001494:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001498:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 800149a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800149e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80014a2:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 80014a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a8:	f107 0118 	add.w	r1, r7, #24
 80014ac:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80014b0:	2214      	movs	r2, #20
 80014b2:	f010 fe22 	bl	80120fa <f_write>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 80014bc:	e051      	b.n	8001562 <DrumThreshWrite+0x142>
	} else if (fresult == FR_NO_FILE) {
 80014be:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d145      	bne.n	8001552 <DrumThreshWrite+0x132>
		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 80014c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ca:	2206      	movs	r2, #6
 80014cc:	492a      	ldr	r1, [pc, #168]	; (8001578 <DrumThreshWrite+0x158>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f010 fb9a 	bl	8011c08 <f_open>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <DrumThreshWrite+0x15c>)
 80014dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80014e2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <DrumThreshWrite+0x15c>)
 80014ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80014f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <DrumThreshWrite+0x15c>)
 80014f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001500:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <DrumThreshWrite+0x15c>)
 8001508:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800150c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001510:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001514:	60da      	str	r2, [r3, #12]
				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <DrumThreshWrite+0x15c>)
 8001518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <DrumThreshWrite+0x15c>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	441a      	add	r2, r3
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <DrumThreshWrite+0x15c>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	441a      	add	r2, r3
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <DrumThreshWrite+0x15c>)
 800152a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800152e:	441a      	add	r2, r3
		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8001530:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001534:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001538:	611a      	str	r2, [r3, #16]
		fresult = f_write(&file, buff, 5 * 4, &temp);
 800153a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153e:	1d39      	adds	r1, r7, #4
 8001540:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001544:	2214      	movs	r2, #20
 8001546:	f010 fdd8 	bl	80120fa <f_write>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8001550:	e007      	b.n	8001562 <DrumThreshWrite+0x142>
	} else {
		LCD_Print(0, 19, "Error: f_open (%d)", fresult); while (1);
 8001552:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <DrumThreshWrite+0x160>)
 8001558:	2113      	movs	r1, #19
 800155a:	2000      	movs	r0, #0
 800155c:	f000 fe1c 	bl	8002198 <LCD_Print>
 8001560:	e7fe      	b.n	8001560 <DrumThreshWrite+0x140>
	}
	f_close(&file);
 8001562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001566:	4618      	mov	r0, r3
 8001568:	f011 f82e 	bl	80125c8 <f_close>
}
 800156c:	bf00      	nop
 800156e:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	080160c0 	.word	0x080160c0
 800157c:	20000a00 	.word	0x20000a00
 8001580:	08016114 	.word	0x08016114
 8001584:	00000000 	.word	0x00000000

08001588 <DrumCalibrate>:

// Let's not touch this :D
void DrumCalibrate() {
 8001588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800158c:	b092      	sub	sp, #72	; 0x48
 800158e:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001590:	f002 f880 	bl	8003694 <HAL_GetTick>
 8001594:	6478      	str	r0, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 8001596:	2010      	movs	r0, #16
 8001598:	f011 fd6a 	bl	8013070 <malloc>
 800159c:	4603      	mov	r3, r0
 800159e:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
 80015a4:	e00c      	b.n	80015c0 <DrumCalibrate+0x38>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 80015a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	18d4      	adds	r4, r2, r3
 80015ae:	f44f 7016 	mov.w	r0, #600	; 0x258
 80015b2:	f011 fd5d 	bl	8013070 <malloc>
 80015b6:	4603      	mov	r3, r0
 80015b8:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 80015ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015bc:	3301      	adds	r3, #1
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
 80015c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	ddef      	ble.n	80015a6 <DrumCalibrate+0x1e>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 80015c6:	2300      	movs	r3, #0
 80015c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ca:	e023      	b.n	8001614 <DrumCalibrate+0x8c>
		while (last_tick == HAL_GetTick()) {
 80015cc:	bf00      	nop
 80015ce:	f002 f861 	bl	8003694 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d0f9      	beq.n	80015ce <DrumCalibrate+0x46>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 80015da:	f002 f85b 	bl	8003694 <HAL_GetTick>
 80015de:	6478      	str	r0, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015e4:	e010      	b.n	8001608 <DrumCalibrate+0x80>
			values[j][i] = drum_sensor_values[j];
 80015e6:	4a9c      	ldr	r2, [pc, #624]	; (8001858 <DrumCalibrate+0x2d0>)
 80015e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80015ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4413      	add	r3, r2
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	b28a      	uxth	r2, r1
 8001600:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001604:	3301      	adds	r3, #1
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
 8001608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800160a:	2b03      	cmp	r3, #3
 800160c:	ddeb      	ble.n	80015e6 <DrumCalibrate+0x5e>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 800160e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001610:	3301      	adds	r3, #1
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001616:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800161a:	dbd7      	blt.n	80015cc <DrumCalibrate+0x44>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
 8001620:	e0f2      	b.n	8001808 <DrumCalibrate+0x280>
		uint32_t sum = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
 800162e:	e026      	b.n	800167e <DrumCalibrate+0xf6>
			sum += values[i][j];
 8001630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	4413      	add	r3, r2
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001646:	4413      	add	r3, r2
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4413      	add	r3, r2
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	4293      	cmp	r3, r2
 8001662:	d209      	bcs.n	8001678 <DrumCalibrate+0xf0>
				max_val = values[i][j];
 8001664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4413      	add	r3, r2
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	3301      	adds	r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001684:	dbd4      	blt.n	8001630 <DrumCalibrate+0xa8>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 8001686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001688:	f7fe ff18 	bl	80004bc <__aeabi_ui2d>
 800168c:	a36e      	add	r3, pc, #440	; (adr r3, 8001848 <DrumCalibrate+0x2c0>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7ff f8b7 	bl	8000804 <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e036      	b.n	800171e <DrumCalibrate+0x196>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	4413      	add	r3, r2
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff0a 	bl	80004dc <__aeabi_i2d>
 80016c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016cc:	f7fe fdb8 	bl	8000240 <__aeabi_dsub>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4614      	mov	r4, r2
 80016d6:	461d      	mov	r5, r3
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	4413      	add	r3, r2
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4413      	add	r3, r2
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fef6 	bl	80004dc <__aeabi_i2d>
 80016f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016f4:	f7fe fda4 	bl	8000240 <__aeabi_dsub>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4620      	mov	r0, r4
 80016fe:	4629      	mov	r1, r5
 8001700:	f7fe ff56 	bl	80005b0 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800170c:	f7fe fd9a 	bl	8000244 <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	3301      	adds	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001724:	dbc4      	blt.n	80016b0 <DrumCalibrate+0x128>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 8001726:	a34a      	add	r3, pc, #296	; (adr r3, 8001850 <DrumCalibrate+0x2c8>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001730:	f7ff f868 	bl	8000804 <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f014 fbde 	bl	8015efc <sqrt>
 8001740:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 8001744:	4945      	ldr	r1, [pc, #276]	; (800185c <DrumCalibrate+0x2d4>)
 8001746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	f103 0118 	add.w	r1, r3, #24
 8001756:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800175a:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 800175e:	493f      	ldr	r1, [pc, #252]	; (800185c <DrumCalibrate+0x2d4>)
 8001760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	440b      	add	r3, r1
 800176c:	3314      	adds	r3, #20
 800176e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001770:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 8001772:	493a      	ldr	r1, [pc, #232]	; (800185c <DrumCalibrate+0x2d4>)
 8001774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	440b      	add	r3, r1
 8001780:	f103 0120 	add.w	r1, r3, #32
 8001784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001788:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b33      	ldr	r3, [pc, #204]	; (8001860 <DrumCalibrate+0x2d8>)
 8001792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001796:	f7fe ff0b 	bl	80005b0 <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017a6:	f7fe fd4d 	bl	8000244 <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4690      	mov	r8, r2
 80017b0:	4699      	mov	r9, r3
 80017b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017b4:	f7fe fe82 	bl	80004bc <__aeabi_ui2d>
 80017b8:	4604      	mov	r4, r0
 80017ba:	460d      	mov	r5, r1
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <DrumCalibrate+0x2dc>)
 80017c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c6:	f7fe fef3 	bl	80005b0 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4620      	mov	r0, r4
 80017d0:	4629      	mov	r1, r5
 80017d2:	f7fe fd37 	bl	8000244 <__adddf3>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4640      	mov	r0, r8
 80017dc:	4649      	mov	r1, r9
 80017de:	f014 fb4b 	bl	8015e78 <fmin>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b9 	bl	8000b60 <__aeabi_d2uiz>
 80017ee:	4601      	mov	r1, r0
 80017f0:	481a      	ldr	r0, [pc, #104]	; (800185c <DrumCalibrate+0x2d4>)
 80017f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	4403      	add	r3, r0
 80017fe:	3328      	adds	r3, #40	; 0x28
 8001800:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	3301      	adds	r3, #1
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
 8001808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180a:	2b03      	cmp	r3, #3
 800180c:	f77f af09 	ble.w	8001622 <DrumCalibrate+0x9a>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	e00a      	b.n	800182c <DrumCalibrate+0x2a4>
		free(values[i]);
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f011 fc2d 	bl	8013080 <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	3301      	adds	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b03      	cmp	r3, #3
 8001830:	ddf1      	ble.n	8001816 <DrumCalibrate+0x28e>
	}
	free(values);
 8001832:	6978      	ldr	r0, [r7, #20]
 8001834:	f011 fc24 	bl	8013080 <free>

}
 8001838:	bf00      	nop
 800183a:	3748      	adds	r7, #72	; 0x48
 800183c:	46bd      	mov	sp, r7
 800183e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001842:	bf00      	nop
 8001844:	f3af 8000 	nop.w
 8001848:	00000000 	.word	0x00000000
 800184c:	4072c000 	.word	0x4072c000
 8001850:	00000000 	.word	0x00000000
 8001854:	4072b000 	.word	0x4072b000
 8001858:	200009f0 	.word	0x200009f0
 800185c:	20000a00 	.word	0x20000a00
 8001860:	401c0000 	.word	0x401c0000
 8001864:	40140000 	.word	0x40140000

08001868 <DrumUpdate>:

void DrumUpdate(uint16_t activations) { // actiavtions: bitwise representation
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001872:	b672      	cpsid	i
}
 8001874:	bf00      	nop

	__disable_irq();

	int i = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
	DrumStruct* drum = drums;
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <DrumUpdate+0xbc>)
 800187c:	60bb      	str	r3, [r7, #8]
	for (; i < 4; i++, drum++) {
 800187e:	e048      	b.n	8001912 <DrumUpdate+0xaa>
		if (*(drum->sensor_value_pt) > drum->sensor_thresh || ((activations >> i) & 1)) {
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	429a      	cmp	r2, r3
 800188c:	d807      	bhi.n	800189e <DrumUpdate+0x36>
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	fa42 f303 	asr.w	r3, r2, r3
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d011      	beq.n	80018c2 <DrumUpdate+0x5a>
			if (drum->state == DRUM_IDLE) {
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	7a1b      	ldrb	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d104      	bne.n	80018b0 <DrumUpdate+0x48>
				AddDrum(drum->sound); // play the sound
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f978 	bl	8000ba0 <AddDrum>
			}
			drum->state = DRUM_HIT;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2201      	movs	r2, #1
 80018b4:	721a      	strb	r2, [r3, #8]
			drum->last_tick = HAL_GetTick();
 80018b6:	f001 feed 	bl	8003694 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	e011      	b.n	80018e6 <DrumUpdate+0x7e>
		} else {
			if (drum->state != DRUM_IDLE) {
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	7a1b      	ldrb	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00d      	beq.n	80018e6 <DrumUpdate+0x7e>
				drum->state = DRUM_COOLDOWN;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2202      	movs	r2, #2
 80018ce:	721a      	strb	r2, [r3, #8]
				if (/* drum->state == DRUM_COOLDOWN
					&& */HAL_GetTick() - drum->last_tick > DRUM_COOLDOWN_LENGTH) {
 80018d0:	f001 fee0 	bl	8003694 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	1ad3      	subs	r3, r2, r3
				if (/* drum->state == DRUM_COOLDOWN
 80018dc:	2b14      	cmp	r3, #20
 80018de:	d902      	bls.n	80018e6 <DrumUpdate+0x7e>
					drum->state = DRUM_IDLE;
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2200      	movs	r2, #0
 80018e4:	721a      	strb	r2, [r3, #8]
				}
			}
		}

		if (*(drum->sensor_value_pt) > drum_max_val[i]) {
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	490e      	ldr	r1, [pc, #56]	; (8001928 <DrumUpdate+0xc0>)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d906      	bls.n	8001906 <DrumUpdate+0x9e>
			drum_max_val[i] = *(drum->sensor_value_pt);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	490a      	ldr	r1, [pc, #40]	; (8001928 <DrumUpdate+0xc0>)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (; i < 4; i++, drum++) {
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3301      	adds	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	3330      	adds	r3, #48	; 0x30
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b03      	cmp	r3, #3
 8001916:	ddb3      	ble.n	8001880 <DrumUpdate+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 8001918:	b662      	cpsie	i
}
 800191a:	bf00      	nop
		}
	}

	__enable_irq();
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000a00 	.word	0x20000a00
 8001928:	20000ac4 	.word	0x20000ac4

0800192c <ButtonPad_DrumCalibration>:

//	LCD_Print(0, (*r)++, "%3d", drums[0].state);

}

void ButtonPad_DrumCalibration(int keyPressed) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	switch (keyPressed) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	2b07      	cmp	r3, #7
 800193a:	d866      	bhi.n	8001a0a <ButtonPad_DrumCalibration+0xde>
 800193c:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <ButtonPad_DrumCalibration+0x18>)
 800193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001942:	bf00      	nop
 8001944:	08001965 	.word	0x08001965
 8001948:	0800196d 	.word	0x0800196d
 800194c:	08001975 	.word	0x08001975
 8001950:	0800197d 	.word	0x0800197d
 8001954:	08001985 	.word	0x08001985
 8001958:	080019b7 	.word	0x080019b7
 800195c:	080019e9 	.word	0x080019e9
 8001960:	08001a05 	.word	0x08001a05
		case 1: AddDrum(DRUM_DON); break;
 8001964:	2000      	movs	r0, #0
 8001966:	f7ff f91b 	bl	8000ba0 <AddDrum>
 800196a:	e04e      	b.n	8001a0a <ButtonPad_DrumCalibration+0xde>
		case 2: AddDrum(DRUM_KA); break;
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff f917 	bl	8000ba0 <AddDrum>
 8001972:	e04a      	b.n	8001a0a <ButtonPad_DrumCalibration+0xde>
		case 3: DrumUpdate(1); break;
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff ff77 	bl	8001868 <DrumUpdate>
 800197a:	e046      	b.n	8001a0a <ButtonPad_DrumCalibration+0xde>
		case 4: DrumUpdate(2); break;
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff ff73 	bl	8001868 <DrumUpdate>
 8001982:	e042      	b.n	8001a0a <ButtonPad_DrumCalibration+0xde>
		case 5: drums[drum_calibrate_number].sensor_thresh += 10; break;
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <ButtonPad_DrumCalibration+0xe8>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <ButtonPad_DrumCalibration+0xec>)
 800198c:	460b      	mov	r3, r1
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	440b      	add	r3, r1
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	3328      	adds	r3, #40	; 0x28
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <ButtonPad_DrumCalibration+0xe8>)
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	4610      	mov	r0, r2
 80019a0:	f103 020a 	add.w	r2, r3, #10
 80019a4:	491c      	ldr	r1, [pc, #112]	; (8001a18 <ButtonPad_DrumCalibration+0xec>)
 80019a6:	4603      	mov	r3, r0
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4403      	add	r3, r0
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	440b      	add	r3, r1
 80019b0:	3328      	adds	r3, #40	; 0x28
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e029      	b.n	8001a0a <ButtonPad_DrumCalibration+0xde>
		case 6: drums[drum_calibrate_number].sensor_thresh -= 10; break;
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <ButtonPad_DrumCalibration+0xe8>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <ButtonPad_DrumCalibration+0xec>)
 80019be:	460b      	mov	r3, r1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	440b      	add	r3, r1
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	4413      	add	r3, r2
 80019c8:	3328      	adds	r3, #40	; 0x28
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <ButtonPad_DrumCalibration+0xe8>)
 80019ce:	8812      	ldrh	r2, [r2, #0]
 80019d0:	4610      	mov	r0, r2
 80019d2:	f1a3 020a 	sub.w	r2, r3, #10
 80019d6:	4910      	ldr	r1, [pc, #64]	; (8001a18 <ButtonPad_DrumCalibration+0xec>)
 80019d8:	4603      	mov	r3, r0
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4403      	add	r3, r0
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	440b      	add	r3, r1
 80019e2:	3328      	adds	r3, #40	; 0x28
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e010      	b.n	8001a0a <ButtonPad_DrumCalibration+0xde>
		case 7: drum_calibrate_number = (drum_calibrate_number + 1) % NUM_DRUMS; break;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <ButtonPad_DrumCalibration+0xe8>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	425a      	negs	r2, r3
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	f002 0203 	and.w	r2, r2, #3
 80019f8:	bf58      	it	pl
 80019fa:	4253      	negpl	r3, r2
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <ButtonPad_DrumCalibration+0xe8>)
 8001a00:	801a      	strh	r2, [r3, #0]
 8001a02:	e002      	b.n	8001a0a <ButtonPad_DrumCalibration+0xde>
		case 8: DrumThreshWrite(); break;
 8001a04:	f7ff fd0c 	bl	8001420 <DrumThreshWrite>
 8001a08:	bf00      	nop
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000ad4 	.word	0x20000ad4
 8001a18:	20000a00 	.word	0x20000a00

08001a1c <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a2c:	4808      	ldr	r0, [pc, #32]	; (8001a50 <ILI9341_Send_Command+0x34>)
 8001a2e:	f003 fad2 	bl	8004fd6 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <ILI9341_Send_Command+0x34>)
 8001a3a:	f003 facc 	bl	8004fd6 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f95d 	bl	8001d00 <ILI9341_SPI_Send>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40010c00 	.word	0x40010c00

08001a54 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a64:	4808      	ldr	r0, [pc, #32]	; (8001a88 <ILI9341_Send_Data+0x34>)
 8001a66:	f003 fab6 	bl	8004fd6 <HAL_GPIO_WritePin>
	DC_DATA;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <ILI9341_Send_Data+0x34>)
 8001a72:	f003 fab0 	bl	8004fd6 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f941 	bl	8001d00 <ILI9341_SPI_Send>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40010c00 	.word	0x40010c00

08001a8c <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8001a90:	f000 f900 	bl	8001c94 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8001a94:	f000 f958 	bl	8001d48 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff ffbf 	bl	8001a1c <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8001a9e:	20cb      	movs	r0, #203	; 0xcb
 8001aa0:	f7ff ffbc 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8001aa4:	2039      	movs	r0, #57	; 0x39
 8001aa6:	f7ff ffd5 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8001aaa:	202c      	movs	r0, #44	; 0x2c
 8001aac:	f7ff ffd2 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff ffcf 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8001ab6:	2034      	movs	r0, #52	; 0x34
 8001ab8:	f7ff ffcc 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7ff ffc9 	bl	8001a54 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8001ac2:	20cf      	movs	r0, #207	; 0xcf
 8001ac4:	f7ff ffaa 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff ffc3 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001ace:	20c1      	movs	r0, #193	; 0xc1
 8001ad0:	f7ff ffc0 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8001ad4:	2030      	movs	r0, #48	; 0x30
 8001ad6:	f7ff ffbd 	bl	8001a54 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 8001ada:	20e8      	movs	r0, #232	; 0xe8
 8001adc:	f7ff ff9e 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8001ae0:	2085      	movs	r0, #133	; 0x85
 8001ae2:	f7ff ffb7 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff ffb4 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8001aec:	2078      	movs	r0, #120	; 0x78
 8001aee:	f7ff ffb1 	bl	8001a54 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8001af2:	20ea      	movs	r0, #234	; 0xea
 8001af4:	f7ff ff92 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff ffab 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff ffa8 	bl	8001a54 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8001b04:	20ed      	movs	r0, #237	; 0xed
 8001b06:	f7ff ff89 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 8001b0a:	2064      	movs	r0, #100	; 0x64
 8001b0c:	f7ff ffa2 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f7ff ff9f 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 8001b16:	2012      	movs	r0, #18
 8001b18:	f7ff ff9c 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8001b1c:	2081      	movs	r0, #129	; 0x81
 8001b1e:	f7ff ff99 	bl	8001a54 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8001b22:	20f7      	movs	r0, #247	; 0xf7
 8001b24:	f7ff ff7a 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 8001b28:	2020      	movs	r0, #32
 8001b2a:	f7ff ff93 	bl	8001a54 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 8001b2e:	20c0      	movs	r0, #192	; 0xc0
 8001b30:	f7ff ff74 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001b34:	2010      	movs	r0, #16
 8001b36:	f7ff ff8d 	bl	8001a54 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8001b3a:	20c1      	movs	r0, #193	; 0xc1
 8001b3c:	f7ff ff6e 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001b40:	2010      	movs	r0, #16
 8001b42:	f7ff ff87 	bl	8001a54 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8001b46:	20c5      	movs	r0, #197	; 0xc5
 8001b48:	f7ff ff68 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001b4c:	203e      	movs	r0, #62	; 0x3e
 8001b4e:	f7ff ff81 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8001b52:	2028      	movs	r0, #40	; 0x28
 8001b54:	f7ff ff7e 	bl	8001a54 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8001b58:	20c7      	movs	r0, #199	; 0xc7
 8001b5a:	f7ff ff5f 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8001b5e:	2086      	movs	r0, #134	; 0x86
 8001b60:	f7ff ff78 	bl	8001a54 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8001b64:	2036      	movs	r0, #54	; 0x36
 8001b66:	f7ff ff59 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8001b6a:	2048      	movs	r0, #72	; 0x48
 8001b6c:	f7ff ff72 	bl	8001a54 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8001b70:	203a      	movs	r0, #58	; 0x3a
 8001b72:	f7ff ff53 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8001b76:	2055      	movs	r0, #85	; 0x55
 8001b78:	f7ff ff6c 	bl	8001a54 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001b7c:	20b1      	movs	r0, #177	; 0xb1
 8001b7e:	f7ff ff4d 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff ff66 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8001b88:	2018      	movs	r0, #24
 8001b8a:	f7ff ff63 	bl	8001a54 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8001b8e:	20b6      	movs	r0, #182	; 0xb6
 8001b90:	f7ff ff44 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8001b94:	2008      	movs	r0, #8
 8001b96:	f7ff ff5d 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8001b9a:	2082      	movs	r0, #130	; 0x82
 8001b9c:	f7ff ff5a 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8001ba0:	2027      	movs	r0, #39	; 0x27
 8001ba2:	f7ff ff57 	bl	8001a54 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8001ba6:	20f2      	movs	r0, #242	; 0xf2
 8001ba8:	f7ff ff38 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff ff51 	bl	8001a54 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8001bb2:	2026      	movs	r0, #38	; 0x26
 8001bb4:	f7ff ff32 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff ff4b 	bl	8001a54 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8001bbe:	20e0      	movs	r0, #224	; 0xe0
 8001bc0:	f7ff ff2c 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8001bc4:	200f      	movs	r0, #15
 8001bc6:	f7ff ff45 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001bca:	2031      	movs	r0, #49	; 0x31
 8001bcc:	f7ff ff42 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8001bd0:	202b      	movs	r0, #43	; 0x2b
 8001bd2:	f7ff ff3f 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001bd6:	200c      	movs	r0, #12
 8001bd8:	f7ff ff3c 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001bdc:	200e      	movs	r0, #14
 8001bde:	f7ff ff39 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001be2:	2008      	movs	r0, #8
 8001be4:	f7ff ff36 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 8001be8:	204e      	movs	r0, #78	; 0x4e
 8001bea:	f7ff ff33 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8001bee:	20f1      	movs	r0, #241	; 0xf1
 8001bf0:	f7ff ff30 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8001bf4:	2037      	movs	r0, #55	; 0x37
 8001bf6:	f7ff ff2d 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f7ff ff2a 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8001c00:	2010      	movs	r0, #16
 8001c02:	f7ff ff27 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f7ff ff24 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001c0c:	200e      	movs	r0, #14
 8001c0e:	f7ff ff21 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8001c12:	2009      	movs	r0, #9
 8001c14:	f7ff ff1e 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff ff1b 	bl	8001a54 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8001c1e:	20e1      	movs	r0, #225	; 0xe1
 8001c20:	f7ff fefc 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ff15 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8001c2a:	200e      	movs	r0, #14
 8001c2c:	f7ff ff12 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8001c30:	2014      	movs	r0, #20
 8001c32:	f7ff ff0f 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f7ff ff0c 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001c3c:	2011      	movs	r0, #17
 8001c3e:	f7ff ff09 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001c42:	2007      	movs	r0, #7
 8001c44:	f7ff ff06 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001c48:	2031      	movs	r0, #49	; 0x31
 8001c4a:	f7ff ff03 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001c4e:	20c1      	movs	r0, #193	; 0xc1
 8001c50:	f7ff ff00 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001c54:	2048      	movs	r0, #72	; 0x48
 8001c56:	f7ff fefd 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001c5a:	2008      	movs	r0, #8
 8001c5c:	f7ff fefa 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001c60:	200f      	movs	r0, #15
 8001c62:	f7ff fef7 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001c66:	200c      	movs	r0, #12
 8001c68:	f7ff fef4 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001c6c:	2031      	movs	r0, #49	; 0x31
 8001c6e:	f7ff fef1 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8001c72:	2036      	movs	r0, #54	; 0x36
 8001c74:	f7ff feee 	bl	8001a54 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001c78:	200f      	movs	r0, #15
 8001c7a:	f7ff feeb 	bl	8001a54 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8001c7e:	2011      	movs	r0, #17
 8001c80:	f7ff fecc 	bl	8001a1c <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8001c84:	2029      	movs	r0, #41	; 0x29
 8001c86:	f7ff fec9 	bl	8001a1c <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8001c8a:	202c      	movs	r0, #44	; 0x2c
 8001c8c:	f7ff fee2 	bl	8001a54 <ILI9341_Send_Data>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <ILI9341_SPI_Init+0x68>)
 8001c9c:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ca4:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001cac:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc4:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001ce0:	220a      	movs	r2, #10
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <ILI9341_SPI_Init+0x64>)
 8001ce6:	f007 ff88 	bl	8009bfa <HAL_SPI_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 8001cf0:	f001 f850 	bl	8002d94 <Error_Handler>
	}
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000ad8 	.word	0x20000ad8
 8001cfc:	40003800 	.word	0x40003800

08001d00 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 8001d0a:	1df9      	adds	r1, r7, #7
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4803      	ldr	r0, [pc, #12]	; (8001d20 <ILI9341_SPI_Send+0x20>)
 8001d12:	f007 fff6 	bl	8009d02 <HAL_SPI_Transmit>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000ad8 	.word	0x20000ad8

08001d24 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	230a      	movs	r3, #10
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <ILI9341_SPI_Send_Multiple+0x20>)
 8001d38:	f007 ffe3 	bl	8009d02 <HAL_SPI_Transmit>
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000ad8 	.word	0x20000ad8

08001d48 <ILI9341_Reset>:

void ILI9341_Reset() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	RESET_ON;
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <ILI9341_Reset+0x4c>)
 8001d54:	f003 f93f 	bl	8004fd6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001d58:	2032      	movs	r0, #50	; 0x32
 8001d5a:	f001 fca5 	bl	80036a8 <HAL_Delay>
	RESET_OFF;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d64:	480b      	ldr	r0, [pc, #44]	; (8001d94 <ILI9341_Reset+0x4c>)
 8001d66:	f003 f936 	bl	8004fd6 <HAL_GPIO_WritePin>
	CS_ON;
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d70:	4808      	ldr	r0, [pc, #32]	; (8001d94 <ILI9341_Reset+0x4c>)
 8001d72:	f003 f930 	bl	8004fd6 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001d76:	2032      	movs	r0, #50	; 0x32
 8001d78:	f001 fc96 	bl	80036a8 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fe4d 	bl	8001a1c <ILI9341_Send_Command>
	CS_OFF;
 8001d82:	2201      	movs	r2, #1
 8001d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <ILI9341_Reset+0x4c>)
 8001d8a:	f003 f924 	bl	8004fd6 <HAL_GPIO_WritePin>
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40010c00 	.word	0x40010c00

08001d98 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8001da2:	2036      	movs	r0, #54	; 0x36
 8001da4:	f7ff fe3a 	bl	8001a1c <ILI9341_Send_Command>
	switch (rotation) {
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d836      	bhi.n	8001e1c <ILI9341_Set_Rotation+0x84>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <ILI9341_Set_Rotation+0x1c>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001dc5 	.word	0x08001dc5
 8001db8:	08001ddb 	.word	0x08001ddb
 8001dbc:	08001df1 	.word	0x08001df1
 8001dc0:	08001e07 	.word	0x08001e07
	case 0:
		ILI9341_Send_Data(0x48);
 8001dc4:	2048      	movs	r0, #72	; 0x48
 8001dc6:	f7ff fe45 	bl	8001a54 <ILI9341_Send_Data>
		X_SIZE = 240;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <ILI9341_Set_Rotation+0x8c>)
 8001dcc:	22f0      	movs	r2, #240	; 0xf0
 8001dce:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <ILI9341_Set_Rotation+0x90>)
 8001dd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dd6:	601a      	str	r2, [r3, #0]
		break;
 8001dd8:	e020      	b.n	8001e1c <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 8001dda:	2028      	movs	r0, #40	; 0x28
 8001ddc:	f7ff fe3a 	bl	8001a54 <ILI9341_Send_Data>
		X_SIZE = 320;
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <ILI9341_Set_Rotation+0x8c>)
 8001de2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001de6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8001de8:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <ILI9341_Set_Rotation+0x90>)
 8001dea:	22f0      	movs	r2, #240	; 0xf0
 8001dec:	601a      	str	r2, [r3, #0]
		break;
 8001dee:	e015      	b.n	8001e1c <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 8001df0:	2088      	movs	r0, #136	; 0x88
 8001df2:	f7ff fe2f 	bl	8001a54 <ILI9341_Send_Data>
		X_SIZE = 240;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <ILI9341_Set_Rotation+0x8c>)
 8001df8:	22f0      	movs	r2, #240	; 0xf0
 8001dfa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <ILI9341_Set_Rotation+0x90>)
 8001dfe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e02:	601a      	str	r2, [r3, #0]
		break;
 8001e04:	e00a      	b.n	8001e1c <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 8001e06:	20e8      	movs	r0, #232	; 0xe8
 8001e08:	f7ff fe24 	bl	8001a54 <ILI9341_Send_Data>
		X_SIZE = 320;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <ILI9341_Set_Rotation+0x8c>)
 8001e0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e12:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <ILI9341_Set_Rotation+0x90>)
 8001e16:	22f0      	movs	r2, #240	; 0xf0
 8001e18:	601a      	str	r2, [r3, #0]
		break;
 8001e1a:	bf00      	nop
	}
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000008 	.word	0x20000008
 8001e28:	2000000c 	.word	0x2000000c

08001e2c <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e3e:	4817      	ldr	r0, [pc, #92]	; (8001e9c <ILI9341_SPI_Send_32+0x70>)
 8001e40:	f003 f8c9 	bl	8004fd6 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	4814      	ldr	r0, [pc, #80]	; (8001e9c <ILI9341_SPI_Send_32+0x70>)
 8001e4c:	f003 f8c3 	bl	8004fd6 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff54 	bl	8001d00 <ILI9341_SPI_Send>

	DC_DATA;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e5e:	480f      	ldr	r0, [pc, #60]	; (8001e9c <ILI9341_SPI_Send_32+0x70>)
 8001e60:	f003 f8b9 	bl	8004fd6 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	0e1b      	lsrs	r3, r3, #24
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff48 	bl	8001d00 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	0c1b      	lsrs	r3, r3, #16
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff42 	bl	8001d00 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff3c 	bl	8001d00 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff37 	bl	8001d00 <ILI9341_SPI_Send>

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40010c00 	.word	0x40010c00

08001ea0 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	617b      	str	r3, [r7, #20]
	t |= x2;
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	202a      	movs	r0, #42	; 0x2a
 8001ec4:	f7ff ffb2 	bl	8001e2c <ILI9341_SPI_Send_32>
	t = y1;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	041b      	lsls	r3, r3, #16
 8001ed0:	617b      	str	r3, [r7, #20]
	t |= y2;
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 8001eda:	6979      	ldr	r1, [r7, #20]
 8001edc:	202b      	movs	r0, #43	; 0x2b
 8001ede:	f7ff ffa5 	bl	8001e2c <ILI9341_SPI_Send_32>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 8001eea:	b590      	push	{r4, r7, lr}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	4608      	mov	r0, r1
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4623      	mov	r3, r4
 8001efa:	80fb      	strh	r3, [r7, #6]
 8001efc:	4603      	mov	r3, r0
 8001efe:	80bb      	strh	r3, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 8001f08:	88f8      	ldrh	r0, [r7, #6]
 8001f0a:	88b9      	ldrh	r1, [r7, #4]
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	4413      	add	r3, r2
 8001f12:	3b01      	subs	r3, #1
 8001f14:	461c      	mov	r4, r3
 8001f16:	88ba      	ldrh	r2, [r7, #4]
 8001f18:	883b      	ldrh	r3, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	4622      	mov	r2, r4
 8001f20:	f7ff ffbe 	bl	8001ea0 <ILI9341_Set_Address>
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd90      	pop	{r4, r7, pc}

08001f2c <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001f3c:	202c      	movs	r0, #44	; 0x2c
 8001f3e:	f7ff fd6d 	bl	8001a1c <ILI9341_Send_Command>

	CS_ON;
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f48:	482a      	ldr	r0, [pc, #168]	; (8001ff4 <LCD_FillWindow+0xc8>)
 8001f4a:	f003 f844 	bl	8004fd6 <HAL_GPIO_WritePin>
	DC_DATA;
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	4827      	ldr	r0, [pc, #156]	; (8001ff4 <LCD_FillWindow+0xc8>)
 8001f56:	f003 f83e 	bl	8004fd6 <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <LCD_FillWindow+0xcc>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	2b3f      	cmp	r3, #63	; 0x3f
 8001f6a:	dc01      	bgt.n	8001f70 <LCD_FillWindow+0x44>
 8001f6c:	2340      	movs	r3, #64	; 0x40
 8001f6e:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2bf0      	cmp	r3, #240	; 0xf0
 8001f74:	dd01      	ble.n	8001f7a <LCD_FillWindow+0x4e>
 8001f76:	23f0      	movs	r3, #240	; 0xf0
 8001f78:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f011 f86d 	bl	8013070 <malloc>
 8001f96:	4603      	mov	r3, r0
 8001f98:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
 8001f9e:	e009      	b.n	8001fb4 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	b292      	uxth	r2, r2
 8001fac:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf1      	blt.n	8001fa0 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001fbc:	e009      	b.n	8001fd2 <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f7ff fead 	bl	8001d24 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d8f1      	bhi.n	8001fbe <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4619      	mov	r1, r3
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff fe9f 	bl	8001d24 <ILI9341_SPI_Send_Multiple>

	free(array);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f011 f84a 	bl	8013080 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010c00 	.word	0x40010c00
 8001ff8:	cccccccd 	.word	0xcccccccd

08001ffc <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4604      	mov	r4, r0
 8002004:	4608      	mov	r0, r1
 8002006:	4611      	mov	r1, r2
 8002008:	461a      	mov	r2, r3
 800200a:	4623      	mov	r3, r4
 800200c:	80fb      	strh	r3, [r7, #6]
 800200e:	4603      	mov	r3, r0
 8002010:	80bb      	strh	r3, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	807b      	strh	r3, [r7, #2]
 8002016:	4613      	mov	r3, r2
 8002018:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800201a:	883b      	ldrh	r3, [r7, #0]
 800201c:	887a      	ldrh	r2, [r7, #2]
 800201e:	88b9      	ldrh	r1, [r7, #4]
 8002020:	88f8      	ldrh	r0, [r7, #6]
 8002022:	f7ff ff62 	bl	8001eea <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	883a      	ldrh	r2, [r7, #0]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	461a      	mov	r2, r3
 8002030:	8b3b      	ldrh	r3, [r7, #24]
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f7ff ff79 	bl	8001f2c <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
	...

08002044 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af02      	add	r7, sp, #8
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <LCD_FillScreen+0x2c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <LCD_FillScreen+0x30>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b299      	uxth	r1, r3
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	460b      	mov	r3, r1
 8002060:	2100      	movs	r1, #0
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff ffca 	bl	8001ffc <LCD_DrawFilledRectangle>
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000008 	.word	0x20000008
 8002074:	2000000c 	.word	0x2000000c

08002078 <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	460b      	mov	r3, r1
 8002084:	80bb      	strh	r3, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	3b20      	subs	r3, #32
 800208e:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8002090:	88b9      	ldrh	r1, [r7, #4]
 8002092:	88f8      	ldrh	r0, [r7, #6]
 8002094:	2310      	movs	r3, #16
 8002096:	2208      	movs	r2, #8
 8002098:	f7ff ff27 	bl	8001eea <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 800209c:	202c      	movs	r0, #44	; 0x2c
 800209e:	f7ff fcbd 	bl	8001a1c <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 80020a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020a6:	f010 ffe3 	bl	8013070 <malloc>
 80020aa:	4603      	mov	r3, r0
 80020ac:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80020b2:	2300      	movs	r3, #0
 80020b4:	75bb      	strb	r3, [r7, #22]
 80020b6:	e026      	b.n	8002106 <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	7dbb      	ldrb	r3, [r7, #22]
 80020bc:	491c      	ldr	r1, [pc, #112]	; (8002130 <LCD_DrawChar+0xb8>)
 80020be:	0112      	lsls	r2, r2, #4
 80020c0:	440a      	add	r2, r1
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80020c8:	2300      	movs	r3, #0
 80020ca:	757b      	strb	r3, [r7, #21]
 80020cc:	e015      	b.n	80020fa <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2200      	movs	r2, #0
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	e003      	b.n	80020e8 <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e6:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 80020e8:	7dfb      	ldrb	r3, [r7, #23]
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
			pt++;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	3302      	adds	r3, #2
 80020f2:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80020f4:	7d7b      	ldrb	r3, [r7, #21]
 80020f6:	3301      	adds	r3, #1
 80020f8:	757b      	strb	r3, [r7, #21]
 80020fa:	7d7b      	ldrb	r3, [r7, #21]
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	d9e6      	bls.n	80020ce <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8002100:	7dbb      	ldrb	r3, [r7, #22]
 8002102:	3301      	adds	r3, #1
 8002104:	75bb      	strb	r3, [r7, #22]
 8002106:	7dbb      	ldrb	r3, [r7, #22]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d9d5      	bls.n	80020b8 <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002112:	4808      	ldr	r0, [pc, #32]	; (8002134 <LCD_DrawChar+0xbc>)
 8002114:	f002 ff5f 	bl	8004fd6 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8002118:	f44f 7180 	mov.w	r1, #256	; 0x100
 800211c:	68b8      	ldr	r0, [r7, #8]
 800211e:	f7ff fe01 	bl	8001d24 <ILI9341_SPI_Send_Multiple>
	free(array);
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f010 ffac 	bl	8013080 <free>
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0802ee64 	.word	0x0802ee64
 8002134:	40010c00 	.word	0x40010c00

08002138 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	603a      	str	r2, [r7, #0]
 8002142:	80fb      	strh	r3, [r7, #6]
 8002144:	460b      	mov	r3, r1
 8002146:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8002148:	e01d      	b.n	8002186 <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002150:	d904      	bls.n	800215c <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002152:	2300      	movs	r3, #0
 8002154:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8002156:	88bb      	ldrh	r3, [r7, #4]
 8002158:	3310      	adds	r3, #16
 800215a:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800215c:	88bb      	ldrh	r3, [r7, #4]
 800215e:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8002162:	d903      	bls.n	800216c <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8002164:	2300      	movs	r3, #0
 8002166:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8002168:	2300      	movs	r3, #0
 800216a:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	88b9      	ldrh	r1, [r7, #4]
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff7f 	bl	8002078 <LCD_DrawChar>

		pStr ++;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	3308      	adds	r3, #8
 8002184:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1dd      	bne.n	800214a <LCD_DrawString+0x12>

	}

}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8002198:	b40c      	push	{r2, r3}
 800219a:	b580      	push	{r7, lr}
 800219c:	b08e      	sub	sp, #56	; 0x38
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	460a      	mov	r2, r1
 80021a4:	80fb      	strh	r3, [r7, #6]
 80021a6:	4613      	mov	r3, r2
 80021a8:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 80021aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80021ae:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 80021b0:	f107 000c 	add.w	r0, r7, #12
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021b8:	2128      	movs	r1, #40	; 0x28
 80021ba:	f011 fce9 	bl	8013b90 <vsniprintf>
 80021be:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	b298      	uxth	r0, r3
 80021cc:	88bb      	ldrh	r3, [r7, #4]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f107 020c 	add.w	r2, r7, #12
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7ff ffae 	bl	8002138 <LCD_DrawString>
 80021dc:	e000      	b.n	80021e0 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 80021de:	bf00      	nop
}
 80021e0:	3738      	adds	r7, #56	; 0x38
 80021e2:	46bd      	mov	sp, r7
 80021e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021e8:	b002      	add	sp, #8
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_PeriodElapsedCallback>:

uint32_t audio_interrupt_counts = 0;
uint32_t audio_interrupt_start_tick = 0;
uint32_t mix_interrupt_counts = 0;
uint32_t mix_interrupt_start_tick = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d12f      	bne.n	800225c <HAL_TIM_PeriodElapsedCallback+0x70>
		drum_interrupt_counts++;
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	3301      	adds	r3, #1
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002204:	6013      	str	r3, [r2, #0]
		DrumUpdate(0);
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff fb2e 	bl	8001868 <DrumUpdate>

//		if (drum_interrupt_counts % 2 == 0) {

		keyboardhid.KEYCODE1 = drums[0].state >= DRUM_HIT ? 0x07 : 0x00;  // press 'd'
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800220e:	7a1b      	ldrb	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8002214:	2207      	movs	r2, #7
 8002216:	e000      	b.n	800221a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8002218:	2200      	movs	r2, #0
 800221a:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800221c:	709a      	strb	r2, [r3, #2]
		keyboardhid.KEYCODE2 = drums[1].state >= DRUM_HIT ? 0x09 : 0x00;  // press 'f'
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_TIM_PeriodElapsedCallback+0x40>
 8002228:	2209      	movs	r2, #9
 800222a:	e000      	b.n	800222e <HAL_TIM_PeriodElapsedCallback+0x42>
 800222c:	2200      	movs	r2, #0
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002230:	70da      	strb	r2, [r3, #3]
		keyboardhid.KEYCODE3 = drums[2].state >= DRUM_HIT ? 0x0d : 0x00;  // press 'j'
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002234:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_TIM_PeriodElapsedCallback+0x54>
 800223c:	220d      	movs	r2, #13
 800223e:	e000      	b.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x56>
 8002240:	2200      	movs	r2, #0
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002244:	711a      	strb	r2, [r3, #4]
		keyboardhid.KEYCODE4 = drums[3].state >= DRUM_HIT ? 0x0e : 0x00;  // press 'k'
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002248:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_TIM_PeriodElapsedCallback+0x68>
 8002250:	220e      	movs	r2, #14
 8002252:	e000      	b.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8002254:	2200      	movs	r2, #0
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002258:	715a      	strb	r2, [r3, #5]

	else if (htim == &htim4) {
		mix_interrupt_counts++;
		PrecomputeMix();
	}
}
 800225a:	e00a      	b.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x86>
	else if (htim == &htim4) {
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d106      	bne.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x86>
		mix_interrupt_counts++;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800226c:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 800226e:	f7fe fcff 	bl	8000c70 <PrecomputeMix>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000db8 	.word	0x20000db8
 8002280:	20000e90 	.word	0x20000e90
 8002284:	20000a00 	.word	0x20000a00
 8002288:	20000e94 	.word	0x20000e94
 800228c:	20000e00 	.word	0x20000e00
 8002290:	20000e9c 	.word	0x20000e9c

08002294 <HAL_GPIO_EXTI_Callback>:

uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
	int keyPressed = ButtonPadCallback(GPIO_Pin);
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe fdc1 	bl	8000e28 <ButtonPadCallback>
 80022a6:	60f8      	str	r0, [r7, #12]
	ButtonPad_DrumCalibration(keyPressed);
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff fb3f 	bl	800192c <ButtonPad_DrumCalibration>
	btn_callbacks++;
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_GPIO_EXTI_Callback+0x30>)
 80022b8:	801a      	strh	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000ea0 	.word	0x20000ea0

080022c8 <HAL_UART_RxCpltCallback>:

uint8_t Rx_data[1] = {0};
uint16_t Rx_buff[6] = {0};
int Rx_length = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
//	Rx_length += 1;
	if (Rx_length < 2) {
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	dc13      	bgt.n	8002300 <HAL_UART_RxCpltCallback+0x38>
		if (*Rx_data != 0xFF) {
 80022d8:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_UART_RxCpltCallback+0xb8>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2bff      	cmp	r3, #255	; 0xff
 80022de:	d003      	beq.n	80022e8 <HAL_UART_RxCpltCallback+0x20>
			Rx_length = 0;
 80022e0:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e040      	b.n	800236a <HAL_UART_RxCpltCallback+0xa2>
		} else {
			((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	4923      	ldr	r1, [pc, #140]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 80022f0:	600a      	str	r2, [r1, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 80022f6:	4413      	add	r3, r2
 80022f8:	4a21      	ldr	r2, [pc, #132]	; (8002380 <HAL_UART_RxCpltCallback+0xb8>)
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e034      	b.n	800236a <HAL_UART_RxCpltCallback+0xa2>
		}
	} else {
		((uint8_t*) Rx_buff)[Rx_length++] = *Rx_data;
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	491d      	ldr	r1, [pc, #116]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 8002308:	600a      	str	r2, [r1, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 800230e:	4413      	add	r3, r2
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_UART_RxCpltCallback+0xb8>)
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	701a      	strb	r2, [r3, #0]
		if (Rx_length == 12) {
 8002316:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d125      	bne.n	800236a <HAL_UART_RxCpltCallback+0xa2>
			if (Rx_buff[1] + Rx_buff[2] + Rx_buff[3] + Rx_buff[4] == Rx_buff[5]) {
 800231e:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 8002320:	885b      	ldrh	r3, [r3, #2]
 8002322:	461a      	mov	r2, r3
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 8002326:	889b      	ldrh	r3, [r3, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a16      	ldr	r2, [pc, #88]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 800232c:	88d2      	ldrh	r2, [r2, #6]
 800232e:	4413      	add	r3, r2
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 8002332:	8912      	ldrh	r2, [r2, #8]
 8002334:	4413      	add	r3, r2
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 8002338:	8952      	ldrh	r2, [r2, #10]
 800233a:	4293      	cmp	r3, r2
 800233c:	d112      	bne.n	8002364 <HAL_UART_RxCpltCallback+0x9c>
				for (int i = 0; i < 4; i++) {
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	e00c      	b.n	800235e <HAL_UART_RxCpltCallback+0x96>
					drum_sensor_values[i] = Rx_buff[i+1];
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_UART_RxCpltCallback+0xbc>)
 800234a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800234e:	4619      	mov	r1, r3
 8002350:	4a0d      	ldr	r2, [pc, #52]	; (8002388 <HAL_UART_RxCpltCallback+0xc0>)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int i = 0; i < 4; i++) {
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b03      	cmp	r3, #3
 8002362:	ddef      	ble.n	8002344 <HAL_UART_RxCpltCallback+0x7c>
				}
			}
			Rx_length = 0;
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_UART_RxCpltCallback+0xb4>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 800236a:	2201      	movs	r2, #1
 800236c:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_UART_RxCpltCallback+0xb8>)
 800236e:	4807      	ldr	r0, [pc, #28]	; (800238c <HAL_UART_RxCpltCallback+0xc4>)
 8002370:	f008 fc84 	bl	800ac7c <HAL_UART_Receive_IT>
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000eb4 	.word	0x20000eb4
 8002380:	20000ea4 	.word	0x20000ea4
 8002384:	20000ea8 	.word	0x20000ea8
 8002388:	200009f0 	.word	0x200009f0
 800238c:	20000e48 	.word	0x20000e48

08002390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b0b3      	sub	sp, #204	; 0xcc
 8002394:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002396:	f001 f925 	bl	80035e4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800239a:	f000 f95d 	bl	8002658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800239e:	f000 fc2b 	bl	8002bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 80023a2:	f000 fbef 	bl	8002b84 <MX_DMA_Init>
  MX_SPI2_Init();
 80023a6:	f000 faa3 	bl	80028f0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80023aa:	f000 fb23 	bl	80029f4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80023ae:	f000 f9b3 	bl	8002718 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80023b2:	f010 fa79 	bl	80128a8 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 80023b6:	f000 fa7b 	bl	80028b0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80023ba:	f00c fa99 	bl	800e8f0 <MX_FATFS_Init>
  MX_DAC_Init();
 80023be:	f000 fa15 	bl	80027ec <MX_DAC_Init>
  MX_I2C1_Init();
 80023c2:	f000 fa47 	bl	8002854 <MX_I2C1_Init>
  MX_TIM2_Init();
 80023c6:	f000 fac9 	bl	800295c <MX_TIM2_Init>
  MX_TIM4_Init();
 80023ca:	f000 fb61 	bl	8002a90 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80023ce:	f000 fbaf 	bl	8002b30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 80023d2:	4898      	ldr	r0, [pc, #608]	; (8002634 <main+0x2a4>)
 80023d4:	f001 fc0a 	bl	8003bec <HAL_ADCEx_Calibration_Start>
  HAL_UART_Receive_IT (&huart1, Rx_data, 1);
 80023d8:	2201      	movs	r2, #1
 80023da:	4997      	ldr	r1, [pc, #604]	; (8002638 <main+0x2a8>)
 80023dc:	4897      	ldr	r0, [pc, #604]	; (800263c <main+0x2ac>)
 80023de:	f008 fc4d 	bl	800ac7c <HAL_UART_Receive_IT>

	ButtonPadInit();
 80023e2:	f7fe fd03 	bl	8000dec <ButtonPadInit>

	ILI9341_Init();
 80023e6:	f7ff fb51 	bl	8001a8c <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 80023ea:	2002      	movs	r0, #2
 80023ec:	f7ff fcd4 	bl	8001d98 <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 80023f0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80023f4:	f7ff fe26 	bl	8002044 <LCD_FillScreen>

  	// Setting the clock divider somehow helps :D
  	FRESULT fresult = f_mount(&fs, "/", 1);
 80023f8:	2201      	movs	r2, #1
 80023fa:	4991      	ldr	r1, [pc, #580]	; (8002640 <main+0x2b0>)
 80023fc:	4891      	ldr	r0, [pc, #580]	; (8002644 <main+0x2b4>)
 80023fe:	f00f fbbb 	bl	8011b78 <f_mount>
 8002402:	4603      	mov	r3, r0
 8002404:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  	if (fresult != FR_OK) {
 8002408:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <main+0x90>
  		LCD_Print(0, 19, "Error: f_mount (%d)", fresult); while (1);
 8002410:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8002414:	4a8c      	ldr	r2, [pc, #560]	; (8002648 <main+0x2b8>)
 8002416:	2113      	movs	r1, #19
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff febd 	bl	8002198 <LCD_Print>
 800241e:	e7fe      	b.n	800241e <main+0x8e>
  	}

	DrumInit();
 8002420:	f7fe fe78 	bl	8001114 <DrumInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	long last_ticks = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	long tft_last_ticks = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	long ticks = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	int num_hits = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int hit_state = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
unsigned char ADSwrite[6];
int16_t reading;
int16_t voltage[4];
//const float voltageConv = 6.114 / 32768.0;

	uint8_t ADS1115_devAddress = 0b1001000;	// 7 bit address, without R/W' bit.
 8002442:	2348      	movs	r3, #72	; 0x48
 8002444:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* TIMEOUT */
	#define ADS1115_TIMEOUT 1 // Timeout for HAL I2C functions.


	uint16_t ADS1115_dataRate = ADS1115_DATA_RATE_128; // Default
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	uint16_t ADS1115_pga = ADS1115_PGA_TWO; // Default
 800244e:	2304      	movs	r3, #4
 8002450:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	uint16_t ADS1115_port = ADS1115_MUX_AIN0; // Default
 8002454:	2340      	movs	r3, #64	; 0x40
 8002456:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	uint8_t ADS1115_config[2];
	uint8_t ADS1115_rawValue[2];
	float ADS1115_voltCoef; // Voltage coefficient.


	if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (ADS1115_devAddress << 1), 5, ADS1115_TIMEOUT) == HAL_OK) {
 800245a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800245e:	b29b      	uxth	r3, r3
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	b299      	uxth	r1, r3
 8002464:	2301      	movs	r3, #1
 8002466:	2205      	movs	r2, #5
 8002468:	4878      	ldr	r0, [pc, #480]	; (800264c <main+0x2bc>)
 800246a:	f003 fa93 	bl	8005994 <HAL_I2C_IsDeviceReady>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d000      	beq.n	8002476 <main+0xe6>
//		return HAL_OK;
	} else {
//		return HAL_ERROR;
		while (1) {}
 8002474:	e7fe      	b.n	8002474 <main+0xe4>

	uint16_t max_reading[4];
	uint32_t reset_ticks;
	while (1) {

		for (int i = 0; i < 4; i++) {
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800247c:	e024      	b.n	80024c8 <main+0x138>
			if (voltage[i] > max_reading[i]) {
 800247e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	33b8      	adds	r3, #184	; 0xb8
 8002486:	443b      	add	r3, r7
 8002488:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 800248c:	461a      	mov	r2, r3
 800248e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	33b8      	adds	r3, #184	; 0xb8
 8002496:	443b      	add	r3, r7
 8002498:	f833 3cac 	ldrh.w	r3, [r3, #-172]
 800249c:	429a      	cmp	r2, r3
 800249e:	dd0e      	ble.n	80024be <main+0x12e>
				max_reading[i] = voltage[i];
 80024a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	33b8      	adds	r3, #184	; 0xb8
 80024a8:	443b      	add	r3, r7
 80024aa:	f933 3c48 	ldrsh.w	r3, [r3, #-72]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	33b8      	adds	r3, #184	; 0xb8
 80024b8:	443b      	add	r3, r7
 80024ba:	f823 2cac 	strh.w	r2, [r3, #-172]
		for (int i = 0; i < 4; i++) {
 80024be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024c2:	3301      	adds	r3, #1
 80024c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	ddd6      	ble.n	800247e <main+0xee>
			}
		}

		if (HAL_GetTick() - reset_ticks > 1000) {
 80024d0:	f001 f8e0 	bl	8003694 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024e0:	d918      	bls.n	8002514 <main+0x184>
			reset_ticks = HAL_GetTick();
 80024e2:	f001 f8d7 	bl	8003694 <HAL_GetTick>
 80024e6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			for (int i = 0; i < 4; i++) {
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024f0:	e00c      	b.n	800250c <main+0x17c>
				max_reading[i] = 0;
 80024f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	33b8      	adds	r3, #184	; 0xb8
 80024fa:	443b      	add	r3, r7
 80024fc:	2200      	movs	r2, #0
 80024fe:	f823 2cac 	strh.w	r2, [r3, #-172]
			for (int i = 0; i < 4; i++) {
 8002502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002506:	3301      	adds	r3, #1
 8002508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800250c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002510:	2b03      	cmp	r3, #3
 8002512:	ddee      	ble.n	80024f2 <main+0x162>
		}




		int r = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (HAL_GetTick() - tft_last_ticks > 10) {
 800251a:	f001 f8bb 	bl	8003694 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b0a      	cmp	r3, #10
 8002528:	d92e      	bls.n	8002588 <main+0x1f8>
//					HAL_GetTick() / (1000 * 60 * 60),
//					HAL_GetTick() / (1000 * 60) % 60,
//					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
//					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
//					Rx_length, btn_callbacks);
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", max_reading[0], max_reading[1], max_reading[2], max_reading[3]);
 800252a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002534:	b299      	uxth	r1, r3
 8002536:	89bb      	ldrh	r3, [r7, #12]
 8002538:	461c      	mov	r4, r3
 800253a:	89fb      	ldrh	r3, [r7, #14]
 800253c:	8a3a      	ldrh	r2, [r7, #16]
 800253e:	8a78      	ldrh	r0, [r7, #18]
 8002540:	9002      	str	r0, [sp, #8]
 8002542:	9201      	str	r2, [sp, #4]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4623      	mov	r3, r4
 8002548:	4a41      	ldr	r2, [pc, #260]	; (8002650 <main+0x2c0>)
 800254a:	2000      	movs	r0, #0
 800254c:	f7ff fe24 	bl	8002198 <LCD_Print>
////			LCD_DrumCalibration(&r);
			LCD_Print(0, r++, "acd%6d %6d %6d %6d     ", voltage[0], voltage[1], voltage[2], voltage[3]);
 8002550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800255a:	b299      	uxth	r1, r3
 800255c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8002560:	461c      	mov	r4, r3
 8002562:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8002566:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	; 0x74
 800256a:	f9b7 0076 	ldrsh.w	r0, [r7, #118]	; 0x76
 800256e:	9002      	str	r0, [sp, #8]
 8002570:	9201      	str	r2, [sp, #4]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4623      	mov	r3, r4
 8002576:	4a36      	ldr	r2, [pc, #216]	; (8002650 <main+0x2c0>)
 8002578:	2000      	movs	r0, #0
 800257a:	f7ff fe0d 	bl	8002198 <LCD_Print>
//			LCD_Print(0, 0, "%05d %05d", max_reading[0], voltage[0]);
			//			LCD_DrumCalibration(&r);
			tft_last_ticks = HAL_GetTick();
 800257e:	f001 f889 	bl	8003694 <HAL_GetTick>
 8002582:	4603      	mov	r3, r0
 8002584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

		uint8_t ADSConfig[3] = {0x01,
 8002588:	4a32      	ldr	r2, [pc, #200]	; (8002654 <main+0x2c4>)
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4611      	mov	r1, r2
 8002592:	8019      	strh	r1, [r3, #0]
 8002594:	3302      	adds	r3, #2
 8002596:	0c12      	lsrs	r2, r2, #16
 8002598:	701a      	strb	r2, [r3, #0]
							     ADS1115_OS | ADS1115_MODE_CONTINUOUS | ADS1115_PGA_ONE,
								 ADS1115_DATA_RATE_250 | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT | ADS1115_COMP_QUE };
		uint8_t ADSWrite[1] = {0x00};
 800259a:	2300      	movs	r3, #0
 800259c:	713b      	strb	r3, [r7, #4]
		uint8_t ADSReceive[2];
		for (int i = 0; i < 4; i++){
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80025a4:	e040      	b.n	8002628 <main+0x298>
			ADSConfig[1] = ADS1115_OS | ADS1115_PGA_ONE | ADS1115_MODE_CONTINUOUS | ((0b100 | i) << 4); // choose AIN
 80025a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	b25b      	sxtb	r3, r3
 80025ae:	f063 033d 	orn	r3, r3, #61	; 0x3d
 80025b2:	b25b      	sxtb	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	727b      	strb	r3, [r7, #9]

			int temp;
			temp = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSConfig, 3, 100);
 80025b8:	f107 0208 	add.w	r2, r7, #8
 80025bc:	2364      	movs	r3, #100	; 0x64
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2303      	movs	r3, #3
 80025c2:	2190      	movs	r1, #144	; 0x90
 80025c4:	4821      	ldr	r0, [pc, #132]	; (800264c <main+0x2bc>)
 80025c6:	f002 fe7b 	bl	80052c0 <HAL_I2C_Master_Transmit>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
//			if (!temp) LCD_Print(0, r++, "ERROR 1! %d", temp);
			temp = HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSWrite, 1, 100);
 80025d0:	1d3a      	adds	r2, r7, #4
 80025d2:	2364      	movs	r3, #100	; 0x64
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2301      	movs	r3, #1
 80025d8:	2190      	movs	r1, #144	; 0x90
 80025da:	481c      	ldr	r0, [pc, #112]	; (800264c <main+0x2bc>)
 80025dc:	f002 fe70 	bl	80052c0 <HAL_I2C_Master_Transmit>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
//			if (!temp) LCD_Print(0, r++, "ERROR 2! %d", temp);
			HAL_Delay(20);
 80025e6:	2014      	movs	r0, #20
 80025e8:	f001 f85e 	bl	80036a8 <HAL_Delay>

			temp = HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS << 1, ADSReceive, 2, 100);
 80025ec:	463a      	mov	r2, r7
 80025ee:	2364      	movs	r3, #100	; 0x64
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2302      	movs	r3, #2
 80025f4:	2190      	movs	r1, #144	; 0x90
 80025f6:	4815      	ldr	r0, [pc, #84]	; (800264c <main+0x2bc>)
 80025f8:	f002 ff60 	bl	80054bc <HAL_I2C_Master_Receive>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
//			if (!temp) LCD_Print(0, r++, "ERROR 3! %d", temp);
			voltage[i] = (ADSReceive[0] << 8 | ADSReceive[1]);
 8002602:	783b      	ldrb	r3, [r7, #0]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	b21a      	sxth	r2, r3
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	b21b      	sxth	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	b21a      	sxth	r2, r3
 8002610:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	33b8      	adds	r3, #184	; 0xb8
 8002618:	443b      	add	r3, r7
 800261a:	f823 2c48 	strh.w	r2, [r3, #-72]
		for (int i = 0; i < 4; i++){
 800261e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002622:	3301      	adds	r3, #1
 8002624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800262c:	2b03      	cmp	r3, #3
 800262e:	ddba      	ble.n	80025a6 <main+0x216>
	while (1) {
 8002630:	e721      	b.n	8002476 <main+0xe6>
 8002632:	bf00      	nop
 8002634:	20000b30 	.word	0x20000b30
 8002638:	20000ea4 	.word	0x20000ea4
 800263c:	20000e48 	.word	0x20000e48
 8002640:	08016194 	.word	0x08016194
 8002644:	200007c0 	.word	0x200007c0
 8002648:	08016198 	.word	0x08016198
 800264c:	20000c40 	.word	0x20000c40
 8002650:	080161ac 	.word	0x080161ac
 8002654:	080161c4 	.word	0x080161c4

08002658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b096      	sub	sp, #88	; 0x58
 800265c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002662:	2228      	movs	r2, #40	; 0x28
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f010 fd12 	bl	8013090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800266c:	f107 031c 	add.w	r3, r7, #28
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800268c:	2301      	movs	r3, #1
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269a:	2301      	movs	r3, #1
 800269c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800269e:	2302      	movs	r3, #2
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b2:	4618      	mov	r0, r3
 80026b4:	f005 fb78 	bl	8007da8 <HAL_RCC_OscConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80026be:	f000 fb69 	bl	8002d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	230f      	movs	r3, #15
 80026c4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80026d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f005 fde3 	bl	80082ac <HAL_RCC_ClockConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026ec:	f000 fb52 	bl	8002d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80026f0:	2312      	movs	r3, #18
 80026f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80026f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	4618      	mov	r0, r3
 8002702:	f005 ff61 	bl	80085c8 <HAL_RCCEx_PeriphCLKConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800270c:	f000 fb42 	bl	8002d94 <Error_Handler>
  }
}
 8002710:	bf00      	nop
 8002712:	3758      	adds	r7, #88	; 0x58
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <MX_ADC1_Init+0xcc>)
 800272a:	4a2f      	ldr	r2, [pc, #188]	; (80027e8 <MX_ADC1_Init+0xd0>)
 800272c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800272e:	4b2d      	ldr	r3, [pc, #180]	; (80027e4 <MX_ADC1_Init+0xcc>)
 8002730:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <MX_ADC1_Init+0xcc>)
 8002738:	2201      	movs	r2, #1
 800273a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800273c:	4b29      	ldr	r3, [pc, #164]	; (80027e4 <MX_ADC1_Init+0xcc>)
 800273e:	2200      	movs	r2, #0
 8002740:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002742:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <MX_ADC1_Init+0xcc>)
 8002744:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002748:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800274a:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <MX_ADC1_Init+0xcc>)
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <MX_ADC1_Init+0xcc>)
 8002752:	2204      	movs	r2, #4
 8002754:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002756:	4823      	ldr	r0, [pc, #140]	; (80027e4 <MX_ADC1_Init+0xcc>)
 8002758:	f000 ffca 	bl	80036f0 <HAL_ADC_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002762:	f000 fb17 	bl	8002d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800276a:	2301      	movs	r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800276e:	2307      	movs	r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	481b      	ldr	r0, [pc, #108]	; (80027e4 <MX_ADC1_Init+0xcc>)
 8002778:	f001 f8a4 	bl	80038c4 <HAL_ADC_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002782:	f000 fb07 	bl	8002d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002786:	2301      	movs	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800278a:	2302      	movs	r3, #2
 800278c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4814      	ldr	r0, [pc, #80]	; (80027e4 <MX_ADC1_Init+0xcc>)
 8002794:	f001 f896 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800279e:	f000 faf9 	bl	8002d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80027a2:	2302      	movs	r3, #2
 80027a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80027a6:	2303      	movs	r3, #3
 80027a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	4619      	mov	r1, r3
 80027ae:	480d      	ldr	r0, [pc, #52]	; (80027e4 <MX_ADC1_Init+0xcc>)
 80027b0:	f001 f888 	bl	80038c4 <HAL_ADC_ConfigChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80027ba:	f000 faeb 	bl	8002d94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80027be:	2303      	movs	r3, #3
 80027c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80027c2:	2304      	movs	r3, #4
 80027c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_ADC1_Init+0xcc>)
 80027cc:	f001 f87a 	bl	80038c4 <HAL_ADC_ConfigChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80027d6:	f000 fadd 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000b30 	.word	0x20000b30
 80027e8:	40012400 	.word	0x40012400

080027ec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027f2:	463b      	mov	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <MX_DAC_Init+0x60>)
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <MX_DAC_Init+0x64>)
 80027fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002800:	4812      	ldr	r0, [pc, #72]	; (800284c <MX_DAC_Init+0x60>)
 8002802:	f001 fbae 	bl	8003f62 <HAL_DAC_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800280c:	f000 fac2 	bl	8002d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002810:	2324      	movs	r3, #36	; 0x24
 8002812:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002818:	463b      	mov	r3, r7
 800281a:	2200      	movs	r2, #0
 800281c:	4619      	mov	r1, r3
 800281e:	480b      	ldr	r0, [pc, #44]	; (800284c <MX_DAC_Init+0x60>)
 8002820:	f001 fcca 	bl	80041b8 <HAL_DAC_ConfigChannel>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800282a:	f000 fab3 	bl	8002d94 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800282e:	463b      	mov	r3, r7
 8002830:	2210      	movs	r2, #16
 8002832:	4619      	mov	r1, r3
 8002834:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_DAC_Init+0x60>)
 8002836:	f001 fcbf 	bl	80041b8 <HAL_DAC_ConfigChannel>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002840:	f000 faa8 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000ba4 	.word	0x20000ba4
 8002850:	40007400 	.word	0x40007400

08002854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <MX_I2C1_Init+0x50>)
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <MX_I2C1_Init+0x54>)
 800285c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_I2C1_Init+0x50>)
 8002860:	4a12      	ldr	r2, [pc, #72]	; (80028ac <MX_I2C1_Init+0x58>)
 8002862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <MX_I2C1_Init+0x50>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_I2C1_Init+0x50>)
 800286c:	2200      	movs	r2, #0
 800286e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_I2C1_Init+0x50>)
 8002872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <MX_I2C1_Init+0x50>)
 800287a:	2200      	movs	r2, #0
 800287c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_I2C1_Init+0x50>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <MX_I2C1_Init+0x50>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_I2C1_Init+0x50>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002890:	4804      	ldr	r0, [pc, #16]	; (80028a4 <MX_I2C1_Init+0x50>)
 8002892:	f002 fbd1 	bl	8005038 <HAL_I2C_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800289c:	f000 fa7a 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000c40 	.word	0x20000c40
 80028a8:	40005400 	.word	0x40005400
 80028ac:	000186a0 	.word	0x000186a0

080028b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_SDIO_SD_Init+0x38>)
 80028b6:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <MX_SDIO_SD_Init+0x3c>)
 80028b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_SDIO_SD_Init+0x38>)
 80028bc:	2200      	movs	r2, #0
 80028be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_SDIO_SD_Init+0x38>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <MX_SDIO_SD_Init+0x38>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <MX_SDIO_SD_Init+0x38>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <MX_SDIO_SD_Init+0x38>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <MX_SDIO_SD_Init+0x38>)
 80028da:	2264      	movs	r2, #100	; 0x64
 80028dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000c94 	.word	0x20000c94
 80028ec:	40018000 	.word	0x40018000

080028f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80028f4:	4b17      	ldr	r3, [pc, #92]	; (8002954 <MX_SPI2_Init+0x64>)
 80028f6:	4a18      	ldr	r2, [pc, #96]	; (8002958 <MX_SPI2_Init+0x68>)
 80028f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80028fa:	4b16      	ldr	r3, [pc, #88]	; (8002954 <MX_SPI2_Init+0x64>)
 80028fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <MX_SPI2_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002908:	4b12      	ldr	r3, [pc, #72]	; (8002954 <MX_SPI2_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <MX_SPI2_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <MX_SPI2_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <MX_SPI2_Init+0x64>)
 800291c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002920:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <MX_SPI2_Init+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <MX_SPI2_Init+0x64>)
 800292a:	2200      	movs	r2, #0
 800292c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <MX_SPI2_Init+0x64>)
 8002930:	2200      	movs	r2, #0
 8002932:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <MX_SPI2_Init+0x64>)
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <MX_SPI2_Init+0x64>)
 800293c:	220a      	movs	r2, #10
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002940:	4804      	ldr	r0, [pc, #16]	; (8002954 <MX_SPI2_Init+0x64>)
 8002942:	f007 f95a 	bl	8009bfa <HAL_SPI_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800294c:	f000 fa22 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000d18 	.word	0x20000d18
 8002958:	40003800 	.word	0x40003800

0800295c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002970:	463b      	mov	r3, r7
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <MX_TIM2_Init+0x94>)
 800297a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800297e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <MX_TIM2_Init+0x94>)
 8002982:	2200      	movs	r2, #0
 8002984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <MX_TIM2_Init+0x94>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <MX_TIM2_Init+0x94>)
 800298e:	f240 52db 	movw	r2, #1499	; 0x5db
 8002992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002994:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <MX_TIM2_Init+0x94>)
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <MX_TIM2_Init+0x94>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029a0:	4813      	ldr	r0, [pc, #76]	; (80029f0 <MX_TIM2_Init+0x94>)
 80029a2:	f007 fb97 	bl	800a0d4 <HAL_TIM_Base_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029ac:	f000 f9f2 	bl	8002d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	4619      	mov	r1, r3
 80029bc:	480c      	ldr	r0, [pc, #48]	; (80029f0 <MX_TIM2_Init+0x94>)
 80029be:	f007 fdbf 	bl	800a540 <HAL_TIM_ConfigClockSource>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029c8:	f000 f9e4 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029cc:	2320      	movs	r3, #32
 80029ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029d4:	463b      	mov	r3, r7
 80029d6:	4619      	mov	r1, r3
 80029d8:	4805      	ldr	r0, [pc, #20]	; (80029f0 <MX_TIM2_Init+0x94>)
 80029da:	f008 f881 	bl	800aae0 <HAL_TIMEx_MasterConfigSynchronization>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029e4:	f000 f9d6 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20000d70 	.word	0x20000d70

080029f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a08:	463b      	mov	r3, r7
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a12:	4a1e      	ldr	r2, [pc, #120]	; (8002a8c <MX_TIM3_Init+0x98>)
 8002a14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a18:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002a1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a26:	2231      	movs	r2, #49	; 0x31
 8002a28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a30:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a36:	4814      	ldr	r0, [pc, #80]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a38:	f007 fb4c 	bl	800a0d4 <HAL_TIM_Base_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002a42:	f000 f9a7 	bl	8002d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	4619      	mov	r1, r3
 8002a52:	480d      	ldr	r0, [pc, #52]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a54:	f007 fd74 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002a5e:	f000 f999 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <MX_TIM3_Init+0x94>)
 8002a70:	f008 f836 	bl	800aae0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002a7a:	f000 f98b 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000db8 	.word	0x20000db8
 8002a8c:	40000400 	.word	0x40000400

08002a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002aae:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002ab0:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <MX_TIM4_Init+0x9c>)
 8002ab2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002ac2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ac6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac8:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ad4:	4814      	ldr	r0, [pc, #80]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002ad6:	f007 fafd 	bl	800a0d4 <HAL_TIM_Base_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ae0:	f000 f958 	bl	8002d94 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002ae4:	2305      	movs	r3, #5
 8002ae6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002ae8:	2310      	movs	r3, #16
 8002aea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002aec:	f107 030c 	add.w	r3, r7, #12
 8002af0:	4619      	mov	r1, r3
 8002af2:	480d      	ldr	r0, [pc, #52]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002af4:	f007 fdeb 	bl	800a6ce <HAL_TIM_SlaveConfigSynchro>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002afe:	f000 f949 	bl	8002d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4806      	ldr	r0, [pc, #24]	; (8002b28 <MX_TIM4_Init+0x98>)
 8002b10:	f007 ffe6 	bl	800aae0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002b1a:	f000 f93b 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000e00 	.word	0x20000e00
 8002b2c:	40000800 	.word	0x40000800

08002b30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <MX_USART1_UART_Init+0x50>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_USART1_UART_Init+0x4c>)
 8002b68:	f008 f838 	bl	800abdc <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b72:	f000 f90f 	bl	8002d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000e48 	.word	0x20000e48
 8002b80:	40013800 	.word	0x40013800

08002b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_DMA_Init+0x70>)
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <MX_DMA_Init+0x70>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6153      	str	r3, [r2, #20]
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <MX_DMA_Init+0x70>)
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <MX_DMA_Init+0x70>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <MX_DMA_Init+0x70>)
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	6153      	str	r3, [r2, #20]
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_DMA_Init+0x70>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	200b      	movs	r0, #11
 8002bc0:	f001 f999 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002bc4:	200b      	movs	r0, #11
 8002bc6:	f001 f9b2 	bl	8003f2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	203a      	movs	r0, #58	; 0x3a
 8002bd0:	f001 f991 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002bd4:	203a      	movs	r0, #58	; 0x3a
 8002bd6:	f001 f9aa 	bl	8003f2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	203b      	movs	r0, #59	; 0x3b
 8002be0:	f001 f989 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8002be4:	203b      	movs	r0, #59	; 0x3b
 8002be6:	f001 f9a2 	bl	8003f2e <HAL_NVIC_EnableIRQ>

}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfe:	f107 0318 	add.w	r3, r7, #24
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c0c:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4a5b      	ldr	r2, [pc, #364]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c16:	6193      	str	r3, [r2, #24]
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c24:	4b56      	ldr	r3, [pc, #344]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	4a55      	ldr	r2, [pc, #340]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c2a:	f043 0310 	orr.w	r3, r3, #16
 8002c2e:	6193      	str	r3, [r2, #24]
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3c:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4a4f      	ldr	r2, [pc, #316]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6193      	str	r3, [r2, #24]
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c54:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a49      	ldr	r2, [pc, #292]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c5a:	f043 0308 	orr.w	r3, r3, #8
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6c:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	4a43      	ldr	r2, [pc, #268]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c72:	f043 0320 	orr.w	r3, r3, #32
 8002c76:	6193      	str	r3, [r2, #24]
 8002c78:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <MX_GPIO_Init+0x188>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002c84:	2200      	movs	r2, #0
 8002c86:	f64f 0170 	movw	r1, #63600	; 0xf870
 8002c8a:	483e      	ldr	r0, [pc, #248]	; (8002d84 <MX_GPIO_Init+0x18c>)
 8002c8c:	f002 f9a3 	bl	8004fd6 <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8002c96:	483c      	ldr	r0, [pc, #240]	; (8002d88 <MX_GPIO_Init+0x190>)
 8002c98:	f002 f99d 	bl	8004fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002ca2:	483a      	ldr	r0, [pc, #232]	; (8002d8c <MX_GPIO_Init+0x194>)
 8002ca4:	f002 f997 	bl	8004fd6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002cac:	4b38      	ldr	r3, [pc, #224]	; (8002d90 <MX_GPIO_Init+0x198>)
 8002cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb4:	f107 0318 	add.w	r3, r7, #24
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4832      	ldr	r0, [pc, #200]	; (8002d84 <MX_GPIO_Init+0x18c>)
 8002cbc:	f001 ffe0 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002cc0:	f64f 0370 	movw	r3, #63600	; 0xf870
 8002cc4:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd2:	f107 0318 	add.w	r3, r7, #24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	482a      	ldr	r0, [pc, #168]	; (8002d84 <MX_GPIO_Init+0x18c>)
 8002cda:	f001 ffd1 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2302      	movs	r3, #2
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf0:	f107 0318 	add.w	r3, r7, #24
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4824      	ldr	r0, [pc, #144]	; (8002d88 <MX_GPIO_Init+0x190>)
 8002cf8:	f001 ffc2 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002cfc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	f107 0318 	add.w	r3, r7, #24
 8002d12:	4619      	mov	r1, r3
 8002d14:	481d      	ldr	r0, [pc, #116]	; (8002d8c <MX_GPIO_Init+0x194>)
 8002d16:	f001 ffb3 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d26:	2303      	movs	r3, #3
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 0318 	add.w	r3, r7, #24
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4815      	ldr	r0, [pc, #84]	; (8002d88 <MX_GPIO_Init+0x190>)
 8002d32:	f001 ffa5 	bl	8004c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2006      	movs	r0, #6
 8002d3c:	f001 f8db 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d40:	2006      	movs	r0, #6
 8002d42:	f001 f8f4 	bl	8003f2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2007      	movs	r0, #7
 8002d4c:	f001 f8d3 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002d50:	2007      	movs	r0, #7
 8002d52:	f001 f8ec 	bl	8003f2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2008      	movs	r0, #8
 8002d5c:	f001 f8cb 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002d60:	2008      	movs	r0, #8
 8002d62:	f001 f8e4 	bl	8003f2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2009      	movs	r0, #9
 8002d6c:	f001 f8c3 	bl	8003ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002d70:	2009      	movs	r0, #9
 8002d72:	f001 f8dc 	bl	8003f2e <HAL_NVIC_EnableIRQ>

}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	; 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40011800 	.word	0x40011800
 8002d88:	40011000 	.word	0x40011000
 8002d8c:	40010c00 	.word	0x40010c00
 8002d90:	10310000 	.word	0x10310000

08002d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
}
 8002d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002d9c:	e7fe      	b.n	8002d9c <Error_Handler+0x8>
	...

08002da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_MspInit+0x40>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_MspInit+0x40>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6193      	str	r3, [r2, #24]
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_MspInit+0x40>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_MspInit+0x40>)
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_MspInit+0x40>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_MspInit+0x40>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a28      	ldr	r2, [pc, #160]	; (8002ea0 <HAL_ADC_MspInit+0xbc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d149      	bne.n	8002e98 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_ADC_MspInit+0xc0>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <HAL_ADC_MspInit+0xc0>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_ADC_MspInit+0xc0>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_ADC_MspInit+0xc0>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a20      	ldr	r2, [pc, #128]	; (8002ea4 <HAL_ADC_MspInit+0xc0>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_ADC_MspInit+0xc0>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002e34:	230f      	movs	r3, #15
 8002e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f107 0310 	add.w	r3, r7, #16
 8002e40:	4619      	mov	r1, r3
 8002e42:	4819      	ldr	r0, [pc, #100]	; (8002ea8 <HAL_ADC_MspInit+0xc4>)
 8002e44:	f001 ff1c 	bl	8004c80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e4a:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <HAL_ADC_MspInit+0xcc>)
 8002e4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e5a:	4b14      	ldr	r3, [pc, #80]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e72:	2220      	movs	r2, #32
 8002e74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e7c:	480b      	ldr	r0, [pc, #44]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e7e:	f001 fa7b 	bl	8004378 <HAL_DMA_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002e88:	f7ff ff84 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e90:	621a      	str	r2, [r3, #32]
 8002e92:	4a06      	ldr	r2, [pc, #24]	; (8002eac <HAL_ADC_MspInit+0xc8>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e98:	bf00      	nop
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40012400 	.word	0x40012400
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010800 	.word	0x40010800
 8002eac:	20000b60 	.word	0x20000b60
 8002eb0:	40020008 	.word	0x40020008

08002eb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <HAL_DAC_MspInit+0x110>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d172      	bne.n	8002fba <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	; (8002fc8 <HAL_DAC_MspInit+0x114>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4a3b      	ldr	r2, [pc, #236]	; (8002fc8 <HAL_DAC_MspInit+0x114>)
 8002eda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ede:	61d3      	str	r3, [r2, #28]
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_DAC_MspInit+0x114>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_DAC_MspInit+0x114>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a35      	ldr	r2, [pc, #212]	; (8002fc8 <HAL_DAC_MspInit+0x114>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_DAC_MspInit+0x114>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f04:	2330      	movs	r3, #48	; 0x30
 8002f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	4619      	mov	r1, r3
 8002f12:	482e      	ldr	r0, [pc, #184]	; (8002fcc <HAL_DAC_MspInit+0x118>)
 8002f14:	f001 feb4 	bl	8004c80 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f1a:	4a2e      	ldr	r2, [pc, #184]	; (8002fd4 <HAL_DAC_MspInit+0x120>)
 8002f1c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f1e:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f20:	2210      	movs	r2, #16
 8002f22:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f30:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f36:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f3e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002f40:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f42:	2220      	movs	r2, #32
 8002f44:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f46:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f48:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002f4c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002f4e:	4820      	ldr	r0, [pc, #128]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f50:	f001 fa12 	bl	8004378 <HAL_DMA_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8002f5a:	f7ff ff1b 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1b      	ldr	r2, [pc, #108]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <HAL_DAC_MspInit+0x11c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f6c:	4a1b      	ldr	r2, [pc, #108]	; (8002fdc <HAL_DAC_MspInit+0x128>)
 8002f6e:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f72:	2210      	movs	r2, #16
 8002f74:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f88:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f90:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f94:	2220      	movs	r2, #32
 8002f96:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002f9e:	480e      	ldr	r0, [pc, #56]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002fa0:	f001 f9ea 	bl	8004378 <HAL_DMA_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 8002faa:	f7ff fef3 	bl	8002d94 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <HAL_DAC_MspInit+0x124>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002fba:	bf00      	nop
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40007400 	.word	0x40007400
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40010800 	.word	0x40010800
 8002fd0:	20000bb8 	.word	0x20000bb8
 8002fd4:	40020430 	.word	0x40020430
 8002fd8:	20000bfc 	.word	0x20000bfc
 8002fdc:	40020444 	.word	0x40020444

08002fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a15      	ldr	r2, [pc, #84]	; (8003050 <HAL_I2C_MspInit+0x70>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d123      	bne.n	8003048 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_I2C_MspInit+0x74>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_I2C_MspInit+0x74>)
 8003006:	f043 0308 	orr.w	r3, r3, #8
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_I2C_MspInit+0x74>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003018:	23c0      	movs	r3, #192	; 0xc0
 800301a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800301c:	2312      	movs	r3, #18
 800301e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	4619      	mov	r1, r3
 800302a:	480b      	ldr	r0, [pc, #44]	; (8003058 <HAL_I2C_MspInit+0x78>)
 800302c:	f001 fe28 	bl	8004c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_I2C_MspInit+0x74>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4a07      	ldr	r2, [pc, #28]	; (8003054 <HAL_I2C_MspInit+0x74>)
 8003036:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800303a:	61d3      	str	r3, [r2, #28]
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_I2C_MspInit+0x74>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003048:	bf00      	nop
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40005400 	.word	0x40005400
 8003054:	40021000 	.word	0x40021000
 8003058:	40010c00 	.word	0x40010c00

0800305c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0318 	add.w	r3, r7, #24
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_SD_MspInit+0xa4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d13c      	bne.n	80030f6 <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_SD_MspInit+0xa8>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4a20      	ldr	r2, [pc, #128]	; (8003104 <HAL_SD_MspInit+0xa8>)
 8003082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003086:	6153      	str	r3, [r2, #20]
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <HAL_SD_MspInit+0xa8>)
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003094:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_SD_MspInit+0xa8>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a1a      	ldr	r2, [pc, #104]	; (8003104 <HAL_SD_MspInit+0xa8>)
 800309a:	f043 0310 	orr.w	r3, r3, #16
 800309e:	6193      	str	r3, [r2, #24]
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_SD_MspInit+0xa8>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_SD_MspInit+0xa8>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_SD_MspInit+0xa8>)
 80030b2:	f043 0320 	orr.w	r3, r3, #32
 80030b6:	6193      	str	r3, [r2, #24]
 80030b8:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_SD_MspInit+0xa8>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80030c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80030c8:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ce:	2303      	movs	r3, #3
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d2:	f107 0318 	add.w	r3, r7, #24
 80030d6:	4619      	mov	r1, r3
 80030d8:	480b      	ldr	r0, [pc, #44]	; (8003108 <HAL_SD_MspInit+0xac>)
 80030da:	f001 fdd1 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030de:	2304      	movs	r3, #4
 80030e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e6:	2303      	movs	r3, #3
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ea:	f107 0318 	add.w	r3, r7, #24
 80030ee:	4619      	mov	r1, r3
 80030f0:	4806      	ldr	r0, [pc, #24]	; (800310c <HAL_SD_MspInit+0xb0>)
 80030f2:	f001 fdc5 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80030f6:	bf00      	nop
 80030f8:	3728      	adds	r7, #40	; 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40018000 	.word	0x40018000
 8003104:	40021000 	.word	0x40021000
 8003108:	40011000 	.word	0x40011000
 800310c:	40011400 	.word	0x40011400

08003110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0310 	add.w	r3, r7, #16
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_SPI_MspInit+0x8c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d131      	bne.n	8003194 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_SPI_MspInit+0x90>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <HAL_SPI_MspInit+0x90>)
 8003136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313a:	61d3      	str	r3, [r2, #28]
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <HAL_SPI_MspInit+0x90>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_SPI_MspInit+0x90>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <HAL_SPI_MspInit+0x90>)
 800314e:	f043 0308 	orr.w	r3, r3, #8
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_SPI_MspInit+0x90>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003160:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003166:	2302      	movs	r3, #2
 8003168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800316a:	2303      	movs	r3, #3
 800316c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	4619      	mov	r1, r3
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <HAL_SPI_MspInit+0x94>)
 8003176:	f001 fd83 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800317a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800317e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	4619      	mov	r1, r3
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <HAL_SPI_MspInit+0x94>)
 8003190:	f001 fd76 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40003800 	.word	0x40003800
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40010c00 	.word	0x40010c00

080031a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b8:	d10c      	bne.n	80031d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	61d3      	str	r3, [r2, #28]
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031d2:	e032      	b.n	800323a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <HAL_TIM_Base_MspInit+0xa0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d114      	bne.n	8003208 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 80031e4:	f043 0302 	orr.w	r3, r3, #2
 80031e8:	61d3      	str	r3, [r2, #28]
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	201d      	movs	r0, #29
 80031fc:	f000 fe7b 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003200:	201d      	movs	r0, #29
 8003202:	f000 fe94 	bl	8003f2e <HAL_NVIC_EnableIRQ>
}
 8003206:	e018      	b.n	800323a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0f      	ldr	r2, [pc, #60]	; (800324c <HAL_TIM_Base_MspInit+0xa4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d113      	bne.n	800323a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	61d3      	str	r3, [r2, #28]
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_TIM_Base_MspInit+0x9c>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	201e      	movs	r0, #30
 8003230:	f000 fe61 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003234:	201e      	movs	r0, #30
 8003236:	f000 fe7a 	bl	8003f2e <HAL_NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800

08003250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a20      	ldr	r2, [pc, #128]	; (80032ec <HAL_UART_MspInit+0x9c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d139      	bne.n	80032e4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003270:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <HAL_UART_MspInit+0xa0>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_UART_MspInit+0xa0>)
 8003276:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800327a:	6193      	str	r3, [r2, #24]
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_UART_MspInit+0xa0>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_UART_MspInit+0xa0>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <HAL_UART_MspInit+0xa0>)
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	6193      	str	r3, [r2, #24]
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_UART_MspInit+0xa0>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a6:	2302      	movs	r3, #2
 80032a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032aa:	2303      	movs	r3, #3
 80032ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	f107 0310 	add.w	r3, r7, #16
 80032b2:	4619      	mov	r1, r3
 80032b4:	480f      	ldr	r0, [pc, #60]	; (80032f4 <HAL_UART_MspInit+0xa4>)
 80032b6:	f001 fce3 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f107 0310 	add.w	r3, r7, #16
 80032cc:	4619      	mov	r1, r3
 80032ce:	4809      	ldr	r0, [pc, #36]	; (80032f4 <HAL_UART_MspInit+0xa4>)
 80032d0:	f001 fcd6 	bl	8004c80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	2025      	movs	r0, #37	; 0x25
 80032da:	f000 fe0c 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032de:	2025      	movs	r0, #37	; 0x25
 80032e0:	f000 fe25 	bl	8003f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40010800 	.word	0x40010800

080032f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032fc:	e7fe      	b.n	80032fc <NMI_Handler+0x4>

080032fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032fe:	b480      	push	{r7}
 8003300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003302:	e7fe      	b.n	8003302 <HardFault_Handler+0x4>

08003304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003308:	e7fe      	b.n	8003308 <MemManage_Handler+0x4>

0800330a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800330e:	e7fe      	b.n	800330e <BusFault_Handler+0x4>

08003310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003314:	e7fe      	b.n	8003314 <UsageFault_Handler+0x4>

08003316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr

08003322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333e:	f000 f997 	bl	8003670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}

08003346 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800334a:	2001      	movs	r0, #1
 800334c:	f001 fe5c 	bl	8005008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003358:	2002      	movs	r0, #2
 800335a:	f001 fe55 	bl	8005008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}

08003362 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003366:	2004      	movs	r0, #4
 8003368:	f001 fe4e 	bl	8005008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	bd80      	pop	{r7, pc}

08003370 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003374:	2008      	movs	r0, #8
 8003376:	f001 fe47 	bl	8005008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <DMA1_Channel1_IRQHandler+0x10>)
 8003386:	f001 fa11 	bl	80047ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000b60 	.word	0x20000b60

08003394 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003398:	4802      	ldr	r0, [pc, #8]	; (80033a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800339a:	f003 f8d3 	bl	8006544 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200013bc 	.word	0x200013bc

080033a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <TIM3_IRQHandler+0x10>)
 80033ae:	f006 ffbf 	bl	800a330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000db8 	.word	0x20000db8

080033bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <TIM4_IRQHandler+0x10>)
 80033c2:	f006 ffb5 	bl	800a330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000e00 	.word	0x20000e00

080033d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <USART1_IRQHandler+0x10>)
 80033d6:	f007 fc77 	bl	800acc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000e48 	.word	0x20000e48

080033e4 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <DMA2_Channel3_IRQHandler+0x10>)
 80033ea:	f001 f9df 	bl	80047ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000bb8 	.word	0x20000bb8

080033f8 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <DMA2_Channel4_5_IRQHandler+0x10>)
 80033fe:	f001 f9d5 	bl	80047ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000bfc 	.word	0x20000bfc

0800340c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
	return 1;
 8003410:	2301      	movs	r3, #1
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr

0800341a <_kill>:

int _kill(int pid, int sig)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003424:	f00f fdfa 	bl	801301c <__errno>
 8003428:	4603      	mov	r3, r0
 800342a:	2216      	movs	r2, #22
 800342c:	601a      	str	r2, [r3, #0]
	return -1;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_exit>:

void _exit (int status)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003442:	f04f 31ff 	mov.w	r1, #4294967295
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ffe7 	bl	800341a <_kill>
	while (1) {}		/* Make sure we hang here */
 800344c:	e7fe      	b.n	800344c <_exit+0x12>

0800344e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e00a      	b.n	8003476 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003460:	f3af 8000 	nop.w
 8003464:	4601      	mov	r1, r0
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	60ba      	str	r2, [r7, #8]
 800346c:	b2ca      	uxtb	r2, r1
 800346e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	3301      	adds	r3, #1
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	429a      	cmp	r2, r3
 800347c:	dbf0      	blt.n	8003460 <_read+0x12>
	}

return len;
 800347e:	687b      	ldr	r3, [r7, #4]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e009      	b.n	80034ae <_write+0x26>
	{
		__io_putchar(*ptr++);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	60ba      	str	r2, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3301      	adds	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	dbf1      	blt.n	800349a <_write+0x12>
	}
	return len;
 80034b6:	687b      	ldr	r3, [r7, #4]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_close>:

int _close(int file)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	return -1;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr

080034d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034e6:	605a      	str	r2, [r3, #4]
	return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <_isatty>:

int _isatty(int file)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
	return 1;
 80034fc:	2301      	movs	r3, #1
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
	return 0;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003528:	4a14      	ldr	r2, [pc, #80]	; (800357c <_sbrk+0x5c>)
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <_sbrk+0x60>)
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <_sbrk+0x64>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d102      	bne.n	8003542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <_sbrk+0x64>)
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <_sbrk+0x68>)
 8003540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <_sbrk+0x64>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4413      	add	r3, r2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	429a      	cmp	r2, r3
 800354e:	d207      	bcs.n	8003560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003550:	f00f fd64 	bl	801301c <__errno>
 8003554:	4603      	mov	r3, r0
 8003556:	220c      	movs	r2, #12
 8003558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	e009      	b.n	8003574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <_sbrk+0x64>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003566:	4b07      	ldr	r3, [pc, #28]	; (8003584 <_sbrk+0x64>)
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	4a05      	ldr	r2, [pc, #20]	; (8003584 <_sbrk+0x64>)
 8003570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003572:	68fb      	ldr	r3, [r7, #12]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20010000 	.word	0x20010000
 8003580:	00000400 	.word	0x00000400
 8003584:	20000eb8 	.word	0x20000eb8
 8003588:	200016d0 	.word	0x200016d0

0800358c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003598:	f7ff fff8 	bl	800358c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800359c:	480b      	ldr	r0, [pc, #44]	; (80035cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800359e:	490c      	ldr	r1, [pc, #48]	; (80035d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035a4:	e002      	b.n	80035ac <LoopCopyDataInit>

080035a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035aa:	3304      	adds	r3, #4

080035ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b0:	d3f9      	bcc.n	80035a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035b2:	4a09      	ldr	r2, [pc, #36]	; (80035d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035b4:	4c09      	ldr	r4, [pc, #36]	; (80035dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035b8:	e001      	b.n	80035be <LoopFillZerobss>

080035ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035bc:	3204      	adds	r2, #4

080035be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c0:	d3fb      	bcc.n	80035ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035c2:	f00f fd31 	bl	8013028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035c6:	f7fe fee3 	bl	8002390 <main>
  bx lr
 80035ca:	4770      	bx	lr
  ldr r0, =_sdata
 80035cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035d0:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 80035d4:	0802f90c 	.word	0x0802f90c
  ldr r2, =_sbss
 80035d8:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 80035dc:	200016d0 	.word	0x200016d0

080035e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035e0:	e7fe      	b.n	80035e0 <ADC1_2_IRQHandler>
	...

080035e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <HAL_Init+0x28>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a07      	ldr	r2, [pc, #28]	; (800360c <HAL_Init+0x28>)
 80035ee:	f043 0310 	orr.w	r3, r3, #16
 80035f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f4:	2003      	movs	r0, #3
 80035f6:	f000 fc73 	bl	8003ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f000 f808 	bl	8003610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003600:	f7ff fbce 	bl	8002da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40022000 	.word	0x40022000

08003610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003618:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_InitTick+0x54>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_InitTick+0x58>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	4619      	mov	r1, r3
 8003622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003626:	fbb3 f3f1 	udiv	r3, r3, r1
 800362a:	fbb2 f3f3 	udiv	r3, r2, r3
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fc8b 	bl	8003f4a <HAL_SYSTICK_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e00e      	b.n	800365c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b0f      	cmp	r3, #15
 8003642:	d80a      	bhi.n	800365a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003644:	2200      	movs	r2, #0
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	f000 fc53 	bl	8003ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003650:	4a06      	ldr	r2, [pc, #24]	; (800366c <HAL_InitTick+0x5c>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000010 	.word	0x20000010
 8003668:	20000018 	.word	0x20000018
 800366c:	20000014 	.word	0x20000014

08003670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <HAL_IncTick+0x1c>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_IncTick+0x20>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4413      	add	r3, r2
 8003680:	4a03      	ldr	r2, [pc, #12]	; (8003690 <HAL_IncTick+0x20>)
 8003682:	6013      	str	r3, [r2, #0]
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	20000018 	.word	0x20000018
 8003690:	20000ebc 	.word	0x20000ebc

08003694 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return uwTick;
 8003698:	4b02      	ldr	r3, [pc, #8]	; (80036a4 <HAL_GetTick+0x10>)
 800369a:	681b      	ldr	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000ebc 	.word	0x20000ebc

080036a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036b0:	f7ff fff0 	bl	8003694 <HAL_GetTick>
 80036b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d005      	beq.n	80036ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_Delay+0x44>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ce:	bf00      	nop
 80036d0:	f7ff ffe0 	bl	8003694 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d8f7      	bhi.n	80036d0 <HAL_Delay+0x28>
  {
  }
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000018 	.word	0x20000018

080036f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e0ce      	b.n	80038b0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff fb58 	bl	8002de4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa17 	bl	8003b68 <ADC_ConversionStop_Disable>
 800373a:	4603      	mov	r3, r0
 800373c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 80a9 	bne.w	800389e <HAL_ADC_Init+0x1ae>
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 80a5 	bne.w	800389e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800375c:	f023 0302 	bic.w	r3, r3, #2
 8003760:	f043 0202 	orr.w	r2, r3, #2
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4951      	ldr	r1, [pc, #324]	; (80038b8 <HAL_ADC_Init+0x1c8>)
 8003772:	428b      	cmp	r3, r1
 8003774:	d10a      	bne.n	800378c <HAL_ADC_Init+0x9c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800377e:	d002      	beq.n	8003786 <HAL_ADC_Init+0x96>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	e004      	b.n	8003790 <HAL_ADC_Init+0xa0>
 8003786:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800378a:	e001      	b.n	8003790 <HAL_ADC_Init+0xa0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003790:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7b1b      	ldrb	r3, [r3, #12]
 8003796:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003798:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	4313      	orrs	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a8:	d003      	beq.n	80037b2 <HAL_ADC_Init+0xc2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d102      	bne.n	80037b8 <HAL_ADC_Init+0xc8>
 80037b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b6:	e000      	b.n	80037ba <HAL_ADC_Init+0xca>
 80037b8:	2300      	movs	r3, #0
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7d1b      	ldrb	r3, [r3, #20]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d119      	bne.n	80037fc <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	7b1b      	ldrb	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	035a      	lsls	r2, r3, #13
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037e0:	613b      	str	r3, [r7, #16]
 80037e2:	e00b      	b.n	80037fc <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_ADC_Init+0x1cc>)
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	430b      	orrs	r3, r1
 8003822:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d003      	beq.n	8003836 <HAL_ADC_Init+0x146>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d104      	bne.n	8003840 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	3b01      	subs	r3, #1
 800383c:	051b      	lsls	r3, r3, #20
 800383e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	430a      	orrs	r2, r1
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <HAL_ADC_Init+0x1d0>)
 800385c:	4013      	ands	r3, r2
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d10b      	bne.n	800387c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800387a:	e018      	b.n	80038ae <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f023 0312 	bic.w	r3, r3, #18
 8003884:	f043 0210 	orr.w	r2, r3, #16
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800389c:	e007      	b.n	80038ae <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40013c00 	.word	0x40013c00
 80038bc:	ffe1f7fd 	.word	0xffe1f7fd
 80038c0:	ff1f0efe 	.word	0xff1f0efe

080038c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x20>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e0dc      	b.n	8003a9e <HAL_ADC_ConfigChannel+0x1da>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d81c      	bhi.n	800392e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	3b05      	subs	r3, #5
 8003906:	221f      	movs	r2, #31
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	4019      	ands	r1, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	3b05      	subs	r3, #5
 8003920:	fa00 f203 	lsl.w	r2, r0, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	635a      	str	r2, [r3, #52]	; 0x34
 800392c:	e03c      	b.n	80039a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d81c      	bhi.n	8003970 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	3b23      	subs	r3, #35	; 0x23
 8003948:	221f      	movs	r2, #31
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	4019      	ands	r1, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	3b23      	subs	r3, #35	; 0x23
 8003962:	fa00 f203 	lsl.w	r2, r0, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
 800396e:	e01b      	b.n	80039a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	3b41      	subs	r3, #65	; 0x41
 8003982:	221f      	movs	r2, #31
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	4019      	ands	r1, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b41      	subs	r3, #65	; 0x41
 800399c:	fa00 f203 	lsl.w	r2, r0, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	d91c      	bls.n	80039ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	3b1e      	subs	r3, #30
 80039c2:	2207      	movs	r2, #7
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	4019      	ands	r1, r3
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6898      	ldr	r0, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	3b1e      	subs	r3, #30
 80039dc:	fa00 f203 	lsl.w	r2, r0, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e019      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6919      	ldr	r1, [r3, #16]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	2207      	movs	r2, #7
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	4019      	ands	r1, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6898      	ldr	r0, [r3, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	fa00 f203 	lsl.w	r2, r0, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d003      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a2a:	2b11      	cmp	r3, #17
 8003a2c:	d132      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1d      	ldr	r2, [pc, #116]	; (8003aa8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d125      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d126      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d11a      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_ADC_ConfigChannel+0x1e8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9a      	lsrs	r2, r3, #18
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x1b2>
 8003a82:	e007      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	40012400 	.word	0x40012400
 8003aac:	20000010 	.word	0x20000010
 8003ab0:	431bde83 	.word	0x431bde83

08003ab4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d040      	beq.n	8003b54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ae2:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <ADC_Enable+0xac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <ADC_Enable+0xb0>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	0c9b      	lsrs	r3, r3, #18
 8003aee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003af0:	e002      	b.n	8003af8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f9      	bne.n	8003af2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003afe:	f7ff fdc9 	bl	8003694 <HAL_GetTick>
 8003b02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b04:	e01f      	b.n	8003b46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b06:	f7ff fdc5 	bl	8003694 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d918      	bls.n	8003b46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d011      	beq.n	8003b46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	f043 0201 	orr.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d1d8      	bne.n	8003b06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000010 	.word	0x20000010
 8003b64:	431bde83 	.word	0x431bde83

08003b68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d12e      	bne.n	8003be0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b92:	f7ff fd7f 	bl	8003694 <HAL_GetTick>
 8003b96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003b98:	e01b      	b.n	8003bd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b9a:	f7ff fd7b 	bl	8003694 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d914      	bls.n	8003bd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d10d      	bne.n	8003bd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	f043 0210 	orr.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e007      	b.n	8003be2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d0dc      	beq.n	8003b9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_ADCEx_Calibration_Start+0x1e>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e097      	b.n	8003d3a <HAL_ADCEx_Calibration_Start+0x14e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ffa8 	bl	8003b68 <ADC_ConversionStop_Disable>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ff49 	bl	8003ab4 <ADC_Enable>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 8081 	bne.w	8003d30 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c36:	f023 0302 	bic.w	r3, r3, #2
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003c42:	4b40      	ldr	r3, [pc, #256]	; (8003d44 <HAL_ADCEx_Calibration_Start+0x158>)
 8003c44:	681c      	ldr	r4, [r3, #0]
 8003c46:	2002      	movs	r0, #2
 8003c48:	f004 fd74 	bl	8008734 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003c52:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003c54:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003c56:	e002      	b.n	8003c5e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f9      	bne.n	8003c58 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0208 	orr.w	r2, r2, #8
 8003c72:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003c74:	f7ff fd0e 	bl	8003694 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c7a:	e01b      	b.n	8003cb4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c7c:	f7ff fd0a 	bl	8003694 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b0a      	cmp	r3, #10
 8003c88:	d914      	bls.n	8003cb4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9c:	f023 0312 	bic.w	r3, r3, #18
 8003ca0:	f043 0210 	orr.w	r2, r3, #16
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e042      	b.n	8003d3a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1dc      	bne.n	8003c7c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0204 	orr.w	r2, r2, #4
 8003cd0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003cd2:	f7ff fcdf 	bl	8003694 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003cd8:	e01b      	b.n	8003d12 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003cda:	f7ff fcdb 	bl	8003694 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b0a      	cmp	r3, #10
 8003ce6:	d914      	bls.n	8003d12 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	f023 0312 	bic.w	r3, r3, #18
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e013      	b.n	8003d3a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1dc      	bne.n	8003cda <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	f023 0303 	bic.w	r3, r3, #3
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd90      	pop	{r4, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000010 	.word	0x20000010

08003d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	60d3      	str	r3, [r2, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <__NVIC_GetPriorityGrouping+0x18>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 0307 	and.w	r3, r3, #7
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db0b      	blt.n	8003dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	4906      	ldr	r1, [pc, #24]	; (8003de0 <__NVIC_EnableIRQ+0x34>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2001      	movs	r0, #1
 8003dce:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100

08003de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	db0a      	blt.n	8003e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	490c      	ldr	r1, [pc, #48]	; (8003e30 <__NVIC_SetPriority+0x4c>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	440b      	add	r3, r1
 8003e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e0c:	e00a      	b.n	8003e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4908      	ldr	r1, [pc, #32]	; (8003e34 <__NVIC_SetPriority+0x50>)
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	440b      	add	r3, r1
 8003e22:	761a      	strb	r2, [r3, #24]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e100 	.word	0xe000e100
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f1c3 0307 	rsb	r3, r3, #7
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	bf28      	it	cs
 8003e56:	2304      	movcs	r3, #4
 8003e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d902      	bls.n	8003e68 <NVIC_EncodePriority+0x30>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3b03      	subs	r3, #3
 8003e66:	e000      	b.n	8003e6a <NVIC_EncodePriority+0x32>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	4313      	orrs	r3, r2
         );
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eac:	d301      	bcc.n	8003eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00f      	b.n	8003ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <SysTick_Config+0x40>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eba:	210f      	movs	r1, #15
 8003ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec0:	f7ff ff90 	bl	8003de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <SysTick_Config+0x40>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eca:	4b04      	ldr	r3, [pc, #16]	; (8003edc <SysTick_Config+0x40>)
 8003ecc:	2207      	movs	r2, #7
 8003ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	e000e010 	.word	0xe000e010

08003ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ff2d 	bl	8003d48 <__NVIC_SetPriorityGrouping>
}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f08:	f7ff ff42 	bl	8003d90 <__NVIC_GetPriorityGrouping>
 8003f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	6978      	ldr	r0, [r7, #20]
 8003f14:	f7ff ff90 	bl	8003e38 <NVIC_EncodePriority>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff ff5f 	bl	8003de4 <__NVIC_SetPriority>
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4603      	mov	r3, r0
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff35 	bl	8003dac <__NVIC_EnableIRQ>
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff ffa2 	bl	8003e9c <SysTick_Config>
 8003f58:	4603      	mov	r3, r0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e014      	b.n	8003f9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	791b      	ldrb	r3, [r3, #4]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fe ff95 	bl	8002eb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e092      	b.n	80040e6 <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	795b      	ldrb	r3, [r3, #5]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_DAC_Start_DMA+0x24>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e08c      	b.n	80040e6 <HAL_DAC_Start_DMA+0x13e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d129      	bne.n	8004032 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	4a43      	ldr	r2, [pc, #268]	; (80040f0 <HAL_DAC_Start_DMA+0x148>)
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	4a42      	ldr	r2, [pc, #264]	; (80040f4 <HAL_DAC_Start_DMA+0x14c>)
 8003fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a41      	ldr	r2, [pc, #260]	; (80040f8 <HAL_DAC_Start_DMA+0x150>)
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004004:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_DAC_Start_DMA+0x6c>
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	2b04      	cmp	r3, #4
 8004010:	d005      	beq.n	800401e <HAL_DAC_Start_DMA+0x76>
 8004012:	e009      	b.n	8004028 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3308      	adds	r3, #8
 800401a:	613b      	str	r3, [r7, #16]
        break;
 800401c:	e033      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	613b      	str	r3, [r7, #16]
        break;
 8004026:	e02e      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3310      	adds	r3, #16
 800402e:	613b      	str	r3, [r7, #16]
        break;
 8004030:	e029      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	4a31      	ldr	r2, [pc, #196]	; (80040fc <HAL_DAC_Start_DMA+0x154>)
 8004038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4a30      	ldr	r2, [pc, #192]	; (8004100 <HAL_DAC_Start_DMA+0x158>)
 8004040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <HAL_DAC_Start_DMA+0x15c>)
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004058:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_DAC_Start_DMA+0xc0>
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d005      	beq.n	8004072 <HAL_DAC_Start_DMA+0xca>
 8004066:	e009      	b.n	800407c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	613b      	str	r3, [r7, #16]
        break;
 8004070:	e009      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3318      	adds	r3, #24
 8004078:	613b      	str	r3, [r7, #16]
        break;
 800407a:	e004      	b.n	8004086 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	331c      	adds	r3, #28
 8004082:	613b      	str	r3, [r7, #16]
        break;
 8004084:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6898      	ldr	r0, [r3, #8]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	f000 f9e5 	bl	8004464 <HAL_DMA_Start_IT>
 800409a:	4603      	mov	r3, r0
 800409c:	75fb      	strb	r3, [r7, #23]
 800409e:	e008      	b.n	80040b2 <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	68d8      	ldr	r0, [r3, #12]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	f000 f9db 	bl	8004464 <HAL_DMA_Start_IT>
 80040ae:	4603      	mov	r3, r0
 80040b0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2201      	movs	r2, #1
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e005      	b.n	80040e4 <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f043 0204 	orr.w	r2, r3, #4
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	08004269 	.word	0x08004269
 80040f4:	0800428b 	.word	0x0800428b
 80040f8:	080042a7 	.word	0x080042a7
 80040fc:	0800430b 	.word	0x0800430b
 8004100:	0800432d 	.word	0x0800432d
 8004104:	08004349 	.word	0x08004349

08004108 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e02e      	b.n	800417a <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	43da      	mvns	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	400a      	ands	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2201      	movs	r2, #1
 8004148:	fa02 f303 	lsl.w	r3, r2, r3
 800414c:	43da      	mvns	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	400a      	ands	r2, r1
 8004154:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f9df 	bl	8004524 <HAL_DMA_Abort>
 8004166:	e004      	b.n	8004172 <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 f9d9 	bl	8004524 <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_DAC_ConfigChannel+0x1c>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e042      	b.n	800425e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	795b      	ldrb	r3, [r3, #5]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_DAC_ConfigChannel+0x2c>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e03c      	b.n	800425e <HAL_DAC_ConfigChannel+0xa6>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2202      	movs	r2, #2
 80041ee:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6819      	ldr	r1, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f003 0310 	and.w	r3, r3, #16
 8004240:	22c0      	movs	r2, #192	; 0xc0
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43da      	mvns	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	400a      	ands	r2, r1
 800424e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2201      	movs	r2, #1
 8004254:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800425c:	7ffb      	ldrb	r3, [r7, #31]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3724      	adds	r7, #36	; 0x24
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff ff83 	bl	8004182 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	711a      	strb	r2, [r3, #4]
}
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff ff7b 	bl	8004194 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7ff ff70 	bl	80041a6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	711a      	strb	r2, [r3, #4]
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff ffdb 	bl	80042d4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	711a      	strb	r2, [r3, #4]
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff ffd3 	bl	80042e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff ffc8 	bl	80042f8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2201      	movs	r2, #1
 800436c:	711a      	strb	r2, [r3, #4]
}
 800436e:	bf00      	nop
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e059      	b.n	8004442 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_DMA_Init+0xd4>)
 8004396:	429a      	cmp	r2, r3
 8004398:	d80f      	bhi.n	80043ba <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <HAL_DMA_Init+0xd8>)
 80043a2:	4413      	add	r3, r2
 80043a4:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <HAL_DMA_Init+0xdc>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a28      	ldr	r2, [pc, #160]	; (8004458 <HAL_DMA_Init+0xe0>)
 80043b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80043b8:	e00e      	b.n	80043d8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	4b26      	ldr	r3, [pc, #152]	; (800445c <HAL_DMA_Init+0xe4>)
 80043c2:	4413      	add	r3, r2
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_DMA_Init+0xdc>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	009a      	lsls	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_DMA_Init+0xe8>)
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80043f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40020407 	.word	0x40020407
 8004450:	bffdfff8 	.word	0xbffdfff8
 8004454:	cccccccd 	.word	0xcccccccd
 8004458:	40020000 	.word	0x40020000
 800445c:	bffdfbf8 	.word	0xbffdfbf8
 8004460:	40020400 	.word	0x40020400

08004464 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_DMA_Start_IT+0x20>
 8004480:	2302      	movs	r3, #2
 8004482:	e04b      	b.n	800451c <HAL_DMA_Start_IT+0xb8>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	d13a      	bne.n	800450e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 fbb1 	bl	8004c24 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 020e 	orr.w	r2, r2, #14
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e00f      	b.n	80044fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0204 	bic.w	r2, r2, #4
 80044ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 020a 	orr.w	r2, r2, #10
 80044fa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e005      	b.n	800451a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004516:	2302      	movs	r3, #2
 8004518:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d008      	beq.n	800454e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2204      	movs	r2, #4
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e020      	b.n	8004590 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 020e 	bic.w	r2, r2, #14
 800455c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	2101      	movs	r1, #1
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3714      	adds	r7, #20
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
	...

0800459c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d005      	beq.n	80045c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2204      	movs	r2, #4
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e0d6      	b.n	800476e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 020e 	bic.w	r2, r2, #14
 80045ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	4b64      	ldr	r3, [pc, #400]	; (8004778 <HAL_DMA_Abort_IT+0x1dc>)
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d958      	bls.n	800469e <HAL_DMA_Abort_IT+0x102>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a62      	ldr	r2, [pc, #392]	; (800477c <HAL_DMA_Abort_IT+0x1e0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d04f      	beq.n	8004696 <HAL_DMA_Abort_IT+0xfa>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a61      	ldr	r2, [pc, #388]	; (8004780 <HAL_DMA_Abort_IT+0x1e4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d048      	beq.n	8004692 <HAL_DMA_Abort_IT+0xf6>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a5f      	ldr	r2, [pc, #380]	; (8004784 <HAL_DMA_Abort_IT+0x1e8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d040      	beq.n	800468c <HAL_DMA_Abort_IT+0xf0>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5e      	ldr	r2, [pc, #376]	; (8004788 <HAL_DMA_Abort_IT+0x1ec>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d038      	beq.n	8004686 <HAL_DMA_Abort_IT+0xea>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a5c      	ldr	r2, [pc, #368]	; (800478c <HAL_DMA_Abort_IT+0x1f0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d030      	beq.n	8004680 <HAL_DMA_Abort_IT+0xe4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a5b      	ldr	r2, [pc, #364]	; (8004790 <HAL_DMA_Abort_IT+0x1f4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d028      	beq.n	800467a <HAL_DMA_Abort_IT+0xde>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a52      	ldr	r2, [pc, #328]	; (8004778 <HAL_DMA_Abort_IT+0x1dc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d020      	beq.n	8004674 <HAL_DMA_Abort_IT+0xd8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a57      	ldr	r2, [pc, #348]	; (8004794 <HAL_DMA_Abort_IT+0x1f8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d019      	beq.n	8004670 <HAL_DMA_Abort_IT+0xd4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a55      	ldr	r2, [pc, #340]	; (8004798 <HAL_DMA_Abort_IT+0x1fc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d012      	beq.n	800466c <HAL_DMA_Abort_IT+0xd0>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a54      	ldr	r2, [pc, #336]	; (800479c <HAL_DMA_Abort_IT+0x200>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00a      	beq.n	8004666 <HAL_DMA_Abort_IT+0xca>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <HAL_DMA_Abort_IT+0x204>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d102      	bne.n	8004660 <HAL_DMA_Abort_IT+0xc4>
 800465a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465e:	e01b      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004664:	e018      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800466a:	e015      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 800466c:	2310      	movs	r3, #16
 800466e:	e013      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004670:	2301      	movs	r3, #1
 8004672:	e011      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004678:	e00e      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 800467a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800467e:	e00b      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004684:	e008      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800468a:	e005      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 800468c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004690:	e002      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004692:	2310      	movs	r3, #16
 8004694:	e000      	b.n	8004698 <HAL_DMA_Abort_IT+0xfc>
 8004696:	2301      	movs	r3, #1
 8004698:	4a42      	ldr	r2, [pc, #264]	; (80047a4 <HAL_DMA_Abort_IT+0x208>)
 800469a:	6053      	str	r3, [r2, #4]
 800469c:	e057      	b.n	800474e <HAL_DMA_Abort_IT+0x1b2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a36      	ldr	r2, [pc, #216]	; (800477c <HAL_DMA_Abort_IT+0x1e0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d04f      	beq.n	8004748 <HAL_DMA_Abort_IT+0x1ac>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a34      	ldr	r2, [pc, #208]	; (8004780 <HAL_DMA_Abort_IT+0x1e4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d048      	beq.n	8004744 <HAL_DMA_Abort_IT+0x1a8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a33      	ldr	r2, [pc, #204]	; (8004784 <HAL_DMA_Abort_IT+0x1e8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d040      	beq.n	800473e <HAL_DMA_Abort_IT+0x1a2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a31      	ldr	r2, [pc, #196]	; (8004788 <HAL_DMA_Abort_IT+0x1ec>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d038      	beq.n	8004738 <HAL_DMA_Abort_IT+0x19c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a30      	ldr	r2, [pc, #192]	; (800478c <HAL_DMA_Abort_IT+0x1f0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d030      	beq.n	8004732 <HAL_DMA_Abort_IT+0x196>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a2e      	ldr	r2, [pc, #184]	; (8004790 <HAL_DMA_Abort_IT+0x1f4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d028      	beq.n	800472c <HAL_DMA_Abort_IT+0x190>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a26      	ldr	r2, [pc, #152]	; (8004778 <HAL_DMA_Abort_IT+0x1dc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d020      	beq.n	8004726 <HAL_DMA_Abort_IT+0x18a>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <HAL_DMA_Abort_IT+0x1f8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d019      	beq.n	8004722 <HAL_DMA_Abort_IT+0x186>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a29      	ldr	r2, [pc, #164]	; (8004798 <HAL_DMA_Abort_IT+0x1fc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d012      	beq.n	800471e <HAL_DMA_Abort_IT+0x182>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a27      	ldr	r2, [pc, #156]	; (800479c <HAL_DMA_Abort_IT+0x200>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00a      	beq.n	8004718 <HAL_DMA_Abort_IT+0x17c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <HAL_DMA_Abort_IT+0x204>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d102      	bne.n	8004712 <HAL_DMA_Abort_IT+0x176>
 800470c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004710:	e01b      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004716:	e018      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004718:	f44f 7380 	mov.w	r3, #256	; 0x100
 800471c:	e015      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 800471e:	2310      	movs	r3, #16
 8004720:	e013      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004722:	2301      	movs	r3, #1
 8004724:	e011      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800472a:	e00e      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 800472c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004730:	e00b      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004732:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004736:	e008      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800473c:	e005      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 800473e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004742:	e002      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004744:	2310      	movs	r3, #16
 8004746:	e000      	b.n	800474a <HAL_DMA_Abort_IT+0x1ae>
 8004748:	2301      	movs	r3, #1
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <HAL_DMA_Abort_IT+0x20c>)
 800474c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	4798      	blx	r3
    } 
  }
  return status;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40020080 	.word	0x40020080
 800477c:	40020008 	.word	0x40020008
 8004780:	4002001c 	.word	0x4002001c
 8004784:	40020030 	.word	0x40020030
 8004788:	40020044 	.word	0x40020044
 800478c:	40020058 	.word	0x40020058
 8004790:	4002006c 	.word	0x4002006c
 8004794:	40020408 	.word	0x40020408
 8004798:	4002041c 	.word	0x4002041c
 800479c:	40020430 	.word	0x40020430
 80047a0:	40020444 	.word	0x40020444
 80047a4:	40020400 	.word	0x40020400
 80047a8:	40020000 	.word	0x40020000

080047ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2204      	movs	r2, #4
 80047ca:	409a      	lsls	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80f1 	beq.w	80049b8 <HAL_DMA_IRQHandler+0x20c>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80eb 	beq.w	80049b8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_DMA_IRQHandler+0x1d8>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d958      	bls.n	80048be <HAL_DMA_IRQHandler+0x112>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5d      	ldr	r2, [pc, #372]	; (8004988 <HAL_DMA_IRQHandler+0x1dc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d04f      	beq.n	80048b6 <HAL_DMA_IRQHandler+0x10a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5c      	ldr	r2, [pc, #368]	; (800498c <HAL_DMA_IRQHandler+0x1e0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d048      	beq.n	80048b2 <HAL_DMA_IRQHandler+0x106>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_DMA_IRQHandler+0x1e4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d040      	beq.n	80048ac <HAL_DMA_IRQHandler+0x100>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a59      	ldr	r2, [pc, #356]	; (8004994 <HAL_DMA_IRQHandler+0x1e8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d038      	beq.n	80048a6 <HAL_DMA_IRQHandler+0xfa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_DMA_IRQHandler+0x1ec>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d030      	beq.n	80048a0 <HAL_DMA_IRQHandler+0xf4>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a56      	ldr	r2, [pc, #344]	; (800499c <HAL_DMA_IRQHandler+0x1f0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d028      	beq.n	800489a <HAL_DMA_IRQHandler+0xee>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a4d      	ldr	r2, [pc, #308]	; (8004984 <HAL_DMA_IRQHandler+0x1d8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d020      	beq.n	8004894 <HAL_DMA_IRQHandler+0xe8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a52      	ldr	r2, [pc, #328]	; (80049a0 <HAL_DMA_IRQHandler+0x1f4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d019      	beq.n	8004890 <HAL_DMA_IRQHandler+0xe4>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a50      	ldr	r2, [pc, #320]	; (80049a4 <HAL_DMA_IRQHandler+0x1f8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d012      	beq.n	800488c <HAL_DMA_IRQHandler+0xe0>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a4f      	ldr	r2, [pc, #316]	; (80049a8 <HAL_DMA_IRQHandler+0x1fc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00a      	beq.n	8004886 <HAL_DMA_IRQHandler+0xda>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a4d      	ldr	r2, [pc, #308]	; (80049ac <HAL_DMA_IRQHandler+0x200>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d102      	bne.n	8004880 <HAL_DMA_IRQHandler+0xd4>
 800487a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800487e:	e01b      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 8004880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004884:	e018      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 8004886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488a:	e015      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 800488c:	2340      	movs	r3, #64	; 0x40
 800488e:	e013      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 8004890:	2304      	movs	r3, #4
 8004892:	e011      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 8004894:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004898:	e00e      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 800489a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800489e:	e00b      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 80048a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048a4:	e008      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 80048a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048aa:	e005      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 80048ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b0:	e002      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 80048b2:	2340      	movs	r3, #64	; 0x40
 80048b4:	e000      	b.n	80048b8 <HAL_DMA_IRQHandler+0x10c>
 80048b6:	2304      	movs	r3, #4
 80048b8:	4a3d      	ldr	r2, [pc, #244]	; (80049b0 <HAL_DMA_IRQHandler+0x204>)
 80048ba:	6053      	str	r3, [r2, #4]
 80048bc:	e057      	b.n	800496e <HAL_DMA_IRQHandler+0x1c2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a31      	ldr	r2, [pc, #196]	; (8004988 <HAL_DMA_IRQHandler+0x1dc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d04f      	beq.n	8004968 <HAL_DMA_IRQHandler+0x1bc>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2f      	ldr	r2, [pc, #188]	; (800498c <HAL_DMA_IRQHandler+0x1e0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d048      	beq.n	8004964 <HAL_DMA_IRQHandler+0x1b8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2e      	ldr	r2, [pc, #184]	; (8004990 <HAL_DMA_IRQHandler+0x1e4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d040      	beq.n	800495e <HAL_DMA_IRQHandler+0x1b2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <HAL_DMA_IRQHandler+0x1e8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d038      	beq.n	8004958 <HAL_DMA_IRQHandler+0x1ac>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <HAL_DMA_IRQHandler+0x1ec>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d030      	beq.n	8004952 <HAL_DMA_IRQHandler+0x1a6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_DMA_IRQHandler+0x1f0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d028      	beq.n	800494c <HAL_DMA_IRQHandler+0x1a0>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a21      	ldr	r2, [pc, #132]	; (8004984 <HAL_DMA_IRQHandler+0x1d8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d020      	beq.n	8004946 <HAL_DMA_IRQHandler+0x19a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <HAL_DMA_IRQHandler+0x1f4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d019      	beq.n	8004942 <HAL_DMA_IRQHandler+0x196>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a24      	ldr	r2, [pc, #144]	; (80049a4 <HAL_DMA_IRQHandler+0x1f8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d012      	beq.n	800493e <HAL_DMA_IRQHandler+0x192>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <HAL_DMA_IRQHandler+0x1fc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00a      	beq.n	8004938 <HAL_DMA_IRQHandler+0x18c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a21      	ldr	r2, [pc, #132]	; (80049ac <HAL_DMA_IRQHandler+0x200>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d102      	bne.n	8004932 <HAL_DMA_IRQHandler+0x186>
 800492c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004930:	e01b      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004932:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004936:	e018      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800493c:	e015      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 800493e:	2340      	movs	r3, #64	; 0x40
 8004940:	e013      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004942:	2304      	movs	r3, #4
 8004944:	e011      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004946:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800494a:	e00e      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 800494c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004950:	e00b      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004952:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004956:	e008      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800495c:	e005      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 800495e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004962:	e002      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004964:	2340      	movs	r3, #64	; 0x40
 8004966:	e000      	b.n	800496a <HAL_DMA_IRQHandler+0x1be>
 8004968:	2304      	movs	r3, #4
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <HAL_DMA_IRQHandler+0x208>)
 800496c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 8136 	beq.w	8004be4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004980:	e130      	b.n	8004be4 <HAL_DMA_IRQHandler+0x438>
 8004982:	bf00      	nop
 8004984:	40020080 	.word	0x40020080
 8004988:	40020008 	.word	0x40020008
 800498c:	4002001c 	.word	0x4002001c
 8004990:	40020030 	.word	0x40020030
 8004994:	40020044 	.word	0x40020044
 8004998:	40020058 	.word	0x40020058
 800499c:	4002006c 	.word	0x4002006c
 80049a0:	40020408 	.word	0x40020408
 80049a4:	4002041c 	.word	0x4002041c
 80049a8:	40020430 	.word	0x40020430
 80049ac:	40020444 	.word	0x40020444
 80049b0:	40020400 	.word	0x40020400
 80049b4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	2202      	movs	r2, #2
 80049be:	409a      	lsls	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80dd 	beq.w	8004b84 <HAL_DMA_IRQHandler+0x3d8>
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80d7 	beq.w	8004b84 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10b      	bne.n	80049fc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 020a 	bic.w	r2, r2, #10
 80049f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b7b      	ldr	r3, [pc, #492]	; (8004bf0 <HAL_DMA_IRQHandler+0x444>)
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d958      	bls.n	8004aba <HAL_DMA_IRQHandler+0x30e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a79      	ldr	r2, [pc, #484]	; (8004bf4 <HAL_DMA_IRQHandler+0x448>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d04f      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x306>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a78      	ldr	r2, [pc, #480]	; (8004bf8 <HAL_DMA_IRQHandler+0x44c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d048      	beq.n	8004aae <HAL_DMA_IRQHandler+0x302>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a76      	ldr	r2, [pc, #472]	; (8004bfc <HAL_DMA_IRQHandler+0x450>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d040      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0x2fc>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a75      	ldr	r2, [pc, #468]	; (8004c00 <HAL_DMA_IRQHandler+0x454>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d038      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x2f6>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a73      	ldr	r2, [pc, #460]	; (8004c04 <HAL_DMA_IRQHandler+0x458>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d030      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x2f0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a72      	ldr	r2, [pc, #456]	; (8004c08 <HAL_DMA_IRQHandler+0x45c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d028      	beq.n	8004a96 <HAL_DMA_IRQHandler+0x2ea>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a69      	ldr	r2, [pc, #420]	; (8004bf0 <HAL_DMA_IRQHandler+0x444>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d020      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x2e4>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6e      	ldr	r2, [pc, #440]	; (8004c0c <HAL_DMA_IRQHandler+0x460>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d019      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x2e0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a6c      	ldr	r2, [pc, #432]	; (8004c10 <HAL_DMA_IRQHandler+0x464>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d012      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2dc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6b      	ldr	r2, [pc, #428]	; (8004c14 <HAL_DMA_IRQHandler+0x468>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00a      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x2d6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a69      	ldr	r2, [pc, #420]	; (8004c18 <HAL_DMA_IRQHandler+0x46c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d102      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x2d0>
 8004a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a7a:	e01b      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a80:	e018      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a86:	e015      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e013      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e011      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a94:	e00e      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004a96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a9a:	e00b      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004aa0:	e008      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aa6:	e005      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aac:	e002      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004aae:	2320      	movs	r3, #32
 8004ab0:	e000      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x308>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	4a59      	ldr	r2, [pc, #356]	; (8004c1c <HAL_DMA_IRQHandler+0x470>)
 8004ab6:	6053      	str	r3, [r2, #4]
 8004ab8:	e057      	b.n	8004b6a <HAL_DMA_IRQHandler+0x3be>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a4d      	ldr	r2, [pc, #308]	; (8004bf4 <HAL_DMA_IRQHandler+0x448>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d04f      	beq.n	8004b64 <HAL_DMA_IRQHandler+0x3b8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a4b      	ldr	r2, [pc, #300]	; (8004bf8 <HAL_DMA_IRQHandler+0x44c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d048      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x3b4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a4a      	ldr	r2, [pc, #296]	; (8004bfc <HAL_DMA_IRQHandler+0x450>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d040      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x3ae>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a48      	ldr	r2, [pc, #288]	; (8004c00 <HAL_DMA_IRQHandler+0x454>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d038      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x3a8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a47      	ldr	r2, [pc, #284]	; (8004c04 <HAL_DMA_IRQHandler+0x458>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d030      	beq.n	8004b4e <HAL_DMA_IRQHandler+0x3a2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a45      	ldr	r2, [pc, #276]	; (8004c08 <HAL_DMA_IRQHandler+0x45c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d028      	beq.n	8004b48 <HAL_DMA_IRQHandler+0x39c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <HAL_DMA_IRQHandler+0x444>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d020      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x396>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a41      	ldr	r2, [pc, #260]	; (8004c0c <HAL_DMA_IRQHandler+0x460>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d019      	beq.n	8004b3e <HAL_DMA_IRQHandler+0x392>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <HAL_DMA_IRQHandler+0x464>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d012      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x38e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3e      	ldr	r2, [pc, #248]	; (8004c14 <HAL_DMA_IRQHandler+0x468>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00a      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x388>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3d      	ldr	r2, [pc, #244]	; (8004c18 <HAL_DMA_IRQHandler+0x46c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d102      	bne.n	8004b2e <HAL_DMA_IRQHandler+0x382>
 8004b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b2c:	e01b      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b32:	e018      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b38:	e015      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	e013      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e011      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b46:	e00e      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b4c:	e00b      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b52:	e008      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b58:	e005      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5e:	e002      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b60:	2320      	movs	r3, #32
 8004b62:	e000      	b.n	8004b66 <HAL_DMA_IRQHandler+0x3ba>
 8004b64:	2302      	movs	r3, #2
 8004b66:	4a2e      	ldr	r2, [pc, #184]	; (8004c20 <HAL_DMA_IRQHandler+0x474>)
 8004b68:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d034      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b82:	e02f      	b.n	8004be4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	2208      	movs	r2, #8
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d028      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x43a>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d023      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 020e 	bic.w	r2, r2, #14
 8004bac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
    }
  }
  return;
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop
}
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40020080 	.word	0x40020080
 8004bf4:	40020008 	.word	0x40020008
 8004bf8:	4002001c 	.word	0x4002001c
 8004bfc:	40020030 	.word	0x40020030
 8004c00:	40020044 	.word	0x40020044
 8004c04:	40020058 	.word	0x40020058
 8004c08:	4002006c 	.word	0x4002006c
 8004c0c:	40020408 	.word	0x40020408
 8004c10:	4002041c 	.word	0x4002041c
 8004c14:	40020430 	.word	0x40020430
 8004c18:	40020444 	.word	0x40020444
 8004c1c:	40020400 	.word	0x40020400
 8004c20:	40020000 	.word	0x40020000

08004c24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d108      	bne.n	8004c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c62:	e007      	b.n	8004c74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b08b      	sub	sp, #44	; 0x2c
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c92:	e179      	b.n	8004f88 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c94:	2201      	movs	r2, #1
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	f040 8168 	bne.w	8004f82 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4a96      	ldr	r2, [pc, #600]	; (8004f10 <HAL_GPIO_Init+0x290>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d05e      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cbc:	4a94      	ldr	r2, [pc, #592]	; (8004f10 <HAL_GPIO_Init+0x290>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d875      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cc2:	4a94      	ldr	r2, [pc, #592]	; (8004f14 <HAL_GPIO_Init+0x294>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d058      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cc8:	4a92      	ldr	r2, [pc, #584]	; (8004f14 <HAL_GPIO_Init+0x294>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d86f      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cce:	4a92      	ldr	r2, [pc, #584]	; (8004f18 <HAL_GPIO_Init+0x298>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d052      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cd4:	4a90      	ldr	r2, [pc, #576]	; (8004f18 <HAL_GPIO_Init+0x298>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d869      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cda:	4a90      	ldr	r2, [pc, #576]	; (8004f1c <HAL_GPIO_Init+0x29c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d04c      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004ce0:	4a8e      	ldr	r2, [pc, #568]	; (8004f1c <HAL_GPIO_Init+0x29c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d863      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004ce6:	4a8e      	ldr	r2, [pc, #568]	; (8004f20 <HAL_GPIO_Init+0x2a0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d046      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
 8004cec:	4a8c      	ldr	r2, [pc, #560]	; (8004f20 <HAL_GPIO_Init+0x2a0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d85d      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cf2:	2b12      	cmp	r3, #18
 8004cf4:	d82a      	bhi.n	8004d4c <HAL_GPIO_Init+0xcc>
 8004cf6:	2b12      	cmp	r3, #18
 8004cf8:	d859      	bhi.n	8004dae <HAL_GPIO_Init+0x12e>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <HAL_GPIO_Init+0x80>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d7b 	.word	0x08004d7b
 8004d04:	08004d55 	.word	0x08004d55
 8004d08:	08004d67 	.word	0x08004d67
 8004d0c:	08004da9 	.word	0x08004da9
 8004d10:	08004daf 	.word	0x08004daf
 8004d14:	08004daf 	.word	0x08004daf
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004daf 	.word	0x08004daf
 8004d20:	08004daf 	.word	0x08004daf
 8004d24:	08004daf 	.word	0x08004daf
 8004d28:	08004daf 	.word	0x08004daf
 8004d2c:	08004daf 	.word	0x08004daf
 8004d30:	08004daf 	.word	0x08004daf
 8004d34:	08004daf 	.word	0x08004daf
 8004d38:	08004daf 	.word	0x08004daf
 8004d3c:	08004daf 	.word	0x08004daf
 8004d40:	08004daf 	.word	0x08004daf
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	4a75      	ldr	r2, [pc, #468]	; (8004f24 <HAL_GPIO_Init+0x2a4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d52:	e02c      	b.n	8004dae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	623b      	str	r3, [r7, #32]
          break;
 8004d5a:	e029      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	3304      	adds	r3, #4
 8004d62:	623b      	str	r3, [r7, #32]
          break;
 8004d64:	e024      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	623b      	str	r3, [r7, #32]
          break;
 8004d6e:	e01f      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	330c      	adds	r3, #12
 8004d76:	623b      	str	r3, [r7, #32]
          break;
 8004d78:	e01a      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d82:	2304      	movs	r3, #4
 8004d84:	623b      	str	r3, [r7, #32]
          break;
 8004d86:	e013      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d90:	2308      	movs	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	611a      	str	r2, [r3, #16]
          break;
 8004d9a:	e009      	b.n	8004db0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	615a      	str	r2, [r3, #20]
          break;
 8004da6:	e003      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
          break;
 8004dac:	e000      	b.n	8004db0 <HAL_GPIO_Init+0x130>
          break;
 8004dae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2bff      	cmp	r3, #255	; 0xff
 8004db4:	d801      	bhi.n	8004dba <HAL_GPIO_Init+0x13a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	e001      	b.n	8004dbe <HAL_GPIO_Init+0x13e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2bff      	cmp	r3, #255	; 0xff
 8004dc4:	d802      	bhi.n	8004dcc <HAL_GPIO_Init+0x14c>
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	e002      	b.n	8004dd2 <HAL_GPIO_Init+0x152>
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	3b08      	subs	r3, #8
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	210f      	movs	r1, #15
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	401a      	ands	r2, r3
 8004de4:	6a39      	ldr	r1, [r7, #32]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80c1 	beq.w	8004f82 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e00:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <HAL_GPIO_Init+0x2a8>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4a48      	ldr	r2, [pc, #288]	; (8004f28 <HAL_GPIO_Init+0x2a8>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6193      	str	r3, [r2, #24]
 8004e0c:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <HAL_GPIO_Init+0x2a8>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e18:	4a44      	ldr	r2, [pc, #272]	; (8004f2c <HAL_GPIO_Init+0x2ac>)
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a3c      	ldr	r2, [pc, #240]	; (8004f30 <HAL_GPIO_Init+0x2b0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01f      	beq.n	8004e84 <HAL_GPIO_Init+0x204>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3b      	ldr	r2, [pc, #236]	; (8004f34 <HAL_GPIO_Init+0x2b4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d019      	beq.n	8004e80 <HAL_GPIO_Init+0x200>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3a      	ldr	r2, [pc, #232]	; (8004f38 <HAL_GPIO_Init+0x2b8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d013      	beq.n	8004e7c <HAL_GPIO_Init+0x1fc>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a39      	ldr	r2, [pc, #228]	; (8004f3c <HAL_GPIO_Init+0x2bc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00d      	beq.n	8004e78 <HAL_GPIO_Init+0x1f8>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a38      	ldr	r2, [pc, #224]	; (8004f40 <HAL_GPIO_Init+0x2c0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d007      	beq.n	8004e74 <HAL_GPIO_Init+0x1f4>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a37      	ldr	r2, [pc, #220]	; (8004f44 <HAL_GPIO_Init+0x2c4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <HAL_GPIO_Init+0x1f0>
 8004e6c:	2305      	movs	r3, #5
 8004e6e:	e00a      	b.n	8004e86 <HAL_GPIO_Init+0x206>
 8004e70:	2306      	movs	r3, #6
 8004e72:	e008      	b.n	8004e86 <HAL_GPIO_Init+0x206>
 8004e74:	2304      	movs	r3, #4
 8004e76:	e006      	b.n	8004e86 <HAL_GPIO_Init+0x206>
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e004      	b.n	8004e86 <HAL_GPIO_Init+0x206>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e002      	b.n	8004e86 <HAL_GPIO_Init+0x206>
 8004e80:	2301      	movs	r3, #1
 8004e82:	e000      	b.n	8004e86 <HAL_GPIO_Init+0x206>
 8004e84:	2300      	movs	r3, #0
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	f002 0203 	and.w	r2, r2, #3
 8004e8c:	0092      	lsls	r2, r2, #2
 8004e8e:	4093      	lsls	r3, r2
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e96:	4925      	ldr	r1, [pc, #148]	; (8004f2c <HAL_GPIO_Init+0x2ac>)
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d006      	beq.n	8004ebe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004eb0:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	4924      	ldr	r1, [pc, #144]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	608b      	str	r3, [r1, #8]
 8004ebc:	e006      	b.n	8004ecc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	4920      	ldr	r1, [pc, #128]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ed8:	4b1b      	ldr	r3, [pc, #108]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	491a      	ldr	r1, [pc, #104]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60cb      	str	r3, [r1, #12]
 8004ee4:	e006      	b.n	8004ef4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ee6:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	4916      	ldr	r1, [pc, #88]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d025      	beq.n	8004f4c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f00:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	4910      	ldr	r1, [pc, #64]	; (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]
 8004f0c:	e025      	b.n	8004f5a <HAL_GPIO_Init+0x2da>
 8004f0e:	bf00      	nop
 8004f10:	10320000 	.word	0x10320000
 8004f14:	10310000 	.word	0x10310000
 8004f18:	10220000 	.word	0x10220000
 8004f1c:	10210000 	.word	0x10210000
 8004f20:	10120000 	.word	0x10120000
 8004f24:	10110000 	.word	0x10110000
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010800 	.word	0x40010800
 8004f34:	40010c00 	.word	0x40010c00
 8004f38:	40011000 	.word	0x40011000
 8004f3c:	40011400 	.word	0x40011400
 8004f40:	40011800 	.word	0x40011800
 8004f44:	40011c00 	.word	0x40011c00
 8004f48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f4c:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <HAL_GPIO_Init+0x324>)
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	4913      	ldr	r1, [pc, #76]	; (8004fa4 <HAL_GPIO_Init+0x324>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f66:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <HAL_GPIO_Init+0x324>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <HAL_GPIO_Init+0x324>)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]
 8004f72:	e006      	b.n	8004f82 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_GPIO_Init+0x324>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	43db      	mvns	r3, r3
 8004f7c:	4909      	ldr	r1, [pc, #36]	; (8004fa4 <HAL_GPIO_Init+0x324>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	3301      	adds	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f47f ae7e 	bne.w	8004c94 <HAL_GPIO_Init+0x14>
  }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	372c      	adds	r7, #44	; 0x2c
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e001      	b.n	8004fca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	807b      	strh	r3, [r7, #2]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fe6:	787b      	ldrb	r3, [r7, #1]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fec:	887a      	ldrh	r2, [r7, #2]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ff2:	e003      	b.n	8004ffc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	041a      	lsls	r2, r3, #16
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	611a      	str	r2, [r3, #16]
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
	...

08005008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d006      	beq.n	800502c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005020:	88fb      	ldrh	r3, [r7, #6]
 8005022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fd f934 	bl	8002294 <HAL_GPIO_EXTI_Callback>
  }
}
 800502c:	bf00      	nop
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40010400 	.word	0x40010400

08005038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e12b      	b.n	80052a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7fd ffbe 	bl	8002fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2224      	movs	r2, #36	; 0x24
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800508a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800509a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800509c:	f003 fa4e 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 80050a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4a81      	ldr	r2, [pc, #516]	; (80052ac <HAL_I2C_Init+0x274>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d807      	bhi.n	80050bc <HAL_I2C_Init+0x84>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a80      	ldr	r2, [pc, #512]	; (80052b0 <HAL_I2C_Init+0x278>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	bf94      	ite	ls
 80050b4:	2301      	movls	r3, #1
 80050b6:	2300      	movhi	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e006      	b.n	80050ca <HAL_I2C_Init+0x92>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4a7d      	ldr	r2, [pc, #500]	; (80052b4 <HAL_I2C_Init+0x27c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	bf94      	ite	ls
 80050c4:	2301      	movls	r3, #1
 80050c6:	2300      	movhi	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0e7      	b.n	80052a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4a78      	ldr	r2, [pc, #480]	; (80052b8 <HAL_I2C_Init+0x280>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0c9b      	lsrs	r3, r3, #18
 80050dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4a6a      	ldr	r2, [pc, #424]	; (80052ac <HAL_I2C_Init+0x274>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d802      	bhi.n	800510c <HAL_I2C_Init+0xd4>
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	3301      	adds	r3, #1
 800510a:	e009      	b.n	8005120 <HAL_I2C_Init+0xe8>
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005112:	fb02 f303 	mul.w	r3, r2, r3
 8005116:	4a69      	ldr	r2, [pc, #420]	; (80052bc <HAL_I2C_Init+0x284>)
 8005118:	fba2 2303 	umull	r2, r3, r2, r3
 800511c:	099b      	lsrs	r3, r3, #6
 800511e:	3301      	adds	r3, #1
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	430b      	orrs	r3, r1
 8005126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005132:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	495c      	ldr	r1, [pc, #368]	; (80052ac <HAL_I2C_Init+0x274>)
 800513c:	428b      	cmp	r3, r1
 800513e:	d819      	bhi.n	8005174 <HAL_I2C_Init+0x13c>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1e59      	subs	r1, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	fbb1 f3f3 	udiv	r3, r1, r3
 800514e:	1c59      	adds	r1, r3, #1
 8005150:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005154:	400b      	ands	r3, r1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_I2C_Init+0x138>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1e59      	subs	r1, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	fbb1 f3f3 	udiv	r3, r1, r3
 8005168:	3301      	adds	r3, #1
 800516a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516e:	e051      	b.n	8005214 <HAL_I2C_Init+0x1dc>
 8005170:	2304      	movs	r3, #4
 8005172:	e04f      	b.n	8005214 <HAL_I2C_Init+0x1dc>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d111      	bne.n	80051a0 <HAL_I2C_Init+0x168>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1e58      	subs	r0, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	440b      	add	r3, r1
 800518a:	fbb0 f3f3 	udiv	r3, r0, r3
 800518e:	3301      	adds	r3, #1
 8005190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e012      	b.n	80051c6 <HAL_I2C_Init+0x18e>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	1e58      	subs	r0, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6859      	ldr	r1, [r3, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	440b      	add	r3, r1
 80051ae:	0099      	lsls	r1, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80051b6:	3301      	adds	r3, #1
 80051b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_I2C_Init+0x196>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e022      	b.n	8005214 <HAL_I2C_Init+0x1dc>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10e      	bne.n	80051f4 <HAL_I2C_Init+0x1bc>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1e58      	subs	r0, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	440b      	add	r3, r1
 80051e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	e00f      	b.n	8005214 <HAL_I2C_Init+0x1dc>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	1e58      	subs	r0, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6859      	ldr	r1, [r3, #4]
 80051fc:	460b      	mov	r3, r1
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	0099      	lsls	r1, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	fbb0 f3f3 	udiv	r3, r0, r3
 800520a:	3301      	adds	r3, #1
 800520c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	6809      	ldr	r1, [r1, #0]
 8005218:	4313      	orrs	r3, r2
 800521a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6911      	ldr	r1, [r2, #16]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	4311      	orrs	r1, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	430b      	orrs	r3, r1
 8005256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695a      	ldr	r2, [r3, #20]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	000186a0 	.word	0x000186a0
 80052b0:	001e847f 	.word	0x001e847f
 80052b4:	003d08ff 	.word	0x003d08ff
 80052b8:	431bde83 	.word	0x431bde83
 80052bc:	10624dd3 	.word	0x10624dd3

080052c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	461a      	mov	r2, r3
 80052cc:	460b      	mov	r3, r1
 80052ce:	817b      	strh	r3, [r7, #10]
 80052d0:	4613      	mov	r3, r2
 80052d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052d4:	f7fe f9de 	bl	8003694 <HAL_GetTick>
 80052d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	f040 80e0 	bne.w	80054a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	2319      	movs	r3, #25
 80052ee:	2201      	movs	r2, #1
 80052f0:	4970      	ldr	r1, [pc, #448]	; (80054b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fdcc 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052fe:	2302      	movs	r3, #2
 8005300:	e0d3      	b.n	80054aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_I2C_Master_Transmit+0x50>
 800530c:	2302      	movs	r3, #2
 800530e:	e0cc      	b.n	80054aa <HAL_I2C_Master_Transmit+0x1ea>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d007      	beq.n	8005336 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005344:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2221      	movs	r2, #33	; 0x21
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2210      	movs	r2, #16
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	893a      	ldrh	r2, [r7, #8]
 8005366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a50      	ldr	r2, [pc, #320]	; (80054b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005378:	8979      	ldrh	r1, [r7, #10]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fc36 	bl	8005bf0 <I2C_MasterRequestWrite>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e08d      	b.n	80054aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053a4:	e066      	b.n	8005474 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fe8a 	bl	80060c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00d      	beq.n	80053d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d107      	bne.n	80053ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e06b      	b.n	80054aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d11b      	bne.n	8005448 <HAL_I2C_Master_Transmit+0x188>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	d017      	beq.n	8005448 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	6a39      	ldr	r1, [r7, #32]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 fe81 	bl	8006154 <I2C_WaitOnBTFFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b04      	cmp	r3, #4
 800545e:	d107      	bne.n	8005470 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e01a      	b.n	80054aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	d194      	bne.n	80053a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e000      	b.n	80054aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
  }
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	00100002 	.word	0x00100002
 80054b8:	ffff0000 	.word	0xffff0000

080054bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08c      	sub	sp, #48	; 0x30
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	461a      	mov	r2, r3
 80054c8:	460b      	mov	r3, r1
 80054ca:	817b      	strh	r3, [r7, #10]
 80054cc:	4613      	mov	r3, r2
 80054ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054d4:	f7fe f8de 	bl	8003694 <HAL_GetTick>
 80054d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b20      	cmp	r3, #32
 80054e4:	f040 824b 	bne.w	800597e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	2319      	movs	r3, #25
 80054ee:	2201      	movs	r2, #1
 80054f0:	497f      	ldr	r1, [pc, #508]	; (80056f0 <HAL_I2C_Master_Receive+0x234>)
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fccc 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	e23e      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_I2C_Master_Receive+0x54>
 800550c:	2302      	movs	r3, #2
 800550e:	e237      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b01      	cmp	r3, #1
 8005524:	d007      	beq.n	8005536 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005544:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2222      	movs	r2, #34	; 0x22
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2210      	movs	r2, #16
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	893a      	ldrh	r2, [r7, #8]
 8005566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a5f      	ldr	r2, [pc, #380]	; (80056f4 <HAL_I2C_Master_Receive+0x238>)
 8005576:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005578:	8979      	ldrh	r1, [r7, #10]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f000 fbb8 	bl	8005cf4 <I2C_MasterRequestRead>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e1f8      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d113      	bne.n	80055be <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	61fb      	str	r3, [r7, #28]
 80055aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	e1cc      	b.n	8005958 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d11e      	bne.n	8005604 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80055d6:	b672      	cpsid	i
}
 80055d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005600:	b662      	cpsie	i
}
 8005602:	e035      	b.n	8005670 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005608:	2b02      	cmp	r3, #2
 800560a:	d11e      	bne.n	800564a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800561c:	b672      	cpsid	i
}
 800561e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005644:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005646:	b662      	cpsie	i
}
 8005648:	e012      	b.n	8005670 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005658:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005670:	e172      	b.n	8005958 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005676:	2b03      	cmp	r3, #3
 8005678:	f200 811f 	bhi.w	80058ba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005680:	2b01      	cmp	r3, #1
 8005682:	d123      	bne.n	80056cc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fdab 	bl	80061e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e173      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ca:	e145      	b.n	8005958 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d152      	bne.n	800577a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2200      	movs	r2, #0
 80056dc:	4906      	ldr	r1, [pc, #24]	; (80056f8 <HAL_I2C_Master_Receive+0x23c>)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 fbd6 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d008      	beq.n	80056fc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e148      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
 80056ee:	bf00      	nop
 80056f0:	00100002 	.word	0x00100002
 80056f4:	ffff0000 	.word	0xffff0000
 80056f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80056fc:	b672      	cpsid	i
}
 80056fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005742:	b662      	cpsie	i
}
 8005744:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005778:	e0ee      	b.n	8005958 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	2200      	movs	r2, #0
 8005782:	4981      	ldr	r1, [pc, #516]	; (8005988 <HAL_I2C_Master_Receive+0x4cc>)
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fb83 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0f5      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80057a4:	b672      	cpsid	i
}
 80057a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80057da:	4b6c      	ldr	r3, [pc, #432]	; (800598c <HAL_I2C_Master_Receive+0x4d0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	4a6b      	ldr	r2, [pc, #428]	; (8005990 <HAL_I2C_Master_Receive+0x4d4>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	0a1a      	lsrs	r2, r3, #8
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00da      	lsls	r2, r3, #3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d118      	bne.n	8005832 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005822:	b662      	cpsie	i
}
 8005824:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e0a6      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d1d9      	bne.n	80057f4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005882:	b662      	cpsie	i
}
 8005884:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058b8:	e04e      	b.n	8005958 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 fc90 	bl	80061e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e058      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ea:	3b01      	subs	r3, #1
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b04      	cmp	r3, #4
 800590c:	d124      	bne.n	8005958 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005912:	2b03      	cmp	r3, #3
 8005914:	d107      	bne.n	8005926 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005924:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595c:	2b00      	cmp	r3, #0
 800595e:	f47f ae88 	bne.w	8005672 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
  }
}
 8005980:	4618      	mov	r0, r3
 8005982:	3728      	adds	r7, #40	; 0x28
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	00010004 	.word	0x00010004
 800598c:	20000010 	.word	0x20000010
 8005990:	14f8b589 	.word	0x14f8b589

08005994 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	460b      	mov	r3, r1
 80059a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80059a4:	f7fd fe76 	bl	8003694 <HAL_GetTick>
 80059a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	f040 8111 	bne.w	8005bde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2319      	movs	r3, #25
 80059c2:	2201      	movs	r2, #1
 80059c4:	4988      	ldr	r1, [pc, #544]	; (8005be8 <HAL_I2C_IsDeviceReady+0x254>)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa62 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
 80059d4:	e104      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_I2C_IsDeviceReady+0x50>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e0fd      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x24c>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d007      	beq.n	8005a0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2224      	movs	r2, #36	; 0x24
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4a70      	ldr	r2, [pc, #448]	; (8005bec <HAL_I2C_IsDeviceReady+0x258>)
 8005a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa20 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00d      	beq.n	8005a72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a64:	d103      	bne.n	8005a6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0b6      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a72:	897b      	ldrh	r3, [r7, #10]
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	461a      	mov	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a82:	f7fd fe07 	bl	8003694 <HAL_GetTick>
 8005a86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	bf0c      	ite	eq
 8005a96:	2301      	moveq	r3, #1
 8005a98:	2300      	movne	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aac:	bf0c      	ite	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	2300      	movne	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ab6:	e025      	b.n	8005b04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ab8:	f7fd fdec 	bl	8003694 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <HAL_I2C_IsDeviceReady+0x13a>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	22a0      	movs	r2, #160	; 0xa0
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	bf0c      	ite	eq
 8005ae4:	2301      	moveq	r3, #1
 8005ae6:	2300      	movne	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2ba0      	cmp	r3, #160	; 0xa0
 8005b0e:	d005      	beq.n	8005b1c <HAL_I2C_IsDeviceReady+0x188>
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <HAL_I2C_IsDeviceReady+0x188>
 8005b16:	7dbb      	ldrb	r3, [r7, #22]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0cd      	beq.n	8005ab8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d129      	bne.n	8005b86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	2319      	movs	r3, #25
 8005b5e:	2201      	movs	r2, #1
 8005b60:	4921      	ldr	r1, [pc, #132]	; (8005be8 <HAL_I2C_IsDeviceReady+0x254>)
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f994 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e036      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e02c      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	2319      	movs	r3, #25
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	490f      	ldr	r1, [pc, #60]	; (8005be8 <HAL_I2C_IsDeviceReady+0x254>)
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f970 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e012      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	f4ff af32 	bcc.w	8005a2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	00100002 	.word	0x00100002
 8005bec:	ffff0000 	.word	0xffff0000

08005bf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	607a      	str	r2, [r7, #4]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	d006      	beq.n	8005c1a <I2C_MasterRequestWrite+0x2a>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d003      	beq.n	8005c1a <I2C_MasterRequestWrite+0x2a>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c18:	d108      	bne.n	8005c2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e00b      	b.n	8005c44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	2b12      	cmp	r3, #18
 8005c32:	d107      	bne.n	8005c44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f91d 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c6a:	d103      	bne.n	8005c74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e035      	b.n	8005ce4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c80:	d108      	bne.n	8005c94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c82:	897b      	ldrh	r3, [r7, #10]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c90:	611a      	str	r2, [r3, #16]
 8005c92:	e01b      	b.n	8005ccc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c94:	897b      	ldrh	r3, [r7, #10]
 8005c96:	11db      	asrs	r3, r3, #7
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 0306 	and.w	r3, r3, #6
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f063 030f 	orn	r3, r3, #15
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	490e      	ldr	r1, [pc, #56]	; (8005cec <I2C_MasterRequestWrite+0xfc>)
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 f966 	bl	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e010      	b.n	8005ce4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cc2:	897b      	ldrh	r3, [r7, #10]
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	4907      	ldr	r1, [pc, #28]	; (8005cf0 <I2C_MasterRequestWrite+0x100>)
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f956 	bl	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	00010008 	.word	0x00010008
 8005cf0:	00010002 	.word	0x00010002

08005cf4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	460b      	mov	r3, r1
 8005d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d006      	beq.n	8005d2e <I2C_MasterRequestRead+0x3a>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d003      	beq.n	8005d2e <I2C_MasterRequestRead+0x3a>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d2c:	d108      	bne.n	8005d40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e00b      	b.n	8005d58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	2b11      	cmp	r3, #17
 8005d46:	d107      	bne.n	8005d58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f893 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	d103      	bne.n	8005d88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e079      	b.n	8005e80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d94:	d108      	bne.n	8005da8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d96:	897b      	ldrh	r3, [r7, #10]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e05f      	b.n	8005e68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005da8:	897b      	ldrh	r3, [r7, #10]
 8005daa:	11db      	asrs	r3, r3, #7
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0306 	and.w	r3, r3, #6
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f063 030f 	orn	r3, r3, #15
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4930      	ldr	r1, [pc, #192]	; (8005e88 <I2C_MasterRequestRead+0x194>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f8dc 	bl	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e054      	b.n	8005e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dd6:	897b      	ldrh	r3, [r7, #10]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4929      	ldr	r1, [pc, #164]	; (8005e8c <I2C_MasterRequestRead+0x198>)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f8cc 	bl	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e044      	b.n	8005e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f831 	bl	8005e90 <I2C_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00d      	beq.n	8005e50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d103      	bne.n	8005e4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e017      	b.n	8005e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e50:	897b      	ldrh	r3, [r7, #10]
 8005e52:	11db      	asrs	r3, r3, #7
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 0306 	and.w	r3, r3, #6
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f063 030e 	orn	r3, r3, #14
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4907      	ldr	r1, [pc, #28]	; (8005e8c <I2C_MasterRequestRead+0x198>)
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f888 	bl	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	00010008 	.word	0x00010008
 8005e8c:	00010002 	.word	0x00010002

08005e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea0:	e048      	b.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d044      	beq.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eaa:	f7fd fbf3 	bl	8003694 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d302      	bcc.n	8005ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d139      	bne.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d10d      	bne.n	8005ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	43da      	mvns	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	e00c      	b.n	8005f00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	43da      	mvns	r2, r3
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bf0c      	ite	eq
 8005ef8:	2301      	moveq	r3, #1
 8005efa:	2300      	movne	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d116      	bne.n	8005f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e023      	b.n	8005f7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d10d      	bne.n	8005f5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	43da      	mvns	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	e00c      	b.n	8005f74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	43da      	mvns	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	4013      	ands	r3, r2
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2301      	moveq	r3, #1
 8005f6e:	2300      	movne	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	79fb      	ldrb	r3, [r7, #7]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d093      	beq.n	8005ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f92:	e071      	b.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa2:	d123      	bne.n	8005fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	f043 0204 	orr.w	r2, r3, #4
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e067      	b.n	80060bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d041      	beq.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff4:	f7fd fb4e 	bl	8003694 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d302      	bcc.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d136      	bne.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10c      	bne.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	43da      	mvns	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	bf14      	ite	ne
 8006026:	2301      	movne	r3, #1
 8006028:	2300      	moveq	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	e00b      	b.n	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	43da      	mvns	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d016      	beq.n	8006078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e021      	b.n	80060bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d10c      	bne.n	800609c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	43da      	mvns	r2, r3
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf14      	ite	ne
 8006094:	2301      	movne	r3, #1
 8006096:	2300      	moveq	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	e00b      	b.n	80060b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	43da      	mvns	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	4013      	ands	r3, r2
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bf14      	ite	ne
 80060ae:	2301      	movne	r3, #1
 80060b0:	2300      	moveq	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f47f af6d 	bne.w	8005f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060d0:	e034      	b.n	800613c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f8e3 	bl	800629e <I2C_IsAcknowledgeFailed>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e034      	b.n	800614c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d028      	beq.n	800613c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fd fad3 	bl	8003694 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11d      	bne.n	800613c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d016      	beq.n	800613c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e007      	b.n	800614c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006146:	2b80      	cmp	r3, #128	; 0x80
 8006148:	d1c3      	bne.n	80060d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006160:	e034      	b.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f89b 	bl	800629e <I2C_IsAcknowledgeFailed>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e034      	b.n	80061dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d028      	beq.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800617a:	f7fd fa8b 	bl	8003694 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	429a      	cmp	r2, r3
 8006188:	d302      	bcc.n	8006190 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d11d      	bne.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d016      	beq.n	80061cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e007      	b.n	80061dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f003 0304 	and.w	r3, r3, #4
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d1c3      	bne.n	8006162 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061f0:	e049      	b.n	8006286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d119      	bne.n	8006234 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0210 	mvn.w	r2, #16
 8006208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e030      	b.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006234:	f7fd fa2e 	bl	8003694 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	429a      	cmp	r2, r3
 8006242:	d302      	bcc.n	800624a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d11d      	bne.n	8006286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d016      	beq.n	8006286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e007      	b.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d1ae      	bne.n	80061f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b4:	d11b      	bne.n	80062ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	f043 0204 	orr.w	r2, r3, #4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fc:	b08b      	sub	sp, #44	; 0x2c
 80062fe:	af06      	add	r7, sp, #24
 8006300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e0f1      	b.n	80064f0 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f00c fbf5 	bl	8012b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2203      	movs	r2, #3
 800632a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f005 ff66 	bl	800c204 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	687e      	ldr	r6, [r7, #4]
 8006340:	466d      	mov	r5, sp
 8006342:	f106 0410 	add.w	r4, r6, #16
 8006346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	1d33      	adds	r3, r6, #4
 8006350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006352:	6838      	ldr	r0, [r7, #0]
 8006354:	f005 ff30 	bl	800c1b8 <USB_CoreInit>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e0c2      	b.n	80064f0 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f005 ff61 	bl	800c238 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	e040      	b.n	80063fe <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	440b      	add	r3, r1
 800638c:	3301      	adds	r3, #1
 800638e:	2201      	movs	r2, #1
 8006390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	440b      	add	r3, r1
 80063a2:	7bfa      	ldrb	r2, [r7, #15]
 80063a4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	440b      	add	r3, r1
 80063b6:	3303      	adds	r3, #3
 80063b8:	2200      	movs	r2, #0
 80063ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063bc:	7bfa      	ldrb	r2, [r7, #15]
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	440b      	add	r3, r1
 80063ca:	3338      	adds	r3, #56	; 0x38
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063d0:	7bfa      	ldrb	r2, [r7, #15]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	440b      	add	r3, r1
 80063de:	333c      	adds	r3, #60	; 0x3c
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063e4:	7bfa      	ldrb	r2, [r7, #15]
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	440b      	add	r3, r1
 80063f2:	3340      	adds	r3, #64	; 0x40
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	3301      	adds	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
 80063fe:	7bfa      	ldrb	r2, [r7, #15]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3b9      	bcc.n	800637c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006408:	2300      	movs	r3, #0
 800640a:	73fb      	strb	r3, [r7, #15]
 800640c:	e044      	b.n	8006498 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800640e:	7bfa      	ldrb	r2, [r7, #15]
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	440b      	add	r3, r1
 800641c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006424:	7bfa      	ldrb	r2, [r7, #15]
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	440b      	add	r3, r1
 8006432:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006436:	7bfa      	ldrb	r2, [r7, #15]
 8006438:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800643a:	7bfa      	ldrb	r2, [r7, #15]
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	440b      	add	r3, r1
 8006448:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006450:	7bfa      	ldrb	r2, [r7, #15]
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	440b      	add	r3, r1
 800645e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006462:	2200      	movs	r2, #0
 8006464:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006466:	7bfa      	ldrb	r2, [r7, #15]
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	440b      	add	r3, r1
 8006474:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800647c:	7bfa      	ldrb	r2, [r7, #15]
 800647e:	6879      	ldr	r1, [r7, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	440b      	add	r3, r1
 800648a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	3301      	adds	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
 8006498:	7bfa      	ldrb	r2, [r7, #15]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3b5      	bcc.n	800640e <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	687e      	ldr	r6, [r7, #4]
 80064aa:	466d      	mov	r5, sp
 80064ac:	f106 0410 	add.w	r4, r6, #16
 80064b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	1d33      	adds	r3, r6, #4
 80064ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064bc:	6838      	ldr	r0, [r7, #0]
 80064be:	f005 fec7 	bl	800c250 <USB_DevInit>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e00d      	b.n	80064f0 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f008 f948 	bl	800e77e <USB_DevDisconnect>

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_PCD_Start+0x16>
 800650a:	2302      	movs	r3, #2
 800650c:	e016      	b.n	800653c <HAL_PCD_Start+0x44>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f005 fe5c 	bl	800c1d8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8006520:	2101      	movs	r1, #1
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f00c fd43 	bl	8012fae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f008 f91c 	bl	800e76a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f008 f91e 	bl	800e792 <USB_ReadInterrupts>
 8006556:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fb04 	bl	8006b70 <PCD_EP_ISR_Handler>

    return;
 8006568:	e119      	b.n	800679e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006570:	2b00      	cmp	r3, #0
 8006572:	d013      	beq.n	800659c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800657c:	b29a      	uxth	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006586:	b292      	uxth	r2, r2
 8006588:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f00c fb3a 	bl	8012c06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006592:	2100      	movs	r1, #0
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f905 	bl	80067a4 <HAL_PCD_SetAddress>

    return;
 800659a:	e100      	b.n	800679e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00c      	beq.n	80065c0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065b8:	b292      	uxth	r2, r2
 80065ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80065be:	e0ee      	b.n	800679e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065dc:	b292      	uxth	r2, r2
 80065de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80065e2:	e0dc      	b.n	800679e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d027      	beq.n	800663e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0204 	bic.w	r2, r2, #4
 8006600:	b292      	uxth	r2, r2
 8006602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800660e:	b29a      	uxth	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0208 	bic.w	r2, r2, #8
 8006618:	b292      	uxth	r2, r2
 800661a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f00c fb2a 	bl	8012c78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800662c:	b29a      	uxth	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006636:	b292      	uxth	r2, r2
 8006638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800663c:	e0af      	b.n	800679e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8083 	beq.w	8006750 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800664a:	2300      	movs	r3, #0
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e010      	b.n	8006672 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	7ffb      	ldrb	r3, [r7, #31]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	7ffb      	ldrb	r3, [r7, #31]
 800665e:	8812      	ldrh	r2, [r2, #0]
 8006660:	b292      	uxth	r2, r2
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	3320      	adds	r3, #32
 8006666:	443b      	add	r3, r7
 8006668:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800666c:	7ffb      	ldrb	r3, [r7, #31]
 800666e:	3301      	adds	r3, #1
 8006670:	77fb      	strb	r3, [r7, #31]
 8006672:	7ffb      	ldrb	r3, [r7, #31]
 8006674:	2b07      	cmp	r3, #7
 8006676:	d9eb      	bls.n	8006650 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	b292      	uxth	r2, r2
 800668c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006698:	b29a      	uxth	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0201 	bic.w	r2, r2, #1
 80066a2:	b292      	uxth	r2, r2
 80066a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80066a8:	bf00      	nop
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0f6      	beq.n	80066aa <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ce:	b292      	uxth	r2, r2
 80066d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80066d4:	2300      	movs	r3, #0
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e00f      	b.n	80066fa <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80066da:	7ffb      	ldrb	r3, [r7, #31]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	4611      	mov	r1, r2
 80066e2:	7ffa      	ldrb	r2, [r7, #31]
 80066e4:	0092      	lsls	r2, r2, #2
 80066e6:	440a      	add	r2, r1
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	3320      	adds	r3, #32
 80066ec:	443b      	add	r3, r7
 80066ee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80066f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80066f4:	7ffb      	ldrb	r3, [r7, #31]
 80066f6:	3301      	adds	r3, #1
 80066f8:	77fb      	strb	r3, [r7, #31]
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	2b07      	cmp	r3, #7
 80066fe:	d9ec      	bls.n	80066da <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0208 	orr.w	r2, r2, #8
 8006712:	b292      	uxth	r2, r2
 8006714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800672a:	b292      	uxth	r2, r2
 800672c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006738:	b29a      	uxth	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0204 	orr.w	r2, r2, #4
 8006742:	b292      	uxth	r2, r2
 8006744:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f00c fa7b 	bl	8012c44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800674e:	e026      	b.n	800679e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800676c:	b292      	uxth	r2, r2
 800676e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f00c fa39 	bl	8012bea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006778:	e011      	b.n	800679e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00c      	beq.n	800679e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800678c:	b29a      	uxth	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006796:	b292      	uxth	r2, r2
 8006798:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800679c:	bf00      	nop
  }
}
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_PCD_SetAddress+0x1a>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e013      	b.n	80067e6 <HAL_PCD_SetAddress+0x42>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	78fa      	ldrb	r2, [r7, #3]
 80067ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	4611      	mov	r1, r2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f007 ffb4 	bl	800e744 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	4608      	mov	r0, r1
 80067f8:	4611      	mov	r1, r2
 80067fa:	461a      	mov	r2, r3
 80067fc:	4603      	mov	r3, r0
 80067fe:	70fb      	strb	r3, [r7, #3]
 8006800:	460b      	mov	r3, r1
 8006802:	803b      	strh	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800680c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006810:	2b00      	cmp	r3, #0
 8006812:	da0e      	bge.n	8006832 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	4413      	add	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	705a      	strb	r2, [r3, #1]
 8006830:	e00e      	b.n	8006850 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	f003 0207 	and.w	r2, r3, #7
 8006838:	4613      	mov	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4413      	add	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	b2da      	uxtb	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800685c:	883a      	ldrh	r2, [r7, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	78ba      	ldrb	r2, [r7, #2]
 8006866:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006868:	78bb      	ldrb	r3, [r7, #2]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d102      	bne.n	8006874 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <HAL_PCD_EP_Open+0x94>
 800687e:	2302      	movs	r3, #2
 8006880:	e00e      	b.n	80068a0 <HAL_PCD_EP_Open+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	4618      	mov	r0, r3
 8006892:	f005 fcfd 	bl	800c290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800689e:	7afb      	ldrb	r3, [r7, #11]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	da0e      	bge.n	80068da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	00db      	lsls	r3, r3, #3
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2201      	movs	r2, #1
 80068d6:	705a      	strb	r2, [r3, #1]
 80068d8:	e00e      	b.n	80068f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	f003 0207 	and.w	r2, r3, #7
 80068e0:	4613      	mov	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	4413      	add	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_PCD_EP_Close+0x6a>
 800690e:	2302      	movs	r3, #2
 8006910:	e00e      	b.n	8006930 <HAL_PCD_EP_Close+0x88>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	4618      	mov	r0, r3
 8006922:	f006 f875 	bl	800ca10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	460b      	mov	r3, r1
 8006946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006948:	7afb      	ldrb	r3, [r7, #11]
 800694a:	f003 0207 	and.w	r2, r3, #7
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2200      	movs	r2, #0
 8006970:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2200      	movs	r2, #0
 8006976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006978:	7afb      	ldrb	r3, [r7, #11]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	b2da      	uxtb	r2, r3
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6979      	ldr	r1, [r7, #20]
 800698a:	4618      	mov	r0, r3
 800698c:	f006 fa2c 	bl	800cde8 <USB_EPStartXfer>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	460b      	mov	r3, r1
 80069a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2200      	movs	r2, #0
 80069de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2201      	movs	r2, #1
 80069e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069e6:	7afb      	ldrb	r3, [r7, #11]
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6979      	ldr	r1, [r7, #20]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f006 f9f5 	bl	800cde8 <USB_EPStartXfer>

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	f003 0207 	and.w	r2, r3, #7
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d901      	bls.n	8006a26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e04c      	b.n	8006ac0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da0e      	bge.n	8006a4c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	00db      	lsls	r3, r3, #3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2201      	movs	r2, #1
 8006a48:	705a      	strb	r2, [r3, #1]
 8006a4a:	e00c      	b.n	8006a66 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_PCD_EP_SetStall+0x7e>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e01c      	b.n	8006ac0 <HAL_PCD_EP_SetStall+0xb8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f007 fd58 	bl	800e54a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d108      	bne.n	8006ab6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	f007 fe7d 	bl	800e7b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d901      	bls.n	8006ae6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e040      	b.n	8006b68 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da0e      	bge.n	8006b0c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	4613      	mov	r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	4413      	add	r3, r2
 8006afc:	00db      	lsls	r3, r3, #3
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	705a      	strb	r2, [r3, #1]
 8006b0a:	e00e      	b.n	8006b2a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	f003 0207 	and.w	r2, r3, #7
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4413      	add	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_PCD_EP_ClrStall+0x82>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e00e      	b.n	8006b68 <HAL_PCD_EP_ClrStall+0xa0>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f007 fd46 	bl	800e5ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b096      	sub	sp, #88	; 0x58
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006b78:	e3bf      	b.n	80072fa <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8006b94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 8179 	bne.w	8006e90 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006b9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d152      	bne.n	8006c50 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bba:	81fb      	strh	r3, [r7, #14]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	89fb      	ldrh	r3, [r7, #14]
 8006bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3328      	adds	r3, #40	; 0x28
 8006bd2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	3302      	adds	r3, #2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6812      	ldr	r2, [r2, #0]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c02:	695a      	ldr	r2, [r3, #20]
 8006c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	441a      	add	r2, r3
 8006c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f00b ffd0 	bl	8012bb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 836b 	beq.w	80072fa <PCD_EP_ISR_Handler+0x78a>
 8006c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f040 8366 	bne.w	80072fa <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	b292      	uxth	r2, r2
 8006c42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006c4e:	e354      	b.n	80072fa <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c56:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006c62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d034      	beq.n	8006cd8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	4413      	add	r3, r2
 8006c82:	3306      	adds	r3, #6
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6812      	ldr	r2, [r2, #0]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006caa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f007 fdcf 	bl	800e850 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	823b      	strh	r3, [r7, #16]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	8a3a      	ldrh	r2, [r7, #16]
 8006cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ccc:	b292      	uxth	r2, r2
 8006cce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f00b ff43 	bl	8012b5c <HAL_PCD_SetupStageCallback>
 8006cd6:	e310      	b.n	80072fa <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006cd8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f280 830c 	bge.w	80072fa <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006cee:	4013      	ands	r3, r2
 8006cf0:	83fb      	strh	r3, [r7, #30]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	8bfa      	ldrh	r2, [r7, #30]
 8006cf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cfc:	b292      	uxth	r2, r2
 8006cfe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	00db      	lsls	r3, r3, #3
 8006d12:	4413      	add	r3, r2
 8006d14:	3306      	adds	r3, #6
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6812      	ldr	r2, [r2, #0]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d019      	beq.n	8006d68 <PCD_EP_ISR_Handler+0x1f8>
 8006d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d015      	beq.n	8006d68 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d42:	6959      	ldr	r1, [r3, #20]
 8006d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f007 fd7f 	bl	800e850 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d54:	695a      	ldr	r2, [r3, #20]
 8006d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	441a      	add	r2, r3
 8006d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006d60:	2100      	movs	r1, #0
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f00b ff0c 	bl	8012b80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	881b      	ldrh	r3, [r3, #0]
 8006d6e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006d72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f040 82bd 	bne.w	80072fa <PCD_EP_ISR_Handler+0x78a>
 8006d80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006d84:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d8c:	f000 82b5 	beq.w	80072fa <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	461a      	mov	r2, r3
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	4413      	add	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	801a      	strh	r2, [r3, #0]
 8006dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	2b3e      	cmp	r3, #62	; 0x3e
 8006dc6:	d91d      	bls.n	8006e04 <PCD_EP_ISR_Handler+0x294>
 8006dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	f003 031f 	and.w	r3, r3, #31
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <PCD_EP_ISR_Handler+0x272>
 8006ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dde:	3b01      	subs	r3, #1
 8006de0:	647b      	str	r3, [r7, #68]	; 0x44
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	029b      	lsls	r3, r3, #10
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	e026      	b.n	8006e52 <PCD_EP_ISR_Handler+0x2e2>
 8006e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <PCD_EP_ISR_Handler+0x2b2>
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	e017      	b.n	8006e52 <PCD_EP_ISR_Handler+0x2e2>
 8006e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	085b      	lsrs	r3, r3, #1
 8006e28:	647b      	str	r3, [r7, #68]	; 0x44
 8006e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <PCD_EP_ISR_Handler+0x2cc>
 8006e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e38:	3301      	adds	r3, #1
 8006e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	029b      	lsls	r3, r3, #10
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	827b      	strh	r3, [r7, #18]
 8006e64:	8a7b      	ldrh	r3, [r7, #18]
 8006e66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e6a:	827b      	strh	r3, [r7, #18]
 8006e6c:	8a7b      	ldrh	r3, [r7, #18]
 8006e6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e72:	827b      	strh	r3, [r7, #18]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	8a7b      	ldrh	r3, [r7, #18]
 8006e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	8013      	strh	r3, [r2, #0]
 8006e8e:	e234      	b.n	80072fa <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ea4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f280 80fc 	bge.w	80070a6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006edc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ee0:	b292      	uxth	r2, r2
 8006ee2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006ee4:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006efc:	7b1b      	ldrb	r3, [r3, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d125      	bne.n	8006f4e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4413      	add	r3, r2
 8006f16:	3306      	adds	r3, #6
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	6812      	ldr	r2, [r2, #0]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f2a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006f2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8092 	beq.w	800705c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3e:	6959      	ldr	r1, [r3, #20]
 8006f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f42:	88da      	ldrh	r2, [r3, #6]
 8006f44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f48:	f007 fc82 	bl	800e850 <USB_ReadPMA>
 8006f4c:	e086      	b.n	800705c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f50:	78db      	ldrb	r3, [r3, #3]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d10a      	bne.n	8006f6c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006f56:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9d9 	bl	8007316 <HAL_PCD_EP_DB_Receive>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006f6a:	e077      	b.n	800705c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	441a      	add	r2, r3
 8006f98:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d024      	beq.n	8007014 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	4413      	add	r3, r2
 8006fde:	3302      	adds	r3, #2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fec:	881b      	ldrh	r3, [r3, #0]
 8006fee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ff2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006ff6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d02e      	beq.n	800705c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007004:	6959      	ldr	r1, [r3, #20]
 8007006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007008:	891a      	ldrh	r2, [r3, #8]
 800700a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800700e:	f007 fc1f 	bl	800e850 <USB_ReadPMA>
 8007012:	e023      	b.n	800705c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	00db      	lsls	r3, r3, #3
 8007026:	4413      	add	r3, r2
 8007028:	3306      	adds	r3, #6
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6812      	ldr	r2, [r2, #0]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800703c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007040:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704e:	6959      	ldr	r1, [r3, #20]
 8007050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007052:	895a      	ldrh	r2, [r3, #10]
 8007054:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007058:	f007 fbfa 	bl	800e850 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800705c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007064:	441a      	add	r2, r3
 8007066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007068:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800706a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800706c:	695a      	ldr	r2, [r3, #20]
 800706e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007072:	441a      	add	r2, r3
 8007074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007076:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <PCD_EP_ISR_Handler+0x51c>
 8007080:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	429a      	cmp	r2, r3
 800708a:	d206      	bcs.n	800709a <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800708c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f00b fd74 	bl	8012b80 <HAL_PCD_DataOutStageCallback>
 8007098:	e005      	b.n	80070a6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070a0:	4618      	mov	r0, r3
 80070a2:	f005 fea1 	bl	800cde8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80070a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 8123 	beq.w	80072fa <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80070b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	4413      	add	r3, r2
 80070c6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80070de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80070f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007100:	b29b      	uxth	r3, r3
 8007102:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007106:	78db      	ldrb	r3, [r3, #3]
 8007108:	2b01      	cmp	r3, #1
 800710a:	f040 80a2 	bne.w	8007252 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800710e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007110:	2200      	movs	r2, #0
 8007112:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007116:	7b1b      	ldrb	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8093 	beq.w	8007244 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800711e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d046      	beq.n	80071b8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800712a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d126      	bne.n	8007180 <PCD_EP_ISR_Handler+0x610>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007140:	b29b      	uxth	r3, r3
 8007142:	461a      	mov	r2, r3
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	4413      	add	r3, r2
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
 800714a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	011a      	lsls	r2, r3, #4
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	4413      	add	r3, r2
 8007154:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007158:	623b      	str	r3, [r7, #32]
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007164:	b29a      	uxth	r2, r3
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	801a      	strh	r2, [r3, #0]
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007174:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007178:	b29a      	uxth	r2, r3
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	801a      	strh	r2, [r3, #0]
 800717e:	e061      	b.n	8007244 <PCD_EP_ISR_Handler+0x6d4>
 8007180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d15d      	bne.n	8007244 <PCD_EP_ISR_Handler+0x6d4>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	4413      	add	r3, r2
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	011a      	lsls	r2, r3, #4
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	4413      	add	r3, r2
 80071aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	2200      	movs	r2, #0
 80071b4:	801a      	strh	r2, [r3, #0]
 80071b6:	e045      	b.n	8007244 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d126      	bne.n	8007214 <PCD_EP_ISR_Handler+0x6a4>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	637b      	str	r3, [r7, #52]	; 0x34
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	461a      	mov	r2, r3
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	4413      	add	r3, r2
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	011a      	lsls	r2, r3, #4
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	4413      	add	r3, r2
 80071e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720c:	b29a      	uxth	r2, r3
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	e017      	b.n	8007244 <PCD_EP_ISR_Handler+0x6d4>
 8007214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d113      	bne.n	8007244 <PCD_EP_ISR_Handler+0x6d4>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007224:	b29b      	uxth	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722a:	4413      	add	r3, r2
 800722c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800722e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	011a      	lsls	r2, r3, #4
 8007234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007236:	4413      	add	r3, r2
 8007238:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2200      	movs	r2, #0
 8007242:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f00b fcb3 	bl	8012bb6 <HAL_PCD_DataInStageCallback>
 8007250:	e053      	b.n	80072fa <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007252:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d146      	bne.n	80072ec <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007266:	b29b      	uxth	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	4413      	add	r3, r2
 8007272:	3302      	adds	r3, #2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007280:	881b      	ldrh	r3, [r3, #0]
 8007282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007286:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800728a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007292:	429a      	cmp	r2, r3
 8007294:	d907      	bls.n	80072a6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8007296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007298:	699a      	ldr	r2, [r3, #24]
 800729a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a2:	619a      	str	r2, [r3, #24]
 80072a4:	e002      	b.n	80072ac <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80072a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a8:	2200      	movs	r2, #0
 80072aa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80072ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d106      	bne.n	80072c2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f00b fc7b 	bl	8012bb6 <HAL_PCD_DataInStageCallback>
 80072c0:	e01b      	b.n	80072fa <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80072c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c4:	695a      	ldr	r2, [r3, #20]
 80072c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072ca:	441a      	add	r2, r3
 80072cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ce:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80072d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80072d8:	441a      	add	r2, r3
 80072da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072dc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072e4:	4618      	mov	r0, r3
 80072e6:	f005 fd7f 	bl	800cde8 <USB_EPStartXfer>
 80072ea:	e006      	b.n	80072fa <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80072ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80072f0:	461a      	mov	r2, r3
 80072f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f91b 	bl	8007530 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007302:	b29b      	uxth	r3, r3
 8007304:	b21b      	sxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	f6ff ac37 	blt.w	8006b7a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3758      	adds	r7, #88	; 0x58
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b088      	sub	sp, #32
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	4613      	mov	r3, r2
 8007322:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d07e      	beq.n	800742c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	4413      	add	r3, r2
 8007342:	3302      	adds	r3, #2
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	4413      	add	r3, r2
 800734c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007356:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	699a      	ldr	r2, [r3, #24]
 800735c:	8b7b      	ldrh	r3, [r7, #26]
 800735e:	429a      	cmp	r2, r3
 8007360:	d306      	bcc.n	8007370 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	8b7b      	ldrh	r3, [r7, #26]
 8007368:	1ad2      	subs	r2, r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	619a      	str	r2, [r3, #24]
 800736e:	e002      	b.n	8007376 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d123      	bne.n	80073c6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007398:	833b      	strh	r3, [r7, #24]
 800739a:	8b3b      	ldrh	r3, [r7, #24]
 800739c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073a0:	833b      	strh	r3, [r7, #24]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	441a      	add	r2, r3
 80073b0:	8b3b      	ldrh	r3, [r7, #24]
 80073b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01f      	beq.n	8007410 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	82fb      	strh	r3, [r7, #22]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	441a      	add	r2, r3
 80073fa:	8afb      	ldrh	r3, [r7, #22]
 80073fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007408:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800740c:	b29b      	uxth	r3, r3
 800740e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007410:	8b7b      	ldrh	r3, [r7, #26]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8087 	beq.w	8007526 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6959      	ldr	r1, [r3, #20]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	891a      	ldrh	r2, [r3, #8]
 8007424:	8b7b      	ldrh	r3, [r7, #26]
 8007426:	f007 fa13 	bl	800e850 <USB_ReadPMA>
 800742a:	e07c      	b.n	8007526 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007434:	b29b      	uxth	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	4413      	add	r3, r2
 8007440:	3306      	adds	r3, #6
 8007442:	005b      	lsls	r3, r3, #1
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800744e:	881b      	ldrh	r3, [r3, #0]
 8007450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007454:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	8b7b      	ldrh	r3, [r7, #26]
 800745c:	429a      	cmp	r2, r3
 800745e:	d306      	bcc.n	800746e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	8b7b      	ldrh	r3, [r7, #26]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	619a      	str	r2, [r3, #24]
 800746c:	e002      	b.n	8007474 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d123      	bne.n	80074c4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	b29b      	uxth	r3, r3
 800748e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007496:	83fb      	strh	r3, [r7, #30]
 8007498:	8bfb      	ldrh	r3, [r7, #30]
 800749a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800749e:	83fb      	strh	r3, [r7, #30]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	441a      	add	r2, r3
 80074ae:	8bfb      	ldrh	r3, [r7, #30]
 80074b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d11f      	bne.n	800750e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e8:	83bb      	strh	r3, [r7, #28]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	441a      	add	r2, r3
 80074f8:	8bbb      	ldrh	r3, [r7, #28]
 80074fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800750a:	b29b      	uxth	r3, r3
 800750c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800750e:	8b7b      	ldrh	r3, [r7, #26]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6959      	ldr	r1, [r3, #20]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	895a      	ldrh	r2, [r3, #10]
 8007520:	8b7b      	ldrh	r3, [r7, #26]
 8007522:	f007 f995 	bl	800e850 <USB_ReadPMA>
    }
  }

  return count;
 8007526:	8b7b      	ldrh	r3, [r7, #26]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b0a4      	sub	sp, #144	; 0x90
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	4613      	mov	r3, r2
 800753c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 81dd 	beq.w	8007904 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007552:	b29b      	uxth	r3, r3
 8007554:	461a      	mov	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	3302      	adds	r3, #2
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007572:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800757e:	429a      	cmp	r2, r3
 8007580:	d907      	bls.n	8007592 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	699a      	ldr	r2, [r3, #24]
 8007586:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	619a      	str	r2, [r3, #24]
 8007590:	e002      	b.n	8007598 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f040 80b9 	bne.w	8007714 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d126      	bne.n	80075f8 <HAL_PCD_EP_DB_Transmit+0xc8>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	461a      	mov	r2, r3
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	4413      	add	r3, r2
 80075c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	011a      	lsls	r2, r3, #4
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	4413      	add	r3, r2
 80075cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	e01a      	b.n	800762e <HAL_PCD_EP_DB_Transmit+0xfe>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d116      	bne.n	800762e <HAL_PCD_EP_DB_Transmit+0xfe>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760e:	b29b      	uxth	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007614:	4413      	add	r3, r2
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	011a      	lsls	r2, r3, #4
 800761e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007620:	4413      	add	r3, r2
 8007622:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007626:	633b      	str	r3, [r7, #48]	; 0x30
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	2200      	movs	r2, #0
 800762c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d126      	bne.n	800768a <HAL_PCD_EP_DB_Transmit+0x15a>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	61fb      	str	r3, [r7, #28]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764a:	b29b      	uxth	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	61fb      	str	r3, [r7, #28]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	011a      	lsls	r2, r3, #4
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800766e:	b29a      	uxth	r2, r3
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	801a      	strh	r2, [r3, #0]
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	b29b      	uxth	r3, r3
 800767a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007682:	b29a      	uxth	r2, r3
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	e017      	b.n	80076ba <HAL_PCD_EP_DB_Transmit+0x18a>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b01      	cmp	r3, #1
 8007690:	d113      	bne.n	80076ba <HAL_PCD_EP_DB_Transmit+0x18a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800769a:	b29b      	uxth	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	4413      	add	r3, r2
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	011a      	lsls	r2, r3, #4
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	4413      	add	r3, r2
 80076ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076b2:	623b      	str	r3, [r7, #32]
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	2200      	movs	r2, #0
 80076b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f00b fa78 	bl	8012bb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 82fc 	beq.w	8007cca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	881b      	ldrh	r3, [r3, #0]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ec:	82fb      	strh	r3, [r7, #22]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	8afb      	ldrh	r3, [r7, #22]
 80076fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800770a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770e:	b29b      	uxth	r3, r3
 8007710:	8013      	strh	r3, [r2, #0]
 8007712:	e2da      	b.n	8007cca <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d021      	beq.n	8007762 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007738:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	441a      	add	r2, r3
 800774a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800774e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800775a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775e:	b29b      	uxth	r3, r3
 8007760:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007768:	2b01      	cmp	r3, #1
 800776a:	f040 82ae 	bne.w	8007cca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007776:	441a      	add	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007784:	441a      	add	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6a1a      	ldr	r2, [r3, #32]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	429a      	cmp	r2, r3
 8007794:	d30b      	bcc.n	80077ae <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6a1a      	ldr	r2, [r3, #32]
 80077a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	621a      	str	r2, [r3, #32]
 80077ac:	e017      	b.n	80077de <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80077b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80077ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80077c6:	e00a      	b.n	80077de <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d165      	bne.n	80078b2 <HAL_PCD_EP_DB_Transmit+0x382>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fa:	4413      	add	r3, r2
 80077fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	011a      	lsls	r2, r3, #4
 8007804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007806:	4413      	add	r3, r2
 8007808:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800780c:	63bb      	str	r3, [r7, #56]	; 0x38
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007818:	b29a      	uxth	r2, r3
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007822:	2b3e      	cmp	r3, #62	; 0x3e
 8007824:	d91d      	bls.n	8007862 <HAL_PCD_EP_DB_Transmit+0x332>
 8007826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800782a:	095b      	lsrs	r3, r3, #5
 800782c:	64bb      	str	r3, [r7, #72]	; 0x48
 800782e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <HAL_PCD_EP_DB_Transmit+0x310>
 800783a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800783c:	3b01      	subs	r3, #1
 800783e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	881b      	ldrh	r3, [r3, #0]
 8007844:	b29a      	uxth	r2, r3
 8007846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007848:	b29b      	uxth	r3, r3
 800784a:	029b      	lsls	r3, r3, #10
 800784c:	b29b      	uxth	r3, r3
 800784e:	4313      	orrs	r3, r2
 8007850:	b29b      	uxth	r3, r3
 8007852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800785a:	b29a      	uxth	r2, r3
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	801a      	strh	r2, [r3, #0]
 8007860:	e044      	b.n	80078ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <HAL_PCD_EP_DB_Transmit+0x350>
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007878:	b29a      	uxth	r2, r3
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	801a      	strh	r2, [r3, #0]
 800787e:	e035      	b.n	80078ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007884:	085b      	lsrs	r3, r3, #1
 8007886:	64bb      	str	r3, [r7, #72]	; 0x48
 8007888:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_PCD_EP_DB_Transmit+0x36a>
 8007894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007896:	3301      	adds	r3, #1
 8007898:	64bb      	str	r3, [r7, #72]	; 0x48
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	029b      	lsls	r3, r3, #10
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ae:	801a      	strh	r2, [r3, #0]
 80078b0:	e01c      	b.n	80078ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d118      	bne.n	80078ec <HAL_PCD_EP_DB_Transmit+0x3bc>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	647b      	str	r3, [r7, #68]	; 0x44
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	461a      	mov	r2, r3
 80078cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078ce:	4413      	add	r3, r2
 80078d0:	647b      	str	r3, [r7, #68]	; 0x44
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	011a      	lsls	r2, r3, #4
 80078d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078da:	4413      	add	r3, r2
 80078dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078e0:	643b      	str	r3, [r7, #64]	; 0x40
 80078e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	6959      	ldr	r1, [r3, #20]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	891a      	ldrh	r2, [r3, #8]
 80078f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f006 ff62 	bl	800e7c6 <USB_WritePMA>
 8007902:	e1e2      	b.n	8007cca <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800790c:	b29b      	uxth	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	4413      	add	r3, r2
 8007918:	3306      	adds	r3, #6
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800792c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	699a      	ldr	r2, [r3, #24]
 8007934:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007938:	429a      	cmp	r2, r3
 800793a:	d307      	bcc.n	800794c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	699a      	ldr	r2, [r3, #24]
 8007940:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	619a      	str	r2, [r3, #24]
 800794a:	e002      	b.n	8007952 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2200      	movs	r2, #0
 8007950:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80c0 	bne.w	8007adc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d126      	bne.n	80079b2 <HAL_PCD_EP_DB_Transmit+0x482>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	67fb      	str	r3, [r7, #124]	; 0x7c
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007972:	b29b      	uxth	r3, r3
 8007974:	461a      	mov	r2, r3
 8007976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007978:	4413      	add	r3, r2
 800797a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	011a      	lsls	r2, r3, #4
 8007982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007984:	4413      	add	r3, r2
 8007986:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800798a:	67bb      	str	r3, [r7, #120]	; 0x78
 800798c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	b29b      	uxth	r3, r3
 8007992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007996:	b29a      	uxth	r2, r3
 8007998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800799a:	801a      	strh	r2, [r3, #0]
 800799c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ae:	801a      	strh	r2, [r3, #0]
 80079b0:	e01a      	b.n	80079e8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d116      	bne.n	80079e8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	667b      	str	r3, [r7, #100]	; 0x64
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	461a      	mov	r2, r3
 80079cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079ce:	4413      	add	r3, r2
 80079d0:	667b      	str	r3, [r7, #100]	; 0x64
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	011a      	lsls	r2, r3, #4
 80079d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079da:	4413      	add	r3, r2
 80079dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079e0:	663b      	str	r3, [r7, #96]	; 0x60
 80079e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e4:	2200      	movs	r2, #0
 80079e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	677b      	str	r3, [r7, #116]	; 0x74
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d12b      	bne.n	8007a4e <HAL_PCD_EP_DB_Transmit+0x51e>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0a:	4413      	add	r3, r2
 8007a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	011a      	lsls	r2, r3, #4
 8007a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a16:	4413      	add	r3, r2
 8007a18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a32:	801a      	strh	r2, [r3, #0]
 8007a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	e017      	b.n	8007a7e <HAL_PCD_EP_DB_Transmit+0x54e>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	785b      	ldrb	r3, [r3, #1]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d113      	bne.n	8007a7e <HAL_PCD_EP_DB_Transmit+0x54e>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	461a      	mov	r2, r3
 8007a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a64:	4413      	add	r3, r2
 8007a66:	677b      	str	r3, [r7, #116]	; 0x74
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	011a      	lsls	r2, r3, #4
 8007a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a70:	4413      	add	r3, r2
 8007a72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a76:	673b      	str	r3, [r7, #112]	; 0x70
 8007a78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	4619      	mov	r1, r3
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f00b f896 	bl	8012bb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a8a:	88fb      	ldrh	r3, [r7, #6]
 8007a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f040 811a 	bne.w	8007cca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	441a      	add	r2, r3
 8007ac2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ace:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	8013      	strh	r3, [r2, #0]
 8007ada:	e0f6      	b.n	8007cca <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d121      	bne.n	8007b2a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	441a      	add	r2, r3
 8007b12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	f040 80ca 	bne.w	8007cca <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b3e:	441a      	add	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b4c:	441a      	add	r2, r3
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6a1a      	ldr	r2, [r3, #32]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d30b      	bcc.n	8007b76 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6a1a      	ldr	r2, [r3, #32]
 8007b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	621a      	str	r2, [r3, #32]
 8007b74:	e017      	b.n	8007ba6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d108      	bne.n	8007b90 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8007b7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007b8e:	e00a      	b.n	8007ba6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	657b      	str	r3, [r7, #84]	; 0x54
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d165      	bne.n	8007c80 <HAL_PCD_EP_DB_Transmit+0x750>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc8:	4413      	add	r3, r2
 8007bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	011a      	lsls	r2, r3, #4
 8007bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bda:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bea:	801a      	strh	r2, [r3, #0]
 8007bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf0:	2b3e      	cmp	r3, #62	; 0x3e
 8007bf2:	d91d      	bls.n	8007c30 <HAL_PCD_EP_DB_Transmit+0x700>
 8007bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c00:	f003 031f 	and.w	r3, r3, #31
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d102      	bne.n	8007c0e <HAL_PCD_EP_DB_Transmit+0x6de>
 8007c08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	029b      	lsls	r3, r3, #10
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	e041      	b.n	8007cb4 <HAL_PCD_EP_DB_Transmit+0x784>
 8007c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <HAL_PCD_EP_DB_Transmit+0x71e>
 8007c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e032      	b.n	8007cb4 <HAL_PCD_EP_DB_Transmit+0x784>
 8007c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d002      	beq.n	8007c68 <HAL_PCD_EP_DB_Transmit+0x738>
 8007c62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c64:	3301      	adds	r3, #1
 8007c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c6a:	881b      	ldrh	r3, [r3, #0]
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	029b      	lsls	r3, r3, #10
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c7c:	801a      	strh	r2, [r3, #0]
 8007c7e:	e019      	b.n	8007cb4 <HAL_PCD_EP_DB_Transmit+0x784>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	785b      	ldrb	r3, [r3, #1]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d115      	bne.n	8007cb4 <HAL_PCD_EP_DB_Transmit+0x784>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	461a      	mov	r2, r3
 8007c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c96:	4413      	add	r3, r2
 8007c98:	657b      	str	r3, [r7, #84]	; 0x54
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	011a      	lsls	r2, r3, #4
 8007ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8007caa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6818      	ldr	r0, [r3, #0]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	6959      	ldr	r1, [r3, #20]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	895a      	ldrh	r2, [r3, #10]
 8007cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f006 fd7e 	bl	800e7c6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce4:	82bb      	strh	r3, [r7, #20]
 8007ce6:	8abb      	ldrh	r3, [r7, #20]
 8007ce8:	f083 0310 	eor.w	r3, r3, #16
 8007cec:	82bb      	strh	r3, [r7, #20]
 8007cee:	8abb      	ldrh	r3, [r7, #20]
 8007cf0:	f083 0320 	eor.w	r3, r3, #32
 8007cf4:	82bb      	strh	r3, [r7, #20]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	441a      	add	r2, r3
 8007d04:	8abb      	ldrh	r3, [r7, #20]
 8007d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3790      	adds	r7, #144	; 0x90
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	607b      	str	r3, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	817b      	strh	r3, [r7, #10]
 8007d32:	4613      	mov	r3, r2
 8007d34:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007d36:	897b      	ldrh	r3, [r7, #10]
 8007d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00b      	beq.n	8007d5a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d42:	897b      	ldrh	r3, [r7, #10]
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	e009      	b.n	8007d6e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d5a:	897a      	ldrh	r2, [r7, #10]
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007d6e:	893b      	ldrh	r3, [r7, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d107      	bne.n	8007d84 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2200      	movs	r2, #0
 8007d78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	80da      	strh	r2, [r3, #6]
 8007d82:	e00b      	b.n	8007d9c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2201      	movs	r2, #1
 8007d88:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	0c1b      	lsrs	r3, r3, #16
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e272      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 8087 	beq.w	8007ed6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007dc8:	4b92      	ldr	r3, [pc, #584]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f003 030c 	and.w	r3, r3, #12
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d00c      	beq.n	8007dee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007dd4:	4b8f      	ldr	r3, [pc, #572]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d112      	bne.n	8007e06 <HAL_RCC_OscConfig+0x5e>
 8007de0:	4b8c      	ldr	r3, [pc, #560]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dec:	d10b      	bne.n	8007e06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dee:	4b89      	ldr	r3, [pc, #548]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d06c      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x12c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d168      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e24c      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0e:	d106      	bne.n	8007e1e <HAL_RCC_OscConfig+0x76>
 8007e10:	4b80      	ldr	r3, [pc, #512]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a7f      	ldr	r2, [pc, #508]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	e02e      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10c      	bne.n	8007e40 <HAL_RCC_OscConfig+0x98>
 8007e26:	4b7b      	ldr	r3, [pc, #492]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a7a      	ldr	r2, [pc, #488]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	4b78      	ldr	r3, [pc, #480]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a77      	ldr	r2, [pc, #476]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	e01d      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e48:	d10c      	bne.n	8007e64 <HAL_RCC_OscConfig+0xbc>
 8007e4a:	4b72      	ldr	r3, [pc, #456]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a71      	ldr	r2, [pc, #452]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e54:	6013      	str	r3, [r2, #0]
 8007e56:	4b6f      	ldr	r3, [pc, #444]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a6e      	ldr	r2, [pc, #440]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	e00b      	b.n	8007e7c <HAL_RCC_OscConfig+0xd4>
 8007e64:	4b6b      	ldr	r3, [pc, #428]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6a      	ldr	r2, [pc, #424]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	4b68      	ldr	r3, [pc, #416]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a67      	ldr	r2, [pc, #412]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d013      	beq.n	8007eac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e84:	f7fb fc06 	bl	8003694 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e8c:	f7fb fc02 	bl	8003694 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b64      	cmp	r3, #100	; 0x64
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e200      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e9e:	4b5d      	ldr	r3, [pc, #372]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0f0      	beq.n	8007e8c <HAL_RCC_OscConfig+0xe4>
 8007eaa:	e014      	b.n	8007ed6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eac:	f7fb fbf2 	bl	8003694 <HAL_GetTick>
 8007eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eb4:	f7fb fbee 	bl	8003694 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b64      	cmp	r3, #100	; 0x64
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e1ec      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ec6:	4b53      	ldr	r3, [pc, #332]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x10c>
 8007ed2:	e000      	b.n	8007ed6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d063      	beq.n	8007faa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ee2:	4b4c      	ldr	r3, [pc, #304]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f003 030c 	and.w	r3, r3, #12
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00b      	beq.n	8007f06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007eee:	4b49      	ldr	r3, [pc, #292]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f003 030c 	and.w	r3, r3, #12
 8007ef6:	2b08      	cmp	r3, #8
 8007ef8:	d11c      	bne.n	8007f34 <HAL_RCC_OscConfig+0x18c>
 8007efa:	4b46      	ldr	r3, [pc, #280]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d116      	bne.n	8007f34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f06:	4b43      	ldr	r3, [pc, #268]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_RCC_OscConfig+0x176>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d001      	beq.n	8007f1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e1c0      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f1e:	4b3d      	ldr	r3, [pc, #244]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	4939      	ldr	r1, [pc, #228]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f32:	e03a      	b.n	8007faa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d020      	beq.n	8007f7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f3c:	4b36      	ldr	r3, [pc, #216]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f42:	f7fb fba7 	bl	8003694 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f4a:	f7fb fba3 	bl	8003694 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e1a1      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f5c:	4b2d      	ldr	r3, [pc, #180]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f68:	4b2a      	ldr	r3, [pc, #168]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4927      	ldr	r1, [pc, #156]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	600b      	str	r3, [r1, #0]
 8007f7c:	e015      	b.n	8007faa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f7e:	4b26      	ldr	r3, [pc, #152]	; (8008018 <HAL_RCC_OscConfig+0x270>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f84:	f7fb fb86 	bl	8003694 <HAL_GetTick>
 8007f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8c:	f7fb fb82 	bl	8003694 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e180      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f9e:	4b1d      	ldr	r3, [pc, #116]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f0      	bne.n	8007f8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d03a      	beq.n	800802c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d019      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fbe:	4b17      	ldr	r3, [pc, #92]	; (800801c <HAL_RCC_OscConfig+0x274>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fc4:	f7fb fb66 	bl	8003694 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fcc:	f7fb fb62 	bl	8003694 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e160      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <HAL_RCC_OscConfig+0x26c>)
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	f003 0302 	and.w	r3, r3, #2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f0      	beq.n	8007fcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007fea:	2001      	movs	r0, #1
 8007fec:	f000 face 	bl	800858c <RCC_Delay>
 8007ff0:	e01c      	b.n	800802c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <HAL_RCC_OscConfig+0x274>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ff8:	f7fb fb4c 	bl	8003694 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ffe:	e00f      	b.n	8008020 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008000:	f7fb fb48 	bl	8003694 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d908      	bls.n	8008020 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e146      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000
 8008018:	42420000 	.word	0x42420000
 800801c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008020:	4b92      	ldr	r3, [pc, #584]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	f003 0302 	and.w	r3, r3, #2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1e9      	bne.n	8008000 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80a6 	beq.w	8008186 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800803e:	4b8b      	ldr	r3, [pc, #556]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10d      	bne.n	8008066 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800804a:	4b88      	ldr	r3, [pc, #544]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	4a87      	ldr	r2, [pc, #540]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008054:	61d3      	str	r3, [r2, #28]
 8008056:	4b85      	ldr	r3, [pc, #532]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008062:	2301      	movs	r3, #1
 8008064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008066:	4b82      	ldr	r3, [pc, #520]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	2b00      	cmp	r3, #0
 8008070:	d118      	bne.n	80080a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008072:	4b7f      	ldr	r3, [pc, #508]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a7e      	ldr	r2, [pc, #504]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 8008078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800807c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800807e:	f7fb fb09 	bl	8003694 <HAL_GetTick>
 8008082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008084:	e008      	b.n	8008098 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008086:	f7fb fb05 	bl	8003694 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b64      	cmp	r3, #100	; 0x64
 8008092:	d901      	bls.n	8008098 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e103      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008098:	4b75      	ldr	r3, [pc, #468]	; (8008270 <HAL_RCC_OscConfig+0x4c8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0f0      	beq.n	8008086 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d106      	bne.n	80080ba <HAL_RCC_OscConfig+0x312>
 80080ac:	4b6f      	ldr	r3, [pc, #444]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	4a6e      	ldr	r2, [pc, #440]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	6213      	str	r3, [r2, #32]
 80080b8:	e02d      	b.n	8008116 <HAL_RCC_OscConfig+0x36e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10c      	bne.n	80080dc <HAL_RCC_OscConfig+0x334>
 80080c2:	4b6a      	ldr	r3, [pc, #424]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	4a69      	ldr	r2, [pc, #420]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080c8:	f023 0301 	bic.w	r3, r3, #1
 80080cc:	6213      	str	r3, [r2, #32]
 80080ce:	4b67      	ldr	r3, [pc, #412]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	4a66      	ldr	r2, [pc, #408]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080d4:	f023 0304 	bic.w	r3, r3, #4
 80080d8:	6213      	str	r3, [r2, #32]
 80080da:	e01c      	b.n	8008116 <HAL_RCC_OscConfig+0x36e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	2b05      	cmp	r3, #5
 80080e2:	d10c      	bne.n	80080fe <HAL_RCC_OscConfig+0x356>
 80080e4:	4b61      	ldr	r3, [pc, #388]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	4a60      	ldr	r2, [pc, #384]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080ea:	f043 0304 	orr.w	r3, r3, #4
 80080ee:	6213      	str	r3, [r2, #32]
 80080f0:	4b5e      	ldr	r3, [pc, #376]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	4a5d      	ldr	r2, [pc, #372]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	6213      	str	r3, [r2, #32]
 80080fc:	e00b      	b.n	8008116 <HAL_RCC_OscConfig+0x36e>
 80080fe:	4b5b      	ldr	r3, [pc, #364]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	4a5a      	ldr	r2, [pc, #360]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008104:	f023 0301 	bic.w	r3, r3, #1
 8008108:	6213      	str	r3, [r2, #32]
 800810a:	4b58      	ldr	r3, [pc, #352]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	4a57      	ldr	r2, [pc, #348]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008110:	f023 0304 	bic.w	r3, r3, #4
 8008114:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d015      	beq.n	800814a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811e:	f7fb fab9 	bl	8003694 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008124:	e00a      	b.n	800813c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008126:	f7fb fab5 	bl	8003694 <HAL_GetTick>
 800812a:	4602      	mov	r2, r0
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	f241 3288 	movw	r2, #5000	; 0x1388
 8008134:	4293      	cmp	r3, r2
 8008136:	d901      	bls.n	800813c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	e0b1      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800813c:	4b4b      	ldr	r3, [pc, #300]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0ee      	beq.n	8008126 <HAL_RCC_OscConfig+0x37e>
 8008148:	e014      	b.n	8008174 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800814a:	f7fb faa3 	bl	8003694 <HAL_GetTick>
 800814e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008150:	e00a      	b.n	8008168 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008152:	f7fb fa9f 	bl	8003694 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008160:	4293      	cmp	r3, r2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e09b      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008168:	4b40      	ldr	r3, [pc, #256]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1ee      	bne.n	8008152 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d105      	bne.n	8008186 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800817a:	4b3c      	ldr	r3, [pc, #240]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4a3b      	ldr	r2, [pc, #236]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008184:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 8087 	beq.w	800829e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008190:	4b36      	ldr	r3, [pc, #216]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f003 030c 	and.w	r3, r3, #12
 8008198:	2b08      	cmp	r3, #8
 800819a:	d061      	beq.n	8008260 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d146      	bne.n	8008232 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a4:	4b33      	ldr	r3, [pc, #204]	; (8008274 <HAL_RCC_OscConfig+0x4cc>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081aa:	f7fb fa73 	bl	8003694 <HAL_GetTick>
 80081ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081b0:	e008      	b.n	80081c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081b2:	f7fb fa6f 	bl	8003694 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e06d      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80081c4:	4b29      	ldr	r3, [pc, #164]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f0      	bne.n	80081b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081d8:	d108      	bne.n	80081ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80081da:	4b24      	ldr	r3, [pc, #144]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	4921      	ldr	r1, [pc, #132]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081ec:	4b1f      	ldr	r3, [pc, #124]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a19      	ldr	r1, [r3, #32]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	430b      	orrs	r3, r1
 80081fe:	491b      	ldr	r1, [pc, #108]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008200:	4313      	orrs	r3, r2
 8008202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008204:	4b1b      	ldr	r3, [pc, #108]	; (8008274 <HAL_RCC_OscConfig+0x4cc>)
 8008206:	2201      	movs	r2, #1
 8008208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800820a:	f7fb fa43 	bl	8003694 <HAL_GetTick>
 800820e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008210:	e008      	b.n	8008224 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008212:	f7fb fa3f 	bl	8003694 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d901      	bls.n	8008224 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e03d      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008224:	4b11      	ldr	r3, [pc, #68]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0f0      	beq.n	8008212 <HAL_RCC_OscConfig+0x46a>
 8008230:	e035      	b.n	800829e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008232:	4b10      	ldr	r3, [pc, #64]	; (8008274 <HAL_RCC_OscConfig+0x4cc>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008238:	f7fb fa2c 	bl	8003694 <HAL_GetTick>
 800823c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800823e:	e008      	b.n	8008252 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008240:	f7fb fa28 	bl	8003694 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e026      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008252:	4b06      	ldr	r3, [pc, #24]	; (800826c <HAL_RCC_OscConfig+0x4c4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f0      	bne.n	8008240 <HAL_RCC_OscConfig+0x498>
 800825e:	e01e      	b.n	800829e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d107      	bne.n	8008278 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e019      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
 800826c:	40021000 	.word	0x40021000
 8008270:	40007000 	.word	0x40007000
 8008274:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008278:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <HAL_RCC_OscConfig+0x500>)
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	429a      	cmp	r2, r3
 800828a:	d106      	bne.n	800829a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d001      	beq.n	800829e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e000      	b.n	80082a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	40021000 	.word	0x40021000

080082ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e0d0      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082c0:	4b6a      	ldr	r3, [pc, #424]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d910      	bls.n	80082f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ce:	4b67      	ldr	r3, [pc, #412]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 0207 	bic.w	r2, r3, #7
 80082d6:	4965      	ldr	r1, [pc, #404]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	4313      	orrs	r3, r2
 80082dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	4b63      	ldr	r3, [pc, #396]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0307 	and.w	r3, r3, #7
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e0b8      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0302 	and.w	r3, r3, #2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d020      	beq.n	800833e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008308:	4b59      	ldr	r3, [pc, #356]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4a58      	ldr	r2, [pc, #352]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800830e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008312:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0308 	and.w	r3, r3, #8
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008320:	4b53      	ldr	r3, [pc, #332]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	4a52      	ldr	r2, [pc, #328]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008326:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800832a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800832c:	4b50      	ldr	r3, [pc, #320]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	494d      	ldr	r1, [pc, #308]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800833a:	4313      	orrs	r3, r2
 800833c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d040      	beq.n	80083cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d107      	bne.n	8008362 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008352:	4b47      	ldr	r3, [pc, #284]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d115      	bne.n	800838a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e07f      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d107      	bne.n	800837a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800836a:	4b41      	ldr	r3, [pc, #260]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d109      	bne.n	800838a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e073      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800837a:	4b3d      	ldr	r3, [pc, #244]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e06b      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800838a:	4b39      	ldr	r3, [pc, #228]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f023 0203 	bic.w	r2, r3, #3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	4936      	ldr	r1, [pc, #216]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008398:	4313      	orrs	r3, r2
 800839a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800839c:	f7fb f97a 	bl	8003694 <HAL_GetTick>
 80083a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083a2:	e00a      	b.n	80083ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083a4:	f7fb f976 	bl	8003694 <HAL_GetTick>
 80083a8:	4602      	mov	r2, r0
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	1ad3      	subs	r3, r2, r3
 80083ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e053      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ba:	4b2d      	ldr	r3, [pc, #180]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f003 020c 	and.w	r2, r3, #12
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d1eb      	bne.n	80083a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083cc:	4b27      	ldr	r3, [pc, #156]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d210      	bcs.n	80083fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083da:	4b24      	ldr	r3, [pc, #144]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f023 0207 	bic.w	r2, r3, #7
 80083e2:	4922      	ldr	r1, [pc, #136]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ea:	4b20      	ldr	r3, [pc, #128]	; (800846c <HAL_RCC_ClockConfig+0x1c0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d001      	beq.n	80083fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e032      	b.n	8008462 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0304 	and.w	r3, r3, #4
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008408:	4b19      	ldr	r3, [pc, #100]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	4916      	ldr	r1, [pc, #88]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008416:	4313      	orrs	r3, r2
 8008418:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0308 	and.w	r3, r3, #8
 8008422:	2b00      	cmp	r3, #0
 8008424:	d009      	beq.n	800843a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008426:	4b12      	ldr	r3, [pc, #72]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	490e      	ldr	r1, [pc, #56]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008436:	4313      	orrs	r3, r2
 8008438:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800843a:	f000 f821 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 800843e:	4602      	mov	r2, r0
 8008440:	4b0b      	ldr	r3, [pc, #44]	; (8008470 <HAL_RCC_ClockConfig+0x1c4>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	091b      	lsrs	r3, r3, #4
 8008446:	f003 030f 	and.w	r3, r3, #15
 800844a:	490a      	ldr	r1, [pc, #40]	; (8008474 <HAL_RCC_ClockConfig+0x1c8>)
 800844c:	5ccb      	ldrb	r3, [r1, r3]
 800844e:	fa22 f303 	lsr.w	r3, r2, r3
 8008452:	4a09      	ldr	r2, [pc, #36]	; (8008478 <HAL_RCC_ClockConfig+0x1cc>)
 8008454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <HAL_RCC_ClockConfig+0x1d0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7fb f8d8 	bl	8003610 <HAL_InitTick>

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40022000 	.word	0x40022000
 8008470:	40021000 	.word	0x40021000
 8008474:	0802f454 	.word	0x0802f454
 8008478:	20000010 	.word	0x20000010
 800847c:	20000014 	.word	0x20000014

08008480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	2300      	movs	r3, #0
 800848c:	60bb      	str	r3, [r7, #8]
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
 8008492:	2300      	movs	r3, #0
 8008494:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800849a:	4b1e      	ldr	r3, [pc, #120]	; (8008514 <HAL_RCC_GetSysClockFreq+0x94>)
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f003 030c 	and.w	r3, r3, #12
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d002      	beq.n	80084b0 <HAL_RCC_GetSysClockFreq+0x30>
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d003      	beq.n	80084b6 <HAL_RCC_GetSysClockFreq+0x36>
 80084ae:	e027      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80084b0:	4b19      	ldr	r3, [pc, #100]	; (8008518 <HAL_RCC_GetSysClockFreq+0x98>)
 80084b2:	613b      	str	r3, [r7, #16]
      break;
 80084b4:	e027      	b.n	8008506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	0c9b      	lsrs	r3, r3, #18
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	4a17      	ldr	r2, [pc, #92]	; (800851c <HAL_RCC_GetSysClockFreq+0x9c>)
 80084c0:	5cd3      	ldrb	r3, [r2, r3]
 80084c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d010      	beq.n	80084f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80084ce:	4b11      	ldr	r3, [pc, #68]	; (8008514 <HAL_RCC_GetSysClockFreq+0x94>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	0c5b      	lsrs	r3, r3, #17
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	4a11      	ldr	r2, [pc, #68]	; (8008520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80084da:	5cd3      	ldrb	r3, [r2, r3]
 80084dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <HAL_RCC_GetSysClockFreq+0x98>)
 80084e2:	fb03 f202 	mul.w	r2, r3, r2
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	e004      	b.n	80084fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <HAL_RCC_GetSysClockFreq+0xa4>)
 80084f4:	fb02 f303 	mul.w	r3, r2, r3
 80084f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	613b      	str	r3, [r7, #16]
      break;
 80084fe:	e002      	b.n	8008506 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_RCC_GetSysClockFreq+0x98>)
 8008502:	613b      	str	r3, [r7, #16]
      break;
 8008504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008506:	693b      	ldr	r3, [r7, #16]
}
 8008508:	4618      	mov	r0, r3
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40021000 	.word	0x40021000
 8008518:	007a1200 	.word	0x007a1200
 800851c:	0802f46c 	.word	0x0802f46c
 8008520:	0802f47c 	.word	0x0802f47c
 8008524:	003d0900 	.word	0x003d0900

08008528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <HAL_RCC_GetHCLKFreq+0x10>)
 800852e:	681b      	ldr	r3, [r3, #0]
}
 8008530:	4618      	mov	r0, r3
 8008532:	46bd      	mov	sp, r7
 8008534:	bc80      	pop	{r7}
 8008536:	4770      	bx	lr
 8008538:	20000010 	.word	0x20000010

0800853c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008540:	f7ff fff2 	bl	8008528 <HAL_RCC_GetHCLKFreq>
 8008544:	4602      	mov	r2, r0
 8008546:	4b05      	ldr	r3, [pc, #20]	; (800855c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	4903      	ldr	r1, [pc, #12]	; (8008560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008552:	5ccb      	ldrb	r3, [r1, r3]
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008558:	4618      	mov	r0, r3
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40021000 	.word	0x40021000
 8008560:	0802f464 	.word	0x0802f464

08008564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008568:	f7ff ffde 	bl	8008528 <HAL_RCC_GetHCLKFreq>
 800856c:	4602      	mov	r2, r0
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	0adb      	lsrs	r3, r3, #11
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	4903      	ldr	r1, [pc, #12]	; (8008588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800857a:	5ccb      	ldrb	r3, [r1, r3]
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40021000 	.word	0x40021000
 8008588:	0802f464 	.word	0x0802f464

0800858c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008594:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <RCC_Delay+0x34>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <RCC_Delay+0x38>)
 800859a:	fba2 2303 	umull	r2, r3, r2, r3
 800859e:	0a5b      	lsrs	r3, r3, #9
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	fb02 f303 	mul.w	r3, r2, r3
 80085a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80085a8:	bf00      	nop
  }
  while (Delay --);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1e5a      	subs	r2, r3, #1
 80085ae:	60fa      	str	r2, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1f9      	bne.n	80085a8 <RCC_Delay+0x1c>
}
 80085b4:	bf00      	nop
 80085b6:	bf00      	nop
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr
 80085c0:	20000010 	.word	0x20000010
 80085c4:	10624dd3 	.word	0x10624dd3

080085c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d07d      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80085e4:	2300      	movs	r3, #0
 80085e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085e8:	4b4f      	ldr	r3, [pc, #316]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10d      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085f4:	4b4c      	ldr	r3, [pc, #304]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	4a4b      	ldr	r2, [pc, #300]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fe:	61d3      	str	r3, [r2, #28]
 8008600:	4b49      	ldr	r3, [pc, #292]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008608:	60bb      	str	r3, [r7, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800860c:	2301      	movs	r3, #1
 800860e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008610:	4b46      	ldr	r3, [pc, #280]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d118      	bne.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800861c:	4b43      	ldr	r3, [pc, #268]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a42      	ldr	r2, [pc, #264]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008628:	f7fb f834 	bl	8003694 <HAL_GetTick>
 800862c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800862e:	e008      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008630:	f7fb f830 	bl	8003694 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b64      	cmp	r3, #100	; 0x64
 800863c:	d901      	bls.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e06d      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008642:	4b3a      	ldr	r3, [pc, #232]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0f0      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800864e:	4b36      	ldr	r3, [pc, #216]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008656:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d02e      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	429a      	cmp	r2, r3
 800866a:	d027      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800866c:	4b2e      	ldr	r3, [pc, #184]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008674:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008676:	4b2e      	ldr	r3, [pc, #184]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008678:	2201      	movs	r2, #1
 800867a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800867c:	4b2c      	ldr	r3, [pc, #176]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008682:	4a29      	ldr	r2, [pc, #164]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d014      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008692:	f7fa ffff 	bl	8003694 <HAL_GetTick>
 8008696:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008698:	e00a      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800869a:	f7fa fffb 	bl	8003694 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d901      	bls.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e036      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086b0:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d0ee      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086bc:	4b1a      	ldr	r3, [pc, #104]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4917      	ldr	r1, [pc, #92]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80086ce:	7dfb      	ldrb	r3, [r7, #23]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d105      	bne.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086d4:	4b14      	ldr	r3, [pc, #80]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086d6:	69db      	ldr	r3, [r3, #28]
 80086d8:	4a13      	ldr	r2, [pc, #76]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d008      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086ec:	4b0e      	ldr	r3, [pc, #56]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	490b      	ldr	r1, [pc, #44]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b00      	cmp	r3, #0
 8008708:	d008      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800870a:	4b07      	ldr	r3, [pc, #28]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	4904      	ldr	r1, [pc, #16]	; (8008728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008718:	4313      	orrs	r3, r2
 800871a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40021000 	.word	0x40021000
 800872c:	40007000 	.word	0x40007000
 8008730:	42420440 	.word	0x42420440

08008734 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b088      	sub	sp, #32
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800873c:	2300      	movs	r3, #0
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	2300      	movs	r3, #0
 8008742:	61fb      	str	r3, [r7, #28]
 8008744:	2300      	movs	r3, #0
 8008746:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	2300      	movs	r3, #0
 800874e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3b01      	subs	r3, #1
 8008754:	2b0f      	cmp	r3, #15
 8008756:	f200 80af 	bhi.w	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800875a:	a201      	add	r2, pc, #4	; (adr r2, 8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008837 	.word	0x08008837
 8008764:	0800889d 	.word	0x0800889d
 8008768:	080088b9 	.word	0x080088b9
 800876c:	08008827 	.word	0x08008827
 8008770:	080088b9 	.word	0x080088b9
 8008774:	080088b9 	.word	0x080088b9
 8008778:	080088b9 	.word	0x080088b9
 800877c:	0800882f 	.word	0x0800882f
 8008780:	080088b9 	.word	0x080088b9
 8008784:	080088b9 	.word	0x080088b9
 8008788:	080088b9 	.word	0x080088b9
 800878c:	080088b9 	.word	0x080088b9
 8008790:	080088b9 	.word	0x080088b9
 8008794:	080088b9 	.word	0x080088b9
 8008798:	080088b9 	.word	0x080088b9
 800879c:	080087a1 	.word	0x080087a1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80087a0:	4b4a      	ldr	r3, [pc, #296]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80087a6:	4b49      	ldr	r3, [pc, #292]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 8084 	beq.w	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	0c9b      	lsrs	r3, r3, #18
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	4a44      	ldr	r2, [pc, #272]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80087be:	5cd3      	ldrb	r3, [r2, r3]
 80087c0:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d015      	beq.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80087cc:	4b3f      	ldr	r3, [pc, #252]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	0c5b      	lsrs	r3, r3, #17
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	4a3f      	ldr	r2, [pc, #252]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80087d8:	5cd3      	ldrb	r3, [r2, r3]
 80087da:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80087e6:	4a3c      	ldr	r2, [pc, #240]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	fb02 f303 	mul.w	r3, r2, r3
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	e004      	b.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	4a38      	ldr	r2, [pc, #224]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8008802:	4b32      	ldr	r3, [pc, #200]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800880a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800880e:	d102      	bne.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8008814:	e052      	b.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4a31      	ldr	r2, [pc, #196]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 800881c:	fba2 2303 	umull	r2, r3, r2, r3
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	61bb      	str	r3, [r7, #24]
      break;
 8008824:	e04a      	b.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8008826:	f7ff fe2b 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 800882a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800882c:	e049      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800882e:	f7ff fe27 	bl	8008480 <HAL_RCC_GetSysClockFreq>
 8008832:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8008834:	e045      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8008836:	4b25      	ldr	r3, [pc, #148]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008846:	d108      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8008852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008856:	61bb      	str	r3, [r7, #24]
 8008858:	e01f      	b.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008864:	d109      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008866:	4b19      	ldr	r3, [pc, #100]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8008872:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	e00f      	b.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008884:	d11c      	bne.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008886:	4b11      	ldr	r3, [pc, #68]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d016      	beq.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8008892:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008896:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8008898:	e012      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800889a:	e011      	b.n	80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800889c:	f7ff fe62 	bl	8008564 <HAL_RCC_GetPCLK2Freq>
 80088a0:	4602      	mov	r2, r0
 80088a2:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	0b9b      	lsrs	r3, r3, #14
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	3301      	adds	r3, #1
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b4:	61bb      	str	r3, [r7, #24]
      break;
 80088b6:	e004      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80088b8:	bf00      	nop
 80088ba:	e002      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80088bc:	bf00      	nop
 80088be:	e000      	b.n	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80088c0:	bf00      	nop
    }
  }
  return (frequency);
 80088c2:	69bb      	ldr	r3, [r7, #24]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3720      	adds	r7, #32
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40021000 	.word	0x40021000
 80088d0:	0802f480 	.word	0x0802f480
 80088d4:	0802f490 	.word	0x0802f490
 80088d8:	007a1200 	.word	0x007a1200
 80088dc:	003d0900 	.word	0x003d0900
 80088e0:	aaaaaaab 	.word	0xaaaaaaab

080088e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e022      	b.n	800893c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d105      	bne.n	800890e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7fa fba7 	bl	800305c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2203      	movs	r2, #3
 8008912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f814 	bl	8008944 <HAL_SD_InitCard>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e00a      	b.n	800893c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008944:	b5b0      	push	{r4, r5, r7, lr}
 8008946:	b08e      	sub	sp, #56	; 0x38
 8008948:	af04      	add	r7, sp, #16
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800894c:	2300      	movs	r3, #0
 800894e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008954:	2300      	movs	r3, #0
 8008956:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800895c:	2300      	movs	r3, #0
 800895e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008960:	2376      	movs	r3, #118	; 0x76
 8008962:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681d      	ldr	r5, [r3, #0]
 8008968:	466c      	mov	r4, sp
 800896a:	f107 0314 	add.w	r3, r7, #20
 800896e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008976:	f107 0308 	add.w	r3, r7, #8
 800897a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800897c:	4628      	mov	r0, r5
 800897e:	f002 feb5 	bl	800b6ec <SDIO_Init>
 8008982:	4603      	mov	r3, r0
 8008984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e04f      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008994:	4b29      	ldr	r3, [pc, #164]	; (8008a3c <HAL_SD_InitCard+0xf8>)
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f002 feea 	bl	800b778 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80089a4:	4b25      	ldr	r3, [pc, #148]	; (8008a3c <HAL_SD_InitCard+0xf8>)
 80089a6:	2201      	movs	r2, #1
 80089a8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80089aa:	2002      	movs	r0, #2
 80089ac:	f7fa fe7c 	bl	80036a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 ff03 	bl	80097bc <SD_PowerON>
 80089b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e02e      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fe22 	bl	8009620 <SD_InitCard>
 80089dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e01b      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a04:	4618      	mov	r0, r3
 8008a06:	f002 ff43 	bl	800b890 <SDMMC_CmdBlockLength>
 8008a0a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00f      	beq.n	8008a32 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <HAL_SD_InitCard+0xfc>)
 8008a18:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3728      	adds	r7, #40	; 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a3c:	423000a0 	.word	0x423000a0
 8008a40:	004005ff 	.word	0x004005ff

08008a44 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b092      	sub	sp, #72	; 0x48
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
 8008a50:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008a52:	f7fa fe1f 	bl	8003694 <HAL_GetTick>
 8008a56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d107      	bne.n	8008a76 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e1bd      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	f040 81b0 	bne.w	8008de4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	441a      	add	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d907      	bls.n	8008aa8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e1a4      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d002      	beq.n	8008ac6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	025b      	lsls	r3, r3, #9
 8008ac4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aca:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	025b      	lsls	r3, r3, #9
 8008ad0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008ad2:	2390      	movs	r3, #144	; 0x90
 8008ad4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f107 0214 	add.w	r2, r7, #20
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f002 fea4 	bl	800b83a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d90a      	bls.n	8008b0e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2202      	movs	r2, #2
 8008afc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b04:	4618      	mov	r0, r3
 8008b06:	f002 ff07 	bl	800b918 <SDMMC_CmdReadMultiBlock>
 8008b0a:	6478      	str	r0, [r7, #68]	; 0x44
 8008b0c:	e009      	b.n	8008b22 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f002 feda 	bl	800b8d4 <SDMMC_CmdReadSingleBlock>
 8008b20:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d012      	beq.n	8008b4e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a7a      	ldr	r2, [pc, #488]	; (8008d18 <HAL_SD_ReadBlocks+0x2d4>)
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b36:	431a      	orrs	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e151      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008b52:	e061      	b.n	8008c18 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d03c      	beq.n	8008bdc <HAL_SD_ReadBlocks+0x198>
 8008b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d039      	beq.n	8008bdc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008b68:	2300      	movs	r3, #0
 8008b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b6c:	e033      	b.n	8008bd6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 fde4 	bl	800b740 <SDIO_ReadFIFO>
 8008b78:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b84:	3301      	adds	r3, #1
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	0a1b      	lsrs	r3, r3, #8
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b96:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	0c1b      	lsrs	r3, r3, #16
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbc:	0e1b      	lsrs	r3, r3, #24
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd8:	2b07      	cmp	r3, #7
 8008bda:	d9c8      	bls.n	8008b6e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008bdc:	f7fa fd5a 	bl	8003694 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d902      	bls.n	8008bf2 <HAL_SD_ReadBlocks+0x1ae>
 8008bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d112      	bne.n	8008c18 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a48      	ldr	r2, [pc, #288]	; (8008d18 <HAL_SD_ReadBlocks+0x2d4>)
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e0ec      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c1e:	f240 332a 	movw	r3, #810	; 0x32a
 8008c22:	4013      	ands	r3, r2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d095      	beq.n	8008b54 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d022      	beq.n	8008c7c <HAL_SD_ReadBlocks+0x238>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d91f      	bls.n	8008c7c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d01b      	beq.n	8008c7c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 fecb 	bl	800b9e4 <SDMMC_CmdStopTransfer>
 8008c4e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d012      	beq.n	8008c7c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a2f      	ldr	r2, [pc, #188]	; (8008d18 <HAL_SD_ReadBlocks+0x2d4>)
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c64:	431a      	orrs	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e0ba      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d012      	beq.n	8008cb0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a22      	ldr	r2, [pc, #136]	; (8008d18 <HAL_SD_ReadBlocks+0x2d4>)
 8008c90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	f043 0208 	orr.w	r2, r3, #8
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0a0      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d012      	beq.n	8008ce4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a15      	ldr	r2, [pc, #84]	; (8008d18 <HAL_SD_ReadBlocks+0x2d4>)
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	f043 0202 	orr.w	r2, r3, #2
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e086      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cea:	f003 0320 	and.w	r3, r3, #32
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d063      	beq.n	8008dba <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a08      	ldr	r2, [pc, #32]	; (8008d18 <HAL_SD_ReadBlocks+0x2d4>)
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfe:	f043 0220 	orr.w	r2, r3, #32
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e06c      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
 8008d18:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f002 fd0d 	bl	800b740 <SDIO_ReadFIFO>
 8008d26:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d2e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d32:	3301      	adds	r3, #1
 8008d34:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	0a1b      	lsrs	r3, r3, #8
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d44:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d48:	3301      	adds	r3, #1
 8008d4a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	0c1b      	lsrs	r3, r3, #16
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d5e:	3301      	adds	r3, #1
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d64:	3b01      	subs	r3, #1
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	0e1b      	lsrs	r3, r3, #24
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d70:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	3301      	adds	r3, #1
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008d7e:	f7fa fc89 	bl	8003694 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d902      	bls.n	8008d94 <HAL_SD_ReadBlocks+0x350>
 8008d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d112      	bne.n	8008dba <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <HAL_SD_ReadBlocks+0x3b8>)
 8008d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	e01b      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <HAL_SD_ReadBlocks+0x38a>
 8008dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1a6      	bne.n	8008d1c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	e006      	b.n	8008df2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
  }
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3748      	adds	r7, #72	; 0x48
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	004005ff 	.word	0x004005ff

08008e00 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b092      	sub	sp, #72	; 0x48
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008e0e:	f7fa fc41 	bl	8003694 <HAL_GetTick>
 8008e12:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d107      	bne.n	8008e32 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e26:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e166      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	f040 8159 	bne.w	80090f2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008e46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	441a      	add	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d907      	bls.n	8008e64 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e14d      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2203      	movs	r2, #3
 8008e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2200      	movs	r2, #0
 8008e72:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d002      	beq.n	8008e82 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7e:	025b      	lsls	r3, r3, #9
 8008e80:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e82:	f04f 33ff 	mov.w	r3, #4294967295
 8008e86:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	025b      	lsls	r3, r3, #9
 8008e8c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008e8e:	2390      	movs	r3, #144	; 0x90
 8008e90:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008e92:	2300      	movs	r3, #0
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f107 0218 	add.w	r2, r7, #24
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f002 fcc6 	bl	800b83a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d90a      	bls.n	8008eca <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f002 fd6d 	bl	800b9a0 <SDMMC_CmdWriteMultiBlock>
 8008ec6:	6478      	str	r0, [r7, #68]	; 0x44
 8008ec8:	e009      	b.n	8008ede <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2210      	movs	r2, #16
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f002 fd40 	bl	800b95c <SDMMC_CmdWriteSingleBlock>
 8008edc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d012      	beq.n	8008f0a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a87      	ldr	r2, [pc, #540]	; (8009108 <HAL_SD_WriteBlocks+0x308>)
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e0fa      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008f0e:	e065      	b.n	8008fdc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d040      	beq.n	8008fa0 <HAL_SD_WriteBlocks+0x1a0>
 8008f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d03d      	beq.n	8008fa0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008f24:	2300      	movs	r3, #0
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40
 8008f28:	e037      	b.n	8008f9a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f32:	3301      	adds	r3, #1
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	021a      	lsls	r2, r3, #8
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f50:	3b01      	subs	r3, #1
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	041a      	lsls	r2, r3, #16
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f62:	3301      	adds	r3, #1
 8008f64:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	061a      	lsls	r2, r3, #24
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f80:	3b01      	subs	r3, #1
 8008f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f107 0214 	add.w	r2, r7, #20
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f002 fbe2 	bl	800b758 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f96:	3301      	adds	r3, #1
 8008f98:	643b      	str	r3, [r7, #64]	; 0x40
 8008f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9c:	2b07      	cmp	r3, #7
 8008f9e:	d9c4      	bls.n	8008f2a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008fa0:	f7fa fb78 	bl	8003694 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d902      	bls.n	8008fb6 <HAL_SD_WriteBlocks+0x1b6>
 8008fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d112      	bne.n	8008fdc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a53      	ldr	r2, [pc, #332]	; (8009108 <HAL_SD_WriteBlocks+0x308>)
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e091      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fe2:	f240 331a 	movw	r3, #794	; 0x31a
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d091      	beq.n	8008f10 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d022      	beq.n	8009040 <HAL_SD_WriteBlocks+0x240>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d91f      	bls.n	8009040 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009004:	2b03      	cmp	r3, #3
 8009006:	d01b      	beq.n	8009040 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f002 fce9 	bl	800b9e4 <SDMMC_CmdStopTransfer>
 8009012:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009016:	2b00      	cmp	r3, #0
 8009018:	d012      	beq.n	8009040 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a3a      	ldr	r2, [pc, #232]	; (8009108 <HAL_SD_WriteBlocks+0x308>)
 8009020:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009028:	431a      	orrs	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e05f      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009046:	f003 0308 	and.w	r3, r3, #8
 800904a:	2b00      	cmp	r3, #0
 800904c:	d012      	beq.n	8009074 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a2d      	ldr	r2, [pc, #180]	; (8009108 <HAL_SD_WriteBlocks+0x308>)
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	f043 0208 	orr.w	r2, r3, #8
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e045      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d012      	beq.n	80090a8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a20      	ldr	r2, [pc, #128]	; (8009108 <HAL_SD_WriteBlocks+0x308>)
 8009088:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	f043 0202 	orr.w	r2, r3, #2
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e02b      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	f003 0310 	and.w	r3, r3, #16
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d012      	beq.n	80090dc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a13      	ldr	r2, [pc, #76]	; (8009108 <HAL_SD_WriteBlocks+0x308>)
 80090bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c2:	f043 0210 	orr.w	r2, r3, #16
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e011      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80090e4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	e006      	b.n	8009100 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
  }
}
 8009100:	4618      	mov	r0, r3
 8009102:	3748      	adds	r7, #72	; 0x48
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	004005ff 	.word	0x004005ff

0800910c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800911a:	0f9b      	lsrs	r3, r3, #30
 800911c:	b2da      	uxtb	r2, r3
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009126:	0e9b      	lsrs	r3, r3, #26
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 030f 	and.w	r3, r3, #15
 800912e:	b2da      	uxtb	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009138:	0e1b      	lsrs	r3, r3, #24
 800913a:	b2db      	uxtb	r3, r3
 800913c:	f003 0303 	and.w	r3, r3, #3
 8009140:	b2da      	uxtb	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914a:	0c1b      	lsrs	r3, r3, #16
 800914c:	b2da      	uxtb	r2, r3
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009156:	0a1b      	lsrs	r3, r3, #8
 8009158:	b2da      	uxtb	r2, r3
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009162:	b2da      	uxtb	r2, r3
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800916c:	0d1b      	lsrs	r3, r3, #20
 800916e:	b29a      	uxth	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009178:	0c1b      	lsrs	r3, r3, #16
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f003 030f 	and.w	r3, r3, #15
 8009180:	b2da      	uxtb	r2, r3
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800918a:	0bdb      	lsrs	r3, r3, #15
 800918c:	b2db      	uxtb	r3, r3
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800919c:	0b9b      	lsrs	r3, r3, #14
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091ae:	0b5b      	lsrs	r3, r3, #13
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091c0:	0b1b      	lsrs	r3, r3, #12
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	b2da      	uxtb	r2, r3
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2200      	movs	r2, #0
 80091d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d163      	bne.n	80092a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091e0:	009a      	lsls	r2, r3, #2
 80091e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091e6:	4013      	ands	r3, r2
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80091ec:	0f92      	lsrs	r2, r2, #30
 80091ee:	431a      	orrs	r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091f8:	0edb      	lsrs	r3, r3, #27
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	b2da      	uxtb	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800920a:	0e1b      	lsrs	r3, r3, #24
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	b2da      	uxtb	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921c:	0d5b      	lsrs	r3, r3, #21
 800921e:	b2db      	uxtb	r3, r3
 8009220:	f003 0307 	and.w	r3, r3, #7
 8009224:	b2da      	uxtb	r2, r3
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800922e:	0c9b      	lsrs	r3, r3, #18
 8009230:	b2db      	uxtb	r3, r3
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	b2da      	uxtb	r2, r3
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009240:	0bdb      	lsrs	r3, r3, #15
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 0307 	and.w	r3, r3, #7
 8009248:	b2da      	uxtb	r2, r3
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	7e1b      	ldrb	r3, [r3, #24]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 0307 	and.w	r3, r3, #7
 8009262:	3302      	adds	r3, #2
 8009264:	2201      	movs	r2, #1
 8009266:	fa02 f303 	lsl.w	r3, r2, r3
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800926e:	fb03 f202 	mul.w	r2, r3, r2
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	7a1b      	ldrb	r3, [r3, #8]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	2201      	movs	r2, #1
 8009282:	409a      	lsls	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009290:	0a52      	lsrs	r2, r2, #9
 8009292:	fb03 f202 	mul.w	r2, r3, r2
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092a0:	661a      	str	r2, [r3, #96]	; 0x60
 80092a2:	e031      	b.n	8009308 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d11d      	bne.n	80092e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b0:	041b      	lsls	r3, r3, #16
 80092b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ba:	0c1b      	lsrs	r3, r3, #16
 80092bc:	431a      	orrs	r2, r3
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	3301      	adds	r3, #1
 80092c8:	029a      	lsls	r2, r3, #10
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	661a      	str	r2, [r3, #96]	; 0x60
 80092e6:	e00f      	b.n	8009308 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a58      	ldr	r2, [pc, #352]	; (8009450 <HAL_SD_GetCardCSD+0x344>)
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e09d      	b.n	8009444 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930c:	0b9b      	lsrs	r3, r3, #14
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931e:	09db      	lsrs	r3, r3, #7
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009326:	b2da      	uxtb	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009336:	b2da      	uxtb	r2, r3
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009340:	0fdb      	lsrs	r3, r3, #31
 8009342:	b2da      	uxtb	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934c:	0f5b      	lsrs	r3, r3, #29
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 0303 	and.w	r3, r3, #3
 8009354:	b2da      	uxtb	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935e:	0e9b      	lsrs	r3, r3, #26
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	b2da      	uxtb	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009370:	0d9b      	lsrs	r3, r3, #22
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009382:	0d5b      	lsrs	r3, r3, #21
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	b2da      	uxtb	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939e:	0c1b      	lsrs	r3, r3, #16
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b2:	0bdb      	lsrs	r3, r3, #15
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c6:	0b9b      	lsrs	r3, r3, #14
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	0b5b      	lsrs	r3, r3, #13
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ee:	0b1b      	lsrs	r3, r3, #12
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009402:	0a9b      	lsrs	r3, r3, #10
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	b2da      	uxtb	r2, r3
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009416:	0a1b      	lsrs	r3, r3, #8
 8009418:	b2db      	uxtb	r3, r3
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	b2da      	uxtb	r2, r3
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	b2db      	uxtb	r3, r3
 800942e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009432:	b2da      	uxtb	r2, r3
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	bc80      	pop	{r7}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	004005ff 	.word	0x004005ff

08009454 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr
	...

080094ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80094ac:	b5b0      	push	{r4, r5, r7, lr}
 80094ae:	b08e      	sub	sp, #56	; 0x38
 80094b0:	af04      	add	r7, sp, #16
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2203      	movs	r2, #3
 80094c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d02e      	beq.n	800952a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d2:	d106      	bne.n	80094e2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	639a      	str	r2, [r3, #56]	; 0x38
 80094e0:	e029      	b.n	8009536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e8:	d10a      	bne.n	8009500 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa1c 	bl	8009928 <SD_WideBus_Enable>
 80094f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	431a      	orrs	r2, r3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38
 80094fe:	e01a      	b.n	8009536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10a      	bne.n	800951c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa59 	bl	80099be <SD_WideBus_Disable>
 800950c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	639a      	str	r2, [r3, #56]	; 0x38
 800951a:	e00c      	b.n	8009536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	639a      	str	r2, [r3, #56]	; 0x38
 8009528:	e005      	b.n	8009536 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a26      	ldr	r2, [pc, #152]	; (80095dc <HAL_SD_ConfigWideBusOperation+0x130>)
 8009544:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009554:	e01f      	b.n	8009596 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681d      	ldr	r5, [r3, #0]
 800957c:	466c      	mov	r4, sp
 800957e:	f107 0314 	add.w	r3, r7, #20
 8009582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009590:	4628      	mov	r0, r5
 8009592:	f002 f8ab 	bl	800b6ec <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800959e:	4618      	mov	r0, r3
 80095a0:	f002 f976 	bl	800b890 <SDMMC_CmdBlockLength>
 80095a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00c      	beq.n	80095c6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a0a      	ldr	r2, [pc, #40]	; (80095dc <HAL_SD_ConfigWideBusOperation+0x130>)
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	431a      	orrs	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80095ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3728      	adds	r7, #40	; 0x28
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bdb0      	pop	{r4, r5, r7, pc}
 80095da:	bf00      	nop
 80095dc:	004005ff 	.word	0x004005ff

080095e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80095ec:	f107 030c 	add.w	r3, r7, #12
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 f970 	bl	80098d8 <SD_SendStatus>
 80095f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	0a5b      	lsrs	r3, r3, #9
 8009610:	f003 030f 	and.w	r3, r3, #15
 8009614:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009616:	693b      	ldr	r3, [r7, #16]
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009620:	b5b0      	push	{r4, r5, r7, lr}
 8009622:	b094      	sub	sp, #80	; 0x50
 8009624:	af04      	add	r7, sp, #16
 8009626:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009628:	2301      	movs	r3, #1
 800962a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4618      	mov	r0, r3
 8009632:	f002 f8ae 	bl	800b792 <SDIO_GetPowerState>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800963c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009640:	e0b8      	b.n	80097b4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	2b03      	cmp	r3, #3
 8009648:	d02f      	beq.n	80096aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f002 fad2 	bl	800bbf8 <SDMMC_CmdSendCID>
 8009654:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <SD_InitCard+0x40>
    {
      return errorstate;
 800965c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965e:	e0a9      	b.n	80097b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2100      	movs	r1, #0
 8009666:	4618      	mov	r0, r3
 8009668:	f002 f8d5 	bl	800b816 <SDIO_GetResponse>
 800966c:	4602      	mov	r2, r0
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2104      	movs	r1, #4
 8009678:	4618      	mov	r0, r3
 800967a:	f002 f8cc 	bl	800b816 <SDIO_GetResponse>
 800967e:	4602      	mov	r2, r0
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2108      	movs	r1, #8
 800968a:	4618      	mov	r0, r3
 800968c:	f002 f8c3 	bl	800b816 <SDIO_GetResponse>
 8009690:	4602      	mov	r2, r0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	210c      	movs	r1, #12
 800969c:	4618      	mov	r0, r3
 800969e:	f002 f8ba 	bl	800b816 <SDIO_GetResponse>
 80096a2:	4602      	mov	r2, r0
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d00d      	beq.n	80096ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f107 020e 	add.w	r2, r7, #14
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f002 fad8 	bl	800bc72 <SDMMC_CmdSetRelAdd>
 80096c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80096c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <SD_InitCard+0xae>
    {
      return errorstate;
 80096ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096cc:	e072      	b.n	80097b4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d036      	beq.n	8009744 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80096d6:	89fb      	ldrh	r3, [r7, #14]
 80096d8:	461a      	mov	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	4619      	mov	r1, r3
 80096ea:	4610      	mov	r0, r2
 80096ec:	f002 faa2 	bl	800bc34 <SDMMC_CmdSendCSD>
 80096f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80096f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80096f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096fa:	e05b      	b.n	80097b4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2100      	movs	r1, #0
 8009702:	4618      	mov	r0, r3
 8009704:	f002 f887 	bl	800b816 <SDIO_GetResponse>
 8009708:	4602      	mov	r2, r0
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2104      	movs	r1, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f002 f87e 	bl	800b816 <SDIO_GetResponse>
 800971a:	4602      	mov	r2, r0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2108      	movs	r1, #8
 8009726:	4618      	mov	r0, r3
 8009728:	f002 f875 	bl	800b816 <SDIO_GetResponse>
 800972c:	4602      	mov	r2, r0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	210c      	movs	r1, #12
 8009738:	4618      	mov	r0, r3
 800973a:	f002 f86c 	bl	800b816 <SDIO_GetResponse>
 800973e:	4602      	mov	r2, r0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2104      	movs	r1, #4
 800974a:	4618      	mov	r0, r3
 800974c:	f002 f863 	bl	800b816 <SDIO_GetResponse>
 8009750:	4603      	mov	r3, r0
 8009752:	0d1a      	lsrs	r2, r3, #20
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009758:	f107 0310 	add.w	r3, r7, #16
 800975c:	4619      	mov	r1, r3
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7ff fcd4 	bl	800910c <HAL_SD_GetCardCSD>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800976a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800976e:	e021      	b.n	80097b4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009778:	041b      	lsls	r3, r3, #16
 800977a:	2200      	movs	r2, #0
 800977c:	461c      	mov	r4, r3
 800977e:	4615      	mov	r5, r2
 8009780:	4622      	mov	r2, r4
 8009782:	462b      	mov	r3, r5
 8009784:	4608      	mov	r0, r1
 8009786:	f002 f94f 	bl	800ba28 <SDMMC_CmdSelDesel>
 800978a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800978c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <SD_InitCard+0x176>
  {
    return errorstate;
 8009792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009794:	e00e      	b.n	80097b4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681d      	ldr	r5, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	466c      	mov	r4, sp
 800979e:	f103 0210 	add.w	r2, r3, #16
 80097a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80097a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097a8:	3304      	adds	r3, #4
 80097aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097ac:	4628      	mov	r0, r5
 80097ae:	f001 ff9d 	bl	800b6ec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80097b2:	2300      	movs	r3, #0
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3740      	adds	r7, #64	; 0x40
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bdb0      	pop	{r4, r5, r7, pc}

080097bc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	2300      	movs	r3, #0
 80097ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f002 f94a 	bl	800ba6e <SDMMC_CmdGoIdleState>
 80097da:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	e072      	b.n	80098cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f002 f95d 	bl	800baaa <SDMMC_CmdOperCond>
 80097f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00d      	beq.n	8009814 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f002 f933 	bl	800ba6e <SDMMC_CmdGoIdleState>
 8009808:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	e05b      	b.n	80098cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800981e:	2b01      	cmp	r3, #1
 8009820:	d137      	bne.n	8009892 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2100      	movs	r1, #0
 8009828:	4618      	mov	r0, r3
 800982a:	f002 f95d 	bl	800bae8 <SDMMC_CmdAppCommand>
 800982e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d02d      	beq.n	8009892 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009836:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800983a:	e047      	b.n	80098cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2100      	movs	r1, #0
 8009842:	4618      	mov	r0, r3
 8009844:	f002 f950 	bl	800bae8 <SDMMC_CmdAppCommand>
 8009848:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <SD_PowerON+0x98>
    {
      return errorstate;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	e03b      	b.n	80098cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	491e      	ldr	r1, [pc, #120]	; (80098d4 <SD_PowerON+0x118>)
 800985a:	4618      	mov	r0, r3
 800985c:	f002 f966 	bl	800bb2c <SDMMC_CmdAppOperCommand>
 8009860:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009868:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800986c:	e02e      	b.n	80098cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2100      	movs	r1, #0
 8009874:	4618      	mov	r0, r3
 8009876:	f001 ffce 	bl	800b816 <SDIO_GetResponse>
 800987a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	0fdb      	lsrs	r3, r3, #31
 8009880:	2b01      	cmp	r3, #1
 8009882:	d101      	bne.n	8009888 <SD_PowerON+0xcc>
 8009884:	2301      	movs	r3, #1
 8009886:	e000      	b.n	800988a <SD_PowerON+0xce>
 8009888:	2300      	movs	r3, #0
 800988a:	613b      	str	r3, [r7, #16]

    count++;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	3301      	adds	r3, #1
 8009890:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009898:	4293      	cmp	r3, r2
 800989a:	d802      	bhi.n	80098a2 <SD_PowerON+0xe6>
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d0cc      	beq.n	800983c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d902      	bls.n	80098b2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80098ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098b0:	e00c      	b.n	80098cc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	645a      	str	r2, [r3, #68]	; 0x44
 80098c2:	e002      	b.n	80098ca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	c1100000 	.word	0xc1100000

080098d8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80098e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098ec:	e018      	b.n	8009920 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f002 f9da 	bl	800bcb4 <SDMMC_CmdSendStatus>
 8009900:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e009      	b.n	8009920 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f001 ff7f 	bl	800b816 <SDIO_GetResponse>
 8009918:	4602      	mov	r2, r0
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]
 8009934:	2300      	movs	r3, #0
 8009936:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2100      	movs	r1, #0
 800993e:	4618      	mov	r0, r3
 8009940:	f001 ff69 	bl	800b816 <SDIO_GetResponse>
 8009944:	4603      	mov	r3, r0
 8009946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800994a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800994e:	d102      	bne.n	8009956 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009954:	e02f      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009956:	f107 030c 	add.w	r3, r7, #12
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f879 	bl	8009a54 <SD_FindSCR>
 8009962:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	e023      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d01c      	beq.n	80099b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009980:	041b      	lsls	r3, r3, #16
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f002 f8af 	bl	800bae8 <SDMMC_CmdAppCommand>
 800998a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	e00f      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2102      	movs	r1, #2
 800999c:	4618      	mov	r0, r3
 800999e:	f002 f8e8 	bl	800bb72 <SDMMC_CmdBusWidth>
 80099a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	e003      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	e001      	b.n	80099b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b086      	sub	sp, #24
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80099c6:	2300      	movs	r3, #0
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2100      	movs	r1, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f001 ff1e 	bl	800b816 <SDIO_GetResponse>
 80099da:	4603      	mov	r3, r0
 80099dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099e4:	d102      	bne.n	80099ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80099e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099ea:	e02f      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80099ec:	f107 030c 	add.w	r3, r7, #12
 80099f0:	4619      	mov	r1, r3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f82e 	bl	8009a54 <SD_FindSCR>
 80099f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	e023      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01c      	beq.n	8009a48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a16:	041b      	lsls	r3, r3, #16
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f002 f864 	bl	800bae8 <SDMMC_CmdAppCommand>
 8009a20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	e00f      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2100      	movs	r1, #0
 8009a32:	4618      	mov	r0, r3
 8009a34:	f002 f89d 	bl	800bb72 <SDMMC_CmdBusWidth>
 8009a38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	e003      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e001      	b.n	8009a4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b08f      	sub	sp, #60	; 0x3c
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009a5e:	f7f9 fe19 	bl	8003694 <HAL_GetTick>
 8009a62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60bb      	str	r3, [r7, #8]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2108      	movs	r1, #8
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f001 ff08 	bl	800b890 <SDMMC_CmdBlockLength>
 8009a80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	e0b2      	b.n	8009bf2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a94:	041b      	lsls	r3, r3, #16
 8009a96:	4619      	mov	r1, r3
 8009a98:	4610      	mov	r0, r2
 8009a9a:	f002 f825 	bl	800bae8 <SDMMC_CmdAppCommand>
 8009a9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <SD_FindSCR+0x56>
  {
    return errorstate;
 8009aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa8:	e0a3      	b.n	8009bf2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8009aae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009ab4:	2330      	movs	r3, #48	; 0x30
 8009ab6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f107 0210 	add.w	r2, r7, #16
 8009acc:	4611      	mov	r1, r2
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f001 feb3 	bl	800b83a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f002 f86c 	bl	800bbb6 <SDMMC_CmdSendSCR>
 8009ade:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d02a      	beq.n	8009b3c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae8:	e083      	b.n	8009bf2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00f      	beq.n	8009b18 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	f107 0208 	add.w	r2, r7, #8
 8009b04:	18d4      	adds	r4, r2, r3
 8009b06:	4608      	mov	r0, r1
 8009b08:	f001 fe1a 	bl	800b740 <SDIO_ReadFIFO>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	6023      	str	r3, [r4, #0]
      index++;
 8009b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b12:	3301      	adds	r3, #1
 8009b14:	637b      	str	r3, [r7, #52]	; 0x34
 8009b16:	e006      	b.n	8009b26 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d012      	beq.n	8009b4c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009b26:	f7f9 fdb5 	bl	8003694 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b34:	d102      	bne.n	8009b3c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009b36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b3a:	e05a      	b.n	8009bf2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d0cf      	beq.n	8009aea <SD_FindSCR+0x96>
 8009b4a:	e000      	b.n	8009b4e <SD_FindSCR+0xfa>
      break;
 8009b4c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b54:	f003 0308 	and.w	r3, r3, #8
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2208      	movs	r2, #8
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009b64:	2308      	movs	r3, #8
 8009b66:	e044      	b.n	8009bf2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e037      	b.n	8009bf2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d005      	beq.n	8009b9c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2220      	movs	r2, #32
 8009b96:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009b98:	2320      	movs	r3, #32
 8009b9a:	e02a      	b.n	8009bf2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ba4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	061a      	lsls	r2, r3, #24
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	0a1b      	lsrs	r3, r3, #8
 8009bb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009bbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	0e1b      	lsrs	r3, r3, #24
 8009bc2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc6:	601a      	str	r2, [r3, #0]
    scr++;
 8009bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bca:	3304      	adds	r3, #4
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	061a      	lsls	r2, r3, #24
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	021b      	lsls	r3, r3, #8
 8009bd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	0a1b      	lsrs	r3, r3, #8
 8009be0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009be4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	0e1b      	lsrs	r3, r3, #24
 8009bea:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bee:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	373c      	adds	r7, #60	; 0x3c
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd90      	pop	{r4, r7, pc}

08009bfa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e076      	b.n	8009cfa <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d108      	bne.n	8009c26 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c1c:	d009      	beq.n	8009c32 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	61da      	str	r2, [r3, #28]
 8009c24:	e005      	b.n	8009c32 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7f9 fa5f 	bl	8003110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2202      	movs	r2, #2
 8009c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c68:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c84:	431a      	orrs	r2, r3
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	431a      	orrs	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	695b      	ldr	r3, [r3, #20]
 8009c94:	f003 0301 	and.w	r3, r3, #1
 8009c98:	431a      	orrs	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb6:	ea42 0103 	orr.w	r1, r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	0c1a      	lsrs	r2, r3, #16
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f002 0204 	and.w	r2, r2, #4
 8009cd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69da      	ldr	r2, [r3, #28]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ce8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b088      	sub	sp, #32
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	603b      	str	r3, [r7, #0]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d101      	bne.n	8009d24 <HAL_SPI_Transmit+0x22>
 8009d20:	2302      	movs	r3, #2
 8009d22:	e12d      	b.n	8009f80 <HAL_SPI_Transmit+0x27e>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d2c:	f7f9 fcb2 	bl	8003694 <HAL_GetTick>
 8009d30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009d32:	88fb      	ldrh	r3, [r7, #6]
 8009d34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d002      	beq.n	8009d48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009d42:	2302      	movs	r3, #2
 8009d44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d46:	e116      	b.n	8009f76 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d002      	beq.n	8009d54 <HAL_SPI_Transmit+0x52>
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d58:	e10d      	b.n	8009f76 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2203      	movs	r2, #3
 8009d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	88fa      	ldrh	r2, [r7, #6]
 8009d72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	88fa      	ldrh	r2, [r7, #6]
 8009d78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da0:	d10f      	bne.n	8009dc2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009db0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009dc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d007      	beq.n	8009de0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009de8:	d14f      	bne.n	8009e8a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <HAL_SPI_Transmit+0xf6>
 8009df2:	8afb      	ldrh	r3, [r7, #22]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d142      	bne.n	8009e7e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfc:	881a      	ldrh	r2, [r3, #0]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e08:	1c9a      	adds	r2, r3, #2
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009e1c:	e02f      	b.n	8009e7e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f003 0302 	and.w	r3, r3, #2
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d112      	bne.n	8009e52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e30:	881a      	ldrh	r2, [r3, #0]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3c:	1c9a      	adds	r2, r3, #2
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e50:	e015      	b.n	8009e7e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e52:	f7f9 fc1f 	bl	8003694 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d803      	bhi.n	8009e6a <HAL_SPI_Transmit+0x168>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e68:	d102      	bne.n	8009e70 <HAL_SPI_Transmit+0x16e>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d106      	bne.n	8009e7e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009e7c:	e07b      	b.n	8009f76 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1ca      	bne.n	8009e1e <HAL_SPI_Transmit+0x11c>
 8009e88:	e050      	b.n	8009f2c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d002      	beq.n	8009e98 <HAL_SPI_Transmit+0x196>
 8009e92:	8afb      	ldrh	r3, [r7, #22]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d144      	bne.n	8009f22 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	7812      	ldrb	r2, [r2, #0]
 8009ea4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009ebe:	e030      	b.n	8009f22 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f003 0302 	and.w	r3, r3, #2
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d113      	bne.n	8009ef6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	330c      	adds	r3, #12
 8009ed8:	7812      	ldrb	r2, [r2, #0]
 8009eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	3b01      	subs	r3, #1
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ef4:	e015      	b.n	8009f22 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ef6:	f7f9 fbcd 	bl	8003694 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d803      	bhi.n	8009f0e <HAL_SPI_Transmit+0x20c>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0c:	d102      	bne.n	8009f14 <HAL_SPI_Transmit+0x212>
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009f20:	e029      	b.n	8009f76 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1c9      	bne.n	8009ec0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f2c:	69ba      	ldr	r2, [r7, #24]
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 f8b1 	bl	800a098 <SPI_EndRxTxTransaction>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d002      	beq.n	8009f42 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d10a      	bne.n	8009f60 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	613b      	str	r3, [r7, #16]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	613b      	str	r3, [r7, #16]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	613b      	str	r3, [r7, #16]
 8009f5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	77fb      	strb	r3, [r7, #31]
 8009f6c:	e003      	b.n	8009f76 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3720      	adds	r7, #32
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b088      	sub	sp, #32
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	4613      	mov	r3, r2
 8009f96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f98:	f7f9 fb7c 	bl	8003694 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fa8:	f7f9 fb74 	bl	8003694 <HAL_GetTick>
 8009fac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fae:	4b39      	ldr	r3, [pc, #228]	; (800a094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	015b      	lsls	r3, r3, #5
 8009fb4:	0d1b      	lsrs	r3, r3, #20
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	fb02 f303 	mul.w	r3, r2, r3
 8009fbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fbe:	e054      	b.n	800a06a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d050      	beq.n	800a06a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fc8:	f7f9 fb64 	bl	8003694 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d902      	bls.n	8009fde <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d13d      	bne.n	800a05a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ff6:	d111      	bne.n	800a01c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a000:	d004      	beq.n	800a00c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a00a:	d107      	bne.n	800a01c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a01a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a024:	d10f      	bne.n	800a046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e017      	b.n	800a08a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3b01      	subs	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	4013      	ands	r3, r2
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	429a      	cmp	r2, r3
 800a078:	bf0c      	ite	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	2300      	movne	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	461a      	mov	r2, r3
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	429a      	cmp	r2, r3
 800a086:	d19b      	bne.n	8009fc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20000010 	.word	0x20000010

0800a098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af02      	add	r7, sp, #8
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2180      	movs	r1, #128	; 0x80
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff ff6a 	bl	8009f88 <SPI_WaitFlagStateUntilTimeout>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d007      	beq.n	800a0ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0be:	f043 0220 	orr.w	r2, r3, #32
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e000      	b.n	800a0cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e041      	b.n	800a16a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f7f9 f854 	bl	80031a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3304      	adds	r3, #4
 800a110:	4619      	mov	r1, r3
 800a112:	4610      	mov	r0, r2
 800a114:	f000 fb42 	bl	800a79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	d001      	beq.n	800a18c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e03c      	b.n	800a206 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1d      	ldr	r2, [pc, #116]	; (800a210 <HAL_TIM_Base_Start+0x9c>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d018      	beq.n	800a1d0 <HAL_TIM_Base_Start+0x5c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a1c      	ldr	r2, [pc, #112]	; (800a214 <HAL_TIM_Base_Start+0xa0>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d013      	beq.n	800a1d0 <HAL_TIM_Base_Start+0x5c>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b0:	d00e      	beq.n	800a1d0 <HAL_TIM_Base_Start+0x5c>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a18      	ldr	r2, [pc, #96]	; (800a218 <HAL_TIM_Base_Start+0xa4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d009      	beq.n	800a1d0 <HAL_TIM_Base_Start+0x5c>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a16      	ldr	r2, [pc, #88]	; (800a21c <HAL_TIM_Base_Start+0xa8>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d004      	beq.n	800a1d0 <HAL_TIM_Base_Start+0x5c>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a15      	ldr	r2, [pc, #84]	; (800a220 <HAL_TIM_Base_Start+0xac>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d111      	bne.n	800a1f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2b06      	cmp	r3, #6
 800a1e0:	d010      	beq.n	800a204 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f042 0201 	orr.w	r2, r2, #1
 800a1f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1f2:	e007      	b.n	800a204 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f042 0201 	orr.w	r2, r2, #1
 800a202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3714      	adds	r7, #20
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bc80      	pop	{r7}
 800a20e:	4770      	bx	lr
 800a210:	40012c00 	.word	0x40012c00
 800a214:	40013400 	.word	0x40013400
 800a218:	40000400 	.word	0x40000400
 800a21c:	40000800 	.word	0x40000800
 800a220:	40000c00 	.word	0x40000c00

0800a224 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	f241 1311 	movw	r3, #4369	; 0x1111
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10f      	bne.n	800a25c <HAL_TIM_Base_Stop+0x38>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6a1a      	ldr	r2, [r3, #32]
 800a242:	f240 4344 	movw	r3, #1092	; 0x444
 800a246:	4013      	ands	r3, r2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d107      	bne.n	800a25c <HAL_TIM_Base_Stop+0x38>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f022 0201 	bic.w	r2, r2, #1
 800a25a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	370c      	adds	r7, #12
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bc80      	pop	{r7}
 800a26e:	4770      	bx	lr

0800a270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b01      	cmp	r3, #1
 800a282:	d001      	beq.n	800a288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e044      	b.n	800a312 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f042 0201 	orr.w	r2, r2, #1
 800a29e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1d      	ldr	r2, [pc, #116]	; (800a31c <HAL_TIM_Base_Start_IT+0xac>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d018      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x6c>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1c      	ldr	r2, [pc, #112]	; (800a320 <HAL_TIM_Base_Start_IT+0xb0>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d013      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x6c>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2bc:	d00e      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x6c>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a18      	ldr	r2, [pc, #96]	; (800a324 <HAL_TIM_Base_Start_IT+0xb4>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d009      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x6c>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a16      	ldr	r2, [pc, #88]	; (800a328 <HAL_TIM_Base_Start_IT+0xb8>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d004      	beq.n	800a2dc <HAL_TIM_Base_Start_IT+0x6c>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a15      	ldr	r2, [pc, #84]	; (800a32c <HAL_TIM_Base_Start_IT+0xbc>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d111      	bne.n	800a300 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b06      	cmp	r3, #6
 800a2ec:	d010      	beq.n	800a310 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f042 0201 	orr.w	r2, r2, #1
 800a2fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2fe:	e007      	b.n	800a310 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	bc80      	pop	{r7}
 800a31a:	4770      	bx	lr
 800a31c:	40012c00 	.word	0x40012c00
 800a320:	40013400 	.word	0x40013400
 800a324:	40000400 	.word	0x40000400
 800a328:	40000800 	.word	0x40000800
 800a32c:	40000c00 	.word	0x40000c00

0800a330 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b02      	cmp	r3, #2
 800a344:	d122      	bne.n	800a38c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b02      	cmp	r3, #2
 800a352:	d11b      	bne.n	800a38c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0202 	mvn.w	r2, #2
 800a35c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	f003 0303 	and.w	r3, r3, #3
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f9f6 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a378:	e005      	b.n	800a386 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f9e9 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f9f8 	bl	800a776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0304 	and.w	r3, r3, #4
 800a396:	2b04      	cmp	r3, #4
 800a398:	d122      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	d11b      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f06f 0204 	mvn.w	r2, #4
 800a3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2202      	movs	r2, #2
 800a3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f9cc 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a3cc:	e005      	b.n	800a3da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f9bf 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f9ce 	bl	800a776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0308 	and.w	r3, r3, #8
 800a3ea:	2b08      	cmp	r3, #8
 800a3ec:	d122      	bne.n	800a434 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0308 	and.w	r3, r3, #8
 800a3f8:	2b08      	cmp	r3, #8
 800a3fa:	d11b      	bne.n	800a434 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0208 	mvn.w	r2, #8
 800a404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2204      	movs	r2, #4
 800a40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	f003 0303 	and.w	r3, r3, #3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f9a2 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a420:	e005      	b.n	800a42e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f995 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f9a4 	bl	800a776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	2b10      	cmp	r3, #16
 800a440:	d122      	bne.n	800a488 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b10      	cmp	r3, #16
 800a44e:	d11b      	bne.n	800a488 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f06f 0210 	mvn.w	r2, #16
 800a458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2208      	movs	r2, #8
 800a45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f978 	bl	800a764 <HAL_TIM_IC_CaptureCallback>
 800a474:	e005      	b.n	800a482 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f96b 	bl	800a752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f97a 	bl	800a776 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b01      	cmp	r3, #1
 800a494:	d10e      	bne.n	800a4b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d107      	bne.n	800a4b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f06f 0201 	mvn.w	r2, #1
 800a4ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f7f7 fe9c 	bl	80021ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4be:	2b80      	cmp	r3, #128	; 0x80
 800a4c0:	d10e      	bne.n	800a4e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4cc:	2b80      	cmp	r3, #128	; 0x80
 800a4ce:	d107      	bne.n	800a4e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fb75 	bl	800abca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ea:	2b40      	cmp	r3, #64	; 0x40
 800a4ec:	d10e      	bne.n	800a50c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f8:	2b40      	cmp	r3, #64	; 0x40
 800a4fa:	d107      	bne.n	800a50c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f93e 	bl	800a788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b20      	cmp	r3, #32
 800a518:	d10e      	bne.n	800a538 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f003 0320 	and.w	r3, r3, #32
 800a524:	2b20      	cmp	r3, #32
 800a526:	d107      	bne.n	800a538 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f06f 0220 	mvn.w	r2, #32
 800a530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fb40 	bl	800abb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_TIM_ConfigClockSource+0x1c>
 800a558:	2302      	movs	r3, #2
 800a55a:	e0b4      	b.n	800a6c6 <HAL_TIM_ConfigClockSource+0x186>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a57a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a594:	d03e      	beq.n	800a614 <HAL_TIM_ConfigClockSource+0xd4>
 800a596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a59a:	f200 8087 	bhi.w	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a2:	f000 8086 	beq.w	800a6b2 <HAL_TIM_ConfigClockSource+0x172>
 800a5a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5aa:	d87f      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5ac:	2b70      	cmp	r3, #112	; 0x70
 800a5ae:	d01a      	beq.n	800a5e6 <HAL_TIM_ConfigClockSource+0xa6>
 800a5b0:	2b70      	cmp	r3, #112	; 0x70
 800a5b2:	d87b      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5b4:	2b60      	cmp	r3, #96	; 0x60
 800a5b6:	d050      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x11a>
 800a5b8:	2b60      	cmp	r3, #96	; 0x60
 800a5ba:	d877      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5bc:	2b50      	cmp	r3, #80	; 0x50
 800a5be:	d03c      	beq.n	800a63a <HAL_TIM_ConfigClockSource+0xfa>
 800a5c0:	2b50      	cmp	r3, #80	; 0x50
 800a5c2:	d873      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5c4:	2b40      	cmp	r3, #64	; 0x40
 800a5c6:	d058      	beq.n	800a67a <HAL_TIM_ConfigClockSource+0x13a>
 800a5c8:	2b40      	cmp	r3, #64	; 0x40
 800a5ca:	d86f      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5cc:	2b30      	cmp	r3, #48	; 0x30
 800a5ce:	d064      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5d0:	2b30      	cmp	r3, #48	; 0x30
 800a5d2:	d86b      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5d4:	2b20      	cmp	r3, #32
 800a5d6:	d060      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5d8:	2b20      	cmp	r3, #32
 800a5da:	d867      	bhi.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d05c      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5e0:	2b10      	cmp	r3, #16
 800a5e2:	d05a      	beq.n	800a69a <HAL_TIM_ConfigClockSource+0x15a>
 800a5e4:	e062      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	6899      	ldr	r1, [r3, #8]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f000 fa53 	bl	800aaa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	609a      	str	r2, [r3, #8]
      break;
 800a612:	e04f      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6818      	ldr	r0, [r3, #0]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	6899      	ldr	r1, [r3, #8]
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	f000 fa3c 	bl	800aaa0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689a      	ldr	r2, [r3, #8]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a636:	609a      	str	r2, [r3, #8]
      break;
 800a638:	e03c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6818      	ldr	r0, [r3, #0]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	6859      	ldr	r1, [r3, #4]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	461a      	mov	r2, r3
 800a648:	f000 f9b3 	bl	800a9b2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2150      	movs	r1, #80	; 0x50
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fa0a 	bl	800aa6c <TIM_ITRx_SetConfig>
      break;
 800a658:	e02c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6859      	ldr	r1, [r3, #4]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	461a      	mov	r2, r3
 800a668:	f000 f9d1 	bl	800aa0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2160      	movs	r1, #96	; 0x60
 800a672:	4618      	mov	r0, r3
 800a674:	f000 f9fa 	bl	800aa6c <TIM_ITRx_SetConfig>
      break;
 800a678:	e01c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6859      	ldr	r1, [r3, #4]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	461a      	mov	r2, r3
 800a688:	f000 f993 	bl	800a9b2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2140      	movs	r1, #64	; 0x40
 800a692:	4618      	mov	r0, r3
 800a694:	f000 f9ea 	bl	800aa6c <TIM_ITRx_SetConfig>
      break;
 800a698:	e00c      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4610      	mov	r0, r2
 800a6a6:	f000 f9e1 	bl	800aa6c <TIM_ITRx_SetConfig>
      break;
 800a6aa:	e003      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b0:	e000      	b.n	800a6b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a6b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d101      	bne.n	800a6e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e031      	b.n	800a74a <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 f8c9 	bl	800a890 <TIM_SlaveTimer_SetConfig>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d009      	beq.n	800a718 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e018      	b.n	800a74a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a726:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a736:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr

0800a764 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	bc80      	pop	{r7}
 800a774:	4770      	bx	lr

0800a776 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a776:	b480      	push	{r7}
 800a778:	b083      	sub	sp, #12
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a77e:	bf00      	nop
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	bc80      	pop	{r7}
 800a786:	4770      	bx	lr

0800a788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	bc80      	pop	{r7}
 800a798:	4770      	bx	lr
	...

0800a79c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a33      	ldr	r2, [pc, #204]	; (800a87c <TIM_Base_SetConfig+0xe0>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d013      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a32      	ldr	r2, [pc, #200]	; (800a880 <TIM_Base_SetConfig+0xe4>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d00f      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7c2:	d00b      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a2f      	ldr	r2, [pc, #188]	; (800a884 <TIM_Base_SetConfig+0xe8>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d007      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a2e      	ldr	r2, [pc, #184]	; (800a888 <TIM_Base_SetConfig+0xec>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d003      	beq.n	800a7dc <TIM_Base_SetConfig+0x40>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a2d      	ldr	r2, [pc, #180]	; (800a88c <TIM_Base_SetConfig+0xf0>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d108      	bne.n	800a7ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a22      	ldr	r2, [pc, #136]	; (800a87c <TIM_Base_SetConfig+0xe0>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d013      	beq.n	800a81e <TIM_Base_SetConfig+0x82>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a21      	ldr	r2, [pc, #132]	; (800a880 <TIM_Base_SetConfig+0xe4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d00f      	beq.n	800a81e <TIM_Base_SetConfig+0x82>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a804:	d00b      	beq.n	800a81e <TIM_Base_SetConfig+0x82>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a1e      	ldr	r2, [pc, #120]	; (800a884 <TIM_Base_SetConfig+0xe8>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d007      	beq.n	800a81e <TIM_Base_SetConfig+0x82>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a1d      	ldr	r2, [pc, #116]	; (800a888 <TIM_Base_SetConfig+0xec>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d003      	beq.n	800a81e <TIM_Base_SetConfig+0x82>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a1c      	ldr	r2, [pc, #112]	; (800a88c <TIM_Base_SetConfig+0xf0>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d108      	bne.n	800a830 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	4a09      	ldr	r2, [pc, #36]	; (800a87c <TIM_Base_SetConfig+0xe0>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d003      	beq.n	800a864 <TIM_Base_SetConfig+0xc8>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a08      	ldr	r2, [pc, #32]	; (800a880 <TIM_Base_SetConfig+0xe4>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d103      	bne.n	800a86c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	691a      	ldr	r2, [r3, #16]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	615a      	str	r2, [r3, #20]
}
 800a872:	bf00      	nop
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	bc80      	pop	{r7}
 800a87a:	4770      	bx	lr
 800a87c:	40012c00 	.word	0x40012c00
 800a880:	40013400 	.word	0x40013400
 800a884:	40000400 	.word	0x40000400
 800a888:	40000800 	.word	0x40000800
 800a88c:	40000c00 	.word	0x40000c00

0800a890 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f023 0307 	bic.w	r3, r3, #7
 800a8be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	2b70      	cmp	r3, #112	; 0x70
 800a8d8:	d01a      	beq.n	800a910 <TIM_SlaveTimer_SetConfig+0x80>
 800a8da:	2b70      	cmp	r3, #112	; 0x70
 800a8dc:	d860      	bhi.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800a8de:	2b60      	cmp	r3, #96	; 0x60
 800a8e0:	d054      	beq.n	800a98c <TIM_SlaveTimer_SetConfig+0xfc>
 800a8e2:	2b60      	cmp	r3, #96	; 0x60
 800a8e4:	d85c      	bhi.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800a8e6:	2b50      	cmp	r3, #80	; 0x50
 800a8e8:	d046      	beq.n	800a978 <TIM_SlaveTimer_SetConfig+0xe8>
 800a8ea:	2b50      	cmp	r3, #80	; 0x50
 800a8ec:	d858      	bhi.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800a8ee:	2b40      	cmp	r3, #64	; 0x40
 800a8f0:	d019      	beq.n	800a926 <TIM_SlaveTimer_SetConfig+0x96>
 800a8f2:	2b40      	cmp	r3, #64	; 0x40
 800a8f4:	d854      	bhi.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800a8f6:	2b30      	cmp	r3, #48	; 0x30
 800a8f8:	d055      	beq.n	800a9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800a8fa:	2b30      	cmp	r3, #48	; 0x30
 800a8fc:	d850      	bhi.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	d051      	beq.n	800a9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800a902:	2b20      	cmp	r3, #32
 800a904:	d84c      	bhi.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x110>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d04d      	beq.n	800a9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800a90a:	2b10      	cmp	r3, #16
 800a90c:	d04b      	beq.n	800a9a6 <TIM_SlaveTimer_SetConfig+0x116>
 800a90e:	e047      	b.n	800a9a0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	68d9      	ldr	r1, [r3, #12]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	f000 f8be 	bl	800aaa0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800a924:	e040      	b.n	800a9a8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b05      	cmp	r3, #5
 800a92c:	d101      	bne.n	800a932 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e03b      	b.n	800a9aa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6a1b      	ldr	r3, [r3, #32]
 800a938:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6a1a      	ldr	r2, [r3, #32]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f022 0201 	bic.w	r2, r2, #1
 800a948:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a958:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	011b      	lsls	r3, r3, #4
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	4313      	orrs	r3, r2
 800a964:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	621a      	str	r2, [r3, #32]
      break;
 800a976:	e017      	b.n	800a9a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	6899      	ldr	r1, [r3, #8]
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	461a      	mov	r2, r3
 800a986:	f000 f814 	bl	800a9b2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a98a:	e00d      	b.n	800a9a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6818      	ldr	r0, [r3, #0]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	6899      	ldr	r1, [r3, #8]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	461a      	mov	r2, r3
 800a99a:	f000 f838 	bl	800aa0e <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800a99e:	e003      	b.n	800a9a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a4:	e000      	b.n	800a9a8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a9a6:	bf00      	nop
  }

  return status;
 800a9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b087      	sub	sp, #28
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	f023 0201 	bic.w	r2, r3, #1
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	011b      	lsls	r3, r3, #4
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f023 030a 	bic.w	r3, r3, #10
 800a9ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	621a      	str	r2, [r3, #32]
}
 800aa04:	bf00      	nop
 800aa06:	371c      	adds	r7, #28
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bc80      	pop	{r7}
 800aa0c:	4770      	bx	lr

0800aa0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b087      	sub	sp, #28
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	60f8      	str	r0, [r7, #12]
 800aa16:	60b9      	str	r1, [r7, #8]
 800aa18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6a1b      	ldr	r3, [r3, #32]
 800aa24:	f023 0210 	bic.w	r2, r3, #16
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	031b      	lsls	r3, r3, #12
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	011b      	lsls	r3, r3, #4
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	693a      	ldr	r2, [r7, #16]
 800aa5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	621a      	str	r2, [r3, #32]
}
 800aa62:	bf00      	nop
 800aa64:	371c      	adds	r7, #28
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bc80      	pop	{r7}
 800aa6a:	4770      	bx	lr

0800aa6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	f043 0307 	orr.w	r3, r3, #7
 800aa8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	609a      	str	r2, [r3, #8]
}
 800aa96:	bf00      	nop
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bc80      	pop	{r7}
 800aa9e:	4770      	bx	lr

0800aaa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	021a      	lsls	r2, r3, #8
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	431a      	orrs	r2, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	609a      	str	r2, [r3, #8]
}
 800aad4:	bf00      	nop
 800aad6:	371c      	adds	r7, #28
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc80      	pop	{r7}
 800aadc:	4770      	bx	lr
	...

0800aae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d101      	bne.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	e050      	b.n	800ab9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2202      	movs	r2, #2
 800ab04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a1b      	ldr	r2, [pc, #108]	; (800aba4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d018      	beq.n	800ab6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a19      	ldr	r2, [pc, #100]	; (800aba8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d013      	beq.n	800ab6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab4e:	d00e      	beq.n	800ab6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a15      	ldr	r2, [pc, #84]	; (800abac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d009      	beq.n	800ab6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a14      	ldr	r2, [pc, #80]	; (800abb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d004      	beq.n	800ab6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a12      	ldr	r2, [pc, #72]	; (800abb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d10c      	bne.n	800ab88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bc80      	pop	{r7}
 800aba2:	4770      	bx	lr
 800aba4:	40012c00 	.word	0x40012c00
 800aba8:	40013400 	.word	0x40013400
 800abac:	40000400 	.word	0x40000400
 800abb0:	40000800 	.word	0x40000800
 800abb4:	40000c00 	.word	0x40000c00

0800abb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bc80      	pop	{r7}
 800abc8:	4770      	bx	lr

0800abca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abd2:	bf00      	nop
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bc80      	pop	{r7}
 800abda:	4770      	bx	lr

0800abdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e042      	b.n	800ac74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f7f8 fb24 	bl	8003250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2224      	movs	r2, #36	; 0x24
 800ac0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fcd5 	bl	800b5d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	691a      	ldr	r2, [r3, #16]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	695a      	ldr	r2, [r3, #20]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68da      	ldr	r2, [r3, #12]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2220      	movs	r2, #32
 800ac60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2220      	movs	r2, #32
 800ac68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	4613      	mov	r3, r2
 800ac88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	d112      	bne.n	800acbc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <HAL_UART_Receive_IT+0x26>
 800ac9c:	88fb      	ldrh	r3, [r7, #6]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aca2:	2301      	movs	r3, #1
 800aca4:	e00b      	b.n	800acbe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800acac:	88fb      	ldrh	r3, [r7, #6]
 800acae:	461a      	mov	r2, r3
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 fab7 	bl	800b226 <UART_Start_Receive_IT>
 800acb8:	4603      	mov	r3, r0
 800acba:	e000      	b.n	800acbe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800acbc:	2302      	movs	r3, #2
  }
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
	...

0800acc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b0ba      	sub	sp, #232	; 0xe8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800acee:	2300      	movs	r3, #0
 800acf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ad06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10f      	bne.n	800ad2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad12:	f003 0320 	and.w	r3, r3, #32
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d009      	beq.n	800ad2e <HAL_UART_IRQHandler+0x66>
 800ad1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad1e:	f003 0320 	and.w	r3, r3, #32
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fb93 	bl	800b452 <UART_Receive_IT>
      return;
 800ad2c:	e25b      	b.n	800b1e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ad2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 80de 	beq.w	800aef4 <HAL_UART_IRQHandler+0x22c>
 800ad38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d106      	bne.n	800ad52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 80d1 	beq.w	800aef4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00b      	beq.n	800ad76 <HAL_UART_IRQHandler+0xae>
 800ad5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad6e:	f043 0201 	orr.w	r2, r3, #1
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00b      	beq.n	800ad9a <HAL_UART_IRQHandler+0xd2>
 800ad82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d005      	beq.n	800ad9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad92:	f043 0202 	orr.w	r2, r3, #2
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <HAL_UART_IRQHandler+0xf6>
 800ada6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d005      	beq.n	800adbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb6:	f043 0204 	orr.w	r2, r3, #4
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800adbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d011      	beq.n	800adee <HAL_UART_IRQHandler+0x126>
 800adca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adce:	f003 0320 	and.w	r3, r3, #32
 800add2:	2b00      	cmp	r3, #0
 800add4:	d105      	bne.n	800ade2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800add6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d005      	beq.n	800adee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade6:	f043 0208 	orr.w	r2, r3, #8
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	f000 81f2 	beq.w	800b1dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adfc:	f003 0320 	and.w	r3, r3, #32
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d008      	beq.n	800ae16 <HAL_UART_IRQHandler+0x14e>
 800ae04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae08:	f003 0320 	and.w	r3, r3, #32
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fb1e 	bl	800b452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	bf14      	ite	ne
 800ae24:	2301      	movne	r3, #1
 800ae26:	2300      	moveq	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae32:	f003 0308 	and.w	r3, r3, #8
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d103      	bne.n	800ae42 <HAL_UART_IRQHandler+0x17a>
 800ae3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d04f      	beq.n	800aee2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fa28 	bl	800b298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d041      	beq.n	800aeda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3314      	adds	r3, #20
 800ae5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	3314      	adds	r3, #20
 800ae7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1d9      	bne.n	800ae56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d013      	beq.n	800aed2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	4a7e      	ldr	r2, [pc, #504]	; (800b0a8 <HAL_UART_IRQHandler+0x3e0>)
 800aeb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7f9 fb70 	bl	800459c <HAL_DMA_Abort_IT>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d016      	beq.n	800aef0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aecc:	4610      	mov	r0, r2
 800aece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed0:	e00e      	b.n	800aef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f993 	bl	800b1fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed8:	e00a      	b.n	800aef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f98f 	bl	800b1fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee0:	e006      	b.n	800aef0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f98b 	bl	800b1fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800aeee:	e175      	b.n	800b1dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef0:	bf00      	nop
    return;
 800aef2:	e173      	b.n	800b1dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	f040 814f 	bne.w	800b19c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af02:	f003 0310 	and.w	r3, r3, #16
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 8148 	beq.w	800b19c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800af0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af10:	f003 0310 	and.w	r3, r3, #16
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8141 	beq.w	800b19c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af1a:	2300      	movs	r3, #0
 800af1c:	60bb      	str	r3, [r7, #8]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	60bb      	str	r3, [r7, #8]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	60bb      	str	r3, [r7, #8]
 800af2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f000 80b6 	beq.w	800b0ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8145 	beq.w	800b1e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af5e:	429a      	cmp	r2, r3
 800af60:	f080 813e 	bcs.w	800b1e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	2b20      	cmp	r3, #32
 800af74:	f000 8088 	beq.w	800b088 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	330c      	adds	r3, #12
 800af7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af86:	e853 3f00 	ldrex	r3, [r3]
 800af8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	330c      	adds	r3, #12
 800afa0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800afa4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800afa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800afb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800afbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1d9      	bne.n	800af78 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3314      	adds	r3, #20
 800afca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afce:	e853 3f00 	ldrex	r3, [r3]
 800afd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800afd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afd6:	f023 0301 	bic.w	r3, r3, #1
 800afda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3314      	adds	r3, #20
 800afe4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800afe8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800afec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aff0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aff4:	e841 2300 	strex	r3, r2, [r1]
 800aff8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800affa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e1      	bne.n	800afc4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3314      	adds	r3, #20
 800b006:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b00a:	e853 3f00 	ldrex	r3, [r3]
 800b00e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	3314      	adds	r3, #20
 800b020:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b024:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b026:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b02a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e3      	bne.n	800b000 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2220      	movs	r2, #32
 800b03c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	330c      	adds	r3, #12
 800b04c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b058:	f023 0310 	bic.w	r3, r3, #16
 800b05c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	330c      	adds	r3, #12
 800b066:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b06a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b06c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b072:	e841 2300 	strex	r3, r2, [r1]
 800b076:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e3      	bne.n	800b046 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b082:	4618      	mov	r0, r3
 800b084:	f7f9 fa4e 	bl	8004524 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b096:	b29b      	uxth	r3, r3
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f8b6 	bl	800b210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b0a4:	e09c      	b.n	800b1e0 <HAL_UART_IRQHandler+0x518>
 800b0a6:	bf00      	nop
 800b0a8:	0800b35d 	.word	0x0800b35d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 808e 	beq.w	800b1e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b0c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 8089 	beq.w	800b1e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	330c      	adds	r3, #12
 800b0d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	330c      	adds	r3, #12
 800b0f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b0f6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0fe:	e841 2300 	strex	r3, r2, [r1]
 800b102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e3      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3314      	adds	r3, #20
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	623b      	str	r3, [r7, #32]
   return(result);
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	f023 0301 	bic.w	r3, r3, #1
 800b120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3314      	adds	r3, #20
 800b12a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b12e:	633a      	str	r2, [r7, #48]	; 0x30
 800b130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e3      	bne.n	800b10a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	330c      	adds	r3, #12
 800b156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	e853 3f00 	ldrex	r3, [r3]
 800b15e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f023 0310 	bic.w	r3, r3, #16
 800b166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	330c      	adds	r3, #12
 800b170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b174:	61fa      	str	r2, [r7, #28]
 800b176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	69b9      	ldr	r1, [r7, #24]
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	617b      	str	r3, [r7, #20]
   return(result);
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e3      	bne.n	800b150 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2202      	movs	r2, #2
 800b18c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b18e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f83b 	bl	800b210 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b19a:	e023      	b.n	800b1e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d009      	beq.n	800b1bc <HAL_UART_IRQHandler+0x4f4>
 800b1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d003      	beq.n	800b1bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f8e5 	bl	800b384 <UART_Transmit_IT>
    return;
 800b1ba:	e014      	b.n	800b1e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00e      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x51e>
 800b1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d008      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f924 	bl	800b422 <UART_EndTransmit_IT>
    return;
 800b1da:	e004      	b.n	800b1e6 <HAL_UART_IRQHandler+0x51e>
    return;
 800b1dc:	bf00      	nop
 800b1de:	e002      	b.n	800b1e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b1e0:	bf00      	nop
 800b1e2:	e000      	b.n	800b1e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b1e4:	bf00      	nop
  }
}
 800b1e6:	37e8      	adds	r7, #232	; 0xe8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bc80      	pop	{r7}
 800b1fc:	4770      	bx	lr

0800b1fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1fe:	b480      	push	{r7}
 800b200:	b083      	sub	sp, #12
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b206:	bf00      	nop
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bc80      	pop	{r7}
 800b20e:	4770      	bx	lr

0800b210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr

0800b226 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b226:	b480      	push	{r7}
 800b228:	b085      	sub	sp, #20
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	4613      	mov	r3, r2
 800b232:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	88fa      	ldrh	r2, [r7, #6]
 800b23e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	88fa      	ldrh	r2, [r7, #6]
 800b244:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2222      	movs	r2, #34	; 0x22
 800b250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d007      	beq.n	800b26c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68da      	ldr	r2, [r3, #12]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b26a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	695a      	ldr	r2, [r3, #20]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f042 0201 	orr.w	r2, r2, #1
 800b27a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68da      	ldr	r2, [r3, #12]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f042 0220 	orr.w	r2, r2, #32
 800b28a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	bc80      	pop	{r7}
 800b296:	4770      	bx	lr

0800b298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b298:	b480      	push	{r7}
 800b29a:	b095      	sub	sp, #84	; 0x54
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	330c      	adds	r3, #12
 800b2a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2aa:	e853 3f00 	ldrex	r3, [r3]
 800b2ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b2b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	330c      	adds	r3, #12
 800b2be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b2c0:	643a      	str	r2, [r7, #64]	; 0x40
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b2c8:	e841 2300 	strex	r3, r2, [r1]
 800b2cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1e5      	bne.n	800b2a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	3314      	adds	r3, #20
 800b2da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	e853 3f00 	ldrex	r3, [r3]
 800b2e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3314      	adds	r3, #20
 800b2f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2fc:	e841 2300 	strex	r3, r2, [r1]
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	d1e5      	bne.n	800b2d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d119      	bne.n	800b344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	330c      	adds	r3, #12
 800b316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	e853 3f00 	ldrex	r3, [r3]
 800b31e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	f023 0310 	bic.w	r3, r3, #16
 800b326:	647b      	str	r3, [r7, #68]	; 0x44
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	330c      	adds	r3, #12
 800b32e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b330:	61ba      	str	r2, [r7, #24]
 800b332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	6979      	ldr	r1, [r7, #20]
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	e841 2300 	strex	r3, r2, [r1]
 800b33c:	613b      	str	r3, [r7, #16]
   return(result);
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1e5      	bne.n	800b310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2220      	movs	r2, #32
 800b348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2200      	movs	r2, #0
 800b350:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b352:	bf00      	nop
 800b354:	3754      	adds	r7, #84	; 0x54
 800b356:	46bd      	mov	sp, r7
 800b358:	bc80      	pop	{r7}
 800b35a:	4770      	bx	lr

0800b35c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f7ff ff41 	bl	800b1fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b37c:	bf00      	nop
 800b37e:	3710      	adds	r7, #16
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b21      	cmp	r3, #33	; 0x21
 800b396:	d13e      	bne.n	800b416 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a0:	d114      	bne.n	800b3cc <UART_Transmit_IT+0x48>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d110      	bne.n	800b3cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b3be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	1c9a      	adds	r2, r3, #2
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	621a      	str	r2, [r3, #32]
 800b3ca:	e008      	b.n	800b3de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a1b      	ldr	r3, [r3, #32]
 800b3d0:	1c59      	adds	r1, r3, #1
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	6211      	str	r1, [r2, #32]
 800b3d6:	781a      	ldrb	r2, [r3, #0]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	b29b      	uxth	r3, r3
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10f      	bne.n	800b412 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68da      	ldr	r2, [r3, #12]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b400:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68da      	ldr	r2, [r3, #12]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b410:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b412:	2300      	movs	r3, #0
 800b414:	e000      	b.n	800b418 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b416:	2302      	movs	r3, #2
  }
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bc80      	pop	{r7}
 800b420:	4770      	bx	lr

0800b422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b082      	sub	sp, #8
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2220      	movs	r2, #32
 800b43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff fed2 	bl	800b1ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b08c      	sub	sp, #48	; 0x30
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b22      	cmp	r3, #34	; 0x22
 800b464:	f040 80ae 	bne.w	800b5c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b470:	d117      	bne.n	800b4a2 <UART_Receive_IT+0x50>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d113      	bne.n	800b4a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b482:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b490:	b29a      	uxth	r2, r3
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49a:	1c9a      	adds	r2, r3, #2
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	629a      	str	r2, [r3, #40]	; 0x28
 800b4a0:	e026      	b.n	800b4f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4b4:	d007      	beq.n	800b4c6 <UART_Receive_IT+0x74>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10a      	bne.n	800b4d4 <UART_Receive_IT+0x82>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d106      	bne.n	800b4d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	e008      	b.n	800b4e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b500:	2b00      	cmp	r3, #0
 800b502:	d15d      	bne.n	800b5c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68da      	ldr	r2, [r3, #12]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f022 0220 	bic.w	r2, r2, #32
 800b512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68da      	ldr	r2, [r3, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	695a      	ldr	r2, [r3, #20]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f022 0201 	bic.w	r2, r2, #1
 800b532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2220      	movs	r2, #32
 800b538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b546:	2b01      	cmp	r3, #1
 800b548:	d135      	bne.n	800b5b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	330c      	adds	r3, #12
 800b556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	e853 3f00 	ldrex	r3, [r3]
 800b55e:	613b      	str	r3, [r7, #16]
   return(result);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	f023 0310 	bic.w	r3, r3, #16
 800b566:	627b      	str	r3, [r7, #36]	; 0x24
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	330c      	adds	r3, #12
 800b56e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b570:	623a      	str	r2, [r7, #32]
 800b572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b574:	69f9      	ldr	r1, [r7, #28]
 800b576:	6a3a      	ldr	r2, [r7, #32]
 800b578:	e841 2300 	strex	r3, r2, [r1]
 800b57c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e5      	bne.n	800b550 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0310 	and.w	r3, r3, #16
 800b58e:	2b10      	cmp	r3, #16
 800b590:	d10a      	bne.n	800b5a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b592:	2300      	movs	r3, #0
 800b594:	60fb      	str	r3, [r7, #12]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60fb      	str	r3, [r7, #12]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	60fb      	str	r3, [r7, #12]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff fe2e 	bl	800b210 <HAL_UARTEx_RxEventCallback>
 800b5b4:	e002      	b.n	800b5bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7f6 fe86 	bl	80022c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	e002      	b.n	800b5c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	e000      	b.n	800b5c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b5c4:	2302      	movs	r3, #2
  }
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3730      	adds	r7, #48	; 0x30
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	689a      	ldr	r2, [r3, #8]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b60a:	f023 030c 	bic.w	r3, r3, #12
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	430b      	orrs	r3, r1
 800b616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	699a      	ldr	r2, [r3, #24]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a2c      	ldr	r2, [pc, #176]	; (800b6e4 <UART_SetConfig+0x114>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d103      	bne.n	800b640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b638:	f7fc ff94 	bl	8008564 <HAL_RCC_GetPCLK2Freq>
 800b63c:	60f8      	str	r0, [r7, #12]
 800b63e:	e002      	b.n	800b646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b640:	f7fc ff7c 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 800b644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	4613      	mov	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4413      	add	r3, r2
 800b64e:	009a      	lsls	r2, r3, #2
 800b650:	441a      	add	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65c:	4a22      	ldr	r2, [pc, #136]	; (800b6e8 <UART_SetConfig+0x118>)
 800b65e:	fba2 2303 	umull	r2, r3, r2, r3
 800b662:	095b      	lsrs	r3, r3, #5
 800b664:	0119      	lsls	r1, r3, #4
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	4613      	mov	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4413      	add	r3, r2
 800b66e:	009a      	lsls	r2, r3, #2
 800b670:	441a      	add	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	fbb2 f2f3 	udiv	r2, r2, r3
 800b67c:	4b1a      	ldr	r3, [pc, #104]	; (800b6e8 <UART_SetConfig+0x118>)
 800b67e:	fba3 0302 	umull	r0, r3, r3, r2
 800b682:	095b      	lsrs	r3, r3, #5
 800b684:	2064      	movs	r0, #100	; 0x64
 800b686:	fb00 f303 	mul.w	r3, r0, r3
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	011b      	lsls	r3, r3, #4
 800b68e:	3332      	adds	r3, #50	; 0x32
 800b690:	4a15      	ldr	r2, [pc, #84]	; (800b6e8 <UART_SetConfig+0x118>)
 800b692:	fba2 2303 	umull	r2, r3, r2, r3
 800b696:	095b      	lsrs	r3, r3, #5
 800b698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b69c:	4419      	add	r1, r3
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	009a      	lsls	r2, r3, #2
 800b6a8:	441a      	add	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6b4:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <UART_SetConfig+0x118>)
 800b6b6:	fba3 0302 	umull	r0, r3, r3, r2
 800b6ba:	095b      	lsrs	r3, r3, #5
 800b6bc:	2064      	movs	r0, #100	; 0x64
 800b6be:	fb00 f303 	mul.w	r3, r0, r3
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	011b      	lsls	r3, r3, #4
 800b6c6:	3332      	adds	r3, #50	; 0x32
 800b6c8:	4a07      	ldr	r2, [pc, #28]	; (800b6e8 <UART_SetConfig+0x118>)
 800b6ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ce:	095b      	lsrs	r3, r3, #5
 800b6d0:	f003 020f 	and.w	r2, r3, #15
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	440a      	add	r2, r1
 800b6da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b6dc:	bf00      	nop
 800b6de:	3710      	adds	r7, #16
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	40013800 	.word	0x40013800
 800b6e8:	51eb851f 	.word	0x51eb851f

0800b6ec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	f107 001c 	add.w	r0, r7, #28
 800b6fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b702:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b704:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b706:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b70a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b70e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b712:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b716:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b726:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	431a      	orrs	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3714      	adds	r7, #20
 800b738:	46bd      	mov	sp, r7
 800b73a:	bc80      	pop	{r7}
 800b73c:	b004      	add	sp, #16
 800b73e:	4770      	bx	lr

0800b740 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	bc80      	pop	{r7}
 800b756:	4770      	bx	lr

0800b758 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	bc80      	pop	{r7}
 800b776:	4770      	bx	lr

0800b778 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2203      	movs	r2, #3
 800b784:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bc80      	pop	{r7}
 800b790:	4770      	bx	lr

0800b792 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b792:	b480      	push	{r7}
 800b794:	b083      	sub	sp, #12
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0303 	and.w	r3, r3, #3
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	370c      	adds	r7, #12
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bc80      	pop	{r7}
 800b7aa:	4770      	bx	lr

0800b7ac <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b7d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b7d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b7e6:	f023 030f 	bic.w	r3, r3, #15
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bc80      	pop	{r7}
 800b7fc:	4770      	bx	lr

0800b7fe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	b2db      	uxtb	r3, r3
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	bc80      	pop	{r7}
 800b814:	4770      	bx	lr

0800b816 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b816:	b480      	push	{r7}
 800b818:	b085      	sub	sp, #20
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	3314      	adds	r3, #20
 800b824:	461a      	mov	r2, r3
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	4413      	add	r3, r2
 800b82a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
}  
 800b830:	4618      	mov	r0, r3
 800b832:	3714      	adds	r7, #20
 800b834:	46bd      	mov	sp, r7
 800b836:	bc80      	pop	{r7}
 800b838:	4770      	bx	lr

0800b83a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b085      	sub	sp, #20
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b860:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b866:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b86c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	4313      	orrs	r3, r2
 800b872:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b878:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	431a      	orrs	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b884:	2300      	movs	r3, #0

}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bc80      	pop	{r7}
 800b88e:	4770      	bx	lr

0800b890 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b89e:	2310      	movs	r3, #16
 800b8a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8a2:	2340      	movs	r3, #64	; 0x40
 800b8a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8b0:	f107 0308 	add.w	r3, r7, #8
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff ff78 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b8bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c0:	2110      	movs	r1, #16
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fa18 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b8c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ca:	69fb      	ldr	r3, [r7, #28]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3720      	adds	r7, #32
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b088      	sub	sp, #32
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b8e2:	2311      	movs	r3, #17
 800b8e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8e6:	2340      	movs	r3, #64	; 0x40
 800b8e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8f4:	f107 0308 	add.w	r3, r7, #8
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7ff ff56 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b900:	f241 3288 	movw	r2, #5000	; 0x1388
 800b904:	2111      	movs	r1, #17
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f9f6 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b90c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b90e:	69fb      	ldr	r3, [r7, #28]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3720      	adds	r7, #32
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b088      	sub	sp, #32
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b926:	2312      	movs	r3, #18
 800b928:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b92a:	2340      	movs	r3, #64	; 0x40
 800b92c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b92e:	2300      	movs	r3, #0
 800b930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b932:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b936:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b938:	f107 0308 	add.w	r3, r7, #8
 800b93c:	4619      	mov	r1, r3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff ff34 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b944:	f241 3288 	movw	r2, #5000	; 0x1388
 800b948:	2112      	movs	r1, #18
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f9d4 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b952:	69fb      	ldr	r3, [r7, #28]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3720      	adds	r7, #32
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b96a:	2318      	movs	r3, #24
 800b96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b96e:	2340      	movs	r3, #64	; 0x40
 800b970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b972:	2300      	movs	r3, #0
 800b974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b97a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b97c:	f107 0308 	add.w	r3, r7, #8
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff ff12 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b988:	f241 3288 	movw	r2, #5000	; 0x1388
 800b98c:	2118      	movs	r1, #24
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 f9b2 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b996:	69fb      	ldr	r3, [r7, #28]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3720      	adds	r7, #32
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b9ae:	2319      	movs	r3, #25
 800b9b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9b2:	2340      	movs	r3, #64	; 0x40
 800b9b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9c0:	f107 0308 	add.w	r3, r7, #8
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff fef0 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d0:	2119      	movs	r1, #25
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f990 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800b9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9da:	69fb      	ldr	r3, [r7, #28]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b9f0:	230c      	movs	r3, #12
 800b9f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9f4:	2340      	movs	r3, #64	; 0x40
 800b9f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba02:	f107 0308 	add.w	r3, r7, #8
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f7ff fecf 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ba0e:	4a05      	ldr	r2, [pc, #20]	; (800ba24 <SDMMC_CmdStopTransfer+0x40>)
 800ba10:	210c      	movs	r1, #12
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f970 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800ba18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba1a:	69fb      	ldr	r3, [r7, #28]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3720      	adds	r7, #32
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	05f5e100 	.word	0x05f5e100

0800ba28 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b08a      	sub	sp, #40	; 0x28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ba38:	2307      	movs	r3, #7
 800ba3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba3c:	2340      	movs	r3, #64	; 0x40
 800ba3e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba40:	2300      	movs	r3, #0
 800ba42:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba48:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba4a:	f107 0310 	add.w	r3, r7, #16
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f7ff feab 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ba56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba5a:	2107      	movs	r1, #7
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f000 f94b 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800ba62:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3728      	adds	r7, #40	; 0x28
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b088      	sub	sp, #32
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba8c:	f107 0308 	add.w	r3, r7, #8
 800ba90:	4619      	mov	r1, r3
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff fe8a 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fb63 	bl	800c164 <SDMMC_GetCmdError>
 800ba9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa0:	69fb      	ldr	r3, [r7, #28]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3720      	adds	r7, #32
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b088      	sub	sp, #32
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bab2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bab8:	2308      	movs	r3, #8
 800baba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800babc:	2340      	movs	r3, #64	; 0x40
 800babe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bac8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800baca:	f107 0308 	add.w	r3, r7, #8
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f7ff fe6b 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 faf6 	bl	800c0c8 <SDMMC_GetCmdResp7>
 800badc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bade:	69fb      	ldr	r3, [r7, #28]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3720      	adds	r7, #32
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800baf6:	2337      	movs	r3, #55	; 0x37
 800baf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bafa:	2340      	movs	r3, #64	; 0x40
 800bafc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bafe:	2300      	movs	r3, #0
 800bb00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb08:	f107 0308 	add.w	r3, r7, #8
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff fe4c 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bb14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb18:	2137      	movs	r1, #55	; 0x37
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 f8ec 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bb20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb22:	69fb      	ldr	r3, [r7, #28]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3720      	adds	r7, #32
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b088      	sub	sp, #32
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bb42:	2329      	movs	r3, #41	; 0x29
 800bb44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb46:	2340      	movs	r3, #64	; 0x40
 800bb48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb54:	f107 0308 	add.w	r3, r7, #8
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff fe26 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f9ff 	bl	800bf64 <SDMMC_GetCmdResp3>
 800bb66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb68:	69fb      	ldr	r3, [r7, #28]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3720      	adds	r7, #32
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b088      	sub	sp, #32
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bb80:	2306      	movs	r3, #6
 800bb82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb84:	2340      	movs	r3, #64	; 0x40
 800bb86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb92:	f107 0308 	add.w	r3, r7, #8
 800bb96:	4619      	mov	r1, r3
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f7ff fe07 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800bb9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bba2:	2106      	movs	r1, #6
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 f8a7 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bbaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbac:	69fb      	ldr	r3, [r7, #28]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3720      	adds	r7, #32
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b088      	sub	sp, #32
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bbc2:	2333      	movs	r3, #51	; 0x33
 800bbc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbc6:	2340      	movs	r3, #64	; 0x40
 800bbc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbd4:	f107 0308 	add.w	r3, r7, #8
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f7ff fde6 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bbe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbe4:	2133      	movs	r1, #51	; 0x33
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 f886 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bbec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbee:	69fb      	ldr	r3, [r7, #28]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3720      	adds	r7, #32
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bc00:	2300      	movs	r3, #0
 800bc02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bc04:	2302      	movs	r3, #2
 800bc06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bc08:	23c0      	movs	r3, #192	; 0xc0
 800bc0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc16:	f107 0308 	add.w	r3, r7, #8
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f7ff fdc5 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f956 	bl	800bed4 <SDMMC_GetCmdResp2>
 800bc28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc2a:	69fb      	ldr	r3, [r7, #28]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc42:	2309      	movs	r3, #9
 800bc44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bc46:	23c0      	movs	r3, #192	; 0xc0
 800bc48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc54:	f107 0308 	add.w	r3, r7, #8
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff fda6 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f000 f937 	bl	800bed4 <SDMMC_GetCmdResp2>
 800bc66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc68:	69fb      	ldr	r3, [r7, #28]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3720      	adds	r7, #32
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}

0800bc72 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b088      	sub	sp, #32
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
 800bc7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bc80:	2303      	movs	r3, #3
 800bc82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc84:	2340      	movs	r3, #64	; 0x40
 800bc86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc92:	f107 0308 	add.w	r3, r7, #8
 800bc96:	4619      	mov	r1, r3
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7ff fd87 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	2103      	movs	r1, #3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f99a 	bl	800bfdc <SDMMC_GetCmdResp6>
 800bca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bcc2:	230d      	movs	r3, #13
 800bcc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcc6:	2340      	movs	r3, #64	; 0x40
 800bcc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcca:	2300      	movs	r3, #0
 800bccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcd4:	f107 0308 	add.w	r3, r7, #8
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f7ff fd66 	bl	800b7ac <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bce0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bce4:	210d      	movs	r1, #13
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f806 	bl	800bcf8 <SDMMC_GetCmdResp1>
 800bcec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcee:	69fb      	ldr	r3, [r7, #28]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3720      	adds	r7, #32
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	460b      	mov	r3, r1
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd06:	4b70      	ldr	r3, [pc, #448]	; (800bec8 <SDMMC_GetCmdResp1+0x1d0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a70      	ldr	r2, [pc, #448]	; (800becc <SDMMC_GetCmdResp1+0x1d4>)
 800bd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd10:	0a5a      	lsrs	r2, r3, #9
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	fb02 f303 	mul.w	r3, r2, r3
 800bd18:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	1e5a      	subs	r2, r3, #1
 800bd1e:	61fa      	str	r2, [r7, #28]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd28:	e0c9      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0ef      	beq.n	800bd1a <SDMMC_GetCmdResp1+0x22>
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1ea      	bne.n	800bd1a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2204      	movs	r2, #4
 800bd54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd56:	2304      	movs	r3, #4
 800bd58:	e0b1      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e0a6      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	22c5      	movs	r2, #197	; 0xc5
 800bd74:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f7ff fd41 	bl	800b7fe <SDIO_GetCommandResponse>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	461a      	mov	r2, r3
 800bd80:	7afb      	ldrb	r3, [r7, #11]
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d001      	beq.n	800bd8a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e099      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	68f8      	ldr	r0, [r7, #12]
 800bd8e:	f7ff fd42 	bl	800b816 <SDIO_GetResponse>
 800bd92:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	4b4e      	ldr	r3, [pc, #312]	; (800bed0 <SDMMC_GetCmdResp1+0x1d8>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e08d      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	da02      	bge.n	800bdae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bda8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bdac:	e087      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d001      	beq.n	800bdbc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bdb8:	2340      	movs	r3, #64	; 0x40
 800bdba:	e080      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bdc6:	2380      	movs	r3, #128	; 0x80
 800bdc8:	e079      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bdd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdd8:	e071      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bde4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bde8:	e069      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bdf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdf8:	e061      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be08:	e059      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be18:	e051      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800be28:	e049      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800be38:	e041      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800be44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be48:	e039      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800be58:	e031      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800be68:	e029      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d002      	beq.n	800be7a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800be78:	e021      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800be88:	e019      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800be98:	e011      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bea4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bea8:	e009      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800beb4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800beb8:	e001      	b.n	800bebe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800beba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3720      	adds	r7, #32
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20000010 	.word	0x20000010
 800becc:	10624dd3 	.word	0x10624dd3
 800bed0:	fdffe008 	.word	0xfdffe008

0800bed4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bedc:	4b1f      	ldr	r3, [pc, #124]	; (800bf5c <SDMMC_GetCmdResp2+0x88>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a1f      	ldr	r2, [pc, #124]	; (800bf60 <SDMMC_GetCmdResp2+0x8c>)
 800bee2:	fba2 2303 	umull	r2, r3, r2, r3
 800bee6:	0a5b      	lsrs	r3, r3, #9
 800bee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800beec:	fb02 f303 	mul.w	r3, r2, r3
 800bef0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1e5a      	subs	r2, r3, #1
 800bef6:	60fa      	str	r2, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800befc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf00:	e026      	b.n	800bf50 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d0ef      	beq.n	800bef2 <SDMMC_GetCmdResp2+0x1e>
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1ea      	bne.n	800bef2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf20:	f003 0304 	and.w	r3, r3, #4
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d004      	beq.n	800bf32 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2204      	movs	r2, #4
 800bf2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf2e:	2304      	movs	r3, #4
 800bf30:	e00e      	b.n	800bf50 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d004      	beq.n	800bf48 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e003      	b.n	800bf50 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	22c5      	movs	r2, #197	; 0xc5
 800bf4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bc80      	pop	{r7}
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	20000010 	.word	0x20000010
 800bf60:	10624dd3 	.word	0x10624dd3

0800bf64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf6c:	4b19      	ldr	r3, [pc, #100]	; (800bfd4 <SDMMC_GetCmdResp3+0x70>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4a19      	ldr	r2, [pc, #100]	; (800bfd8 <SDMMC_GetCmdResp3+0x74>)
 800bf72:	fba2 2303 	umull	r2, r3, r2, r3
 800bf76:	0a5b      	lsrs	r3, r3, #9
 800bf78:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf7c:	fb02 f303 	mul.w	r3, r2, r3
 800bf80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	1e5a      	subs	r2, r3, #1
 800bf86:	60fa      	str	r2, [r7, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf90:	e01b      	b.n	800bfca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d0ef      	beq.n	800bf82 <SDMMC_GetCmdResp3+0x1e>
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1ea      	bne.n	800bf82 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb0:	f003 0304 	and.w	r3, r3, #4
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d004      	beq.n	800bfc2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2204      	movs	r2, #4
 800bfbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfbe:	2304      	movs	r3, #4
 800bfc0:	e003      	b.n	800bfca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	22c5      	movs	r2, #197	; 0xc5
 800bfc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bc80      	pop	{r7}
 800bfd2:	4770      	bx	lr
 800bfd4:	20000010 	.word	0x20000010
 800bfd8:	10624dd3 	.word	0x10624dd3

0800bfdc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	607a      	str	r2, [r7, #4]
 800bfe8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfea:	4b35      	ldr	r3, [pc, #212]	; (800c0c0 <SDMMC_GetCmdResp6+0xe4>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4a35      	ldr	r2, [pc, #212]	; (800c0c4 <SDMMC_GetCmdResp6+0xe8>)
 800bff0:	fba2 2303 	umull	r2, r3, r2, r3
 800bff4:	0a5b      	lsrs	r3, r3, #9
 800bff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bffa:	fb02 f303 	mul.w	r3, r2, r3
 800bffe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	1e5a      	subs	r2, r3, #1
 800c004:	61fa      	str	r2, [r7, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c00a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c00e:	e052      	b.n	800c0b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c014:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d0ef      	beq.n	800c000 <SDMMC_GetCmdResp6+0x24>
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1ea      	bne.n	800c000 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02e:	f003 0304 	and.w	r3, r3, #4
 800c032:	2b00      	cmp	r3, #0
 800c034:	d004      	beq.n	800c040 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2204      	movs	r2, #4
 800c03a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c03c:	2304      	movs	r3, #4
 800c03e:	e03a      	b.n	800c0b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d004      	beq.n	800c056 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2201      	movs	r2, #1
 800c050:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c052:	2301      	movs	r3, #1
 800c054:	e02f      	b.n	800c0b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f7ff fbd1 	bl	800b7fe <SDIO_GetCommandResponse>
 800c05c:	4603      	mov	r3, r0
 800c05e:	461a      	mov	r2, r3
 800c060:	7afb      	ldrb	r3, [r7, #11]
 800c062:	4293      	cmp	r3, r2
 800c064:	d001      	beq.n	800c06a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c066:	2301      	movs	r3, #1
 800c068:	e025      	b.n	800c0b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	22c5      	movs	r2, #197	; 0xc5
 800c06e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c070:	2100      	movs	r1, #0
 800c072:	68f8      	ldr	r0, [r7, #12]
 800c074:	f7ff fbcf 	bl	800b816 <SDIO_GetResponse>
 800c078:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c080:	2b00      	cmp	r3, #0
 800c082:	d106      	bne.n	800c092 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	0c1b      	lsrs	r3, r3, #16
 800c088:	b29a      	uxth	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c08e:	2300      	movs	r3, #0
 800c090:	e011      	b.n	800c0b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d002      	beq.n	800c0a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c09c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0a0:	e009      	b.n	800c0b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d002      	beq.n	800c0b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0b0:	e001      	b.n	800c0b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3720      	adds	r7, #32
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000010 	.word	0x20000010
 800c0c4:	10624dd3 	.word	0x10624dd3

0800c0c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0d0:	4b22      	ldr	r3, [pc, #136]	; (800c15c <SDMMC_GetCmdResp7+0x94>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a22      	ldr	r2, [pc, #136]	; (800c160 <SDMMC_GetCmdResp7+0x98>)
 800c0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0da:	0a5b      	lsrs	r3, r3, #9
 800c0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0e0:	fb02 f303 	mul.w	r3, r2, r3
 800c0e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	1e5a      	subs	r2, r3, #1
 800c0ea:	60fa      	str	r2, [r7, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d102      	bne.n	800c0f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c0f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c0f4:	e02c      	b.n	800c150 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c102:	2b00      	cmp	r3, #0
 800c104:	d0ef      	beq.n	800c0e6 <SDMMC_GetCmdResp7+0x1e>
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1ea      	bne.n	800c0e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c114:	f003 0304 	and.w	r3, r3, #4
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d004      	beq.n	800c126 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2204      	movs	r2, #4
 800c120:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c122:	2304      	movs	r3, #4
 800c124:	e014      	b.n	800c150 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12a:	f003 0301 	and.w	r3, r3, #1
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d004      	beq.n	800c13c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2201      	movs	r2, #1
 800c136:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c138:	2301      	movs	r3, #1
 800c13a:	e009      	b.n	800c150 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	d002      	beq.n	800c14e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2240      	movs	r2, #64	; 0x40
 800c14c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c14e:	2300      	movs	r3, #0
  
}
 800c150:	4618      	mov	r0, r3
 800c152:	3714      	adds	r7, #20
 800c154:	46bd      	mov	sp, r7
 800c156:	bc80      	pop	{r7}
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	20000010 	.word	0x20000010
 800c160:	10624dd3 	.word	0x10624dd3

0800c164 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c16c:	4b10      	ldr	r3, [pc, #64]	; (800c1b0 <SDMMC_GetCmdError+0x4c>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a10      	ldr	r2, [pc, #64]	; (800c1b4 <SDMMC_GetCmdError+0x50>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	0a5b      	lsrs	r3, r3, #9
 800c178:	f241 3288 	movw	r2, #5000	; 0x1388
 800c17c:	fb02 f303 	mul.w	r3, r2, r3
 800c180:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	1e5a      	subs	r2, r3, #1
 800c186:	60fa      	str	r2, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c18c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c190:	e009      	b.n	800c1a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d0f1      	beq.n	800c182 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	22c5      	movs	r2, #197	; 0xc5
 800c1a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3714      	adds	r7, #20
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bc80      	pop	{r7}
 800c1ae:	4770      	bx	lr
 800c1b0:	20000010 	.word	0x20000010
 800c1b4:	10624dd3 	.word	0x10624dd3

0800c1b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	b480      	push	{r7}
 800c1bc:	b083      	sub	sp, #12
 800c1be:	af00      	add	r7, sp, #0
 800c1c0:	6078      	str	r0, [r7, #4]
 800c1c2:	f107 0014 	add.w	r0, r7, #20
 800c1c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bc80      	pop	{r7}
 800c1d4:	b004      	add	sp, #16
 800c1d6:	4770      	bx	lr

0800c1d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c1e8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c1ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bc80      	pop	{r7}
 800c202:	4770      	bx	lr

0800c204 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c20c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c210:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c218:	b29a      	uxth	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	b29b      	uxth	r3, r3
 800c21e:	43db      	mvns	r3, r3
 800c220:	b29b      	uxth	r3, r3
 800c222:	4013      	ands	r3, r2
 800c224:	b29a      	uxth	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3714      	adds	r7, #20
 800c232:	46bd      	mov	sp, r7
 800c234:	bc80      	pop	{r7}
 800c236:	4770      	bx	lr

0800c238 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	370c      	adds	r7, #12
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bc80      	pop	{r7}
 800c24e:	4770      	bx	lr

0800c250 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c250:	b084      	sub	sp, #16
 800c252:	b480      	push	{r7}
 800c254:	b083      	sub	sp, #12
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	f107 0014 	add.w	r0, r7, #20
 800c25e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	bc80      	pop	{r7}
 800c28c:	b004      	add	sp, #16
 800c28e:	4770      	bx	lr

0800c290 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c290:	b480      	push	{r7}
 800c292:	b09d      	sub	sp, #116	; 0x74
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4413      	add	r3, r2
 800c2aa:	881b      	ldrh	r3, [r3, #0]
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	78db      	ldrb	r3, [r3, #3]
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d81f      	bhi.n	800c302 <USB_ActivateEndpoint+0x72>
 800c2c2:	a201      	add	r2, pc, #4	; (adr r2, 800c2c8 <USB_ActivateEndpoint+0x38>)
 800c2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c8:	0800c2d9 	.word	0x0800c2d9
 800c2cc:	0800c2f5 	.word	0x0800c2f5
 800c2d0:	0800c30b 	.word	0x0800c30b
 800c2d4:	0800c2e7 	.word	0x0800c2e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c2d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c2dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c2e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c2e4:	e012      	b.n	800c30c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c2e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c2ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c2ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c2f2:	e00b      	b.n	800c30c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c2f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c2f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c300:	e004      	b.n	800c30c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c308:	e000      	b.n	800c30c <USB_ActivateEndpoint+0x7c>
      break;
 800c30a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	441a      	add	r2, r3
 800c316:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c31a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c31e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4413      	add	r3, r2
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c344:	b29a      	uxth	r2, r3
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	4313      	orrs	r3, r2
 800c34e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	441a      	add	r2, r3
 800c35c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c370:	b29b      	uxth	r3, r3
 800c372:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	7b1b      	ldrb	r3, [r3, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f040 8178 	bne.w	800c66e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	785b      	ldrb	r3, [r3, #1]
 800c382:	2b00      	cmp	r3, #0
 800c384:	f000 8084 	beq.w	800c490 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	61bb      	str	r3, [r7, #24]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c392:	b29b      	uxth	r3, r3
 800c394:	461a      	mov	r2, r3
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	4413      	add	r3, r2
 800c39a:	61bb      	str	r3, [r7, #24]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	011a      	lsls	r2, r3, #4
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	88db      	ldrh	r3, [r3, #6]
 800c3b0:	085b      	lsrs	r3, r3, #1
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	827b      	strh	r3, [r7, #18]
 800c3ca:	8a7b      	ldrh	r3, [r7, #18]
 800c3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d01b      	beq.n	800c40c <USB_ActivateEndpoint+0x17c>
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	4413      	add	r3, r2
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ea:	823b      	strh	r3, [r7, #16]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	441a      	add	r2, r3
 800c3f6:	8a3b      	ldrh	r3, [r7, #16]
 800c3f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c404:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c408:	b29b      	uxth	r3, r3
 800c40a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	78db      	ldrb	r3, [r3, #3]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d020      	beq.n	800c456 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	4413      	add	r3, r2
 800c41e:	881b      	ldrh	r3, [r3, #0]
 800c420:	b29b      	uxth	r3, r3
 800c422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c42a:	81bb      	strh	r3, [r7, #12]
 800c42c:	89bb      	ldrh	r3, [r7, #12]
 800c42e:	f083 0320 	eor.w	r3, r3, #32
 800c432:	81bb      	strh	r3, [r7, #12]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	441a      	add	r2, r3
 800c43e:	89bb      	ldrh	r3, [r7, #12]
 800c440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c450:	b29b      	uxth	r3, r3
 800c452:	8013      	strh	r3, [r2, #0]
 800c454:	e2d5      	b.n	800ca02 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	4413      	add	r3, r2
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	b29b      	uxth	r3, r3
 800c464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c46c:	81fb      	strh	r3, [r7, #14]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	441a      	add	r2, r3
 800c478:	89fb      	ldrh	r3, [r7, #14]
 800c47a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c47e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	8013      	strh	r3, [r2, #0]
 800c48e:	e2b8      	b.n	800ca02 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	633b      	str	r3, [r7, #48]	; 0x30
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	461a      	mov	r2, r3
 800c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a0:	4413      	add	r3, r2
 800c4a2:	633b      	str	r3, [r7, #48]	; 0x30
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	011a      	lsls	r2, r3, #4
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ac:	4413      	add	r3, r2
 800c4ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	88db      	ldrh	r3, [r3, #6]
 800c4b8:	085b      	lsrs	r3, r3, #1
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	005b      	lsls	r3, r3, #1
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d4:	4413      	add	r3, r2
 800c4d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	011a      	lsls	r2, r3, #4
 800c4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f6:	801a      	strh	r2, [r3, #0]
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	2b3e      	cmp	r3, #62	; 0x3e
 800c4fe:	d91d      	bls.n	800c53c <USB_ActivateEndpoint+0x2ac>
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	095b      	lsrs	r3, r3, #5
 800c506:	66bb      	str	r3, [r7, #104]	; 0x68
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	f003 031f 	and.w	r3, r3, #31
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <USB_ActivateEndpoint+0x28a>
 800c514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c516:	3b01      	subs	r3, #1
 800c518:	66bb      	str	r3, [r7, #104]	; 0x68
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	881b      	ldrh	r3, [r3, #0]
 800c51e:	b29a      	uxth	r2, r3
 800c520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c522:	b29b      	uxth	r3, r3
 800c524:	029b      	lsls	r3, r3, #10
 800c526:	b29b      	uxth	r3, r3
 800c528:	4313      	orrs	r3, r2
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c534:	b29a      	uxth	r2, r3
 800c536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c538:	801a      	strh	r2, [r3, #0]
 800c53a:	e026      	b.n	800c58a <USB_ActivateEndpoint+0x2fa>
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10a      	bne.n	800c55a <USB_ActivateEndpoint+0x2ca>
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c54e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c552:	b29a      	uxth	r2, r3
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	801a      	strh	r2, [r3, #0]
 800c558:	e017      	b.n	800c58a <USB_ActivateEndpoint+0x2fa>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	691b      	ldr	r3, [r3, #16]
 800c55e:	085b      	lsrs	r3, r3, #1
 800c560:	66bb      	str	r3, [r7, #104]	; 0x68
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	f003 0301 	and.w	r3, r3, #1
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d002      	beq.n	800c574 <USB_ActivateEndpoint+0x2e4>
 800c56e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c570:	3301      	adds	r3, #1
 800c572:	66bb      	str	r3, [r7, #104]	; 0x68
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	b29a      	uxth	r2, r3
 800c57a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	029b      	lsls	r3, r3, #10
 800c580:	b29b      	uxth	r3, r3
 800c582:	4313      	orrs	r3, r2
 800c584:	b29a      	uxth	r2, r3
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4413      	add	r3, r2
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	847b      	strh	r3, [r7, #34]	; 0x22
 800c598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c59a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d01b      	beq.n	800c5da <USB_ActivateEndpoint+0x34a>
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4413      	add	r3, r2
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5b8:	843b      	strh	r3, [r7, #32]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	441a      	add	r2, r3
 800c5c4:	8c3b      	ldrh	r3, [r7, #32]
 800c5c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c5d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d124      	bne.n	800c62c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4413      	add	r3, r2
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5f8:	83bb      	strh	r3, [r7, #28]
 800c5fa:	8bbb      	ldrh	r3, [r7, #28]
 800c5fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c600:	83bb      	strh	r3, [r7, #28]
 800c602:	8bbb      	ldrh	r3, [r7, #28]
 800c604:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c608:	83bb      	strh	r3, [r7, #28]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	441a      	add	r2, r3
 800c614:	8bbb      	ldrh	r3, [r7, #28]
 800c616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c61a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c61e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c626:	b29b      	uxth	r3, r3
 800c628:	8013      	strh	r3, [r2, #0]
 800c62a:	e1ea      	b.n	800ca02 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	b29b      	uxth	r3, r3
 800c63a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c642:	83fb      	strh	r3, [r7, #30]
 800c644:	8bfb      	ldrh	r3, [r7, #30]
 800c646:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c64a:	83fb      	strh	r3, [r7, #30]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	441a      	add	r2, r3
 800c656:	8bfb      	ldrh	r3, [r7, #30]
 800c658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c65c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c668:	b29b      	uxth	r3, r3
 800c66a:	8013      	strh	r3, [r2, #0]
 800c66c:	e1c9      	b.n	800ca02 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	78db      	ldrb	r3, [r3, #3]
 800c672:	2b02      	cmp	r3, #2
 800c674:	d11e      	bne.n	800c6b4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	b29b      	uxth	r3, r3
 800c684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c68c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	441a      	add	r2, r3
 800c69a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c69e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c6aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	8013      	strh	r3, [r2, #0]
 800c6b2:	e01d      	b.n	800c6f0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	4413      	add	r3, r2
 800c6be:	881b      	ldrh	r3, [r3, #0]
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c6c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	441a      	add	r2, r3
 800c6d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c6dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c700:	4413      	add	r3, r2
 800c702:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	011a      	lsls	r2, r3, #4
 800c70a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c70c:	4413      	add	r3, r2
 800c70e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c712:	65bb      	str	r3, [r7, #88]	; 0x58
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	891b      	ldrh	r3, [r3, #8]
 800c718:	085b      	lsrs	r3, r3, #1
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	b29a      	uxth	r2, r3
 800c720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c722:	801a      	strh	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	657b      	str	r3, [r7, #84]	; 0x54
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c72e:	b29b      	uxth	r3, r3
 800c730:	461a      	mov	r2, r3
 800c732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c734:	4413      	add	r3, r2
 800c736:	657b      	str	r3, [r7, #84]	; 0x54
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	011a      	lsls	r2, r3, #4
 800c73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c740:	4413      	add	r3, r2
 800c742:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c746:	653b      	str	r3, [r7, #80]	; 0x50
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	895b      	ldrh	r3, [r3, #10]
 800c74c:	085b      	lsrs	r3, r3, #1
 800c74e:	b29b      	uxth	r3, r3
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	b29a      	uxth	r2, r3
 800c754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c756:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	785b      	ldrb	r3, [r3, #1]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f040 8093 	bne.w	800c888 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c772:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d01b      	beq.n	800c7b6 <USB_ActivateEndpoint+0x526>
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	009b      	lsls	r3, r3, #2
 800c786:	4413      	add	r3, r2
 800c788:	881b      	ldrh	r3, [r3, #0]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c794:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	441a      	add	r2, r3
 800c7a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c7a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	4413      	add	r3, r2
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c7c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d01b      	beq.n	800c806 <USB_ActivateEndpoint+0x576>
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7e4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	441a      	add	r2, r3
 800c7f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c7f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c802:	b29b      	uxth	r3, r3
 800c804:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	009b      	lsls	r3, r3, #2
 800c80e:	4413      	add	r3, r2
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	b29b      	uxth	r3, r3
 800c814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c81c:	873b      	strh	r3, [r7, #56]	; 0x38
 800c81e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c820:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c824:	873b      	strh	r3, [r7, #56]	; 0x38
 800c826:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c828:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c82c:	873b      	strh	r3, [r7, #56]	; 0x38
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	441a      	add	r2, r3
 800c838:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c83a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c83e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	881b      	ldrh	r3, [r3, #0]
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c864:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	009b      	lsls	r3, r3, #2
 800c86e:	441a      	add	r2, r3
 800c870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c87a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c87e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c882:	b29b      	uxth	r3, r3
 800c884:	8013      	strh	r3, [r2, #0]
 800c886:	e0bc      	b.n	800ca02 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c89c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d01d      	beq.n	800c8e0 <USB_ActivateEndpoint+0x650>
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	441a      	add	r2, r3
 800c8c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c8cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c8f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01d      	beq.n	800c938 <USB_ActivateEndpoint+0x6a8>
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4413      	add	r3, r2
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	b29b      	uxth	r3, r3
 800c90a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c912:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c916:	687a      	ldr	r2, [r7, #4]
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	441a      	add	r2, r3
 800c920:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c92c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c930:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c934:	b29b      	uxth	r3, r3
 800c936:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	78db      	ldrb	r3, [r3, #3]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d024      	beq.n	800c98a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c956:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c95a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c95e:	f083 0320 	eor.w	r3, r3, #32
 800c962:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	441a      	add	r2, r3
 800c970:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c97c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c984:	b29b      	uxth	r3, r3
 800c986:	8013      	strh	r3, [r2, #0]
 800c988:	e01d      	b.n	800c9c6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4413      	add	r3, r2
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	b29b      	uxth	r3, r3
 800c998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c99c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	441a      	add	r2, r3
 800c9ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	881b      	ldrh	r3, [r3, #0]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	441a      	add	r2, r3
 800c9ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c9ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ca02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3774      	adds	r7, #116	; 0x74
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bc80      	pop	{r7}
 800ca0e:	4770      	bx	lr

0800ca10 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b08d      	sub	sp, #52	; 0x34
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	7b1b      	ldrb	r3, [r3, #12]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f040 808e 	bne.w	800cb40 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	785b      	ldrb	r3, [r3, #1]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d044      	beq.n	800cab6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	881b      	ldrh	r3, [r3, #0]
 800ca38:	81bb      	strh	r3, [r7, #12]
 800ca3a:	89bb      	ldrh	r3, [r7, #12]
 800ca3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d01b      	beq.n	800ca7c <USB_DeactivateEndpoint+0x6c>
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4413      	add	r3, r2
 800ca4e:	881b      	ldrh	r3, [r3, #0]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca5a:	817b      	strh	r3, [r7, #10]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	441a      	add	r2, r3
 800ca66:	897b      	ldrh	r3, [r7, #10]
 800ca68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	4413      	add	r3, r2
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca92:	813b      	strh	r3, [r7, #8]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	441a      	add	r2, r3
 800ca9e:	893b      	ldrh	r3, [r7, #8]
 800caa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	8013      	strh	r3, [r2, #0]
 800cab4:	e192      	b.n	800cddc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	4413      	add	r3, r2
 800cac0:	881b      	ldrh	r3, [r3, #0]
 800cac2:	827b      	strh	r3, [r7, #18]
 800cac4:	8a7b      	ldrh	r3, [r7, #18]
 800cac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d01b      	beq.n	800cb06 <USB_DeactivateEndpoint+0xf6>
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	4413      	add	r3, r2
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cae4:	823b      	strh	r3, [r7, #16]
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	441a      	add	r2, r3
 800caf0:	8a3b      	ldrh	r3, [r7, #16]
 800caf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800caf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cafa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	4413      	add	r3, r2
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb1c:	81fb      	strh	r3, [r7, #14]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	441a      	add	r2, r3
 800cb28:	89fb      	ldrh	r3, [r7, #14]
 800cb2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	8013      	strh	r3, [r2, #0]
 800cb3e:	e14d      	b.n	800cddc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	785b      	ldrb	r3, [r3, #1]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f040 80a5 	bne.w	800cc94 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	881b      	ldrh	r3, [r3, #0]
 800cb56:	843b      	strh	r3, [r7, #32]
 800cb58:	8c3b      	ldrh	r3, [r7, #32]
 800cb5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d01b      	beq.n	800cb9a <USB_DeactivateEndpoint+0x18a>
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	881b      	ldrh	r3, [r3, #0]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb78:	83fb      	strh	r3, [r7, #30]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	441a      	add	r2, r3
 800cb84:	8bfb      	ldrh	r3, [r7, #30]
 800cb86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	83bb      	strh	r3, [r7, #28]
 800cba8:	8bbb      	ldrh	r3, [r7, #28]
 800cbaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d01b      	beq.n	800cbea <USB_DeactivateEndpoint+0x1da>
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	009b      	lsls	r3, r3, #2
 800cbba:	4413      	add	r3, r2
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbc8:	837b      	strh	r3, [r7, #26]
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	441a      	add	r2, r3
 800cbd4:	8b7b      	ldrh	r3, [r7, #26]
 800cbd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbe2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	881b      	ldrh	r3, [r3, #0]
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc00:	833b      	strh	r3, [r7, #24]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	441a      	add	r2, r3
 800cc0c:	8b3b      	ldrh	r3, [r7, #24]
 800cc0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	4413      	add	r3, r2
 800cc2c:	881b      	ldrh	r3, [r3, #0]
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc38:	82fb      	strh	r3, [r7, #22]
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	441a      	add	r2, r3
 800cc44:	8afb      	ldrh	r3, [r7, #22]
 800cc46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc70:	82bb      	strh	r3, [r7, #20]
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	441a      	add	r2, r3
 800cc7c:	8abb      	ldrh	r3, [r7, #20]
 800cc7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	8013      	strh	r3, [r2, #0]
 800cc92:	e0a3      	b.n	800cddc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	881b      	ldrh	r3, [r3, #0]
 800cca0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cca2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01b      	beq.n	800cce4 <USB_DeactivateEndpoint+0x2d4>
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	441a      	add	r2, r3
 800ccce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ccd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ccdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ccf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ccf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01b      	beq.n	800cd34 <USB_DeactivateEndpoint+0x324>
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4413      	add	r3, r2
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd12:	853b      	strh	r3, [r7, #40]	; 0x28
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	441a      	add	r2, r3
 800cd1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd30:	b29b      	uxth	r3, r3
 800cd32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	441a      	add	r2, r3
 800cd56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cd64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd82:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	441a      	add	r2, r3
 800cd8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cdb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdba:	847b      	strh	r3, [r7, #34]	; 0x22
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	441a      	add	r2, r3
 800cdc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cddc:	2300      	movs	r3, #0
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3734      	adds	r7, #52	; 0x34
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bc80      	pop	{r7}
 800cde6:	4770      	bx	lr

0800cde8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b0c2      	sub	sp, #264	; 0x108
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdf6:	6018      	str	r0, [r3, #0]
 800cdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce00:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ce02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	f040 86b7 	bne.w	800db82 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ce14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	699a      	ldr	r2, [r3, #24]
 800ce20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d908      	bls.n	800ce42 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ce30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ce40:	e007      	b.n	800ce52 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ce42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ce52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	7b1b      	ldrb	r3, [r3, #12]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d13a      	bne.n	800ced8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ce62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6959      	ldr	r1, [r3, #20]
 800ce6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	88da      	ldrh	r2, [r3, #6]
 800ce7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ce84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ce88:	6800      	ldr	r0, [r0, #0]
 800ce8a:	f001 fc9c 	bl	800e7c6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ce8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	613b      	str	r3, [r7, #16]
 800ce9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	461a      	mov	r2, r3
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	4413      	add	r3, r2
 800ceb0:	613b      	str	r3, [r7, #16]
 800ceb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	011a      	lsls	r2, r3, #4
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	4413      	add	r3, r2
 800cec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cece:	b29a      	uxth	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	801a      	strh	r2, [r3, #0]
 800ced4:	f000 be1f 	b.w	800db16 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ced8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	78db      	ldrb	r3, [r3, #3]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	f040 8462 	bne.w	800d7ae <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ceea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	6a1a      	ldr	r2, [r3, #32]
 800cef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cefa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	f240 83df 	bls.w	800d6c6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cf08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf2e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800cf32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	441a      	add	r2, r3
 800cf4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cf50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cf5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cf64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6a1a      	ldr	r2, [r3, #32]
 800cf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf74:	1ad2      	subs	r2, r2, r3
 800cf76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cf82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	4413      	add	r3, r2
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 81c7 	beq.w	800d338 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cfaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	785b      	ldrb	r3, [r3, #1]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d177      	bne.n	800d0b6 <USB_EPStartXfer+0x2ce>
 800cfc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe6:	4413      	add	r3, r2
 800cfe8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	011a      	lsls	r2, r3, #4
 800cff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffa:	4413      	add	r3, r2
 800cffc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d000:	627b      	str	r3, [r7, #36]	; 0x24
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	b29b      	uxth	r3, r3
 800d008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	801a      	strh	r2, [r3, #0]
 800d012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d016:	2b3e      	cmp	r3, #62	; 0x3e
 800d018:	d921      	bls.n	800d05e <USB_EPStartXfer+0x276>
 800d01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d01e:	095b      	lsrs	r3, r3, #5
 800d020:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d028:	f003 031f 	and.w	r3, r3, #31
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d104      	bne.n	800d03a <USB_EPStartXfer+0x252>
 800d030:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d034:	3b01      	subs	r3, #1
 800d036:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	b29a      	uxth	r2, r3
 800d040:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d044:	b29b      	uxth	r3, r3
 800d046:	029b      	lsls	r3, r3, #10
 800d048:	b29b      	uxth	r3, r3
 800d04a:	4313      	orrs	r3, r2
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d056:	b29a      	uxth	r2, r3
 800d058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05a:	801a      	strh	r2, [r3, #0]
 800d05c:	e050      	b.n	800d100 <USB_EPStartXfer+0x318>
 800d05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10a      	bne.n	800d07c <USB_EPStartXfer+0x294>
 800d066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d074:	b29a      	uxth	r2, r3
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	801a      	strh	r2, [r3, #0]
 800d07a:	e041      	b.n	800d100 <USB_EPStartXfer+0x318>
 800d07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d080:	085b      	lsrs	r3, r3, #1
 800d082:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d08a:	f003 0301 	and.w	r3, r3, #1
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d004      	beq.n	800d09c <USB_EPStartXfer+0x2b4>
 800d092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d096:	3301      	adds	r3, #1
 800d098:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	029b      	lsls	r3, r3, #10
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	801a      	strh	r2, [r3, #0]
 800d0b4:	e024      	b.n	800d100 <USB_EPStartXfer+0x318>
 800d0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	785b      	ldrb	r3, [r3, #1]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d11c      	bne.n	800d100 <USB_EPStartXfer+0x318>
 800d0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0da:	4413      	add	r3, r2
 800d0dc:	633b      	str	r3, [r7, #48]	; 0x30
 800d0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	011a      	lsls	r2, r3, #4
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ee:	4413      	add	r3, r2
 800d0f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	895b      	ldrh	r3, [r3, #10]
 800d10c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	6959      	ldr	r1, [r3, #20]
 800d11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d120:	b29b      	uxth	r3, r3
 800d122:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d126:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d12a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d12e:	6800      	ldr	r0, [r0, #0]
 800d130:	f001 fb49 	bl	800e7c6 <USB_WritePMA>
            ep->xfer_buff += len;
 800d134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	695a      	ldr	r2, [r3, #20]
 800d140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d144:	441a      	add	r2, r3
 800d146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d14a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	6a1a      	ldr	r2, [r3, #32]
 800d15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d90f      	bls.n	800d18e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6a1a      	ldr	r2, [r3, #32]
 800d17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d17e:	1ad2      	subs	r2, r2, r3
 800d180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	621a      	str	r2, [r3, #32]
 800d18c:	e00e      	b.n	800d1ac <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	785b      	ldrb	r3, [r3, #1]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d177      	bne.n	800d2ac <USB_EPStartXfer+0x4c4>
 800d1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	61bb      	str	r3, [r7, #24]
 800d1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	461a      	mov	r2, r3
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	4413      	add	r3, r2
 800d1de:	61bb      	str	r3, [r7, #24]
 800d1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	011a      	lsls	r2, r3, #4
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d202:	b29a      	uxth	r2, r3
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	801a      	strh	r2, [r3, #0]
 800d208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d20c:	2b3e      	cmp	r3, #62	; 0x3e
 800d20e:	d921      	bls.n	800d254 <USB_EPStartXfer+0x46c>
 800d210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d214:	095b      	lsrs	r3, r3, #5
 800d216:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d21e:	f003 031f 	and.w	r3, r3, #31
 800d222:	2b00      	cmp	r3, #0
 800d224:	d104      	bne.n	800d230 <USB_EPStartXfer+0x448>
 800d226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d22a:	3b01      	subs	r3, #1
 800d22c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	881b      	ldrh	r3, [r3, #0]
 800d234:	b29a      	uxth	r2, r3
 800d236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	029b      	lsls	r3, r3, #10
 800d23e:	b29b      	uxth	r3, r3
 800d240:	4313      	orrs	r3, r2
 800d242:	b29b      	uxth	r3, r3
 800d244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	801a      	strh	r2, [r3, #0]
 800d252:	e056      	b.n	800d302 <USB_EPStartXfer+0x51a>
 800d254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10a      	bne.n	800d272 <USB_EPStartXfer+0x48a>
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	881b      	ldrh	r3, [r3, #0]
 800d260:	b29b      	uxth	r3, r3
 800d262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	801a      	strh	r2, [r3, #0]
 800d270:	e047      	b.n	800d302 <USB_EPStartXfer+0x51a>
 800d272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d276:	085b      	lsrs	r3, r3, #1
 800d278:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	2b00      	cmp	r3, #0
 800d286:	d004      	beq.n	800d292 <USB_EPStartXfer+0x4aa>
 800d288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d28c:	3301      	adds	r3, #1
 800d28e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	881b      	ldrh	r3, [r3, #0]
 800d296:	b29a      	uxth	r2, r3
 800d298:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	029b      	lsls	r3, r3, #10
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	801a      	strh	r2, [r3, #0]
 800d2aa:	e02a      	b.n	800d302 <USB_EPStartXfer+0x51a>
 800d2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	785b      	ldrb	r3, [r3, #1]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d122      	bne.n	800d302 <USB_EPStartXfer+0x51a>
 800d2bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	623b      	str	r3, [r7, #32]
 800d2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	461a      	mov	r2, r3
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	4413      	add	r3, r2
 800d2de:	623b      	str	r3, [r7, #32]
 800d2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	011a      	lsls	r2, r3, #4
 800d2ee:	6a3b      	ldr	r3, [r7, #32]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d2f6:	61fb      	str	r3, [r7, #28]
 800d2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	69fb      	ldr	r3, [r7, #28]
 800d300:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	891b      	ldrh	r3, [r3, #8]
 800d30e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	6959      	ldr	r1, [r3, #20]
 800d31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d322:	b29b      	uxth	r3, r3
 800d324:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d328:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d32c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d330:	6800      	ldr	r0, [r0, #0]
 800d332:	f001 fa48 	bl	800e7c6 <USB_WritePMA>
 800d336:	e3ee      	b.n	800db16 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	785b      	ldrb	r3, [r3, #1]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d177      	bne.n	800d438 <USB_EPStartXfer+0x650>
 800d348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d34c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	64bb      	str	r3, [r7, #72]	; 0x48
 800d354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d362:	b29b      	uxth	r3, r3
 800d364:	461a      	mov	r2, r3
 800d366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d368:	4413      	add	r3, r2
 800d36a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	011a      	lsls	r2, r3, #4
 800d37a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37c:	4413      	add	r3, r2
 800d37e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d382:	647b      	str	r3, [r7, #68]	; 0x44
 800d384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d386:	881b      	ldrh	r3, [r3, #0]
 800d388:	b29b      	uxth	r3, r3
 800d38a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d38e:	b29a      	uxth	r2, r3
 800d390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d392:	801a      	strh	r2, [r3, #0]
 800d394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d398:	2b3e      	cmp	r3, #62	; 0x3e
 800d39a:	d921      	bls.n	800d3e0 <USB_EPStartXfer+0x5f8>
 800d39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3a0:	095b      	lsrs	r3, r3, #5
 800d3a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3aa:	f003 031f 	and.w	r3, r3, #31
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d104      	bne.n	800d3bc <USB_EPStartXfer+0x5d4>
 800d3b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	029b      	lsls	r3, r3, #10
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3dc:	801a      	strh	r2, [r3, #0]
 800d3de:	e056      	b.n	800d48e <USB_EPStartXfer+0x6a6>
 800d3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d10a      	bne.n	800d3fe <USB_EPStartXfer+0x616>
 800d3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3ea:	881b      	ldrh	r3, [r3, #0]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3fa:	801a      	strh	r2, [r3, #0]
 800d3fc:	e047      	b.n	800d48e <USB_EPStartXfer+0x6a6>
 800d3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d402:	085b      	lsrs	r3, r3, #1
 800d404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d40c:	f003 0301 	and.w	r3, r3, #1
 800d410:	2b00      	cmp	r3, #0
 800d412:	d004      	beq.n	800d41e <USB_EPStartXfer+0x636>
 800d414:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d418:	3301      	adds	r3, #1
 800d41a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d41e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d420:	881b      	ldrh	r3, [r3, #0]
 800d422:	b29a      	uxth	r2, r3
 800d424:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d428:	b29b      	uxth	r3, r3
 800d42a:	029b      	lsls	r3, r3, #10
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	4313      	orrs	r3, r2
 800d430:	b29a      	uxth	r2, r3
 800d432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d434:	801a      	strh	r2, [r3, #0]
 800d436:	e02a      	b.n	800d48e <USB_EPStartXfer+0x6a6>
 800d438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	785b      	ldrb	r3, [r3, #1]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d122      	bne.n	800d48e <USB_EPStartXfer+0x6a6>
 800d448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d44c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	653b      	str	r3, [r7, #80]	; 0x50
 800d454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d462:	b29b      	uxth	r3, r3
 800d464:	461a      	mov	r2, r3
 800d466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d468:	4413      	add	r3, r2
 800d46a:	653b      	str	r3, [r7, #80]	; 0x50
 800d46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	011a      	lsls	r2, r3, #4
 800d47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d47c:	4413      	add	r3, r2
 800d47e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d482:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d488:	b29a      	uxth	r2, r3
 800d48a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d48c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	891b      	ldrh	r3, [r3, #8]
 800d49a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d49e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	6959      	ldr	r1, [r3, #20]
 800d4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d4b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d4b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d4bc:	6800      	ldr	r0, [r0, #0]
 800d4be:	f001 f982 	bl	800e7c6 <USB_WritePMA>
            ep->xfer_buff += len;
 800d4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	695a      	ldr	r2, [r3, #20]
 800d4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4d2:	441a      	add	r2, r3
 800d4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6a1a      	ldr	r2, [r3, #32]
 800d4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d90f      	bls.n	800d51c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6a1a      	ldr	r2, [r3, #32]
 800d508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d50c:	1ad2      	subs	r2, r2, r3
 800d50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	621a      	str	r2, [r3, #32]
 800d51a:	e00e      	b.n	800d53a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6a1b      	ldr	r3, [r3, #32]
 800d528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2200      	movs	r2, #0
 800d538:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d53e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	643b      	str	r3, [r7, #64]	; 0x40
 800d546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d54a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	785b      	ldrb	r3, [r3, #1]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d177      	bne.n	800d646 <USB_EPStartXfer+0x85e>
 800d556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	63bb      	str	r3, [r7, #56]	; 0x38
 800d562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d570:	b29b      	uxth	r3, r3
 800d572:	461a      	mov	r2, r3
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	4413      	add	r3, r2
 800d578:	63bb      	str	r3, [r7, #56]	; 0x38
 800d57a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d57e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	011a      	lsls	r2, r3, #4
 800d588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d58a:	4413      	add	r3, r2
 800d58c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d590:	637b      	str	r3, [r7, #52]	; 0x34
 800d592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	b29b      	uxth	r3, r3
 800d598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a0:	801a      	strh	r2, [r3, #0]
 800d5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5a6:	2b3e      	cmp	r3, #62	; 0x3e
 800d5a8:	d921      	bls.n	800d5ee <USB_EPStartXfer+0x806>
 800d5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5ae:	095b      	lsrs	r3, r3, #5
 800d5b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5b8:	f003 031f 	and.w	r3, r3, #31
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d104      	bne.n	800d5ca <USB_EPStartXfer+0x7e2>
 800d5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5cc:	881b      	ldrh	r3, [r3, #0]
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	029b      	lsls	r3, r3, #10
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ea:	801a      	strh	r2, [r3, #0]
 800d5ec:	e050      	b.n	800d690 <USB_EPStartXfer+0x8a8>
 800d5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10a      	bne.n	800d60c <USB_EPStartXfer+0x824>
 800d5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d604:	b29a      	uxth	r2, r3
 800d606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d608:	801a      	strh	r2, [r3, #0]
 800d60a:	e041      	b.n	800d690 <USB_EPStartXfer+0x8a8>
 800d60c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d610:	085b      	lsrs	r3, r3, #1
 800d612:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d004      	beq.n	800d62c <USB_EPStartXfer+0x844>
 800d622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d626:	3301      	adds	r3, #1
 800d628:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	b29a      	uxth	r2, r3
 800d632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d636:	b29b      	uxth	r3, r3
 800d638:	029b      	lsls	r3, r3, #10
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	4313      	orrs	r3, r2
 800d63e:	b29a      	uxth	r2, r3
 800d640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d642:	801a      	strh	r2, [r3, #0]
 800d644:	e024      	b.n	800d690 <USB_EPStartXfer+0x8a8>
 800d646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	785b      	ldrb	r3, [r3, #1]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d11c      	bne.n	800d690 <USB_EPStartXfer+0x8a8>
 800d656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d65a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d664:	b29b      	uxth	r3, r3
 800d666:	461a      	mov	r2, r3
 800d668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d66a:	4413      	add	r3, r2
 800d66c:	643b      	str	r3, [r7, #64]	; 0x40
 800d66e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	011a      	lsls	r2, r3, #4
 800d67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d67e:	4413      	add	r3, r2
 800d680:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d684:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d68e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	895b      	ldrh	r3, [r3, #10]
 800d69c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6959      	ldr	r1, [r3, #20]
 800d6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d6b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d6ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d6be:	6800      	ldr	r0, [r0, #0]
 800d6c0:	f001 f881 	bl	800e7c6 <USB_WritePMA>
 800d6c4:	e227      	b.n	800db16 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d6f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6fc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d704:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d70e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	441a      	add	r2, r3
 800d71a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d71e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d72e:	b29b      	uxth	r3, r3
 800d730:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d73e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	461a      	mov	r2, r3
 800d750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d752:	4413      	add	r3, r2
 800d754:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	011a      	lsls	r2, r3, #4
 800d764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d766:	4413      	add	r3, r2
 800d768:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d76c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d772:	b29a      	uxth	r2, r3
 800d774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d776:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d77c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	891b      	ldrh	r3, [r3, #8]
 800d784:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d78c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6959      	ldr	r1, [r3, #20]
 800d794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d798:	b29b      	uxth	r3, r3
 800d79a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d79e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d7a2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d7a6:	6800      	ldr	r0, [r0, #0]
 800d7a8:	f001 f80d 	bl	800e7c6 <USB_WritePMA>
 800d7ac:	e1b3      	b.n	800db16 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6a1a      	ldr	r2, [r3, #32]
 800d7ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7be:	1ad2      	subs	r2, r2, r3
 800d7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f000 80c6 	beq.w	800d980 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	673b      	str	r3, [r7, #112]	; 0x70
 800d800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	785b      	ldrb	r3, [r3, #1]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d177      	bne.n	800d900 <USB_EPStartXfer+0xb18>
 800d810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d814:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	461a      	mov	r2, r3
 800d82e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d830:	4413      	add	r3, r2
 800d832:	66bb      	str	r3, [r7, #104]	; 0x68
 800d834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	011a      	lsls	r2, r3, #4
 800d842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d844:	4413      	add	r3, r2
 800d846:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d84a:	667b      	str	r3, [r7, #100]	; 0x64
 800d84c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d84e:	881b      	ldrh	r3, [r3, #0]
 800d850:	b29b      	uxth	r3, r3
 800d852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d856:	b29a      	uxth	r2, r3
 800d858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d85a:	801a      	strh	r2, [r3, #0]
 800d85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d860:	2b3e      	cmp	r3, #62	; 0x3e
 800d862:	d921      	bls.n	800d8a8 <USB_EPStartXfer+0xac0>
 800d864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d868:	095b      	lsrs	r3, r3, #5
 800d86a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d872:	f003 031f 	and.w	r3, r3, #31
 800d876:	2b00      	cmp	r3, #0
 800d878:	d104      	bne.n	800d884 <USB_EPStartXfer+0xa9c>
 800d87a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d87e:	3b01      	subs	r3, #1
 800d880:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	b29a      	uxth	r2, r3
 800d88a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d88e:	b29b      	uxth	r3, r3
 800d890:	029b      	lsls	r3, r3, #10
 800d892:	b29b      	uxth	r3, r3
 800d894:	4313      	orrs	r3, r2
 800d896:	b29b      	uxth	r3, r3
 800d898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d89c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8a4:	801a      	strh	r2, [r3, #0]
 800d8a6:	e050      	b.n	800d94a <USB_EPStartXfer+0xb62>
 800d8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d10a      	bne.n	800d8c6 <USB_EPStartXfer+0xade>
 800d8b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8c2:	801a      	strh	r2, [r3, #0]
 800d8c4:	e041      	b.n	800d94a <USB_EPStartXfer+0xb62>
 800d8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ca:	085b      	lsrs	r3, r3, #1
 800d8cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8d4:	f003 0301 	and.w	r3, r3, #1
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d004      	beq.n	800d8e6 <USB_EPStartXfer+0xafe>
 800d8dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d8e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	029b      	lsls	r3, r3, #10
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8fc:	801a      	strh	r2, [r3, #0]
 800d8fe:	e024      	b.n	800d94a <USB_EPStartXfer+0xb62>
 800d900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	785b      	ldrb	r3, [r3, #1]
 800d90c:	2b01      	cmp	r3, #1
 800d90e:	d11c      	bne.n	800d94a <USB_EPStartXfer+0xb62>
 800d910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d914:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d91e:	b29b      	uxth	r3, r3
 800d920:	461a      	mov	r2, r3
 800d922:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d924:	4413      	add	r3, r2
 800d926:	673b      	str	r3, [r7, #112]	; 0x70
 800d928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	011a      	lsls	r2, r3, #4
 800d936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d938:	4413      	add	r3, r2
 800d93a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d93e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d944:	b29a      	uxth	r2, r3
 800d946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d948:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	895b      	ldrh	r3, [r3, #10]
 800d956:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d95e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6959      	ldr	r1, [r3, #20]
 800d966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d970:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d974:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d978:	6800      	ldr	r0, [r0, #0]
 800d97a:	f000 ff24 	bl	800e7c6 <USB_WritePMA>
 800d97e:	e0ca      	b.n	800db16 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	785b      	ldrb	r3, [r3, #1]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d177      	bne.n	800da80 <USB_EPStartXfer+0xc98>
 800d990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9b0:	4413      	add	r3, r2
 800d9b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	011a      	lsls	r2, r3, #4
 800d9c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d9c4:	4413      	add	r3, r2
 800d9c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d9ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800d9cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ce:	881b      	ldrh	r3, [r3, #0]
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9da:	801a      	strh	r2, [r3, #0]
 800d9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9e0:	2b3e      	cmp	r3, #62	; 0x3e
 800d9e2:	d921      	bls.n	800da28 <USB_EPStartXfer+0xc40>
 800d9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9e8:	095b      	lsrs	r3, r3, #5
 800d9ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9f2:	f003 031f 	and.w	r3, r3, #31
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d104      	bne.n	800da04 <USB_EPStartXfer+0xc1c>
 800d9fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d9fe:	3b01      	subs	r3, #1
 800da00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da06:	881b      	ldrh	r3, [r3, #0]
 800da08:	b29a      	uxth	r2, r3
 800da0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da0e:	b29b      	uxth	r3, r3
 800da10:	029b      	lsls	r3, r3, #10
 800da12:	b29b      	uxth	r3, r3
 800da14:	4313      	orrs	r3, r2
 800da16:	b29b      	uxth	r3, r3
 800da18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da20:	b29a      	uxth	r2, r3
 800da22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da24:	801a      	strh	r2, [r3, #0]
 800da26:	e05c      	b.n	800dae2 <USB_EPStartXfer+0xcfa>
 800da28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10a      	bne.n	800da46 <USB_EPStartXfer+0xc5e>
 800da30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da32:	881b      	ldrh	r3, [r3, #0]
 800da34:	b29b      	uxth	r3, r3
 800da36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da3e:	b29a      	uxth	r2, r3
 800da40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da42:	801a      	strh	r2, [r3, #0]
 800da44:	e04d      	b.n	800dae2 <USB_EPStartXfer+0xcfa>
 800da46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da4a:	085b      	lsrs	r3, r3, #1
 800da4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da54:	f003 0301 	and.w	r3, r3, #1
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d004      	beq.n	800da66 <USB_EPStartXfer+0xc7e>
 800da5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da60:	3301      	adds	r3, #1
 800da62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800da66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da70:	b29b      	uxth	r3, r3
 800da72:	029b      	lsls	r3, r3, #10
 800da74:	b29b      	uxth	r3, r3
 800da76:	4313      	orrs	r3, r2
 800da78:	b29a      	uxth	r2, r3
 800da7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da7c:	801a      	strh	r2, [r3, #0]
 800da7e:	e030      	b.n	800dae2 <USB_EPStartXfer+0xcfa>
 800da80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	785b      	ldrb	r3, [r3, #1]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d128      	bne.n	800dae2 <USB_EPStartXfer+0xcfa>
 800da90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800daac:	b29b      	uxth	r3, r3
 800daae:	461a      	mov	r2, r3
 800dab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dab4:	4413      	add	r3, r2
 800dab6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800daba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dabe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	011a      	lsls	r2, r3, #4
 800dac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dacc:	4413      	add	r3, r2
 800dace:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dad2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dada:	b29a      	uxth	r2, r3
 800dadc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dae0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	891b      	ldrh	r3, [r3, #8]
 800daee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800daf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	6959      	ldr	r1, [r3, #20]
 800dafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db02:	b29b      	uxth	r3, r3
 800db04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800db08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800db0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800db10:	6800      	ldr	r0, [r0, #0]
 800db12:	f000 fe58 	bl	800e7c6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800db16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4413      	add	r3, r2
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	b29b      	uxth	r3, r3
 800db34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db3c:	817b      	strh	r3, [r7, #10]
 800db3e:	897b      	ldrh	r3, [r7, #10]
 800db40:	f083 0310 	eor.w	r3, r3, #16
 800db44:	817b      	strh	r3, [r7, #10]
 800db46:	897b      	ldrh	r3, [r7, #10]
 800db48:	f083 0320 	eor.w	r3, r3, #32
 800db4c:	817b      	strh	r3, [r7, #10]
 800db4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	441a      	add	r2, r3
 800db68:	897b      	ldrh	r3, [r7, #10]
 800db6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	8013      	strh	r3, [r2, #0]
 800db7e:	f000 bcde 	b.w	800e53e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800db82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	7b1b      	ldrb	r3, [r3, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f040 80bb 	bne.w	800dd0a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800db94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	699a      	ldr	r2, [r3, #24]
 800dba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	691b      	ldr	r3, [r3, #16]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d917      	bls.n	800dbe0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800dbb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800dbc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	699a      	ldr	r2, [r3, #24]
 800dbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbd0:	1ad2      	subs	r2, r2, r3
 800dbd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	619a      	str	r2, [r3, #24]
 800dbde:	e00e      	b.n	800dbfe <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dbe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	699b      	ldr	r3, [r3, #24]
 800dbec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800dbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800dbfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc1a:	b29b      	uxth	r3, r3
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc22:	4413      	add	r3, r2
 800dc24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	011a      	lsls	r2, r3, #4
 800dc36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800dc40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dc44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc48:	881b      	ldrh	r3, [r3, #0]
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc56:	801a      	strh	r2, [r3, #0]
 800dc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc5c:	2b3e      	cmp	r3, #62	; 0x3e
 800dc5e:	d924      	bls.n	800dcaa <USB_EPStartXfer+0xec2>
 800dc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc64:	095b      	lsrs	r3, r3, #5
 800dc66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc6e:	f003 031f 	and.w	r3, r3, #31
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d104      	bne.n	800dc80 <USB_EPStartXfer+0xe98>
 800dc76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	029b      	lsls	r3, r3, #10
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	4313      	orrs	r3, r2
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dca4:	801a      	strh	r2, [r3, #0]
 800dca6:	f000 bc10 	b.w	800e4ca <USB_EPStartXfer+0x16e2>
 800dcaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10c      	bne.n	800dccc <USB_EPStartXfer+0xee4>
 800dcb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcc8:	801a      	strh	r2, [r3, #0]
 800dcca:	e3fe      	b.n	800e4ca <USB_EPStartXfer+0x16e2>
 800dccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcd0:	085b      	lsrs	r3, r3, #1
 800dcd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d004      	beq.n	800dcec <USB_EPStartXfer+0xf04>
 800dce2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dce6:	3301      	adds	r3, #1
 800dce8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dcec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	029b      	lsls	r3, r3, #10
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd06:	801a      	strh	r2, [r3, #0]
 800dd08:	e3df      	b.n	800e4ca <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	78db      	ldrb	r3, [r3, #3]
 800dd16:	2b02      	cmp	r3, #2
 800dd18:	f040 8218 	bne.w	800e14c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	785b      	ldrb	r3, [r3, #1]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	f040 809d 	bne.w	800de68 <USB_EPStartXfer+0x1080>
 800dd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd52:	4413      	add	r3, r2
 800dd54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	011a      	lsls	r2, r3, #4
 800dd66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dd70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dd74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd86:	801a      	strh	r2, [r3, #0]
 800dd88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	2b3e      	cmp	r3, #62	; 0x3e
 800dd96:	d92b      	bls.n	800ddf0 <USB_EPStartXfer+0x1008>
 800dd98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	095b      	lsrs	r3, r3, #5
 800dda6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ddaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	f003 031f 	and.w	r3, r3, #31
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d104      	bne.n	800ddc8 <USB_EPStartXfer+0xfe0>
 800ddbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ddc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	029b      	lsls	r3, r3, #10
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	4313      	orrs	r3, r2
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dde2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ddec:	801a      	strh	r2, [r3, #0]
 800ddee:	e070      	b.n	800ded2 <USB_EPStartXfer+0x10ea>
 800ddf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10c      	bne.n	800de1a <USB_EPStartXfer+0x1032>
 800de00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	b29b      	uxth	r3, r3
 800de08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de10:	b29a      	uxth	r2, r3
 800de12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de16:	801a      	strh	r2, [r3, #0]
 800de18:	e05b      	b.n	800ded2 <USB_EPStartXfer+0x10ea>
 800de1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	691b      	ldr	r3, [r3, #16]
 800de26:	085b      	lsrs	r3, r3, #1
 800de28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800de2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	f003 0301 	and.w	r3, r3, #1
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d004      	beq.n	800de4a <USB_EPStartXfer+0x1062>
 800de40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de44:	3301      	adds	r3, #1
 800de46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800de4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	b29a      	uxth	r2, r3
 800de52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de56:	b29b      	uxth	r3, r3
 800de58:	029b      	lsls	r3, r3, #10
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	4313      	orrs	r3, r2
 800de5e:	b29a      	uxth	r2, r3
 800de60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de64:	801a      	strh	r2, [r3, #0]
 800de66:	e034      	b.n	800ded2 <USB_EPStartXfer+0x10ea>
 800de68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	785b      	ldrb	r3, [r3, #1]
 800de74:	2b01      	cmp	r3, #1
 800de76:	d12c      	bne.n	800ded2 <USB_EPStartXfer+0x10ea>
 800de78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de94:	b29b      	uxth	r3, r3
 800de96:	461a      	mov	r2, r3
 800de98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de9c:	4413      	add	r3, r2
 800de9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	011a      	lsls	r2, r3, #4
 800deb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800deb4:	4413      	add	r3, r2
 800deb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800deba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800debe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	691b      	ldr	r3, [r3, #16]
 800deca:	b29a      	uxth	r2, r3
 800decc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ded0:	801a      	strh	r2, [r3, #0]
 800ded2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ded6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	785b      	ldrb	r3, [r3, #1]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f040 809d 	bne.w	800e02c <USB_EPStartXfer+0x1244>
 800def2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800df00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df0e:	b29b      	uxth	r3, r3
 800df10:	461a      	mov	r2, r3
 800df12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df16:	4413      	add	r3, r2
 800df18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800df1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	011a      	lsls	r2, r3, #4
 800df2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800df2e:	4413      	add	r3, r2
 800df30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800df34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800df38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df3c:	881b      	ldrh	r3, [r3, #0]
 800df3e:	b29b      	uxth	r3, r3
 800df40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df44:	b29a      	uxth	r2, r3
 800df46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df4a:	801a      	strh	r2, [r3, #0]
 800df4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	2b3e      	cmp	r3, #62	; 0x3e
 800df5a:	d92b      	bls.n	800dfb4 <USB_EPStartXfer+0x11cc>
 800df5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	095b      	lsrs	r3, r3, #5
 800df6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800df6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	691b      	ldr	r3, [r3, #16]
 800df7a:	f003 031f 	and.w	r3, r3, #31
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d104      	bne.n	800df8c <USB_EPStartXfer+0x11a4>
 800df82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df86:	3b01      	subs	r3, #1
 800df88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800df8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df90:	881b      	ldrh	r3, [r3, #0]
 800df92:	b29a      	uxth	r2, r3
 800df94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df98:	b29b      	uxth	r3, r3
 800df9a:	029b      	lsls	r3, r3, #10
 800df9c:	b29b      	uxth	r3, r3
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfb0:	801a      	strh	r2, [r3, #0]
 800dfb2:	e069      	b.n	800e088 <USB_EPStartXfer+0x12a0>
 800dfb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d10c      	bne.n	800dfde <USB_EPStartXfer+0x11f6>
 800dfc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfda:	801a      	strh	r2, [r3, #0]
 800dfdc:	e054      	b.n	800e088 <USB_EPStartXfer+0x12a0>
 800dfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	085b      	lsrs	r3, r3, #1
 800dfec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	691b      	ldr	r3, [r3, #16]
 800dffc:	f003 0301 	and.w	r3, r3, #1
 800e000:	2b00      	cmp	r3, #0
 800e002:	d004      	beq.n	800e00e <USB_EPStartXfer+0x1226>
 800e004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e008:	3301      	adds	r3, #1
 800e00a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e00e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	b29a      	uxth	r2, r3
 800e016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	029b      	lsls	r3, r3, #10
 800e01e:	b29b      	uxth	r3, r3
 800e020:	4313      	orrs	r3, r2
 800e022:	b29a      	uxth	r2, r3
 800e024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e028:	801a      	strh	r2, [r3, #0]
 800e02a:	e02d      	b.n	800e088 <USB_EPStartXfer+0x12a0>
 800e02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	785b      	ldrb	r3, [r3, #1]
 800e038:	2b01      	cmp	r3, #1
 800e03a:	d125      	bne.n	800e088 <USB_EPStartXfer+0x12a0>
 800e03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	461a      	mov	r2, r3
 800e04e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e052:	4413      	add	r3, r2
 800e054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	011a      	lsls	r2, r3, #4
 800e066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e06a:	4413      	add	r3, r2
 800e06c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	691b      	ldr	r3, [r3, #16]
 800e080:	b29a      	uxth	r2, r3
 800e082:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e086:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	69db      	ldr	r3, [r3, #28]
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 8218 	beq.w	800e4ca <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e09e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	881b      	ldrh	r3, [r3, #0]
 800e0b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e0ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e0be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d005      	beq.n	800e0d2 <USB_EPStartXfer+0x12ea>
 800e0c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e0ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10d      	bne.n	800e0ee <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e0d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e0d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f040 81f5 	bne.w	800e4ca <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e0e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f040 81ee 	bne.w	800e4ca <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	4413      	add	r3, r2
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e114:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e11c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	441a      	add	r2, r3
 800e132:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e13a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e13e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e146:	b29b      	uxth	r3, r3
 800e148:	8013      	strh	r3, [r2, #0]
 800e14a:	e1be      	b.n	800e4ca <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	78db      	ldrb	r3, [r3, #3]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	f040 81b4 	bne.w	800e4c6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	699a      	ldr	r2, [r3, #24]
 800e16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	691b      	ldr	r3, [r3, #16]
 800e176:	429a      	cmp	r2, r3
 800e178:	d917      	bls.n	800e1aa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	691b      	ldr	r3, [r3, #16]
 800e186:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	699a      	ldr	r2, [r3, #24]
 800e196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e19a:	1ad2      	subs	r2, r2, r3
 800e19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	619a      	str	r2, [r3, #24]
 800e1a8:	e00e      	b.n	800e1c8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800e1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	785b      	ldrb	r3, [r3, #1]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f040 8085 	bne.w	800e2e4 <USB_EPStartXfer+0x14fc>
 800e1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e1fe:	4413      	add	r3, r2
 800e200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	011a      	lsls	r2, r3, #4
 800e212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e216:	4413      	add	r3, r2
 800e218:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e21c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e220:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	b29b      	uxth	r3, r3
 800e228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e232:	801a      	strh	r2, [r3, #0]
 800e234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e238:	2b3e      	cmp	r3, #62	; 0x3e
 800e23a:	d923      	bls.n	800e284 <USB_EPStartXfer+0x149c>
 800e23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e240:	095b      	lsrs	r3, r3, #5
 800e242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e24a:	f003 031f 	and.w	r3, r3, #31
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d104      	bne.n	800e25c <USB_EPStartXfer+0x1474>
 800e252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e256:	3b01      	subs	r3, #1
 800e258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e25c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	b29a      	uxth	r2, r3
 800e264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e268:	b29b      	uxth	r3, r3
 800e26a:	029b      	lsls	r3, r3, #10
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	4313      	orrs	r3, r2
 800e270:	b29b      	uxth	r3, r3
 800e272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e280:	801a      	strh	r2, [r3, #0]
 800e282:	e060      	b.n	800e346 <USB_EPStartXfer+0x155e>
 800e284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d10c      	bne.n	800e2a6 <USB_EPStartXfer+0x14be>
 800e28c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e290:	881b      	ldrh	r3, [r3, #0]
 800e292:	b29b      	uxth	r3, r3
 800e294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2a2:	801a      	strh	r2, [r3, #0]
 800e2a4:	e04f      	b.n	800e346 <USB_EPStartXfer+0x155e>
 800e2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2aa:	085b      	lsrs	r3, r3, #1
 800e2ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2b4:	f003 0301 	and.w	r3, r3, #1
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d004      	beq.n	800e2c6 <USB_EPStartXfer+0x14de>
 800e2bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e2c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2ca:	881b      	ldrh	r3, [r3, #0]
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	029b      	lsls	r3, r3, #10
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e2e0:	801a      	strh	r2, [r3, #0]
 800e2e2:	e030      	b.n	800e346 <USB_EPStartXfer+0x155e>
 800e2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	785b      	ldrb	r3, [r3, #1]
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d128      	bne.n	800e346 <USB_EPStartXfer+0x155e>
 800e2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e310:	b29b      	uxth	r3, r3
 800e312:	461a      	mov	r2, r3
 800e314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e318:	4413      	add	r3, r2
 800e31a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	011a      	lsls	r2, r3, #4
 800e32c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e330:	4413      	add	r3, r2
 800e332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e336:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e33e:	b29a      	uxth	r2, r3
 800e340:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e344:	801a      	strh	r2, [r3, #0]
 800e346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e34a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	785b      	ldrb	r3, [r3, #1]
 800e360:	2b00      	cmp	r3, #0
 800e362:	f040 8085 	bne.w	800e470 <USB_EPStartXfer+0x1688>
 800e366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e36a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e382:	b29b      	uxth	r3, r3
 800e384:	461a      	mov	r2, r3
 800e386:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e38a:	4413      	add	r3, r2
 800e38c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	011a      	lsls	r2, r3, #4
 800e39e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e3a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3b0:	881b      	ldrh	r3, [r3, #0]
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3be:	801a      	strh	r2, [r3, #0]
 800e3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3c4:	2b3e      	cmp	r3, #62	; 0x3e
 800e3c6:	d923      	bls.n	800e410 <USB_EPStartXfer+0x1628>
 800e3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3cc:	095b      	lsrs	r3, r3, #5
 800e3ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3d6:	f003 031f 	and.w	r3, r3, #31
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d104      	bne.n	800e3e8 <USB_EPStartXfer+0x1600>
 800e3de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3e2:	3b01      	subs	r3, #1
 800e3e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e3e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	029b      	lsls	r3, r3, #10
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e406:	b29a      	uxth	r2, r3
 800e408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e40c:	801a      	strh	r2, [r3, #0]
 800e40e:	e05c      	b.n	800e4ca <USB_EPStartXfer+0x16e2>
 800e410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10c      	bne.n	800e432 <USB_EPStartXfer+0x164a>
 800e418:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e428:	b29a      	uxth	r2, r3
 800e42a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e42e:	801a      	strh	r2, [r3, #0]
 800e430:	e04b      	b.n	800e4ca <USB_EPStartXfer+0x16e2>
 800e432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e436:	085b      	lsrs	r3, r3, #1
 800e438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e440:	f003 0301 	and.w	r3, r3, #1
 800e444:	2b00      	cmp	r3, #0
 800e446:	d004      	beq.n	800e452 <USB_EPStartXfer+0x166a>
 800e448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e44c:	3301      	adds	r3, #1
 800e44e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e456:	881b      	ldrh	r3, [r3, #0]
 800e458:	b29a      	uxth	r2, r3
 800e45a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e45e:	b29b      	uxth	r3, r3
 800e460:	029b      	lsls	r3, r3, #10
 800e462:	b29b      	uxth	r3, r3
 800e464:	4313      	orrs	r3, r2
 800e466:	b29a      	uxth	r2, r3
 800e468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e46c:	801a      	strh	r2, [r3, #0]
 800e46e:	e02c      	b.n	800e4ca <USB_EPStartXfer+0x16e2>
 800e470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	785b      	ldrb	r3, [r3, #1]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d124      	bne.n	800e4ca <USB_EPStartXfer+0x16e2>
 800e480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e48e:	b29b      	uxth	r3, r3
 800e490:	461a      	mov	r2, r3
 800e492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e496:	4413      	add	r3, r2
 800e498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	011a      	lsls	r2, r3, #4
 800e4aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e4b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e4c2:	801a      	strh	r2, [r3, #0]
 800e4c4:	e001      	b.n	800e4ca <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e03a      	b.n	800e540 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	009b      	lsls	r3, r3, #2
 800e4e2:	4413      	add	r3, r2
 800e4e4:	881b      	ldrh	r3, [r3, #0]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e4f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e4f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e4fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e500:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e504:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e508:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	441a      	add	r2, r3
 800e526:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e52a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e52e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b085      	sub	sp, #20
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	785b      	ldrb	r3, [r3, #1]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d020      	beq.n	800e59e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	4413      	add	r3, r2
 800e566:	881b      	ldrh	r3, [r3, #0]
 800e568:	b29b      	uxth	r3, r3
 800e56a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e572:	81bb      	strh	r3, [r7, #12]
 800e574:	89bb      	ldrh	r3, [r7, #12]
 800e576:	f083 0310 	eor.w	r3, r3, #16
 800e57a:	81bb      	strh	r3, [r7, #12]
 800e57c:	687a      	ldr	r2, [r7, #4]
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	441a      	add	r2, r3
 800e586:	89bb      	ldrh	r3, [r7, #12]
 800e588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e58c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e598:	b29b      	uxth	r3, r3
 800e59a:	8013      	strh	r3, [r2, #0]
 800e59c:	e01f      	b.n	800e5de <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e5b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5b4:	81fb      	strh	r3, [r7, #14]
 800e5b6:	89fb      	ldrh	r3, [r7, #14]
 800e5b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e5bc:	81fb      	strh	r3, [r7, #14]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	441a      	add	r2, r3
 800e5c8:	89fb      	ldrh	r3, [r7, #14]
 800e5ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3714      	adds	r7, #20
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bc80      	pop	{r7}
 800e5e8:	4770      	bx	lr

0800e5ea <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e5ea:	b480      	push	{r7}
 800e5ec:	b087      	sub	sp, #28
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	7b1b      	ldrb	r3, [r3, #12]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f040 809d 	bne.w	800e738 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	785b      	ldrb	r3, [r3, #1]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d04c      	beq.n	800e6a0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	881b      	ldrh	r3, [r3, #0]
 800e612:	823b      	strh	r3, [r7, #16]
 800e614:	8a3b      	ldrh	r3, [r7, #16]
 800e616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d01b      	beq.n	800e656 <USB_EPClearStall+0x6c>
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	4413      	add	r3, r2
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e634:	81fb      	strh	r3, [r7, #14]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	441a      	add	r2, r3
 800e640:	89fb      	ldrh	r3, [r7, #14]
 800e642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e64a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e64e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e652:	b29b      	uxth	r3, r3
 800e654:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	78db      	ldrb	r3, [r3, #3]
 800e65a:	2b01      	cmp	r3, #1
 800e65c:	d06c      	beq.n	800e738 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	4413      	add	r3, r2
 800e668:	881b      	ldrh	r3, [r3, #0]
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e674:	81bb      	strh	r3, [r7, #12]
 800e676:	89bb      	ldrh	r3, [r7, #12]
 800e678:	f083 0320 	eor.w	r3, r3, #32
 800e67c:	81bb      	strh	r3, [r7, #12]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	441a      	add	r2, r3
 800e688:	89bb      	ldrh	r3, [r7, #12]
 800e68a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e68e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	8013      	strh	r3, [r2, #0]
 800e69e:	e04b      	b.n	800e738 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e6a0:	687a      	ldr	r2, [r7, #4]
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	4413      	add	r3, r2
 800e6aa:	881b      	ldrh	r3, [r3, #0]
 800e6ac:	82fb      	strh	r3, [r7, #22]
 800e6ae:	8afb      	ldrh	r3, [r7, #22]
 800e6b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d01b      	beq.n	800e6f0 <USB_EPClearStall+0x106>
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	009b      	lsls	r3, r3, #2
 800e6c0:	4413      	add	r3, r2
 800e6c2:	881b      	ldrh	r3, [r3, #0]
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e6ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6ce:	82bb      	strh	r3, [r7, #20]
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	781b      	ldrb	r3, [r3, #0]
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	441a      	add	r2, r3
 800e6da:	8abb      	ldrh	r3, [r7, #20]
 800e6dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	009b      	lsls	r3, r3, #2
 800e6f8:	4413      	add	r3, r2
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e706:	827b      	strh	r3, [r7, #18]
 800e708:	8a7b      	ldrh	r3, [r7, #18]
 800e70a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e70e:	827b      	strh	r3, [r7, #18]
 800e710:	8a7b      	ldrh	r3, [r7, #18]
 800e712:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e716:	827b      	strh	r3, [r7, #18]
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	441a      	add	r2, r3
 800e722:	8a7b      	ldrh	r3, [r7, #18]
 800e724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e72c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e734:	b29b      	uxth	r3, r3
 800e736:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	371c      	adds	r7, #28
 800e73e:	46bd      	mov	sp, r7
 800e740:	bc80      	pop	{r7}
 800e742:	4770      	bx	lr

0800e744 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	460b      	mov	r3, r1
 800e74e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e750:	78fb      	ldrb	r3, [r7, #3]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d103      	bne.n	800e75e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2280      	movs	r2, #128	; 0x80
 800e75a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e75e:	2300      	movs	r3, #0
}
 800e760:	4618      	mov	r0, r3
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	bc80      	pop	{r7}
 800e768:	4770      	bx	lr

0800e76a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e76a:	b480      	push	{r7}
 800e76c:	b083      	sub	sp, #12
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	370c      	adds	r7, #12
 800e778:	46bd      	mov	sp, r7
 800e77a:	bc80      	pop	{r7}
 800e77c:	4770      	bx	lr

0800e77e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e77e:	b480      	push	{r7}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	370c      	adds	r7, #12
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bc80      	pop	{r7}
 800e790:	4770      	bx	lr

0800e792 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e792:	b480      	push	{r7}
 800e794:	b085      	sub	sp, #20
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3714      	adds	r7, #20
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bc80      	pop	{r7}
 800e7ae:	4770      	bx	lr

0800e7b0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bc80      	pop	{r7}
 800e7c4:	4770      	bx	lr

0800e7c6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b08b      	sub	sp, #44	; 0x2c
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	60f8      	str	r0, [r7, #12]
 800e7ce:	60b9      	str	r1, [r7, #8]
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	80fb      	strh	r3, [r7, #6]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e7dc:	88bb      	ldrh	r3, [r7, #4]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	085b      	lsrs	r3, r3, #1
 800e7e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e7ec:	88fb      	ldrh	r3, [r7, #6]
 800e7ee:	005a      	lsls	r2, r3, #1
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	4413      	add	r3, r2
 800e7f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e7f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e7fa:	69bb      	ldr	r3, [r7, #24]
 800e7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e7fe:	e01e      	b.n	800e83e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	3301      	adds	r3, #1
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	021b      	lsls	r3, r3, #8
 800e80e:	b21a      	sxth	r2, r3
 800e810:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e814:	4313      	orrs	r3, r2
 800e816:	b21b      	sxth	r3, r3
 800e818:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	8a7a      	ldrh	r2, [r7, #18]
 800e81e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e820:	6a3b      	ldr	r3, [r7, #32]
 800e822:	3302      	adds	r3, #2
 800e824:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800e826:	6a3b      	ldr	r3, [r7, #32]
 800e828:	3302      	adds	r3, #2
 800e82a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	3301      	adds	r3, #1
 800e830:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	3301      	adds	r3, #1
 800e836:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	3b01      	subs	r3, #1
 800e83c:	627b      	str	r3, [r7, #36]	; 0x24
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1dd      	bne.n	800e800 <USB_WritePMA+0x3a>
  }
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop
 800e848:	372c      	adds	r7, #44	; 0x2c
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bc80      	pop	{r7}
 800e84e:	4770      	bx	lr

0800e850 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e850:	b480      	push	{r7}
 800e852:	b08b      	sub	sp, #44	; 0x2c
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	4611      	mov	r1, r2
 800e85c:	461a      	mov	r2, r3
 800e85e:	460b      	mov	r3, r1
 800e860:	80fb      	strh	r3, [r7, #6]
 800e862:	4613      	mov	r3, r2
 800e864:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e866:	88bb      	ldrh	r3, [r7, #4]
 800e868:	085b      	lsrs	r3, r3, #1
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e876:	88fb      	ldrh	r3, [r7, #6]
 800e878:	005a      	lsls	r2, r3, #1
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	4413      	add	r3, r2
 800e87e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e882:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e884:	69bb      	ldr	r3, [r7, #24]
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
 800e888:	e01b      	b.n	800e8c2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	881b      	ldrh	r3, [r3, #0]
 800e88e:	b29b      	uxth	r3, r3
 800e890:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e892:	6a3b      	ldr	r3, [r7, #32]
 800e894:	3302      	adds	r3, #2
 800e896:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	0a1b      	lsrs	r3, r3, #8
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	3302      	adds	r3, #2
 800e8ba:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d1e0      	bne.n	800e88a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e8c8:	88bb      	ldrh	r3, [r7, #4]
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d007      	beq.n	800e8e4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	881b      	ldrh	r3, [r3, #0]
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	701a      	strb	r2, [r3, #0]
  }
}
 800e8e4:	bf00      	nop
 800e8e6:	372c      	adds	r7, #44	; 0x2c
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bc80      	pop	{r7}
 800e8ec:	4770      	bx	lr
	...

0800e8f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e8f4:	4904      	ldr	r1, [pc, #16]	; (800e908 <MX_FATFS_Init+0x18>)
 800e8f6:	4805      	ldr	r0, [pc, #20]	; (800e90c <MX_FATFS_Init+0x1c>)
 800e8f8:	f003 fed8 	bl	80126ac <FATFS_LinkDriver>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	461a      	mov	r2, r3
 800e900:	4b03      	ldr	r3, [pc, #12]	; (800e910 <MX_FATFS_Init+0x20>)
 800e902:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e904:	bf00      	nop
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20000ec4 	.word	0x20000ec4
 800e90c:	0802f514 	.word	0x0802f514
 800e910:	20000ec0 	.word	0x20000ec0

0800e914 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e914:	b480      	push	{r7}
 800e916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e918:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bc80      	pop	{r7}
 800e920:	4770      	bx	lr
	...

0800e924 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e92a:	2300      	movs	r3, #0
 800e92c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e92e:	f000 f879 	bl	800ea24 <BSP_SD_IsDetected>
 800e932:	4603      	mov	r3, r0
 800e934:	2b01      	cmp	r3, #1
 800e936:	d001      	beq.n	800e93c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e938:	2301      	movs	r3, #1
 800e93a:	e012      	b.n	800e962 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e93c:	480b      	ldr	r0, [pc, #44]	; (800e96c <BSP_SD_Init+0x48>)
 800e93e:	f7f9 ffd1 	bl	80088e4 <HAL_SD_Init>
 800e942:	4603      	mov	r3, r0
 800e944:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e946:	79fb      	ldrb	r3, [r7, #7]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d109      	bne.n	800e960 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e94c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e950:	4806      	ldr	r0, [pc, #24]	; (800e96c <BSP_SD_Init+0x48>)
 800e952:	f7fa fdab 	bl	80094ac <HAL_SD_ConfigWideBusOperation>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e960:	79fb      	ldrb	r3, [r7, #7]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	20000c94 	.word	0x20000c94

0800e970 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b088      	sub	sp, #32
 800e974:	af02      	add	r7, sp, #8
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
 800e97c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e97e:	2300      	movs	r3, #0
 800e980:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68ba      	ldr	r2, [r7, #8]
 800e98a:	68f9      	ldr	r1, [r7, #12]
 800e98c:	4806      	ldr	r0, [pc, #24]	; (800e9a8 <BSP_SD_ReadBlocks+0x38>)
 800e98e:	f7fa f859 	bl	8008a44 <HAL_SD_ReadBlocks>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d001      	beq.n	800e99c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e998:	2301      	movs	r3, #1
 800e99a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e99c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3718      	adds	r7, #24
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	20000c94 	.word	0x20000c94

0800e9ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b088      	sub	sp, #32
 800e9b0:	af02      	add	r7, sp, #8
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	607a      	str	r2, [r7, #4]
 800e9b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68ba      	ldr	r2, [r7, #8]
 800e9c6:	68f9      	ldr	r1, [r7, #12]
 800e9c8:	4806      	ldr	r0, [pc, #24]	; (800e9e4 <BSP_SD_WriteBlocks+0x38>)
 800e9ca:	f7fa fa19 	bl	8008e00 <HAL_SD_WriteBlocks>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3718      	adds	r7, #24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20000c94 	.word	0x20000c94

0800e9e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e9ec:	4805      	ldr	r0, [pc, #20]	; (800ea04 <BSP_SD_GetCardState+0x1c>)
 800e9ee:	f7fa fdf7 	bl	80095e0 <HAL_SD_GetCardState>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b04      	cmp	r3, #4
 800e9f6:	bf14      	ite	ne
 800e9f8:	2301      	movne	r3, #1
 800e9fa:	2300      	moveq	r3, #0
 800e9fc:	b2db      	uxtb	r3, r3
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20000c94 	.word	0x20000c94

0800ea08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ea10:	6879      	ldr	r1, [r7, #4]
 800ea12:	4803      	ldr	r0, [pc, #12]	; (800ea20 <BSP_SD_GetCardInfo+0x18>)
 800ea14:	f7fa fd1e 	bl	8009454 <HAL_SD_GetCardInfo>
}
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	20000c94 	.word	0x20000c94

0800ea24 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	b2db      	uxtb	r3, r3
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	370c      	adds	r7, #12
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bc80      	pop	{r7}
 800ea3a:	4770      	bx	lr

0800ea3c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	460b      	mov	r3, r1
 800ea46:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800ea48:	2304      	movs	r3, #4
 800ea4a:	2203      	movs	r2, #3
 800ea4c:	2181      	movs	r1, #129	; 0x81
 800ea4e:	6878      	ldr	r0, [r7, #4]
 800ea50:	f004 f983 	bl	8012d5a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800ea5a:	2010      	movs	r0, #16
 800ea5c:	f004 fa92 	bl	8012f84 <USBD_static_malloc>
 800ea60:	4602      	mov	r2, r0
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d101      	bne.n	800ea76 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800ea72:	2302      	movs	r3, #2
 800ea74:	e005      	b.n	800ea82 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800ea80:	2300      	movs	r3, #0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800ea8a:	b580      	push	{r7, lr}
 800ea8c:	b082      	sub	sp, #8
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
 800ea92:	460b      	mov	r3, r1
 800ea94:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800ea96:	2181      	movs	r1, #129	; 0x81
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f004 f984 	bl	8012da6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d009      	beq.n	800eac2 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eab4:	4618      	mov	r0, r3
 800eab6:	f004 fa71 	bl	8012f9c <USBD_static_free>
    pdev->pClassData = NULL;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b088      	sub	sp, #32
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eadc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800eade:	2300      	movs	r3, #0
 800eae0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800eae2:	2300      	movs	r3, #0
 800eae4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800eae6:	2300      	movs	r3, #0
 800eae8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800eaea:	2300      	movs	r3, #0
 800eaec:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d045      	beq.n	800eb86 <USBD_HID_Setup+0xba>
 800eafa:	2b20      	cmp	r3, #32
 800eafc:	f040 80d3 	bne.w	800eca6 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	785b      	ldrb	r3, [r3, #1]
 800eb04:	3b02      	subs	r3, #2
 800eb06:	2b09      	cmp	r3, #9
 800eb08:	d835      	bhi.n	800eb76 <USBD_HID_Setup+0xaa>
 800eb0a:	a201      	add	r2, pc, #4	; (adr r2, 800eb10 <USBD_HID_Setup+0x44>)
 800eb0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb10:	0800eb67 	.word	0x0800eb67
 800eb14:	0800eb47 	.word	0x0800eb47
 800eb18:	0800eb77 	.word	0x0800eb77
 800eb1c:	0800eb77 	.word	0x0800eb77
 800eb20:	0800eb77 	.word	0x0800eb77
 800eb24:	0800eb77 	.word	0x0800eb77
 800eb28:	0800eb77 	.word	0x0800eb77
 800eb2c:	0800eb77 	.word	0x0800eb77
 800eb30:	0800eb55 	.word	0x0800eb55
 800eb34:	0800eb39 	.word	0x0800eb39
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	885b      	ldrh	r3, [r3, #2]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	461a      	mov	r2, r3
 800eb40:	693b      	ldr	r3, [r7, #16]
 800eb42:	601a      	str	r2, [r3, #0]
          break;
 800eb44:	e01e      	b.n	800eb84 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f001 f922 	bl	800fd96 <USBD_CtlSendData>
          break;
 800eb52:	e017      	b.n	800eb84 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	885b      	ldrh	r3, [r3, #2]
 800eb58:	0a1b      	lsrs	r3, r3, #8
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	b2db      	uxtb	r3, r3
 800eb5e:	461a      	mov	r2, r3
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	605a      	str	r2, [r3, #4]
          break;
 800eb64:	e00e      	b.n	800eb84 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	3304      	adds	r3, #4
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f001 f911 	bl	800fd96 <USBD_CtlSendData>
          break;
 800eb74:	e006      	b.n	800eb84 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800eb76:	6839      	ldr	r1, [r7, #0]
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f001 f8a2 	bl	800fcc2 <USBD_CtlError>
          ret = USBD_FAIL;
 800eb7e:	2302      	movs	r3, #2
 800eb80:	75fb      	strb	r3, [r7, #23]
          break;
 800eb82:	bf00      	nop
      }
      break;
 800eb84:	e096      	b.n	800ecb4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	785b      	ldrb	r3, [r3, #1]
 800eb8a:	2b0b      	cmp	r3, #11
 800eb8c:	f200 8083 	bhi.w	800ec96 <USBD_HID_Setup+0x1ca>
 800eb90:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <USBD_HID_Setup+0xcc>)
 800eb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb96:	bf00      	nop
 800eb98:	0800ebc9 	.word	0x0800ebc9
 800eb9c:	0800ec97 	.word	0x0800ec97
 800eba0:	0800ec97 	.word	0x0800ec97
 800eba4:	0800ec97 	.word	0x0800ec97
 800eba8:	0800ec97 	.word	0x0800ec97
 800ebac:	0800ec97 	.word	0x0800ec97
 800ebb0:	0800ebf1 	.word	0x0800ebf1
 800ebb4:	0800ec97 	.word	0x0800ec97
 800ebb8:	0800ec97 	.word	0x0800ec97
 800ebbc:	0800ec97 	.word	0x0800ec97
 800ebc0:	0800ec49 	.word	0x0800ec49
 800ebc4:	0800ec71 	.word	0x0800ec71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d107      	bne.n	800ebe2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ebd2:	f107 030e 	add.w	r3, r7, #14
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	4619      	mov	r1, r3
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f001 f8db 	bl	800fd96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebe0:	e060      	b.n	800eca4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f001 f86c 	bl	800fcc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ebea:	2302      	movs	r3, #2
 800ebec:	75fb      	strb	r3, [r7, #23]
          break;
 800ebee:	e059      	b.n	800eca4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	885b      	ldrh	r3, [r3, #2]
 800ebf4:	0a1b      	lsrs	r3, r3, #8
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	2b22      	cmp	r3, #34	; 0x22
 800ebfa:	d108      	bne.n	800ec0e <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	88db      	ldrh	r3, [r3, #6]
 800ec00:	2b4a      	cmp	r3, #74	; 0x4a
 800ec02:	bf28      	it	cs
 800ec04:	234a      	movcs	r3, #74	; 0x4a
 800ec06:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800ec08:	4b2d      	ldr	r3, [pc, #180]	; (800ecc0 <USBD_HID_Setup+0x1f4>)
 800ec0a:	61bb      	str	r3, [r7, #24]
 800ec0c:	e015      	b.n	800ec3a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	885b      	ldrh	r3, [r3, #2]
 800ec12:	0a1b      	lsrs	r3, r3, #8
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	2b21      	cmp	r3, #33	; 0x21
 800ec18:	d108      	bne.n	800ec2c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800ec1a:	4b2a      	ldr	r3, [pc, #168]	; (800ecc4 <USBD_HID_Setup+0x1f8>)
 800ec1c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	88db      	ldrh	r3, [r3, #6]
 800ec22:	2b09      	cmp	r3, #9
 800ec24:	bf28      	it	cs
 800ec26:	2309      	movcs	r3, #9
 800ec28:	83fb      	strh	r3, [r7, #30]
 800ec2a:	e006      	b.n	800ec3a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800ec2c:	6839      	ldr	r1, [r7, #0]
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f001 f847 	bl	800fcc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ec34:	2302      	movs	r3, #2
 800ec36:	75fb      	strb	r3, [r7, #23]
            break;
 800ec38:	e034      	b.n	800eca4 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800ec3a:	8bfb      	ldrh	r3, [r7, #30]
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	69b9      	ldr	r1, [r7, #24]
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f001 f8a8 	bl	800fd96 <USBD_CtlSendData>
          break;
 800ec46:	e02d      	b.n	800eca4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec4e:	2b03      	cmp	r3, #3
 800ec50:	d107      	bne.n	800ec62 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800ec52:	693b      	ldr	r3, [r7, #16]
 800ec54:	3308      	adds	r3, #8
 800ec56:	2201      	movs	r2, #1
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f001 f89b 	bl	800fd96 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ec60:	e020      	b.n	800eca4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800ec62:	6839      	ldr	r1, [r7, #0]
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f001 f82c 	bl	800fcc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ec6a:	2302      	movs	r3, #2
 800ec6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ec6e:	e019      	b.n	800eca4 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec76:	2b03      	cmp	r3, #3
 800ec78:	d106      	bne.n	800ec88 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	885b      	ldrh	r3, [r3, #2]
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	461a      	mov	r2, r3
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ec86:	e00d      	b.n	800eca4 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800ec88:	6839      	ldr	r1, [r7, #0]
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f001 f819 	bl	800fcc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ec90:	2302      	movs	r3, #2
 800ec92:	75fb      	strb	r3, [r7, #23]
          break;
 800ec94:	e006      	b.n	800eca4 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800ec96:	6839      	ldr	r1, [r7, #0]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f001 f812 	bl	800fcc2 <USBD_CtlError>
          ret = USBD_FAIL;
 800ec9e:	2302      	movs	r3, #2
 800eca0:	75fb      	strb	r3, [r7, #23]
          break;
 800eca2:	bf00      	nop
      }
      break;
 800eca4:	e006      	b.n	800ecb4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800eca6:	6839      	ldr	r1, [r7, #0]
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f001 f80a 	bl	800fcc2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ecae:	2302      	movs	r3, #2
 800ecb0:	75fb      	strb	r3, [r7, #23]
      break;
 800ecb2:	bf00      	nop
  }

  return ret;
 800ecb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3720      	adds	r7, #32
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	200000d8 	.word	0x200000d8
 800ecc4:	200000c0 	.word	0x200000c0

0800ecc8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2222      	movs	r2, #34	; 0x22
 800ecd4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800ecd6:	4b03      	ldr	r3, [pc, #12]	; (800ece4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bc80      	pop	{r7}
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	20000054 	.word	0x20000054

0800ece8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2222      	movs	r2, #34	; 0x22
 800ecf4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800ecf6:	4b03      	ldr	r3, [pc, #12]	; (800ed04 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bc80      	pop	{r7}
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	20000078 	.word	0x20000078

0800ed08 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2222      	movs	r2, #34	; 0x22
 800ed14:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800ed16:	4b03      	ldr	r3, [pc, #12]	; (800ed24 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	370c      	adds	r7, #12
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bc80      	pop	{r7}
 800ed20:	4770      	bx	lr
 800ed22:	bf00      	nop
 800ed24:	2000009c 	.word	0x2000009c

0800ed28 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	460b      	mov	r3, r1
 800ed32:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800ed3e:	2300      	movs	r3, #0
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	370c      	adds	r7, #12
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bc80      	pop	{r7}
 800ed48:	4770      	bx	lr
	...

0800ed4c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	220a      	movs	r2, #10
 800ed58:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800ed5a:	4b03      	ldr	r3, [pc, #12]	; (800ed68 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bc80      	pop	{r7}
 800ed64:	4770      	bx	lr
 800ed66:	bf00      	nop
 800ed68:	200000cc 	.word	0x200000cc

0800ed6c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b084      	sub	sp, #16
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	4613      	mov	r3, r2
 800ed78:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ed80:	2302      	movs	r3, #2
 800ed82:	e01a      	b.n	800edba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d003      	beq.n	800eda4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	79fa      	ldrb	r2, [r7, #7]
 800edb0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f003 ff6e 	bl	8012c94 <USBD_LL_Init>

  return USBD_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3710      	adds	r7, #16
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800edc2:	b480      	push	{r7}
 800edc4:	b085      	sub	sp, #20
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
 800edca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800edcc:	2300      	movs	r3, #0
 800edce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d006      	beq.n	800ede4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	683a      	ldr	r2, [r7, #0]
 800edda:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	73fb      	strb	r3, [r7, #15]
 800ede2:	e001      	b.n	800ede8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ede4:	2302      	movs	r3, #2
 800ede6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3714      	adds	r7, #20
 800edee:	46bd      	mov	sp, r7
 800edf0:	bc80      	pop	{r7}
 800edf2:	4770      	bx	lr

0800edf4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f003 ff91 	bl	8012d24 <USBD_LL_Start>

  return USBD_OK;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3708      	adds	r7, #8
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b083      	sub	sp, #12
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee14:	2300      	movs	r3, #0
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bc80      	pop	{r7}
 800ee1e:	4770      	bx	lr

0800ee20 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00c      	beq.n	800ee54 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	78fa      	ldrb	r2, [r7, #3]
 800ee44:	4611      	mov	r1, r2
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	4798      	blx	r3
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d101      	bne.n	800ee54 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ee50:	2300      	movs	r3, #0
 800ee52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ee54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b082      	sub	sp, #8
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
 800ee66:	460b      	mov	r3, r1
 800ee68:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	78fa      	ldrb	r2, [r7, #3]
 800ee74:	4611      	mov	r1, r2
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	4798      	blx	r3

  return USBD_OK;
 800ee7a:	2300      	movs	r3, #0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f000 fed7 	bl	800fc4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eeaa:	461a      	mov	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800eeb8:	f003 031f 	and.w	r3, r3, #31
 800eebc:	2b02      	cmp	r3, #2
 800eebe:	d016      	beq.n	800eeee <USBD_LL_SetupStage+0x6a>
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d81c      	bhi.n	800eefe <USBD_LL_SetupStage+0x7a>
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <USBD_LL_SetupStage+0x4a>
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d008      	beq.n	800eede <USBD_LL_SetupStage+0x5a>
 800eecc:	e017      	b.n	800eefe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800eed4:	4619      	mov	r1, r3
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f000 f9ca 	bl	800f270 <USBD_StdDevReq>
      break;
 800eedc:	e01a      	b.n	800ef14 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800eee4:	4619      	mov	r1, r3
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f000 fa2c 	bl	800f344 <USBD_StdItfReq>
      break;
 800eeec:	e012      	b.n	800ef14 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800eef4:	4619      	mov	r1, r3
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 fa6c 	bl	800f3d4 <USBD_StdEPReq>
      break;
 800eefc:	e00a      	b.n	800ef14 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ef04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f003 ff69 	bl	8012de4 <USBD_LL_StallEP>
      break;
 800ef12:	bf00      	nop
  }

  return USBD_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b086      	sub	sp, #24
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	60f8      	str	r0, [r7, #12]
 800ef26:	460b      	mov	r3, r1
 800ef28:	607a      	str	r2, [r7, #4]
 800ef2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ef2c:	7afb      	ldrb	r3, [r7, #11]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d14b      	bne.n	800efca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ef38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef40:	2b03      	cmp	r3, #3
 800ef42:	d134      	bne.n	800efae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	68da      	ldr	r2, [r3, #12]
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d919      	bls.n	800ef84 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	68da      	ldr	r2, [r3, #12]
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	1ad2      	subs	r2, r2, r3
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d203      	bcs.n	800ef72 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	e002      	b.n	800ef78 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	461a      	mov	r2, r3
 800ef7a:	6879      	ldr	r1, [r7, #4]
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f000 ff38 	bl	800fdf2 <USBD_CtlContinueRx>
 800ef82:	e038      	b.n	800eff6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00a      	beq.n	800efa6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ef96:	2b03      	cmp	r3, #3
 800ef98:	d105      	bne.n	800efa6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f000 ff35 	bl	800fe16 <USBD_CtlSendStatus>
 800efac:	e023      	b.n	800eff6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800efb4:	2b05      	cmp	r3, #5
 800efb6:	d11e      	bne.n	800eff6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	2200      	movs	r2, #0
 800efbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800efc0:	2100      	movs	r1, #0
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	f003 ff0e 	bl	8012de4 <USBD_LL_StallEP>
 800efc8:	e015      	b.n	800eff6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efd0:	699b      	ldr	r3, [r3, #24]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00d      	beq.n	800eff2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800efdc:	2b03      	cmp	r3, #3
 800efde:	d108      	bne.n	800eff2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	7afa      	ldrb	r2, [r7, #11]
 800efea:	4611      	mov	r1, r2
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	4798      	blx	r3
 800eff0:	e001      	b.n	800eff6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eff2:	2302      	movs	r3, #2
 800eff4:	e000      	b.n	800eff8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3718      	adds	r7, #24
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	460b      	mov	r3, r1
 800f00a:	607a      	str	r2, [r7, #4]
 800f00c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f00e:	7afb      	ldrb	r3, [r7, #11]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d17f      	bne.n	800f114 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	3314      	adds	r3, #20
 800f018:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f020:	2b02      	cmp	r3, #2
 800f022:	d15c      	bne.n	800f0de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	68da      	ldr	r2, [r3, #12]
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	691b      	ldr	r3, [r3, #16]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d915      	bls.n	800f05c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	68da      	ldr	r2, [r3, #12]
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	691b      	ldr	r3, [r3, #16]
 800f038:	1ad2      	subs	r2, r2, r3
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	b29b      	uxth	r3, r3
 800f044:	461a      	mov	r2, r3
 800f046:	6879      	ldr	r1, [r7, #4]
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f000 fec0 	bl	800fdce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f04e:	2300      	movs	r3, #0
 800f050:	2200      	movs	r2, #0
 800f052:	2100      	movs	r1, #0
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f003 ff71 	bl	8012f3c <USBD_LL_PrepareReceive>
 800f05a:	e04e      	b.n	800f0fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	697a      	ldr	r2, [r7, #20]
 800f062:	6912      	ldr	r2, [r2, #16]
 800f064:	fbb3 f1f2 	udiv	r1, r3, r2
 800f068:	fb01 f202 	mul.w	r2, r1, r2
 800f06c:	1a9b      	subs	r3, r3, r2
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d11c      	bne.n	800f0ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	689a      	ldr	r2, [r3, #8]
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d316      	bcc.n	800f0ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	689a      	ldr	r2, [r3, #8]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f088:	429a      	cmp	r2, r3
 800f08a:	d20f      	bcs.n	800f0ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f08c:	2200      	movs	r2, #0
 800f08e:	2100      	movs	r1, #0
 800f090:	68f8      	ldr	r0, [r7, #12]
 800f092:	f000 fe9c 	bl	800fdce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2200      	movs	r2, #0
 800f09a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f09e:	2300      	movs	r3, #0
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	68f8      	ldr	r0, [r7, #12]
 800f0a6:	f003 ff49 	bl	8012f3c <USBD_LL_PrepareReceive>
 800f0aa:	e026      	b.n	800f0fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00a      	beq.n	800f0ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f0be:	2b03      	cmp	r3, #3
 800f0c0:	d105      	bne.n	800f0ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0c8:	68db      	ldr	r3, [r3, #12]
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f0ce:	2180      	movs	r1, #128	; 0x80
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f003 fe87 	bl	8012de4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f0d6:	68f8      	ldr	r0, [r7, #12]
 800f0d8:	f000 feb0 	bl	800fe3c <USBD_CtlReceiveStatus>
 800f0dc:	e00d      	b.n	800f0fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f0e4:	2b04      	cmp	r3, #4
 800f0e6:	d004      	beq.n	800f0f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d103      	bne.n	800f0fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f0f2:	2180      	movs	r1, #128	; 0x80
 800f0f4:	68f8      	ldr	r0, [r7, #12]
 800f0f6:	f003 fe75 	bl	8012de4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f100:	2b01      	cmp	r3, #1
 800f102:	d11d      	bne.n	800f140 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f104:	68f8      	ldr	r0, [r7, #12]
 800f106:	f7ff fe81 	bl	800ee0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f112:	e015      	b.n	800f140 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00d      	beq.n	800f13c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f126:	2b03      	cmp	r3, #3
 800f128:	d108      	bne.n	800f13c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	7afa      	ldrb	r2, [r7, #11]
 800f134:	4611      	mov	r1, r2
 800f136:	68f8      	ldr	r0, [r7, #12]
 800f138:	4798      	blx	r3
 800f13a:	e001      	b.n	800f140 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f13c:	2302      	movs	r3, #2
 800f13e:	e000      	b.n	800f142 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3718      	adds	r7, #24
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b082      	sub	sp, #8
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f152:	2340      	movs	r3, #64	; 0x40
 800f154:	2200      	movs	r2, #0
 800f156:	2100      	movs	r1, #0
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f003 fdfe 	bl	8012d5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2201      	movs	r2, #1
 800f162:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2240      	movs	r2, #64	; 0x40
 800f16a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f16e:	2340      	movs	r3, #64	; 0x40
 800f170:	2200      	movs	r2, #0
 800f172:	2180      	movs	r1, #128	; 0x80
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f003 fdf0 	bl	8012d5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2201      	movs	r2, #1
 800f17e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2240      	movs	r2, #64	; 0x40
 800f184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2200      	movs	r2, #0
 800f192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d009      	beq.n	800f1c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	6852      	ldr	r2, [r2, #4]
 800f1ba:	b2d2      	uxtb	r2, r2
 800f1bc:	4611      	mov	r1, r2
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	4798      	blx	r3
  }

  return USBD_OK;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	78fa      	ldrb	r2, [r7, #3]
 800f1dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f1de:	2300      	movs	r3, #0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	370c      	adds	r7, #12
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bc80      	pop	{r7}
 800f1e8:	4770      	bx	lr

0800f1ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2204      	movs	r2, #4
 800f202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	370c      	adds	r7, #12
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bc80      	pop	{r7}
 800f210:	4770      	bx	lr

0800f212 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f212:	b480      	push	{r7}
 800f214:	b083      	sub	sp, #12
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f220:	2b04      	cmp	r3, #4
 800f222:	d105      	bne.n	800f230 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	370c      	adds	r7, #12
 800f236:	46bd      	mov	sp, r7
 800f238:	bc80      	pop	{r7}
 800f23a:	4770      	bx	lr

0800f23c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d10b      	bne.n	800f266 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f254:	69db      	ldr	r3, [r3, #28]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d005      	beq.n	800f266 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f260:	69db      	ldr	r3, [r3, #28]
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f27a:	2300      	movs	r3, #0
 800f27c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f286:	2b40      	cmp	r3, #64	; 0x40
 800f288:	d005      	beq.n	800f296 <USBD_StdDevReq+0x26>
 800f28a:	2b40      	cmp	r3, #64	; 0x40
 800f28c:	d84f      	bhi.n	800f32e <USBD_StdDevReq+0xbe>
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d009      	beq.n	800f2a6 <USBD_StdDevReq+0x36>
 800f292:	2b20      	cmp	r3, #32
 800f294:	d14b      	bne.n	800f32e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	4798      	blx	r3
      break;
 800f2a4:	e048      	b.n	800f338 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	785b      	ldrb	r3, [r3, #1]
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	d839      	bhi.n	800f322 <USBD_StdDevReq+0xb2>
 800f2ae:	a201      	add	r2, pc, #4	; (adr r2, 800f2b4 <USBD_StdDevReq+0x44>)
 800f2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2b4:	0800f305 	.word	0x0800f305
 800f2b8:	0800f319 	.word	0x0800f319
 800f2bc:	0800f323 	.word	0x0800f323
 800f2c0:	0800f30f 	.word	0x0800f30f
 800f2c4:	0800f323 	.word	0x0800f323
 800f2c8:	0800f2e7 	.word	0x0800f2e7
 800f2cc:	0800f2dd 	.word	0x0800f2dd
 800f2d0:	0800f323 	.word	0x0800f323
 800f2d4:	0800f2fb 	.word	0x0800f2fb
 800f2d8:	0800f2f1 	.word	0x0800f2f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f2dc:	6839      	ldr	r1, [r7, #0]
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f9dc 	bl	800f69c <USBD_GetDescriptor>
          break;
 800f2e4:	e022      	b.n	800f32c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f2e6:	6839      	ldr	r1, [r7, #0]
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fb3f 	bl	800f96c <USBD_SetAddress>
          break;
 800f2ee:	e01d      	b.n	800f32c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800f2f0:	6839      	ldr	r1, [r7, #0]
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fb7e 	bl	800f9f4 <USBD_SetConfig>
          break;
 800f2f8:	e018      	b.n	800f32c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fc07 	bl	800fb10 <USBD_GetConfig>
          break;
 800f302:	e013      	b.n	800f32c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fc37 	bl	800fb7a <USBD_GetStatus>
          break;
 800f30c:	e00e      	b.n	800f32c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f30e:	6839      	ldr	r1, [r7, #0]
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f000 fc65 	bl	800fbe0 <USBD_SetFeature>
          break;
 800f316:	e009      	b.n	800f32c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fc74 	bl	800fc08 <USBD_ClrFeature>
          break;
 800f320:	e004      	b.n	800f32c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 fccc 	bl	800fcc2 <USBD_CtlError>
          break;
 800f32a:	bf00      	nop
      }
      break;
 800f32c:	e004      	b.n	800f338 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800f32e:	6839      	ldr	r1, [r7, #0]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 fcc6 	bl	800fcc2 <USBD_CtlError>
      break;
 800f336:	bf00      	nop
  }

  return ret;
 800f338:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop

0800f344 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f34e:	2300      	movs	r3, #0
 800f350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	781b      	ldrb	r3, [r3, #0]
 800f356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f35a:	2b40      	cmp	r3, #64	; 0x40
 800f35c:	d005      	beq.n	800f36a <USBD_StdItfReq+0x26>
 800f35e:	2b40      	cmp	r3, #64	; 0x40
 800f360:	d82e      	bhi.n	800f3c0 <USBD_StdItfReq+0x7c>
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <USBD_StdItfReq+0x26>
 800f366:	2b20      	cmp	r3, #32
 800f368:	d12a      	bne.n	800f3c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f370:	3b01      	subs	r3, #1
 800f372:	2b02      	cmp	r3, #2
 800f374:	d81d      	bhi.n	800f3b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	889b      	ldrh	r3, [r3, #4]
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d813      	bhi.n	800f3a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	6839      	ldr	r1, [r7, #0]
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	4798      	blx	r3
 800f38e:	4603      	mov	r3, r0
 800f390:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	88db      	ldrh	r3, [r3, #6]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d110      	bne.n	800f3bc <USBD_StdItfReq+0x78>
 800f39a:	7bfb      	ldrb	r3, [r7, #15]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d10d      	bne.n	800f3bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fd38 	bl	800fe16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f3a6:	e009      	b.n	800f3bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 fc89 	bl	800fcc2 <USBD_CtlError>
          break;
 800f3b0:	e004      	b.n	800f3bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800f3b2:	6839      	ldr	r1, [r7, #0]
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f000 fc84 	bl	800fcc2 <USBD_CtlError>
          break;
 800f3ba:	e000      	b.n	800f3be <USBD_StdItfReq+0x7a>
          break;
 800f3bc:	bf00      	nop
      }
      break;
 800f3be:	e004      	b.n	800f3ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800f3c0:	6839      	ldr	r1, [r7, #0]
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 fc7d 	bl	800fcc2 <USBD_CtlError>
      break;
 800f3c8:	bf00      	nop
  }

  return USBD_OK;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	889b      	ldrh	r3, [r3, #4]
 800f3e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3f0:	2b40      	cmp	r3, #64	; 0x40
 800f3f2:	d007      	beq.n	800f404 <USBD_StdEPReq+0x30>
 800f3f4:	2b40      	cmp	r3, #64	; 0x40
 800f3f6:	f200 8146 	bhi.w	800f686 <USBD_StdEPReq+0x2b2>
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00a      	beq.n	800f414 <USBD_StdEPReq+0x40>
 800f3fe:	2b20      	cmp	r3, #32
 800f400:	f040 8141 	bne.w	800f686 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f40a:	689b      	ldr	r3, [r3, #8]
 800f40c:	6839      	ldr	r1, [r7, #0]
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	4798      	blx	r3
      break;
 800f412:	e13d      	b.n	800f690 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f41c:	2b20      	cmp	r3, #32
 800f41e:	d10a      	bne.n	800f436 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f426:	689b      	ldr	r3, [r3, #8]
 800f428:	6839      	ldr	r1, [r7, #0]
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	4798      	blx	r3
 800f42e:	4603      	mov	r3, r0
 800f430:	73fb      	strb	r3, [r7, #15]

        return ret;
 800f432:	7bfb      	ldrb	r3, [r7, #15]
 800f434:	e12d      	b.n	800f692 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	785b      	ldrb	r3, [r3, #1]
 800f43a:	2b03      	cmp	r3, #3
 800f43c:	d007      	beq.n	800f44e <USBD_StdEPReq+0x7a>
 800f43e:	2b03      	cmp	r3, #3
 800f440:	f300 811b 	bgt.w	800f67a <USBD_StdEPReq+0x2a6>
 800f444:	2b00      	cmp	r3, #0
 800f446:	d072      	beq.n	800f52e <USBD_StdEPReq+0x15a>
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d03a      	beq.n	800f4c2 <USBD_StdEPReq+0xee>
 800f44c:	e115      	b.n	800f67a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f454:	2b02      	cmp	r3, #2
 800f456:	d002      	beq.n	800f45e <USBD_StdEPReq+0x8a>
 800f458:	2b03      	cmp	r3, #3
 800f45a:	d015      	beq.n	800f488 <USBD_StdEPReq+0xb4>
 800f45c:	e02b      	b.n	800f4b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f45e:	7bbb      	ldrb	r3, [r7, #14]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00c      	beq.n	800f47e <USBD_StdEPReq+0xaa>
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	2b80      	cmp	r3, #128	; 0x80
 800f468:	d009      	beq.n	800f47e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
 800f46c:	4619      	mov	r1, r3
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f003 fcb8 	bl	8012de4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f474:	2180      	movs	r1, #128	; 0x80
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f003 fcb4 	bl	8012de4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f47c:	e020      	b.n	800f4c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800f47e:	6839      	ldr	r1, [r7, #0]
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fc1e 	bl	800fcc2 <USBD_CtlError>
              break;
 800f486:	e01b      	b.n	800f4c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	885b      	ldrh	r3, [r3, #2]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d10e      	bne.n	800f4ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800f490:	7bbb      	ldrb	r3, [r7, #14]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00b      	beq.n	800f4ae <USBD_StdEPReq+0xda>
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	2b80      	cmp	r3, #128	; 0x80
 800f49a:	d008      	beq.n	800f4ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	88db      	ldrh	r3, [r3, #6]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d104      	bne.n	800f4ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800f4a4:	7bbb      	ldrb	r3, [r7, #14]
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f003 fc9b 	bl	8012de4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 fcb1 	bl	800fe16 <USBD_CtlSendStatus>

              break;
 800f4b4:	e004      	b.n	800f4c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fc02 	bl	800fcc2 <USBD_CtlError>
              break;
 800f4be:	bf00      	nop
          }
          break;
 800f4c0:	e0e0      	b.n	800f684 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4c8:	2b02      	cmp	r3, #2
 800f4ca:	d002      	beq.n	800f4d2 <USBD_StdEPReq+0xfe>
 800f4cc:	2b03      	cmp	r3, #3
 800f4ce:	d015      	beq.n	800f4fc <USBD_StdEPReq+0x128>
 800f4d0:	e026      	b.n	800f520 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4d2:	7bbb      	ldrb	r3, [r7, #14]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00c      	beq.n	800f4f2 <USBD_StdEPReq+0x11e>
 800f4d8:	7bbb      	ldrb	r3, [r7, #14]
 800f4da:	2b80      	cmp	r3, #128	; 0x80
 800f4dc:	d009      	beq.n	800f4f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f4de:	7bbb      	ldrb	r3, [r7, #14]
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f003 fc7e 	bl	8012de4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f4e8:	2180      	movs	r1, #128	; 0x80
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f003 fc7a 	bl	8012de4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f4f0:	e01c      	b.n	800f52c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800f4f2:	6839      	ldr	r1, [r7, #0]
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 fbe4 	bl	800fcc2 <USBD_CtlError>
              break;
 800f4fa:	e017      	b.n	800f52c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	885b      	ldrh	r3, [r3, #2]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d112      	bne.n	800f52a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f504:	7bbb      	ldrb	r3, [r7, #14]
 800f506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d004      	beq.n	800f518 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800f50e:	7bbb      	ldrb	r3, [r7, #14]
 800f510:	4619      	mov	r1, r3
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f003 fc85 	bl	8012e22 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f000 fc7c 	bl	800fe16 <USBD_CtlSendStatus>
              }
              break;
 800f51e:	e004      	b.n	800f52a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800f520:	6839      	ldr	r1, [r7, #0]
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 fbcd 	bl	800fcc2 <USBD_CtlError>
              break;
 800f528:	e000      	b.n	800f52c <USBD_StdEPReq+0x158>
              break;
 800f52a:	bf00      	nop
          }
          break;
 800f52c:	e0aa      	b.n	800f684 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f534:	2b02      	cmp	r3, #2
 800f536:	d002      	beq.n	800f53e <USBD_StdEPReq+0x16a>
 800f538:	2b03      	cmp	r3, #3
 800f53a:	d032      	beq.n	800f5a2 <USBD_StdEPReq+0x1ce>
 800f53c:	e097      	b.n	800f66e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f53e:	7bbb      	ldrb	r3, [r7, #14]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d007      	beq.n	800f554 <USBD_StdEPReq+0x180>
 800f544:	7bbb      	ldrb	r3, [r7, #14]
 800f546:	2b80      	cmp	r3, #128	; 0x80
 800f548:	d004      	beq.n	800f554 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 fbb8 	bl	800fcc2 <USBD_CtlError>
                break;
 800f552:	e091      	b.n	800f678 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	da0b      	bge.n	800f574 <USBD_StdEPReq+0x1a0>
 800f55c:	7bbb      	ldrb	r3, [r7, #14]
 800f55e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f562:	4613      	mov	r3, r2
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	4413      	add	r3, r2
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	3310      	adds	r3, #16
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	4413      	add	r3, r2
 800f570:	3304      	adds	r3, #4
 800f572:	e00b      	b.n	800f58c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f574:	7bbb      	ldrb	r3, [r7, #14]
 800f576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f57a:	4613      	mov	r3, r2
 800f57c:	009b      	lsls	r3, r3, #2
 800f57e:	4413      	add	r3, r2
 800f580:	009b      	lsls	r3, r3, #2
 800f582:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f586:	687a      	ldr	r2, [r7, #4]
 800f588:	4413      	add	r3, r2
 800f58a:	3304      	adds	r3, #4
 800f58c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	2200      	movs	r2, #0
 800f592:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2202      	movs	r2, #2
 800f598:	4619      	mov	r1, r3
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 fbfb 	bl	800fd96 <USBD_CtlSendData>
              break;
 800f5a0:	e06a      	b.n	800f678 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f5a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	da11      	bge.n	800f5ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f5aa:	7bbb      	ldrb	r3, [r7, #14]
 800f5ac:	f003 020f 	and.w	r2, r3, #15
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	4413      	add	r3, r2
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	440b      	add	r3, r1
 800f5bc:	3318      	adds	r3, #24
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d117      	bne.n	800f5f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800f5c4:	6839      	ldr	r1, [r7, #0]
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 fb7b 	bl	800fcc2 <USBD_CtlError>
                  break;
 800f5cc:	e054      	b.n	800f678 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f5ce:	7bbb      	ldrb	r3, [r7, #14]
 800f5d0:	f003 020f 	and.w	r2, r3, #15
 800f5d4:	6879      	ldr	r1, [r7, #4]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	4413      	add	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	440b      	add	r3, r1
 800f5e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d104      	bne.n	800f5f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800f5ea:	6839      	ldr	r1, [r7, #0]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 fb68 	bl	800fcc2 <USBD_CtlError>
                  break;
 800f5f2:	e041      	b.n	800f678 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	da0b      	bge.n	800f614 <USBD_StdEPReq+0x240>
 800f5fc:	7bbb      	ldrb	r3, [r7, #14]
 800f5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f602:	4613      	mov	r3, r2
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	3310      	adds	r3, #16
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	4413      	add	r3, r2
 800f610:	3304      	adds	r3, #4
 800f612:	e00b      	b.n	800f62c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f614:	7bbb      	ldrb	r3, [r7, #14]
 800f616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f61a:	4613      	mov	r3, r2
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4413      	add	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	4413      	add	r3, r2
 800f62a:	3304      	adds	r3, #4
 800f62c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f62e:	7bbb      	ldrb	r3, [r7, #14]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <USBD_StdEPReq+0x266>
 800f634:	7bbb      	ldrb	r3, [r7, #14]
 800f636:	2b80      	cmp	r3, #128	; 0x80
 800f638:	d103      	bne.n	800f642 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2200      	movs	r2, #0
 800f63e:	601a      	str	r2, [r3, #0]
 800f640:	e00e      	b.n	800f660 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800f642:	7bbb      	ldrb	r3, [r7, #14]
 800f644:	4619      	mov	r1, r3
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f003 fc0a 	bl	8012e60 <USBD_LL_IsStallEP>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d003      	beq.n	800f65a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	2201      	movs	r2, #1
 800f656:	601a      	str	r2, [r3, #0]
 800f658:	e002      	b.n	800f660 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	2200      	movs	r2, #0
 800f65e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	2202      	movs	r2, #2
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fb95 	bl	800fd96 <USBD_CtlSendData>
              break;
 800f66c:	e004      	b.n	800f678 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800f66e:	6839      	ldr	r1, [r7, #0]
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fb26 	bl	800fcc2 <USBD_CtlError>
              break;
 800f676:	bf00      	nop
          }
          break;
 800f678:	e004      	b.n	800f684 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800f67a:	6839      	ldr	r1, [r7, #0]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 fb20 	bl	800fcc2 <USBD_CtlError>
          break;
 800f682:	bf00      	nop
      }
      break;
 800f684:	e004      	b.n	800f690 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800f686:	6839      	ldr	r1, [r7, #0]
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fb1a 	bl	800fcc2 <USBD_CtlError>
      break;
 800f68e:	bf00      	nop
  }

  return ret;
 800f690:	7bfb      	ldrb	r3, [r7, #15]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b084      	sub	sp, #16
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	885b      	ldrh	r3, [r3, #2]
 800f6b6:	0a1b      	lsrs	r3, r3, #8
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	2b06      	cmp	r3, #6
 800f6be:	f200 8128 	bhi.w	800f912 <USBD_GetDescriptor+0x276>
 800f6c2:	a201      	add	r2, pc, #4	; (adr r2, 800f6c8 <USBD_GetDescriptor+0x2c>)
 800f6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c8:	0800f6e5 	.word	0x0800f6e5
 800f6cc:	0800f6fd 	.word	0x0800f6fd
 800f6d0:	0800f73d 	.word	0x0800f73d
 800f6d4:	0800f913 	.word	0x0800f913
 800f6d8:	0800f913 	.word	0x0800f913
 800f6dc:	0800f8b3 	.word	0x0800f8b3
 800f6e0:	0800f8df 	.word	0x0800f8df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	7c12      	ldrb	r2, [r2, #16]
 800f6f0:	f107 0108 	add.w	r1, r7, #8
 800f6f4:	4610      	mov	r0, r2
 800f6f6:	4798      	blx	r3
 800f6f8:	60f8      	str	r0, [r7, #12]
      break;
 800f6fa:	e112      	b.n	800f922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	7c1b      	ldrb	r3, [r3, #16]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d10d      	bne.n	800f720 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f70c:	f107 0208 	add.w	r2, r7, #8
 800f710:	4610      	mov	r0, r2
 800f712:	4798      	blx	r3
 800f714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3301      	adds	r3, #1
 800f71a:	2202      	movs	r2, #2
 800f71c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f71e:	e100      	b.n	800f922 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f728:	f107 0208 	add.w	r2, r7, #8
 800f72c:	4610      	mov	r0, r2
 800f72e:	4798      	blx	r3
 800f730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3301      	adds	r3, #1
 800f736:	2202      	movs	r2, #2
 800f738:	701a      	strb	r2, [r3, #0]
      break;
 800f73a:	e0f2      	b.n	800f922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	885b      	ldrh	r3, [r3, #2]
 800f740:	b2db      	uxtb	r3, r3
 800f742:	2b05      	cmp	r3, #5
 800f744:	f200 80ac 	bhi.w	800f8a0 <USBD_GetDescriptor+0x204>
 800f748:	a201      	add	r2, pc, #4	; (adr r2, 800f750 <USBD_GetDescriptor+0xb4>)
 800f74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f74e:	bf00      	nop
 800f750:	0800f769 	.word	0x0800f769
 800f754:	0800f79d 	.word	0x0800f79d
 800f758:	0800f7d1 	.word	0x0800f7d1
 800f75c:	0800f805 	.word	0x0800f805
 800f760:	0800f839 	.word	0x0800f839
 800f764:	0800f86d 	.word	0x0800f86d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00b      	beq.n	800f78c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	7c12      	ldrb	r2, [r2, #16]
 800f780:	f107 0108 	add.w	r1, r7, #8
 800f784:	4610      	mov	r0, r2
 800f786:	4798      	blx	r3
 800f788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f78a:	e091      	b.n	800f8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f78c:	6839      	ldr	r1, [r7, #0]
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 fa97 	bl	800fcc2 <USBD_CtlError>
            err++;
 800f794:	7afb      	ldrb	r3, [r7, #11]
 800f796:	3301      	adds	r3, #1
 800f798:	72fb      	strb	r3, [r7, #11]
          break;
 800f79a:	e089      	b.n	800f8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d00b      	beq.n	800f7c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	7c12      	ldrb	r2, [r2, #16]
 800f7b4:	f107 0108 	add.w	r1, r7, #8
 800f7b8:	4610      	mov	r0, r2
 800f7ba:	4798      	blx	r3
 800f7bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7be:	e077      	b.n	800f8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7c0:	6839      	ldr	r1, [r7, #0]
 800f7c2:	6878      	ldr	r0, [r7, #4]
 800f7c4:	f000 fa7d 	bl	800fcc2 <USBD_CtlError>
            err++;
 800f7c8:	7afb      	ldrb	r3, [r7, #11]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f7ce:	e06f      	b.n	800f8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00b      	beq.n	800f7f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	7c12      	ldrb	r2, [r2, #16]
 800f7e8:	f107 0108 	add.w	r1, r7, #8
 800f7ec:	4610      	mov	r0, r2
 800f7ee:	4798      	blx	r3
 800f7f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7f2:	e05d      	b.n	800f8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7f4:	6839      	ldr	r1, [r7, #0]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f000 fa63 	bl	800fcc2 <USBD_CtlError>
            err++;
 800f7fc:	7afb      	ldrb	r3, [r7, #11]
 800f7fe:	3301      	adds	r3, #1
 800f800:	72fb      	strb	r3, [r7, #11]
          break;
 800f802:	e055      	b.n	800f8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f80a:	691b      	ldr	r3, [r3, #16]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00b      	beq.n	800f828 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f816:	691b      	ldr	r3, [r3, #16]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	7c12      	ldrb	r2, [r2, #16]
 800f81c:	f107 0108 	add.w	r1, r7, #8
 800f820:	4610      	mov	r0, r2
 800f822:	4798      	blx	r3
 800f824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f826:	e043      	b.n	800f8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f828:	6839      	ldr	r1, [r7, #0]
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 fa49 	bl	800fcc2 <USBD_CtlError>
            err++;
 800f830:	7afb      	ldrb	r3, [r7, #11]
 800f832:	3301      	adds	r3, #1
 800f834:	72fb      	strb	r3, [r7, #11]
          break;
 800f836:	e03b      	b.n	800f8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f83e:	695b      	ldr	r3, [r3, #20]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d00b      	beq.n	800f85c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f84a:	695b      	ldr	r3, [r3, #20]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	7c12      	ldrb	r2, [r2, #16]
 800f850:	f107 0108 	add.w	r1, r7, #8
 800f854:	4610      	mov	r0, r2
 800f856:	4798      	blx	r3
 800f858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f85a:	e029      	b.n	800f8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fa2f 	bl	800fcc2 <USBD_CtlError>
            err++;
 800f864:	7afb      	ldrb	r3, [r7, #11]
 800f866:	3301      	adds	r3, #1
 800f868:	72fb      	strb	r3, [r7, #11]
          break;
 800f86a:	e021      	b.n	800f8b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f872:	699b      	ldr	r3, [r3, #24]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d00b      	beq.n	800f890 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f87e:	699b      	ldr	r3, [r3, #24]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	7c12      	ldrb	r2, [r2, #16]
 800f884:	f107 0108 	add.w	r1, r7, #8
 800f888:	4610      	mov	r0, r2
 800f88a:	4798      	blx	r3
 800f88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f88e:	e00f      	b.n	800f8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f890:	6839      	ldr	r1, [r7, #0]
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 fa15 	bl	800fcc2 <USBD_CtlError>
            err++;
 800f898:	7afb      	ldrb	r3, [r7, #11]
 800f89a:	3301      	adds	r3, #1
 800f89c:	72fb      	strb	r3, [r7, #11]
          break;
 800f89e:	e007      	b.n	800f8b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800f8a0:	6839      	ldr	r1, [r7, #0]
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 fa0d 	bl	800fcc2 <USBD_CtlError>
          err++;
 800f8a8:	7afb      	ldrb	r3, [r7, #11]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800f8ae:	e038      	b.n	800f922 <USBD_GetDescriptor+0x286>
 800f8b0:	e037      	b.n	800f922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	7c1b      	ldrb	r3, [r3, #16]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d109      	bne.n	800f8ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8c2:	f107 0208 	add.w	r2, r7, #8
 800f8c6:	4610      	mov	r0, r2
 800f8c8:	4798      	blx	r3
 800f8ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8cc:	e029      	b.n	800f922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f8ce:	6839      	ldr	r1, [r7, #0]
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 f9f6 	bl	800fcc2 <USBD_CtlError>
        err++;
 800f8d6:	7afb      	ldrb	r3, [r7, #11]
 800f8d8:	3301      	adds	r3, #1
 800f8da:	72fb      	strb	r3, [r7, #11]
      break;
 800f8dc:	e021      	b.n	800f922 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	7c1b      	ldrb	r3, [r3, #16]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10d      	bne.n	800f902 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ee:	f107 0208 	add.w	r2, r7, #8
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	4798      	blx	r3
 800f8f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	2207      	movs	r2, #7
 800f8fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f900:	e00f      	b.n	800f922 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f902:	6839      	ldr	r1, [r7, #0]
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f9dc 	bl	800fcc2 <USBD_CtlError>
        err++;
 800f90a:	7afb      	ldrb	r3, [r7, #11]
 800f90c:	3301      	adds	r3, #1
 800f90e:	72fb      	strb	r3, [r7, #11]
      break;
 800f910:	e007      	b.n	800f922 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f912:	6839      	ldr	r1, [r7, #0]
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f000 f9d4 	bl	800fcc2 <USBD_CtlError>
      err++;
 800f91a:	7afb      	ldrb	r3, [r7, #11]
 800f91c:	3301      	adds	r3, #1
 800f91e:	72fb      	strb	r3, [r7, #11]
      break;
 800f920:	bf00      	nop
  }

  if (err != 0U)
 800f922:	7afb      	ldrb	r3, [r7, #11]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d11c      	bne.n	800f962 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800f928:	893b      	ldrh	r3, [r7, #8]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d011      	beq.n	800f952 <USBD_GetDescriptor+0x2b6>
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	88db      	ldrh	r3, [r3, #6]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00d      	beq.n	800f952 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	88da      	ldrh	r2, [r3, #6]
 800f93a:	893b      	ldrh	r3, [r7, #8]
 800f93c:	4293      	cmp	r3, r2
 800f93e:	bf28      	it	cs
 800f940:	4613      	movcs	r3, r2
 800f942:	b29b      	uxth	r3, r3
 800f944:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f946:	893b      	ldrh	r3, [r7, #8]
 800f948:	461a      	mov	r2, r3
 800f94a:	68f9      	ldr	r1, [r7, #12]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 fa22 	bl	800fd96 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	88db      	ldrh	r3, [r3, #6]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d104      	bne.n	800f964 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fa5b 	bl	800fe16 <USBD_CtlSendStatus>
 800f960:	e000      	b.n	800f964 <USBD_GetDescriptor+0x2c8>
    return;
 800f962:	bf00      	nop
    }
  }
}
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop

0800f96c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b084      	sub	sp, #16
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	889b      	ldrh	r3, [r3, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d130      	bne.n	800f9e0 <USBD_SetAddress+0x74>
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	88db      	ldrh	r3, [r3, #6]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d12c      	bne.n	800f9e0 <USBD_SetAddress+0x74>
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	885b      	ldrh	r3, [r3, #2]
 800f98a:	2b7f      	cmp	r3, #127	; 0x7f
 800f98c:	d828      	bhi.n	800f9e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	885b      	ldrh	r3, [r3, #2]
 800f992:	b2db      	uxtb	r3, r3
 800f994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f998:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9a0:	2b03      	cmp	r3, #3
 800f9a2:	d104      	bne.n	800f9ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f9a4:	6839      	ldr	r1, [r7, #0]
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f98b 	bl	800fcc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9ac:	e01d      	b.n	800f9ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	7bfa      	ldrb	r2, [r7, #15]
 800f9b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f9b6:	7bfb      	ldrb	r3, [r7, #15]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f003 fa7c 	bl	8012eb8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fa28 	bl	800fe16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f9c6:	7bfb      	ldrb	r3, [r7, #15]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d004      	beq.n	800f9d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2202      	movs	r2, #2
 800f9d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9d4:	e009      	b.n	800f9ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9de:	e004      	b.n	800f9ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 f96d 	bl	800fcc2 <USBD_CtlError>
  }
}
 800f9e8:	bf00      	nop
 800f9ea:	bf00      	nop
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
	...

0800f9f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	885b      	ldrh	r3, [r3, #2]
 800fa02:	b2da      	uxtb	r2, r3
 800fa04:	4b41      	ldr	r3, [pc, #260]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa08:	4b40      	ldr	r3, [pc, #256]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d904      	bls.n	800fa1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 f955 	bl	800fcc2 <USBD_CtlError>
 800fa18:	e075      	b.n	800fb06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa20:	2b02      	cmp	r3, #2
 800fa22:	d002      	beq.n	800fa2a <USBD_SetConfig+0x36>
 800fa24:	2b03      	cmp	r3, #3
 800fa26:	d023      	beq.n	800fa70 <USBD_SetConfig+0x7c>
 800fa28:	e062      	b.n	800faf0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800fa2a:	4b38      	ldr	r3, [pc, #224]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d01a      	beq.n	800fa68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800fa32:	4b36      	ldr	r3, [pc, #216]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	461a      	mov	r2, r3
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2203      	movs	r2, #3
 800fa40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800fa44:	4b31      	ldr	r3, [pc, #196]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7ff f9e8 	bl	800ee20 <USBD_SetClassConfig>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b02      	cmp	r3, #2
 800fa54:	d104      	bne.n	800fa60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 f932 	bl	800fcc2 <USBD_CtlError>
            return;
 800fa5e:	e052      	b.n	800fb06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 f9d8 	bl	800fe16 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800fa66:	e04e      	b.n	800fb06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 f9d4 	bl	800fe16 <USBD_CtlSendStatus>
        break;
 800fa6e:	e04a      	b.n	800fb06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800fa70:	4b26      	ldr	r3, [pc, #152]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d112      	bne.n	800fa9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2202      	movs	r2, #2
 800fa7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800fa80:	4b22      	ldr	r3, [pc, #136]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	461a      	mov	r2, r3
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800fa8a:	4b20      	ldr	r3, [pc, #128]	; (800fb0c <USBD_SetConfig+0x118>)
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	4619      	mov	r1, r3
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f7ff f9e4 	bl	800ee5e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f9bd 	bl	800fe16 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800fa9c:	e033      	b.n	800fb06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800fa9e:	4b1b      	ldr	r3, [pc, #108]	; (800fb0c <USBD_SetConfig+0x118>)
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d01d      	beq.n	800fae8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	4619      	mov	r1, r3
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff f9d2 	bl	800ee5e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800faba:	4b14      	ldr	r3, [pc, #80]	; (800fb0c <USBD_SetConfig+0x118>)
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	461a      	mov	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800fac4:	4b11      	ldr	r3, [pc, #68]	; (800fb0c <USBD_SetConfig+0x118>)
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	4619      	mov	r1, r3
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7ff f9a8 	bl	800ee20 <USBD_SetClassConfig>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d104      	bne.n	800fae0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800fad6:	6839      	ldr	r1, [r7, #0]
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 f8f2 	bl	800fcc2 <USBD_CtlError>
            return;
 800fade:	e012      	b.n	800fb06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f998 	bl	800fe16 <USBD_CtlSendStatus>
        break;
 800fae6:	e00e      	b.n	800fb06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 f994 	bl	800fe16 <USBD_CtlSendStatus>
        break;
 800faee:	e00a      	b.n	800fb06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800faf0:	6839      	ldr	r1, [r7, #0]
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f8e5 	bl	800fcc2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800faf8:	4b04      	ldr	r3, [pc, #16]	; (800fb0c <USBD_SetConfig+0x118>)
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f7ff f9ad 	bl	800ee5e <USBD_ClrClassConfig>
        break;
 800fb04:	bf00      	nop
    }
  }
}
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	20000ec8 	.word	0x20000ec8

0800fb10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	88db      	ldrh	r3, [r3, #6]
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d004      	beq.n	800fb2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb22:	6839      	ldr	r1, [r7, #0]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 f8cc 	bl	800fcc2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fb2a:	e022      	b.n	800fb72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	dc02      	bgt.n	800fb3c <USBD_GetConfig+0x2c>
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	dc03      	bgt.n	800fb42 <USBD_GetConfig+0x32>
 800fb3a:	e015      	b.n	800fb68 <USBD_GetConfig+0x58>
 800fb3c:	2b03      	cmp	r3, #3
 800fb3e:	d00b      	beq.n	800fb58 <USBD_GetConfig+0x48>
 800fb40:	e012      	b.n	800fb68 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	3308      	adds	r3, #8
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	4619      	mov	r1, r3
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f920 	bl	800fd96 <USBD_CtlSendData>
        break;
 800fb56:	e00c      	b.n	800fb72 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	4619      	mov	r1, r3
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f918 	bl	800fd96 <USBD_CtlSendData>
        break;
 800fb66:	e004      	b.n	800fb72 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800fb68:	6839      	ldr	r1, [r7, #0]
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 f8a9 	bl	800fcc2 <USBD_CtlError>
        break;
 800fb70:	bf00      	nop
}
 800fb72:	bf00      	nop
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b082      	sub	sp, #8
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
 800fb82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d81e      	bhi.n	800fbce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	88db      	ldrh	r3, [r3, #6]
 800fb94:	2b02      	cmp	r3, #2
 800fb96:	d004      	beq.n	800fba2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800fb98:	6839      	ldr	r1, [r7, #0]
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f000 f891 	bl	800fcc2 <USBD_CtlError>
        break;
 800fba0:	e01a      	b.n	800fbd8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2201      	movs	r2, #1
 800fba6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d005      	beq.n	800fbbe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	68db      	ldr	r3, [r3, #12]
 800fbb6:	f043 0202 	orr.w	r2, r3, #2
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	330c      	adds	r3, #12
 800fbc2:	2202      	movs	r2, #2
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 f8e5 	bl	800fd96 <USBD_CtlSendData>
      break;
 800fbcc:	e004      	b.n	800fbd8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800fbce:	6839      	ldr	r1, [r7, #0]
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 f876 	bl	800fcc2 <USBD_CtlError>
      break;
 800fbd6:	bf00      	nop
  }
}
 800fbd8:	bf00      	nop
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	885b      	ldrh	r3, [r3, #2]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d106      	bne.n	800fc00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f90b 	bl	800fe16 <USBD_CtlSendStatus>
  }
}
 800fc00:	bf00      	nop
 800fc02:	3708      	adds	r7, #8
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	d80b      	bhi.n	800fc36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	885b      	ldrh	r3, [r3, #2]
 800fc22:	2b01      	cmp	r3, #1
 800fc24:	d10c      	bne.n	800fc40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2200      	movs	r2, #0
 800fc2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 f8f1 	bl	800fe16 <USBD_CtlSendStatus>
      }
      break;
 800fc34:	e004      	b.n	800fc40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f000 f842 	bl	800fcc2 <USBD_CtlError>
      break;
 800fc3e:	e000      	b.n	800fc42 <USBD_ClrFeature+0x3a>
      break;
 800fc40:	bf00      	nop
  }
}
 800fc42:	bf00      	nop
 800fc44:	3708      	adds	r7, #8
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fc4a:	b480      	push	{r7}
 800fc4c:	b083      	sub	sp, #12
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
 800fc52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	781a      	ldrb	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	785a      	ldrb	r2, [r3, #1]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	3302      	adds	r3, #2
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	3303      	adds	r3, #3
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	021b      	lsls	r3, r3, #8
 800fc76:	b29b      	uxth	r3, r3
 800fc78:	4413      	add	r3, r2
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	3304      	adds	r3, #4
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	3305      	adds	r3, #5
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	021b      	lsls	r3, r3, #8
 800fc92:	b29b      	uxth	r3, r3
 800fc94:	4413      	add	r3, r2
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	3306      	adds	r3, #6
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	3307      	adds	r3, #7
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	021b      	lsls	r3, r3, #8
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	4413      	add	r3, r2
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	80da      	strh	r2, [r3, #6]

}
 800fcb8:	bf00      	nop
 800fcba:	370c      	adds	r7, #12
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bc80      	pop	{r7}
 800fcc0:	4770      	bx	lr

0800fcc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
 800fcca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800fccc:	2180      	movs	r1, #128	; 0x80
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f003 f888 	bl	8012de4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800fcd4:	2100      	movs	r1, #0
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f003 f884 	bl	8012de4 <USBD_LL_StallEP>
}
 800fcdc:	bf00      	nop
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b086      	sub	sp, #24
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d032      	beq.n	800fd60 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	f000 f834 	bl	800fd68 <USBD_GetLen>
 800fd00:	4603      	mov	r3, r0
 800fd02:	3301      	adds	r3, #1
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800fd0e:	7dfb      	ldrb	r3, [r7, #23]
 800fd10:	1c5a      	adds	r2, r3, #1
 800fd12:	75fa      	strb	r2, [r7, #23]
 800fd14:	461a      	mov	r2, r3
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	4413      	add	r3, r2
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	7812      	ldrb	r2, [r2, #0]
 800fd1e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800fd20:	7dfb      	ldrb	r3, [r7, #23]
 800fd22:	1c5a      	adds	r2, r3, #1
 800fd24:	75fa      	strb	r2, [r7, #23]
 800fd26:	461a      	mov	r2, r3
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	4413      	add	r3, r2
 800fd2c:	2203      	movs	r2, #3
 800fd2e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800fd30:	e012      	b.n	800fd58 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	1c5a      	adds	r2, r3, #1
 800fd36:	60fa      	str	r2, [r7, #12]
 800fd38:	7dfa      	ldrb	r2, [r7, #23]
 800fd3a:	1c51      	adds	r1, r2, #1
 800fd3c:	75f9      	strb	r1, [r7, #23]
 800fd3e:	4611      	mov	r1, r2
 800fd40:	68ba      	ldr	r2, [r7, #8]
 800fd42:	440a      	add	r2, r1
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800fd48:	7dfb      	ldrb	r3, [r7, #23]
 800fd4a:	1c5a      	adds	r2, r3, #1
 800fd4c:	75fa      	strb	r2, [r7, #23]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	4413      	add	r3, r2
 800fd54:	2200      	movs	r2, #0
 800fd56:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d1e8      	bne.n	800fd32 <USBD_GetString+0x4e>
    }
  }
}
 800fd60:	bf00      	nop
 800fd62:	3718      	adds	r7, #24
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b085      	sub	sp, #20
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fd70:	2300      	movs	r3, #0
 800fd72:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800fd74:	e005      	b.n	800fd82 <USBD_GetLen+0x1a>
  {
    len++;
 800fd76:	7bfb      	ldrb	r3, [r7, #15]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1f5      	bne.n	800fd76 <USBD_GetLen+0xe>
  }

  return len;
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3714      	adds	r7, #20
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bc80      	pop	{r7}
 800fd94:	4770      	bx	lr

0800fd96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b084      	sub	sp, #16
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	60b9      	str	r1, [r7, #8]
 800fda0:	4613      	mov	r3, r2
 800fda2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2202      	movs	r2, #2
 800fda8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fdac:	88fa      	ldrh	r2, [r7, #6]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800fdb2:	88fa      	ldrh	r2, [r7, #6]
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fdb8:	88fb      	ldrh	r3, [r7, #6]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f003 f899 	bl	8012ef6 <USBD_LL_Transmit>

  return USBD_OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3710      	adds	r7, #16
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	60f8      	str	r0, [r7, #12]
 800fdd6:	60b9      	str	r1, [r7, #8]
 800fdd8:	4613      	mov	r3, r2
 800fdda:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fddc:	88fb      	ldrh	r3, [r7, #6]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	2100      	movs	r1, #0
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f003 f887 	bl	8012ef6 <USBD_LL_Transmit>

  return USBD_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	60f8      	str	r0, [r7, #12]
 800fdfa:	60b9      	str	r1, [r7, #8]
 800fdfc:	4613      	mov	r3, r2
 800fdfe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe00:	88fb      	ldrh	r3, [r7, #6]
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	2100      	movs	r1, #0
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f003 f898 	bl	8012f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe0c:	2300      	movs	r3, #0
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}

0800fe16 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fe16:	b580      	push	{r7, lr}
 800fe18:	b082      	sub	sp, #8
 800fe1a:	af00      	add	r7, sp, #0
 800fe1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2204      	movs	r2, #4
 800fe22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe26:	2300      	movs	r3, #0
 800fe28:	2200      	movs	r2, #0
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f003 f862 	bl	8012ef6 <USBD_LL_Transmit>

  return USBD_OK;
 800fe32:	2300      	movs	r3, #0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3708      	adds	r7, #8
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2205      	movs	r2, #5
 800fe48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	2200      	movs	r2, #0
 800fe50:	2100      	movs	r1, #0
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f003 f872 	bl	8012f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b084      	sub	sp, #16
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fe6e:	79fb      	ldrb	r3, [r7, #7]
 800fe70:	4a08      	ldr	r2, [pc, #32]	; (800fe94 <disk_status+0x30>)
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	4413      	add	r3, r2
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	79fa      	ldrb	r2, [r7, #7]
 800fe7c:	4905      	ldr	r1, [pc, #20]	; (800fe94 <disk_status+0x30>)
 800fe7e:	440a      	add	r2, r1
 800fe80:	7a12      	ldrb	r2, [r2, #8]
 800fe82:	4610      	mov	r0, r2
 800fe84:	4798      	blx	r3
 800fe86:	4603      	mov	r3, r0
 800fe88:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fe8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3710      	adds	r7, #16
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	20000eec 	.word	0x20000eec

0800fe98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	4603      	mov	r3, r0
 800fea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fea2:	2300      	movs	r3, #0
 800fea4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800fea6:	79fb      	ldrb	r3, [r7, #7]
 800fea8:	4a0d      	ldr	r2, [pc, #52]	; (800fee0 <disk_initialize+0x48>)
 800feaa:	5cd3      	ldrb	r3, [r2, r3]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d111      	bne.n	800fed4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800feb0:	79fb      	ldrb	r3, [r7, #7]
 800feb2:	4a0b      	ldr	r2, [pc, #44]	; (800fee0 <disk_initialize+0x48>)
 800feb4:	2101      	movs	r1, #1
 800feb6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800feb8:	79fb      	ldrb	r3, [r7, #7]
 800feba:	4a09      	ldr	r2, [pc, #36]	; (800fee0 <disk_initialize+0x48>)
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	4413      	add	r3, r2
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	79fa      	ldrb	r2, [r7, #7]
 800fec6:	4906      	ldr	r1, [pc, #24]	; (800fee0 <disk_initialize+0x48>)
 800fec8:	440a      	add	r2, r1
 800feca:	7a12      	ldrb	r2, [r2, #8]
 800fecc:	4610      	mov	r0, r2
 800fece:	4798      	blx	r3
 800fed0:	4603      	mov	r3, r0
 800fed2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	20000eec 	.word	0x20000eec

0800fee4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fee4:	b590      	push	{r4, r7, lr}
 800fee6:	b087      	sub	sp, #28
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60b9      	str	r1, [r7, #8]
 800feec:	607a      	str	r2, [r7, #4]
 800feee:	603b      	str	r3, [r7, #0]
 800fef0:	4603      	mov	r3, r0
 800fef2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fef4:	7bfb      	ldrb	r3, [r7, #15]
 800fef6:	4a0a      	ldr	r2, [pc, #40]	; (800ff20 <disk_read+0x3c>)
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	4413      	add	r3, r2
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	689c      	ldr	r4, [r3, #8]
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
 800ff02:	4a07      	ldr	r2, [pc, #28]	; (800ff20 <disk_read+0x3c>)
 800ff04:	4413      	add	r3, r2
 800ff06:	7a18      	ldrb	r0, [r3, #8]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	68b9      	ldr	r1, [r7, #8]
 800ff0e:	47a0      	blx	r4
 800ff10:	4603      	mov	r3, r0
 800ff12:	75fb      	strb	r3, [r7, #23]
  return res;
 800ff14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd90      	pop	{r4, r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20000eec 	.word	0x20000eec

0800ff24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ff24:	b590      	push	{r4, r7, lr}
 800ff26:	b087      	sub	sp, #28
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60b9      	str	r1, [r7, #8]
 800ff2c:	607a      	str	r2, [r7, #4]
 800ff2e:	603b      	str	r3, [r7, #0]
 800ff30:	4603      	mov	r3, r0
 800ff32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	4a0a      	ldr	r2, [pc, #40]	; (800ff60 <disk_write+0x3c>)
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4413      	add	r3, r2
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	68dc      	ldr	r4, [r3, #12]
 800ff40:	7bfb      	ldrb	r3, [r7, #15]
 800ff42:	4a07      	ldr	r2, [pc, #28]	; (800ff60 <disk_write+0x3c>)
 800ff44:	4413      	add	r3, r2
 800ff46:	7a18      	ldrb	r0, [r3, #8]
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	68b9      	ldr	r1, [r7, #8]
 800ff4e:	47a0      	blx	r4
 800ff50:	4603      	mov	r3, r0
 800ff52:	75fb      	strb	r3, [r7, #23]
  return res;
 800ff54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	371c      	adds	r7, #28
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd90      	pop	{r4, r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	20000eec 	.word	0x20000eec

0800ff64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	603a      	str	r2, [r7, #0]
 800ff6e:	71fb      	strb	r3, [r7, #7]
 800ff70:	460b      	mov	r3, r1
 800ff72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	4a09      	ldr	r2, [pc, #36]	; (800ff9c <disk_ioctl+0x38>)
 800ff78:	009b      	lsls	r3, r3, #2
 800ff7a:	4413      	add	r3, r2
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	691b      	ldr	r3, [r3, #16]
 800ff80:	79fa      	ldrb	r2, [r7, #7]
 800ff82:	4906      	ldr	r1, [pc, #24]	; (800ff9c <disk_ioctl+0x38>)
 800ff84:	440a      	add	r2, r1
 800ff86:	7a10      	ldrb	r0, [r2, #8]
 800ff88:	79b9      	ldrb	r1, [r7, #6]
 800ff8a:	683a      	ldr	r2, [r7, #0]
 800ff8c:	4798      	blx	r3
 800ff8e:	4603      	mov	r3, r0
 800ff90:	73fb      	strb	r3, [r7, #15]
  return res;
 800ff92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	20000eec 	.word	0x20000eec

0800ffa0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ffa0:	b480      	push	{r7}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800ffb4:	e007      	b.n	800ffc6 <mem_cpy+0x26>
		*d++ = *s++;
 800ffb6:	693a      	ldr	r2, [r7, #16]
 800ffb8:	1c53      	adds	r3, r2, #1
 800ffba:	613b      	str	r3, [r7, #16]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	1c59      	adds	r1, r3, #1
 800ffc0:	6179      	str	r1, [r7, #20]
 800ffc2:	7812      	ldrb	r2, [r2, #0]
 800ffc4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	1e5a      	subs	r2, r3, #1
 800ffca:	607a      	str	r2, [r7, #4]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d1f2      	bne.n	800ffb6 <mem_cpy+0x16>
}
 800ffd0:	bf00      	nop
 800ffd2:	bf00      	nop
 800ffd4:	371c      	adds	r7, #28
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bc80      	pop	{r7}
 800ffda:	4770      	bx	lr

0800ffdc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ffdc:	b480      	push	{r7}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800ffec:	e005      	b.n	800fffa <mem_set+0x1e>
		*d++ = (BYTE)val;
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	1c5a      	adds	r2, r3, #1
 800fff2:	617a      	str	r2, [r7, #20]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	b2d2      	uxtb	r2, r2
 800fff8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	1e5a      	subs	r2, r3, #1
 800fffe:	607a      	str	r2, [r7, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1f4      	bne.n	800ffee <mem_set+0x12>
}
 8010004:	bf00      	nop
 8010006:	bf00      	nop
 8010008:	371c      	adds	r7, #28
 801000a:	46bd      	mov	sp, r7
 801000c:	bc80      	pop	{r7}
 801000e:	4770      	bx	lr

08010010 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8010010:	b480      	push	{r7}
 8010012:	b089      	sub	sp, #36	; 0x24
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	61fb      	str	r3, [r7, #28]
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010024:	2300      	movs	r3, #0
 8010026:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8010028:	bf00      	nop
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	1e5a      	subs	r2, r3, #1
 801002e:	607a      	str	r2, [r7, #4]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00d      	beq.n	8010050 <mem_cmp+0x40>
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	1c5a      	adds	r2, r3, #1
 8010038:	61fa      	str	r2, [r7, #28]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	4619      	mov	r1, r3
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	1c5a      	adds	r2, r3, #1
 8010042:	61ba      	str	r2, [r7, #24]
 8010044:	781b      	ldrb	r3, [r3, #0]
 8010046:	1acb      	subs	r3, r1, r3
 8010048:	617b      	str	r3, [r7, #20]
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d0ec      	beq.n	801002a <mem_cmp+0x1a>
	return r;
 8010050:	697b      	ldr	r3, [r7, #20]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3724      	adds	r7, #36	; 0x24
 8010056:	46bd      	mov	sp, r7
 8010058:	bc80      	pop	{r7}
 801005a:	4770      	bx	lr

0801005c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010066:	e002      	b.n	801006e <chk_chr+0x12>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	3301      	adds	r3, #1
 801006c:	607b      	str	r3, [r7, #4]
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d005      	beq.n	8010082 <chk_chr+0x26>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	461a      	mov	r2, r3
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	4293      	cmp	r3, r2
 8010080:	d1f2      	bne.n	8010068 <chk_chr+0xc>
	return *str;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	781b      	ldrb	r3, [r3, #0]
}
 8010086:	4618      	mov	r0, r3
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	bc80      	pop	{r7}
 801008e:	4770      	bx	lr

08010090 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801009a:	2300      	movs	r3, #0
 801009c:	60bb      	str	r3, [r7, #8]
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	e038      	b.n	8010116 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80100a4:	492f      	ldr	r1, [pc, #188]	; (8010164 <chk_lock+0xd4>)
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	4613      	mov	r3, r2
 80100aa:	005b      	lsls	r3, r3, #1
 80100ac:	4413      	add	r3, r2
 80100ae:	009b      	lsls	r3, r3, #2
 80100b0:	440b      	add	r3, r1
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d029      	beq.n	801010c <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80100b8:	492a      	ldr	r1, [pc, #168]	; (8010164 <chk_lock+0xd4>)
 80100ba:	68fa      	ldr	r2, [r7, #12]
 80100bc:	4613      	mov	r3, r2
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	4413      	add	r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	440b      	add	r3, r1
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d11e      	bne.n	8010110 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80100d2:	4924      	ldr	r1, [pc, #144]	; (8010164 <chk_lock+0xd4>)
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	4613      	mov	r3, r2
 80100d8:	005b      	lsls	r3, r3, #1
 80100da:	4413      	add	r3, r2
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	440b      	add	r3, r1
 80100e0:	3304      	adds	r3, #4
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d110      	bne.n	8010110 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80100ee:	491d      	ldr	r1, [pc, #116]	; (8010164 <chk_lock+0xd4>)
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	4613      	mov	r3, r2
 80100f4:	005b      	lsls	r3, r3, #1
 80100f6:	4413      	add	r3, r2
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	440b      	add	r3, r1
 80100fc:	3308      	adds	r3, #8
 80100fe:	881a      	ldrh	r2, [r3, #0]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8010106:	429a      	cmp	r2, r3
 8010108:	d102      	bne.n	8010110 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 801010a:	e007      	b.n	801011c <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 801010c:	2301      	movs	r3, #1
 801010e:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	3301      	adds	r3, #1
 8010114:	60fb      	str	r3, [r7, #12]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d9c3      	bls.n	80100a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2b02      	cmp	r3, #2
 8010120:	d109      	bne.n	8010136 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d102      	bne.n	801012e <chk_lock+0x9e>
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	2b02      	cmp	r3, #2
 801012c:	d101      	bne.n	8010132 <chk_lock+0xa2>
 801012e:	2300      	movs	r3, #0
 8010130:	e013      	b.n	801015a <chk_lock+0xca>
 8010132:	2312      	movs	r3, #18
 8010134:	e011      	b.n	801015a <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010136:	683b      	ldr	r3, [r7, #0]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d10b      	bne.n	8010154 <chk_lock+0xc4>
 801013c:	4909      	ldr	r1, [pc, #36]	; (8010164 <chk_lock+0xd4>)
 801013e:	68fa      	ldr	r2, [r7, #12]
 8010140:	4613      	mov	r3, r2
 8010142:	005b      	lsls	r3, r3, #1
 8010144:	4413      	add	r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	440b      	add	r3, r1
 801014a:	330a      	adds	r3, #10
 801014c:	881b      	ldrh	r3, [r3, #0]
 801014e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010152:	d101      	bne.n	8010158 <chk_lock+0xc8>
 8010154:	2310      	movs	r3, #16
 8010156:	e000      	b.n	801015a <chk_lock+0xca>
 8010158:	2300      	movs	r3, #0
}
 801015a:	4618      	mov	r0, r3
 801015c:	3714      	adds	r7, #20
 801015e:	46bd      	mov	sp, r7
 8010160:	bc80      	pop	{r7}
 8010162:	4770      	bx	lr
 8010164:	20000ed4 	.word	0x20000ed4

08010168 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801016e:	2300      	movs	r3, #0
 8010170:	607b      	str	r3, [r7, #4]
 8010172:	e002      	b.n	801017a <enq_lock+0x12>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3301      	adds	r3, #1
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d809      	bhi.n	8010194 <enq_lock+0x2c>
 8010180:	490a      	ldr	r1, [pc, #40]	; (80101ac <enq_lock+0x44>)
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	4613      	mov	r3, r2
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	4413      	add	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	440b      	add	r3, r1
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1ef      	bne.n	8010174 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b02      	cmp	r3, #2
 8010198:	bf14      	ite	ne
 801019a:	2301      	movne	r3, #1
 801019c:	2300      	moveq	r3, #0
 801019e:	b2db      	uxtb	r3, r3
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	370c      	adds	r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bc80      	pop	{r7}
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop
 80101ac:	20000ed4 	.word	0x20000ed4

080101b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80101ba:	2300      	movs	r3, #0
 80101bc:	60fb      	str	r3, [r7, #12]
 80101be:	e02b      	b.n	8010218 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80101c0:	4955      	ldr	r1, [pc, #340]	; (8010318 <inc_lock+0x168>)
 80101c2:	68fa      	ldr	r2, [r7, #12]
 80101c4:	4613      	mov	r3, r2
 80101c6:	005b      	lsls	r3, r3, #1
 80101c8:	4413      	add	r3, r2
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	440b      	add	r3, r1
 80101ce:	681a      	ldr	r2, [r3, #0]
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d11b      	bne.n	8010212 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80101da:	494f      	ldr	r1, [pc, #316]	; (8010318 <inc_lock+0x168>)
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	4613      	mov	r3, r2
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	4413      	add	r3, r2
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	440b      	add	r3, r1
 80101e8:	3304      	adds	r3, #4
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d10d      	bne.n	8010212 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80101f6:	4948      	ldr	r1, [pc, #288]	; (8010318 <inc_lock+0x168>)
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	4613      	mov	r3, r2
 80101fc:	005b      	lsls	r3, r3, #1
 80101fe:	4413      	add	r3, r2
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	440b      	add	r3, r1
 8010204:	3308      	adds	r3, #8
 8010206:	881a      	ldrh	r2, [r3, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 801020e:	429a      	cmp	r2, r3
 8010210:	d006      	beq.n	8010220 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	3301      	adds	r3, #1
 8010216:	60fb      	str	r3, [r7, #12]
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2b01      	cmp	r3, #1
 801021c:	d9d0      	bls.n	80101c0 <inc_lock+0x10>
 801021e:	e000      	b.n	8010222 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8010220:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b02      	cmp	r3, #2
 8010226:	d145      	bne.n	80102b4 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010228:	2300      	movs	r3, #0
 801022a:	60fb      	str	r3, [r7, #12]
 801022c:	e002      	b.n	8010234 <inc_lock+0x84>
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	3301      	adds	r3, #1
 8010232:	60fb      	str	r3, [r7, #12]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2b01      	cmp	r3, #1
 8010238:	d809      	bhi.n	801024e <inc_lock+0x9e>
 801023a:	4937      	ldr	r1, [pc, #220]	; (8010318 <inc_lock+0x168>)
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	4613      	mov	r3, r2
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	4413      	add	r3, r2
 8010244:	009b      	lsls	r3, r3, #2
 8010246:	440b      	add	r3, r1
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1ef      	bne.n	801022e <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2b02      	cmp	r3, #2
 8010252:	d101      	bne.n	8010258 <inc_lock+0xa8>
 8010254:	2300      	movs	r3, #0
 8010256:	e05a      	b.n	801030e <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 801025e:	482e      	ldr	r0, [pc, #184]	; (8010318 <inc_lock+0x168>)
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	4613      	mov	r3, r2
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4413      	add	r3, r2
 8010268:	009b      	lsls	r3, r3, #2
 801026a:	4403      	add	r3, r0
 801026c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8010274:	4828      	ldr	r0, [pc, #160]	; (8010318 <inc_lock+0x168>)
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	4613      	mov	r3, r2
 801027a:	005b      	lsls	r3, r3, #1
 801027c:	4413      	add	r3, r2
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4403      	add	r3, r0
 8010282:	3304      	adds	r3, #4
 8010284:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 801028c:	4922      	ldr	r1, [pc, #136]	; (8010318 <inc_lock+0x168>)
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	4613      	mov	r3, r2
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	4413      	add	r3, r2
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	440b      	add	r3, r1
 801029a:	3308      	adds	r3, #8
 801029c:	4602      	mov	r2, r0
 801029e:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80102a0:	491d      	ldr	r1, [pc, #116]	; (8010318 <inc_lock+0x168>)
 80102a2:	68fa      	ldr	r2, [r7, #12]
 80102a4:	4613      	mov	r3, r2
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	4413      	add	r3, r2
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	440b      	add	r3, r1
 80102ae:	330a      	adds	r3, #10
 80102b0:	2200      	movs	r2, #0
 80102b2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00c      	beq.n	80102d4 <inc_lock+0x124>
 80102ba:	4917      	ldr	r1, [pc, #92]	; (8010318 <inc_lock+0x168>)
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	4613      	mov	r3, r2
 80102c0:	005b      	lsls	r3, r3, #1
 80102c2:	4413      	add	r3, r2
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	440b      	add	r3, r1
 80102c8:	330a      	adds	r3, #10
 80102ca:	881b      	ldrh	r3, [r3, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d001      	beq.n	80102d4 <inc_lock+0x124>
 80102d0:	2300      	movs	r3, #0
 80102d2:	e01c      	b.n	801030e <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10b      	bne.n	80102f2 <inc_lock+0x142>
 80102da:	490f      	ldr	r1, [pc, #60]	; (8010318 <inc_lock+0x168>)
 80102dc:	68fa      	ldr	r2, [r7, #12]
 80102de:	4613      	mov	r3, r2
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	4413      	add	r3, r2
 80102e4:	009b      	lsls	r3, r3, #2
 80102e6:	440b      	add	r3, r1
 80102e8:	330a      	adds	r3, #10
 80102ea:	881b      	ldrh	r3, [r3, #0]
 80102ec:	3301      	adds	r3, #1
 80102ee:	b299      	uxth	r1, r3
 80102f0:	e001      	b.n	80102f6 <inc_lock+0x146>
 80102f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80102f6:	4808      	ldr	r0, [pc, #32]	; (8010318 <inc_lock+0x168>)
 80102f8:	68fa      	ldr	r2, [r7, #12]
 80102fa:	4613      	mov	r3, r2
 80102fc:	005b      	lsls	r3, r3, #1
 80102fe:	4413      	add	r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	4403      	add	r3, r0
 8010304:	330a      	adds	r3, #10
 8010306:	460a      	mov	r2, r1
 8010308:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3301      	adds	r3, #1
}
 801030e:	4618      	mov	r0, r3
 8010310:	3714      	adds	r7, #20
 8010312:	46bd      	mov	sp, r7
 8010314:	bc80      	pop	{r7}
 8010316:	4770      	bx	lr
 8010318:	20000ed4 	.word	0x20000ed4

0801031c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	3b01      	subs	r3, #1
 8010328:	607b      	str	r3, [r7, #4]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2b01      	cmp	r3, #1
 801032e:	d82e      	bhi.n	801038e <dec_lock+0x72>
		n = Files[i].ctr;
 8010330:	491b      	ldr	r1, [pc, #108]	; (80103a0 <dec_lock+0x84>)
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	4613      	mov	r3, r2
 8010336:	005b      	lsls	r3, r3, #1
 8010338:	4413      	add	r3, r2
 801033a:	009b      	lsls	r3, r3, #2
 801033c:	440b      	add	r3, r1
 801033e:	330a      	adds	r3, #10
 8010340:	881b      	ldrh	r3, [r3, #0]
 8010342:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010344:	89fb      	ldrh	r3, [r7, #14]
 8010346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801034a:	d101      	bne.n	8010350 <dec_lock+0x34>
 801034c:	2300      	movs	r3, #0
 801034e:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8010350:	89fb      	ldrh	r3, [r7, #14]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d002      	beq.n	801035c <dec_lock+0x40>
 8010356:	89fb      	ldrh	r3, [r7, #14]
 8010358:	3b01      	subs	r3, #1
 801035a:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801035c:	4910      	ldr	r1, [pc, #64]	; (80103a0 <dec_lock+0x84>)
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	4613      	mov	r3, r2
 8010362:	005b      	lsls	r3, r3, #1
 8010364:	4413      	add	r3, r2
 8010366:	009b      	lsls	r3, r3, #2
 8010368:	440b      	add	r3, r1
 801036a:	330a      	adds	r3, #10
 801036c:	89fa      	ldrh	r2, [r7, #14]
 801036e:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010370:	89fb      	ldrh	r3, [r7, #14]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d108      	bne.n	8010388 <dec_lock+0x6c>
 8010376:	490a      	ldr	r1, [pc, #40]	; (80103a0 <dec_lock+0x84>)
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	4613      	mov	r3, r2
 801037c:	005b      	lsls	r3, r3, #1
 801037e:	4413      	add	r3, r2
 8010380:	009b      	lsls	r3, r3, #2
 8010382:	440b      	add	r3, r1
 8010384:	2200      	movs	r2, #0
 8010386:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010388:	2300      	movs	r3, #0
 801038a:	737b      	strb	r3, [r7, #13]
 801038c:	e001      	b.n	8010392 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801038e:	2302      	movs	r3, #2
 8010390:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010392:	7b7b      	ldrb	r3, [r7, #13]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3714      	adds	r7, #20
 8010398:	46bd      	mov	sp, r7
 801039a:	bc80      	pop	{r7}
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	20000ed4 	.word	0x20000ed4

080103a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80103ac:	2300      	movs	r3, #0
 80103ae:	60fb      	str	r3, [r7, #12]
 80103b0:	e016      	b.n	80103e0 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80103b2:	4910      	ldr	r1, [pc, #64]	; (80103f4 <clear_lock+0x50>)
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	4613      	mov	r3, r2
 80103b8:	005b      	lsls	r3, r3, #1
 80103ba:	4413      	add	r3, r2
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	440b      	add	r3, r1
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d108      	bne.n	80103da <clear_lock+0x36>
 80103c8:	490a      	ldr	r1, [pc, #40]	; (80103f4 <clear_lock+0x50>)
 80103ca:	68fa      	ldr	r2, [r7, #12]
 80103cc:	4613      	mov	r3, r2
 80103ce:	005b      	lsls	r3, r3, #1
 80103d0:	4413      	add	r3, r2
 80103d2:	009b      	lsls	r3, r3, #2
 80103d4:	440b      	add	r3, r1
 80103d6:	2200      	movs	r2, #0
 80103d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	3301      	adds	r3, #1
 80103de:	60fb      	str	r3, [r7, #12]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d9e5      	bls.n	80103b2 <clear_lock+0xe>
	}
}
 80103e6:	bf00      	nop
 80103e8:	bf00      	nop
 80103ea:	3714      	adds	r7, #20
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bc80      	pop	{r7}
 80103f0:	4770      	bx	lr
 80103f2:	bf00      	nop
 80103f4:	20000ed4 	.word	0x20000ed4

080103f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010400:	2300      	movs	r3, #0
 8010402:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 801040a:	2b00      	cmp	r3, #0
 801040c:	d038      	beq.n	8010480 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8010414:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801041c:	6879      	ldr	r1, [r7, #4]
 801041e:	2301      	movs	r3, #1
 8010420:	697a      	ldr	r2, [r7, #20]
 8010422:	f7ff fd7f 	bl	800ff24 <disk_write>
 8010426:	4603      	mov	r3, r0
 8010428:	2b00      	cmp	r3, #0
 801042a:	d002      	beq.n	8010432 <sync_window+0x3a>
			res = FR_DISK_ERR;
 801042c:	2301      	movs	r3, #1
 801042e:	73fb      	strb	r3, [r7, #15]
 8010430:	e026      	b.n	8010480 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2200      	movs	r2, #0
 8010436:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010440:	697a      	ldr	r2, [r7, #20]
 8010442:	1ad2      	subs	r2, r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801044a:	429a      	cmp	r2, r3
 801044c:	d218      	bcs.n	8010480 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8010454:	613b      	str	r3, [r7, #16]
 8010456:	e010      	b.n	801047a <sync_window+0x82>
					wsect += fs->fsize;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801045e:	697a      	ldr	r2, [r7, #20]
 8010460:	4413      	add	r3, r2
 8010462:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801046a:	6879      	ldr	r1, [r7, #4]
 801046c:	2301      	movs	r3, #1
 801046e:	697a      	ldr	r2, [r7, #20]
 8010470:	f7ff fd58 	bl	800ff24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	3b01      	subs	r3, #1
 8010478:	613b      	str	r3, [r7, #16]
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d8eb      	bhi.n	8010458 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8010480:	7bfb      	ldrb	r3, [r7, #15]
}
 8010482:	4618      	mov	r0, r3
 8010484:	3718      	adds	r7, #24
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b084      	sub	sp, #16
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
 8010492:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010494:	2300      	movs	r3, #0
 8010496:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d01b      	beq.n	80104dc <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7ff ffa7 	bl	80103f8 <sync_window>
 80104aa:	4603      	mov	r3, r0
 80104ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80104ae:	7bfb      	ldrb	r3, [r7, #15]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d113      	bne.n	80104dc <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80104ba:	6879      	ldr	r1, [r7, #4]
 80104bc:	2301      	movs	r3, #1
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	f7ff fd10 	bl	800fee4 <disk_read>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d004      	beq.n	80104d4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80104ca:	f04f 33ff 	mov.w	r3, #4294967295
 80104ce:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80104d0:	2301      	movs	r3, #1
 80104d2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	683a      	ldr	r2, [r7, #0]
 80104d8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b084      	sub	sp, #16
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7ff ff82 	bl	80103f8 <sync_window>
 80104f4:	4603      	mov	r3, r0
 80104f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80104f8:	7bfb      	ldrb	r3, [r7, #15]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f040 809b 	bne.w	8010636 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010506:	2b03      	cmp	r3, #3
 8010508:	f040 8088 	bne.w	801061c <sync_fs+0x136>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010512:	2b01      	cmp	r3, #1
 8010514:	f040 8082 	bne.w	801061c <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801051e:	2100      	movs	r1, #0
 8010520:	4618      	mov	r0, r3
 8010522:	f7ff fd5b 	bl	800ffdc <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2255      	movs	r2, #85	; 0x55
 801052a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	22aa      	movs	r2, #170	; 0xaa
 8010532:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2252      	movs	r2, #82	; 0x52
 801053a:	701a      	strb	r2, [r3, #0]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2252      	movs	r2, #82	; 0x52
 8010540:	705a      	strb	r2, [r3, #1]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2261      	movs	r2, #97	; 0x61
 8010546:	709a      	strb	r2, [r3, #2]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2241      	movs	r2, #65	; 0x41
 801054c:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2272      	movs	r2, #114	; 0x72
 8010552:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2272      	movs	r2, #114	; 0x72
 801055a:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2241      	movs	r2, #65	; 0x41
 8010562:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2261      	movs	r2, #97	; 0x61
 801056a:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010574:	b2da      	uxtb	r2, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010582:	b29b      	uxth	r3, r3
 8010584:	0a1b      	lsrs	r3, r3, #8
 8010586:	b29b      	uxth	r3, r3
 8010588:	b2da      	uxtb	r2, r3
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010596:	0c1b      	lsrs	r3, r3, #16
 8010598:	b2da      	uxtb	r2, r3
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80105a6:	0e1b      	lsrs	r3, r3, #24
 80105a8:	b2da      	uxtb	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	0a1b      	lsrs	r3, r3, #8
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	b2da      	uxtb	r2, r3
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80105d8:	0c1b      	lsrs	r3, r3, #16
 80105da:	b2da      	uxtb	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80105e8:	0e1b      	lsrs	r3, r3, #24
 80105ea:	b2da      	uxtb	r2, r3
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80105f8:	1c5a      	adds	r2, r3, #1
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010606:	6879      	ldr	r1, [r7, #4]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 801060e:	2301      	movs	r3, #1
 8010610:	f7ff fc88 	bl	800ff24 <disk_write>
			fs->fsi_flag = 0;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010622:	2200      	movs	r2, #0
 8010624:	2100      	movs	r1, #0
 8010626:	4618      	mov	r0, r3
 8010628:	f7ff fc9c 	bl	800ff64 <disk_ioctl>
 801062c:	4603      	mov	r3, r0
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8010632:	2301      	movs	r3, #1
 8010634:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010636:	7bfb      	ldrb	r3, [r7, #15]
}
 8010638:	4618      	mov	r0, r3
 801063a:	3710      	adds	r7, #16
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010640:	b480      	push	{r7}
 8010642:	b083      	sub	sp, #12
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	3b02      	subs	r3, #2
 801064e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010656:	3b02      	subs	r3, #2
 8010658:	683a      	ldr	r2, [r7, #0]
 801065a:	429a      	cmp	r2, r3
 801065c:	d301      	bcc.n	8010662 <clust2sect+0x22>
 801065e:	2300      	movs	r3, #0
 8010660:	e00a      	b.n	8010678 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010668:	461a      	mov	r2, r3
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	fb03 f202 	mul.w	r2, r3, r2
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010676:	4413      	add	r3, r2
}
 8010678:	4618      	mov	r0, r3
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	bc80      	pop	{r7}
 8010680:	4770      	bx	lr

08010682 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b086      	sub	sp, #24
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	2b01      	cmp	r3, #1
 8010690:	d905      	bls.n	801069e <get_fat+0x1c>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010698:	683a      	ldr	r2, [r7, #0]
 801069a:	429a      	cmp	r2, r3
 801069c:	d302      	bcc.n	80106a4 <get_fat+0x22>
		val = 1;	/* Internal error */
 801069e:	2301      	movs	r3, #1
 80106a0:	617b      	str	r3, [r7, #20]
 80106a2:	e0a3      	b.n	80107ec <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80106a4:	f04f 33ff 	mov.w	r3, #4294967295
 80106a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80106b0:	2b03      	cmp	r3, #3
 80106b2:	d068      	beq.n	8010786 <get_fat+0x104>
 80106b4:	2b03      	cmp	r3, #3
 80106b6:	f300 808f 	bgt.w	80107d8 <get_fat+0x156>
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	d002      	beq.n	80106c4 <get_fat+0x42>
 80106be:	2b02      	cmp	r3, #2
 80106c0:	d040      	beq.n	8010744 <get_fat+0xc2>
 80106c2:	e089      	b.n	80107d8 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	60fb      	str	r3, [r7, #12]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	085b      	lsrs	r3, r3, #1
 80106cc:	68fa      	ldr	r2, [r7, #12]
 80106ce:	4413      	add	r3, r2
 80106d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	0a5b      	lsrs	r3, r3, #9
 80106dc:	4413      	add	r3, r2
 80106de:	4619      	mov	r1, r3
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff fed2 	bl	801048a <move_window>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d178      	bne.n	80107de <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	60fa      	str	r2, [r7, #12]
 80106f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	5cd3      	ldrb	r3, [r2, r3]
 80106fa:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	0a5b      	lsrs	r3, r3, #9
 8010706:	4413      	add	r3, r2
 8010708:	4619      	mov	r1, r3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff febd 	bl	801048a <move_window>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d165      	bne.n	80107e2 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801071c:	687a      	ldr	r2, [r7, #4]
 801071e:	5cd3      	ldrb	r3, [r2, r3]
 8010720:	021b      	lsls	r3, r3, #8
 8010722:	461a      	mov	r2, r3
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	4313      	orrs	r3, r2
 8010728:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	f003 0301 	and.w	r3, r3, #1
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <get_fat+0xb8>
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	091b      	lsrs	r3, r3, #4
 8010738:	e002      	b.n	8010740 <get_fat+0xbe>
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010740:	617b      	str	r3, [r7, #20]
			break;
 8010742:	e053      	b.n	80107ec <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	0a1b      	lsrs	r3, r3, #8
 801074e:	4413      	add	r3, r2
 8010750:	4619      	mov	r1, r3
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7ff fe99 	bl	801048a <move_window>
 8010758:	4603      	mov	r3, r0
 801075a:	2b00      	cmp	r3, #0
 801075c:	d143      	bne.n	80107e6 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	4413      	add	r3, r2
 801076a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	3301      	adds	r3, #1
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	021b      	lsls	r3, r3, #8
 8010774:	b21a      	sxth	r2, r3
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	b21b      	sxth	r3, r3
 801077c:	4313      	orrs	r3, r2
 801077e:	b21b      	sxth	r3, r3
 8010780:	b29b      	uxth	r3, r3
 8010782:	617b      	str	r3, [r7, #20]
			break;
 8010784:	e032      	b.n	80107ec <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	09db      	lsrs	r3, r3, #7
 8010790:	4413      	add	r3, r2
 8010792:	4619      	mov	r1, r3
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f7ff fe78 	bl	801048a <move_window>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d124      	bne.n	80107ea <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	4413      	add	r3, r2
 80107ac:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	3303      	adds	r3, #3
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	061a      	lsls	r2, r3, #24
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	3302      	adds	r3, #2
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	041b      	lsls	r3, r3, #16
 80107be:	4313      	orrs	r3, r2
 80107c0:	693a      	ldr	r2, [r7, #16]
 80107c2:	3201      	adds	r2, #1
 80107c4:	7812      	ldrb	r2, [r2, #0]
 80107c6:	0212      	lsls	r2, r2, #8
 80107c8:	4313      	orrs	r3, r2
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	7812      	ldrb	r2, [r2, #0]
 80107ce:	4313      	orrs	r3, r2
 80107d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80107d4:	617b      	str	r3, [r7, #20]
			break;
 80107d6:	e009      	b.n	80107ec <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 80107d8:	2301      	movs	r3, #1
 80107da:	617b      	str	r3, [r7, #20]
 80107dc:	e006      	b.n	80107ec <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107de:	bf00      	nop
 80107e0:	e004      	b.n	80107ec <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107e2:	bf00      	nop
 80107e4:	e002      	b.n	80107ec <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80107e6:	bf00      	nop
 80107e8:	e000      	b.n	80107ec <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107ea:	bf00      	nop
		}
	}

	return val;
 80107ec:	697b      	ldr	r3, [r7, #20]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3718      	adds	r7, #24
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b088      	sub	sp, #32
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	60f8      	str	r0, [r7, #12]
 80107fe:	60b9      	str	r1, [r7, #8]
 8010800:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d905      	bls.n	8010814 <put_fat+0x1e>
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	429a      	cmp	r2, r3
 8010812:	d302      	bcc.n	801081a <put_fat+0x24>
		res = FR_INT_ERR;
 8010814:	2302      	movs	r3, #2
 8010816:	77fb      	strb	r3, [r7, #31]
 8010818:	e0f6      	b.n	8010a08 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010820:	2b03      	cmp	r3, #3
 8010822:	f000 809e 	beq.w	8010962 <put_fat+0x16c>
 8010826:	2b03      	cmp	r3, #3
 8010828:	f300 80e4 	bgt.w	80109f4 <put_fat+0x1fe>
 801082c:	2b01      	cmp	r3, #1
 801082e:	d002      	beq.n	8010836 <put_fat+0x40>
 8010830:	2b02      	cmp	r3, #2
 8010832:	d06f      	beq.n	8010914 <put_fat+0x11e>
 8010834:	e0de      	b.n	80109f4 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	617b      	str	r3, [r7, #20]
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	085b      	lsrs	r3, r3, #1
 801083e:	697a      	ldr	r2, [r7, #20]
 8010840:	4413      	add	r3, r2
 8010842:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	0a5b      	lsrs	r3, r3, #9
 801084e:	4413      	add	r3, r2
 8010850:	4619      	mov	r1, r3
 8010852:	68f8      	ldr	r0, [r7, #12]
 8010854:	f7ff fe19 	bl	801048a <move_window>
 8010858:	4603      	mov	r3, r0
 801085a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801085c:	7ffb      	ldrb	r3, [r7, #31]
 801085e:	2b00      	cmp	r3, #0
 8010860:	f040 80cb 	bne.w	80109fa <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	1c5a      	adds	r2, r3, #1
 8010868:	617a      	str	r2, [r7, #20]
 801086a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801086e:	68fa      	ldr	r2, [r7, #12]
 8010870:	4413      	add	r3, r2
 8010872:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	f003 0301 	and.w	r3, r3, #1
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00d      	beq.n	801089a <put_fat+0xa4>
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	b25b      	sxtb	r3, r3
 8010884:	f003 030f 	and.w	r3, r3, #15
 8010888:	b25a      	sxtb	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	b2db      	uxtb	r3, r3
 801088e:	011b      	lsls	r3, r3, #4
 8010890:	b25b      	sxtb	r3, r3
 8010892:	4313      	orrs	r3, r2
 8010894:	b25b      	sxtb	r3, r3
 8010896:	b2db      	uxtb	r3, r3
 8010898:	e001      	b.n	801089e <put_fat+0xa8>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	b2db      	uxtb	r3, r3
 801089e:	69ba      	ldr	r2, [r7, #24]
 80108a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2201      	movs	r2, #1
 80108a6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	0a5b      	lsrs	r3, r3, #9
 80108b4:	4413      	add	r3, r2
 80108b6:	4619      	mov	r1, r3
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	f7ff fde6 	bl	801048a <move_window>
 80108be:	4603      	mov	r3, r0
 80108c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80108c2:	7ffb      	ldrb	r3, [r7, #31]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f040 809a 	bne.w	80109fe <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	4413      	add	r3, r2
 80108d4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	f003 0301 	and.w	r3, r3, #1
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d003      	beq.n	80108e8 <put_fat+0xf2>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	091b      	lsrs	r3, r3, #4
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	e00e      	b.n	8010906 <put_fat+0x110>
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	781b      	ldrb	r3, [r3, #0]
 80108ec:	b25b      	sxtb	r3, r3
 80108ee:	f023 030f 	bic.w	r3, r3, #15
 80108f2:	b25a      	sxtb	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	0a1b      	lsrs	r3, r3, #8
 80108f8:	b25b      	sxtb	r3, r3
 80108fa:	f003 030f 	and.w	r3, r3, #15
 80108fe:	b25b      	sxtb	r3, r3
 8010900:	4313      	orrs	r3, r2
 8010902:	b25b      	sxtb	r3, r3
 8010904:	b2db      	uxtb	r3, r3
 8010906:	69ba      	ldr	r2, [r7, #24]
 8010908:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2201      	movs	r2, #1
 801090e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010912:	e079      	b.n	8010a08 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	0a1b      	lsrs	r3, r3, #8
 801091e:	4413      	add	r3, r2
 8010920:	4619      	mov	r1, r3
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f7ff fdb1 	bl	801048a <move_window>
 8010928:	4603      	mov	r3, r0
 801092a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801092c:	7ffb      	ldrb	r3, [r7, #31]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d167      	bne.n	8010a02 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	005b      	lsls	r3, r3, #1
 8010936:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	4413      	add	r3, r2
 801093e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	b2da      	uxtb	r2, r3
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	701a      	strb	r2, [r3, #0]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	b29b      	uxth	r3, r3
 801094c:	0a1b      	lsrs	r3, r3, #8
 801094e:	b29a      	uxth	r2, r3
 8010950:	69bb      	ldr	r3, [r7, #24]
 8010952:	3301      	adds	r3, #1
 8010954:	b2d2      	uxtb	r2, r2
 8010956:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2201      	movs	r2, #1
 801095c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8010960:	e052      	b.n	8010a08 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	09db      	lsrs	r3, r3, #7
 801096c:	4413      	add	r3, r2
 801096e:	4619      	mov	r1, r3
 8010970:	68f8      	ldr	r0, [r7, #12]
 8010972:	f7ff fd8a 	bl	801048a <move_window>
 8010976:	4603      	mov	r3, r0
 8010978:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801097a:	7ffb      	ldrb	r3, [r7, #31]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d142      	bne.n	8010a06 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	4413      	add	r3, r2
 801098c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 801098e:	69bb      	ldr	r3, [r7, #24]
 8010990:	3303      	adds	r3, #3
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	061a      	lsls	r2, r3, #24
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	3302      	adds	r3, #2
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	041b      	lsls	r3, r3, #16
 801099e:	4313      	orrs	r3, r2
 80109a0:	69ba      	ldr	r2, [r7, #24]
 80109a2:	3201      	adds	r2, #1
 80109a4:	7812      	ldrb	r2, [r2, #0]
 80109a6:	0212      	lsls	r2, r2, #8
 80109a8:	4313      	orrs	r3, r2
 80109aa:	69ba      	ldr	r2, [r7, #24]
 80109ac:	7812      	ldrb	r2, [r2, #0]
 80109ae:	4313      	orrs	r3, r2
 80109b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	4313      	orrs	r3, r2
 80109b8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	b2da      	uxtb	r2, r3
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	701a      	strb	r2, [r3, #0]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	0a1b      	lsrs	r3, r3, #8
 80109c8:	b29a      	uxth	r2, r3
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	3301      	adds	r3, #1
 80109ce:	b2d2      	uxtb	r2, r2
 80109d0:	701a      	strb	r2, [r3, #0]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	0c1a      	lsrs	r2, r3, #16
 80109d6:	69bb      	ldr	r3, [r7, #24]
 80109d8:	3302      	adds	r3, #2
 80109da:	b2d2      	uxtb	r2, r2
 80109dc:	701a      	strb	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	0e1a      	lsrs	r2, r3, #24
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	3303      	adds	r3, #3
 80109e6:	b2d2      	uxtb	r2, r2
 80109e8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2201      	movs	r2, #1
 80109ee:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80109f2:	e009      	b.n	8010a08 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80109f4:	2302      	movs	r3, #2
 80109f6:	77fb      	strb	r3, [r7, #31]
 80109f8:	e006      	b.n	8010a08 <put_fat+0x212>
			if (res != FR_OK) break;
 80109fa:	bf00      	nop
 80109fc:	e004      	b.n	8010a08 <put_fat+0x212>
			if (res != FR_OK) break;
 80109fe:	bf00      	nop
 8010a00:	e002      	b.n	8010a08 <put_fat+0x212>
			if (res != FR_OK) break;
 8010a02:	bf00      	nop
 8010a04:	e000      	b.n	8010a08 <put_fat+0x212>
			if (res != FR_OK) break;
 8010a06:	bf00      	nop
		}
	}

	return res;
 8010a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3720      	adds	r7, #32
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	d905      	bls.n	8010a2e <remove_chain+0x1c>
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010a28:	683a      	ldr	r2, [r7, #0]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d302      	bcc.n	8010a34 <remove_chain+0x22>
		res = FR_INT_ERR;
 8010a2e:	2302      	movs	r3, #2
 8010a30:	73fb      	strb	r3, [r7, #15]
 8010a32:	e043      	b.n	8010abc <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8010a34:	2300      	movs	r3, #0
 8010a36:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8010a38:	e036      	b.n	8010aa8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8010a3a:	6839      	ldr	r1, [r7, #0]
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f7ff fe20 	bl	8010682 <get_fat>
 8010a42:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d035      	beq.n	8010ab6 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	2b01      	cmp	r3, #1
 8010a4e:	d102      	bne.n	8010a56 <remove_chain+0x44>
 8010a50:	2302      	movs	r3, #2
 8010a52:	73fb      	strb	r3, [r7, #15]
 8010a54:	e032      	b.n	8010abc <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5c:	d102      	bne.n	8010a64 <remove_chain+0x52>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	73fb      	strb	r3, [r7, #15]
 8010a62:	e02b      	b.n	8010abc <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8010a64:	2200      	movs	r2, #0
 8010a66:	6839      	ldr	r1, [r7, #0]
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7ff fec4 	bl	80107f6 <put_fat>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010a72:	7bfb      	ldrb	r3, [r7, #15]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d120      	bne.n	8010aba <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a82:	d00f      	beq.n	8010aa4 <remove_chain+0x92>
				fs->free_clust++;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010a8a:	1c5a      	adds	r2, r3, #1
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010a98:	f043 0301 	orr.w	r3, r3, #1
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010aae:	683a      	ldr	r2, [r7, #0]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d3c2      	bcc.n	8010a3a <remove_chain+0x28>
 8010ab4:	e002      	b.n	8010abc <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8010ab6:	bf00      	nop
 8010ab8:	e000      	b.n	8010abc <remove_chain+0xaa>
			if (res != FR_OK) break;
 8010aba:	bf00      	nop
		}
	}

	return res;
 8010abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}

08010ac6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8010ac6:	b580      	push	{r7, lr}
 8010ac8:	b086      	sub	sp, #24
 8010aca:	af00      	add	r7, sp, #0
 8010acc:	6078      	str	r0, [r7, #4]
 8010ace:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d10f      	bne.n	8010af6 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010adc:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d005      	beq.n	8010af0 <create_chain+0x2a>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010aea:	693a      	ldr	r2, [r7, #16]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d31c      	bcc.n	8010b2a <create_chain+0x64>
 8010af0:	2301      	movs	r3, #1
 8010af2:	613b      	str	r3, [r7, #16]
 8010af4:	e019      	b.n	8010b2a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7ff fdc2 	bl	8010682 <get_fat>
 8010afe:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d801      	bhi.n	8010b0a <create_chain+0x44>
 8010b06:	2301      	movs	r3, #1
 8010b08:	e076      	b.n	8010bf8 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b10:	d101      	bne.n	8010b16 <create_chain+0x50>
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	e070      	b.n	8010bf8 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b1c:	68ba      	ldr	r2, [r7, #8]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d201      	bcs.n	8010b26 <create_chain+0x60>
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	e068      	b.n	8010bf8 <create_chain+0x132>
		scl = clst;
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	3301      	adds	r3, #1
 8010b32:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b3a:	697a      	ldr	r2, [r7, #20]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d307      	bcc.n	8010b50 <create_chain+0x8a>
			ncl = 2;
 8010b40:	2302      	movs	r3, #2
 8010b42:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8010b44:	697a      	ldr	r2, [r7, #20]
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d901      	bls.n	8010b50 <create_chain+0x8a>
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	e053      	b.n	8010bf8 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8010b50:	6979      	ldr	r1, [r7, #20]
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7ff fd95 	bl	8010682 <get_fat>
 8010b58:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00e      	beq.n	8010b7e <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b66:	d002      	beq.n	8010b6e <create_chain+0xa8>
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d101      	bne.n	8010b72 <create_chain+0xac>
			return cs;
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	e042      	b.n	8010bf8 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d1d9      	bne.n	8010b2e <create_chain+0x68>
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	e03c      	b.n	8010bf8 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8010b7e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8010b80:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8010b84:	6979      	ldr	r1, [r7, #20]
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f7ff fe35 	bl	80107f6 <put_fat>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8010b90:	7bfb      	ldrb	r3, [r7, #15]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d109      	bne.n	8010baa <create_chain+0xe4>
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d006      	beq.n	8010baa <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8010b9c:	697a      	ldr	r2, [r7, #20]
 8010b9e:	6839      	ldr	r1, [r7, #0]
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7ff fe28 	bl	80107f6 <put_fat>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8010baa:	7bfb      	ldrb	r3, [r7, #15]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d11a      	bne.n	8010be6 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	697a      	ldr	r2, [r7, #20]
 8010bb4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc2:	d018      	beq.n	8010bf6 <create_chain+0x130>
			fs->free_clust--;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010bca:	1e5a      	subs	r2, r3, #1
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8010bd8:	f043 0301 	orr.w	r3, r3, #1
 8010bdc:	b2da      	uxtb	r2, r3
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 8010be4:	e007      	b.n	8010bf6 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8010be6:	7bfb      	ldrb	r3, [r7, #15]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d102      	bne.n	8010bf2 <create_chain+0x12c>
 8010bec:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf0:	e000      	b.n	8010bf4 <create_chain+0x12e>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8010bf6:	697b      	ldr	r3, [r7, #20]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3718      	adds	r7, #24
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b087      	sub	sp, #28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010c10:	3304      	adds	r3, #4
 8010c12:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	0a5b      	lsrs	r3, r3, #9
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010c1e:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	1d1a      	adds	r2, r3, #4
 8010c2c:	613a      	str	r2, [r7, #16]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d101      	bne.n	8010c3c <clmt_clust+0x3c>
 8010c38:	2300      	movs	r3, #0
 8010c3a:	e010      	b.n	8010c5e <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8010c3c:	697a      	ldr	r2, [r7, #20]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d307      	bcc.n	8010c54 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	1ad3      	subs	r3, r2, r3
 8010c4a:	617b      	str	r3, [r7, #20]
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	3304      	adds	r3, #4
 8010c50:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010c52:	e7e9      	b.n	8010c28 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8010c54:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	4413      	add	r3, r2
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	371c      	adds	r7, #28
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bc80      	pop	{r7}
 8010c66:	4770      	bx	lr

08010c68 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
 8010c70:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010c82:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d007      	beq.n	8010c9a <dir_sdi+0x32>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010c90:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010c94:	697a      	ldr	r2, [r7, #20]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d301      	bcc.n	8010c9e <dir_sdi+0x36>
		return FR_INT_ERR;
 8010c9a:	2302      	movs	r3, #2
 8010c9c:	e074      	b.n	8010d88 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10c      	bne.n	8010cbe <dir_sdi+0x56>
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010caa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010cae:	2b03      	cmp	r3, #3
 8010cb0:	d105      	bne.n	8010cbe <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010cb8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010cbc:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d111      	bne.n	8010ce8 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010cca:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010cce:	461a      	mov	r2, r3
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d301      	bcc.n	8010cda <dir_sdi+0x72>
			return FR_INT_ERR;
 8010cd6:	2302      	movs	r3, #2
 8010cd8:	e056      	b.n	8010d88 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010ce0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010ce4:	613b      	str	r3, [r7, #16]
 8010ce6:	e032      	b.n	8010d4e <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010cee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010cf2:	011b      	lsls	r3, r3, #4
 8010cf4:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8010cf6:	e01e      	b.n	8010d36 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010cfe:	6979      	ldr	r1, [r7, #20]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff fcbe 	bl	8010682 <get_fat>
 8010d06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d0e:	d101      	bne.n	8010d14 <dir_sdi+0xac>
 8010d10:	2301      	movs	r3, #1
 8010d12:	e039      	b.n	8010d88 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2b01      	cmp	r3, #1
 8010d18:	d907      	bls.n	8010d2a <dir_sdi+0xc2>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d301      	bcc.n	8010d2e <dir_sdi+0xc6>
				return FR_INT_ERR;
 8010d2a:	2302      	movs	r3, #2
 8010d2c:	e02c      	b.n	8010d88 <dir_sdi+0x120>
			idx -= ic;
 8010d2e:	683a      	ldr	r2, [r7, #0]
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8010d36:	683a      	ldr	r2, [r7, #0]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d2dc      	bcs.n	8010cf8 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d44:	6979      	ldr	r1, [r7, #20]
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff fc7a 	bl	8010640 <clust2sect>
 8010d4c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	697a      	ldr	r2, [r7, #20]
 8010d52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d101      	bne.n	8010d60 <dir_sdi+0xf8>
 8010d5c:	2302      	movs	r3, #2
 8010d5e:	e013      	b.n	8010d88 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	091a      	lsrs	r2, r3, #4
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	441a      	add	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010d74:	461a      	mov	r2, r3
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	f003 030f 	and.w	r3, r3, #15
 8010d7c:	015b      	lsls	r3, r3, #5
 8010d7e:	441a      	add	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8010d86:	2300      	movs	r3, #0
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3718      	adds	r7, #24
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010d90:	b590      	push	{r4, r7, lr}
 8010d92:	b087      	sub	sp, #28
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8010da0:	3301      	adds	r3, #1
 8010da2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d004      	beq.n	8010db6 <dir_next+0x26>
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d101      	bne.n	8010dba <dir_next+0x2a>
		return FR_NO_FILE;
 8010db6:	2304      	movs	r3, #4
 8010db8:	e0dd      	b.n	8010f76 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f003 030f 	and.w	r3, r3, #15
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f040 80c6 	bne.w	8010f52 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010dcc:	1c5a      	adds	r2, r3, #1
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d10b      	bne.n	8010df6 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010de4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8010de8:	461a      	mov	r2, r3
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	4293      	cmp	r3, r2
 8010dee:	f0c0 80b0 	bcc.w	8010f52 <dir_next+0x1c2>
				return FR_NO_FILE;
 8010df2:	2304      	movs	r3, #4
 8010df4:	e0bf      	b.n	8010f76 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	091b      	lsrs	r3, r3, #4
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010e00:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010e04:	3a01      	subs	r2, #1
 8010e06:	4013      	ands	r3, r2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f040 80a2 	bne.w	8010f52 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	f7ff fc30 	bl	8010682 <get_fat>
 8010e22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d801      	bhi.n	8010e2e <dir_next+0x9e>
 8010e2a:	2302      	movs	r3, #2
 8010e2c:	e0a3      	b.n	8010f76 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e34:	d101      	bne.n	8010e3a <dir_next+0xaa>
 8010e36:	2301      	movs	r3, #1
 8010e38:	e09d      	b.n	8010f76 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e44:	697a      	ldr	r2, [r7, #20]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d374      	bcc.n	8010f34 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d101      	bne.n	8010e54 <dir_next+0xc4>
 8010e50:	2304      	movs	r3, #4
 8010e52:	e090      	b.n	8010f76 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8010e60:	4619      	mov	r1, r3
 8010e62:	4610      	mov	r0, r2
 8010e64:	f7ff fe2f 	bl	8010ac6 <create_chain>
 8010e68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d101      	bne.n	8010e74 <dir_next+0xe4>
 8010e70:	2307      	movs	r3, #7
 8010e72:	e080      	b.n	8010f76 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d101      	bne.n	8010e7e <dir_next+0xee>
 8010e7a:	2302      	movs	r3, #2
 8010e7c:	e07b      	b.n	8010f76 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e84:	d101      	bne.n	8010e8a <dir_next+0xfa>
 8010e86:	2301      	movs	r3, #1
 8010e88:	e075      	b.n	8010f76 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7ff fab1 	bl	80103f8 <sync_window>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <dir_next+0x110>
 8010e9c:	2301      	movs	r3, #1
 8010e9e:	e06a      	b.n	8010f76 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010eaa:	2100      	movs	r1, #0
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7ff f895 	bl	800ffdc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8010ebe:	6979      	ldr	r1, [r7, #20]
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	f7ff fbbd 	bl	8010640 <clust2sect>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8010ecc:	2300      	movs	r3, #0
 8010ece:	613b      	str	r3, [r7, #16]
 8010ed0:	e01b      	b.n	8010f0a <dir_next+0x17a>
						dp->fs->wflag = 1;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010ed8:	2201      	movs	r2, #1
 8010eda:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7ff fa87 	bl	80103f8 <sync_window>
 8010eea:	4603      	mov	r3, r0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d001      	beq.n	8010ef4 <dir_next+0x164>
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	e040      	b.n	8010f76 <dir_next+0x1e6>
						dp->fs->winsect++;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010efa:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8010efe:	3201      	adds	r2, #1
 8010f00:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	3301      	adds	r3, #1
 8010f08:	613b      	str	r3, [r7, #16]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f10:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010f14:	461a      	mov	r2, r3
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d3da      	bcc.n	8010ed2 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f22:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f2c:	693a      	ldr	r2, [r7, #16]
 8010f2e:	1a8a      	subs	r2, r1, r2
 8010f30:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	697a      	ldr	r2, [r7, #20]
 8010f38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f42:	6979      	ldr	r1, [r7, #20]
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7ff fb7b 	bl	8010640 <clust2sect>
 8010f4a:	4602      	mov	r2, r0
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f62:	461a      	mov	r2, r3
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f003 030f 	and.w	r3, r3, #15
 8010f6a:	015b      	lsls	r3, r3, #5
 8010f6c:	441a      	add	r2, r3
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8010f74:	2300      	movs	r3, #0
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	371c      	adds	r7, #28
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd90      	pop	{r4, r7, pc}

08010f7e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b084      	sub	sp, #16
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
 8010f86:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8010f88:	2100      	movs	r1, #0
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f7ff fe6c 	bl	8010c68 <dir_sdi>
 8010f90:	4603      	mov	r3, r0
 8010f92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010f94:	7bfb      	ldrb	r3, [r7, #15]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d131      	bne.n	8010ffe <dir_alloc+0x80>
		n = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010faa:	4619      	mov	r1, r3
 8010fac:	4610      	mov	r0, r2
 8010fae:	f7ff fa6c 	bl	801048a <move_window>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8010fb6:	7bfb      	ldrb	r3, [r7, #15]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d11f      	bne.n	8010ffc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	2be5      	cmp	r3, #229	; 0xe5
 8010fc6:	d005      	beq.n	8010fd4 <dir_alloc+0x56>
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d107      	bne.n	8010fe4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	60bb      	str	r3, [r7, #8]
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d102      	bne.n	8010fe8 <dir_alloc+0x6a>
 8010fe2:	e00c      	b.n	8010ffe <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8010fe8:	2101      	movs	r1, #1
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7ff fed0 	bl	8010d90 <dir_next>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8010ff4:	7bfb      	ldrb	r3, [r7, #15]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d0d1      	beq.n	8010f9e <dir_alloc+0x20>
 8010ffa:	e000      	b.n	8010ffe <dir_alloc+0x80>
			if (res != FR_OK) break;
 8010ffc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010ffe:	7bfb      	ldrb	r3, [r7, #15]
 8011000:	2b04      	cmp	r3, #4
 8011002:	d101      	bne.n	8011008 <dir_alloc+0x8a>
 8011004:	2307      	movs	r3, #7
 8011006:	73fb      	strb	r3, [r7, #15]
	return res;
 8011008:	7bfb      	ldrb	r3, [r7, #15]
}
 801100a:	4618      	mov	r0, r3
 801100c:	3710      	adds	r7, #16
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}

08011012 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8011012:	b480      	push	{r7}
 8011014:	b085      	sub	sp, #20
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
 801101a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	331b      	adds	r3, #27
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	021b      	lsls	r3, r3, #8
 8011024:	b21a      	sxth	r2, r3
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	331a      	adds	r3, #26
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	b21b      	sxth	r3, r3
 801102e:	4313      	orrs	r3, r2
 8011030:	b21b      	sxth	r3, r3
 8011032:	b29b      	uxth	r3, r3
 8011034:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801103c:	2b03      	cmp	r3, #3
 801103e:	d10f      	bne.n	8011060 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	3315      	adds	r3, #21
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	021b      	lsls	r3, r3, #8
 8011048:	b21a      	sxth	r2, r3
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	3314      	adds	r3, #20
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	b21b      	sxth	r3, r3
 8011052:	4313      	orrs	r3, r2
 8011054:	b21b      	sxth	r3, r3
 8011056:	b29b      	uxth	r3, r3
 8011058:	041b      	lsls	r3, r3, #16
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	4313      	orrs	r3, r2
 801105e:	60fb      	str	r3, [r7, #12]

	return cl;
 8011060:	68fb      	ldr	r3, [r7, #12]
}
 8011062:	4618      	mov	r0, r3
 8011064:	3714      	adds	r7, #20
 8011066:	46bd      	mov	sp, r7
 8011068:	bc80      	pop	{r7}
 801106a:	4770      	bx	lr

0801106c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 801106c:	b480      	push	{r7}
 801106e:	b083      	sub	sp, #12
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	331a      	adds	r3, #26
 801107a:	683a      	ldr	r2, [r7, #0]
 801107c:	b2d2      	uxtb	r2, r2
 801107e:	701a      	strb	r2, [r3, #0]
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	b29b      	uxth	r3, r3
 8011084:	0a1b      	lsrs	r3, r3, #8
 8011086:	b29a      	uxth	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	331b      	adds	r3, #27
 801108c:	b2d2      	uxtb	r2, r2
 801108e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	0c1a      	lsrs	r2, r3, #16
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	3314      	adds	r3, #20
 8011098:	b2d2      	uxtb	r2, r2
 801109a:	701a      	strb	r2, [r3, #0]
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	0c1b      	lsrs	r3, r3, #16
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	0a1b      	lsrs	r3, r3, #8
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	3315      	adds	r3, #21
 80110aa:	b2d2      	uxtb	r2, r2
 80110ac:	701a      	strb	r2, [r3, #0]
}
 80110ae:	bf00      	nop
 80110b0:	370c      	adds	r7, #12
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bc80      	pop	{r7}
 80110b6:	4770      	bx	lr

080110b8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b086      	sub	sp, #24
 80110bc:	af00      	add	r7, sp, #0
 80110be:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80110c0:	2100      	movs	r1, #0
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f7ff fdd0 	bl	8010c68 <dir_sdi>
 80110c8:	4603      	mov	r3, r0
 80110ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80110cc:	7dfb      	ldrb	r3, [r7, #23]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <dir_find+0x1e>
 80110d2:	7dfb      	ldrb	r3, [r7, #23]
 80110d4:	e03b      	b.n	801114e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80110e2:	4619      	mov	r1, r3
 80110e4:	4610      	mov	r0, r2
 80110e6:	f7ff f9d0 	bl	801048a <move_window>
 80110ea:	4603      	mov	r3, r0
 80110ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d128      	bne.n	8011146 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80110fa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011102:	7bfb      	ldrb	r3, [r7, #15]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d102      	bne.n	801110e <dir_find+0x56>
 8011108:	2304      	movs	r3, #4
 801110a:	75fb      	strb	r3, [r7, #23]
 801110c:	e01e      	b.n	801114c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	330b      	adds	r3, #11
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	f003 0308 	and.w	r3, r3, #8
 8011118:	2b00      	cmp	r3, #0
 801111a:	d10a      	bne.n	8011132 <dir_find+0x7a>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011122:	220b      	movs	r2, #11
 8011124:	4619      	mov	r1, r3
 8011126:	6938      	ldr	r0, [r7, #16]
 8011128:	f7fe ff72 	bl	8010010 <mem_cmp>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d00b      	beq.n	801114a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8011132:	2100      	movs	r1, #0
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f7ff fe2b 	bl	8010d90 <dir_next>
 801113a:	4603      	mov	r3, r0
 801113c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801113e:	7dfb      	ldrb	r3, [r7, #23]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d0c8      	beq.n	80110d6 <dir_find+0x1e>
 8011144:	e002      	b.n	801114c <dir_find+0x94>
		if (res != FR_OK) break;
 8011146:	bf00      	nop
 8011148:	e000      	b.n	801114c <dir_find+0x94>
			break;
 801114a:	bf00      	nop

	return res;
 801114c:	7dfb      	ldrb	r3, [r7, #23]
}
 801114e:	4618      	mov	r0, r3
 8011150:	3718      	adds	r7, #24
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b084      	sub	sp, #16
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801115e:	2101      	movs	r1, #1
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff ff0c 	bl	8010f7e <dir_alloc>
 8011166:	4603      	mov	r3, r0
 8011168:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 801116a:	7bfb      	ldrb	r3, [r7, #15]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d126      	bne.n	80111be <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801117c:	4619      	mov	r1, r3
 801117e:	4610      	mov	r0, r2
 8011180:	f7ff f983 	bl	801048a <move_window>
 8011184:	4603      	mov	r3, r0
 8011186:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011188:	7bfb      	ldrb	r3, [r7, #15]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d117      	bne.n	80111be <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011194:	2220      	movs	r2, #32
 8011196:	2100      	movs	r1, #0
 8011198:	4618      	mov	r0, r3
 801119a:	f7fe ff1f 	bl	800ffdc <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80111aa:	220b      	movs	r2, #11
 80111ac:	4619      	mov	r1, r3
 80111ae:	f7fe fef7 	bl	800ffa0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80111b8:	2201      	movs	r2, #1
 80111ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80111be:	7bfb      	ldrb	r3, [r7, #15]
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3710      	adds	r7, #16
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b088      	sub	sp, #32
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	60fb      	str	r3, [r7, #12]
 80111d8:	e002      	b.n	80111e0 <create_name+0x18>
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	3301      	adds	r3, #1
 80111de:	60fb      	str	r3, [r7, #12]
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	2b2f      	cmp	r3, #47	; 0x2f
 80111e6:	d0f8      	beq.n	80111da <create_name+0x12>
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	2b5c      	cmp	r3, #92	; 0x5c
 80111ee:	d0f4      	beq.n	80111da <create_name+0x12>
	sfn = dp->fn;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80111f6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80111f8:	220b      	movs	r2, #11
 80111fa:	2120      	movs	r1, #32
 80111fc:	68b8      	ldr	r0, [r7, #8]
 80111fe:	f7fe feed 	bl	800ffdc <mem_set>
	si = i = b = 0; ni = 8;
 8011202:	2300      	movs	r3, #0
 8011204:	77fb      	strb	r3, [r7, #31]
 8011206:	2300      	movs	r3, #0
 8011208:	613b      	str	r3, [r7, #16]
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	617b      	str	r3, [r7, #20]
 801120e:	2308      	movs	r3, #8
 8011210:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	1c5a      	adds	r2, r3, #1
 8011216:	617a      	str	r2, [r7, #20]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	4413      	add	r3, r2
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8011220:	7fbb      	ldrb	r3, [r7, #30]
 8011222:	2b20      	cmp	r3, #32
 8011224:	d953      	bls.n	80112ce <create_name+0x106>
 8011226:	7fbb      	ldrb	r3, [r7, #30]
 8011228:	2b2f      	cmp	r3, #47	; 0x2f
 801122a:	d050      	beq.n	80112ce <create_name+0x106>
 801122c:	7fbb      	ldrb	r3, [r7, #30]
 801122e:	2b5c      	cmp	r3, #92	; 0x5c
 8011230:	d04d      	beq.n	80112ce <create_name+0x106>
		if (c == '.' || i >= ni) {
 8011232:	7fbb      	ldrb	r3, [r7, #30]
 8011234:	2b2e      	cmp	r3, #46	; 0x2e
 8011236:	d003      	beq.n	8011240 <create_name+0x78>
 8011238:	693a      	ldr	r2, [r7, #16]
 801123a:	69bb      	ldr	r3, [r7, #24]
 801123c:	429a      	cmp	r2, r3
 801123e:	d30f      	bcc.n	8011260 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	2b08      	cmp	r3, #8
 8011244:	d102      	bne.n	801124c <create_name+0x84>
 8011246:	7fbb      	ldrb	r3, [r7, #30]
 8011248:	2b2e      	cmp	r3, #46	; 0x2e
 801124a:	d001      	beq.n	8011250 <create_name+0x88>
 801124c:	2306      	movs	r3, #6
 801124e:	e073      	b.n	8011338 <create_name+0x170>
			i = 8; ni = 11;
 8011250:	2308      	movs	r3, #8
 8011252:	613b      	str	r3, [r7, #16]
 8011254:	230b      	movs	r3, #11
 8011256:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8011258:	7ffb      	ldrb	r3, [r7, #31]
 801125a:	009b      	lsls	r3, r3, #2
 801125c:	77fb      	strb	r3, [r7, #31]
 801125e:	e035      	b.n	80112cc <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011260:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011264:	2b00      	cmp	r3, #0
 8011266:	da08      	bge.n	801127a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8011268:	7ffb      	ldrb	r3, [r7, #31]
 801126a:	f043 0303 	orr.w	r3, r3, #3
 801126e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011270:	7fbb      	ldrb	r3, [r7, #30]
 8011272:	3b80      	subs	r3, #128	; 0x80
 8011274:	4a32      	ldr	r2, [pc, #200]	; (8011340 <create_name+0x178>)
 8011276:	5cd3      	ldrb	r3, [r2, r3]
 8011278:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 801127a:	7fbb      	ldrb	r3, [r7, #30]
 801127c:	4619      	mov	r1, r3
 801127e:	4831      	ldr	r0, [pc, #196]	; (8011344 <create_name+0x17c>)
 8011280:	f7fe feec 	bl	801005c <chk_chr>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d001      	beq.n	801128e <create_name+0xc6>
				return FR_INVALID_NAME;
 801128a:	2306      	movs	r3, #6
 801128c:	e054      	b.n	8011338 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 801128e:	7fbb      	ldrb	r3, [r7, #30]
 8011290:	2b40      	cmp	r3, #64	; 0x40
 8011292:	d907      	bls.n	80112a4 <create_name+0xdc>
 8011294:	7fbb      	ldrb	r3, [r7, #30]
 8011296:	2b5a      	cmp	r3, #90	; 0x5a
 8011298:	d804      	bhi.n	80112a4 <create_name+0xdc>
				b |= 2;
 801129a:	7ffb      	ldrb	r3, [r7, #31]
 801129c:	f043 0302 	orr.w	r3, r3, #2
 80112a0:	77fb      	strb	r3, [r7, #31]
 80112a2:	e00c      	b.n	80112be <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80112a4:	7fbb      	ldrb	r3, [r7, #30]
 80112a6:	2b60      	cmp	r3, #96	; 0x60
 80112a8:	d909      	bls.n	80112be <create_name+0xf6>
 80112aa:	7fbb      	ldrb	r3, [r7, #30]
 80112ac:	2b7a      	cmp	r3, #122	; 0x7a
 80112ae:	d806      	bhi.n	80112be <create_name+0xf6>
					b |= 1; c -= 0x20;
 80112b0:	7ffb      	ldrb	r3, [r7, #31]
 80112b2:	f043 0301 	orr.w	r3, r3, #1
 80112b6:	77fb      	strb	r3, [r7, #31]
 80112b8:	7fbb      	ldrb	r3, [r7, #30]
 80112ba:	3b20      	subs	r3, #32
 80112bc:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	1c5a      	adds	r2, r3, #1
 80112c2:	613a      	str	r2, [r7, #16]
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	4413      	add	r3, r2
 80112c8:	7fba      	ldrb	r2, [r7, #30]
 80112ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80112cc:	e7a1      	b.n	8011212 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80112ce:	68fa      	ldr	r2, [r7, #12]
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	441a      	add	r2, r3
 80112d4:	683b      	ldr	r3, [r7, #0]
 80112d6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80112d8:	7fbb      	ldrb	r3, [r7, #30]
 80112da:	2b20      	cmp	r3, #32
 80112dc:	d801      	bhi.n	80112e2 <create_name+0x11a>
 80112de:	2304      	movs	r3, #4
 80112e0:	e000      	b.n	80112e4 <create_name+0x11c>
 80112e2:	2300      	movs	r3, #0
 80112e4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d101      	bne.n	80112f0 <create_name+0x128>
 80112ec:	2306      	movs	r3, #6
 80112ee:	e023      	b.n	8011338 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2be5      	cmp	r3, #229	; 0xe5
 80112f6:	d102      	bne.n	80112fe <create_name+0x136>
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	2205      	movs	r2, #5
 80112fc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	2b08      	cmp	r3, #8
 8011302:	d102      	bne.n	801130a <create_name+0x142>
 8011304:	7ffb      	ldrb	r3, [r7, #31]
 8011306:	009b      	lsls	r3, r3, #2
 8011308:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 801130a:	7ffb      	ldrb	r3, [r7, #31]
 801130c:	f003 0303 	and.w	r3, r3, #3
 8011310:	2b01      	cmp	r3, #1
 8011312:	d103      	bne.n	801131c <create_name+0x154>
 8011314:	7fbb      	ldrb	r3, [r7, #30]
 8011316:	f043 0310 	orr.w	r3, r3, #16
 801131a:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 801131c:	7ffb      	ldrb	r3, [r7, #31]
 801131e:	f003 030c 	and.w	r3, r3, #12
 8011322:	2b04      	cmp	r3, #4
 8011324:	d103      	bne.n	801132e <create_name+0x166>
 8011326:	7fbb      	ldrb	r3, [r7, #30]
 8011328:	f043 0308 	orr.w	r3, r3, #8
 801132c:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	330b      	adds	r3, #11
 8011332:	7fba      	ldrb	r2, [r7, #30]
 8011334:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011336:	2300      	movs	r3, #0
#endif
}
 8011338:	4618      	mov	r0, r3
 801133a:	3720      	adds	r7, #32
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	0802f494 	.word	0x0802f494
 8011344:	080161c8 	.word	0x080161c8

08011348 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	2b2f      	cmp	r3, #47	; 0x2f
 8011358:	d003      	beq.n	8011362 <follow_path+0x1a>
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	2b5c      	cmp	r3, #92	; 0x5c
 8011360:	d102      	bne.n	8011368 <follow_path+0x20>
		path++;
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	3301      	adds	r3, #1
 8011366:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2200      	movs	r2, #0
 801136c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	781b      	ldrb	r3, [r3, #0]
 8011374:	2b1f      	cmp	r3, #31
 8011376:	d80a      	bhi.n	801138e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8011378:	2100      	movs	r1, #0
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7ff fc74 	bl	8010c68 <dir_sdi>
 8011380:	4603      	mov	r3, r0
 8011382:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 801138c:	e045      	b.n	801141a <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801138e:	463b      	mov	r3, r7
 8011390:	4619      	mov	r1, r3
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7ff ff18 	bl	80111c8 <create_name>
 8011398:	4603      	mov	r3, r0
 801139a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 801139c:	7bfb      	ldrb	r3, [r7, #15]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d136      	bne.n	8011410 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7ff fe88 	bl	80110b8 <dir_find>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80113b2:	7adb      	ldrb	r3, [r3, #11]
 80113b4:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80113b6:	7bfb      	ldrb	r3, [r7, #15]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00a      	beq.n	80113d2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80113bc:	7bfb      	ldrb	r3, [r7, #15]
 80113be:	2b04      	cmp	r3, #4
 80113c0:	d128      	bne.n	8011414 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80113c2:	7bbb      	ldrb	r3, [r7, #14]
 80113c4:	f003 0304 	and.w	r3, r3, #4
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d123      	bne.n	8011414 <follow_path+0xcc>
 80113cc:	2305      	movs	r3, #5
 80113ce:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80113d0:	e020      	b.n	8011414 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80113d2:	7bbb      	ldrb	r3, [r7, #14]
 80113d4:	f003 0304 	and.w	r3, r3, #4
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d11d      	bne.n	8011418 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80113e2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	330b      	adds	r3, #11
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	f003 0310 	and.w	r3, r3, #16
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d102      	bne.n	80113f8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80113f2:	2305      	movs	r3, #5
 80113f4:	73fb      	strb	r3, [r7, #15]
 80113f6:	e010      	b.n	801141a <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80113fe:	68b9      	ldr	r1, [r7, #8]
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff fe06 	bl	8011012 <ld_clust>
 8011406:	4602      	mov	r2, r0
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801140e:	e7be      	b.n	801138e <follow_path+0x46>
			if (res != FR_OK) break;
 8011410:	bf00      	nop
 8011412:	e002      	b.n	801141a <follow_path+0xd2>
				break;
 8011414:	bf00      	nop
 8011416:	e000      	b.n	801141a <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011418:	bf00      	nop
		}
	}

	return res;
 801141a:	7bfb      	ldrb	r3, [r7, #15]
}
 801141c:	4618      	mov	r0, r3
 801141e:	3710      	adds	r7, #16
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011424:	b480      	push	{r7}
 8011426:	b087      	sub	sp, #28
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801142c:	f04f 33ff 	mov.w	r3, #4294967295
 8011430:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d031      	beq.n	801149e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	617b      	str	r3, [r7, #20]
 8011440:	e002      	b.n	8011448 <get_ldnumber+0x24>
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	3301      	adds	r3, #1
 8011446:	617b      	str	r3, [r7, #20]
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b20      	cmp	r3, #32
 801144e:	d903      	bls.n	8011458 <get_ldnumber+0x34>
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	2b3a      	cmp	r3, #58	; 0x3a
 8011456:	d1f4      	bne.n	8011442 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	2b3a      	cmp	r3, #58	; 0x3a
 801145e:	d11c      	bne.n	801149a <get_ldnumber+0x76>
			tp = *path;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	1c5a      	adds	r2, r3, #1
 801146a:	60fa      	str	r2, [r7, #12]
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	3b30      	subs	r3, #48	; 0x30
 8011470:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	2b09      	cmp	r3, #9
 8011476:	d80e      	bhi.n	8011496 <get_ldnumber+0x72>
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	429a      	cmp	r2, r3
 801147e:	d10a      	bne.n	8011496 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d107      	bne.n	8011496 <get_ldnumber+0x72>
					vol = (int)i;
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	3301      	adds	r3, #1
 801148e:	617b      	str	r3, [r7, #20]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	697a      	ldr	r2, [r7, #20]
 8011494:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	e002      	b.n	80114a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801149a:	2300      	movs	r3, #0
 801149c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801149e:	693b      	ldr	r3, [r7, #16]
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	371c      	adds	r7, #28
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bc80      	pop	{r7}
 80114a8:	4770      	bx	lr
	...

080114ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2200      	movs	r2, #0
 80114ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f04f 32ff 	mov.w	r2, #4294967295
 80114c4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80114c8:	6839      	ldr	r1, [r7, #0]
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f7fe ffdd 	bl	801048a <move_window>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d001      	beq.n	80114da <check_fs+0x2e>
		return 3;
 80114d6:	2303      	movs	r3, #3
 80114d8:	e04a      	b.n	8011570 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80114e0:	3301      	adds	r3, #1
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	021b      	lsls	r3, r3, #8
 80114e6:	b21a      	sxth	r2, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80114ee:	b21b      	sxth	r3, r3
 80114f0:	4313      	orrs	r3, r2
 80114f2:	b21b      	sxth	r3, r3
 80114f4:	4a20      	ldr	r2, [pc, #128]	; (8011578 <check_fs+0xcc>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	d001      	beq.n	80114fe <check_fs+0x52>
		return 2;
 80114fa:	2302      	movs	r3, #2
 80114fc:	e038      	b.n	8011570 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	3336      	adds	r3, #54	; 0x36
 8011502:	3303      	adds	r3, #3
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	061a      	lsls	r2, r3, #24
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	3336      	adds	r3, #54	; 0x36
 801150c:	3302      	adds	r3, #2
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	041b      	lsls	r3, r3, #16
 8011512:	4313      	orrs	r3, r2
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	3236      	adds	r2, #54	; 0x36
 8011518:	3201      	adds	r2, #1
 801151a:	7812      	ldrb	r2, [r2, #0]
 801151c:	0212      	lsls	r2, r2, #8
 801151e:	4313      	orrs	r3, r2
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8011526:	4313      	orrs	r3, r2
 8011528:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801152c:	4a13      	ldr	r2, [pc, #76]	; (801157c <check_fs+0xd0>)
 801152e:	4293      	cmp	r3, r2
 8011530:	d101      	bne.n	8011536 <check_fs+0x8a>
		return 0;
 8011532:	2300      	movs	r3, #0
 8011534:	e01c      	b.n	8011570 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	3352      	adds	r3, #82	; 0x52
 801153a:	3303      	adds	r3, #3
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	061a      	lsls	r2, r3, #24
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	3352      	adds	r3, #82	; 0x52
 8011544:	3302      	adds	r3, #2
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	041b      	lsls	r3, r3, #16
 801154a:	4313      	orrs	r3, r2
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	3252      	adds	r2, #82	; 0x52
 8011550:	3201      	adds	r2, #1
 8011552:	7812      	ldrb	r2, [r2, #0]
 8011554:	0212      	lsls	r2, r2, #8
 8011556:	4313      	orrs	r3, r2
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 801155e:	4313      	orrs	r3, r2
 8011560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011564:	4a05      	ldr	r2, [pc, #20]	; (801157c <check_fs+0xd0>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d101      	bne.n	801156e <check_fs+0xc2>
		return 0;
 801156a:	2300      	movs	r3, #0
 801156c:	e000      	b.n	8011570 <check_fs+0xc4>

	return 1;
 801156e:	2301      	movs	r3, #1
}
 8011570:	4618      	mov	r0, r3
 8011572:	3708      	adds	r7, #8
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}
 8011578:	ffffaa55 	.word	0xffffaa55
 801157c:	00544146 	.word	0x00544146

08011580 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b096      	sub	sp, #88	; 0x58
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	4613      	mov	r3, r2
 801158c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2200      	movs	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011594:	68b8      	ldr	r0, [r7, #8]
 8011596:	f7ff ff45 	bl	8011424 <get_ldnumber>
 801159a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801159e:	2b00      	cmp	r3, #0
 80115a0:	da01      	bge.n	80115a6 <find_volume+0x26>
 80115a2:	230b      	movs	r3, #11
 80115a4:	e2a8      	b.n	8011af8 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80115a6:	4a9d      	ldr	r2, [pc, #628]	; (801181c <find_volume+0x29c>)
 80115a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80115b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d101      	bne.n	80115ba <find_volume+0x3a>
 80115b6:	230c      	movs	r3, #12
 80115b8:	e29e      	b.n	8011af8 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115be:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80115c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d01b      	beq.n	8011602 <find_volume+0x82>
		stat = disk_status(fs->drv);
 80115ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115cc:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80115d0:	4618      	mov	r0, r3
 80115d2:	f7fe fc47 	bl	800fe64 <disk_status>
 80115d6:	4603      	mov	r3, r0
 80115d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80115dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115e0:	f003 0301 	and.w	r3, r3, #1
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d10c      	bne.n	8011602 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80115e8:	79fb      	ldrb	r3, [r7, #7]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d007      	beq.n	80115fe <find_volume+0x7e>
 80115ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115f2:	f003 0304 	and.w	r3, r3, #4
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d001      	beq.n	80115fe <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 80115fa:	230a      	movs	r3, #10
 80115fc:	e27c      	b.n	8011af8 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 80115fe:	2300      	movs	r3, #0
 8011600:	e27a      	b.n	8011af8 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011604:	2200      	movs	r2, #0
 8011606:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801160a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801160c:	b2da      	uxtb	r2, r3
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801161a:	4618      	mov	r0, r3
 801161c:	f7fe fc3c 	bl	800fe98 <disk_initialize>
 8011620:	4603      	mov	r3, r0
 8011622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8011626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801162a:	f003 0301 	and.w	r3, r3, #1
 801162e:	2b00      	cmp	r3, #0
 8011630:	d001      	beq.n	8011636 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011632:	2303      	movs	r3, #3
 8011634:	e260      	b.n	8011af8 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8011636:	79fb      	ldrb	r3, [r7, #7]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d007      	beq.n	801164c <find_volume+0xcc>
 801163c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011640:	f003 0304 	and.w	r3, r3, #4
 8011644:	2b00      	cmp	r3, #0
 8011646:	d001      	beq.n	801164c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8011648:	230a      	movs	r3, #10
 801164a:	e255      	b.n	8011af8 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 801164c:	2300      	movs	r3, #0
 801164e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8011650:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011654:	f7ff ff2a 	bl	80114ac <check_fs>
 8011658:	4603      	mov	r3, r0
 801165a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 801165e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011662:	2b01      	cmp	r3, #1
 8011664:	d153      	bne.n	801170e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8011666:	2300      	movs	r3, #0
 8011668:	643b      	str	r3, [r7, #64]	; 0x40
 801166a:	e028      	b.n	80116be <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 801166c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801166e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011670:	011b      	lsls	r3, r3, #4
 8011672:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011676:	4413      	add	r3, r2
 8011678:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 801167a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801167c:	3304      	adds	r3, #4
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d012      	beq.n	80116aa <find_volume+0x12a>
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	330b      	adds	r3, #11
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	061a      	lsls	r2, r3, #24
 801168c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168e:	330a      	adds	r3, #10
 8011690:	781b      	ldrb	r3, [r3, #0]
 8011692:	041b      	lsls	r3, r3, #16
 8011694:	4313      	orrs	r3, r2
 8011696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011698:	3209      	adds	r2, #9
 801169a:	7812      	ldrb	r2, [r2, #0]
 801169c:	0212      	lsls	r2, r2, #8
 801169e:	4313      	orrs	r3, r2
 80116a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116a2:	3208      	adds	r2, #8
 80116a4:	7812      	ldrb	r2, [r2, #0]
 80116a6:	431a      	orrs	r2, r3
 80116a8:	e000      	b.n	80116ac <find_volume+0x12c>
 80116aa:	2200      	movs	r2, #0
 80116ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	3358      	adds	r3, #88	; 0x58
 80116b2:	443b      	add	r3, r7
 80116b4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80116b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ba:	3301      	adds	r3, #1
 80116bc:	643b      	str	r3, [r7, #64]	; 0x40
 80116be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116c0:	2b03      	cmp	r3, #3
 80116c2:	d9d3      	bls.n	801166c <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80116c4:	2300      	movs	r3, #0
 80116c6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80116c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d002      	beq.n	80116d4 <find_volume+0x154>
 80116ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116d0:	3b01      	subs	r3, #1
 80116d2:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80116d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	3358      	adds	r3, #88	; 0x58
 80116da:	443b      	add	r3, r7
 80116dc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80116e0:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80116e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d005      	beq.n	80116f4 <find_volume+0x174>
 80116e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80116ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116ec:	f7ff fede 	bl	80114ac <check_fs>
 80116f0:	4603      	mov	r3, r0
 80116f2:	e000      	b.n	80116f6 <find_volume+0x176>
 80116f4:	2302      	movs	r3, #2
 80116f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80116fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d005      	beq.n	801170e <find_volume+0x18e>
 8011702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011704:	3301      	adds	r3, #1
 8011706:	643b      	str	r3, [r7, #64]	; 0x40
 8011708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801170a:	2b03      	cmp	r3, #3
 801170c:	d9e2      	bls.n	80116d4 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801170e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011712:	2b03      	cmp	r3, #3
 8011714:	d101      	bne.n	801171a <find_volume+0x19a>
 8011716:	2301      	movs	r3, #1
 8011718:	e1ee      	b.n	8011af8 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 801171a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801171e:	2b00      	cmp	r3, #0
 8011720:	d001      	beq.n	8011726 <find_volume+0x1a6>
 8011722:	230d      	movs	r3, #13
 8011724:	e1e8      	b.n	8011af8 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011728:	7b1b      	ldrb	r3, [r3, #12]
 801172a:	021b      	lsls	r3, r3, #8
 801172c:	b21a      	sxth	r2, r3
 801172e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011730:	7adb      	ldrb	r3, [r3, #11]
 8011732:	b21b      	sxth	r3, r3
 8011734:	4313      	orrs	r3, r2
 8011736:	b21b      	sxth	r3, r3
 8011738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801173c:	d001      	beq.n	8011742 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 801173e:	230d      	movs	r3, #13
 8011740:	e1da      	b.n	8011af8 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8011742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011744:	7ddb      	ldrb	r3, [r3, #23]
 8011746:	021b      	lsls	r3, r3, #8
 8011748:	b21a      	sxth	r2, r3
 801174a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801174c:	7d9b      	ldrb	r3, [r3, #22]
 801174e:	b21b      	sxth	r3, r3
 8011750:	4313      	orrs	r3, r2
 8011752:	b21b      	sxth	r3, r3
 8011754:	b29b      	uxth	r3, r3
 8011756:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8011758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801175a:	2b00      	cmp	r3, #0
 801175c:	d112      	bne.n	8011784 <find_volume+0x204>
 801175e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011760:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8011764:	061a      	lsls	r2, r3, #24
 8011766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011768:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801176c:	041b      	lsls	r3, r3, #16
 801176e:	4313      	orrs	r3, r2
 8011770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011772:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8011776:	0212      	lsls	r2, r2, #8
 8011778:	4313      	orrs	r3, r2
 801177a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801177c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011780:	4313      	orrs	r3, r2
 8011782:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8011784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011786:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011788:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 801178c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801178e:	7c1a      	ldrb	r2, [r3, #16]
 8011790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011792:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8011796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011798:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 801179c:	2b01      	cmp	r3, #1
 801179e:	d006      	beq.n	80117ae <find_volume+0x22e>
 80117a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a2:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80117a6:	2b02      	cmp	r3, #2
 80117a8:	d001      	beq.n	80117ae <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 80117aa:	230d      	movs	r3, #13
 80117ac:	e1a4      	b.n	8011af8 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80117ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80117b4:	461a      	mov	r2, r3
 80117b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117b8:	fb02 f303 	mul.w	r3, r2, r3
 80117bc:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80117be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c0:	7b5a      	ldrb	r2, [r3, #13]
 80117c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c4:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80117c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ca:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00a      	beq.n	80117e8 <find_volume+0x268>
 80117d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80117d8:	461a      	mov	r2, r3
 80117da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117dc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80117e0:	3b01      	subs	r3, #1
 80117e2:	4013      	ands	r3, r2
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d001      	beq.n	80117ec <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 80117e8:	230d      	movs	r3, #13
 80117ea:	e185      	b.n	8011af8 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 80117ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ee:	7c9b      	ldrb	r3, [r3, #18]
 80117f0:	021b      	lsls	r3, r3, #8
 80117f2:	b21a      	sxth	r2, r3
 80117f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f6:	7c5b      	ldrb	r3, [r3, #17]
 80117f8:	b21b      	sxth	r3, r3
 80117fa:	4313      	orrs	r3, r2
 80117fc:	b21b      	sxth	r3, r3
 80117fe:	b29a      	uxth	r2, r3
 8011800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011802:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8011806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011808:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801180c:	f003 030f 	and.w	r3, r3, #15
 8011810:	b29b      	uxth	r3, r3
 8011812:	2b00      	cmp	r3, #0
 8011814:	d004      	beq.n	8011820 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8011816:	230d      	movs	r3, #13
 8011818:	e16e      	b.n	8011af8 <find_volume+0x578>
 801181a:	bf00      	nop
 801181c:	20000ecc 	.word	0x20000ecc

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8011820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011822:	7d1b      	ldrb	r3, [r3, #20]
 8011824:	021b      	lsls	r3, r3, #8
 8011826:	b21a      	sxth	r2, r3
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	7cdb      	ldrb	r3, [r3, #19]
 801182c:	b21b      	sxth	r3, r3
 801182e:	4313      	orrs	r3, r2
 8011830:	b21b      	sxth	r3, r3
 8011832:	b29b      	uxth	r3, r3
 8011834:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8011836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011838:	2b00      	cmp	r3, #0
 801183a:	d112      	bne.n	8011862 <find_volume+0x2e2>
 801183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8011842:	061a      	lsls	r2, r3, #24
 8011844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011846:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801184a:	041b      	lsls	r3, r3, #16
 801184c:	4313      	orrs	r3, r2
 801184e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011850:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8011854:	0212      	lsls	r2, r2, #8
 8011856:	4313      	orrs	r3, r2
 8011858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801185a:	f892 2020 	ldrb.w	r2, [r2, #32]
 801185e:	4313      	orrs	r3, r2
 8011860:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8011862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011864:	7bdb      	ldrb	r3, [r3, #15]
 8011866:	021b      	lsls	r3, r3, #8
 8011868:	b21a      	sxth	r2, r3
 801186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186c:	7b9b      	ldrb	r3, [r3, #14]
 801186e:	b21b      	sxth	r3, r3
 8011870:	4313      	orrs	r3, r2
 8011872:	b21b      	sxth	r3, r3
 8011874:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8011876:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011878:	2b00      	cmp	r3, #0
 801187a:	d101      	bne.n	8011880 <find_volume+0x300>
 801187c:	230d      	movs	r3, #13
 801187e:	e13b      	b.n	8011af8 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8011880:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011884:	4413      	add	r3, r2
 8011886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011888:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 801188c:	0912      	lsrs	r2, r2, #4
 801188e:	b292      	uxth	r2, r2
 8011890:	4413      	add	r3, r2
 8011892:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011898:	429a      	cmp	r2, r3
 801189a:	d201      	bcs.n	80118a0 <find_volume+0x320>
 801189c:	230d      	movs	r3, #13
 801189e:	e12b      	b.n	8011af8 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80118a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a4:	1ad3      	subs	r3, r2, r3
 80118a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118a8:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80118ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80118b0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80118b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d101      	bne.n	80118bc <find_volume+0x33c>
 80118b8:	230d      	movs	r3, #13
 80118ba:	e11d      	b.n	8011af8 <find_volume+0x578>
	fmt = FS_FAT12;
 80118bc:	2301      	movs	r3, #1
 80118be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80118c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d902      	bls.n	80118d2 <find_volume+0x352>
 80118cc:	2302      	movs	r3, #2
 80118ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80118d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80118d8:	4293      	cmp	r3, r2
 80118da:	d902      	bls.n	80118e2 <find_volume+0x362>
 80118dc:	2303      	movs	r3, #3
 80118de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80118e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e4:	1c9a      	adds	r2, r3, #2
 80118e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 80118ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80118f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80118f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80118f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118f8:	441a      	add	r2, r3
 80118fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118fc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8011900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011904:	441a      	add	r2, r3
 8011906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011908:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 801190c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011910:	2b03      	cmp	r3, #3
 8011912:	d121      	bne.n	8011958 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <find_volume+0x3a2>
 801191e:	230d      	movs	r3, #13
 8011920:	e0ea      	b.n	8011af8 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8011922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011924:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011928:	061a      	lsls	r2, r3, #24
 801192a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8011930:	041b      	lsls	r3, r3, #16
 8011932:	4313      	orrs	r3, r2
 8011934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011936:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 801193a:	0212      	lsls	r2, r2, #8
 801193c:	4313      	orrs	r3, r2
 801193e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011940:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8011944:	431a      	orrs	r2, r3
 8011946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011948:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 801194c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	647b      	str	r3, [r7, #68]	; 0x44
 8011956:	e025      	b.n	80119a4 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8011958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801195e:	2b00      	cmp	r3, #0
 8011960:	d101      	bne.n	8011966 <find_volume+0x3e6>
 8011962:	230d      	movs	r3, #13
 8011964:	e0c8      	b.n	8011af8 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8011966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011968:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 801196c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801196e:	441a      	add	r2, r3
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011976:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801197a:	2b02      	cmp	r3, #2
 801197c:	d104      	bne.n	8011988 <find_volume+0x408>
 801197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011980:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011984:	005b      	lsls	r3, r3, #1
 8011986:	e00c      	b.n	80119a2 <find_volume+0x422>
 8011988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801198a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801198e:	4613      	mov	r3, r2
 8011990:	005b      	lsls	r3, r3, #1
 8011992:	4413      	add	r3, r2
 8011994:	085a      	lsrs	r2, r3, #1
 8011996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011998:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801199c:	f003 0301 	and.w	r3, r3, #1
 80119a0:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 80119a2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80119a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80119aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80119b0:	0a5b      	lsrs	r3, r3, #9
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d201      	bcs.n	80119ba <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 80119b6:	230d      	movs	r3, #13
 80119b8:	e09e      	b.n	8011af8 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80119ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119bc:	f04f 32ff 	mov.w	r2, #4294967295
 80119c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80119c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80119ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80119d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d2:	2280      	movs	r2, #128	; 0x80
 80119d4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80119d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80119dc:	2b03      	cmp	r3, #3
 80119de:	d177      	bne.n	8011ad0 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80119e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80119e6:	021b      	lsls	r3, r3, #8
 80119e8:	b21a      	sxth	r2, r3
 80119ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80119f0:	b21b      	sxth	r3, r3
 80119f2:	4313      	orrs	r3, r2
 80119f4:	b21b      	sxth	r3, r3
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d16a      	bne.n	8011ad0 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 80119fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119fc:	3301      	adds	r3, #1
 80119fe:	4619      	mov	r1, r3
 8011a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a02:	f7fe fd42 	bl	801048a <move_window>
 8011a06:	4603      	mov	r3, r0
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d161      	bne.n	8011ad0 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a16:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8011a1a:	021b      	lsls	r3, r3, #8
 8011a1c:	b21a      	sxth	r2, r3
 8011a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a20:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8011a24:	b21b      	sxth	r3, r3
 8011a26:	4313      	orrs	r3, r2
 8011a28:	b21b      	sxth	r3, r3
 8011a2a:	4a35      	ldr	r2, [pc, #212]	; (8011b00 <find_volume+0x580>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d14f      	bne.n	8011ad0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8011a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a32:	78db      	ldrb	r3, [r3, #3]
 8011a34:	061a      	lsls	r2, r3, #24
 8011a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a38:	789b      	ldrb	r3, [r3, #2]
 8011a3a:	041b      	lsls	r3, r3, #16
 8011a3c:	4313      	orrs	r3, r2
 8011a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a40:	7852      	ldrb	r2, [r2, #1]
 8011a42:	0212      	lsls	r2, r2, #8
 8011a44:	4313      	orrs	r3, r2
 8011a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a48:	7812      	ldrb	r2, [r2, #0]
 8011a4a:	4313      	orrs	r3, r2
 8011a4c:	4a2d      	ldr	r2, [pc, #180]	; (8011b04 <find_volume+0x584>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d13e      	bne.n	8011ad0 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8011a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a54:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8011a58:	061a      	lsls	r2, r3, #24
 8011a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5c:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8011a60:	041b      	lsls	r3, r3, #16
 8011a62:	4313      	orrs	r3, r2
 8011a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a66:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8011a6a:	0212      	lsls	r2, r2, #8
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a70:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8011a74:	4313      	orrs	r3, r2
 8011a76:	4a24      	ldr	r2, [pc, #144]	; (8011b08 <find_volume+0x588>)
 8011a78:	4293      	cmp	r3, r2
 8011a7a:	d129      	bne.n	8011ad0 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8011a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8011a82:	061a      	lsls	r2, r3, #24
 8011a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a86:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8011a8a:	041b      	lsls	r3, r3, #16
 8011a8c:	4313      	orrs	r3, r2
 8011a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a90:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8011a94:	0212      	lsls	r2, r2, #8
 8011a96:	4313      	orrs	r3, r2
 8011a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a9a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8011a9e:	431a      	orrs	r2, r3
 8011aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8011aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa8:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8011aac:	061a      	lsls	r2, r3, #24
 8011aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab0:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8011ab4:	041b      	lsls	r3, r3, #16
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aba:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8011abe:	0212      	lsls	r2, r2, #8
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ac4:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8011ac8:	431a      	orrs	r2, r3
 8011aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011acc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8011ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011ad6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8011ada:	4b0c      	ldr	r3, [pc, #48]	; (8011b0c <find_volume+0x58c>)
 8011adc:	881b      	ldrh	r3, [r3, #0]
 8011ade:	3301      	adds	r3, #1
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <find_volume+0x58c>)
 8011ae4:	801a      	strh	r2, [r3, #0]
 8011ae6:	4b09      	ldr	r3, [pc, #36]	; (8011b0c <find_volume+0x58c>)
 8011ae8:	881a      	ldrh	r2, [r3, #0]
 8011aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aec:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8011af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011af2:	f7fe fc57 	bl	80103a4 <clear_lock>
#endif

	return FR_OK;
 8011af6:	2300      	movs	r3, #0
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3758      	adds	r7, #88	; 0x58
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	ffffaa55 	.word	0xffffaa55
 8011b04:	41615252 	.word	0x41615252
 8011b08:	61417272 	.word	0x61417272
 8011b0c:	20000ed0 	.word	0x20000ed0

08011b10 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d022      	beq.n	8011b68 <validate+0x58>
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d01d      	beq.n	8011b68 <validate+0x58>
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b32:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d016      	beq.n	8011b68 <validate+0x58>
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b40:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d10c      	bne.n	8011b68 <validate+0x58>
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011b54:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fe f983 	bl	800fe64 <disk_status>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	f003 0301 	and.w	r3, r3, #1
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d001      	beq.n	8011b6c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8011b68:	2309      	movs	r3, #9
 8011b6a:	e000      	b.n	8011b6e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
	...

08011b78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b088      	sub	sp, #32
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	4613      	mov	r3, r2
 8011b84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8011b8a:	f107 0310 	add.w	r3, r7, #16
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7ff fc48 	bl	8011424 <get_ldnumber>
 8011b94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011b96:	69fb      	ldr	r3, [r7, #28]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	da01      	bge.n	8011ba0 <f_mount+0x28>
 8011b9c:	230b      	movs	r3, #11
 8011b9e:	e02d      	b.n	8011bfc <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011ba0:	4a18      	ldr	r2, [pc, #96]	; (8011c04 <f_mount+0x8c>)
 8011ba2:	69fb      	ldr	r3, [r7, #28]
 8011ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ba8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d006      	beq.n	8011bbe <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8011bb0:	69b8      	ldr	r0, [r7, #24]
 8011bb2:	f7fe fbf7 	bl	80103a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d003      	beq.n	8011bcc <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	490d      	ldr	r1, [pc, #52]	; (8011c04 <f_mount+0x8c>)
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d002      	beq.n	8011be2 <f_mount+0x6a>
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d001      	beq.n	8011be6 <f_mount+0x6e>
 8011be2:	2300      	movs	r3, #0
 8011be4:	e00a      	b.n	8011bfc <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8011be6:	f107 0108 	add.w	r1, r7, #8
 8011bea:	f107 030c 	add.w	r3, r7, #12
 8011bee:	2200      	movs	r2, #0
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f7ff fcc5 	bl	8011580 <find_volume>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3720      	adds	r7, #32
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	20000ecc 	.word	0x20000ecc

08011c08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8011c0e:	af00      	add	r7, sp, #0
 8011c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c14:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011c18:	6018      	str	r0, [r3, #0]
 8011c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c1e:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8011c22:	6019      	str	r1, [r3, #0]
 8011c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c28:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011c2c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8011c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c32:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d101      	bne.n	8011c40 <f_open+0x38>
 8011c3c:	2309      	movs	r3, #9
 8011c3e:	e257      	b.n	80120f0 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8011c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c44:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8011c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c54:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011c58:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8011c5c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011c60:	7812      	ldrb	r2, [r2, #0]
 8011c62:	f002 021f 	and.w	r2, r2, #31
 8011c66:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8011c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c6c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	f023 0301 	bic.w	r3, r3, #1
 8011c76:	b2da      	uxtb	r2, r3
 8011c78:	f107 0108 	add.w	r1, r7, #8
 8011c7c:	f107 0320 	add.w	r3, r7, #32
 8011c80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7ff fc7b 	bl	8011580 <find_volume>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8011c90:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	f040 8229 	bne.w	80120ec <f_open+0x4e4>
		INIT_BUF(dj);
 8011c9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011c9e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011ca2:	f107 0214 	add.w	r2, r7, #20
 8011ca6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 8011caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011cae:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	f107 0320 	add.w	r3, r7, #32
 8011cb8:	4611      	mov	r1, r2
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7ff fb44 	bl	8011348 <follow_path>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 8011cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011cca:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011cce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011cd2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011cd6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d11d      	bne.n	8011d1a <f_open+0x112>
			if (!dir)	/* Default directory itself */
 8011cde:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d103      	bne.n	8011cee <f_open+0xe6>
				res = FR_INVALID_NAME;
 8011ce6:	2306      	movs	r3, #6
 8011ce8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011cec:	e015      	b.n	8011d1a <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011cee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011cf2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	f023 0301 	bic.w	r3, r3, #1
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	bf14      	ite	ne
 8011d00:	2301      	movne	r3, #1
 8011d02:	2300      	moveq	r3, #0
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	461a      	mov	r2, r3
 8011d08:	f107 0320 	add.w	r3, r7, #32
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fe f9be 	bl	8010090 <chk_lock>
 8011d14:	4603      	mov	r3, r0
 8011d16:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011d1e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	f003 031c 	and.w	r3, r3, #28
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 80e6 	beq.w	8011efa <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 8011d2e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d027      	beq.n	8011d86 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8011d36:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011d3a:	2b04      	cmp	r3, #4
 8011d3c:	d10e      	bne.n	8011d5c <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011d3e:	f7fe fa13 	bl	8010168 <enq_lock>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d006      	beq.n	8011d56 <f_open+0x14e>
 8011d48:	f107 0320 	add.w	r3, r7, #32
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7ff fa02 	bl	8011156 <dir_register>
 8011d52:	4603      	mov	r3, r0
 8011d54:	e000      	b.n	8011d58 <f_open+0x150>
 8011d56:	2312      	movs	r3, #18
 8011d58:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011d5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011d60:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011d64:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8011d68:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011d6c:	7812      	ldrb	r2, [r2, #0]
 8011d6e:	f042 0208 	orr.w	r2, r2, #8
 8011d72:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8011d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011d78:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011d7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011d80:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8011d84:	e017      	b.n	8011db6 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011d86:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011d8a:	330b      	adds	r3, #11
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	f003 0311 	and.w	r3, r3, #17
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d003      	beq.n	8011d9e <f_open+0x196>
					res = FR_DENIED;
 8011d96:	2307      	movs	r3, #7
 8011d98:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011d9c:	e00b      	b.n	8011db6 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8011d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011da2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011da6:	781b      	ldrb	r3, [r3, #0]
 8011da8:	f003 0304 	and.w	r3, r3, #4
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d002      	beq.n	8011db6 <f_open+0x1ae>
						res = FR_EXIST;
 8011db0:	2308      	movs	r3, #8
 8011db2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011db6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f040 80c1 	bne.w	8011f42 <f_open+0x33a>
 8011dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011dc4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	f003 0308 	and.w	r3, r3, #8
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 80b7 	beq.w	8011f42 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8011dd4:	f7fc fd9e 	bl	800e914 <get_fattime>
 8011dd8:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 8011ddc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011de0:	330e      	adds	r3, #14
 8011de2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8011de6:	b2d2      	uxtb	r2, r2
 8011de8:	701a      	strb	r2, [r3, #0]
 8011dea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	0a1b      	lsrs	r3, r3, #8
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011df8:	330f      	adds	r3, #15
 8011dfa:	b2d2      	uxtb	r2, r2
 8011dfc:	701a      	strb	r2, [r3, #0]
 8011dfe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011e02:	0c1a      	lsrs	r2, r3, #16
 8011e04:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e08:	3310      	adds	r3, #16
 8011e0a:	b2d2      	uxtb	r2, r2
 8011e0c:	701a      	strb	r2, [r3, #0]
 8011e0e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011e12:	0e1a      	lsrs	r2, r3, #24
 8011e14:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e18:	3311      	adds	r3, #17
 8011e1a:	b2d2      	uxtb	r2, r2
 8011e1c:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8011e1e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e22:	330b      	adds	r3, #11
 8011e24:	2200      	movs	r2, #0
 8011e26:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8011e28:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e2c:	331c      	adds	r3, #28
 8011e2e:	2200      	movs	r2, #0
 8011e30:	701a      	strb	r2, [r3, #0]
 8011e32:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e36:	331d      	adds	r3, #29
 8011e38:	2200      	movs	r2, #0
 8011e3a:	701a      	strb	r2, [r3, #0]
 8011e3c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e40:	331e      	adds	r3, #30
 8011e42:	2200      	movs	r2, #0
 8011e44:	701a      	strb	r2, [r3, #0]
 8011e46:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011e4a:	331f      	adds	r3, #31
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8011e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011e54:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011e58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e5c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011e60:	4618      	mov	r0, r3
 8011e62:	f7ff f8d6 	bl	8011012 <ld_clust>
 8011e66:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8011e70:	f7ff f8fc 	bl	801106c <st_clust>
				dj.fs->wflag = 1;
 8011e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011e78:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011e7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e80:	2201      	movs	r2, #1
 8011e82:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8011e86:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d059      	beq.n	8011f42 <f_open+0x33a>
					dw = dj.fs->winsect;
 8011e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011e92:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011e96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011e9a:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8011e9e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8011ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011ea6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011eaa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011eae:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7fe fdad 	bl	8010a12 <remove_chain>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8011ebe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d13d      	bne.n	8011f42 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8011ec6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011eca:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011ece:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011ed2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8011ed6:	3a01      	subs	r2, #1
 8011ed8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8011edc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011ee0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011ee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011ee8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8011eec:	4618      	mov	r0, r3
 8011eee:	f7fe facc 	bl	801048a <move_window>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011ef8:	e023      	b.n	8011f42 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8011efa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d11f      	bne.n	8011f42 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8011f02:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f06:	330b      	adds	r3, #11
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	f003 0310 	and.w	r3, r3, #16
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d003      	beq.n	8011f1a <f_open+0x312>
					res = FR_NO_FILE;
 8011f12:	2304      	movs	r3, #4
 8011f14:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8011f18:	e013      	b.n	8011f42 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8011f1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011f1e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	f003 0302 	and.w	r3, r3, #2
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d00a      	beq.n	8011f42 <f_open+0x33a>
 8011f2c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8011f30:	330b      	adds	r3, #11
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	f003 0301 	and.w	r3, r3, #1
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d002      	beq.n	8011f42 <f_open+0x33a>
						res = FR_DENIED;
 8011f3c:	2307      	movs	r3, #7
 8011f3e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8011f42:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d153      	bne.n	8011ff2 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011f4e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	f003 0308 	and.w	r3, r3, #8
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d00b      	beq.n	8011f74 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8011f5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011f60:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011f64:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8011f68:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8011f6c:	7812      	ldrb	r2, [r2, #0]
 8011f6e:	f042 0220 	orr.w	r2, r2, #32
 8011f72:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8011f74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011f78:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8011f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011f80:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8011f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011f88:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8011f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011f96:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8011fa0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011fa8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f023 0301 	bic.w	r3, r3, #1
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	bf14      	ite	ne
 8011fb6:	2301      	movne	r3, #1
 8011fb8:	2300      	moveq	r3, #0
 8011fba:	b2db      	uxtb	r3, r3
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	f107 0320 	add.w	r3, r7, #32
 8011fc2:	4611      	mov	r1, r2
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7fe f8f3 	bl	80101b0 <inc_lock>
 8011fca:	4602      	mov	r2, r0
 8011fcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011fd0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8011fda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011fde:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d102      	bne.n	8011ff2 <f_open+0x3ea>
 8011fec:	2302      	movs	r3, #2
 8011fee:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8011ff2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d178      	bne.n	80120ec <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 8011ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8011ffe:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8012008:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 801200c:	7812      	ldrb	r2, [r2, #0]
 801200e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8012012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012016:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2200      	movs	r2, #0
 801201e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8012022:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012026:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 801202a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801202e:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012032:	4618      	mov	r0, r3
 8012034:	f7fe ffed 	bl	8011012 <ld_clust>
 8012038:	4602      	mov	r2, r0
 801203a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801203e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8012048:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801204c:	331f      	adds	r3, #31
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	061a      	lsls	r2, r3, #24
 8012052:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8012056:	331e      	adds	r3, #30
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	041b      	lsls	r3, r3, #16
 801205c:	4313      	orrs	r3, r2
 801205e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8012062:	321d      	adds	r2, #29
 8012064:	7812      	ldrb	r2, [r2, #0]
 8012066:	0212      	lsls	r2, r2, #8
 8012068:	4313      	orrs	r3, r2
 801206a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801206e:	321c      	adds	r2, #28
 8012070:	7812      	ldrb	r2, [r2, #0]
 8012072:	431a      	orrs	r2, r3
 8012074:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012078:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8012082:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012086:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2200      	movs	r2, #0
 801208e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8012092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8012096:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2200      	movs	r2, #0
 801209e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80120a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80120a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	2200      	movs	r2, #0
 80120ae:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80120b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80120b6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80120ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80120be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80120c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80120cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80120d0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80120da:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80120de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80120e2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80120ec:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b08a      	sub	sp, #40	; 0x28
 80120fe:	af00      	add	r7, sp, #0
 8012100:	60f8      	str	r0, [r7, #12]
 8012102:	60b9      	str	r1, [r7, #8]
 8012104:	607a      	str	r2, [r7, #4]
 8012106:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8012108:	68bb      	ldr	r3, [r7, #8]
 801210a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	2200      	movs	r2, #0
 8012110:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	f7ff fcfc 	bl	8011b10 <validate>
 8012118:	4603      	mov	r3, r0
 801211a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801211c:	7dfb      	ldrb	r3, [r7, #23]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d001      	beq.n	8012126 <f_write+0x2c>
 8012122:	7dfb      	ldrb	r3, [r7, #23]
 8012124:	e192      	b.n	801244c <f_write+0x352>
	if (fp->err)							/* Check error */
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 801212c:	2b00      	cmp	r3, #0
 801212e:	d003      	beq.n	8012138 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8012136:	e189      	b.n	801244c <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801213e:	f003 0302 	and.w	r3, r3, #2
 8012142:	2b00      	cmp	r3, #0
 8012144:	d101      	bne.n	801214a <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8012146:	2307      	movs	r3, #7
 8012148:	e180      	b.n	801244c <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	441a      	add	r2, r3
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801215a:	429a      	cmp	r2, r3
 801215c:	f080 8158 	bcs.w	8012410 <f_write+0x316>
 8012160:	2300      	movs	r3, #0
 8012162:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8012164:	e154      	b.n	8012410 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801216c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012170:	2b00      	cmp	r3, #0
 8012172:	f040 8114 	bne.w	801239e <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801217c:	0a5b      	lsrs	r3, r3, #9
 801217e:	b2da      	uxtb	r2, r3
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012186:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801218a:	3b01      	subs	r3, #1
 801218c:	b2db      	uxtb	r3, r3
 801218e:	4013      	ands	r3, r2
 8012190:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8012192:	7dbb      	ldrb	r3, [r7, #22]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d151      	bne.n	801223c <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d10f      	bne.n	80121c2 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80121a8:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 80121aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d121      	bne.n	80121f4 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80121b6:	2100      	movs	r1, #0
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fe fc84 	bl	8010ac6 <create_chain>
 80121be:	6278      	str	r0, [r7, #36]	; 0x24
 80121c0:	e018      	b.n	80121f4 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d008      	beq.n	80121de <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80121d2:	4619      	mov	r1, r3
 80121d4:	68f8      	ldr	r0, [r7, #12]
 80121d6:	f7fe fd13 	bl	8010c00 <clmt_clust>
 80121da:	6278      	str	r0, [r7, #36]	; 0x24
 80121dc:	e00a      	b.n	80121f4 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80121ea:	4619      	mov	r1, r3
 80121ec:	4610      	mov	r0, r2
 80121ee:	f7fe fc6a 	bl	8010ac6 <create_chain>
 80121f2:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80121f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f000 810f 	beq.w	801241a <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80121fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121fe:	2b01      	cmp	r3, #1
 8012200:	d105      	bne.n	801220e <f_write+0x114>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2202      	movs	r2, #2
 8012206:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801220a:	2302      	movs	r3, #2
 801220c:	e11e      	b.n	801244c <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 801220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012214:	d105      	bne.n	8012222 <f_write+0x128>
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2201      	movs	r2, #1
 801221a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801221e:	2301      	movs	r3, #1
 8012220:	e114      	b.n	801244c <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012226:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012230:	2b00      	cmp	r3, #0
 8012232:	d103      	bne.n	801223c <f_write+0x142>
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012238:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012246:	2b00      	cmp	r3, #0
 8012248:	d01d      	beq.n	8012286 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012250:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012254:	68f9      	ldr	r1, [r7, #12]
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801225c:	2301      	movs	r3, #1
 801225e:	f7fd fe61 	bl	800ff24 <disk_write>
 8012262:	4603      	mov	r3, r0
 8012264:	2b00      	cmp	r3, #0
 8012266:	d005      	beq.n	8012274 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2201      	movs	r2, #1
 801226c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012270:	2301      	movs	r3, #1
 8012272:	e0eb      	b.n	801244c <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801227a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801227e:	b2da      	uxtb	r2, r3
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012292:	4619      	mov	r1, r3
 8012294:	4610      	mov	r0, r2
 8012296:	f7fe f9d3 	bl	8010640 <clust2sect>
 801229a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d105      	bne.n	80122ae <f_write+0x1b4>
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2202      	movs	r2, #2
 80122a6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80122aa:	2302      	movs	r3, #2
 80122ac:	e0ce      	b.n	801244c <f_write+0x352>
			sect += csect;
 80122ae:	7dbb      	ldrb	r3, [r7, #22]
 80122b0:	693a      	ldr	r2, [r7, #16]
 80122b2:	4413      	add	r3, r2
 80122b4:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	0a5b      	lsrs	r3, r3, #9
 80122ba:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d048      	beq.n	8012354 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80122c2:	7dba      	ldrb	r2, [r7, #22]
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	4413      	add	r3, r2
 80122c8:	68fa      	ldr	r2, [r7, #12]
 80122ca:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80122ce:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d908      	bls.n	80122e8 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122dc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80122e0:	461a      	mov	r2, r3
 80122e2:	7dbb      	ldrb	r3, [r7, #22]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80122ee:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80122f2:	69fb      	ldr	r3, [r7, #28]
 80122f4:	693a      	ldr	r2, [r7, #16]
 80122f6:	69b9      	ldr	r1, [r7, #24]
 80122f8:	f7fd fe14 	bl	800ff24 <disk_write>
 80122fc:	4603      	mov	r3, r0
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d005      	beq.n	801230e <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2201      	movs	r2, #1
 8012306:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801230a:	2301      	movs	r3, #1
 801230c:	e09e      	b.n	801244c <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	69fa      	ldr	r2, [r7, #28]
 801231a:	429a      	cmp	r2, r3
 801231c:	d916      	bls.n	801234c <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 801231e:	68f8      	ldr	r0, [r7, #12]
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	025b      	lsls	r3, r3, #9
 801232c:	69ba      	ldr	r2, [r7, #24]
 801232e:	4413      	add	r3, r2
 8012330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012334:	4619      	mov	r1, r3
 8012336:	f7fd fe33 	bl	800ffa0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012344:	b2da      	uxtb	r2, r3
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	025b      	lsls	r3, r3, #9
 8012350:	623b      	str	r3, [r7, #32]
				continue;
 8012352:	e047      	b.n	80123e4 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801235a:	693a      	ldr	r2, [r7, #16]
 801235c:	429a      	cmp	r2, r3
 801235e:	d01a      	beq.n	8012396 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801236c:	429a      	cmp	r2, r3
 801236e:	d212      	bcs.n	8012396 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012376:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 801237a:	68f9      	ldr	r1, [r7, #12]
 801237c:	2301      	movs	r3, #1
 801237e:	693a      	ldr	r2, [r7, #16]
 8012380:	f7fd fdb0 	bl	800fee4 <disk_read>
 8012384:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8012386:	2b00      	cmp	r3, #0
 8012388:	d005      	beq.n	8012396 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2201      	movs	r2, #1
 801238e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8012392:	2301      	movs	r3, #1
 8012394:	e05a      	b.n	801244c <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	693a      	ldr	r2, [r7, #16]
 801239a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80123a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80123ac:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80123ae:	6a3a      	ldr	r2, [r7, #32]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d901      	bls.n	80123ba <f_write+0x2c0>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80123c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	4413      	add	r3, r2
 80123c8:	6a3a      	ldr	r2, [r7, #32]
 80123ca:	69b9      	ldr	r1, [r7, #24]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7fd fde7 	bl	800ffa0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80123d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80123e4:	69ba      	ldr	r2, [r7, #24]
 80123e6:	6a3b      	ldr	r3, [r7, #32]
 80123e8:	4413      	add	r3, r2
 80123ea:	61bb      	str	r3, [r7, #24]
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80123f2:	6a3b      	ldr	r3, [r7, #32]
 80123f4:	441a      	add	r2, r3
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	681a      	ldr	r2, [r3, #0]
 8012400:	6a3b      	ldr	r3, [r7, #32]
 8012402:	441a      	add	r2, r3
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	601a      	str	r2, [r3, #0]
 8012408:	687a      	ldr	r2, [r7, #4]
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	1ad3      	subs	r3, r2, r3
 801240e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	f47f aea7 	bne.w	8012166 <f_write+0x6c>
 8012418:	e000      	b.n	801241c <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801241a:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012428:	429a      	cmp	r2, r3
 801242a:	d905      	bls.n	8012438 <f_write+0x33e>
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801243e:	f043 0320 	orr.w	r3, r3, #32
 8012442:	b2da      	uxtb	r2, r3
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 801244a:	2300      	movs	r3, #0
}
 801244c:	4618      	mov	r0, r3
 801244e:	3728      	adds	r7, #40	; 0x28
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}

08012454 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7ff fb57 	bl	8011b10 <validate>
 8012462:	4603      	mov	r3, r0
 8012464:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012466:	7dfb      	ldrb	r3, [r7, #23]
 8012468:	2b00      	cmp	r3, #0
 801246a:	f040 80a8 	bne.w	80125be <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012474:	f003 0320 	and.w	r3, r3, #32
 8012478:	2b00      	cmp	r3, #0
 801247a:	f000 80a0 	beq.w	80125be <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012488:	2b00      	cmp	r3, #0
 801248a:	d019      	beq.n	80124c0 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8012492:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8012496:	6879      	ldr	r1, [r7, #4]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801249e:	2301      	movs	r3, #1
 80124a0:	f7fd fd40 	bl	800ff24 <disk_write>
 80124a4:	4603      	mov	r3, r0
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d001      	beq.n	80124ae <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80124aa:	2301      	movs	r3, #1
 80124ac:	e088      	b.n	80125c0 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80124b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124b8:	b2da      	uxtb	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80124cc:	4619      	mov	r1, r3
 80124ce:	4610      	mov	r0, r2
 80124d0:	f7fd ffdb 	bl	801048a <move_window>
 80124d4:	4603      	mov	r3, r0
 80124d6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d16f      	bne.n	80125be <f_sync+0x16a>
				dir = fp->dir_ptr;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80124e4:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	330b      	adds	r3, #11
 80124ea:	781a      	ldrb	r2, [r3, #0]
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	330b      	adds	r3, #11
 80124f0:	f042 0220 	orr.w	r2, r2, #32
 80124f4:	b2d2      	uxtb	r2, r2
 80124f6:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	331c      	adds	r3, #28
 8012502:	b2d2      	uxtb	r2, r2
 8012504:	701a      	strb	r2, [r3, #0]
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801250c:	b29b      	uxth	r3, r3
 801250e:	0a1b      	lsrs	r3, r3, #8
 8012510:	b29a      	uxth	r2, r3
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	331d      	adds	r3, #29
 8012516:	b2d2      	uxtb	r2, r2
 8012518:	701a      	strb	r2, [r3, #0]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012520:	0c1a      	lsrs	r2, r3, #16
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	331e      	adds	r3, #30
 8012526:	b2d2      	uxtb	r2, r2
 8012528:	701a      	strb	r2, [r3, #0]
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8012530:	0e1a      	lsrs	r2, r3, #24
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	331f      	adds	r3, #31
 8012536:	b2d2      	uxtb	r2, r2
 8012538:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8012540:	4619      	mov	r1, r3
 8012542:	6938      	ldr	r0, [r7, #16]
 8012544:	f7fe fd92 	bl	801106c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8012548:	f7fc f9e4 	bl	800e914 <get_fattime>
 801254c:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	3316      	adds	r3, #22
 8012552:	68fa      	ldr	r2, [r7, #12]
 8012554:	b2d2      	uxtb	r2, r2
 8012556:	701a      	strb	r2, [r3, #0]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	b29b      	uxth	r3, r3
 801255c:	0a1b      	lsrs	r3, r3, #8
 801255e:	b29a      	uxth	r2, r3
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	3317      	adds	r3, #23
 8012564:	b2d2      	uxtb	r2, r2
 8012566:	701a      	strb	r2, [r3, #0]
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	0c1a      	lsrs	r2, r3, #16
 801256c:	693b      	ldr	r3, [r7, #16]
 801256e:	3318      	adds	r3, #24
 8012570:	b2d2      	uxtb	r2, r2
 8012572:	701a      	strb	r2, [r3, #0]
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	0e1a      	lsrs	r2, r3, #24
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	3319      	adds	r3, #25
 801257c:	b2d2      	uxtb	r2, r2
 801257e:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8012580:	693b      	ldr	r3, [r7, #16]
 8012582:	3312      	adds	r3, #18
 8012584:	2200      	movs	r2, #0
 8012586:	701a      	strb	r2, [r3, #0]
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	3313      	adds	r3, #19
 801258c:	2200      	movs	r2, #0
 801258e:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8012596:	f023 0320 	bic.w	r3, r3, #32
 801259a:	b2da      	uxtb	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80125a8:	2201      	movs	r2, #1
 80125aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fd ff96 	bl	80104e6 <sync_fs>
 80125ba:	4603      	mov	r3, r0
 80125bc:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80125be:	7dfb      	ldrb	r3, [r7, #23]
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3718      	adds	r7, #24
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7ff ff3f 	bl	8012454 <f_sync>
 80125d6:	4603      	mov	r3, r0
 80125d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80125da:	7bfb      	ldrb	r3, [r7, #15]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d116      	bne.n	801260e <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f7ff fa95 	bl	8011b10 <validate>
 80125e6:	4603      	mov	r3, r0
 80125e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80125ea:	7bfb      	ldrb	r3, [r7, #15]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d10e      	bne.n	801260e <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80125f6:	4618      	mov	r0, r3
 80125f8:	f7fd fe90 	bl	801031c <dec_lock>
 80125fc:	4603      	mov	r3, r0
 80125fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012600:	7bfb      	ldrb	r3, [r7, #15]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d103      	bne.n	801260e <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2200      	movs	r2, #0
 801260a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3710      	adds	r7, #16
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012618:	b480      	push	{r7}
 801261a:	b087      	sub	sp, #28
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	60b9      	str	r1, [r7, #8]
 8012622:	4613      	mov	r3, r2
 8012624:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012626:	2301      	movs	r3, #1
 8012628:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801262a:	2300      	movs	r3, #0
 801262c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 801262e:	4b1e      	ldr	r3, [pc, #120]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 8012630:	7a5b      	ldrb	r3, [r3, #9]
 8012632:	b2db      	uxtb	r3, r3
 8012634:	2b01      	cmp	r3, #1
 8012636:	d831      	bhi.n	801269c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012638:	4b1b      	ldr	r3, [pc, #108]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 801263a:	7a5b      	ldrb	r3, [r3, #9]
 801263c:	b2db      	uxtb	r3, r3
 801263e:	461a      	mov	r2, r3
 8012640:	4b19      	ldr	r3, [pc, #100]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 8012642:	2100      	movs	r1, #0
 8012644:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8012646:	4b18      	ldr	r3, [pc, #96]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 8012648:	7a5b      	ldrb	r3, [r3, #9]
 801264a:	b2db      	uxtb	r3, r3
 801264c:	4a16      	ldr	r2, [pc, #88]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 801264e:	009b      	lsls	r3, r3, #2
 8012650:	4413      	add	r3, r2
 8012652:	68fa      	ldr	r2, [r7, #12]
 8012654:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8012656:	4b14      	ldr	r3, [pc, #80]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 8012658:	7a5b      	ldrb	r3, [r3, #9]
 801265a:	b2db      	uxtb	r3, r3
 801265c:	461a      	mov	r2, r3
 801265e:	4b12      	ldr	r3, [pc, #72]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 8012660:	4413      	add	r3, r2
 8012662:	79fa      	ldrb	r2, [r7, #7]
 8012664:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012666:	4b10      	ldr	r3, [pc, #64]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 8012668:	7a5b      	ldrb	r3, [r3, #9]
 801266a:	b2db      	uxtb	r3, r3
 801266c:	1c5a      	adds	r2, r3, #1
 801266e:	b2d1      	uxtb	r1, r2
 8012670:	4a0d      	ldr	r2, [pc, #52]	; (80126a8 <FATFS_LinkDriverEx+0x90>)
 8012672:	7251      	strb	r1, [r2, #9]
 8012674:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012676:	7dbb      	ldrb	r3, [r7, #22]
 8012678:	3330      	adds	r3, #48	; 0x30
 801267a:	b2da      	uxtb	r2, r3
 801267c:	68bb      	ldr	r3, [r7, #8]
 801267e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	3301      	adds	r3, #1
 8012684:	223a      	movs	r2, #58	; 0x3a
 8012686:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	3302      	adds	r3, #2
 801268c:	222f      	movs	r2, #47	; 0x2f
 801268e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	3303      	adds	r3, #3
 8012694:	2200      	movs	r2, #0
 8012696:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012698:	2300      	movs	r3, #0
 801269a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 801269c:	7dfb      	ldrb	r3, [r7, #23]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	371c      	adds	r7, #28
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bc80      	pop	{r7}
 80126a6:	4770      	bx	lr
 80126a8:	20000eec 	.word	0x20000eec

080126ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b082      	sub	sp, #8
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80126b6:	2200      	movs	r2, #0
 80126b8:	6839      	ldr	r1, [r7, #0]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7ff ffac 	bl	8012618 <FATFS_LinkDriverEx>
 80126c0:	4603      	mov	r3, r0
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	3708      	adds	r7, #8
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
	...

080126cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	4603      	mov	r3, r0
 80126d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80126d6:	4b0b      	ldr	r3, [pc, #44]	; (8012704 <SD_initialize+0x38>)
 80126d8:	2201      	movs	r2, #1
 80126da:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 80126dc:	f7fc f922 	bl	800e924 <BSP_SD_Init>
 80126e0:	4603      	mov	r3, r0
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d107      	bne.n	80126f6 <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80126e6:	4b07      	ldr	r3, [pc, #28]	; (8012704 <SD_initialize+0x38>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	f023 0301 	bic.w	r3, r3, #1
 80126f0:	b2da      	uxtb	r2, r3
 80126f2:	4b04      	ldr	r3, [pc, #16]	; (8012704 <SD_initialize+0x38>)
 80126f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80126f6:	4b03      	ldr	r3, [pc, #12]	; (8012704 <SD_initialize+0x38>)
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	b2db      	uxtb	r3, r3
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3708      	adds	r7, #8
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	20000122 	.word	0x20000122

08012708 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	4603      	mov	r3, r0
 8012710:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012712:	4b0b      	ldr	r3, [pc, #44]	; (8012740 <SD_status+0x38>)
 8012714:	2201      	movs	r2, #1
 8012716:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012718:	f7fc f966 	bl	800e9e8 <BSP_SD_GetCardState>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d107      	bne.n	8012732 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012722:	4b07      	ldr	r3, [pc, #28]	; (8012740 <SD_status+0x38>)
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	b2db      	uxtb	r3, r3
 8012728:	f023 0301 	bic.w	r3, r3, #1
 801272c:	b2da      	uxtb	r2, r3
 801272e:	4b04      	ldr	r3, [pc, #16]	; (8012740 <SD_status+0x38>)
 8012730:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8012732:	4b03      	ldr	r3, [pc, #12]	; (8012740 <SD_status+0x38>)
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	b2db      	uxtb	r3, r3
}
 8012738:	4618      	mov	r0, r3
 801273a:	3708      	adds	r7, #8
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	20000122 	.word	0x20000122

08012744 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b086      	sub	sp, #24
 8012748:	af00      	add	r7, sp, #0
 801274a:	60b9      	str	r1, [r7, #8]
 801274c:	607a      	str	r2, [r7, #4]
 801274e:	603b      	str	r3, [r7, #0]
 8012750:	4603      	mov	r3, r0
 8012752:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012754:	2301      	movs	r3, #1
 8012756:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8012758:	4b0f      	ldr	r3, [pc, #60]	; (8012798 <SD_read+0x54>)
 801275a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 801275c:	4b0f      	ldr	r3, [pc, #60]	; (801279c <SD_read+0x58>)
 801275e:	683a      	ldr	r2, [r7, #0]
 8012760:	6879      	ldr	r1, [r7, #4]
 8012762:	68b8      	ldr	r0, [r7, #8]
 8012764:	f7fc f904 	bl	800e970 <BSP_SD_ReadBlocks>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d10e      	bne.n	801278c <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 801276e:	e006      	b.n	801277e <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	1e5a      	subs	r2, r3, #1
 8012774:	613a      	str	r2, [r7, #16]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d101      	bne.n	801277e <SD_read+0x3a>
      {
        return RES_ERROR;
 801277a:	2301      	movs	r3, #1
 801277c:	e007      	b.n	801278e <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 801277e:	f7fc f933 	bl	800e9e8 <BSP_SD_GetCardState>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d1f3      	bne.n	8012770 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8012788:	2300      	movs	r3, #0
 801278a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 801278c:	7dfb      	ldrb	r3, [r7, #23]
}
 801278e:	4618      	mov	r0, r3
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	000186a0 	.word	0x000186a0
 801279c:	05f5e100 	.word	0x05f5e100

080127a0 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b086      	sub	sp, #24
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	60b9      	str	r1, [r7, #8]
 80127a8:	607a      	str	r2, [r7, #4]
 80127aa:	603b      	str	r3, [r7, #0]
 80127ac:	4603      	mov	r3, r0
 80127ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80127b0:	2301      	movs	r3, #1
 80127b2:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 80127b4:	4b0f      	ldr	r3, [pc, #60]	; (80127f4 <SD_write+0x54>)
 80127b6:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 80127b8:	4b0f      	ldr	r3, [pc, #60]	; (80127f8 <SD_write+0x58>)
 80127ba:	683a      	ldr	r2, [r7, #0]
 80127bc:	6879      	ldr	r1, [r7, #4]
 80127be:	68b8      	ldr	r0, [r7, #8]
 80127c0:	f7fc f8f4 	bl	800e9ac <BSP_SD_WriteBlocks>
 80127c4:	4603      	mov	r3, r0
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d10e      	bne.n	80127e8 <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 80127ca:	e006      	b.n	80127da <SD_write+0x3a>
    {
      if (timeout-- == 0)
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	1e5a      	subs	r2, r3, #1
 80127d0:	613a      	str	r2, [r7, #16]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d101      	bne.n	80127da <SD_write+0x3a>
      {
        return RES_ERROR;
 80127d6:	2301      	movs	r3, #1
 80127d8:	e007      	b.n	80127ea <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80127da:	f7fc f905 	bl	800e9e8 <BSP_SD_GetCardState>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1f3      	bne.n	80127cc <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 80127e4:	2300      	movs	r3, #0
 80127e6:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 80127e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3718      	adds	r7, #24
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	000186a0 	.word	0x000186a0
 80127f8:	05f5e100 	.word	0x05f5e100

080127fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b08c      	sub	sp, #48	; 0x30
 8012800:	af00      	add	r7, sp, #0
 8012802:	4603      	mov	r3, r0
 8012804:	603a      	str	r2, [r7, #0]
 8012806:	71fb      	strb	r3, [r7, #7]
 8012808:	460b      	mov	r3, r1
 801280a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801280c:	2301      	movs	r3, #1
 801280e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012812:	4b24      	ldr	r3, [pc, #144]	; (80128a4 <SD_ioctl+0xa8>)
 8012814:	781b      	ldrb	r3, [r3, #0]
 8012816:	b2db      	uxtb	r3, r3
 8012818:	f003 0301 	and.w	r3, r3, #1
 801281c:	2b00      	cmp	r3, #0
 801281e:	d001      	beq.n	8012824 <SD_ioctl+0x28>
 8012820:	2303      	movs	r3, #3
 8012822:	e03b      	b.n	801289c <SD_ioctl+0xa0>
  
  switch (cmd)
 8012824:	79bb      	ldrb	r3, [r7, #6]
 8012826:	2b03      	cmp	r3, #3
 8012828:	d833      	bhi.n	8012892 <SD_ioctl+0x96>
 801282a:	a201      	add	r2, pc, #4	; (adr r2, 8012830 <SD_ioctl+0x34>)
 801282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012830:	08012841 	.word	0x08012841
 8012834:	08012849 	.word	0x08012849
 8012838:	08012861 	.word	0x08012861
 801283c:	0801287b 	.word	0x0801287b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012840:	2300      	movs	r3, #0
 8012842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012846:	e027      	b.n	8012898 <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012848:	f107 030c 	add.w	r3, r7, #12
 801284c:	4618      	mov	r0, r3
 801284e:	f7fc f8db 	bl	800ea08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012858:	2300      	movs	r3, #0
 801285a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801285e:	e01b      	b.n	8012898 <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012860:	f107 030c 	add.w	r3, r7, #12
 8012864:	4618      	mov	r0, r3
 8012866:	f7fc f8cf 	bl	800ea08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801286c:	b29a      	uxth	r2, r3
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012872:	2300      	movs	r3, #0
 8012874:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012878:	e00e      	b.n	8012898 <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801287a:	f107 030c 	add.w	r3, r7, #12
 801287e:	4618      	mov	r0, r3
 8012880:	f7fc f8c2 	bl	800ea08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8012884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801288a:	2300      	movs	r3, #0
 801288c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012890:	e002      	b.n	8012898 <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8012892:	2304      	movs	r3, #4
 8012894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8012898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801289c:	4618      	mov	r0, r3
 801289e:	3730      	adds	r7, #48	; 0x30
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	20000122 	.word	0x20000122

080128a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80128ac:	2200      	movs	r2, #0
 80128ae:	490e      	ldr	r1, [pc, #56]	; (80128e8 <MX_USB_DEVICE_Init+0x40>)
 80128b0:	480e      	ldr	r0, [pc, #56]	; (80128ec <MX_USB_DEVICE_Init+0x44>)
 80128b2:	f7fc fa5b 	bl	800ed6c <USBD_Init>
 80128b6:	4603      	mov	r3, r0
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d001      	beq.n	80128c0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80128bc:	f7f0 fa6a 	bl	8002d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80128c0:	490b      	ldr	r1, [pc, #44]	; (80128f0 <MX_USB_DEVICE_Init+0x48>)
 80128c2:	480a      	ldr	r0, [pc, #40]	; (80128ec <MX_USB_DEVICE_Init+0x44>)
 80128c4:	f7fc fa7d 	bl	800edc2 <USBD_RegisterClass>
 80128c8:	4603      	mov	r3, r0
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d001      	beq.n	80128d2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80128ce:	f7f0 fa61 	bl	8002d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80128d2:	4806      	ldr	r0, [pc, #24]	; (80128ec <MX_USB_DEVICE_Init+0x44>)
 80128d4:	f7fc fa8e 	bl	800edf4 <USBD_Start>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d001      	beq.n	80128e2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80128de:	f7f0 fa59 	bl	8002d94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80128e2:	bf00      	nop
 80128e4:	bd80      	pop	{r7, pc}
 80128e6:	bf00      	nop
 80128e8:	20000124 	.word	0x20000124
 80128ec:	20000ef8 	.word	0x20000ef8
 80128f0:	2000001c 	.word	0x2000001c

080128f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128f4:	b480      	push	{r7}
 80128f6:	b083      	sub	sp, #12
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	4603      	mov	r3, r0
 80128fc:	6039      	str	r1, [r7, #0]
 80128fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	2212      	movs	r2, #18
 8012904:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012906:	4b03      	ldr	r3, [pc, #12]	; (8012914 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012908:	4618      	mov	r0, r3
 801290a:	370c      	adds	r7, #12
 801290c:	46bd      	mov	sp, r7
 801290e:	bc80      	pop	{r7}
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	20000140 	.word	0x20000140

08012918 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	6039      	str	r1, [r7, #0]
 8012922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2204      	movs	r2, #4
 8012928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801292a:	4b03      	ldr	r3, [pc, #12]	; (8012938 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801292c:	4618      	mov	r0, r3
 801292e:	370c      	adds	r7, #12
 8012930:	46bd      	mov	sp, r7
 8012932:	bc80      	pop	{r7}
 8012934:	4770      	bx	lr
 8012936:	bf00      	nop
 8012938:	20000154 	.word	0x20000154

0801293c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	4603      	mov	r3, r0
 8012944:	6039      	str	r1, [r7, #0]
 8012946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012948:	79fb      	ldrb	r3, [r7, #7]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d105      	bne.n	801295a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801294e:	683a      	ldr	r2, [r7, #0]
 8012950:	4907      	ldr	r1, [pc, #28]	; (8012970 <USBD_FS_ProductStrDescriptor+0x34>)
 8012952:	4808      	ldr	r0, [pc, #32]	; (8012974 <USBD_FS_ProductStrDescriptor+0x38>)
 8012954:	f7fd f9c6 	bl	800fce4 <USBD_GetString>
 8012958:	e004      	b.n	8012964 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	4904      	ldr	r1, [pc, #16]	; (8012970 <USBD_FS_ProductStrDescriptor+0x34>)
 801295e:	4805      	ldr	r0, [pc, #20]	; (8012974 <USBD_FS_ProductStrDescriptor+0x38>)
 8012960:	f7fd f9c0 	bl	800fce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012964:	4b02      	ldr	r3, [pc, #8]	; (8012970 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012966:	4618      	mov	r0, r3
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
 801296e:	bf00      	nop
 8012970:	200011bc 	.word	0x200011bc
 8012974:	0801620c 	.word	0x0801620c

08012978 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	4603      	mov	r3, r0
 8012980:	6039      	str	r1, [r7, #0]
 8012982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012984:	683a      	ldr	r2, [r7, #0]
 8012986:	4904      	ldr	r1, [pc, #16]	; (8012998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012988:	4804      	ldr	r0, [pc, #16]	; (801299c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801298a:	f7fd f9ab 	bl	800fce4 <USBD_GetString>
  return USBD_StrDesc;
 801298e:	4b02      	ldr	r3, [pc, #8]	; (8012998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012990:	4618      	mov	r0, r3
 8012992:	3708      	adds	r7, #8
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}
 8012998:	200011bc 	.word	0x200011bc
 801299c:	08016224 	.word	0x08016224

080129a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b082      	sub	sp, #8
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	4603      	mov	r3, r0
 80129a8:	6039      	str	r1, [r7, #0]
 80129aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	221a      	movs	r2, #26
 80129b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80129b2:	f000 f843 	bl	8012a3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80129b6:	4b02      	ldr	r3, [pc, #8]	; (80129c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}
 80129c0:	20000158 	.word	0x20000158

080129c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b082      	sub	sp, #8
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	4603      	mov	r3, r0
 80129cc:	6039      	str	r1, [r7, #0]
 80129ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80129d0:	79fb      	ldrb	r3, [r7, #7]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d105      	bne.n	80129e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80129d6:	683a      	ldr	r2, [r7, #0]
 80129d8:	4907      	ldr	r1, [pc, #28]	; (80129f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80129da:	4808      	ldr	r0, [pc, #32]	; (80129fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80129dc:	f7fd f982 	bl	800fce4 <USBD_GetString>
 80129e0:	e004      	b.n	80129ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80129e2:	683a      	ldr	r2, [r7, #0]
 80129e4:	4904      	ldr	r1, [pc, #16]	; (80129f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80129e6:	4805      	ldr	r0, [pc, #20]	; (80129fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80129e8:	f7fd f97c 	bl	800fce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80129ec:	4b02      	ldr	r3, [pc, #8]	; (80129f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80129ee:	4618      	mov	r0, r3
 80129f0:	3708      	adds	r7, #8
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	200011bc 	.word	0x200011bc
 80129fc:	08016238 	.word	0x08016238

08012a00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	4603      	mov	r3, r0
 8012a08:	6039      	str	r1, [r7, #0]
 8012a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a0c:	79fb      	ldrb	r3, [r7, #7]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d105      	bne.n	8012a1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012a12:	683a      	ldr	r2, [r7, #0]
 8012a14:	4907      	ldr	r1, [pc, #28]	; (8012a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012a16:	4808      	ldr	r0, [pc, #32]	; (8012a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012a18:	f7fd f964 	bl	800fce4 <USBD_GetString>
 8012a1c:	e004      	b.n	8012a28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012a1e:	683a      	ldr	r2, [r7, #0]
 8012a20:	4904      	ldr	r1, [pc, #16]	; (8012a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012a22:	4805      	ldr	r0, [pc, #20]	; (8012a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012a24:	f7fd f95e 	bl	800fce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a28:	4b02      	ldr	r3, [pc, #8]	; (8012a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	3708      	adds	r7, #8
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
 8012a32:	bf00      	nop
 8012a34:	200011bc 	.word	0x200011bc
 8012a38:	08016244 	.word	0x08016244

08012a3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012a42:	4b0f      	ldr	r3, [pc, #60]	; (8012a80 <Get_SerialNum+0x44>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012a48:	4b0e      	ldr	r3, [pc, #56]	; (8012a84 <Get_SerialNum+0x48>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012a4e:	4b0e      	ldr	r3, [pc, #56]	; (8012a88 <Get_SerialNum+0x4c>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012a54:	68fa      	ldr	r2, [r7, #12]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	4413      	add	r3, r2
 8012a5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d009      	beq.n	8012a76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012a62:	2208      	movs	r2, #8
 8012a64:	4909      	ldr	r1, [pc, #36]	; (8012a8c <Get_SerialNum+0x50>)
 8012a66:	68f8      	ldr	r0, [r7, #12]
 8012a68:	f000 f814 	bl	8012a94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012a6c:	2204      	movs	r2, #4
 8012a6e:	4908      	ldr	r1, [pc, #32]	; (8012a90 <Get_SerialNum+0x54>)
 8012a70:	68b8      	ldr	r0, [r7, #8]
 8012a72:	f000 f80f 	bl	8012a94 <IntToUnicode>
  }
}
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	1ffff7e8 	.word	0x1ffff7e8
 8012a84:	1ffff7ec 	.word	0x1ffff7ec
 8012a88:	1ffff7f0 	.word	0x1ffff7f0
 8012a8c:	2000015a 	.word	0x2000015a
 8012a90:	2000016a 	.word	0x2000016a

08012a94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012a94:	b480      	push	{r7}
 8012a96:	b087      	sub	sp, #28
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	60b9      	str	r1, [r7, #8]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	75fb      	strb	r3, [r7, #23]
 8012aaa:	e027      	b.n	8012afc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	0f1b      	lsrs	r3, r3, #28
 8012ab0:	2b09      	cmp	r3, #9
 8012ab2:	d80b      	bhi.n	8012acc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	0f1b      	lsrs	r3, r3, #28
 8012ab8:	b2da      	uxtb	r2, r3
 8012aba:	7dfb      	ldrb	r3, [r7, #23]
 8012abc:	005b      	lsls	r3, r3, #1
 8012abe:	4619      	mov	r1, r3
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	440b      	add	r3, r1
 8012ac4:	3230      	adds	r2, #48	; 0x30
 8012ac6:	b2d2      	uxtb	r2, r2
 8012ac8:	701a      	strb	r2, [r3, #0]
 8012aca:	e00a      	b.n	8012ae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	0f1b      	lsrs	r3, r3, #28
 8012ad0:	b2da      	uxtb	r2, r3
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	005b      	lsls	r3, r3, #1
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	440b      	add	r3, r1
 8012adc:	3237      	adds	r2, #55	; 0x37
 8012ade:	b2d2      	uxtb	r2, r2
 8012ae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	011b      	lsls	r3, r3, #4
 8012ae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012ae8:	7dfb      	ldrb	r3, [r7, #23]
 8012aea:	005b      	lsls	r3, r3, #1
 8012aec:	3301      	adds	r3, #1
 8012aee:	68ba      	ldr	r2, [r7, #8]
 8012af0:	4413      	add	r3, r2
 8012af2:	2200      	movs	r2, #0
 8012af4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012af6:	7dfb      	ldrb	r3, [r7, #23]
 8012af8:	3301      	adds	r3, #1
 8012afa:	75fb      	strb	r3, [r7, #23]
 8012afc:	7dfa      	ldrb	r2, [r7, #23]
 8012afe:	79fb      	ldrb	r3, [r7, #7]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d3d3      	bcc.n	8012aac <IntToUnicode+0x18>
  }
}
 8012b04:	bf00      	nop
 8012b06:	bf00      	nop
 8012b08:	371c      	adds	r7, #28
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	bc80      	pop	{r7}
 8012b0e:	4770      	bx	lr

08012b10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4a0d      	ldr	r2, [pc, #52]	; (8012b54 <HAL_PCD_MspInit+0x44>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d113      	bne.n	8012b4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8012b22:	4b0d      	ldr	r3, [pc, #52]	; (8012b58 <HAL_PCD_MspInit+0x48>)
 8012b24:	69db      	ldr	r3, [r3, #28]
 8012b26:	4a0c      	ldr	r2, [pc, #48]	; (8012b58 <HAL_PCD_MspInit+0x48>)
 8012b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012b2c:	61d3      	str	r3, [r2, #28]
 8012b2e:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <HAL_PCD_MspInit+0x48>)
 8012b30:	69db      	ldr	r3, [r3, #28]
 8012b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b36:	60fb      	str	r3, [r7, #12]
 8012b38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	2100      	movs	r1, #0
 8012b3e:	2014      	movs	r0, #20
 8012b40:	f7f1 f9d9 	bl	8003ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8012b44:	2014      	movs	r0, #20
 8012b46:	f7f1 f9f2 	bl	8003f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012b4a:	bf00      	nop
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
 8012b52:	bf00      	nop
 8012b54:	40005c00 	.word	0x40005c00
 8012b58:	40021000 	.word	0x40021000

08012b5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b082      	sub	sp, #8
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8012b70:	4619      	mov	r1, r3
 8012b72:	4610      	mov	r0, r2
 8012b74:	f7fc f986 	bl	800ee84 <USBD_LL_SetupStage>
}
 8012b78:	bf00      	nop
 8012b7a:	3708      	adds	r7, #8
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8012b92:	78fa      	ldrb	r2, [r7, #3]
 8012b94:	6879      	ldr	r1, [r7, #4]
 8012b96:	4613      	mov	r3, r2
 8012b98:	009b      	lsls	r3, r3, #2
 8012b9a:	4413      	add	r3, r2
 8012b9c:	00db      	lsls	r3, r3, #3
 8012b9e:	440b      	add	r3, r1
 8012ba0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012ba4:	681a      	ldr	r2, [r3, #0]
 8012ba6:	78fb      	ldrb	r3, [r7, #3]
 8012ba8:	4619      	mov	r1, r3
 8012baa:	f7fc f9b8 	bl	800ef1e <USBD_LL_DataOutStage>
}
 8012bae:	bf00      	nop
 8012bb0:	3708      	adds	r7, #8
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b082      	sub	sp, #8
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8012bc8:	78fa      	ldrb	r2, [r7, #3]
 8012bca:	6879      	ldr	r1, [r7, #4]
 8012bcc:	4613      	mov	r3, r2
 8012bce:	009b      	lsls	r3, r3, #2
 8012bd0:	4413      	add	r3, r2
 8012bd2:	00db      	lsls	r3, r3, #3
 8012bd4:	440b      	add	r3, r1
 8012bd6:	333c      	adds	r3, #60	; 0x3c
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	78fb      	ldrb	r3, [r7, #3]
 8012bdc:	4619      	mov	r1, r3
 8012bde:	f7fc fa0f 	bl	800f000 <USBD_LL_DataInStage>
}
 8012be2:	bf00      	nop
 8012be4:	3708      	adds	r7, #8
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b082      	sub	sp, #8
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	f7fc fb1f 	bl	800f23c <USBD_LL_SOF>
}
 8012bfe:	bf00      	nop
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}

08012c06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c06:	b580      	push	{r7, lr}
 8012c08:	b084      	sub	sp, #16
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012c0e:	2301      	movs	r3, #1
 8012c10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	2b02      	cmp	r3, #2
 8012c18:	d001      	beq.n	8012c1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012c1a:	f7f0 f8bb 	bl	8002d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012c24:	7bfa      	ldrb	r2, [r7, #15]
 8012c26:	4611      	mov	r1, r2
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7fc facf 	bl	800f1cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7fc fa88 	bl	800f14a <USBD_LL_Reset>
}
 8012c3a:	bf00      	nop
 8012c3c:	3710      	adds	r7, #16
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
	...

08012c44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7fc fac9 	bl	800f1ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	699b      	ldr	r3, [r3, #24]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d005      	beq.n	8012c6c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c60:	4b04      	ldr	r3, [pc, #16]	; (8012c74 <HAL_PCD_SuspendCallback+0x30>)
 8012c62:	691b      	ldr	r3, [r3, #16]
 8012c64:	4a03      	ldr	r2, [pc, #12]	; (8012c74 <HAL_PCD_SuspendCallback+0x30>)
 8012c66:	f043 0306 	orr.w	r3, r3, #6
 8012c6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012c6c:	bf00      	nop
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	e000ed00 	.word	0xe000ed00

08012c78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fc fac3 	bl	800f212 <USBD_LL_Resume>
}
 8012c8c:	bf00      	nop
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012c9c:	4a1f      	ldr	r2, [pc, #124]	; (8012d1c <USBD_LL_Init+0x88>)
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	4a1d      	ldr	r2, [pc, #116]	; (8012d1c <USBD_LL_Init+0x88>)
 8012ca8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8012cac:	4b1b      	ldr	r3, [pc, #108]	; (8012d1c <USBD_LL_Init+0x88>)
 8012cae:	4a1c      	ldr	r2, [pc, #112]	; (8012d20 <USBD_LL_Init+0x8c>)
 8012cb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012cb2:	4b1a      	ldr	r3, [pc, #104]	; (8012d1c <USBD_LL_Init+0x88>)
 8012cb4:	2208      	movs	r2, #8
 8012cb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012cb8:	4b18      	ldr	r3, [pc, #96]	; (8012d1c <USBD_LL_Init+0x88>)
 8012cba:	2202      	movs	r2, #2
 8012cbc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012cbe:	4b17      	ldr	r3, [pc, #92]	; (8012d1c <USBD_LL_Init+0x88>)
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012cc4:	4b15      	ldr	r3, [pc, #84]	; (8012d1c <USBD_LL_Init+0x88>)
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012cca:	4b14      	ldr	r3, [pc, #80]	; (8012d1c <USBD_LL_Init+0x88>)
 8012ccc:	2200      	movs	r2, #0
 8012cce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012cd0:	4812      	ldr	r0, [pc, #72]	; (8012d1c <USBD_LL_Init+0x88>)
 8012cd2:	f7f3 fb12 	bl	80062fa <HAL_PCD_Init>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d001      	beq.n	8012ce0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8012cdc:	f7f0 f85a 	bl	8002d94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012ce6:	2318      	movs	r3, #24
 8012ce8:	2200      	movs	r2, #0
 8012cea:	2100      	movs	r1, #0
 8012cec:	f7f5 f81a 	bl	8007d24 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012cf6:	2358      	movs	r3, #88	; 0x58
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	2180      	movs	r1, #128	; 0x80
 8012cfc:	f7f5 f812 	bl	8007d24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	2181      	movs	r1, #129	; 0x81
 8012d0e:	f7f5 f809 	bl	8007d24 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8012d12:	2300      	movs	r3, #0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3708      	adds	r7, #8
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	200013bc 	.word	0x200013bc
 8012d20:	40005c00 	.word	0x40005c00

08012d24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b084      	sub	sp, #16
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d30:	2300      	movs	r3, #0
 8012d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7f3 fbdc 	bl	80064f8 <HAL_PCD_Start>
 8012d40:	4603      	mov	r3, r0
 8012d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d44:	7bfb      	ldrb	r3, [r7, #15]
 8012d46:	4618      	mov	r0, r3
 8012d48:	f000 f93c 	bl	8012fc4 <USBD_Get_USB_Status>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b084      	sub	sp, #16
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
 8012d62:	4608      	mov	r0, r1
 8012d64:	4611      	mov	r1, r2
 8012d66:	461a      	mov	r2, r3
 8012d68:	4603      	mov	r3, r0
 8012d6a:	70fb      	strb	r3, [r7, #3]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	70bb      	strb	r3, [r7, #2]
 8012d70:	4613      	mov	r3, r2
 8012d72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d74:	2300      	movs	r3, #0
 8012d76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d78:	2300      	movs	r3, #0
 8012d7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012d82:	78bb      	ldrb	r3, [r7, #2]
 8012d84:	883a      	ldrh	r2, [r7, #0]
 8012d86:	78f9      	ldrb	r1, [r7, #3]
 8012d88:	f7f3 fd31 	bl	80067ee <HAL_PCD_EP_Open>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d90:	7bfb      	ldrb	r3, [r7, #15]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f000 f916 	bl	8012fc4 <USBD_Get_USB_Status>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3710      	adds	r7, #16
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012da6:	b580      	push	{r7, lr}
 8012da8:	b084      	sub	sp, #16
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
 8012dae:	460b      	mov	r3, r1
 8012db0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012db2:	2300      	movs	r3, #0
 8012db4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012db6:	2300      	movs	r3, #0
 8012db8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012dc0:	78fa      	ldrb	r2, [r7, #3]
 8012dc2:	4611      	mov	r1, r2
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7f3 fd6f 	bl	80068a8 <HAL_PCD_EP_Close>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012dce:	7bfb      	ldrb	r3, [r7, #15]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f000 f8f7 	bl	8012fc4 <USBD_Get_USB_Status>
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3710      	adds	r7, #16
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}

08012de4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b084      	sub	sp, #16
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	460b      	mov	r3, r1
 8012dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012df0:	2300      	movs	r3, #0
 8012df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012df4:	2300      	movs	r3, #0
 8012df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012dfe:	78fa      	ldrb	r2, [r7, #3]
 8012e00:	4611      	mov	r1, r2
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7f3 fe00 	bl	8006a08 <HAL_PCD_EP_SetStall>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e0c:	7bfb      	ldrb	r3, [r7, #15]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f000 f8d8 	bl	8012fc4 <USBD_Get_USB_Status>
 8012e14:	4603      	mov	r3, r0
 8012e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b084      	sub	sp, #16
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e32:	2300      	movs	r3, #0
 8012e34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e3c:	78fa      	ldrb	r2, [r7, #3]
 8012e3e:	4611      	mov	r1, r2
 8012e40:	4618      	mov	r0, r3
 8012e42:	f7f3 fe41 	bl	8006ac8 <HAL_PCD_EP_ClrStall>
 8012e46:	4603      	mov	r3, r0
 8012e48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e4a:	7bfb      	ldrb	r3, [r7, #15]
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f000 f8b9 	bl	8012fc4 <USBD_Get_USB_Status>
 8012e52:	4603      	mov	r3, r0
 8012e54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e56:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b085      	sub	sp, #20
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	460b      	mov	r3, r1
 8012e6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	da0c      	bge.n	8012e96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012e7c:	78fb      	ldrb	r3, [r7, #3]
 8012e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e82:	68f9      	ldr	r1, [r7, #12]
 8012e84:	1c5a      	adds	r2, r3, #1
 8012e86:	4613      	mov	r3, r2
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	4413      	add	r3, r2
 8012e8c:	00db      	lsls	r3, r3, #3
 8012e8e:	440b      	add	r3, r1
 8012e90:	3302      	adds	r3, #2
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	e00b      	b.n	8012eae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012e96:	78fb      	ldrb	r3, [r7, #3]
 8012e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012e9c:	68f9      	ldr	r1, [r7, #12]
 8012e9e:	4613      	mov	r3, r2
 8012ea0:	009b      	lsls	r3, r3, #2
 8012ea2:	4413      	add	r3, r2
 8012ea4:	00db      	lsls	r3, r3, #3
 8012ea6:	440b      	add	r3, r1
 8012ea8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8012eac:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bc80      	pop	{r7}
 8012eb6:	4770      	bx	lr

08012eb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ed2:	78fa      	ldrb	r2, [r7, #3]
 8012ed4:	4611      	mov	r1, r2
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7f3 fc64 	bl	80067a4 <HAL_PCD_SetAddress>
 8012edc:	4603      	mov	r3, r0
 8012ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ee0:	7bfb      	ldrb	r3, [r7, #15]
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f000 f86e 	bl	8012fc4 <USBD_Get_USB_Status>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3710      	adds	r7, #16
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}

08012ef6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012ef6:	b580      	push	{r7, lr}
 8012ef8:	b086      	sub	sp, #24
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	60f8      	str	r0, [r7, #12]
 8012efe:	607a      	str	r2, [r7, #4]
 8012f00:	461a      	mov	r2, r3
 8012f02:	460b      	mov	r3, r1
 8012f04:	72fb      	strb	r3, [r7, #11]
 8012f06:	4613      	mov	r3, r2
 8012f08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f0e:	2300      	movs	r3, #0
 8012f10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012f18:	893b      	ldrh	r3, [r7, #8]
 8012f1a:	7af9      	ldrb	r1, [r7, #11]
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	f7f3 fd3c 	bl	800699a <HAL_PCD_EP_Transmit>
 8012f22:	4603      	mov	r3, r0
 8012f24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f26:	7dfb      	ldrb	r3, [r7, #23]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f000 f84b 	bl	8012fc4 <USBD_Get_USB_Status>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012f32:	7dbb      	ldrb	r3, [r7, #22]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3718      	adds	r7, #24
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b086      	sub	sp, #24
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	607a      	str	r2, [r7, #4]
 8012f46:	461a      	mov	r2, r3
 8012f48:	460b      	mov	r3, r1
 8012f4a:	72fb      	strb	r3, [r7, #11]
 8012f4c:	4613      	mov	r3, r2
 8012f4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f50:	2300      	movs	r3, #0
 8012f52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f54:	2300      	movs	r3, #0
 8012f56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012f5e:	893b      	ldrh	r3, [r7, #8]
 8012f60:	7af9      	ldrb	r1, [r7, #11]
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	f7f3 fce8 	bl	8006938 <HAL_PCD_EP_Receive>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f6c:	7dfb      	ldrb	r3, [r7, #23]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f000 f828 	bl	8012fc4 <USBD_Get_USB_Status>
 8012f74:	4603      	mov	r3, r0
 8012f76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012f78:	7dbb      	ldrb	r3, [r7, #22]
}
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3718      	adds	r7, #24
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bd80      	pop	{r7, pc}
	...

08012f84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012f84:	b480      	push	{r7}
 8012f86:	b083      	sub	sp, #12
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012f8c:	4b02      	ldr	r3, [pc, #8]	; (8012f98 <USBD_static_malloc+0x14>)
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	370c      	adds	r7, #12
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bc80      	pop	{r7}
 8012f96:	4770      	bx	lr
 8012f98:	200016ac 	.word	0x200016ac

08012f9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]

}
 8012fa4:	bf00      	nop
 8012fa6:	370c      	adds	r7, #12
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bc80      	pop	{r7}
 8012fac:	4770      	bx	lr

08012fae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fae:	b480      	push	{r7}
 8012fb0:	b083      	sub	sp, #12
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
 8012fb6:	460b      	mov	r3, r1
 8012fb8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8012fba:	bf00      	nop
 8012fbc:	370c      	adds	r7, #12
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bc80      	pop	{r7}
 8012fc2:	4770      	bx	lr

08012fc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	4603      	mov	r3, r0
 8012fcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012fd2:	79fb      	ldrb	r3, [r7, #7]
 8012fd4:	2b03      	cmp	r3, #3
 8012fd6:	d817      	bhi.n	8013008 <USBD_Get_USB_Status+0x44>
 8012fd8:	a201      	add	r2, pc, #4	; (adr r2, 8012fe0 <USBD_Get_USB_Status+0x1c>)
 8012fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fde:	bf00      	nop
 8012fe0:	08012ff1 	.word	0x08012ff1
 8012fe4:	08012ff7 	.word	0x08012ff7
 8012fe8:	08012ffd 	.word	0x08012ffd
 8012fec:	08013003 	.word	0x08013003
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ff4:	e00b      	b.n	801300e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012ff6:	2302      	movs	r3, #2
 8012ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8012ffa:	e008      	b.n	801300e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8013000:	e005      	b.n	801300e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013002:	2302      	movs	r3, #2
 8013004:	73fb      	strb	r3, [r7, #15]
    break;
 8013006:	e002      	b.n	801300e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013008:	2302      	movs	r3, #2
 801300a:	73fb      	strb	r3, [r7, #15]
    break;
 801300c:	bf00      	nop
  }
  return usb_status;
 801300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013010:	4618      	mov	r0, r3
 8013012:	3714      	adds	r7, #20
 8013014:	46bd      	mov	sp, r7
 8013016:	bc80      	pop	{r7}
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop

0801301c <__errno>:
 801301c:	4b01      	ldr	r3, [pc, #4]	; (8013024 <__errno+0x8>)
 801301e:	6818      	ldr	r0, [r3, #0]
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop
 8013024:	20000174 	.word	0x20000174

08013028 <__libc_init_array>:
 8013028:	b570      	push	{r4, r5, r6, lr}
 801302a:	2600      	movs	r6, #0
 801302c:	4d0c      	ldr	r5, [pc, #48]	; (8013060 <__libc_init_array+0x38>)
 801302e:	4c0d      	ldr	r4, [pc, #52]	; (8013064 <__libc_init_array+0x3c>)
 8013030:	1b64      	subs	r4, r4, r5
 8013032:	10a4      	asrs	r4, r4, #2
 8013034:	42a6      	cmp	r6, r4
 8013036:	d109      	bne.n	801304c <__libc_init_array+0x24>
 8013038:	f003 f834 	bl	80160a4 <_init>
 801303c:	2600      	movs	r6, #0
 801303e:	4d0a      	ldr	r5, [pc, #40]	; (8013068 <__libc_init_array+0x40>)
 8013040:	4c0a      	ldr	r4, [pc, #40]	; (801306c <__libc_init_array+0x44>)
 8013042:	1b64      	subs	r4, r4, r5
 8013044:	10a4      	asrs	r4, r4, #2
 8013046:	42a6      	cmp	r6, r4
 8013048:	d105      	bne.n	8013056 <__libc_init_array+0x2e>
 801304a:	bd70      	pop	{r4, r5, r6, pc}
 801304c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013050:	4798      	blx	r3
 8013052:	3601      	adds	r6, #1
 8013054:	e7ee      	b.n	8013034 <__libc_init_array+0xc>
 8013056:	f855 3b04 	ldr.w	r3, [r5], #4
 801305a:	4798      	blx	r3
 801305c:	3601      	adds	r6, #1
 801305e:	e7f2      	b.n	8013046 <__libc_init_array+0x1e>
 8013060:	0802f904 	.word	0x0802f904
 8013064:	0802f904 	.word	0x0802f904
 8013068:	0802f904 	.word	0x0802f904
 801306c:	0802f908 	.word	0x0802f908

08013070 <malloc>:
 8013070:	4b02      	ldr	r3, [pc, #8]	; (801307c <malloc+0xc>)
 8013072:	4601      	mov	r1, r0
 8013074:	6818      	ldr	r0, [r3, #0]
 8013076:	f000 b87b 	b.w	8013170 <_malloc_r>
 801307a:	bf00      	nop
 801307c:	20000174 	.word	0x20000174

08013080 <free>:
 8013080:	4b02      	ldr	r3, [pc, #8]	; (801308c <free+0xc>)
 8013082:	4601      	mov	r1, r0
 8013084:	6818      	ldr	r0, [r3, #0]
 8013086:	f000 b80b 	b.w	80130a0 <_free_r>
 801308a:	bf00      	nop
 801308c:	20000174 	.word	0x20000174

08013090 <memset>:
 8013090:	4603      	mov	r3, r0
 8013092:	4402      	add	r2, r0
 8013094:	4293      	cmp	r3, r2
 8013096:	d100      	bne.n	801309a <memset+0xa>
 8013098:	4770      	bx	lr
 801309a:	f803 1b01 	strb.w	r1, [r3], #1
 801309e:	e7f9      	b.n	8013094 <memset+0x4>

080130a0 <_free_r>:
 80130a0:	b538      	push	{r3, r4, r5, lr}
 80130a2:	4605      	mov	r5, r0
 80130a4:	2900      	cmp	r1, #0
 80130a6:	d040      	beq.n	801312a <_free_r+0x8a>
 80130a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130ac:	1f0c      	subs	r4, r1, #4
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	bfb8      	it	lt
 80130b2:	18e4      	addlt	r4, r4, r3
 80130b4:	f001 fc16 	bl	80148e4 <__malloc_lock>
 80130b8:	4a1c      	ldr	r2, [pc, #112]	; (801312c <_free_r+0x8c>)
 80130ba:	6813      	ldr	r3, [r2, #0]
 80130bc:	b933      	cbnz	r3, 80130cc <_free_r+0x2c>
 80130be:	6063      	str	r3, [r4, #4]
 80130c0:	6014      	str	r4, [r2, #0]
 80130c2:	4628      	mov	r0, r5
 80130c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130c8:	f001 bc12 	b.w	80148f0 <__malloc_unlock>
 80130cc:	42a3      	cmp	r3, r4
 80130ce:	d908      	bls.n	80130e2 <_free_r+0x42>
 80130d0:	6820      	ldr	r0, [r4, #0]
 80130d2:	1821      	adds	r1, r4, r0
 80130d4:	428b      	cmp	r3, r1
 80130d6:	bf01      	itttt	eq
 80130d8:	6819      	ldreq	r1, [r3, #0]
 80130da:	685b      	ldreq	r3, [r3, #4]
 80130dc:	1809      	addeq	r1, r1, r0
 80130de:	6021      	streq	r1, [r4, #0]
 80130e0:	e7ed      	b.n	80130be <_free_r+0x1e>
 80130e2:	461a      	mov	r2, r3
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	b10b      	cbz	r3, 80130ec <_free_r+0x4c>
 80130e8:	42a3      	cmp	r3, r4
 80130ea:	d9fa      	bls.n	80130e2 <_free_r+0x42>
 80130ec:	6811      	ldr	r1, [r2, #0]
 80130ee:	1850      	adds	r0, r2, r1
 80130f0:	42a0      	cmp	r0, r4
 80130f2:	d10b      	bne.n	801310c <_free_r+0x6c>
 80130f4:	6820      	ldr	r0, [r4, #0]
 80130f6:	4401      	add	r1, r0
 80130f8:	1850      	adds	r0, r2, r1
 80130fa:	4283      	cmp	r3, r0
 80130fc:	6011      	str	r1, [r2, #0]
 80130fe:	d1e0      	bne.n	80130c2 <_free_r+0x22>
 8013100:	6818      	ldr	r0, [r3, #0]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	4401      	add	r1, r0
 8013106:	6011      	str	r1, [r2, #0]
 8013108:	6053      	str	r3, [r2, #4]
 801310a:	e7da      	b.n	80130c2 <_free_r+0x22>
 801310c:	d902      	bls.n	8013114 <_free_r+0x74>
 801310e:	230c      	movs	r3, #12
 8013110:	602b      	str	r3, [r5, #0]
 8013112:	e7d6      	b.n	80130c2 <_free_r+0x22>
 8013114:	6820      	ldr	r0, [r4, #0]
 8013116:	1821      	adds	r1, r4, r0
 8013118:	428b      	cmp	r3, r1
 801311a:	bf01      	itttt	eq
 801311c:	6819      	ldreq	r1, [r3, #0]
 801311e:	685b      	ldreq	r3, [r3, #4]
 8013120:	1809      	addeq	r1, r1, r0
 8013122:	6021      	streq	r1, [r4, #0]
 8013124:	6063      	str	r3, [r4, #4]
 8013126:	6054      	str	r4, [r2, #4]
 8013128:	e7cb      	b.n	80130c2 <_free_r+0x22>
 801312a:	bd38      	pop	{r3, r4, r5, pc}
 801312c:	200016c0 	.word	0x200016c0

08013130 <sbrk_aligned>:
 8013130:	b570      	push	{r4, r5, r6, lr}
 8013132:	4e0e      	ldr	r6, [pc, #56]	; (801316c <sbrk_aligned+0x3c>)
 8013134:	460c      	mov	r4, r1
 8013136:	6831      	ldr	r1, [r6, #0]
 8013138:	4605      	mov	r5, r0
 801313a:	b911      	cbnz	r1, 8013142 <sbrk_aligned+0x12>
 801313c:	f000 fcec 	bl	8013b18 <_sbrk_r>
 8013140:	6030      	str	r0, [r6, #0]
 8013142:	4621      	mov	r1, r4
 8013144:	4628      	mov	r0, r5
 8013146:	f000 fce7 	bl	8013b18 <_sbrk_r>
 801314a:	1c43      	adds	r3, r0, #1
 801314c:	d00a      	beq.n	8013164 <sbrk_aligned+0x34>
 801314e:	1cc4      	adds	r4, r0, #3
 8013150:	f024 0403 	bic.w	r4, r4, #3
 8013154:	42a0      	cmp	r0, r4
 8013156:	d007      	beq.n	8013168 <sbrk_aligned+0x38>
 8013158:	1a21      	subs	r1, r4, r0
 801315a:	4628      	mov	r0, r5
 801315c:	f000 fcdc 	bl	8013b18 <_sbrk_r>
 8013160:	3001      	adds	r0, #1
 8013162:	d101      	bne.n	8013168 <sbrk_aligned+0x38>
 8013164:	f04f 34ff 	mov.w	r4, #4294967295
 8013168:	4620      	mov	r0, r4
 801316a:	bd70      	pop	{r4, r5, r6, pc}
 801316c:	200016c4 	.word	0x200016c4

08013170 <_malloc_r>:
 8013170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013174:	1ccd      	adds	r5, r1, #3
 8013176:	f025 0503 	bic.w	r5, r5, #3
 801317a:	3508      	adds	r5, #8
 801317c:	2d0c      	cmp	r5, #12
 801317e:	bf38      	it	cc
 8013180:	250c      	movcc	r5, #12
 8013182:	2d00      	cmp	r5, #0
 8013184:	4607      	mov	r7, r0
 8013186:	db01      	blt.n	801318c <_malloc_r+0x1c>
 8013188:	42a9      	cmp	r1, r5
 801318a:	d905      	bls.n	8013198 <_malloc_r+0x28>
 801318c:	230c      	movs	r3, #12
 801318e:	2600      	movs	r6, #0
 8013190:	603b      	str	r3, [r7, #0]
 8013192:	4630      	mov	r0, r6
 8013194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013198:	4e2e      	ldr	r6, [pc, #184]	; (8013254 <_malloc_r+0xe4>)
 801319a:	f001 fba3 	bl	80148e4 <__malloc_lock>
 801319e:	6833      	ldr	r3, [r6, #0]
 80131a0:	461c      	mov	r4, r3
 80131a2:	bb34      	cbnz	r4, 80131f2 <_malloc_r+0x82>
 80131a4:	4629      	mov	r1, r5
 80131a6:	4638      	mov	r0, r7
 80131a8:	f7ff ffc2 	bl	8013130 <sbrk_aligned>
 80131ac:	1c43      	adds	r3, r0, #1
 80131ae:	4604      	mov	r4, r0
 80131b0:	d14d      	bne.n	801324e <_malloc_r+0xde>
 80131b2:	6834      	ldr	r4, [r6, #0]
 80131b4:	4626      	mov	r6, r4
 80131b6:	2e00      	cmp	r6, #0
 80131b8:	d140      	bne.n	801323c <_malloc_r+0xcc>
 80131ba:	6823      	ldr	r3, [r4, #0]
 80131bc:	4631      	mov	r1, r6
 80131be:	4638      	mov	r0, r7
 80131c0:	eb04 0803 	add.w	r8, r4, r3
 80131c4:	f000 fca8 	bl	8013b18 <_sbrk_r>
 80131c8:	4580      	cmp	r8, r0
 80131ca:	d13a      	bne.n	8013242 <_malloc_r+0xd2>
 80131cc:	6821      	ldr	r1, [r4, #0]
 80131ce:	3503      	adds	r5, #3
 80131d0:	1a6d      	subs	r5, r5, r1
 80131d2:	f025 0503 	bic.w	r5, r5, #3
 80131d6:	3508      	adds	r5, #8
 80131d8:	2d0c      	cmp	r5, #12
 80131da:	bf38      	it	cc
 80131dc:	250c      	movcc	r5, #12
 80131de:	4638      	mov	r0, r7
 80131e0:	4629      	mov	r1, r5
 80131e2:	f7ff ffa5 	bl	8013130 <sbrk_aligned>
 80131e6:	3001      	adds	r0, #1
 80131e8:	d02b      	beq.n	8013242 <_malloc_r+0xd2>
 80131ea:	6823      	ldr	r3, [r4, #0]
 80131ec:	442b      	add	r3, r5
 80131ee:	6023      	str	r3, [r4, #0]
 80131f0:	e00e      	b.n	8013210 <_malloc_r+0xa0>
 80131f2:	6822      	ldr	r2, [r4, #0]
 80131f4:	1b52      	subs	r2, r2, r5
 80131f6:	d41e      	bmi.n	8013236 <_malloc_r+0xc6>
 80131f8:	2a0b      	cmp	r2, #11
 80131fa:	d916      	bls.n	801322a <_malloc_r+0xba>
 80131fc:	1961      	adds	r1, r4, r5
 80131fe:	42a3      	cmp	r3, r4
 8013200:	6025      	str	r5, [r4, #0]
 8013202:	bf18      	it	ne
 8013204:	6059      	strne	r1, [r3, #4]
 8013206:	6863      	ldr	r3, [r4, #4]
 8013208:	bf08      	it	eq
 801320a:	6031      	streq	r1, [r6, #0]
 801320c:	5162      	str	r2, [r4, r5]
 801320e:	604b      	str	r3, [r1, #4]
 8013210:	4638      	mov	r0, r7
 8013212:	f104 060b 	add.w	r6, r4, #11
 8013216:	f001 fb6b 	bl	80148f0 <__malloc_unlock>
 801321a:	f026 0607 	bic.w	r6, r6, #7
 801321e:	1d23      	adds	r3, r4, #4
 8013220:	1af2      	subs	r2, r6, r3
 8013222:	d0b6      	beq.n	8013192 <_malloc_r+0x22>
 8013224:	1b9b      	subs	r3, r3, r6
 8013226:	50a3      	str	r3, [r4, r2]
 8013228:	e7b3      	b.n	8013192 <_malloc_r+0x22>
 801322a:	6862      	ldr	r2, [r4, #4]
 801322c:	42a3      	cmp	r3, r4
 801322e:	bf0c      	ite	eq
 8013230:	6032      	streq	r2, [r6, #0]
 8013232:	605a      	strne	r2, [r3, #4]
 8013234:	e7ec      	b.n	8013210 <_malloc_r+0xa0>
 8013236:	4623      	mov	r3, r4
 8013238:	6864      	ldr	r4, [r4, #4]
 801323a:	e7b2      	b.n	80131a2 <_malloc_r+0x32>
 801323c:	4634      	mov	r4, r6
 801323e:	6876      	ldr	r6, [r6, #4]
 8013240:	e7b9      	b.n	80131b6 <_malloc_r+0x46>
 8013242:	230c      	movs	r3, #12
 8013244:	4638      	mov	r0, r7
 8013246:	603b      	str	r3, [r7, #0]
 8013248:	f001 fb52 	bl	80148f0 <__malloc_unlock>
 801324c:	e7a1      	b.n	8013192 <_malloc_r+0x22>
 801324e:	6025      	str	r5, [r4, #0]
 8013250:	e7de      	b.n	8013210 <_malloc_r+0xa0>
 8013252:	bf00      	nop
 8013254:	200016c0 	.word	0x200016c0

08013258 <__cvt>:
 8013258:	2b00      	cmp	r3, #0
 801325a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801325e:	461f      	mov	r7, r3
 8013260:	bfbb      	ittet	lt
 8013262:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8013266:	461f      	movlt	r7, r3
 8013268:	2300      	movge	r3, #0
 801326a:	232d      	movlt	r3, #45	; 0x2d
 801326c:	b088      	sub	sp, #32
 801326e:	4614      	mov	r4, r2
 8013270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013272:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8013274:	7013      	strb	r3, [r2, #0]
 8013276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013278:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801327c:	f023 0820 	bic.w	r8, r3, #32
 8013280:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013284:	d005      	beq.n	8013292 <__cvt+0x3a>
 8013286:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801328a:	d100      	bne.n	801328e <__cvt+0x36>
 801328c:	3501      	adds	r5, #1
 801328e:	2302      	movs	r3, #2
 8013290:	e000      	b.n	8013294 <__cvt+0x3c>
 8013292:	2303      	movs	r3, #3
 8013294:	aa07      	add	r2, sp, #28
 8013296:	9204      	str	r2, [sp, #16]
 8013298:	aa06      	add	r2, sp, #24
 801329a:	e9cd a202 	strd	sl, r2, [sp, #8]
 801329e:	e9cd 3500 	strd	r3, r5, [sp]
 80132a2:	4622      	mov	r2, r4
 80132a4:	463b      	mov	r3, r7
 80132a6:	f000 fd0f 	bl	8013cc8 <_dtoa_r>
 80132aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80132ae:	4606      	mov	r6, r0
 80132b0:	d102      	bne.n	80132b8 <__cvt+0x60>
 80132b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80132b4:	07db      	lsls	r3, r3, #31
 80132b6:	d522      	bpl.n	80132fe <__cvt+0xa6>
 80132b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80132bc:	eb06 0905 	add.w	r9, r6, r5
 80132c0:	d110      	bne.n	80132e4 <__cvt+0x8c>
 80132c2:	7833      	ldrb	r3, [r6, #0]
 80132c4:	2b30      	cmp	r3, #48	; 0x30
 80132c6:	d10a      	bne.n	80132de <__cvt+0x86>
 80132c8:	2200      	movs	r2, #0
 80132ca:	2300      	movs	r3, #0
 80132cc:	4620      	mov	r0, r4
 80132ce:	4639      	mov	r1, r7
 80132d0:	f7ed fbd6 	bl	8000a80 <__aeabi_dcmpeq>
 80132d4:	b918      	cbnz	r0, 80132de <__cvt+0x86>
 80132d6:	f1c5 0501 	rsb	r5, r5, #1
 80132da:	f8ca 5000 	str.w	r5, [sl]
 80132de:	f8da 3000 	ldr.w	r3, [sl]
 80132e2:	4499      	add	r9, r3
 80132e4:	2200      	movs	r2, #0
 80132e6:	2300      	movs	r3, #0
 80132e8:	4620      	mov	r0, r4
 80132ea:	4639      	mov	r1, r7
 80132ec:	f7ed fbc8 	bl	8000a80 <__aeabi_dcmpeq>
 80132f0:	b108      	cbz	r0, 80132f6 <__cvt+0x9e>
 80132f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80132f6:	2230      	movs	r2, #48	; 0x30
 80132f8:	9b07      	ldr	r3, [sp, #28]
 80132fa:	454b      	cmp	r3, r9
 80132fc:	d307      	bcc.n	801330e <__cvt+0xb6>
 80132fe:	4630      	mov	r0, r6
 8013300:	9b07      	ldr	r3, [sp, #28]
 8013302:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013304:	1b9b      	subs	r3, r3, r6
 8013306:	6013      	str	r3, [r2, #0]
 8013308:	b008      	add	sp, #32
 801330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801330e:	1c59      	adds	r1, r3, #1
 8013310:	9107      	str	r1, [sp, #28]
 8013312:	701a      	strb	r2, [r3, #0]
 8013314:	e7f0      	b.n	80132f8 <__cvt+0xa0>

08013316 <__exponent>:
 8013316:	4603      	mov	r3, r0
 8013318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801331a:	2900      	cmp	r1, #0
 801331c:	f803 2b02 	strb.w	r2, [r3], #2
 8013320:	bfb6      	itet	lt
 8013322:	222d      	movlt	r2, #45	; 0x2d
 8013324:	222b      	movge	r2, #43	; 0x2b
 8013326:	4249      	neglt	r1, r1
 8013328:	2909      	cmp	r1, #9
 801332a:	7042      	strb	r2, [r0, #1]
 801332c:	dd2b      	ble.n	8013386 <__exponent+0x70>
 801332e:	f10d 0407 	add.w	r4, sp, #7
 8013332:	46a4      	mov	ip, r4
 8013334:	270a      	movs	r7, #10
 8013336:	fb91 f6f7 	sdiv	r6, r1, r7
 801333a:	460a      	mov	r2, r1
 801333c:	46a6      	mov	lr, r4
 801333e:	fb07 1516 	mls	r5, r7, r6, r1
 8013342:	2a63      	cmp	r2, #99	; 0x63
 8013344:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8013348:	4631      	mov	r1, r6
 801334a:	f104 34ff 	add.w	r4, r4, #4294967295
 801334e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013352:	dcf0      	bgt.n	8013336 <__exponent+0x20>
 8013354:	3130      	adds	r1, #48	; 0x30
 8013356:	f1ae 0502 	sub.w	r5, lr, #2
 801335a:	f804 1c01 	strb.w	r1, [r4, #-1]
 801335e:	4629      	mov	r1, r5
 8013360:	1c44      	adds	r4, r0, #1
 8013362:	4561      	cmp	r1, ip
 8013364:	d30a      	bcc.n	801337c <__exponent+0x66>
 8013366:	f10d 0209 	add.w	r2, sp, #9
 801336a:	eba2 020e 	sub.w	r2, r2, lr
 801336e:	4565      	cmp	r5, ip
 8013370:	bf88      	it	hi
 8013372:	2200      	movhi	r2, #0
 8013374:	4413      	add	r3, r2
 8013376:	1a18      	subs	r0, r3, r0
 8013378:	b003      	add	sp, #12
 801337a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801337c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013380:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013384:	e7ed      	b.n	8013362 <__exponent+0x4c>
 8013386:	2330      	movs	r3, #48	; 0x30
 8013388:	3130      	adds	r1, #48	; 0x30
 801338a:	7083      	strb	r3, [r0, #2]
 801338c:	70c1      	strb	r1, [r0, #3]
 801338e:	1d03      	adds	r3, r0, #4
 8013390:	e7f1      	b.n	8013376 <__exponent+0x60>
	...

08013394 <_printf_float>:
 8013394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013398:	b091      	sub	sp, #68	; 0x44
 801339a:	460c      	mov	r4, r1
 801339c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80133a0:	4616      	mov	r6, r2
 80133a2:	461f      	mov	r7, r3
 80133a4:	4605      	mov	r5, r0
 80133a6:	f001 fa7d 	bl	80148a4 <_localeconv_r>
 80133aa:	6803      	ldr	r3, [r0, #0]
 80133ac:	4618      	mov	r0, r3
 80133ae:	9309      	str	r3, [sp, #36]	; 0x24
 80133b0:	f7ec ff3a 	bl	8000228 <strlen>
 80133b4:	2300      	movs	r3, #0
 80133b6:	930e      	str	r3, [sp, #56]	; 0x38
 80133b8:	f8d8 3000 	ldr.w	r3, [r8]
 80133bc:	900a      	str	r0, [sp, #40]	; 0x28
 80133be:	3307      	adds	r3, #7
 80133c0:	f023 0307 	bic.w	r3, r3, #7
 80133c4:	f103 0208 	add.w	r2, r3, #8
 80133c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80133cc:	f8d4 b000 	ldr.w	fp, [r4]
 80133d0:	f8c8 2000 	str.w	r2, [r8]
 80133d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80133dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80133e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80133e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80133e6:	f04f 32ff 	mov.w	r2, #4294967295
 80133ea:	4640      	mov	r0, r8
 80133ec:	4b9c      	ldr	r3, [pc, #624]	; (8013660 <_printf_float+0x2cc>)
 80133ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80133f0:	f7ed fb78 	bl	8000ae4 <__aeabi_dcmpun>
 80133f4:	bb70      	cbnz	r0, 8013454 <_printf_float+0xc0>
 80133f6:	f04f 32ff 	mov.w	r2, #4294967295
 80133fa:	4640      	mov	r0, r8
 80133fc:	4b98      	ldr	r3, [pc, #608]	; (8013660 <_printf_float+0x2cc>)
 80133fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013400:	f7ed fb52 	bl	8000aa8 <__aeabi_dcmple>
 8013404:	bb30      	cbnz	r0, 8013454 <_printf_float+0xc0>
 8013406:	2200      	movs	r2, #0
 8013408:	2300      	movs	r3, #0
 801340a:	4640      	mov	r0, r8
 801340c:	4651      	mov	r1, sl
 801340e:	f7ed fb41 	bl	8000a94 <__aeabi_dcmplt>
 8013412:	b110      	cbz	r0, 801341a <_printf_float+0x86>
 8013414:	232d      	movs	r3, #45	; 0x2d
 8013416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801341a:	4b92      	ldr	r3, [pc, #584]	; (8013664 <_printf_float+0x2d0>)
 801341c:	4892      	ldr	r0, [pc, #584]	; (8013668 <_printf_float+0x2d4>)
 801341e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013422:	bf94      	ite	ls
 8013424:	4698      	movls	r8, r3
 8013426:	4680      	movhi	r8, r0
 8013428:	2303      	movs	r3, #3
 801342a:	f04f 0a00 	mov.w	sl, #0
 801342e:	6123      	str	r3, [r4, #16]
 8013430:	f02b 0304 	bic.w	r3, fp, #4
 8013434:	6023      	str	r3, [r4, #0]
 8013436:	4633      	mov	r3, r6
 8013438:	4621      	mov	r1, r4
 801343a:	4628      	mov	r0, r5
 801343c:	9700      	str	r7, [sp, #0]
 801343e:	aa0f      	add	r2, sp, #60	; 0x3c
 8013440:	f000 f9d4 	bl	80137ec <_printf_common>
 8013444:	3001      	adds	r0, #1
 8013446:	f040 8090 	bne.w	801356a <_printf_float+0x1d6>
 801344a:	f04f 30ff 	mov.w	r0, #4294967295
 801344e:	b011      	add	sp, #68	; 0x44
 8013450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013454:	4642      	mov	r2, r8
 8013456:	4653      	mov	r3, sl
 8013458:	4640      	mov	r0, r8
 801345a:	4651      	mov	r1, sl
 801345c:	f7ed fb42 	bl	8000ae4 <__aeabi_dcmpun>
 8013460:	b148      	cbz	r0, 8013476 <_printf_float+0xe2>
 8013462:	f1ba 0f00 	cmp.w	sl, #0
 8013466:	bfb8      	it	lt
 8013468:	232d      	movlt	r3, #45	; 0x2d
 801346a:	4880      	ldr	r0, [pc, #512]	; (801366c <_printf_float+0x2d8>)
 801346c:	bfb8      	it	lt
 801346e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013472:	4b7f      	ldr	r3, [pc, #508]	; (8013670 <_printf_float+0x2dc>)
 8013474:	e7d3      	b.n	801341e <_printf_float+0x8a>
 8013476:	6863      	ldr	r3, [r4, #4]
 8013478:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801347c:	1c5a      	adds	r2, r3, #1
 801347e:	d142      	bne.n	8013506 <_printf_float+0x172>
 8013480:	2306      	movs	r3, #6
 8013482:	6063      	str	r3, [r4, #4]
 8013484:	2200      	movs	r2, #0
 8013486:	9206      	str	r2, [sp, #24]
 8013488:	aa0e      	add	r2, sp, #56	; 0x38
 801348a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801348e:	aa0d      	add	r2, sp, #52	; 0x34
 8013490:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8013494:	9203      	str	r2, [sp, #12]
 8013496:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801349a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801349e:	6023      	str	r3, [r4, #0]
 80134a0:	6863      	ldr	r3, [r4, #4]
 80134a2:	4642      	mov	r2, r8
 80134a4:	9300      	str	r3, [sp, #0]
 80134a6:	4628      	mov	r0, r5
 80134a8:	4653      	mov	r3, sl
 80134aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80134ac:	f7ff fed4 	bl	8013258 <__cvt>
 80134b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80134b2:	4680      	mov	r8, r0
 80134b4:	2947      	cmp	r1, #71	; 0x47
 80134b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80134b8:	d108      	bne.n	80134cc <_printf_float+0x138>
 80134ba:	1cc8      	adds	r0, r1, #3
 80134bc:	db02      	blt.n	80134c4 <_printf_float+0x130>
 80134be:	6863      	ldr	r3, [r4, #4]
 80134c0:	4299      	cmp	r1, r3
 80134c2:	dd40      	ble.n	8013546 <_printf_float+0x1b2>
 80134c4:	f1a9 0902 	sub.w	r9, r9, #2
 80134c8:	fa5f f989 	uxtb.w	r9, r9
 80134cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80134d0:	d81f      	bhi.n	8013512 <_printf_float+0x17e>
 80134d2:	464a      	mov	r2, r9
 80134d4:	3901      	subs	r1, #1
 80134d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80134da:	910d      	str	r1, [sp, #52]	; 0x34
 80134dc:	f7ff ff1b 	bl	8013316 <__exponent>
 80134e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80134e2:	4682      	mov	sl, r0
 80134e4:	1813      	adds	r3, r2, r0
 80134e6:	2a01      	cmp	r2, #1
 80134e8:	6123      	str	r3, [r4, #16]
 80134ea:	dc02      	bgt.n	80134f2 <_printf_float+0x15e>
 80134ec:	6822      	ldr	r2, [r4, #0]
 80134ee:	07d2      	lsls	r2, r2, #31
 80134f0:	d501      	bpl.n	80134f6 <_printf_float+0x162>
 80134f2:	3301      	adds	r3, #1
 80134f4:	6123      	str	r3, [r4, #16]
 80134f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d09b      	beq.n	8013436 <_printf_float+0xa2>
 80134fe:	232d      	movs	r3, #45	; 0x2d
 8013500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013504:	e797      	b.n	8013436 <_printf_float+0xa2>
 8013506:	2947      	cmp	r1, #71	; 0x47
 8013508:	d1bc      	bne.n	8013484 <_printf_float+0xf0>
 801350a:	2b00      	cmp	r3, #0
 801350c:	d1ba      	bne.n	8013484 <_printf_float+0xf0>
 801350e:	2301      	movs	r3, #1
 8013510:	e7b7      	b.n	8013482 <_printf_float+0xee>
 8013512:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013516:	d118      	bne.n	801354a <_printf_float+0x1b6>
 8013518:	2900      	cmp	r1, #0
 801351a:	6863      	ldr	r3, [r4, #4]
 801351c:	dd0b      	ble.n	8013536 <_printf_float+0x1a2>
 801351e:	6121      	str	r1, [r4, #16]
 8013520:	b913      	cbnz	r3, 8013528 <_printf_float+0x194>
 8013522:	6822      	ldr	r2, [r4, #0]
 8013524:	07d0      	lsls	r0, r2, #31
 8013526:	d502      	bpl.n	801352e <_printf_float+0x19a>
 8013528:	3301      	adds	r3, #1
 801352a:	440b      	add	r3, r1
 801352c:	6123      	str	r3, [r4, #16]
 801352e:	f04f 0a00 	mov.w	sl, #0
 8013532:	65a1      	str	r1, [r4, #88]	; 0x58
 8013534:	e7df      	b.n	80134f6 <_printf_float+0x162>
 8013536:	b913      	cbnz	r3, 801353e <_printf_float+0x1aa>
 8013538:	6822      	ldr	r2, [r4, #0]
 801353a:	07d2      	lsls	r2, r2, #31
 801353c:	d501      	bpl.n	8013542 <_printf_float+0x1ae>
 801353e:	3302      	adds	r3, #2
 8013540:	e7f4      	b.n	801352c <_printf_float+0x198>
 8013542:	2301      	movs	r3, #1
 8013544:	e7f2      	b.n	801352c <_printf_float+0x198>
 8013546:	f04f 0967 	mov.w	r9, #103	; 0x67
 801354a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801354c:	4299      	cmp	r1, r3
 801354e:	db05      	blt.n	801355c <_printf_float+0x1c8>
 8013550:	6823      	ldr	r3, [r4, #0]
 8013552:	6121      	str	r1, [r4, #16]
 8013554:	07d8      	lsls	r0, r3, #31
 8013556:	d5ea      	bpl.n	801352e <_printf_float+0x19a>
 8013558:	1c4b      	adds	r3, r1, #1
 801355a:	e7e7      	b.n	801352c <_printf_float+0x198>
 801355c:	2900      	cmp	r1, #0
 801355e:	bfcc      	ite	gt
 8013560:	2201      	movgt	r2, #1
 8013562:	f1c1 0202 	rsble	r2, r1, #2
 8013566:	4413      	add	r3, r2
 8013568:	e7e0      	b.n	801352c <_printf_float+0x198>
 801356a:	6823      	ldr	r3, [r4, #0]
 801356c:	055a      	lsls	r2, r3, #21
 801356e:	d407      	bmi.n	8013580 <_printf_float+0x1ec>
 8013570:	6923      	ldr	r3, [r4, #16]
 8013572:	4642      	mov	r2, r8
 8013574:	4631      	mov	r1, r6
 8013576:	4628      	mov	r0, r5
 8013578:	47b8      	blx	r7
 801357a:	3001      	adds	r0, #1
 801357c:	d12b      	bne.n	80135d6 <_printf_float+0x242>
 801357e:	e764      	b.n	801344a <_printf_float+0xb6>
 8013580:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013584:	f240 80dd 	bls.w	8013742 <_printf_float+0x3ae>
 8013588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801358c:	2200      	movs	r2, #0
 801358e:	2300      	movs	r3, #0
 8013590:	f7ed fa76 	bl	8000a80 <__aeabi_dcmpeq>
 8013594:	2800      	cmp	r0, #0
 8013596:	d033      	beq.n	8013600 <_printf_float+0x26c>
 8013598:	2301      	movs	r3, #1
 801359a:	4631      	mov	r1, r6
 801359c:	4628      	mov	r0, r5
 801359e:	4a35      	ldr	r2, [pc, #212]	; (8013674 <_printf_float+0x2e0>)
 80135a0:	47b8      	blx	r7
 80135a2:	3001      	adds	r0, #1
 80135a4:	f43f af51 	beq.w	801344a <_printf_float+0xb6>
 80135a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80135ac:	429a      	cmp	r2, r3
 80135ae:	db02      	blt.n	80135b6 <_printf_float+0x222>
 80135b0:	6823      	ldr	r3, [r4, #0]
 80135b2:	07d8      	lsls	r0, r3, #31
 80135b4:	d50f      	bpl.n	80135d6 <_printf_float+0x242>
 80135b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135ba:	4631      	mov	r1, r6
 80135bc:	4628      	mov	r0, r5
 80135be:	47b8      	blx	r7
 80135c0:	3001      	adds	r0, #1
 80135c2:	f43f af42 	beq.w	801344a <_printf_float+0xb6>
 80135c6:	f04f 0800 	mov.w	r8, #0
 80135ca:	f104 091a 	add.w	r9, r4, #26
 80135ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135d0:	3b01      	subs	r3, #1
 80135d2:	4543      	cmp	r3, r8
 80135d4:	dc09      	bgt.n	80135ea <_printf_float+0x256>
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	079b      	lsls	r3, r3, #30
 80135da:	f100 8102 	bmi.w	80137e2 <_printf_float+0x44e>
 80135de:	68e0      	ldr	r0, [r4, #12]
 80135e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135e2:	4298      	cmp	r0, r3
 80135e4:	bfb8      	it	lt
 80135e6:	4618      	movlt	r0, r3
 80135e8:	e731      	b.n	801344e <_printf_float+0xba>
 80135ea:	2301      	movs	r3, #1
 80135ec:	464a      	mov	r2, r9
 80135ee:	4631      	mov	r1, r6
 80135f0:	4628      	mov	r0, r5
 80135f2:	47b8      	blx	r7
 80135f4:	3001      	adds	r0, #1
 80135f6:	f43f af28 	beq.w	801344a <_printf_float+0xb6>
 80135fa:	f108 0801 	add.w	r8, r8, #1
 80135fe:	e7e6      	b.n	80135ce <_printf_float+0x23a>
 8013600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013602:	2b00      	cmp	r3, #0
 8013604:	dc38      	bgt.n	8013678 <_printf_float+0x2e4>
 8013606:	2301      	movs	r3, #1
 8013608:	4631      	mov	r1, r6
 801360a:	4628      	mov	r0, r5
 801360c:	4a19      	ldr	r2, [pc, #100]	; (8013674 <_printf_float+0x2e0>)
 801360e:	47b8      	blx	r7
 8013610:	3001      	adds	r0, #1
 8013612:	f43f af1a 	beq.w	801344a <_printf_float+0xb6>
 8013616:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801361a:	4313      	orrs	r3, r2
 801361c:	d102      	bne.n	8013624 <_printf_float+0x290>
 801361e:	6823      	ldr	r3, [r4, #0]
 8013620:	07d9      	lsls	r1, r3, #31
 8013622:	d5d8      	bpl.n	80135d6 <_printf_float+0x242>
 8013624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013628:	4631      	mov	r1, r6
 801362a:	4628      	mov	r0, r5
 801362c:	47b8      	blx	r7
 801362e:	3001      	adds	r0, #1
 8013630:	f43f af0b 	beq.w	801344a <_printf_float+0xb6>
 8013634:	f04f 0900 	mov.w	r9, #0
 8013638:	f104 0a1a 	add.w	sl, r4, #26
 801363c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801363e:	425b      	negs	r3, r3
 8013640:	454b      	cmp	r3, r9
 8013642:	dc01      	bgt.n	8013648 <_printf_float+0x2b4>
 8013644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013646:	e794      	b.n	8013572 <_printf_float+0x1de>
 8013648:	2301      	movs	r3, #1
 801364a:	4652      	mov	r2, sl
 801364c:	4631      	mov	r1, r6
 801364e:	4628      	mov	r0, r5
 8013650:	47b8      	blx	r7
 8013652:	3001      	adds	r0, #1
 8013654:	f43f aef9 	beq.w	801344a <_printf_float+0xb6>
 8013658:	f109 0901 	add.w	r9, r9, #1
 801365c:	e7ee      	b.n	801363c <_printf_float+0x2a8>
 801365e:	bf00      	nop
 8013660:	7fefffff 	.word	0x7fefffff
 8013664:	0802f52c 	.word	0x0802f52c
 8013668:	0802f530 	.word	0x0802f530
 801366c:	0802f538 	.word	0x0802f538
 8013670:	0802f534 	.word	0x0802f534
 8013674:	0802f53c 	.word	0x0802f53c
 8013678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801367a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801367c:	429a      	cmp	r2, r3
 801367e:	bfa8      	it	ge
 8013680:	461a      	movge	r2, r3
 8013682:	2a00      	cmp	r2, #0
 8013684:	4691      	mov	r9, r2
 8013686:	dc37      	bgt.n	80136f8 <_printf_float+0x364>
 8013688:	f04f 0b00 	mov.w	fp, #0
 801368c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013690:	f104 021a 	add.w	r2, r4, #26
 8013694:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013698:	ebaa 0309 	sub.w	r3, sl, r9
 801369c:	455b      	cmp	r3, fp
 801369e:	dc33      	bgt.n	8013708 <_printf_float+0x374>
 80136a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80136a4:	429a      	cmp	r2, r3
 80136a6:	db3b      	blt.n	8013720 <_printf_float+0x38c>
 80136a8:	6823      	ldr	r3, [r4, #0]
 80136aa:	07da      	lsls	r2, r3, #31
 80136ac:	d438      	bmi.n	8013720 <_printf_float+0x38c>
 80136ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80136b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80136b2:	eba3 020a 	sub.w	r2, r3, sl
 80136b6:	eba3 0901 	sub.w	r9, r3, r1
 80136ba:	4591      	cmp	r9, r2
 80136bc:	bfa8      	it	ge
 80136be:	4691      	movge	r9, r2
 80136c0:	f1b9 0f00 	cmp.w	r9, #0
 80136c4:	dc34      	bgt.n	8013730 <_printf_float+0x39c>
 80136c6:	f04f 0800 	mov.w	r8, #0
 80136ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80136ce:	f104 0a1a 	add.w	sl, r4, #26
 80136d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80136d6:	1a9b      	subs	r3, r3, r2
 80136d8:	eba3 0309 	sub.w	r3, r3, r9
 80136dc:	4543      	cmp	r3, r8
 80136de:	f77f af7a 	ble.w	80135d6 <_printf_float+0x242>
 80136e2:	2301      	movs	r3, #1
 80136e4:	4652      	mov	r2, sl
 80136e6:	4631      	mov	r1, r6
 80136e8:	4628      	mov	r0, r5
 80136ea:	47b8      	blx	r7
 80136ec:	3001      	adds	r0, #1
 80136ee:	f43f aeac 	beq.w	801344a <_printf_float+0xb6>
 80136f2:	f108 0801 	add.w	r8, r8, #1
 80136f6:	e7ec      	b.n	80136d2 <_printf_float+0x33e>
 80136f8:	4613      	mov	r3, r2
 80136fa:	4631      	mov	r1, r6
 80136fc:	4642      	mov	r2, r8
 80136fe:	4628      	mov	r0, r5
 8013700:	47b8      	blx	r7
 8013702:	3001      	adds	r0, #1
 8013704:	d1c0      	bne.n	8013688 <_printf_float+0x2f4>
 8013706:	e6a0      	b.n	801344a <_printf_float+0xb6>
 8013708:	2301      	movs	r3, #1
 801370a:	4631      	mov	r1, r6
 801370c:	4628      	mov	r0, r5
 801370e:	920b      	str	r2, [sp, #44]	; 0x2c
 8013710:	47b8      	blx	r7
 8013712:	3001      	adds	r0, #1
 8013714:	f43f ae99 	beq.w	801344a <_printf_float+0xb6>
 8013718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801371a:	f10b 0b01 	add.w	fp, fp, #1
 801371e:	e7b9      	b.n	8013694 <_printf_float+0x300>
 8013720:	4631      	mov	r1, r6
 8013722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013726:	4628      	mov	r0, r5
 8013728:	47b8      	blx	r7
 801372a:	3001      	adds	r0, #1
 801372c:	d1bf      	bne.n	80136ae <_printf_float+0x31a>
 801372e:	e68c      	b.n	801344a <_printf_float+0xb6>
 8013730:	464b      	mov	r3, r9
 8013732:	4631      	mov	r1, r6
 8013734:	4628      	mov	r0, r5
 8013736:	eb08 020a 	add.w	r2, r8, sl
 801373a:	47b8      	blx	r7
 801373c:	3001      	adds	r0, #1
 801373e:	d1c2      	bne.n	80136c6 <_printf_float+0x332>
 8013740:	e683      	b.n	801344a <_printf_float+0xb6>
 8013742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013744:	2a01      	cmp	r2, #1
 8013746:	dc01      	bgt.n	801374c <_printf_float+0x3b8>
 8013748:	07db      	lsls	r3, r3, #31
 801374a:	d537      	bpl.n	80137bc <_printf_float+0x428>
 801374c:	2301      	movs	r3, #1
 801374e:	4642      	mov	r2, r8
 8013750:	4631      	mov	r1, r6
 8013752:	4628      	mov	r0, r5
 8013754:	47b8      	blx	r7
 8013756:	3001      	adds	r0, #1
 8013758:	f43f ae77 	beq.w	801344a <_printf_float+0xb6>
 801375c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013760:	4631      	mov	r1, r6
 8013762:	4628      	mov	r0, r5
 8013764:	47b8      	blx	r7
 8013766:	3001      	adds	r0, #1
 8013768:	f43f ae6f 	beq.w	801344a <_printf_float+0xb6>
 801376c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013770:	2200      	movs	r2, #0
 8013772:	2300      	movs	r3, #0
 8013774:	f7ed f984 	bl	8000a80 <__aeabi_dcmpeq>
 8013778:	b9d8      	cbnz	r0, 80137b2 <_printf_float+0x41e>
 801377a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801377c:	f108 0201 	add.w	r2, r8, #1
 8013780:	3b01      	subs	r3, #1
 8013782:	4631      	mov	r1, r6
 8013784:	4628      	mov	r0, r5
 8013786:	47b8      	blx	r7
 8013788:	3001      	adds	r0, #1
 801378a:	d10e      	bne.n	80137aa <_printf_float+0x416>
 801378c:	e65d      	b.n	801344a <_printf_float+0xb6>
 801378e:	2301      	movs	r3, #1
 8013790:	464a      	mov	r2, r9
 8013792:	4631      	mov	r1, r6
 8013794:	4628      	mov	r0, r5
 8013796:	47b8      	blx	r7
 8013798:	3001      	adds	r0, #1
 801379a:	f43f ae56 	beq.w	801344a <_printf_float+0xb6>
 801379e:	f108 0801 	add.w	r8, r8, #1
 80137a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137a4:	3b01      	subs	r3, #1
 80137a6:	4543      	cmp	r3, r8
 80137a8:	dcf1      	bgt.n	801378e <_printf_float+0x3fa>
 80137aa:	4653      	mov	r3, sl
 80137ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80137b0:	e6e0      	b.n	8013574 <_printf_float+0x1e0>
 80137b2:	f04f 0800 	mov.w	r8, #0
 80137b6:	f104 091a 	add.w	r9, r4, #26
 80137ba:	e7f2      	b.n	80137a2 <_printf_float+0x40e>
 80137bc:	2301      	movs	r3, #1
 80137be:	4642      	mov	r2, r8
 80137c0:	e7df      	b.n	8013782 <_printf_float+0x3ee>
 80137c2:	2301      	movs	r3, #1
 80137c4:	464a      	mov	r2, r9
 80137c6:	4631      	mov	r1, r6
 80137c8:	4628      	mov	r0, r5
 80137ca:	47b8      	blx	r7
 80137cc:	3001      	adds	r0, #1
 80137ce:	f43f ae3c 	beq.w	801344a <_printf_float+0xb6>
 80137d2:	f108 0801 	add.w	r8, r8, #1
 80137d6:	68e3      	ldr	r3, [r4, #12]
 80137d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80137da:	1a5b      	subs	r3, r3, r1
 80137dc:	4543      	cmp	r3, r8
 80137de:	dcf0      	bgt.n	80137c2 <_printf_float+0x42e>
 80137e0:	e6fd      	b.n	80135de <_printf_float+0x24a>
 80137e2:	f04f 0800 	mov.w	r8, #0
 80137e6:	f104 0919 	add.w	r9, r4, #25
 80137ea:	e7f4      	b.n	80137d6 <_printf_float+0x442>

080137ec <_printf_common>:
 80137ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137f0:	4616      	mov	r6, r2
 80137f2:	4699      	mov	r9, r3
 80137f4:	688a      	ldr	r2, [r1, #8]
 80137f6:	690b      	ldr	r3, [r1, #16]
 80137f8:	4607      	mov	r7, r0
 80137fa:	4293      	cmp	r3, r2
 80137fc:	bfb8      	it	lt
 80137fe:	4613      	movlt	r3, r2
 8013800:	6033      	str	r3, [r6, #0]
 8013802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013806:	460c      	mov	r4, r1
 8013808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801380c:	b10a      	cbz	r2, 8013812 <_printf_common+0x26>
 801380e:	3301      	adds	r3, #1
 8013810:	6033      	str	r3, [r6, #0]
 8013812:	6823      	ldr	r3, [r4, #0]
 8013814:	0699      	lsls	r1, r3, #26
 8013816:	bf42      	ittt	mi
 8013818:	6833      	ldrmi	r3, [r6, #0]
 801381a:	3302      	addmi	r3, #2
 801381c:	6033      	strmi	r3, [r6, #0]
 801381e:	6825      	ldr	r5, [r4, #0]
 8013820:	f015 0506 	ands.w	r5, r5, #6
 8013824:	d106      	bne.n	8013834 <_printf_common+0x48>
 8013826:	f104 0a19 	add.w	sl, r4, #25
 801382a:	68e3      	ldr	r3, [r4, #12]
 801382c:	6832      	ldr	r2, [r6, #0]
 801382e:	1a9b      	subs	r3, r3, r2
 8013830:	42ab      	cmp	r3, r5
 8013832:	dc28      	bgt.n	8013886 <_printf_common+0x9a>
 8013834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013838:	1e13      	subs	r3, r2, #0
 801383a:	6822      	ldr	r2, [r4, #0]
 801383c:	bf18      	it	ne
 801383e:	2301      	movne	r3, #1
 8013840:	0692      	lsls	r2, r2, #26
 8013842:	d42d      	bmi.n	80138a0 <_printf_common+0xb4>
 8013844:	4649      	mov	r1, r9
 8013846:	4638      	mov	r0, r7
 8013848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801384c:	47c0      	blx	r8
 801384e:	3001      	adds	r0, #1
 8013850:	d020      	beq.n	8013894 <_printf_common+0xa8>
 8013852:	6823      	ldr	r3, [r4, #0]
 8013854:	68e5      	ldr	r5, [r4, #12]
 8013856:	f003 0306 	and.w	r3, r3, #6
 801385a:	2b04      	cmp	r3, #4
 801385c:	bf18      	it	ne
 801385e:	2500      	movne	r5, #0
 8013860:	6832      	ldr	r2, [r6, #0]
 8013862:	f04f 0600 	mov.w	r6, #0
 8013866:	68a3      	ldr	r3, [r4, #8]
 8013868:	bf08      	it	eq
 801386a:	1aad      	subeq	r5, r5, r2
 801386c:	6922      	ldr	r2, [r4, #16]
 801386e:	bf08      	it	eq
 8013870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013874:	4293      	cmp	r3, r2
 8013876:	bfc4      	itt	gt
 8013878:	1a9b      	subgt	r3, r3, r2
 801387a:	18ed      	addgt	r5, r5, r3
 801387c:	341a      	adds	r4, #26
 801387e:	42b5      	cmp	r5, r6
 8013880:	d11a      	bne.n	80138b8 <_printf_common+0xcc>
 8013882:	2000      	movs	r0, #0
 8013884:	e008      	b.n	8013898 <_printf_common+0xac>
 8013886:	2301      	movs	r3, #1
 8013888:	4652      	mov	r2, sl
 801388a:	4649      	mov	r1, r9
 801388c:	4638      	mov	r0, r7
 801388e:	47c0      	blx	r8
 8013890:	3001      	adds	r0, #1
 8013892:	d103      	bne.n	801389c <_printf_common+0xb0>
 8013894:	f04f 30ff 	mov.w	r0, #4294967295
 8013898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801389c:	3501      	adds	r5, #1
 801389e:	e7c4      	b.n	801382a <_printf_common+0x3e>
 80138a0:	2030      	movs	r0, #48	; 0x30
 80138a2:	18e1      	adds	r1, r4, r3
 80138a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80138a8:	1c5a      	adds	r2, r3, #1
 80138aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138ae:	4422      	add	r2, r4
 80138b0:	3302      	adds	r3, #2
 80138b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138b6:	e7c5      	b.n	8013844 <_printf_common+0x58>
 80138b8:	2301      	movs	r3, #1
 80138ba:	4622      	mov	r2, r4
 80138bc:	4649      	mov	r1, r9
 80138be:	4638      	mov	r0, r7
 80138c0:	47c0      	blx	r8
 80138c2:	3001      	adds	r0, #1
 80138c4:	d0e6      	beq.n	8013894 <_printf_common+0xa8>
 80138c6:	3601      	adds	r6, #1
 80138c8:	e7d9      	b.n	801387e <_printf_common+0x92>
	...

080138cc <_printf_i>:
 80138cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138d0:	7e0f      	ldrb	r7, [r1, #24]
 80138d2:	4691      	mov	r9, r2
 80138d4:	2f78      	cmp	r7, #120	; 0x78
 80138d6:	4680      	mov	r8, r0
 80138d8:	460c      	mov	r4, r1
 80138da:	469a      	mov	sl, r3
 80138dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80138de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80138e2:	d807      	bhi.n	80138f4 <_printf_i+0x28>
 80138e4:	2f62      	cmp	r7, #98	; 0x62
 80138e6:	d80a      	bhi.n	80138fe <_printf_i+0x32>
 80138e8:	2f00      	cmp	r7, #0
 80138ea:	f000 80d9 	beq.w	8013aa0 <_printf_i+0x1d4>
 80138ee:	2f58      	cmp	r7, #88	; 0x58
 80138f0:	f000 80a4 	beq.w	8013a3c <_printf_i+0x170>
 80138f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80138fc:	e03a      	b.n	8013974 <_printf_i+0xa8>
 80138fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013902:	2b15      	cmp	r3, #21
 8013904:	d8f6      	bhi.n	80138f4 <_printf_i+0x28>
 8013906:	a101      	add	r1, pc, #4	; (adr r1, 801390c <_printf_i+0x40>)
 8013908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801390c:	08013965 	.word	0x08013965
 8013910:	08013979 	.word	0x08013979
 8013914:	080138f5 	.word	0x080138f5
 8013918:	080138f5 	.word	0x080138f5
 801391c:	080138f5 	.word	0x080138f5
 8013920:	080138f5 	.word	0x080138f5
 8013924:	08013979 	.word	0x08013979
 8013928:	080138f5 	.word	0x080138f5
 801392c:	080138f5 	.word	0x080138f5
 8013930:	080138f5 	.word	0x080138f5
 8013934:	080138f5 	.word	0x080138f5
 8013938:	08013a87 	.word	0x08013a87
 801393c:	080139a9 	.word	0x080139a9
 8013940:	08013a69 	.word	0x08013a69
 8013944:	080138f5 	.word	0x080138f5
 8013948:	080138f5 	.word	0x080138f5
 801394c:	08013aa9 	.word	0x08013aa9
 8013950:	080138f5 	.word	0x080138f5
 8013954:	080139a9 	.word	0x080139a9
 8013958:	080138f5 	.word	0x080138f5
 801395c:	080138f5 	.word	0x080138f5
 8013960:	08013a71 	.word	0x08013a71
 8013964:	682b      	ldr	r3, [r5, #0]
 8013966:	1d1a      	adds	r2, r3, #4
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	602a      	str	r2, [r5, #0]
 801396c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013974:	2301      	movs	r3, #1
 8013976:	e0a4      	b.n	8013ac2 <_printf_i+0x1f6>
 8013978:	6820      	ldr	r0, [r4, #0]
 801397a:	6829      	ldr	r1, [r5, #0]
 801397c:	0606      	lsls	r6, r0, #24
 801397e:	f101 0304 	add.w	r3, r1, #4
 8013982:	d50a      	bpl.n	801399a <_printf_i+0xce>
 8013984:	680e      	ldr	r6, [r1, #0]
 8013986:	602b      	str	r3, [r5, #0]
 8013988:	2e00      	cmp	r6, #0
 801398a:	da03      	bge.n	8013994 <_printf_i+0xc8>
 801398c:	232d      	movs	r3, #45	; 0x2d
 801398e:	4276      	negs	r6, r6
 8013990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013994:	230a      	movs	r3, #10
 8013996:	485e      	ldr	r0, [pc, #376]	; (8013b10 <_printf_i+0x244>)
 8013998:	e019      	b.n	80139ce <_printf_i+0x102>
 801399a:	680e      	ldr	r6, [r1, #0]
 801399c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80139a0:	602b      	str	r3, [r5, #0]
 80139a2:	bf18      	it	ne
 80139a4:	b236      	sxthne	r6, r6
 80139a6:	e7ef      	b.n	8013988 <_printf_i+0xbc>
 80139a8:	682b      	ldr	r3, [r5, #0]
 80139aa:	6820      	ldr	r0, [r4, #0]
 80139ac:	1d19      	adds	r1, r3, #4
 80139ae:	6029      	str	r1, [r5, #0]
 80139b0:	0601      	lsls	r1, r0, #24
 80139b2:	d501      	bpl.n	80139b8 <_printf_i+0xec>
 80139b4:	681e      	ldr	r6, [r3, #0]
 80139b6:	e002      	b.n	80139be <_printf_i+0xf2>
 80139b8:	0646      	lsls	r6, r0, #25
 80139ba:	d5fb      	bpl.n	80139b4 <_printf_i+0xe8>
 80139bc:	881e      	ldrh	r6, [r3, #0]
 80139be:	2f6f      	cmp	r7, #111	; 0x6f
 80139c0:	bf0c      	ite	eq
 80139c2:	2308      	moveq	r3, #8
 80139c4:	230a      	movne	r3, #10
 80139c6:	4852      	ldr	r0, [pc, #328]	; (8013b10 <_printf_i+0x244>)
 80139c8:	2100      	movs	r1, #0
 80139ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139ce:	6865      	ldr	r5, [r4, #4]
 80139d0:	2d00      	cmp	r5, #0
 80139d2:	bfa8      	it	ge
 80139d4:	6821      	ldrge	r1, [r4, #0]
 80139d6:	60a5      	str	r5, [r4, #8]
 80139d8:	bfa4      	itt	ge
 80139da:	f021 0104 	bicge.w	r1, r1, #4
 80139de:	6021      	strge	r1, [r4, #0]
 80139e0:	b90e      	cbnz	r6, 80139e6 <_printf_i+0x11a>
 80139e2:	2d00      	cmp	r5, #0
 80139e4:	d04d      	beq.n	8013a82 <_printf_i+0x1b6>
 80139e6:	4615      	mov	r5, r2
 80139e8:	fbb6 f1f3 	udiv	r1, r6, r3
 80139ec:	fb03 6711 	mls	r7, r3, r1, r6
 80139f0:	5dc7      	ldrb	r7, [r0, r7]
 80139f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80139f6:	4637      	mov	r7, r6
 80139f8:	42bb      	cmp	r3, r7
 80139fa:	460e      	mov	r6, r1
 80139fc:	d9f4      	bls.n	80139e8 <_printf_i+0x11c>
 80139fe:	2b08      	cmp	r3, #8
 8013a00:	d10b      	bne.n	8013a1a <_printf_i+0x14e>
 8013a02:	6823      	ldr	r3, [r4, #0]
 8013a04:	07de      	lsls	r6, r3, #31
 8013a06:	d508      	bpl.n	8013a1a <_printf_i+0x14e>
 8013a08:	6923      	ldr	r3, [r4, #16]
 8013a0a:	6861      	ldr	r1, [r4, #4]
 8013a0c:	4299      	cmp	r1, r3
 8013a0e:	bfde      	ittt	le
 8013a10:	2330      	movle	r3, #48	; 0x30
 8013a12:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013a16:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013a1a:	1b52      	subs	r2, r2, r5
 8013a1c:	6122      	str	r2, [r4, #16]
 8013a1e:	464b      	mov	r3, r9
 8013a20:	4621      	mov	r1, r4
 8013a22:	4640      	mov	r0, r8
 8013a24:	f8cd a000 	str.w	sl, [sp]
 8013a28:	aa03      	add	r2, sp, #12
 8013a2a:	f7ff fedf 	bl	80137ec <_printf_common>
 8013a2e:	3001      	adds	r0, #1
 8013a30:	d14c      	bne.n	8013acc <_printf_i+0x200>
 8013a32:	f04f 30ff 	mov.w	r0, #4294967295
 8013a36:	b004      	add	sp, #16
 8013a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a3c:	4834      	ldr	r0, [pc, #208]	; (8013b10 <_printf_i+0x244>)
 8013a3e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013a42:	6829      	ldr	r1, [r5, #0]
 8013a44:	6823      	ldr	r3, [r4, #0]
 8013a46:	f851 6b04 	ldr.w	r6, [r1], #4
 8013a4a:	6029      	str	r1, [r5, #0]
 8013a4c:	061d      	lsls	r5, r3, #24
 8013a4e:	d514      	bpl.n	8013a7a <_printf_i+0x1ae>
 8013a50:	07df      	lsls	r7, r3, #31
 8013a52:	bf44      	itt	mi
 8013a54:	f043 0320 	orrmi.w	r3, r3, #32
 8013a58:	6023      	strmi	r3, [r4, #0]
 8013a5a:	b91e      	cbnz	r6, 8013a64 <_printf_i+0x198>
 8013a5c:	6823      	ldr	r3, [r4, #0]
 8013a5e:	f023 0320 	bic.w	r3, r3, #32
 8013a62:	6023      	str	r3, [r4, #0]
 8013a64:	2310      	movs	r3, #16
 8013a66:	e7af      	b.n	80139c8 <_printf_i+0xfc>
 8013a68:	6823      	ldr	r3, [r4, #0]
 8013a6a:	f043 0320 	orr.w	r3, r3, #32
 8013a6e:	6023      	str	r3, [r4, #0]
 8013a70:	2378      	movs	r3, #120	; 0x78
 8013a72:	4828      	ldr	r0, [pc, #160]	; (8013b14 <_printf_i+0x248>)
 8013a74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a78:	e7e3      	b.n	8013a42 <_printf_i+0x176>
 8013a7a:	0659      	lsls	r1, r3, #25
 8013a7c:	bf48      	it	mi
 8013a7e:	b2b6      	uxthmi	r6, r6
 8013a80:	e7e6      	b.n	8013a50 <_printf_i+0x184>
 8013a82:	4615      	mov	r5, r2
 8013a84:	e7bb      	b.n	80139fe <_printf_i+0x132>
 8013a86:	682b      	ldr	r3, [r5, #0]
 8013a88:	6826      	ldr	r6, [r4, #0]
 8013a8a:	1d18      	adds	r0, r3, #4
 8013a8c:	6961      	ldr	r1, [r4, #20]
 8013a8e:	6028      	str	r0, [r5, #0]
 8013a90:	0635      	lsls	r5, r6, #24
 8013a92:	681b      	ldr	r3, [r3, #0]
 8013a94:	d501      	bpl.n	8013a9a <_printf_i+0x1ce>
 8013a96:	6019      	str	r1, [r3, #0]
 8013a98:	e002      	b.n	8013aa0 <_printf_i+0x1d4>
 8013a9a:	0670      	lsls	r0, r6, #25
 8013a9c:	d5fb      	bpl.n	8013a96 <_printf_i+0x1ca>
 8013a9e:	8019      	strh	r1, [r3, #0]
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	4615      	mov	r5, r2
 8013aa4:	6123      	str	r3, [r4, #16]
 8013aa6:	e7ba      	b.n	8013a1e <_printf_i+0x152>
 8013aa8:	682b      	ldr	r3, [r5, #0]
 8013aaa:	2100      	movs	r1, #0
 8013aac:	1d1a      	adds	r2, r3, #4
 8013aae:	602a      	str	r2, [r5, #0]
 8013ab0:	681d      	ldr	r5, [r3, #0]
 8013ab2:	6862      	ldr	r2, [r4, #4]
 8013ab4:	4628      	mov	r0, r5
 8013ab6:	f000 fef9 	bl	80148ac <memchr>
 8013aba:	b108      	cbz	r0, 8013ac0 <_printf_i+0x1f4>
 8013abc:	1b40      	subs	r0, r0, r5
 8013abe:	6060      	str	r0, [r4, #4]
 8013ac0:	6863      	ldr	r3, [r4, #4]
 8013ac2:	6123      	str	r3, [r4, #16]
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013aca:	e7a8      	b.n	8013a1e <_printf_i+0x152>
 8013acc:	462a      	mov	r2, r5
 8013ace:	4649      	mov	r1, r9
 8013ad0:	4640      	mov	r0, r8
 8013ad2:	6923      	ldr	r3, [r4, #16]
 8013ad4:	47d0      	blx	sl
 8013ad6:	3001      	adds	r0, #1
 8013ad8:	d0ab      	beq.n	8013a32 <_printf_i+0x166>
 8013ada:	6823      	ldr	r3, [r4, #0]
 8013adc:	079b      	lsls	r3, r3, #30
 8013ade:	d413      	bmi.n	8013b08 <_printf_i+0x23c>
 8013ae0:	68e0      	ldr	r0, [r4, #12]
 8013ae2:	9b03      	ldr	r3, [sp, #12]
 8013ae4:	4298      	cmp	r0, r3
 8013ae6:	bfb8      	it	lt
 8013ae8:	4618      	movlt	r0, r3
 8013aea:	e7a4      	b.n	8013a36 <_printf_i+0x16a>
 8013aec:	2301      	movs	r3, #1
 8013aee:	4632      	mov	r2, r6
 8013af0:	4649      	mov	r1, r9
 8013af2:	4640      	mov	r0, r8
 8013af4:	47d0      	blx	sl
 8013af6:	3001      	adds	r0, #1
 8013af8:	d09b      	beq.n	8013a32 <_printf_i+0x166>
 8013afa:	3501      	adds	r5, #1
 8013afc:	68e3      	ldr	r3, [r4, #12]
 8013afe:	9903      	ldr	r1, [sp, #12]
 8013b00:	1a5b      	subs	r3, r3, r1
 8013b02:	42ab      	cmp	r3, r5
 8013b04:	dcf2      	bgt.n	8013aec <_printf_i+0x220>
 8013b06:	e7eb      	b.n	8013ae0 <_printf_i+0x214>
 8013b08:	2500      	movs	r5, #0
 8013b0a:	f104 0619 	add.w	r6, r4, #25
 8013b0e:	e7f5      	b.n	8013afc <_printf_i+0x230>
 8013b10:	0802f53e 	.word	0x0802f53e
 8013b14:	0802f54f 	.word	0x0802f54f

08013b18 <_sbrk_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	4d05      	ldr	r5, [pc, #20]	; (8013b34 <_sbrk_r+0x1c>)
 8013b1e:	4604      	mov	r4, r0
 8013b20:	4608      	mov	r0, r1
 8013b22:	602b      	str	r3, [r5, #0]
 8013b24:	f7ef fcfc 	bl	8003520 <_sbrk>
 8013b28:	1c43      	adds	r3, r0, #1
 8013b2a:	d102      	bne.n	8013b32 <_sbrk_r+0x1a>
 8013b2c:	682b      	ldr	r3, [r5, #0]
 8013b2e:	b103      	cbz	r3, 8013b32 <_sbrk_r+0x1a>
 8013b30:	6023      	str	r3, [r4, #0]
 8013b32:	bd38      	pop	{r3, r4, r5, pc}
 8013b34:	200016c8 	.word	0x200016c8

08013b38 <_vsniprintf_r>:
 8013b38:	b530      	push	{r4, r5, lr}
 8013b3a:	4614      	mov	r4, r2
 8013b3c:	2c00      	cmp	r4, #0
 8013b3e:	4605      	mov	r5, r0
 8013b40:	461a      	mov	r2, r3
 8013b42:	b09b      	sub	sp, #108	; 0x6c
 8013b44:	da05      	bge.n	8013b52 <_vsniprintf_r+0x1a>
 8013b46:	238b      	movs	r3, #139	; 0x8b
 8013b48:	6003      	str	r3, [r0, #0]
 8013b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b4e:	b01b      	add	sp, #108	; 0x6c
 8013b50:	bd30      	pop	{r4, r5, pc}
 8013b52:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013b56:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013b5a:	bf0c      	ite	eq
 8013b5c:	4623      	moveq	r3, r4
 8013b5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013b62:	9302      	str	r3, [sp, #8]
 8013b64:	9305      	str	r3, [sp, #20]
 8013b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b6a:	9100      	str	r1, [sp, #0]
 8013b6c:	9104      	str	r1, [sp, #16]
 8013b6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013b72:	4669      	mov	r1, sp
 8013b74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013b76:	f001 fab3 	bl	80150e0 <_svfiprintf_r>
 8013b7a:	1c43      	adds	r3, r0, #1
 8013b7c:	bfbc      	itt	lt
 8013b7e:	238b      	movlt	r3, #139	; 0x8b
 8013b80:	602b      	strlt	r3, [r5, #0]
 8013b82:	2c00      	cmp	r4, #0
 8013b84:	d0e3      	beq.n	8013b4e <_vsniprintf_r+0x16>
 8013b86:	2200      	movs	r2, #0
 8013b88:	9b00      	ldr	r3, [sp, #0]
 8013b8a:	701a      	strb	r2, [r3, #0]
 8013b8c:	e7df      	b.n	8013b4e <_vsniprintf_r+0x16>
	...

08013b90 <vsniprintf>:
 8013b90:	b507      	push	{r0, r1, r2, lr}
 8013b92:	9300      	str	r3, [sp, #0]
 8013b94:	4613      	mov	r3, r2
 8013b96:	460a      	mov	r2, r1
 8013b98:	4601      	mov	r1, r0
 8013b9a:	4803      	ldr	r0, [pc, #12]	; (8013ba8 <vsniprintf+0x18>)
 8013b9c:	6800      	ldr	r0, [r0, #0]
 8013b9e:	f7ff ffcb 	bl	8013b38 <_vsniprintf_r>
 8013ba2:	b003      	add	sp, #12
 8013ba4:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ba8:	20000174 	.word	0x20000174

08013bac <quorem>:
 8013bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	6903      	ldr	r3, [r0, #16]
 8013bb2:	690c      	ldr	r4, [r1, #16]
 8013bb4:	4607      	mov	r7, r0
 8013bb6:	42a3      	cmp	r3, r4
 8013bb8:	f2c0 8082 	blt.w	8013cc0 <quorem+0x114>
 8013bbc:	3c01      	subs	r4, #1
 8013bbe:	f100 0514 	add.w	r5, r0, #20
 8013bc2:	f101 0814 	add.w	r8, r1, #20
 8013bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bca:	9301      	str	r3, [sp, #4]
 8013bcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013bd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bd4:	3301      	adds	r3, #1
 8013bd6:	429a      	cmp	r2, r3
 8013bd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8013bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013be4:	d331      	bcc.n	8013c4a <quorem+0x9e>
 8013be6:	f04f 0e00 	mov.w	lr, #0
 8013bea:	4640      	mov	r0, r8
 8013bec:	46ac      	mov	ip, r5
 8013bee:	46f2      	mov	sl, lr
 8013bf0:	f850 2b04 	ldr.w	r2, [r0], #4
 8013bf4:	b293      	uxth	r3, r2
 8013bf6:	fb06 e303 	mla	r3, r6, r3, lr
 8013bfa:	0c12      	lsrs	r2, r2, #16
 8013bfc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	fb06 e202 	mla	r2, r6, r2, lr
 8013c06:	ebaa 0303 	sub.w	r3, sl, r3
 8013c0a:	f8dc a000 	ldr.w	sl, [ip]
 8013c0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013c12:	fa1f fa8a 	uxth.w	sl, sl
 8013c16:	4453      	add	r3, sl
 8013c18:	f8dc a000 	ldr.w	sl, [ip]
 8013c1c:	b292      	uxth	r2, r2
 8013c1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013c22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c26:	b29b      	uxth	r3, r3
 8013c28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c2c:	4581      	cmp	r9, r0
 8013c2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013c32:	f84c 3b04 	str.w	r3, [ip], #4
 8013c36:	d2db      	bcs.n	8013bf0 <quorem+0x44>
 8013c38:	f855 300b 	ldr.w	r3, [r5, fp]
 8013c3c:	b92b      	cbnz	r3, 8013c4a <quorem+0x9e>
 8013c3e:	9b01      	ldr	r3, [sp, #4]
 8013c40:	3b04      	subs	r3, #4
 8013c42:	429d      	cmp	r5, r3
 8013c44:	461a      	mov	r2, r3
 8013c46:	d32f      	bcc.n	8013ca8 <quorem+0xfc>
 8013c48:	613c      	str	r4, [r7, #16]
 8013c4a:	4638      	mov	r0, r7
 8013c4c:	f001 f8d4 	bl	8014df8 <__mcmp>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	db25      	blt.n	8013ca0 <quorem+0xf4>
 8013c54:	4628      	mov	r0, r5
 8013c56:	f04f 0c00 	mov.w	ip, #0
 8013c5a:	3601      	adds	r6, #1
 8013c5c:	f858 1b04 	ldr.w	r1, [r8], #4
 8013c60:	f8d0 e000 	ldr.w	lr, [r0]
 8013c64:	b28b      	uxth	r3, r1
 8013c66:	ebac 0303 	sub.w	r3, ip, r3
 8013c6a:	fa1f f28e 	uxth.w	r2, lr
 8013c6e:	4413      	add	r3, r2
 8013c70:	0c0a      	lsrs	r2, r1, #16
 8013c72:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013c76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013c80:	45c1      	cmp	r9, r8
 8013c82:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013c86:	f840 3b04 	str.w	r3, [r0], #4
 8013c8a:	d2e7      	bcs.n	8013c5c <quorem+0xb0>
 8013c8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c94:	b922      	cbnz	r2, 8013ca0 <quorem+0xf4>
 8013c96:	3b04      	subs	r3, #4
 8013c98:	429d      	cmp	r5, r3
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	d30a      	bcc.n	8013cb4 <quorem+0x108>
 8013c9e:	613c      	str	r4, [r7, #16]
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	b003      	add	sp, #12
 8013ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca8:	6812      	ldr	r2, [r2, #0]
 8013caa:	3b04      	subs	r3, #4
 8013cac:	2a00      	cmp	r2, #0
 8013cae:	d1cb      	bne.n	8013c48 <quorem+0x9c>
 8013cb0:	3c01      	subs	r4, #1
 8013cb2:	e7c6      	b.n	8013c42 <quorem+0x96>
 8013cb4:	6812      	ldr	r2, [r2, #0]
 8013cb6:	3b04      	subs	r3, #4
 8013cb8:	2a00      	cmp	r2, #0
 8013cba:	d1f0      	bne.n	8013c9e <quorem+0xf2>
 8013cbc:	3c01      	subs	r4, #1
 8013cbe:	e7eb      	b.n	8013c98 <quorem+0xec>
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	e7ee      	b.n	8013ca2 <quorem+0xf6>
 8013cc4:	0000      	movs	r0, r0
	...

08013cc8 <_dtoa_r>:
 8013cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ccc:	4616      	mov	r6, r2
 8013cce:	461f      	mov	r7, r3
 8013cd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013cd2:	b099      	sub	sp, #100	; 0x64
 8013cd4:	4605      	mov	r5, r0
 8013cd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013cda:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8013cde:	b974      	cbnz	r4, 8013cfe <_dtoa_r+0x36>
 8013ce0:	2010      	movs	r0, #16
 8013ce2:	f7ff f9c5 	bl	8013070 <malloc>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	6268      	str	r0, [r5, #36]	; 0x24
 8013cea:	b920      	cbnz	r0, 8013cf6 <_dtoa_r+0x2e>
 8013cec:	21ea      	movs	r1, #234	; 0xea
 8013cee:	4ba8      	ldr	r3, [pc, #672]	; (8013f90 <_dtoa_r+0x2c8>)
 8013cf0:	48a8      	ldr	r0, [pc, #672]	; (8013f94 <_dtoa_r+0x2cc>)
 8013cf2:	f001 faf5 	bl	80152e0 <__assert_func>
 8013cf6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013cfa:	6004      	str	r4, [r0, #0]
 8013cfc:	60c4      	str	r4, [r0, #12]
 8013cfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d00:	6819      	ldr	r1, [r3, #0]
 8013d02:	b151      	cbz	r1, 8013d1a <_dtoa_r+0x52>
 8013d04:	685a      	ldr	r2, [r3, #4]
 8013d06:	2301      	movs	r3, #1
 8013d08:	4093      	lsls	r3, r2
 8013d0a:	604a      	str	r2, [r1, #4]
 8013d0c:	608b      	str	r3, [r1, #8]
 8013d0e:	4628      	mov	r0, r5
 8013d10:	f000 fe34 	bl	801497c <_Bfree>
 8013d14:	2200      	movs	r2, #0
 8013d16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013d18:	601a      	str	r2, [r3, #0]
 8013d1a:	1e3b      	subs	r3, r7, #0
 8013d1c:	bfaf      	iteee	ge
 8013d1e:	2300      	movge	r3, #0
 8013d20:	2201      	movlt	r2, #1
 8013d22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013d26:	9305      	strlt	r3, [sp, #20]
 8013d28:	bfa8      	it	ge
 8013d2a:	f8c8 3000 	strge.w	r3, [r8]
 8013d2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013d32:	4b99      	ldr	r3, [pc, #612]	; (8013f98 <_dtoa_r+0x2d0>)
 8013d34:	bfb8      	it	lt
 8013d36:	f8c8 2000 	strlt.w	r2, [r8]
 8013d3a:	ea33 0309 	bics.w	r3, r3, r9
 8013d3e:	d119      	bne.n	8013d74 <_dtoa_r+0xac>
 8013d40:	f242 730f 	movw	r3, #9999	; 0x270f
 8013d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013d46:	6013      	str	r3, [r2, #0]
 8013d48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d4c:	4333      	orrs	r3, r6
 8013d4e:	f000 857f 	beq.w	8014850 <_dtoa_r+0xb88>
 8013d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d54:	b953      	cbnz	r3, 8013d6c <_dtoa_r+0xa4>
 8013d56:	4b91      	ldr	r3, [pc, #580]	; (8013f9c <_dtoa_r+0x2d4>)
 8013d58:	e022      	b.n	8013da0 <_dtoa_r+0xd8>
 8013d5a:	4b91      	ldr	r3, [pc, #580]	; (8013fa0 <_dtoa_r+0x2d8>)
 8013d5c:	9303      	str	r3, [sp, #12]
 8013d5e:	3308      	adds	r3, #8
 8013d60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013d62:	6013      	str	r3, [r2, #0]
 8013d64:	9803      	ldr	r0, [sp, #12]
 8013d66:	b019      	add	sp, #100	; 0x64
 8013d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d6c:	4b8b      	ldr	r3, [pc, #556]	; (8013f9c <_dtoa_r+0x2d4>)
 8013d6e:	9303      	str	r3, [sp, #12]
 8013d70:	3303      	adds	r3, #3
 8013d72:	e7f5      	b.n	8013d60 <_dtoa_r+0x98>
 8013d74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013d78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8013d7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013d80:	2200      	movs	r2, #0
 8013d82:	2300      	movs	r3, #0
 8013d84:	f7ec fe7c 	bl	8000a80 <__aeabi_dcmpeq>
 8013d88:	4680      	mov	r8, r0
 8013d8a:	b158      	cbz	r0, 8013da4 <_dtoa_r+0xdc>
 8013d8c:	2301      	movs	r3, #1
 8013d8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013d90:	6013      	str	r3, [r2, #0]
 8013d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f000 8558 	beq.w	801484a <_dtoa_r+0xb82>
 8013d9a:	4882      	ldr	r0, [pc, #520]	; (8013fa4 <_dtoa_r+0x2dc>)
 8013d9c:	6018      	str	r0, [r3, #0]
 8013d9e:	1e43      	subs	r3, r0, #1
 8013da0:	9303      	str	r3, [sp, #12]
 8013da2:	e7df      	b.n	8013d64 <_dtoa_r+0x9c>
 8013da4:	ab16      	add	r3, sp, #88	; 0x58
 8013da6:	9301      	str	r3, [sp, #4]
 8013da8:	ab17      	add	r3, sp, #92	; 0x5c
 8013daa:	9300      	str	r3, [sp, #0]
 8013dac:	4628      	mov	r0, r5
 8013dae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013db2:	f001 f8c9 	bl	8014f48 <__d2b>
 8013db6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013dba:	4683      	mov	fp, r0
 8013dbc:	2c00      	cmp	r4, #0
 8013dbe:	d07f      	beq.n	8013ec0 <_dtoa_r+0x1f8>
 8013dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dc6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013dce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8013dd2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013dd6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8013dda:	2200      	movs	r2, #0
 8013ddc:	4b72      	ldr	r3, [pc, #456]	; (8013fa8 <_dtoa_r+0x2e0>)
 8013dde:	f7ec fa2f 	bl	8000240 <__aeabi_dsub>
 8013de2:	a365      	add	r3, pc, #404	; (adr r3, 8013f78 <_dtoa_r+0x2b0>)
 8013de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de8:	f7ec fbe2 	bl	80005b0 <__aeabi_dmul>
 8013dec:	a364      	add	r3, pc, #400	; (adr r3, 8013f80 <_dtoa_r+0x2b8>)
 8013dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df2:	f7ec fa27 	bl	8000244 <__adddf3>
 8013df6:	4606      	mov	r6, r0
 8013df8:	4620      	mov	r0, r4
 8013dfa:	460f      	mov	r7, r1
 8013dfc:	f7ec fb6e 	bl	80004dc <__aeabi_i2d>
 8013e00:	a361      	add	r3, pc, #388	; (adr r3, 8013f88 <_dtoa_r+0x2c0>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	f7ec fbd3 	bl	80005b0 <__aeabi_dmul>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	460b      	mov	r3, r1
 8013e0e:	4630      	mov	r0, r6
 8013e10:	4639      	mov	r1, r7
 8013e12:	f7ec fa17 	bl	8000244 <__adddf3>
 8013e16:	4606      	mov	r6, r0
 8013e18:	460f      	mov	r7, r1
 8013e1a:	f7ec fe79 	bl	8000b10 <__aeabi_d2iz>
 8013e1e:	2200      	movs	r2, #0
 8013e20:	4682      	mov	sl, r0
 8013e22:	2300      	movs	r3, #0
 8013e24:	4630      	mov	r0, r6
 8013e26:	4639      	mov	r1, r7
 8013e28:	f7ec fe34 	bl	8000a94 <__aeabi_dcmplt>
 8013e2c:	b148      	cbz	r0, 8013e42 <_dtoa_r+0x17a>
 8013e2e:	4650      	mov	r0, sl
 8013e30:	f7ec fb54 	bl	80004dc <__aeabi_i2d>
 8013e34:	4632      	mov	r2, r6
 8013e36:	463b      	mov	r3, r7
 8013e38:	f7ec fe22 	bl	8000a80 <__aeabi_dcmpeq>
 8013e3c:	b908      	cbnz	r0, 8013e42 <_dtoa_r+0x17a>
 8013e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e42:	f1ba 0f16 	cmp.w	sl, #22
 8013e46:	d858      	bhi.n	8013efa <_dtoa_r+0x232>
 8013e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013e4c:	4b57      	ldr	r3, [pc, #348]	; (8013fac <_dtoa_r+0x2e4>)
 8013e4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e56:	f7ec fe1d 	bl	8000a94 <__aeabi_dcmplt>
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d04f      	beq.n	8013efe <_dtoa_r+0x236>
 8013e5e:	2300      	movs	r3, #0
 8013e60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013e68:	1b1c      	subs	r4, r3, r4
 8013e6a:	1e63      	subs	r3, r4, #1
 8013e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8013e6e:	bf49      	itett	mi
 8013e70:	f1c4 0301 	rsbmi	r3, r4, #1
 8013e74:	2300      	movpl	r3, #0
 8013e76:	9306      	strmi	r3, [sp, #24]
 8013e78:	2300      	movmi	r3, #0
 8013e7a:	bf54      	ite	pl
 8013e7c:	9306      	strpl	r3, [sp, #24]
 8013e7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013e80:	f1ba 0f00 	cmp.w	sl, #0
 8013e84:	db3d      	blt.n	8013f02 <_dtoa_r+0x23a>
 8013e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e88:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013e8c:	4453      	add	r3, sl
 8013e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e90:	2300      	movs	r3, #0
 8013e92:	930a      	str	r3, [sp, #40]	; 0x28
 8013e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013e96:	2b09      	cmp	r3, #9
 8013e98:	f200 808c 	bhi.w	8013fb4 <_dtoa_r+0x2ec>
 8013e9c:	2b05      	cmp	r3, #5
 8013e9e:	bfc4      	itt	gt
 8013ea0:	3b04      	subgt	r3, #4
 8013ea2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013ea6:	bfc8      	it	gt
 8013ea8:	2400      	movgt	r4, #0
 8013eaa:	f1a3 0302 	sub.w	r3, r3, #2
 8013eae:	bfd8      	it	le
 8013eb0:	2401      	movle	r4, #1
 8013eb2:	2b03      	cmp	r3, #3
 8013eb4:	f200 808a 	bhi.w	8013fcc <_dtoa_r+0x304>
 8013eb8:	e8df f003 	tbb	[pc, r3]
 8013ebc:	5b4d4f2d 	.word	0x5b4d4f2d
 8013ec0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013ec4:	441c      	add	r4, r3
 8013ec6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013eca:	2b20      	cmp	r3, #32
 8013ecc:	bfc3      	ittte	gt
 8013ece:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013ed2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8013ed6:	fa09 f303 	lslgt.w	r3, r9, r3
 8013eda:	f1c3 0320 	rsble	r3, r3, #32
 8013ede:	bfc6      	itte	gt
 8013ee0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013ee4:	4318      	orrgt	r0, r3
 8013ee6:	fa06 f003 	lslle.w	r0, r6, r3
 8013eea:	f7ec fae7 	bl	80004bc <__aeabi_ui2d>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8013ef4:	3c01      	subs	r4, #1
 8013ef6:	9313      	str	r3, [sp, #76]	; 0x4c
 8013ef8:	e76f      	b.n	8013dda <_dtoa_r+0x112>
 8013efa:	2301      	movs	r3, #1
 8013efc:	e7b2      	b.n	8013e64 <_dtoa_r+0x19c>
 8013efe:	900f      	str	r0, [sp, #60]	; 0x3c
 8013f00:	e7b1      	b.n	8013e66 <_dtoa_r+0x19e>
 8013f02:	9b06      	ldr	r3, [sp, #24]
 8013f04:	eba3 030a 	sub.w	r3, r3, sl
 8013f08:	9306      	str	r3, [sp, #24]
 8013f0a:	f1ca 0300 	rsb	r3, sl, #0
 8013f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8013f10:	2300      	movs	r3, #0
 8013f12:	930e      	str	r3, [sp, #56]	; 0x38
 8013f14:	e7be      	b.n	8013e94 <_dtoa_r+0x1cc>
 8013f16:	2300      	movs	r3, #0
 8013f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	dc58      	bgt.n	8013fd2 <_dtoa_r+0x30a>
 8013f20:	f04f 0901 	mov.w	r9, #1
 8013f24:	464b      	mov	r3, r9
 8013f26:	f8cd 9020 	str.w	r9, [sp, #32]
 8013f2a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8013f2e:	2200      	movs	r2, #0
 8013f30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8013f32:	6042      	str	r2, [r0, #4]
 8013f34:	2204      	movs	r2, #4
 8013f36:	f102 0614 	add.w	r6, r2, #20
 8013f3a:	429e      	cmp	r6, r3
 8013f3c:	6841      	ldr	r1, [r0, #4]
 8013f3e:	d94e      	bls.n	8013fde <_dtoa_r+0x316>
 8013f40:	4628      	mov	r0, r5
 8013f42:	f000 fcdb 	bl	80148fc <_Balloc>
 8013f46:	9003      	str	r0, [sp, #12]
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	d14c      	bne.n	8013fe6 <_dtoa_r+0x31e>
 8013f4c:	4602      	mov	r2, r0
 8013f4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013f52:	4b17      	ldr	r3, [pc, #92]	; (8013fb0 <_dtoa_r+0x2e8>)
 8013f54:	e6cc      	b.n	8013cf0 <_dtoa_r+0x28>
 8013f56:	2301      	movs	r3, #1
 8013f58:	e7de      	b.n	8013f18 <_dtoa_r+0x250>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013f60:	eb0a 0903 	add.w	r9, sl, r3
 8013f64:	f109 0301 	add.w	r3, r9, #1
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	9308      	str	r3, [sp, #32]
 8013f6c:	bfb8      	it	lt
 8013f6e:	2301      	movlt	r3, #1
 8013f70:	e7dd      	b.n	8013f2e <_dtoa_r+0x266>
 8013f72:	2301      	movs	r3, #1
 8013f74:	e7f2      	b.n	8013f5c <_dtoa_r+0x294>
 8013f76:	bf00      	nop
 8013f78:	636f4361 	.word	0x636f4361
 8013f7c:	3fd287a7 	.word	0x3fd287a7
 8013f80:	8b60c8b3 	.word	0x8b60c8b3
 8013f84:	3fc68a28 	.word	0x3fc68a28
 8013f88:	509f79fb 	.word	0x509f79fb
 8013f8c:	3fd34413 	.word	0x3fd34413
 8013f90:	0802f56d 	.word	0x0802f56d
 8013f94:	0802f584 	.word	0x0802f584
 8013f98:	7ff00000 	.word	0x7ff00000
 8013f9c:	0802f569 	.word	0x0802f569
 8013fa0:	0802f560 	.word	0x0802f560
 8013fa4:	0802f53d 	.word	0x0802f53d
 8013fa8:	3ff80000 	.word	0x3ff80000
 8013fac:	0802f678 	.word	0x0802f678
 8013fb0:	0802f5df 	.word	0x0802f5df
 8013fb4:	2401      	movs	r4, #1
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	940b      	str	r4, [sp, #44]	; 0x2c
 8013fba:	9322      	str	r3, [sp, #136]	; 0x88
 8013fbc:	f04f 39ff 	mov.w	r9, #4294967295
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	2312      	movs	r3, #18
 8013fc4:	f8cd 9020 	str.w	r9, [sp, #32]
 8013fc8:	9223      	str	r2, [sp, #140]	; 0x8c
 8013fca:	e7b0      	b.n	8013f2e <_dtoa_r+0x266>
 8013fcc:	2301      	movs	r3, #1
 8013fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fd0:	e7f4      	b.n	8013fbc <_dtoa_r+0x2f4>
 8013fd2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8013fd6:	464b      	mov	r3, r9
 8013fd8:	f8cd 9020 	str.w	r9, [sp, #32]
 8013fdc:	e7a7      	b.n	8013f2e <_dtoa_r+0x266>
 8013fde:	3101      	adds	r1, #1
 8013fe0:	6041      	str	r1, [r0, #4]
 8013fe2:	0052      	lsls	r2, r2, #1
 8013fe4:	e7a7      	b.n	8013f36 <_dtoa_r+0x26e>
 8013fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013fe8:	9a03      	ldr	r2, [sp, #12]
 8013fea:	601a      	str	r2, [r3, #0]
 8013fec:	9b08      	ldr	r3, [sp, #32]
 8013fee:	2b0e      	cmp	r3, #14
 8013ff0:	f200 80a8 	bhi.w	8014144 <_dtoa_r+0x47c>
 8013ff4:	2c00      	cmp	r4, #0
 8013ff6:	f000 80a5 	beq.w	8014144 <_dtoa_r+0x47c>
 8013ffa:	f1ba 0f00 	cmp.w	sl, #0
 8013ffe:	dd34      	ble.n	801406a <_dtoa_r+0x3a2>
 8014000:	4a9a      	ldr	r2, [pc, #616]	; (801426c <_dtoa_r+0x5a4>)
 8014002:	f00a 030f 	and.w	r3, sl, #15
 8014006:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801400a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801400e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014012:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8014016:	ea4f 142a 	mov.w	r4, sl, asr #4
 801401a:	d016      	beq.n	801404a <_dtoa_r+0x382>
 801401c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014020:	4b93      	ldr	r3, [pc, #588]	; (8014270 <_dtoa_r+0x5a8>)
 8014022:	2703      	movs	r7, #3
 8014024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014028:	f7ec fbec 	bl	8000804 <__aeabi_ddiv>
 801402c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014030:	f004 040f 	and.w	r4, r4, #15
 8014034:	4e8e      	ldr	r6, [pc, #568]	; (8014270 <_dtoa_r+0x5a8>)
 8014036:	b954      	cbnz	r4, 801404e <_dtoa_r+0x386>
 8014038:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801403c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014040:	f7ec fbe0 	bl	8000804 <__aeabi_ddiv>
 8014044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014048:	e029      	b.n	801409e <_dtoa_r+0x3d6>
 801404a:	2702      	movs	r7, #2
 801404c:	e7f2      	b.n	8014034 <_dtoa_r+0x36c>
 801404e:	07e1      	lsls	r1, r4, #31
 8014050:	d508      	bpl.n	8014064 <_dtoa_r+0x39c>
 8014052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014056:	e9d6 2300 	ldrd	r2, r3, [r6]
 801405a:	f7ec faa9 	bl	80005b0 <__aeabi_dmul>
 801405e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014062:	3701      	adds	r7, #1
 8014064:	1064      	asrs	r4, r4, #1
 8014066:	3608      	adds	r6, #8
 8014068:	e7e5      	b.n	8014036 <_dtoa_r+0x36e>
 801406a:	f000 80a5 	beq.w	80141b8 <_dtoa_r+0x4f0>
 801406e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014072:	f1ca 0400 	rsb	r4, sl, #0
 8014076:	4b7d      	ldr	r3, [pc, #500]	; (801426c <_dtoa_r+0x5a4>)
 8014078:	f004 020f 	and.w	r2, r4, #15
 801407c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014084:	f7ec fa94 	bl	80005b0 <__aeabi_dmul>
 8014088:	2702      	movs	r7, #2
 801408a:	2300      	movs	r3, #0
 801408c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014090:	4e77      	ldr	r6, [pc, #476]	; (8014270 <_dtoa_r+0x5a8>)
 8014092:	1124      	asrs	r4, r4, #4
 8014094:	2c00      	cmp	r4, #0
 8014096:	f040 8084 	bne.w	80141a2 <_dtoa_r+0x4da>
 801409a:	2b00      	cmp	r3, #0
 801409c:	d1d2      	bne.n	8014044 <_dtoa_r+0x37c>
 801409e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	f000 808b 	beq.w	80141bc <_dtoa_r+0x4f4>
 80140a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80140aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80140ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80140b2:	2200      	movs	r2, #0
 80140b4:	4b6f      	ldr	r3, [pc, #444]	; (8014274 <_dtoa_r+0x5ac>)
 80140b6:	f7ec fced 	bl	8000a94 <__aeabi_dcmplt>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	d07e      	beq.n	80141bc <_dtoa_r+0x4f4>
 80140be:	9b08      	ldr	r3, [sp, #32]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d07b      	beq.n	80141bc <_dtoa_r+0x4f4>
 80140c4:	f1b9 0f00 	cmp.w	r9, #0
 80140c8:	dd38      	ble.n	801413c <_dtoa_r+0x474>
 80140ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80140ce:	2200      	movs	r2, #0
 80140d0:	4b69      	ldr	r3, [pc, #420]	; (8014278 <_dtoa_r+0x5b0>)
 80140d2:	f7ec fa6d 	bl	80005b0 <__aeabi_dmul>
 80140d6:	464c      	mov	r4, r9
 80140d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80140dc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80140e0:	3701      	adds	r7, #1
 80140e2:	4638      	mov	r0, r7
 80140e4:	f7ec f9fa 	bl	80004dc <__aeabi_i2d>
 80140e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140ec:	f7ec fa60 	bl	80005b0 <__aeabi_dmul>
 80140f0:	2200      	movs	r2, #0
 80140f2:	4b62      	ldr	r3, [pc, #392]	; (801427c <_dtoa_r+0x5b4>)
 80140f4:	f7ec f8a6 	bl	8000244 <__adddf3>
 80140f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80140fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014100:	9611      	str	r6, [sp, #68]	; 0x44
 8014102:	2c00      	cmp	r4, #0
 8014104:	d15d      	bne.n	80141c2 <_dtoa_r+0x4fa>
 8014106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801410a:	2200      	movs	r2, #0
 801410c:	4b5c      	ldr	r3, [pc, #368]	; (8014280 <_dtoa_r+0x5b8>)
 801410e:	f7ec f897 	bl	8000240 <__aeabi_dsub>
 8014112:	4602      	mov	r2, r0
 8014114:	460b      	mov	r3, r1
 8014116:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801411a:	4633      	mov	r3, r6
 801411c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801411e:	f7ec fcd7 	bl	8000ad0 <__aeabi_dcmpgt>
 8014122:	2800      	cmp	r0, #0
 8014124:	f040 829c 	bne.w	8014660 <_dtoa_r+0x998>
 8014128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801412c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801412e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014132:	f7ec fcaf 	bl	8000a94 <__aeabi_dcmplt>
 8014136:	2800      	cmp	r0, #0
 8014138:	f040 8290 	bne.w	801465c <_dtoa_r+0x994>
 801413c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8014140:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014146:	2b00      	cmp	r3, #0
 8014148:	f2c0 8152 	blt.w	80143f0 <_dtoa_r+0x728>
 801414c:	f1ba 0f0e 	cmp.w	sl, #14
 8014150:	f300 814e 	bgt.w	80143f0 <_dtoa_r+0x728>
 8014154:	4b45      	ldr	r3, [pc, #276]	; (801426c <_dtoa_r+0x5a4>)
 8014156:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801415a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801415e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8014162:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014164:	2b00      	cmp	r3, #0
 8014166:	f280 80db 	bge.w	8014320 <_dtoa_r+0x658>
 801416a:	9b08      	ldr	r3, [sp, #32]
 801416c:	2b00      	cmp	r3, #0
 801416e:	f300 80d7 	bgt.w	8014320 <_dtoa_r+0x658>
 8014172:	f040 8272 	bne.w	801465a <_dtoa_r+0x992>
 8014176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801417a:	2200      	movs	r2, #0
 801417c:	4b40      	ldr	r3, [pc, #256]	; (8014280 <_dtoa_r+0x5b8>)
 801417e:	f7ec fa17 	bl	80005b0 <__aeabi_dmul>
 8014182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014186:	f7ec fc99 	bl	8000abc <__aeabi_dcmpge>
 801418a:	9c08      	ldr	r4, [sp, #32]
 801418c:	4626      	mov	r6, r4
 801418e:	2800      	cmp	r0, #0
 8014190:	f040 8248 	bne.w	8014624 <_dtoa_r+0x95c>
 8014194:	2331      	movs	r3, #49	; 0x31
 8014196:	9f03      	ldr	r7, [sp, #12]
 8014198:	f10a 0a01 	add.w	sl, sl, #1
 801419c:	f807 3b01 	strb.w	r3, [r7], #1
 80141a0:	e244      	b.n	801462c <_dtoa_r+0x964>
 80141a2:	07e2      	lsls	r2, r4, #31
 80141a4:	d505      	bpl.n	80141b2 <_dtoa_r+0x4ea>
 80141a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80141aa:	f7ec fa01 	bl	80005b0 <__aeabi_dmul>
 80141ae:	2301      	movs	r3, #1
 80141b0:	3701      	adds	r7, #1
 80141b2:	1064      	asrs	r4, r4, #1
 80141b4:	3608      	adds	r6, #8
 80141b6:	e76d      	b.n	8014094 <_dtoa_r+0x3cc>
 80141b8:	2702      	movs	r7, #2
 80141ba:	e770      	b.n	801409e <_dtoa_r+0x3d6>
 80141bc:	46d0      	mov	r8, sl
 80141be:	9c08      	ldr	r4, [sp, #32]
 80141c0:	e78f      	b.n	80140e2 <_dtoa_r+0x41a>
 80141c2:	9903      	ldr	r1, [sp, #12]
 80141c4:	4b29      	ldr	r3, [pc, #164]	; (801426c <_dtoa_r+0x5a4>)
 80141c6:	4421      	add	r1, r4
 80141c8:	9112      	str	r1, [sp, #72]	; 0x48
 80141ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80141cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80141d0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80141d4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80141d8:	2900      	cmp	r1, #0
 80141da:	d055      	beq.n	8014288 <_dtoa_r+0x5c0>
 80141dc:	2000      	movs	r0, #0
 80141de:	4929      	ldr	r1, [pc, #164]	; (8014284 <_dtoa_r+0x5bc>)
 80141e0:	f7ec fb10 	bl	8000804 <__aeabi_ddiv>
 80141e4:	463b      	mov	r3, r7
 80141e6:	4632      	mov	r2, r6
 80141e8:	f7ec f82a 	bl	8000240 <__aeabi_dsub>
 80141ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80141f0:	9f03      	ldr	r7, [sp, #12]
 80141f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80141f6:	f7ec fc8b 	bl	8000b10 <__aeabi_d2iz>
 80141fa:	4604      	mov	r4, r0
 80141fc:	f7ec f96e 	bl	80004dc <__aeabi_i2d>
 8014200:	4602      	mov	r2, r0
 8014202:	460b      	mov	r3, r1
 8014204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014208:	f7ec f81a 	bl	8000240 <__aeabi_dsub>
 801420c:	4602      	mov	r2, r0
 801420e:	460b      	mov	r3, r1
 8014210:	3430      	adds	r4, #48	; 0x30
 8014212:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801421a:	f807 4b01 	strb.w	r4, [r7], #1
 801421e:	f7ec fc39 	bl	8000a94 <__aeabi_dcmplt>
 8014222:	2800      	cmp	r0, #0
 8014224:	d174      	bne.n	8014310 <_dtoa_r+0x648>
 8014226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801422a:	2000      	movs	r0, #0
 801422c:	4911      	ldr	r1, [pc, #68]	; (8014274 <_dtoa_r+0x5ac>)
 801422e:	f7ec f807 	bl	8000240 <__aeabi_dsub>
 8014232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014236:	f7ec fc2d 	bl	8000a94 <__aeabi_dcmplt>
 801423a:	2800      	cmp	r0, #0
 801423c:	f040 80b7 	bne.w	80143ae <_dtoa_r+0x6e6>
 8014240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014242:	429f      	cmp	r7, r3
 8014244:	f43f af7a 	beq.w	801413c <_dtoa_r+0x474>
 8014248:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801424c:	2200      	movs	r2, #0
 801424e:	4b0a      	ldr	r3, [pc, #40]	; (8014278 <_dtoa_r+0x5b0>)
 8014250:	f7ec f9ae 	bl	80005b0 <__aeabi_dmul>
 8014254:	2200      	movs	r2, #0
 8014256:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801425a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801425e:	4b06      	ldr	r3, [pc, #24]	; (8014278 <_dtoa_r+0x5b0>)
 8014260:	f7ec f9a6 	bl	80005b0 <__aeabi_dmul>
 8014264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014268:	e7c3      	b.n	80141f2 <_dtoa_r+0x52a>
 801426a:	bf00      	nop
 801426c:	0802f678 	.word	0x0802f678
 8014270:	0802f650 	.word	0x0802f650
 8014274:	3ff00000 	.word	0x3ff00000
 8014278:	40240000 	.word	0x40240000
 801427c:	401c0000 	.word	0x401c0000
 8014280:	40140000 	.word	0x40140000
 8014284:	3fe00000 	.word	0x3fe00000
 8014288:	4630      	mov	r0, r6
 801428a:	4639      	mov	r1, r7
 801428c:	f7ec f990 	bl	80005b0 <__aeabi_dmul>
 8014290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014292:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8014296:	9c03      	ldr	r4, [sp, #12]
 8014298:	9314      	str	r3, [sp, #80]	; 0x50
 801429a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801429e:	f7ec fc37 	bl	8000b10 <__aeabi_d2iz>
 80142a2:	9015      	str	r0, [sp, #84]	; 0x54
 80142a4:	f7ec f91a 	bl	80004dc <__aeabi_i2d>
 80142a8:	4602      	mov	r2, r0
 80142aa:	460b      	mov	r3, r1
 80142ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80142b0:	f7eb ffc6 	bl	8000240 <__aeabi_dsub>
 80142b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80142b6:	4606      	mov	r6, r0
 80142b8:	3330      	adds	r3, #48	; 0x30
 80142ba:	f804 3b01 	strb.w	r3, [r4], #1
 80142be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80142c0:	460f      	mov	r7, r1
 80142c2:	429c      	cmp	r4, r3
 80142c4:	f04f 0200 	mov.w	r2, #0
 80142c8:	d124      	bne.n	8014314 <_dtoa_r+0x64c>
 80142ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80142ce:	4bb0      	ldr	r3, [pc, #704]	; (8014590 <_dtoa_r+0x8c8>)
 80142d0:	f7eb ffb8 	bl	8000244 <__adddf3>
 80142d4:	4602      	mov	r2, r0
 80142d6:	460b      	mov	r3, r1
 80142d8:	4630      	mov	r0, r6
 80142da:	4639      	mov	r1, r7
 80142dc:	f7ec fbf8 	bl	8000ad0 <__aeabi_dcmpgt>
 80142e0:	2800      	cmp	r0, #0
 80142e2:	d163      	bne.n	80143ac <_dtoa_r+0x6e4>
 80142e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80142e8:	2000      	movs	r0, #0
 80142ea:	49a9      	ldr	r1, [pc, #676]	; (8014590 <_dtoa_r+0x8c8>)
 80142ec:	f7eb ffa8 	bl	8000240 <__aeabi_dsub>
 80142f0:	4602      	mov	r2, r0
 80142f2:	460b      	mov	r3, r1
 80142f4:	4630      	mov	r0, r6
 80142f6:	4639      	mov	r1, r7
 80142f8:	f7ec fbcc 	bl	8000a94 <__aeabi_dcmplt>
 80142fc:	2800      	cmp	r0, #0
 80142fe:	f43f af1d 	beq.w	801413c <_dtoa_r+0x474>
 8014302:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014304:	1e7b      	subs	r3, r7, #1
 8014306:	9314      	str	r3, [sp, #80]	; 0x50
 8014308:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801430c:	2b30      	cmp	r3, #48	; 0x30
 801430e:	d0f8      	beq.n	8014302 <_dtoa_r+0x63a>
 8014310:	46c2      	mov	sl, r8
 8014312:	e03b      	b.n	801438c <_dtoa_r+0x6c4>
 8014314:	4b9f      	ldr	r3, [pc, #636]	; (8014594 <_dtoa_r+0x8cc>)
 8014316:	f7ec f94b 	bl	80005b0 <__aeabi_dmul>
 801431a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801431e:	e7bc      	b.n	801429a <_dtoa_r+0x5d2>
 8014320:	9f03      	ldr	r7, [sp, #12]
 8014322:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801432a:	4640      	mov	r0, r8
 801432c:	4649      	mov	r1, r9
 801432e:	f7ec fa69 	bl	8000804 <__aeabi_ddiv>
 8014332:	f7ec fbed 	bl	8000b10 <__aeabi_d2iz>
 8014336:	4604      	mov	r4, r0
 8014338:	f7ec f8d0 	bl	80004dc <__aeabi_i2d>
 801433c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014340:	f7ec f936 	bl	80005b0 <__aeabi_dmul>
 8014344:	4602      	mov	r2, r0
 8014346:	460b      	mov	r3, r1
 8014348:	4640      	mov	r0, r8
 801434a:	4649      	mov	r1, r9
 801434c:	f7eb ff78 	bl	8000240 <__aeabi_dsub>
 8014350:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8014354:	f807 6b01 	strb.w	r6, [r7], #1
 8014358:	9e03      	ldr	r6, [sp, #12]
 801435a:	f8dd c020 	ldr.w	ip, [sp, #32]
 801435e:	1bbe      	subs	r6, r7, r6
 8014360:	45b4      	cmp	ip, r6
 8014362:	4602      	mov	r2, r0
 8014364:	460b      	mov	r3, r1
 8014366:	d136      	bne.n	80143d6 <_dtoa_r+0x70e>
 8014368:	f7eb ff6c 	bl	8000244 <__adddf3>
 801436c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014370:	4680      	mov	r8, r0
 8014372:	4689      	mov	r9, r1
 8014374:	f7ec fbac 	bl	8000ad0 <__aeabi_dcmpgt>
 8014378:	bb58      	cbnz	r0, 80143d2 <_dtoa_r+0x70a>
 801437a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801437e:	4640      	mov	r0, r8
 8014380:	4649      	mov	r1, r9
 8014382:	f7ec fb7d 	bl	8000a80 <__aeabi_dcmpeq>
 8014386:	b108      	cbz	r0, 801438c <_dtoa_r+0x6c4>
 8014388:	07e1      	lsls	r1, r4, #31
 801438a:	d422      	bmi.n	80143d2 <_dtoa_r+0x70a>
 801438c:	4628      	mov	r0, r5
 801438e:	4659      	mov	r1, fp
 8014390:	f000 faf4 	bl	801497c <_Bfree>
 8014394:	2300      	movs	r3, #0
 8014396:	703b      	strb	r3, [r7, #0]
 8014398:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801439a:	f10a 0001 	add.w	r0, sl, #1
 801439e:	6018      	str	r0, [r3, #0]
 80143a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	f43f acde 	beq.w	8013d64 <_dtoa_r+0x9c>
 80143a8:	601f      	str	r7, [r3, #0]
 80143aa:	e4db      	b.n	8013d64 <_dtoa_r+0x9c>
 80143ac:	4627      	mov	r7, r4
 80143ae:	463b      	mov	r3, r7
 80143b0:	461f      	mov	r7, r3
 80143b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143b6:	2a39      	cmp	r2, #57	; 0x39
 80143b8:	d107      	bne.n	80143ca <_dtoa_r+0x702>
 80143ba:	9a03      	ldr	r2, [sp, #12]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d1f7      	bne.n	80143b0 <_dtoa_r+0x6e8>
 80143c0:	2230      	movs	r2, #48	; 0x30
 80143c2:	9903      	ldr	r1, [sp, #12]
 80143c4:	f108 0801 	add.w	r8, r8, #1
 80143c8:	700a      	strb	r2, [r1, #0]
 80143ca:	781a      	ldrb	r2, [r3, #0]
 80143cc:	3201      	adds	r2, #1
 80143ce:	701a      	strb	r2, [r3, #0]
 80143d0:	e79e      	b.n	8014310 <_dtoa_r+0x648>
 80143d2:	46d0      	mov	r8, sl
 80143d4:	e7eb      	b.n	80143ae <_dtoa_r+0x6e6>
 80143d6:	2200      	movs	r2, #0
 80143d8:	4b6e      	ldr	r3, [pc, #440]	; (8014594 <_dtoa_r+0x8cc>)
 80143da:	f7ec f8e9 	bl	80005b0 <__aeabi_dmul>
 80143de:	2200      	movs	r2, #0
 80143e0:	2300      	movs	r3, #0
 80143e2:	4680      	mov	r8, r0
 80143e4:	4689      	mov	r9, r1
 80143e6:	f7ec fb4b 	bl	8000a80 <__aeabi_dcmpeq>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d09b      	beq.n	8014326 <_dtoa_r+0x65e>
 80143ee:	e7cd      	b.n	801438c <_dtoa_r+0x6c4>
 80143f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143f2:	2a00      	cmp	r2, #0
 80143f4:	f000 80d0 	beq.w	8014598 <_dtoa_r+0x8d0>
 80143f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80143fa:	2a01      	cmp	r2, #1
 80143fc:	f300 80ae 	bgt.w	801455c <_dtoa_r+0x894>
 8014400:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014402:	2a00      	cmp	r2, #0
 8014404:	f000 80a6 	beq.w	8014554 <_dtoa_r+0x88c>
 8014408:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801440c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801440e:	9f06      	ldr	r7, [sp, #24]
 8014410:	9a06      	ldr	r2, [sp, #24]
 8014412:	2101      	movs	r1, #1
 8014414:	441a      	add	r2, r3
 8014416:	9206      	str	r2, [sp, #24]
 8014418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801441a:	4628      	mov	r0, r5
 801441c:	441a      	add	r2, r3
 801441e:	9209      	str	r2, [sp, #36]	; 0x24
 8014420:	f000 fb62 	bl	8014ae8 <__i2b>
 8014424:	4606      	mov	r6, r0
 8014426:	2f00      	cmp	r7, #0
 8014428:	dd0c      	ble.n	8014444 <_dtoa_r+0x77c>
 801442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801442c:	2b00      	cmp	r3, #0
 801442e:	dd09      	ble.n	8014444 <_dtoa_r+0x77c>
 8014430:	42bb      	cmp	r3, r7
 8014432:	bfa8      	it	ge
 8014434:	463b      	movge	r3, r7
 8014436:	9a06      	ldr	r2, [sp, #24]
 8014438:	1aff      	subs	r7, r7, r3
 801443a:	1ad2      	subs	r2, r2, r3
 801443c:	9206      	str	r2, [sp, #24]
 801443e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	9309      	str	r3, [sp, #36]	; 0x24
 8014444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014446:	b1f3      	cbz	r3, 8014486 <_dtoa_r+0x7be>
 8014448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801444a:	2b00      	cmp	r3, #0
 801444c:	f000 80a8 	beq.w	80145a0 <_dtoa_r+0x8d8>
 8014450:	2c00      	cmp	r4, #0
 8014452:	dd10      	ble.n	8014476 <_dtoa_r+0x7ae>
 8014454:	4631      	mov	r1, r6
 8014456:	4622      	mov	r2, r4
 8014458:	4628      	mov	r0, r5
 801445a:	f000 fc03 	bl	8014c64 <__pow5mult>
 801445e:	465a      	mov	r2, fp
 8014460:	4601      	mov	r1, r0
 8014462:	4606      	mov	r6, r0
 8014464:	4628      	mov	r0, r5
 8014466:	f000 fb55 	bl	8014b14 <__multiply>
 801446a:	4680      	mov	r8, r0
 801446c:	4659      	mov	r1, fp
 801446e:	4628      	mov	r0, r5
 8014470:	f000 fa84 	bl	801497c <_Bfree>
 8014474:	46c3      	mov	fp, r8
 8014476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014478:	1b1a      	subs	r2, r3, r4
 801447a:	d004      	beq.n	8014486 <_dtoa_r+0x7be>
 801447c:	4659      	mov	r1, fp
 801447e:	4628      	mov	r0, r5
 8014480:	f000 fbf0 	bl	8014c64 <__pow5mult>
 8014484:	4683      	mov	fp, r0
 8014486:	2101      	movs	r1, #1
 8014488:	4628      	mov	r0, r5
 801448a:	f000 fb2d 	bl	8014ae8 <__i2b>
 801448e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014490:	4604      	mov	r4, r0
 8014492:	2b00      	cmp	r3, #0
 8014494:	f340 8086 	ble.w	80145a4 <_dtoa_r+0x8dc>
 8014498:	461a      	mov	r2, r3
 801449a:	4601      	mov	r1, r0
 801449c:	4628      	mov	r0, r5
 801449e:	f000 fbe1 	bl	8014c64 <__pow5mult>
 80144a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80144a4:	4604      	mov	r4, r0
 80144a6:	2b01      	cmp	r3, #1
 80144a8:	dd7f      	ble.n	80145aa <_dtoa_r+0x8e2>
 80144aa:	f04f 0800 	mov.w	r8, #0
 80144ae:	6923      	ldr	r3, [r4, #16]
 80144b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80144b4:	6918      	ldr	r0, [r3, #16]
 80144b6:	f000 fac9 	bl	8014a4c <__hi0bits>
 80144ba:	f1c0 0020 	rsb	r0, r0, #32
 80144be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144c0:	4418      	add	r0, r3
 80144c2:	f010 001f 	ands.w	r0, r0, #31
 80144c6:	f000 8092 	beq.w	80145ee <_dtoa_r+0x926>
 80144ca:	f1c0 0320 	rsb	r3, r0, #32
 80144ce:	2b04      	cmp	r3, #4
 80144d0:	f340 808a 	ble.w	80145e8 <_dtoa_r+0x920>
 80144d4:	f1c0 001c 	rsb	r0, r0, #28
 80144d8:	9b06      	ldr	r3, [sp, #24]
 80144da:	4407      	add	r7, r0
 80144dc:	4403      	add	r3, r0
 80144de:	9306      	str	r3, [sp, #24]
 80144e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144e2:	4403      	add	r3, r0
 80144e4:	9309      	str	r3, [sp, #36]	; 0x24
 80144e6:	9b06      	ldr	r3, [sp, #24]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	dd05      	ble.n	80144f8 <_dtoa_r+0x830>
 80144ec:	4659      	mov	r1, fp
 80144ee:	461a      	mov	r2, r3
 80144f0:	4628      	mov	r0, r5
 80144f2:	f000 fc11 	bl	8014d18 <__lshift>
 80144f6:	4683      	mov	fp, r0
 80144f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	dd05      	ble.n	801450a <_dtoa_r+0x842>
 80144fe:	4621      	mov	r1, r4
 8014500:	461a      	mov	r2, r3
 8014502:	4628      	mov	r0, r5
 8014504:	f000 fc08 	bl	8014d18 <__lshift>
 8014508:	4604      	mov	r4, r0
 801450a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801450c:	2b00      	cmp	r3, #0
 801450e:	d070      	beq.n	80145f2 <_dtoa_r+0x92a>
 8014510:	4621      	mov	r1, r4
 8014512:	4658      	mov	r0, fp
 8014514:	f000 fc70 	bl	8014df8 <__mcmp>
 8014518:	2800      	cmp	r0, #0
 801451a:	da6a      	bge.n	80145f2 <_dtoa_r+0x92a>
 801451c:	2300      	movs	r3, #0
 801451e:	4659      	mov	r1, fp
 8014520:	220a      	movs	r2, #10
 8014522:	4628      	mov	r0, r5
 8014524:	f000 fa4c 	bl	80149c0 <__multadd>
 8014528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801452a:	4683      	mov	fp, r0
 801452c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014530:	2b00      	cmp	r3, #0
 8014532:	f000 8194 	beq.w	801485e <_dtoa_r+0xb96>
 8014536:	4631      	mov	r1, r6
 8014538:	2300      	movs	r3, #0
 801453a:	220a      	movs	r2, #10
 801453c:	4628      	mov	r0, r5
 801453e:	f000 fa3f 	bl	80149c0 <__multadd>
 8014542:	f1b9 0f00 	cmp.w	r9, #0
 8014546:	4606      	mov	r6, r0
 8014548:	f300 8093 	bgt.w	8014672 <_dtoa_r+0x9aa>
 801454c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801454e:	2b02      	cmp	r3, #2
 8014550:	dc57      	bgt.n	8014602 <_dtoa_r+0x93a>
 8014552:	e08e      	b.n	8014672 <_dtoa_r+0x9aa>
 8014554:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014556:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801455a:	e757      	b.n	801440c <_dtoa_r+0x744>
 801455c:	9b08      	ldr	r3, [sp, #32]
 801455e:	1e5c      	subs	r4, r3, #1
 8014560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014562:	42a3      	cmp	r3, r4
 8014564:	bfb7      	itett	lt
 8014566:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014568:	1b1c      	subge	r4, r3, r4
 801456a:	1ae2      	sublt	r2, r4, r3
 801456c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801456e:	bfbe      	ittt	lt
 8014570:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014572:	189b      	addlt	r3, r3, r2
 8014574:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014576:	9b08      	ldr	r3, [sp, #32]
 8014578:	bfb8      	it	lt
 801457a:	2400      	movlt	r4, #0
 801457c:	2b00      	cmp	r3, #0
 801457e:	bfbb      	ittet	lt
 8014580:	9b06      	ldrlt	r3, [sp, #24]
 8014582:	9a08      	ldrlt	r2, [sp, #32]
 8014584:	9f06      	ldrge	r7, [sp, #24]
 8014586:	1a9f      	sublt	r7, r3, r2
 8014588:	bfac      	ite	ge
 801458a:	9b08      	ldrge	r3, [sp, #32]
 801458c:	2300      	movlt	r3, #0
 801458e:	e73f      	b.n	8014410 <_dtoa_r+0x748>
 8014590:	3fe00000 	.word	0x3fe00000
 8014594:	40240000 	.word	0x40240000
 8014598:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801459a:	9f06      	ldr	r7, [sp, #24]
 801459c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801459e:	e742      	b.n	8014426 <_dtoa_r+0x75e>
 80145a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145a2:	e76b      	b.n	801447c <_dtoa_r+0x7b4>
 80145a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	dc19      	bgt.n	80145de <_dtoa_r+0x916>
 80145aa:	9b04      	ldr	r3, [sp, #16]
 80145ac:	b9bb      	cbnz	r3, 80145de <_dtoa_r+0x916>
 80145ae:	9b05      	ldr	r3, [sp, #20]
 80145b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145b4:	b99b      	cbnz	r3, 80145de <_dtoa_r+0x916>
 80145b6:	9b05      	ldr	r3, [sp, #20]
 80145b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145bc:	0d1b      	lsrs	r3, r3, #20
 80145be:	051b      	lsls	r3, r3, #20
 80145c0:	b183      	cbz	r3, 80145e4 <_dtoa_r+0x91c>
 80145c2:	f04f 0801 	mov.w	r8, #1
 80145c6:	9b06      	ldr	r3, [sp, #24]
 80145c8:	3301      	adds	r3, #1
 80145ca:	9306      	str	r3, [sp, #24]
 80145cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145ce:	3301      	adds	r3, #1
 80145d0:	9309      	str	r3, [sp, #36]	; 0x24
 80145d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	f47f af6a 	bne.w	80144ae <_dtoa_r+0x7e6>
 80145da:	2001      	movs	r0, #1
 80145dc:	e76f      	b.n	80144be <_dtoa_r+0x7f6>
 80145de:	f04f 0800 	mov.w	r8, #0
 80145e2:	e7f6      	b.n	80145d2 <_dtoa_r+0x90a>
 80145e4:	4698      	mov	r8, r3
 80145e6:	e7f4      	b.n	80145d2 <_dtoa_r+0x90a>
 80145e8:	f43f af7d 	beq.w	80144e6 <_dtoa_r+0x81e>
 80145ec:	4618      	mov	r0, r3
 80145ee:	301c      	adds	r0, #28
 80145f0:	e772      	b.n	80144d8 <_dtoa_r+0x810>
 80145f2:	9b08      	ldr	r3, [sp, #32]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	dc36      	bgt.n	8014666 <_dtoa_r+0x99e>
 80145f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145fa:	2b02      	cmp	r3, #2
 80145fc:	dd33      	ble.n	8014666 <_dtoa_r+0x99e>
 80145fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014602:	f1b9 0f00 	cmp.w	r9, #0
 8014606:	d10d      	bne.n	8014624 <_dtoa_r+0x95c>
 8014608:	4621      	mov	r1, r4
 801460a:	464b      	mov	r3, r9
 801460c:	2205      	movs	r2, #5
 801460e:	4628      	mov	r0, r5
 8014610:	f000 f9d6 	bl	80149c0 <__multadd>
 8014614:	4601      	mov	r1, r0
 8014616:	4604      	mov	r4, r0
 8014618:	4658      	mov	r0, fp
 801461a:	f000 fbed 	bl	8014df8 <__mcmp>
 801461e:	2800      	cmp	r0, #0
 8014620:	f73f adb8 	bgt.w	8014194 <_dtoa_r+0x4cc>
 8014624:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014626:	9f03      	ldr	r7, [sp, #12]
 8014628:	ea6f 0a03 	mvn.w	sl, r3
 801462c:	f04f 0800 	mov.w	r8, #0
 8014630:	4621      	mov	r1, r4
 8014632:	4628      	mov	r0, r5
 8014634:	f000 f9a2 	bl	801497c <_Bfree>
 8014638:	2e00      	cmp	r6, #0
 801463a:	f43f aea7 	beq.w	801438c <_dtoa_r+0x6c4>
 801463e:	f1b8 0f00 	cmp.w	r8, #0
 8014642:	d005      	beq.n	8014650 <_dtoa_r+0x988>
 8014644:	45b0      	cmp	r8, r6
 8014646:	d003      	beq.n	8014650 <_dtoa_r+0x988>
 8014648:	4641      	mov	r1, r8
 801464a:	4628      	mov	r0, r5
 801464c:	f000 f996 	bl	801497c <_Bfree>
 8014650:	4631      	mov	r1, r6
 8014652:	4628      	mov	r0, r5
 8014654:	f000 f992 	bl	801497c <_Bfree>
 8014658:	e698      	b.n	801438c <_dtoa_r+0x6c4>
 801465a:	2400      	movs	r4, #0
 801465c:	4626      	mov	r6, r4
 801465e:	e7e1      	b.n	8014624 <_dtoa_r+0x95c>
 8014660:	46c2      	mov	sl, r8
 8014662:	4626      	mov	r6, r4
 8014664:	e596      	b.n	8014194 <_dtoa_r+0x4cc>
 8014666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801466c:	2b00      	cmp	r3, #0
 801466e:	f000 80fd 	beq.w	801486c <_dtoa_r+0xba4>
 8014672:	2f00      	cmp	r7, #0
 8014674:	dd05      	ble.n	8014682 <_dtoa_r+0x9ba>
 8014676:	4631      	mov	r1, r6
 8014678:	463a      	mov	r2, r7
 801467a:	4628      	mov	r0, r5
 801467c:	f000 fb4c 	bl	8014d18 <__lshift>
 8014680:	4606      	mov	r6, r0
 8014682:	f1b8 0f00 	cmp.w	r8, #0
 8014686:	d05c      	beq.n	8014742 <_dtoa_r+0xa7a>
 8014688:	4628      	mov	r0, r5
 801468a:	6871      	ldr	r1, [r6, #4]
 801468c:	f000 f936 	bl	80148fc <_Balloc>
 8014690:	4607      	mov	r7, r0
 8014692:	b928      	cbnz	r0, 80146a0 <_dtoa_r+0x9d8>
 8014694:	4602      	mov	r2, r0
 8014696:	f240 21ea 	movw	r1, #746	; 0x2ea
 801469a:	4b7f      	ldr	r3, [pc, #508]	; (8014898 <_dtoa_r+0xbd0>)
 801469c:	f7ff bb28 	b.w	8013cf0 <_dtoa_r+0x28>
 80146a0:	6932      	ldr	r2, [r6, #16]
 80146a2:	f106 010c 	add.w	r1, r6, #12
 80146a6:	3202      	adds	r2, #2
 80146a8:	0092      	lsls	r2, r2, #2
 80146aa:	300c      	adds	r0, #12
 80146ac:	f000 f90c 	bl	80148c8 <memcpy>
 80146b0:	2201      	movs	r2, #1
 80146b2:	4639      	mov	r1, r7
 80146b4:	4628      	mov	r0, r5
 80146b6:	f000 fb2f 	bl	8014d18 <__lshift>
 80146ba:	46b0      	mov	r8, r6
 80146bc:	4606      	mov	r6, r0
 80146be:	9b03      	ldr	r3, [sp, #12]
 80146c0:	3301      	adds	r3, #1
 80146c2:	9308      	str	r3, [sp, #32]
 80146c4:	9b03      	ldr	r3, [sp, #12]
 80146c6:	444b      	add	r3, r9
 80146c8:	930a      	str	r3, [sp, #40]	; 0x28
 80146ca:	9b04      	ldr	r3, [sp, #16]
 80146cc:	f003 0301 	and.w	r3, r3, #1
 80146d0:	9309      	str	r3, [sp, #36]	; 0x24
 80146d2:	9b08      	ldr	r3, [sp, #32]
 80146d4:	4621      	mov	r1, r4
 80146d6:	3b01      	subs	r3, #1
 80146d8:	4658      	mov	r0, fp
 80146da:	9304      	str	r3, [sp, #16]
 80146dc:	f7ff fa66 	bl	8013bac <quorem>
 80146e0:	4603      	mov	r3, r0
 80146e2:	4641      	mov	r1, r8
 80146e4:	3330      	adds	r3, #48	; 0x30
 80146e6:	9006      	str	r0, [sp, #24]
 80146e8:	4658      	mov	r0, fp
 80146ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80146ec:	f000 fb84 	bl	8014df8 <__mcmp>
 80146f0:	4632      	mov	r2, r6
 80146f2:	4681      	mov	r9, r0
 80146f4:	4621      	mov	r1, r4
 80146f6:	4628      	mov	r0, r5
 80146f8:	f000 fb9a 	bl	8014e30 <__mdiff>
 80146fc:	68c2      	ldr	r2, [r0, #12]
 80146fe:	4607      	mov	r7, r0
 8014700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014702:	bb02      	cbnz	r2, 8014746 <_dtoa_r+0xa7e>
 8014704:	4601      	mov	r1, r0
 8014706:	4658      	mov	r0, fp
 8014708:	f000 fb76 	bl	8014df8 <__mcmp>
 801470c:	4602      	mov	r2, r0
 801470e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014710:	4639      	mov	r1, r7
 8014712:	4628      	mov	r0, r5
 8014714:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8014718:	f000 f930 	bl	801497c <_Bfree>
 801471c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801471e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014720:	9f08      	ldr	r7, [sp, #32]
 8014722:	ea43 0102 	orr.w	r1, r3, r2
 8014726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014728:	430b      	orrs	r3, r1
 801472a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801472c:	d10d      	bne.n	801474a <_dtoa_r+0xa82>
 801472e:	2b39      	cmp	r3, #57	; 0x39
 8014730:	d029      	beq.n	8014786 <_dtoa_r+0xabe>
 8014732:	f1b9 0f00 	cmp.w	r9, #0
 8014736:	dd01      	ble.n	801473c <_dtoa_r+0xa74>
 8014738:	9b06      	ldr	r3, [sp, #24]
 801473a:	3331      	adds	r3, #49	; 0x31
 801473c:	9a04      	ldr	r2, [sp, #16]
 801473e:	7013      	strb	r3, [r2, #0]
 8014740:	e776      	b.n	8014630 <_dtoa_r+0x968>
 8014742:	4630      	mov	r0, r6
 8014744:	e7b9      	b.n	80146ba <_dtoa_r+0x9f2>
 8014746:	2201      	movs	r2, #1
 8014748:	e7e2      	b.n	8014710 <_dtoa_r+0xa48>
 801474a:	f1b9 0f00 	cmp.w	r9, #0
 801474e:	db06      	blt.n	801475e <_dtoa_r+0xa96>
 8014750:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014752:	ea41 0909 	orr.w	r9, r1, r9
 8014756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014758:	ea59 0101 	orrs.w	r1, r9, r1
 801475c:	d120      	bne.n	80147a0 <_dtoa_r+0xad8>
 801475e:	2a00      	cmp	r2, #0
 8014760:	ddec      	ble.n	801473c <_dtoa_r+0xa74>
 8014762:	4659      	mov	r1, fp
 8014764:	2201      	movs	r2, #1
 8014766:	4628      	mov	r0, r5
 8014768:	9308      	str	r3, [sp, #32]
 801476a:	f000 fad5 	bl	8014d18 <__lshift>
 801476e:	4621      	mov	r1, r4
 8014770:	4683      	mov	fp, r0
 8014772:	f000 fb41 	bl	8014df8 <__mcmp>
 8014776:	2800      	cmp	r0, #0
 8014778:	9b08      	ldr	r3, [sp, #32]
 801477a:	dc02      	bgt.n	8014782 <_dtoa_r+0xaba>
 801477c:	d1de      	bne.n	801473c <_dtoa_r+0xa74>
 801477e:	07da      	lsls	r2, r3, #31
 8014780:	d5dc      	bpl.n	801473c <_dtoa_r+0xa74>
 8014782:	2b39      	cmp	r3, #57	; 0x39
 8014784:	d1d8      	bne.n	8014738 <_dtoa_r+0xa70>
 8014786:	2339      	movs	r3, #57	; 0x39
 8014788:	9a04      	ldr	r2, [sp, #16]
 801478a:	7013      	strb	r3, [r2, #0]
 801478c:	463b      	mov	r3, r7
 801478e:	461f      	mov	r7, r3
 8014790:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8014794:	3b01      	subs	r3, #1
 8014796:	2a39      	cmp	r2, #57	; 0x39
 8014798:	d050      	beq.n	801483c <_dtoa_r+0xb74>
 801479a:	3201      	adds	r2, #1
 801479c:	701a      	strb	r2, [r3, #0]
 801479e:	e747      	b.n	8014630 <_dtoa_r+0x968>
 80147a0:	2a00      	cmp	r2, #0
 80147a2:	dd03      	ble.n	80147ac <_dtoa_r+0xae4>
 80147a4:	2b39      	cmp	r3, #57	; 0x39
 80147a6:	d0ee      	beq.n	8014786 <_dtoa_r+0xabe>
 80147a8:	3301      	adds	r3, #1
 80147aa:	e7c7      	b.n	801473c <_dtoa_r+0xa74>
 80147ac:	9a08      	ldr	r2, [sp, #32]
 80147ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80147b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80147b4:	428a      	cmp	r2, r1
 80147b6:	d02a      	beq.n	801480e <_dtoa_r+0xb46>
 80147b8:	4659      	mov	r1, fp
 80147ba:	2300      	movs	r3, #0
 80147bc:	220a      	movs	r2, #10
 80147be:	4628      	mov	r0, r5
 80147c0:	f000 f8fe 	bl	80149c0 <__multadd>
 80147c4:	45b0      	cmp	r8, r6
 80147c6:	4683      	mov	fp, r0
 80147c8:	f04f 0300 	mov.w	r3, #0
 80147cc:	f04f 020a 	mov.w	r2, #10
 80147d0:	4641      	mov	r1, r8
 80147d2:	4628      	mov	r0, r5
 80147d4:	d107      	bne.n	80147e6 <_dtoa_r+0xb1e>
 80147d6:	f000 f8f3 	bl	80149c0 <__multadd>
 80147da:	4680      	mov	r8, r0
 80147dc:	4606      	mov	r6, r0
 80147de:	9b08      	ldr	r3, [sp, #32]
 80147e0:	3301      	adds	r3, #1
 80147e2:	9308      	str	r3, [sp, #32]
 80147e4:	e775      	b.n	80146d2 <_dtoa_r+0xa0a>
 80147e6:	f000 f8eb 	bl	80149c0 <__multadd>
 80147ea:	4631      	mov	r1, r6
 80147ec:	4680      	mov	r8, r0
 80147ee:	2300      	movs	r3, #0
 80147f0:	220a      	movs	r2, #10
 80147f2:	4628      	mov	r0, r5
 80147f4:	f000 f8e4 	bl	80149c0 <__multadd>
 80147f8:	4606      	mov	r6, r0
 80147fa:	e7f0      	b.n	80147de <_dtoa_r+0xb16>
 80147fc:	f1b9 0f00 	cmp.w	r9, #0
 8014800:	bfcc      	ite	gt
 8014802:	464f      	movgt	r7, r9
 8014804:	2701      	movle	r7, #1
 8014806:	f04f 0800 	mov.w	r8, #0
 801480a:	9a03      	ldr	r2, [sp, #12]
 801480c:	4417      	add	r7, r2
 801480e:	4659      	mov	r1, fp
 8014810:	2201      	movs	r2, #1
 8014812:	4628      	mov	r0, r5
 8014814:	9308      	str	r3, [sp, #32]
 8014816:	f000 fa7f 	bl	8014d18 <__lshift>
 801481a:	4621      	mov	r1, r4
 801481c:	4683      	mov	fp, r0
 801481e:	f000 faeb 	bl	8014df8 <__mcmp>
 8014822:	2800      	cmp	r0, #0
 8014824:	dcb2      	bgt.n	801478c <_dtoa_r+0xac4>
 8014826:	d102      	bne.n	801482e <_dtoa_r+0xb66>
 8014828:	9b08      	ldr	r3, [sp, #32]
 801482a:	07db      	lsls	r3, r3, #31
 801482c:	d4ae      	bmi.n	801478c <_dtoa_r+0xac4>
 801482e:	463b      	mov	r3, r7
 8014830:	461f      	mov	r7, r3
 8014832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014836:	2a30      	cmp	r2, #48	; 0x30
 8014838:	d0fa      	beq.n	8014830 <_dtoa_r+0xb68>
 801483a:	e6f9      	b.n	8014630 <_dtoa_r+0x968>
 801483c:	9a03      	ldr	r2, [sp, #12]
 801483e:	429a      	cmp	r2, r3
 8014840:	d1a5      	bne.n	801478e <_dtoa_r+0xac6>
 8014842:	2331      	movs	r3, #49	; 0x31
 8014844:	f10a 0a01 	add.w	sl, sl, #1
 8014848:	e779      	b.n	801473e <_dtoa_r+0xa76>
 801484a:	4b14      	ldr	r3, [pc, #80]	; (801489c <_dtoa_r+0xbd4>)
 801484c:	f7ff baa8 	b.w	8013da0 <_dtoa_r+0xd8>
 8014850:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8014852:	2b00      	cmp	r3, #0
 8014854:	f47f aa81 	bne.w	8013d5a <_dtoa_r+0x92>
 8014858:	4b11      	ldr	r3, [pc, #68]	; (80148a0 <_dtoa_r+0xbd8>)
 801485a:	f7ff baa1 	b.w	8013da0 <_dtoa_r+0xd8>
 801485e:	f1b9 0f00 	cmp.w	r9, #0
 8014862:	dc03      	bgt.n	801486c <_dtoa_r+0xba4>
 8014864:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014866:	2b02      	cmp	r3, #2
 8014868:	f73f aecb 	bgt.w	8014602 <_dtoa_r+0x93a>
 801486c:	9f03      	ldr	r7, [sp, #12]
 801486e:	4621      	mov	r1, r4
 8014870:	4658      	mov	r0, fp
 8014872:	f7ff f99b 	bl	8013bac <quorem>
 8014876:	9a03      	ldr	r2, [sp, #12]
 8014878:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801487c:	f807 3b01 	strb.w	r3, [r7], #1
 8014880:	1aba      	subs	r2, r7, r2
 8014882:	4591      	cmp	r9, r2
 8014884:	ddba      	ble.n	80147fc <_dtoa_r+0xb34>
 8014886:	4659      	mov	r1, fp
 8014888:	2300      	movs	r3, #0
 801488a:	220a      	movs	r2, #10
 801488c:	4628      	mov	r0, r5
 801488e:	f000 f897 	bl	80149c0 <__multadd>
 8014892:	4683      	mov	fp, r0
 8014894:	e7eb      	b.n	801486e <_dtoa_r+0xba6>
 8014896:	bf00      	nop
 8014898:	0802f5df 	.word	0x0802f5df
 801489c:	0802f53c 	.word	0x0802f53c
 80148a0:	0802f560 	.word	0x0802f560

080148a4 <_localeconv_r>:
 80148a4:	4800      	ldr	r0, [pc, #0]	; (80148a8 <_localeconv_r+0x4>)
 80148a6:	4770      	bx	lr
 80148a8:	200002c8 	.word	0x200002c8

080148ac <memchr>:
 80148ac:	4603      	mov	r3, r0
 80148ae:	b510      	push	{r4, lr}
 80148b0:	b2c9      	uxtb	r1, r1
 80148b2:	4402      	add	r2, r0
 80148b4:	4293      	cmp	r3, r2
 80148b6:	4618      	mov	r0, r3
 80148b8:	d101      	bne.n	80148be <memchr+0x12>
 80148ba:	2000      	movs	r0, #0
 80148bc:	e003      	b.n	80148c6 <memchr+0x1a>
 80148be:	7804      	ldrb	r4, [r0, #0]
 80148c0:	3301      	adds	r3, #1
 80148c2:	428c      	cmp	r4, r1
 80148c4:	d1f6      	bne.n	80148b4 <memchr+0x8>
 80148c6:	bd10      	pop	{r4, pc}

080148c8 <memcpy>:
 80148c8:	440a      	add	r2, r1
 80148ca:	4291      	cmp	r1, r2
 80148cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80148d0:	d100      	bne.n	80148d4 <memcpy+0xc>
 80148d2:	4770      	bx	lr
 80148d4:	b510      	push	{r4, lr}
 80148d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80148da:	4291      	cmp	r1, r2
 80148dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80148e0:	d1f9      	bne.n	80148d6 <memcpy+0xe>
 80148e2:	bd10      	pop	{r4, pc}

080148e4 <__malloc_lock>:
 80148e4:	4801      	ldr	r0, [pc, #4]	; (80148ec <__malloc_lock+0x8>)
 80148e6:	f000 bd2c 	b.w	8015342 <__retarget_lock_acquire_recursive>
 80148ea:	bf00      	nop
 80148ec:	200016cc 	.word	0x200016cc

080148f0 <__malloc_unlock>:
 80148f0:	4801      	ldr	r0, [pc, #4]	; (80148f8 <__malloc_unlock+0x8>)
 80148f2:	f000 bd27 	b.w	8015344 <__retarget_lock_release_recursive>
 80148f6:	bf00      	nop
 80148f8:	200016cc 	.word	0x200016cc

080148fc <_Balloc>:
 80148fc:	b570      	push	{r4, r5, r6, lr}
 80148fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014900:	4604      	mov	r4, r0
 8014902:	460d      	mov	r5, r1
 8014904:	b976      	cbnz	r6, 8014924 <_Balloc+0x28>
 8014906:	2010      	movs	r0, #16
 8014908:	f7fe fbb2 	bl	8013070 <malloc>
 801490c:	4602      	mov	r2, r0
 801490e:	6260      	str	r0, [r4, #36]	; 0x24
 8014910:	b920      	cbnz	r0, 801491c <_Balloc+0x20>
 8014912:	2166      	movs	r1, #102	; 0x66
 8014914:	4b17      	ldr	r3, [pc, #92]	; (8014974 <_Balloc+0x78>)
 8014916:	4818      	ldr	r0, [pc, #96]	; (8014978 <_Balloc+0x7c>)
 8014918:	f000 fce2 	bl	80152e0 <__assert_func>
 801491c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014920:	6006      	str	r6, [r0, #0]
 8014922:	60c6      	str	r6, [r0, #12]
 8014924:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014926:	68f3      	ldr	r3, [r6, #12]
 8014928:	b183      	cbz	r3, 801494c <_Balloc+0x50>
 801492a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801492c:	68db      	ldr	r3, [r3, #12]
 801492e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014932:	b9b8      	cbnz	r0, 8014964 <_Balloc+0x68>
 8014934:	2101      	movs	r1, #1
 8014936:	fa01 f605 	lsl.w	r6, r1, r5
 801493a:	1d72      	adds	r2, r6, #5
 801493c:	4620      	mov	r0, r4
 801493e:	0092      	lsls	r2, r2, #2
 8014940:	f000 fb5e 	bl	8015000 <_calloc_r>
 8014944:	b160      	cbz	r0, 8014960 <_Balloc+0x64>
 8014946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801494a:	e00e      	b.n	801496a <_Balloc+0x6e>
 801494c:	2221      	movs	r2, #33	; 0x21
 801494e:	2104      	movs	r1, #4
 8014950:	4620      	mov	r0, r4
 8014952:	f000 fb55 	bl	8015000 <_calloc_r>
 8014956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014958:	60f0      	str	r0, [r6, #12]
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d1e4      	bne.n	801492a <_Balloc+0x2e>
 8014960:	2000      	movs	r0, #0
 8014962:	bd70      	pop	{r4, r5, r6, pc}
 8014964:	6802      	ldr	r2, [r0, #0]
 8014966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801496a:	2300      	movs	r3, #0
 801496c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014970:	e7f7      	b.n	8014962 <_Balloc+0x66>
 8014972:	bf00      	nop
 8014974:	0802f56d 	.word	0x0802f56d
 8014978:	0802f5f0 	.word	0x0802f5f0

0801497c <_Bfree>:
 801497c:	b570      	push	{r4, r5, r6, lr}
 801497e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014980:	4605      	mov	r5, r0
 8014982:	460c      	mov	r4, r1
 8014984:	b976      	cbnz	r6, 80149a4 <_Bfree+0x28>
 8014986:	2010      	movs	r0, #16
 8014988:	f7fe fb72 	bl	8013070 <malloc>
 801498c:	4602      	mov	r2, r0
 801498e:	6268      	str	r0, [r5, #36]	; 0x24
 8014990:	b920      	cbnz	r0, 801499c <_Bfree+0x20>
 8014992:	218a      	movs	r1, #138	; 0x8a
 8014994:	4b08      	ldr	r3, [pc, #32]	; (80149b8 <_Bfree+0x3c>)
 8014996:	4809      	ldr	r0, [pc, #36]	; (80149bc <_Bfree+0x40>)
 8014998:	f000 fca2 	bl	80152e0 <__assert_func>
 801499c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80149a0:	6006      	str	r6, [r0, #0]
 80149a2:	60c6      	str	r6, [r0, #12]
 80149a4:	b13c      	cbz	r4, 80149b6 <_Bfree+0x3a>
 80149a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80149a8:	6862      	ldr	r2, [r4, #4]
 80149aa:	68db      	ldr	r3, [r3, #12]
 80149ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80149b0:	6021      	str	r1, [r4, #0]
 80149b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80149b6:	bd70      	pop	{r4, r5, r6, pc}
 80149b8:	0802f56d 	.word	0x0802f56d
 80149bc:	0802f5f0 	.word	0x0802f5f0

080149c0 <__multadd>:
 80149c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149c4:	4607      	mov	r7, r0
 80149c6:	460c      	mov	r4, r1
 80149c8:	461e      	mov	r6, r3
 80149ca:	2000      	movs	r0, #0
 80149cc:	690d      	ldr	r5, [r1, #16]
 80149ce:	f101 0c14 	add.w	ip, r1, #20
 80149d2:	f8dc 3000 	ldr.w	r3, [ip]
 80149d6:	3001      	adds	r0, #1
 80149d8:	b299      	uxth	r1, r3
 80149da:	fb02 6101 	mla	r1, r2, r1, r6
 80149de:	0c1e      	lsrs	r6, r3, #16
 80149e0:	0c0b      	lsrs	r3, r1, #16
 80149e2:	fb02 3306 	mla	r3, r2, r6, r3
 80149e6:	b289      	uxth	r1, r1
 80149e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80149ec:	4285      	cmp	r5, r0
 80149ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80149f2:	f84c 1b04 	str.w	r1, [ip], #4
 80149f6:	dcec      	bgt.n	80149d2 <__multadd+0x12>
 80149f8:	b30e      	cbz	r6, 8014a3e <__multadd+0x7e>
 80149fa:	68a3      	ldr	r3, [r4, #8]
 80149fc:	42ab      	cmp	r3, r5
 80149fe:	dc19      	bgt.n	8014a34 <__multadd+0x74>
 8014a00:	6861      	ldr	r1, [r4, #4]
 8014a02:	4638      	mov	r0, r7
 8014a04:	3101      	adds	r1, #1
 8014a06:	f7ff ff79 	bl	80148fc <_Balloc>
 8014a0a:	4680      	mov	r8, r0
 8014a0c:	b928      	cbnz	r0, 8014a1a <__multadd+0x5a>
 8014a0e:	4602      	mov	r2, r0
 8014a10:	21b5      	movs	r1, #181	; 0xb5
 8014a12:	4b0c      	ldr	r3, [pc, #48]	; (8014a44 <__multadd+0x84>)
 8014a14:	480c      	ldr	r0, [pc, #48]	; (8014a48 <__multadd+0x88>)
 8014a16:	f000 fc63 	bl	80152e0 <__assert_func>
 8014a1a:	6922      	ldr	r2, [r4, #16]
 8014a1c:	f104 010c 	add.w	r1, r4, #12
 8014a20:	3202      	adds	r2, #2
 8014a22:	0092      	lsls	r2, r2, #2
 8014a24:	300c      	adds	r0, #12
 8014a26:	f7ff ff4f 	bl	80148c8 <memcpy>
 8014a2a:	4621      	mov	r1, r4
 8014a2c:	4638      	mov	r0, r7
 8014a2e:	f7ff ffa5 	bl	801497c <_Bfree>
 8014a32:	4644      	mov	r4, r8
 8014a34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014a38:	3501      	adds	r5, #1
 8014a3a:	615e      	str	r6, [r3, #20]
 8014a3c:	6125      	str	r5, [r4, #16]
 8014a3e:	4620      	mov	r0, r4
 8014a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a44:	0802f5df 	.word	0x0802f5df
 8014a48:	0802f5f0 	.word	0x0802f5f0

08014a4c <__hi0bits>:
 8014a4c:	0c02      	lsrs	r2, r0, #16
 8014a4e:	0412      	lsls	r2, r2, #16
 8014a50:	4603      	mov	r3, r0
 8014a52:	b9ca      	cbnz	r2, 8014a88 <__hi0bits+0x3c>
 8014a54:	0403      	lsls	r3, r0, #16
 8014a56:	2010      	movs	r0, #16
 8014a58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014a5c:	bf04      	itt	eq
 8014a5e:	021b      	lsleq	r3, r3, #8
 8014a60:	3008      	addeq	r0, #8
 8014a62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014a66:	bf04      	itt	eq
 8014a68:	011b      	lsleq	r3, r3, #4
 8014a6a:	3004      	addeq	r0, #4
 8014a6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014a70:	bf04      	itt	eq
 8014a72:	009b      	lsleq	r3, r3, #2
 8014a74:	3002      	addeq	r0, #2
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	db05      	blt.n	8014a86 <__hi0bits+0x3a>
 8014a7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014a7e:	f100 0001 	add.w	r0, r0, #1
 8014a82:	bf08      	it	eq
 8014a84:	2020      	moveq	r0, #32
 8014a86:	4770      	bx	lr
 8014a88:	2000      	movs	r0, #0
 8014a8a:	e7e5      	b.n	8014a58 <__hi0bits+0xc>

08014a8c <__lo0bits>:
 8014a8c:	6803      	ldr	r3, [r0, #0]
 8014a8e:	4602      	mov	r2, r0
 8014a90:	f013 0007 	ands.w	r0, r3, #7
 8014a94:	d00b      	beq.n	8014aae <__lo0bits+0x22>
 8014a96:	07d9      	lsls	r1, r3, #31
 8014a98:	d421      	bmi.n	8014ade <__lo0bits+0x52>
 8014a9a:	0798      	lsls	r0, r3, #30
 8014a9c:	bf49      	itett	mi
 8014a9e:	085b      	lsrmi	r3, r3, #1
 8014aa0:	089b      	lsrpl	r3, r3, #2
 8014aa2:	2001      	movmi	r0, #1
 8014aa4:	6013      	strmi	r3, [r2, #0]
 8014aa6:	bf5c      	itt	pl
 8014aa8:	2002      	movpl	r0, #2
 8014aaa:	6013      	strpl	r3, [r2, #0]
 8014aac:	4770      	bx	lr
 8014aae:	b299      	uxth	r1, r3
 8014ab0:	b909      	cbnz	r1, 8014ab6 <__lo0bits+0x2a>
 8014ab2:	2010      	movs	r0, #16
 8014ab4:	0c1b      	lsrs	r3, r3, #16
 8014ab6:	b2d9      	uxtb	r1, r3
 8014ab8:	b909      	cbnz	r1, 8014abe <__lo0bits+0x32>
 8014aba:	3008      	adds	r0, #8
 8014abc:	0a1b      	lsrs	r3, r3, #8
 8014abe:	0719      	lsls	r1, r3, #28
 8014ac0:	bf04      	itt	eq
 8014ac2:	091b      	lsreq	r3, r3, #4
 8014ac4:	3004      	addeq	r0, #4
 8014ac6:	0799      	lsls	r1, r3, #30
 8014ac8:	bf04      	itt	eq
 8014aca:	089b      	lsreq	r3, r3, #2
 8014acc:	3002      	addeq	r0, #2
 8014ace:	07d9      	lsls	r1, r3, #31
 8014ad0:	d403      	bmi.n	8014ada <__lo0bits+0x4e>
 8014ad2:	085b      	lsrs	r3, r3, #1
 8014ad4:	f100 0001 	add.w	r0, r0, #1
 8014ad8:	d003      	beq.n	8014ae2 <__lo0bits+0x56>
 8014ada:	6013      	str	r3, [r2, #0]
 8014adc:	4770      	bx	lr
 8014ade:	2000      	movs	r0, #0
 8014ae0:	4770      	bx	lr
 8014ae2:	2020      	movs	r0, #32
 8014ae4:	4770      	bx	lr
	...

08014ae8 <__i2b>:
 8014ae8:	b510      	push	{r4, lr}
 8014aea:	460c      	mov	r4, r1
 8014aec:	2101      	movs	r1, #1
 8014aee:	f7ff ff05 	bl	80148fc <_Balloc>
 8014af2:	4602      	mov	r2, r0
 8014af4:	b928      	cbnz	r0, 8014b02 <__i2b+0x1a>
 8014af6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014afa:	4b04      	ldr	r3, [pc, #16]	; (8014b0c <__i2b+0x24>)
 8014afc:	4804      	ldr	r0, [pc, #16]	; (8014b10 <__i2b+0x28>)
 8014afe:	f000 fbef 	bl	80152e0 <__assert_func>
 8014b02:	2301      	movs	r3, #1
 8014b04:	6144      	str	r4, [r0, #20]
 8014b06:	6103      	str	r3, [r0, #16]
 8014b08:	bd10      	pop	{r4, pc}
 8014b0a:	bf00      	nop
 8014b0c:	0802f5df 	.word	0x0802f5df
 8014b10:	0802f5f0 	.word	0x0802f5f0

08014b14 <__multiply>:
 8014b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b18:	4691      	mov	r9, r2
 8014b1a:	690a      	ldr	r2, [r1, #16]
 8014b1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b20:	460c      	mov	r4, r1
 8014b22:	429a      	cmp	r2, r3
 8014b24:	bfbe      	ittt	lt
 8014b26:	460b      	movlt	r3, r1
 8014b28:	464c      	movlt	r4, r9
 8014b2a:	4699      	movlt	r9, r3
 8014b2c:	6927      	ldr	r7, [r4, #16]
 8014b2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014b32:	68a3      	ldr	r3, [r4, #8]
 8014b34:	6861      	ldr	r1, [r4, #4]
 8014b36:	eb07 060a 	add.w	r6, r7, sl
 8014b3a:	42b3      	cmp	r3, r6
 8014b3c:	b085      	sub	sp, #20
 8014b3e:	bfb8      	it	lt
 8014b40:	3101      	addlt	r1, #1
 8014b42:	f7ff fedb 	bl	80148fc <_Balloc>
 8014b46:	b930      	cbnz	r0, 8014b56 <__multiply+0x42>
 8014b48:	4602      	mov	r2, r0
 8014b4a:	f240 115d 	movw	r1, #349	; 0x15d
 8014b4e:	4b43      	ldr	r3, [pc, #268]	; (8014c5c <__multiply+0x148>)
 8014b50:	4843      	ldr	r0, [pc, #268]	; (8014c60 <__multiply+0x14c>)
 8014b52:	f000 fbc5 	bl	80152e0 <__assert_func>
 8014b56:	f100 0514 	add.w	r5, r0, #20
 8014b5a:	462b      	mov	r3, r5
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014b62:	4543      	cmp	r3, r8
 8014b64:	d321      	bcc.n	8014baa <__multiply+0x96>
 8014b66:	f104 0314 	add.w	r3, r4, #20
 8014b6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014b6e:	f109 0314 	add.w	r3, r9, #20
 8014b72:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014b76:	9202      	str	r2, [sp, #8]
 8014b78:	1b3a      	subs	r2, r7, r4
 8014b7a:	3a15      	subs	r2, #21
 8014b7c:	f022 0203 	bic.w	r2, r2, #3
 8014b80:	3204      	adds	r2, #4
 8014b82:	f104 0115 	add.w	r1, r4, #21
 8014b86:	428f      	cmp	r7, r1
 8014b88:	bf38      	it	cc
 8014b8a:	2204      	movcc	r2, #4
 8014b8c:	9201      	str	r2, [sp, #4]
 8014b8e:	9a02      	ldr	r2, [sp, #8]
 8014b90:	9303      	str	r3, [sp, #12]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d80c      	bhi.n	8014bb0 <__multiply+0x9c>
 8014b96:	2e00      	cmp	r6, #0
 8014b98:	dd03      	ble.n	8014ba2 <__multiply+0x8e>
 8014b9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d059      	beq.n	8014c56 <__multiply+0x142>
 8014ba2:	6106      	str	r6, [r0, #16]
 8014ba4:	b005      	add	sp, #20
 8014ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014baa:	f843 2b04 	str.w	r2, [r3], #4
 8014bae:	e7d8      	b.n	8014b62 <__multiply+0x4e>
 8014bb0:	f8b3 a000 	ldrh.w	sl, [r3]
 8014bb4:	f1ba 0f00 	cmp.w	sl, #0
 8014bb8:	d023      	beq.n	8014c02 <__multiply+0xee>
 8014bba:	46a9      	mov	r9, r5
 8014bbc:	f04f 0c00 	mov.w	ip, #0
 8014bc0:	f104 0e14 	add.w	lr, r4, #20
 8014bc4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014bc8:	f8d9 1000 	ldr.w	r1, [r9]
 8014bcc:	fa1f fb82 	uxth.w	fp, r2
 8014bd0:	b289      	uxth	r1, r1
 8014bd2:	fb0a 110b 	mla	r1, sl, fp, r1
 8014bd6:	4461      	add	r1, ip
 8014bd8:	f8d9 c000 	ldr.w	ip, [r9]
 8014bdc:	0c12      	lsrs	r2, r2, #16
 8014bde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014be2:	fb0a c202 	mla	r2, sl, r2, ip
 8014be6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014bea:	b289      	uxth	r1, r1
 8014bec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014bf0:	4577      	cmp	r7, lr
 8014bf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014bf6:	f849 1b04 	str.w	r1, [r9], #4
 8014bfa:	d8e3      	bhi.n	8014bc4 <__multiply+0xb0>
 8014bfc:	9a01      	ldr	r2, [sp, #4]
 8014bfe:	f845 c002 	str.w	ip, [r5, r2]
 8014c02:	9a03      	ldr	r2, [sp, #12]
 8014c04:	3304      	adds	r3, #4
 8014c06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014c0a:	f1b9 0f00 	cmp.w	r9, #0
 8014c0e:	d020      	beq.n	8014c52 <__multiply+0x13e>
 8014c10:	46ae      	mov	lr, r5
 8014c12:	f04f 0a00 	mov.w	sl, #0
 8014c16:	6829      	ldr	r1, [r5, #0]
 8014c18:	f104 0c14 	add.w	ip, r4, #20
 8014c1c:	f8bc b000 	ldrh.w	fp, [ip]
 8014c20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014c24:	b289      	uxth	r1, r1
 8014c26:	fb09 220b 	mla	r2, r9, fp, r2
 8014c2a:	4492      	add	sl, r2
 8014c2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014c30:	f84e 1b04 	str.w	r1, [lr], #4
 8014c34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014c38:	f8be 1000 	ldrh.w	r1, [lr]
 8014c3c:	0c12      	lsrs	r2, r2, #16
 8014c3e:	fb09 1102 	mla	r1, r9, r2, r1
 8014c42:	4567      	cmp	r7, ip
 8014c44:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8014c48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014c4c:	d8e6      	bhi.n	8014c1c <__multiply+0x108>
 8014c4e:	9a01      	ldr	r2, [sp, #4]
 8014c50:	50a9      	str	r1, [r5, r2]
 8014c52:	3504      	adds	r5, #4
 8014c54:	e79b      	b.n	8014b8e <__multiply+0x7a>
 8014c56:	3e01      	subs	r6, #1
 8014c58:	e79d      	b.n	8014b96 <__multiply+0x82>
 8014c5a:	bf00      	nop
 8014c5c:	0802f5df 	.word	0x0802f5df
 8014c60:	0802f5f0 	.word	0x0802f5f0

08014c64 <__pow5mult>:
 8014c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c68:	4615      	mov	r5, r2
 8014c6a:	f012 0203 	ands.w	r2, r2, #3
 8014c6e:	4606      	mov	r6, r0
 8014c70:	460f      	mov	r7, r1
 8014c72:	d007      	beq.n	8014c84 <__pow5mult+0x20>
 8014c74:	4c25      	ldr	r4, [pc, #148]	; (8014d0c <__pow5mult+0xa8>)
 8014c76:	3a01      	subs	r2, #1
 8014c78:	2300      	movs	r3, #0
 8014c7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c7e:	f7ff fe9f 	bl	80149c0 <__multadd>
 8014c82:	4607      	mov	r7, r0
 8014c84:	10ad      	asrs	r5, r5, #2
 8014c86:	d03d      	beq.n	8014d04 <__pow5mult+0xa0>
 8014c88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014c8a:	b97c      	cbnz	r4, 8014cac <__pow5mult+0x48>
 8014c8c:	2010      	movs	r0, #16
 8014c8e:	f7fe f9ef 	bl	8013070 <malloc>
 8014c92:	4602      	mov	r2, r0
 8014c94:	6270      	str	r0, [r6, #36]	; 0x24
 8014c96:	b928      	cbnz	r0, 8014ca4 <__pow5mult+0x40>
 8014c98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014c9c:	4b1c      	ldr	r3, [pc, #112]	; (8014d10 <__pow5mult+0xac>)
 8014c9e:	481d      	ldr	r0, [pc, #116]	; (8014d14 <__pow5mult+0xb0>)
 8014ca0:	f000 fb1e 	bl	80152e0 <__assert_func>
 8014ca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ca8:	6004      	str	r4, [r0, #0]
 8014caa:	60c4      	str	r4, [r0, #12]
 8014cac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014cb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014cb4:	b94c      	cbnz	r4, 8014cca <__pow5mult+0x66>
 8014cb6:	f240 2171 	movw	r1, #625	; 0x271
 8014cba:	4630      	mov	r0, r6
 8014cbc:	f7ff ff14 	bl	8014ae8 <__i2b>
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8014cc8:	6003      	str	r3, [r0, #0]
 8014cca:	f04f 0900 	mov.w	r9, #0
 8014cce:	07eb      	lsls	r3, r5, #31
 8014cd0:	d50a      	bpl.n	8014ce8 <__pow5mult+0x84>
 8014cd2:	4639      	mov	r1, r7
 8014cd4:	4622      	mov	r2, r4
 8014cd6:	4630      	mov	r0, r6
 8014cd8:	f7ff ff1c 	bl	8014b14 <__multiply>
 8014cdc:	4680      	mov	r8, r0
 8014cde:	4639      	mov	r1, r7
 8014ce0:	4630      	mov	r0, r6
 8014ce2:	f7ff fe4b 	bl	801497c <_Bfree>
 8014ce6:	4647      	mov	r7, r8
 8014ce8:	106d      	asrs	r5, r5, #1
 8014cea:	d00b      	beq.n	8014d04 <__pow5mult+0xa0>
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	b938      	cbnz	r0, 8014d00 <__pow5mult+0x9c>
 8014cf0:	4622      	mov	r2, r4
 8014cf2:	4621      	mov	r1, r4
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	f7ff ff0d 	bl	8014b14 <__multiply>
 8014cfa:	6020      	str	r0, [r4, #0]
 8014cfc:	f8c0 9000 	str.w	r9, [r0]
 8014d00:	4604      	mov	r4, r0
 8014d02:	e7e4      	b.n	8014cce <__pow5mult+0x6a>
 8014d04:	4638      	mov	r0, r7
 8014d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d0a:	bf00      	nop
 8014d0c:	0802f740 	.word	0x0802f740
 8014d10:	0802f56d 	.word	0x0802f56d
 8014d14:	0802f5f0 	.word	0x0802f5f0

08014d18 <__lshift>:
 8014d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d1c:	460c      	mov	r4, r1
 8014d1e:	4607      	mov	r7, r0
 8014d20:	4691      	mov	r9, r2
 8014d22:	6923      	ldr	r3, [r4, #16]
 8014d24:	6849      	ldr	r1, [r1, #4]
 8014d26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d2a:	68a3      	ldr	r3, [r4, #8]
 8014d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d30:	f108 0601 	add.w	r6, r8, #1
 8014d34:	42b3      	cmp	r3, r6
 8014d36:	db0b      	blt.n	8014d50 <__lshift+0x38>
 8014d38:	4638      	mov	r0, r7
 8014d3a:	f7ff fddf 	bl	80148fc <_Balloc>
 8014d3e:	4605      	mov	r5, r0
 8014d40:	b948      	cbnz	r0, 8014d56 <__lshift+0x3e>
 8014d42:	4602      	mov	r2, r0
 8014d44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014d48:	4b29      	ldr	r3, [pc, #164]	; (8014df0 <__lshift+0xd8>)
 8014d4a:	482a      	ldr	r0, [pc, #168]	; (8014df4 <__lshift+0xdc>)
 8014d4c:	f000 fac8 	bl	80152e0 <__assert_func>
 8014d50:	3101      	adds	r1, #1
 8014d52:	005b      	lsls	r3, r3, #1
 8014d54:	e7ee      	b.n	8014d34 <__lshift+0x1c>
 8014d56:	2300      	movs	r3, #0
 8014d58:	f100 0114 	add.w	r1, r0, #20
 8014d5c:	f100 0210 	add.w	r2, r0, #16
 8014d60:	4618      	mov	r0, r3
 8014d62:	4553      	cmp	r3, sl
 8014d64:	db37      	blt.n	8014dd6 <__lshift+0xbe>
 8014d66:	6920      	ldr	r0, [r4, #16]
 8014d68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d6c:	f104 0314 	add.w	r3, r4, #20
 8014d70:	f019 091f 	ands.w	r9, r9, #31
 8014d74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014d7c:	d02f      	beq.n	8014dde <__lshift+0xc6>
 8014d7e:	468a      	mov	sl, r1
 8014d80:	f04f 0c00 	mov.w	ip, #0
 8014d84:	f1c9 0e20 	rsb	lr, r9, #32
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	fa02 f209 	lsl.w	r2, r2, r9
 8014d8e:	ea42 020c 	orr.w	r2, r2, ip
 8014d92:	f84a 2b04 	str.w	r2, [sl], #4
 8014d96:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d9a:	4298      	cmp	r0, r3
 8014d9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014da0:	d8f2      	bhi.n	8014d88 <__lshift+0x70>
 8014da2:	1b03      	subs	r3, r0, r4
 8014da4:	3b15      	subs	r3, #21
 8014da6:	f023 0303 	bic.w	r3, r3, #3
 8014daa:	3304      	adds	r3, #4
 8014dac:	f104 0215 	add.w	r2, r4, #21
 8014db0:	4290      	cmp	r0, r2
 8014db2:	bf38      	it	cc
 8014db4:	2304      	movcc	r3, #4
 8014db6:	f841 c003 	str.w	ip, [r1, r3]
 8014dba:	f1bc 0f00 	cmp.w	ip, #0
 8014dbe:	d001      	beq.n	8014dc4 <__lshift+0xac>
 8014dc0:	f108 0602 	add.w	r6, r8, #2
 8014dc4:	3e01      	subs	r6, #1
 8014dc6:	4638      	mov	r0, r7
 8014dc8:	4621      	mov	r1, r4
 8014dca:	612e      	str	r6, [r5, #16]
 8014dcc:	f7ff fdd6 	bl	801497c <_Bfree>
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8014dda:	3301      	adds	r3, #1
 8014ddc:	e7c1      	b.n	8014d62 <__lshift+0x4a>
 8014dde:	3904      	subs	r1, #4
 8014de0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014de4:	4298      	cmp	r0, r3
 8014de6:	f841 2f04 	str.w	r2, [r1, #4]!
 8014dea:	d8f9      	bhi.n	8014de0 <__lshift+0xc8>
 8014dec:	e7ea      	b.n	8014dc4 <__lshift+0xac>
 8014dee:	bf00      	nop
 8014df0:	0802f5df 	.word	0x0802f5df
 8014df4:	0802f5f0 	.word	0x0802f5f0

08014df8 <__mcmp>:
 8014df8:	4603      	mov	r3, r0
 8014dfa:	690a      	ldr	r2, [r1, #16]
 8014dfc:	6900      	ldr	r0, [r0, #16]
 8014dfe:	b530      	push	{r4, r5, lr}
 8014e00:	1a80      	subs	r0, r0, r2
 8014e02:	d10d      	bne.n	8014e20 <__mcmp+0x28>
 8014e04:	3314      	adds	r3, #20
 8014e06:	3114      	adds	r1, #20
 8014e08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014e0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014e10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014e14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014e18:	4295      	cmp	r5, r2
 8014e1a:	d002      	beq.n	8014e22 <__mcmp+0x2a>
 8014e1c:	d304      	bcc.n	8014e28 <__mcmp+0x30>
 8014e1e:	2001      	movs	r0, #1
 8014e20:	bd30      	pop	{r4, r5, pc}
 8014e22:	42a3      	cmp	r3, r4
 8014e24:	d3f4      	bcc.n	8014e10 <__mcmp+0x18>
 8014e26:	e7fb      	b.n	8014e20 <__mcmp+0x28>
 8014e28:	f04f 30ff 	mov.w	r0, #4294967295
 8014e2c:	e7f8      	b.n	8014e20 <__mcmp+0x28>
	...

08014e30 <__mdiff>:
 8014e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e34:	460d      	mov	r5, r1
 8014e36:	4607      	mov	r7, r0
 8014e38:	4611      	mov	r1, r2
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	4614      	mov	r4, r2
 8014e3e:	f7ff ffdb 	bl	8014df8 <__mcmp>
 8014e42:	1e06      	subs	r6, r0, #0
 8014e44:	d111      	bne.n	8014e6a <__mdiff+0x3a>
 8014e46:	4631      	mov	r1, r6
 8014e48:	4638      	mov	r0, r7
 8014e4a:	f7ff fd57 	bl	80148fc <_Balloc>
 8014e4e:	4602      	mov	r2, r0
 8014e50:	b928      	cbnz	r0, 8014e5e <__mdiff+0x2e>
 8014e52:	f240 2132 	movw	r1, #562	; 0x232
 8014e56:	4b3a      	ldr	r3, [pc, #232]	; (8014f40 <__mdiff+0x110>)
 8014e58:	483a      	ldr	r0, [pc, #232]	; (8014f44 <__mdiff+0x114>)
 8014e5a:	f000 fa41 	bl	80152e0 <__assert_func>
 8014e5e:	2301      	movs	r3, #1
 8014e60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014e64:	4610      	mov	r0, r2
 8014e66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e6a:	bfa4      	itt	ge
 8014e6c:	4623      	movge	r3, r4
 8014e6e:	462c      	movge	r4, r5
 8014e70:	4638      	mov	r0, r7
 8014e72:	6861      	ldr	r1, [r4, #4]
 8014e74:	bfa6      	itte	ge
 8014e76:	461d      	movge	r5, r3
 8014e78:	2600      	movge	r6, #0
 8014e7a:	2601      	movlt	r6, #1
 8014e7c:	f7ff fd3e 	bl	80148fc <_Balloc>
 8014e80:	4602      	mov	r2, r0
 8014e82:	b918      	cbnz	r0, 8014e8c <__mdiff+0x5c>
 8014e84:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014e88:	4b2d      	ldr	r3, [pc, #180]	; (8014f40 <__mdiff+0x110>)
 8014e8a:	e7e5      	b.n	8014e58 <__mdiff+0x28>
 8014e8c:	f102 0814 	add.w	r8, r2, #20
 8014e90:	46c2      	mov	sl, r8
 8014e92:	f04f 0c00 	mov.w	ip, #0
 8014e96:	6927      	ldr	r7, [r4, #16]
 8014e98:	60c6      	str	r6, [r0, #12]
 8014e9a:	692e      	ldr	r6, [r5, #16]
 8014e9c:	f104 0014 	add.w	r0, r4, #20
 8014ea0:	f105 0914 	add.w	r9, r5, #20
 8014ea4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014ea8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014eac:	3410      	adds	r4, #16
 8014eae:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8014eb2:	f859 3b04 	ldr.w	r3, [r9], #4
 8014eb6:	fa1f f18b 	uxth.w	r1, fp
 8014eba:	448c      	add	ip, r1
 8014ebc:	b299      	uxth	r1, r3
 8014ebe:	0c1b      	lsrs	r3, r3, #16
 8014ec0:	ebac 0101 	sub.w	r1, ip, r1
 8014ec4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014ec8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014ecc:	b289      	uxth	r1, r1
 8014ece:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014ed2:	454e      	cmp	r6, r9
 8014ed4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014ed8:	f84a 3b04 	str.w	r3, [sl], #4
 8014edc:	d8e7      	bhi.n	8014eae <__mdiff+0x7e>
 8014ede:	1b73      	subs	r3, r6, r5
 8014ee0:	3b15      	subs	r3, #21
 8014ee2:	f023 0303 	bic.w	r3, r3, #3
 8014ee6:	3515      	adds	r5, #21
 8014ee8:	3304      	adds	r3, #4
 8014eea:	42ae      	cmp	r6, r5
 8014eec:	bf38      	it	cc
 8014eee:	2304      	movcc	r3, #4
 8014ef0:	4418      	add	r0, r3
 8014ef2:	4443      	add	r3, r8
 8014ef4:	461e      	mov	r6, r3
 8014ef6:	4605      	mov	r5, r0
 8014ef8:	4575      	cmp	r5, lr
 8014efa:	d30e      	bcc.n	8014f1a <__mdiff+0xea>
 8014efc:	f10e 0103 	add.w	r1, lr, #3
 8014f00:	1a09      	subs	r1, r1, r0
 8014f02:	f021 0103 	bic.w	r1, r1, #3
 8014f06:	3803      	subs	r0, #3
 8014f08:	4586      	cmp	lr, r0
 8014f0a:	bf38      	it	cc
 8014f0c:	2100      	movcc	r1, #0
 8014f0e:	4419      	add	r1, r3
 8014f10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014f14:	b18b      	cbz	r3, 8014f3a <__mdiff+0x10a>
 8014f16:	6117      	str	r7, [r2, #16]
 8014f18:	e7a4      	b.n	8014e64 <__mdiff+0x34>
 8014f1a:	f855 8b04 	ldr.w	r8, [r5], #4
 8014f1e:	fa1f f188 	uxth.w	r1, r8
 8014f22:	4461      	add	r1, ip
 8014f24:	140c      	asrs	r4, r1, #16
 8014f26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014f2a:	b289      	uxth	r1, r1
 8014f2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014f30:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8014f34:	f846 1b04 	str.w	r1, [r6], #4
 8014f38:	e7de      	b.n	8014ef8 <__mdiff+0xc8>
 8014f3a:	3f01      	subs	r7, #1
 8014f3c:	e7e8      	b.n	8014f10 <__mdiff+0xe0>
 8014f3e:	bf00      	nop
 8014f40:	0802f5df 	.word	0x0802f5df
 8014f44:	0802f5f0 	.word	0x0802f5f0

08014f48 <__d2b>:
 8014f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014f4c:	2101      	movs	r1, #1
 8014f4e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8014f52:	4690      	mov	r8, r2
 8014f54:	461d      	mov	r5, r3
 8014f56:	f7ff fcd1 	bl	80148fc <_Balloc>
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	b930      	cbnz	r0, 8014f6c <__d2b+0x24>
 8014f5e:	4602      	mov	r2, r0
 8014f60:	f240 310a 	movw	r1, #778	; 0x30a
 8014f64:	4b24      	ldr	r3, [pc, #144]	; (8014ff8 <__d2b+0xb0>)
 8014f66:	4825      	ldr	r0, [pc, #148]	; (8014ffc <__d2b+0xb4>)
 8014f68:	f000 f9ba 	bl	80152e0 <__assert_func>
 8014f6c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8014f70:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8014f74:	bb2d      	cbnz	r5, 8014fc2 <__d2b+0x7a>
 8014f76:	9301      	str	r3, [sp, #4]
 8014f78:	f1b8 0300 	subs.w	r3, r8, #0
 8014f7c:	d026      	beq.n	8014fcc <__d2b+0x84>
 8014f7e:	4668      	mov	r0, sp
 8014f80:	9300      	str	r3, [sp, #0]
 8014f82:	f7ff fd83 	bl	8014a8c <__lo0bits>
 8014f86:	9900      	ldr	r1, [sp, #0]
 8014f88:	b1f0      	cbz	r0, 8014fc8 <__d2b+0x80>
 8014f8a:	9a01      	ldr	r2, [sp, #4]
 8014f8c:	f1c0 0320 	rsb	r3, r0, #32
 8014f90:	fa02 f303 	lsl.w	r3, r2, r3
 8014f94:	430b      	orrs	r3, r1
 8014f96:	40c2      	lsrs	r2, r0
 8014f98:	6163      	str	r3, [r4, #20]
 8014f9a:	9201      	str	r2, [sp, #4]
 8014f9c:	9b01      	ldr	r3, [sp, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	bf14      	ite	ne
 8014fa2:	2102      	movne	r1, #2
 8014fa4:	2101      	moveq	r1, #1
 8014fa6:	61a3      	str	r3, [r4, #24]
 8014fa8:	6121      	str	r1, [r4, #16]
 8014faa:	b1c5      	cbz	r5, 8014fde <__d2b+0x96>
 8014fac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014fb0:	4405      	add	r5, r0
 8014fb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014fb6:	603d      	str	r5, [r7, #0]
 8014fb8:	6030      	str	r0, [r6, #0]
 8014fba:	4620      	mov	r0, r4
 8014fbc:	b002      	add	sp, #8
 8014fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014fc6:	e7d6      	b.n	8014f76 <__d2b+0x2e>
 8014fc8:	6161      	str	r1, [r4, #20]
 8014fca:	e7e7      	b.n	8014f9c <__d2b+0x54>
 8014fcc:	a801      	add	r0, sp, #4
 8014fce:	f7ff fd5d 	bl	8014a8c <__lo0bits>
 8014fd2:	2101      	movs	r1, #1
 8014fd4:	9b01      	ldr	r3, [sp, #4]
 8014fd6:	6121      	str	r1, [r4, #16]
 8014fd8:	6163      	str	r3, [r4, #20]
 8014fda:	3020      	adds	r0, #32
 8014fdc:	e7e5      	b.n	8014faa <__d2b+0x62>
 8014fde:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8014fe2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014fe6:	6038      	str	r0, [r7, #0]
 8014fe8:	6918      	ldr	r0, [r3, #16]
 8014fea:	f7ff fd2f 	bl	8014a4c <__hi0bits>
 8014fee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8014ff2:	6031      	str	r1, [r6, #0]
 8014ff4:	e7e1      	b.n	8014fba <__d2b+0x72>
 8014ff6:	bf00      	nop
 8014ff8:	0802f5df 	.word	0x0802f5df
 8014ffc:	0802f5f0 	.word	0x0802f5f0

08015000 <_calloc_r>:
 8015000:	b570      	push	{r4, r5, r6, lr}
 8015002:	fba1 5402 	umull	r5, r4, r1, r2
 8015006:	b934      	cbnz	r4, 8015016 <_calloc_r+0x16>
 8015008:	4629      	mov	r1, r5
 801500a:	f7fe f8b1 	bl	8013170 <_malloc_r>
 801500e:	4606      	mov	r6, r0
 8015010:	b928      	cbnz	r0, 801501e <_calloc_r+0x1e>
 8015012:	4630      	mov	r0, r6
 8015014:	bd70      	pop	{r4, r5, r6, pc}
 8015016:	220c      	movs	r2, #12
 8015018:	2600      	movs	r6, #0
 801501a:	6002      	str	r2, [r0, #0]
 801501c:	e7f9      	b.n	8015012 <_calloc_r+0x12>
 801501e:	462a      	mov	r2, r5
 8015020:	4621      	mov	r1, r4
 8015022:	f7fe f835 	bl	8013090 <memset>
 8015026:	e7f4      	b.n	8015012 <_calloc_r+0x12>

08015028 <__ssputs_r>:
 8015028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801502c:	688e      	ldr	r6, [r1, #8]
 801502e:	4682      	mov	sl, r0
 8015030:	429e      	cmp	r6, r3
 8015032:	460c      	mov	r4, r1
 8015034:	4690      	mov	r8, r2
 8015036:	461f      	mov	r7, r3
 8015038:	d838      	bhi.n	80150ac <__ssputs_r+0x84>
 801503a:	898a      	ldrh	r2, [r1, #12]
 801503c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015040:	d032      	beq.n	80150a8 <__ssputs_r+0x80>
 8015042:	6825      	ldr	r5, [r4, #0]
 8015044:	6909      	ldr	r1, [r1, #16]
 8015046:	3301      	adds	r3, #1
 8015048:	eba5 0901 	sub.w	r9, r5, r1
 801504c:	6965      	ldr	r5, [r4, #20]
 801504e:	444b      	add	r3, r9
 8015050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015058:	106d      	asrs	r5, r5, #1
 801505a:	429d      	cmp	r5, r3
 801505c:	bf38      	it	cc
 801505e:	461d      	movcc	r5, r3
 8015060:	0553      	lsls	r3, r2, #21
 8015062:	d531      	bpl.n	80150c8 <__ssputs_r+0xa0>
 8015064:	4629      	mov	r1, r5
 8015066:	f7fe f883 	bl	8013170 <_malloc_r>
 801506a:	4606      	mov	r6, r0
 801506c:	b950      	cbnz	r0, 8015084 <__ssputs_r+0x5c>
 801506e:	230c      	movs	r3, #12
 8015070:	f04f 30ff 	mov.w	r0, #4294967295
 8015074:	f8ca 3000 	str.w	r3, [sl]
 8015078:	89a3      	ldrh	r3, [r4, #12]
 801507a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801507e:	81a3      	strh	r3, [r4, #12]
 8015080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015084:	464a      	mov	r2, r9
 8015086:	6921      	ldr	r1, [r4, #16]
 8015088:	f7ff fc1e 	bl	80148c8 <memcpy>
 801508c:	89a3      	ldrh	r3, [r4, #12]
 801508e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015096:	81a3      	strh	r3, [r4, #12]
 8015098:	6126      	str	r6, [r4, #16]
 801509a:	444e      	add	r6, r9
 801509c:	6026      	str	r6, [r4, #0]
 801509e:	463e      	mov	r6, r7
 80150a0:	6165      	str	r5, [r4, #20]
 80150a2:	eba5 0509 	sub.w	r5, r5, r9
 80150a6:	60a5      	str	r5, [r4, #8]
 80150a8:	42be      	cmp	r6, r7
 80150aa:	d900      	bls.n	80150ae <__ssputs_r+0x86>
 80150ac:	463e      	mov	r6, r7
 80150ae:	4632      	mov	r2, r6
 80150b0:	4641      	mov	r1, r8
 80150b2:	6820      	ldr	r0, [r4, #0]
 80150b4:	f000 f959 	bl	801536a <memmove>
 80150b8:	68a3      	ldr	r3, [r4, #8]
 80150ba:	2000      	movs	r0, #0
 80150bc:	1b9b      	subs	r3, r3, r6
 80150be:	60a3      	str	r3, [r4, #8]
 80150c0:	6823      	ldr	r3, [r4, #0]
 80150c2:	4433      	add	r3, r6
 80150c4:	6023      	str	r3, [r4, #0]
 80150c6:	e7db      	b.n	8015080 <__ssputs_r+0x58>
 80150c8:	462a      	mov	r2, r5
 80150ca:	f000 f968 	bl	801539e <_realloc_r>
 80150ce:	4606      	mov	r6, r0
 80150d0:	2800      	cmp	r0, #0
 80150d2:	d1e1      	bne.n	8015098 <__ssputs_r+0x70>
 80150d4:	4650      	mov	r0, sl
 80150d6:	6921      	ldr	r1, [r4, #16]
 80150d8:	f7fd ffe2 	bl	80130a0 <_free_r>
 80150dc:	e7c7      	b.n	801506e <__ssputs_r+0x46>
	...

080150e0 <_svfiprintf_r>:
 80150e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e4:	4698      	mov	r8, r3
 80150e6:	898b      	ldrh	r3, [r1, #12]
 80150e8:	4607      	mov	r7, r0
 80150ea:	061b      	lsls	r3, r3, #24
 80150ec:	460d      	mov	r5, r1
 80150ee:	4614      	mov	r4, r2
 80150f0:	b09d      	sub	sp, #116	; 0x74
 80150f2:	d50e      	bpl.n	8015112 <_svfiprintf_r+0x32>
 80150f4:	690b      	ldr	r3, [r1, #16]
 80150f6:	b963      	cbnz	r3, 8015112 <_svfiprintf_r+0x32>
 80150f8:	2140      	movs	r1, #64	; 0x40
 80150fa:	f7fe f839 	bl	8013170 <_malloc_r>
 80150fe:	6028      	str	r0, [r5, #0]
 8015100:	6128      	str	r0, [r5, #16]
 8015102:	b920      	cbnz	r0, 801510e <_svfiprintf_r+0x2e>
 8015104:	230c      	movs	r3, #12
 8015106:	603b      	str	r3, [r7, #0]
 8015108:	f04f 30ff 	mov.w	r0, #4294967295
 801510c:	e0d1      	b.n	80152b2 <_svfiprintf_r+0x1d2>
 801510e:	2340      	movs	r3, #64	; 0x40
 8015110:	616b      	str	r3, [r5, #20]
 8015112:	2300      	movs	r3, #0
 8015114:	9309      	str	r3, [sp, #36]	; 0x24
 8015116:	2320      	movs	r3, #32
 8015118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801511c:	2330      	movs	r3, #48	; 0x30
 801511e:	f04f 0901 	mov.w	r9, #1
 8015122:	f8cd 800c 	str.w	r8, [sp, #12]
 8015126:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80152cc <_svfiprintf_r+0x1ec>
 801512a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801512e:	4623      	mov	r3, r4
 8015130:	469a      	mov	sl, r3
 8015132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015136:	b10a      	cbz	r2, 801513c <_svfiprintf_r+0x5c>
 8015138:	2a25      	cmp	r2, #37	; 0x25
 801513a:	d1f9      	bne.n	8015130 <_svfiprintf_r+0x50>
 801513c:	ebba 0b04 	subs.w	fp, sl, r4
 8015140:	d00b      	beq.n	801515a <_svfiprintf_r+0x7a>
 8015142:	465b      	mov	r3, fp
 8015144:	4622      	mov	r2, r4
 8015146:	4629      	mov	r1, r5
 8015148:	4638      	mov	r0, r7
 801514a:	f7ff ff6d 	bl	8015028 <__ssputs_r>
 801514e:	3001      	adds	r0, #1
 8015150:	f000 80aa 	beq.w	80152a8 <_svfiprintf_r+0x1c8>
 8015154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015156:	445a      	add	r2, fp
 8015158:	9209      	str	r2, [sp, #36]	; 0x24
 801515a:	f89a 3000 	ldrb.w	r3, [sl]
 801515e:	2b00      	cmp	r3, #0
 8015160:	f000 80a2 	beq.w	80152a8 <_svfiprintf_r+0x1c8>
 8015164:	2300      	movs	r3, #0
 8015166:	f04f 32ff 	mov.w	r2, #4294967295
 801516a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801516e:	f10a 0a01 	add.w	sl, sl, #1
 8015172:	9304      	str	r3, [sp, #16]
 8015174:	9307      	str	r3, [sp, #28]
 8015176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801517a:	931a      	str	r3, [sp, #104]	; 0x68
 801517c:	4654      	mov	r4, sl
 801517e:	2205      	movs	r2, #5
 8015180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015184:	4851      	ldr	r0, [pc, #324]	; (80152cc <_svfiprintf_r+0x1ec>)
 8015186:	f7ff fb91 	bl	80148ac <memchr>
 801518a:	9a04      	ldr	r2, [sp, #16]
 801518c:	b9d8      	cbnz	r0, 80151c6 <_svfiprintf_r+0xe6>
 801518e:	06d0      	lsls	r0, r2, #27
 8015190:	bf44      	itt	mi
 8015192:	2320      	movmi	r3, #32
 8015194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015198:	0711      	lsls	r1, r2, #28
 801519a:	bf44      	itt	mi
 801519c:	232b      	movmi	r3, #43	; 0x2b
 801519e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80151a2:	f89a 3000 	ldrb.w	r3, [sl]
 80151a6:	2b2a      	cmp	r3, #42	; 0x2a
 80151a8:	d015      	beq.n	80151d6 <_svfiprintf_r+0xf6>
 80151aa:	4654      	mov	r4, sl
 80151ac:	2000      	movs	r0, #0
 80151ae:	f04f 0c0a 	mov.w	ip, #10
 80151b2:	9a07      	ldr	r2, [sp, #28]
 80151b4:	4621      	mov	r1, r4
 80151b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151ba:	3b30      	subs	r3, #48	; 0x30
 80151bc:	2b09      	cmp	r3, #9
 80151be:	d94e      	bls.n	801525e <_svfiprintf_r+0x17e>
 80151c0:	b1b0      	cbz	r0, 80151f0 <_svfiprintf_r+0x110>
 80151c2:	9207      	str	r2, [sp, #28]
 80151c4:	e014      	b.n	80151f0 <_svfiprintf_r+0x110>
 80151c6:	eba0 0308 	sub.w	r3, r0, r8
 80151ca:	fa09 f303 	lsl.w	r3, r9, r3
 80151ce:	4313      	orrs	r3, r2
 80151d0:	46a2      	mov	sl, r4
 80151d2:	9304      	str	r3, [sp, #16]
 80151d4:	e7d2      	b.n	801517c <_svfiprintf_r+0x9c>
 80151d6:	9b03      	ldr	r3, [sp, #12]
 80151d8:	1d19      	adds	r1, r3, #4
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	9103      	str	r1, [sp, #12]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	bfbb      	ittet	lt
 80151e2:	425b      	neglt	r3, r3
 80151e4:	f042 0202 	orrlt.w	r2, r2, #2
 80151e8:	9307      	strge	r3, [sp, #28]
 80151ea:	9307      	strlt	r3, [sp, #28]
 80151ec:	bfb8      	it	lt
 80151ee:	9204      	strlt	r2, [sp, #16]
 80151f0:	7823      	ldrb	r3, [r4, #0]
 80151f2:	2b2e      	cmp	r3, #46	; 0x2e
 80151f4:	d10c      	bne.n	8015210 <_svfiprintf_r+0x130>
 80151f6:	7863      	ldrb	r3, [r4, #1]
 80151f8:	2b2a      	cmp	r3, #42	; 0x2a
 80151fa:	d135      	bne.n	8015268 <_svfiprintf_r+0x188>
 80151fc:	9b03      	ldr	r3, [sp, #12]
 80151fe:	3402      	adds	r4, #2
 8015200:	1d1a      	adds	r2, r3, #4
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	9203      	str	r2, [sp, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	bfb8      	it	lt
 801520a:	f04f 33ff 	movlt.w	r3, #4294967295
 801520e:	9305      	str	r3, [sp, #20]
 8015210:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80152d0 <_svfiprintf_r+0x1f0>
 8015214:	2203      	movs	r2, #3
 8015216:	4650      	mov	r0, sl
 8015218:	7821      	ldrb	r1, [r4, #0]
 801521a:	f7ff fb47 	bl	80148ac <memchr>
 801521e:	b140      	cbz	r0, 8015232 <_svfiprintf_r+0x152>
 8015220:	2340      	movs	r3, #64	; 0x40
 8015222:	eba0 000a 	sub.w	r0, r0, sl
 8015226:	fa03 f000 	lsl.w	r0, r3, r0
 801522a:	9b04      	ldr	r3, [sp, #16]
 801522c:	3401      	adds	r4, #1
 801522e:	4303      	orrs	r3, r0
 8015230:	9304      	str	r3, [sp, #16]
 8015232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015236:	2206      	movs	r2, #6
 8015238:	4826      	ldr	r0, [pc, #152]	; (80152d4 <_svfiprintf_r+0x1f4>)
 801523a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801523e:	f7ff fb35 	bl	80148ac <memchr>
 8015242:	2800      	cmp	r0, #0
 8015244:	d038      	beq.n	80152b8 <_svfiprintf_r+0x1d8>
 8015246:	4b24      	ldr	r3, [pc, #144]	; (80152d8 <_svfiprintf_r+0x1f8>)
 8015248:	bb1b      	cbnz	r3, 8015292 <_svfiprintf_r+0x1b2>
 801524a:	9b03      	ldr	r3, [sp, #12]
 801524c:	3307      	adds	r3, #7
 801524e:	f023 0307 	bic.w	r3, r3, #7
 8015252:	3308      	adds	r3, #8
 8015254:	9303      	str	r3, [sp, #12]
 8015256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015258:	4433      	add	r3, r6
 801525a:	9309      	str	r3, [sp, #36]	; 0x24
 801525c:	e767      	b.n	801512e <_svfiprintf_r+0x4e>
 801525e:	460c      	mov	r4, r1
 8015260:	2001      	movs	r0, #1
 8015262:	fb0c 3202 	mla	r2, ip, r2, r3
 8015266:	e7a5      	b.n	80151b4 <_svfiprintf_r+0xd4>
 8015268:	2300      	movs	r3, #0
 801526a:	f04f 0c0a 	mov.w	ip, #10
 801526e:	4619      	mov	r1, r3
 8015270:	3401      	adds	r4, #1
 8015272:	9305      	str	r3, [sp, #20]
 8015274:	4620      	mov	r0, r4
 8015276:	f810 2b01 	ldrb.w	r2, [r0], #1
 801527a:	3a30      	subs	r2, #48	; 0x30
 801527c:	2a09      	cmp	r2, #9
 801527e:	d903      	bls.n	8015288 <_svfiprintf_r+0x1a8>
 8015280:	2b00      	cmp	r3, #0
 8015282:	d0c5      	beq.n	8015210 <_svfiprintf_r+0x130>
 8015284:	9105      	str	r1, [sp, #20]
 8015286:	e7c3      	b.n	8015210 <_svfiprintf_r+0x130>
 8015288:	4604      	mov	r4, r0
 801528a:	2301      	movs	r3, #1
 801528c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015290:	e7f0      	b.n	8015274 <_svfiprintf_r+0x194>
 8015292:	ab03      	add	r3, sp, #12
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	462a      	mov	r2, r5
 8015298:	4638      	mov	r0, r7
 801529a:	4b10      	ldr	r3, [pc, #64]	; (80152dc <_svfiprintf_r+0x1fc>)
 801529c:	a904      	add	r1, sp, #16
 801529e:	f7fe f879 	bl	8013394 <_printf_float>
 80152a2:	1c42      	adds	r2, r0, #1
 80152a4:	4606      	mov	r6, r0
 80152a6:	d1d6      	bne.n	8015256 <_svfiprintf_r+0x176>
 80152a8:	89ab      	ldrh	r3, [r5, #12]
 80152aa:	065b      	lsls	r3, r3, #25
 80152ac:	f53f af2c 	bmi.w	8015108 <_svfiprintf_r+0x28>
 80152b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152b2:	b01d      	add	sp, #116	; 0x74
 80152b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152b8:	ab03      	add	r3, sp, #12
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	462a      	mov	r2, r5
 80152be:	4638      	mov	r0, r7
 80152c0:	4b06      	ldr	r3, [pc, #24]	; (80152dc <_svfiprintf_r+0x1fc>)
 80152c2:	a904      	add	r1, sp, #16
 80152c4:	f7fe fb02 	bl	80138cc <_printf_i>
 80152c8:	e7eb      	b.n	80152a2 <_svfiprintf_r+0x1c2>
 80152ca:	bf00      	nop
 80152cc:	0802f74c 	.word	0x0802f74c
 80152d0:	0802f752 	.word	0x0802f752
 80152d4:	0802f756 	.word	0x0802f756
 80152d8:	08013395 	.word	0x08013395
 80152dc:	08015029 	.word	0x08015029

080152e0 <__assert_func>:
 80152e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80152e2:	4614      	mov	r4, r2
 80152e4:	461a      	mov	r2, r3
 80152e6:	4b09      	ldr	r3, [pc, #36]	; (801530c <__assert_func+0x2c>)
 80152e8:	4605      	mov	r5, r0
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	68d8      	ldr	r0, [r3, #12]
 80152ee:	b14c      	cbz	r4, 8015304 <__assert_func+0x24>
 80152f0:	4b07      	ldr	r3, [pc, #28]	; (8015310 <__assert_func+0x30>)
 80152f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152f6:	9100      	str	r1, [sp, #0]
 80152f8:	462b      	mov	r3, r5
 80152fa:	4906      	ldr	r1, [pc, #24]	; (8015314 <__assert_func+0x34>)
 80152fc:	f000 f80e 	bl	801531c <fiprintf>
 8015300:	f000 faa2 	bl	8015848 <abort>
 8015304:	4b04      	ldr	r3, [pc, #16]	; (8015318 <__assert_func+0x38>)
 8015306:	461c      	mov	r4, r3
 8015308:	e7f3      	b.n	80152f2 <__assert_func+0x12>
 801530a:	bf00      	nop
 801530c:	20000174 	.word	0x20000174
 8015310:	0802f75d 	.word	0x0802f75d
 8015314:	0802f76a 	.word	0x0802f76a
 8015318:	0802f798 	.word	0x0802f798

0801531c <fiprintf>:
 801531c:	b40e      	push	{r1, r2, r3}
 801531e:	b503      	push	{r0, r1, lr}
 8015320:	4601      	mov	r1, r0
 8015322:	ab03      	add	r3, sp, #12
 8015324:	4805      	ldr	r0, [pc, #20]	; (801533c <fiprintf+0x20>)
 8015326:	f853 2b04 	ldr.w	r2, [r3], #4
 801532a:	6800      	ldr	r0, [r0, #0]
 801532c:	9301      	str	r3, [sp, #4]
 801532e:	f000 f88d 	bl	801544c <_vfiprintf_r>
 8015332:	b002      	add	sp, #8
 8015334:	f85d eb04 	ldr.w	lr, [sp], #4
 8015338:	b003      	add	sp, #12
 801533a:	4770      	bx	lr
 801533c:	20000174 	.word	0x20000174

08015340 <__retarget_lock_init_recursive>:
 8015340:	4770      	bx	lr

08015342 <__retarget_lock_acquire_recursive>:
 8015342:	4770      	bx	lr

08015344 <__retarget_lock_release_recursive>:
 8015344:	4770      	bx	lr

08015346 <__ascii_mbtowc>:
 8015346:	b082      	sub	sp, #8
 8015348:	b901      	cbnz	r1, 801534c <__ascii_mbtowc+0x6>
 801534a:	a901      	add	r1, sp, #4
 801534c:	b142      	cbz	r2, 8015360 <__ascii_mbtowc+0x1a>
 801534e:	b14b      	cbz	r3, 8015364 <__ascii_mbtowc+0x1e>
 8015350:	7813      	ldrb	r3, [r2, #0]
 8015352:	600b      	str	r3, [r1, #0]
 8015354:	7812      	ldrb	r2, [r2, #0]
 8015356:	1e10      	subs	r0, r2, #0
 8015358:	bf18      	it	ne
 801535a:	2001      	movne	r0, #1
 801535c:	b002      	add	sp, #8
 801535e:	4770      	bx	lr
 8015360:	4610      	mov	r0, r2
 8015362:	e7fb      	b.n	801535c <__ascii_mbtowc+0x16>
 8015364:	f06f 0001 	mvn.w	r0, #1
 8015368:	e7f8      	b.n	801535c <__ascii_mbtowc+0x16>

0801536a <memmove>:
 801536a:	4288      	cmp	r0, r1
 801536c:	b510      	push	{r4, lr}
 801536e:	eb01 0402 	add.w	r4, r1, r2
 8015372:	d902      	bls.n	801537a <memmove+0x10>
 8015374:	4284      	cmp	r4, r0
 8015376:	4623      	mov	r3, r4
 8015378:	d807      	bhi.n	801538a <memmove+0x20>
 801537a:	1e43      	subs	r3, r0, #1
 801537c:	42a1      	cmp	r1, r4
 801537e:	d008      	beq.n	8015392 <memmove+0x28>
 8015380:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015384:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015388:	e7f8      	b.n	801537c <memmove+0x12>
 801538a:	4601      	mov	r1, r0
 801538c:	4402      	add	r2, r0
 801538e:	428a      	cmp	r2, r1
 8015390:	d100      	bne.n	8015394 <memmove+0x2a>
 8015392:	bd10      	pop	{r4, pc}
 8015394:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015398:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801539c:	e7f7      	b.n	801538e <memmove+0x24>

0801539e <_realloc_r>:
 801539e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a2:	4680      	mov	r8, r0
 80153a4:	4614      	mov	r4, r2
 80153a6:	460e      	mov	r6, r1
 80153a8:	b921      	cbnz	r1, 80153b4 <_realloc_r+0x16>
 80153aa:	4611      	mov	r1, r2
 80153ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153b0:	f7fd bede 	b.w	8013170 <_malloc_r>
 80153b4:	b92a      	cbnz	r2, 80153c2 <_realloc_r+0x24>
 80153b6:	f7fd fe73 	bl	80130a0 <_free_r>
 80153ba:	4625      	mov	r5, r4
 80153bc:	4628      	mov	r0, r5
 80153be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153c2:	f000 fc61 	bl	8015c88 <_malloc_usable_size_r>
 80153c6:	4284      	cmp	r4, r0
 80153c8:	4607      	mov	r7, r0
 80153ca:	d802      	bhi.n	80153d2 <_realloc_r+0x34>
 80153cc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80153d0:	d812      	bhi.n	80153f8 <_realloc_r+0x5a>
 80153d2:	4621      	mov	r1, r4
 80153d4:	4640      	mov	r0, r8
 80153d6:	f7fd fecb 	bl	8013170 <_malloc_r>
 80153da:	4605      	mov	r5, r0
 80153dc:	2800      	cmp	r0, #0
 80153de:	d0ed      	beq.n	80153bc <_realloc_r+0x1e>
 80153e0:	42bc      	cmp	r4, r7
 80153e2:	4622      	mov	r2, r4
 80153e4:	4631      	mov	r1, r6
 80153e6:	bf28      	it	cs
 80153e8:	463a      	movcs	r2, r7
 80153ea:	f7ff fa6d 	bl	80148c8 <memcpy>
 80153ee:	4631      	mov	r1, r6
 80153f0:	4640      	mov	r0, r8
 80153f2:	f7fd fe55 	bl	80130a0 <_free_r>
 80153f6:	e7e1      	b.n	80153bc <_realloc_r+0x1e>
 80153f8:	4635      	mov	r5, r6
 80153fa:	e7df      	b.n	80153bc <_realloc_r+0x1e>

080153fc <__sfputc_r>:
 80153fc:	6893      	ldr	r3, [r2, #8]
 80153fe:	b410      	push	{r4}
 8015400:	3b01      	subs	r3, #1
 8015402:	2b00      	cmp	r3, #0
 8015404:	6093      	str	r3, [r2, #8]
 8015406:	da07      	bge.n	8015418 <__sfputc_r+0x1c>
 8015408:	6994      	ldr	r4, [r2, #24]
 801540a:	42a3      	cmp	r3, r4
 801540c:	db01      	blt.n	8015412 <__sfputc_r+0x16>
 801540e:	290a      	cmp	r1, #10
 8015410:	d102      	bne.n	8015418 <__sfputc_r+0x1c>
 8015412:	bc10      	pop	{r4}
 8015414:	f000 b94a 	b.w	80156ac <__swbuf_r>
 8015418:	6813      	ldr	r3, [r2, #0]
 801541a:	1c58      	adds	r0, r3, #1
 801541c:	6010      	str	r0, [r2, #0]
 801541e:	7019      	strb	r1, [r3, #0]
 8015420:	4608      	mov	r0, r1
 8015422:	bc10      	pop	{r4}
 8015424:	4770      	bx	lr

08015426 <__sfputs_r>:
 8015426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015428:	4606      	mov	r6, r0
 801542a:	460f      	mov	r7, r1
 801542c:	4614      	mov	r4, r2
 801542e:	18d5      	adds	r5, r2, r3
 8015430:	42ac      	cmp	r4, r5
 8015432:	d101      	bne.n	8015438 <__sfputs_r+0x12>
 8015434:	2000      	movs	r0, #0
 8015436:	e007      	b.n	8015448 <__sfputs_r+0x22>
 8015438:	463a      	mov	r2, r7
 801543a:	4630      	mov	r0, r6
 801543c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015440:	f7ff ffdc 	bl	80153fc <__sfputc_r>
 8015444:	1c43      	adds	r3, r0, #1
 8015446:	d1f3      	bne.n	8015430 <__sfputs_r+0xa>
 8015448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801544c <_vfiprintf_r>:
 801544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015450:	460d      	mov	r5, r1
 8015452:	4614      	mov	r4, r2
 8015454:	4698      	mov	r8, r3
 8015456:	4606      	mov	r6, r0
 8015458:	b09d      	sub	sp, #116	; 0x74
 801545a:	b118      	cbz	r0, 8015464 <_vfiprintf_r+0x18>
 801545c:	6983      	ldr	r3, [r0, #24]
 801545e:	b90b      	cbnz	r3, 8015464 <_vfiprintf_r+0x18>
 8015460:	f000 fb10 	bl	8015a84 <__sinit>
 8015464:	4b89      	ldr	r3, [pc, #548]	; (801568c <_vfiprintf_r+0x240>)
 8015466:	429d      	cmp	r5, r3
 8015468:	d11b      	bne.n	80154a2 <_vfiprintf_r+0x56>
 801546a:	6875      	ldr	r5, [r6, #4]
 801546c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801546e:	07d9      	lsls	r1, r3, #31
 8015470:	d405      	bmi.n	801547e <_vfiprintf_r+0x32>
 8015472:	89ab      	ldrh	r3, [r5, #12]
 8015474:	059a      	lsls	r2, r3, #22
 8015476:	d402      	bmi.n	801547e <_vfiprintf_r+0x32>
 8015478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801547a:	f7ff ff62 	bl	8015342 <__retarget_lock_acquire_recursive>
 801547e:	89ab      	ldrh	r3, [r5, #12]
 8015480:	071b      	lsls	r3, r3, #28
 8015482:	d501      	bpl.n	8015488 <_vfiprintf_r+0x3c>
 8015484:	692b      	ldr	r3, [r5, #16]
 8015486:	b9eb      	cbnz	r3, 80154c4 <_vfiprintf_r+0x78>
 8015488:	4629      	mov	r1, r5
 801548a:	4630      	mov	r0, r6
 801548c:	f000 f96e 	bl	801576c <__swsetup_r>
 8015490:	b1c0      	cbz	r0, 80154c4 <_vfiprintf_r+0x78>
 8015492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015494:	07dc      	lsls	r4, r3, #31
 8015496:	d50e      	bpl.n	80154b6 <_vfiprintf_r+0x6a>
 8015498:	f04f 30ff 	mov.w	r0, #4294967295
 801549c:	b01d      	add	sp, #116	; 0x74
 801549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154a2:	4b7b      	ldr	r3, [pc, #492]	; (8015690 <_vfiprintf_r+0x244>)
 80154a4:	429d      	cmp	r5, r3
 80154a6:	d101      	bne.n	80154ac <_vfiprintf_r+0x60>
 80154a8:	68b5      	ldr	r5, [r6, #8]
 80154aa:	e7df      	b.n	801546c <_vfiprintf_r+0x20>
 80154ac:	4b79      	ldr	r3, [pc, #484]	; (8015694 <_vfiprintf_r+0x248>)
 80154ae:	429d      	cmp	r5, r3
 80154b0:	bf08      	it	eq
 80154b2:	68f5      	ldreq	r5, [r6, #12]
 80154b4:	e7da      	b.n	801546c <_vfiprintf_r+0x20>
 80154b6:	89ab      	ldrh	r3, [r5, #12]
 80154b8:	0598      	lsls	r0, r3, #22
 80154ba:	d4ed      	bmi.n	8015498 <_vfiprintf_r+0x4c>
 80154bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154be:	f7ff ff41 	bl	8015344 <__retarget_lock_release_recursive>
 80154c2:	e7e9      	b.n	8015498 <_vfiprintf_r+0x4c>
 80154c4:	2300      	movs	r3, #0
 80154c6:	9309      	str	r3, [sp, #36]	; 0x24
 80154c8:	2320      	movs	r3, #32
 80154ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154ce:	2330      	movs	r3, #48	; 0x30
 80154d0:	f04f 0901 	mov.w	r9, #1
 80154d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80154d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8015698 <_vfiprintf_r+0x24c>
 80154dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154e0:	4623      	mov	r3, r4
 80154e2:	469a      	mov	sl, r3
 80154e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154e8:	b10a      	cbz	r2, 80154ee <_vfiprintf_r+0xa2>
 80154ea:	2a25      	cmp	r2, #37	; 0x25
 80154ec:	d1f9      	bne.n	80154e2 <_vfiprintf_r+0x96>
 80154ee:	ebba 0b04 	subs.w	fp, sl, r4
 80154f2:	d00b      	beq.n	801550c <_vfiprintf_r+0xc0>
 80154f4:	465b      	mov	r3, fp
 80154f6:	4622      	mov	r2, r4
 80154f8:	4629      	mov	r1, r5
 80154fa:	4630      	mov	r0, r6
 80154fc:	f7ff ff93 	bl	8015426 <__sfputs_r>
 8015500:	3001      	adds	r0, #1
 8015502:	f000 80aa 	beq.w	801565a <_vfiprintf_r+0x20e>
 8015506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015508:	445a      	add	r2, fp
 801550a:	9209      	str	r2, [sp, #36]	; 0x24
 801550c:	f89a 3000 	ldrb.w	r3, [sl]
 8015510:	2b00      	cmp	r3, #0
 8015512:	f000 80a2 	beq.w	801565a <_vfiprintf_r+0x20e>
 8015516:	2300      	movs	r3, #0
 8015518:	f04f 32ff 	mov.w	r2, #4294967295
 801551c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015520:	f10a 0a01 	add.w	sl, sl, #1
 8015524:	9304      	str	r3, [sp, #16]
 8015526:	9307      	str	r3, [sp, #28]
 8015528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801552c:	931a      	str	r3, [sp, #104]	; 0x68
 801552e:	4654      	mov	r4, sl
 8015530:	2205      	movs	r2, #5
 8015532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015536:	4858      	ldr	r0, [pc, #352]	; (8015698 <_vfiprintf_r+0x24c>)
 8015538:	f7ff f9b8 	bl	80148ac <memchr>
 801553c:	9a04      	ldr	r2, [sp, #16]
 801553e:	b9d8      	cbnz	r0, 8015578 <_vfiprintf_r+0x12c>
 8015540:	06d1      	lsls	r1, r2, #27
 8015542:	bf44      	itt	mi
 8015544:	2320      	movmi	r3, #32
 8015546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801554a:	0713      	lsls	r3, r2, #28
 801554c:	bf44      	itt	mi
 801554e:	232b      	movmi	r3, #43	; 0x2b
 8015550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015554:	f89a 3000 	ldrb.w	r3, [sl]
 8015558:	2b2a      	cmp	r3, #42	; 0x2a
 801555a:	d015      	beq.n	8015588 <_vfiprintf_r+0x13c>
 801555c:	4654      	mov	r4, sl
 801555e:	2000      	movs	r0, #0
 8015560:	f04f 0c0a 	mov.w	ip, #10
 8015564:	9a07      	ldr	r2, [sp, #28]
 8015566:	4621      	mov	r1, r4
 8015568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801556c:	3b30      	subs	r3, #48	; 0x30
 801556e:	2b09      	cmp	r3, #9
 8015570:	d94e      	bls.n	8015610 <_vfiprintf_r+0x1c4>
 8015572:	b1b0      	cbz	r0, 80155a2 <_vfiprintf_r+0x156>
 8015574:	9207      	str	r2, [sp, #28]
 8015576:	e014      	b.n	80155a2 <_vfiprintf_r+0x156>
 8015578:	eba0 0308 	sub.w	r3, r0, r8
 801557c:	fa09 f303 	lsl.w	r3, r9, r3
 8015580:	4313      	orrs	r3, r2
 8015582:	46a2      	mov	sl, r4
 8015584:	9304      	str	r3, [sp, #16]
 8015586:	e7d2      	b.n	801552e <_vfiprintf_r+0xe2>
 8015588:	9b03      	ldr	r3, [sp, #12]
 801558a:	1d19      	adds	r1, r3, #4
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	9103      	str	r1, [sp, #12]
 8015590:	2b00      	cmp	r3, #0
 8015592:	bfbb      	ittet	lt
 8015594:	425b      	neglt	r3, r3
 8015596:	f042 0202 	orrlt.w	r2, r2, #2
 801559a:	9307      	strge	r3, [sp, #28]
 801559c:	9307      	strlt	r3, [sp, #28]
 801559e:	bfb8      	it	lt
 80155a0:	9204      	strlt	r2, [sp, #16]
 80155a2:	7823      	ldrb	r3, [r4, #0]
 80155a4:	2b2e      	cmp	r3, #46	; 0x2e
 80155a6:	d10c      	bne.n	80155c2 <_vfiprintf_r+0x176>
 80155a8:	7863      	ldrb	r3, [r4, #1]
 80155aa:	2b2a      	cmp	r3, #42	; 0x2a
 80155ac:	d135      	bne.n	801561a <_vfiprintf_r+0x1ce>
 80155ae:	9b03      	ldr	r3, [sp, #12]
 80155b0:	3402      	adds	r4, #2
 80155b2:	1d1a      	adds	r2, r3, #4
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	9203      	str	r2, [sp, #12]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	bfb8      	it	lt
 80155bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80155c0:	9305      	str	r3, [sp, #20]
 80155c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 801569c <_vfiprintf_r+0x250>
 80155c6:	2203      	movs	r2, #3
 80155c8:	4650      	mov	r0, sl
 80155ca:	7821      	ldrb	r1, [r4, #0]
 80155cc:	f7ff f96e 	bl	80148ac <memchr>
 80155d0:	b140      	cbz	r0, 80155e4 <_vfiprintf_r+0x198>
 80155d2:	2340      	movs	r3, #64	; 0x40
 80155d4:	eba0 000a 	sub.w	r0, r0, sl
 80155d8:	fa03 f000 	lsl.w	r0, r3, r0
 80155dc:	9b04      	ldr	r3, [sp, #16]
 80155de:	3401      	adds	r4, #1
 80155e0:	4303      	orrs	r3, r0
 80155e2:	9304      	str	r3, [sp, #16]
 80155e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e8:	2206      	movs	r2, #6
 80155ea:	482d      	ldr	r0, [pc, #180]	; (80156a0 <_vfiprintf_r+0x254>)
 80155ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155f0:	f7ff f95c 	bl	80148ac <memchr>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d03f      	beq.n	8015678 <_vfiprintf_r+0x22c>
 80155f8:	4b2a      	ldr	r3, [pc, #168]	; (80156a4 <_vfiprintf_r+0x258>)
 80155fa:	bb1b      	cbnz	r3, 8015644 <_vfiprintf_r+0x1f8>
 80155fc:	9b03      	ldr	r3, [sp, #12]
 80155fe:	3307      	adds	r3, #7
 8015600:	f023 0307 	bic.w	r3, r3, #7
 8015604:	3308      	adds	r3, #8
 8015606:	9303      	str	r3, [sp, #12]
 8015608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801560a:	443b      	add	r3, r7
 801560c:	9309      	str	r3, [sp, #36]	; 0x24
 801560e:	e767      	b.n	80154e0 <_vfiprintf_r+0x94>
 8015610:	460c      	mov	r4, r1
 8015612:	2001      	movs	r0, #1
 8015614:	fb0c 3202 	mla	r2, ip, r2, r3
 8015618:	e7a5      	b.n	8015566 <_vfiprintf_r+0x11a>
 801561a:	2300      	movs	r3, #0
 801561c:	f04f 0c0a 	mov.w	ip, #10
 8015620:	4619      	mov	r1, r3
 8015622:	3401      	adds	r4, #1
 8015624:	9305      	str	r3, [sp, #20]
 8015626:	4620      	mov	r0, r4
 8015628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801562c:	3a30      	subs	r2, #48	; 0x30
 801562e:	2a09      	cmp	r2, #9
 8015630:	d903      	bls.n	801563a <_vfiprintf_r+0x1ee>
 8015632:	2b00      	cmp	r3, #0
 8015634:	d0c5      	beq.n	80155c2 <_vfiprintf_r+0x176>
 8015636:	9105      	str	r1, [sp, #20]
 8015638:	e7c3      	b.n	80155c2 <_vfiprintf_r+0x176>
 801563a:	4604      	mov	r4, r0
 801563c:	2301      	movs	r3, #1
 801563e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015642:	e7f0      	b.n	8015626 <_vfiprintf_r+0x1da>
 8015644:	ab03      	add	r3, sp, #12
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	462a      	mov	r2, r5
 801564a:	4630      	mov	r0, r6
 801564c:	4b16      	ldr	r3, [pc, #88]	; (80156a8 <_vfiprintf_r+0x25c>)
 801564e:	a904      	add	r1, sp, #16
 8015650:	f7fd fea0 	bl	8013394 <_printf_float>
 8015654:	4607      	mov	r7, r0
 8015656:	1c78      	adds	r0, r7, #1
 8015658:	d1d6      	bne.n	8015608 <_vfiprintf_r+0x1bc>
 801565a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801565c:	07d9      	lsls	r1, r3, #31
 801565e:	d405      	bmi.n	801566c <_vfiprintf_r+0x220>
 8015660:	89ab      	ldrh	r3, [r5, #12]
 8015662:	059a      	lsls	r2, r3, #22
 8015664:	d402      	bmi.n	801566c <_vfiprintf_r+0x220>
 8015666:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015668:	f7ff fe6c 	bl	8015344 <__retarget_lock_release_recursive>
 801566c:	89ab      	ldrh	r3, [r5, #12]
 801566e:	065b      	lsls	r3, r3, #25
 8015670:	f53f af12 	bmi.w	8015498 <_vfiprintf_r+0x4c>
 8015674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015676:	e711      	b.n	801549c <_vfiprintf_r+0x50>
 8015678:	ab03      	add	r3, sp, #12
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	462a      	mov	r2, r5
 801567e:	4630      	mov	r0, r6
 8015680:	4b09      	ldr	r3, [pc, #36]	; (80156a8 <_vfiprintf_r+0x25c>)
 8015682:	a904      	add	r1, sp, #16
 8015684:	f7fe f922 	bl	80138cc <_printf_i>
 8015688:	e7e4      	b.n	8015654 <_vfiprintf_r+0x208>
 801568a:	bf00      	nop
 801568c:	0802f8c4 	.word	0x0802f8c4
 8015690:	0802f8e4 	.word	0x0802f8e4
 8015694:	0802f8a4 	.word	0x0802f8a4
 8015698:	0802f74c 	.word	0x0802f74c
 801569c:	0802f752 	.word	0x0802f752
 80156a0:	0802f756 	.word	0x0802f756
 80156a4:	08013395 	.word	0x08013395
 80156a8:	08015427 	.word	0x08015427

080156ac <__swbuf_r>:
 80156ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ae:	460e      	mov	r6, r1
 80156b0:	4614      	mov	r4, r2
 80156b2:	4605      	mov	r5, r0
 80156b4:	b118      	cbz	r0, 80156be <__swbuf_r+0x12>
 80156b6:	6983      	ldr	r3, [r0, #24]
 80156b8:	b90b      	cbnz	r3, 80156be <__swbuf_r+0x12>
 80156ba:	f000 f9e3 	bl	8015a84 <__sinit>
 80156be:	4b21      	ldr	r3, [pc, #132]	; (8015744 <__swbuf_r+0x98>)
 80156c0:	429c      	cmp	r4, r3
 80156c2:	d12b      	bne.n	801571c <__swbuf_r+0x70>
 80156c4:	686c      	ldr	r4, [r5, #4]
 80156c6:	69a3      	ldr	r3, [r4, #24]
 80156c8:	60a3      	str	r3, [r4, #8]
 80156ca:	89a3      	ldrh	r3, [r4, #12]
 80156cc:	071a      	lsls	r2, r3, #28
 80156ce:	d52f      	bpl.n	8015730 <__swbuf_r+0x84>
 80156d0:	6923      	ldr	r3, [r4, #16]
 80156d2:	b36b      	cbz	r3, 8015730 <__swbuf_r+0x84>
 80156d4:	6923      	ldr	r3, [r4, #16]
 80156d6:	6820      	ldr	r0, [r4, #0]
 80156d8:	b2f6      	uxtb	r6, r6
 80156da:	1ac0      	subs	r0, r0, r3
 80156dc:	6963      	ldr	r3, [r4, #20]
 80156de:	4637      	mov	r7, r6
 80156e0:	4283      	cmp	r3, r0
 80156e2:	dc04      	bgt.n	80156ee <__swbuf_r+0x42>
 80156e4:	4621      	mov	r1, r4
 80156e6:	4628      	mov	r0, r5
 80156e8:	f000 f938 	bl	801595c <_fflush_r>
 80156ec:	bb30      	cbnz	r0, 801573c <__swbuf_r+0x90>
 80156ee:	68a3      	ldr	r3, [r4, #8]
 80156f0:	3001      	adds	r0, #1
 80156f2:	3b01      	subs	r3, #1
 80156f4:	60a3      	str	r3, [r4, #8]
 80156f6:	6823      	ldr	r3, [r4, #0]
 80156f8:	1c5a      	adds	r2, r3, #1
 80156fa:	6022      	str	r2, [r4, #0]
 80156fc:	701e      	strb	r6, [r3, #0]
 80156fe:	6963      	ldr	r3, [r4, #20]
 8015700:	4283      	cmp	r3, r0
 8015702:	d004      	beq.n	801570e <__swbuf_r+0x62>
 8015704:	89a3      	ldrh	r3, [r4, #12]
 8015706:	07db      	lsls	r3, r3, #31
 8015708:	d506      	bpl.n	8015718 <__swbuf_r+0x6c>
 801570a:	2e0a      	cmp	r6, #10
 801570c:	d104      	bne.n	8015718 <__swbuf_r+0x6c>
 801570e:	4621      	mov	r1, r4
 8015710:	4628      	mov	r0, r5
 8015712:	f000 f923 	bl	801595c <_fflush_r>
 8015716:	b988      	cbnz	r0, 801573c <__swbuf_r+0x90>
 8015718:	4638      	mov	r0, r7
 801571a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801571c:	4b0a      	ldr	r3, [pc, #40]	; (8015748 <__swbuf_r+0x9c>)
 801571e:	429c      	cmp	r4, r3
 8015720:	d101      	bne.n	8015726 <__swbuf_r+0x7a>
 8015722:	68ac      	ldr	r4, [r5, #8]
 8015724:	e7cf      	b.n	80156c6 <__swbuf_r+0x1a>
 8015726:	4b09      	ldr	r3, [pc, #36]	; (801574c <__swbuf_r+0xa0>)
 8015728:	429c      	cmp	r4, r3
 801572a:	bf08      	it	eq
 801572c:	68ec      	ldreq	r4, [r5, #12]
 801572e:	e7ca      	b.n	80156c6 <__swbuf_r+0x1a>
 8015730:	4621      	mov	r1, r4
 8015732:	4628      	mov	r0, r5
 8015734:	f000 f81a 	bl	801576c <__swsetup_r>
 8015738:	2800      	cmp	r0, #0
 801573a:	d0cb      	beq.n	80156d4 <__swbuf_r+0x28>
 801573c:	f04f 37ff 	mov.w	r7, #4294967295
 8015740:	e7ea      	b.n	8015718 <__swbuf_r+0x6c>
 8015742:	bf00      	nop
 8015744:	0802f8c4 	.word	0x0802f8c4
 8015748:	0802f8e4 	.word	0x0802f8e4
 801574c:	0802f8a4 	.word	0x0802f8a4

08015750 <__ascii_wctomb>:
 8015750:	4603      	mov	r3, r0
 8015752:	4608      	mov	r0, r1
 8015754:	b141      	cbz	r1, 8015768 <__ascii_wctomb+0x18>
 8015756:	2aff      	cmp	r2, #255	; 0xff
 8015758:	d904      	bls.n	8015764 <__ascii_wctomb+0x14>
 801575a:	228a      	movs	r2, #138	; 0x8a
 801575c:	f04f 30ff 	mov.w	r0, #4294967295
 8015760:	601a      	str	r2, [r3, #0]
 8015762:	4770      	bx	lr
 8015764:	2001      	movs	r0, #1
 8015766:	700a      	strb	r2, [r1, #0]
 8015768:	4770      	bx	lr
	...

0801576c <__swsetup_r>:
 801576c:	4b32      	ldr	r3, [pc, #200]	; (8015838 <__swsetup_r+0xcc>)
 801576e:	b570      	push	{r4, r5, r6, lr}
 8015770:	681d      	ldr	r5, [r3, #0]
 8015772:	4606      	mov	r6, r0
 8015774:	460c      	mov	r4, r1
 8015776:	b125      	cbz	r5, 8015782 <__swsetup_r+0x16>
 8015778:	69ab      	ldr	r3, [r5, #24]
 801577a:	b913      	cbnz	r3, 8015782 <__swsetup_r+0x16>
 801577c:	4628      	mov	r0, r5
 801577e:	f000 f981 	bl	8015a84 <__sinit>
 8015782:	4b2e      	ldr	r3, [pc, #184]	; (801583c <__swsetup_r+0xd0>)
 8015784:	429c      	cmp	r4, r3
 8015786:	d10f      	bne.n	80157a8 <__swsetup_r+0x3c>
 8015788:	686c      	ldr	r4, [r5, #4]
 801578a:	89a3      	ldrh	r3, [r4, #12]
 801578c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015790:	0719      	lsls	r1, r3, #28
 8015792:	d42c      	bmi.n	80157ee <__swsetup_r+0x82>
 8015794:	06dd      	lsls	r5, r3, #27
 8015796:	d411      	bmi.n	80157bc <__swsetup_r+0x50>
 8015798:	2309      	movs	r3, #9
 801579a:	6033      	str	r3, [r6, #0]
 801579c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80157a0:	f04f 30ff 	mov.w	r0, #4294967295
 80157a4:	81a3      	strh	r3, [r4, #12]
 80157a6:	e03e      	b.n	8015826 <__swsetup_r+0xba>
 80157a8:	4b25      	ldr	r3, [pc, #148]	; (8015840 <__swsetup_r+0xd4>)
 80157aa:	429c      	cmp	r4, r3
 80157ac:	d101      	bne.n	80157b2 <__swsetup_r+0x46>
 80157ae:	68ac      	ldr	r4, [r5, #8]
 80157b0:	e7eb      	b.n	801578a <__swsetup_r+0x1e>
 80157b2:	4b24      	ldr	r3, [pc, #144]	; (8015844 <__swsetup_r+0xd8>)
 80157b4:	429c      	cmp	r4, r3
 80157b6:	bf08      	it	eq
 80157b8:	68ec      	ldreq	r4, [r5, #12]
 80157ba:	e7e6      	b.n	801578a <__swsetup_r+0x1e>
 80157bc:	0758      	lsls	r0, r3, #29
 80157be:	d512      	bpl.n	80157e6 <__swsetup_r+0x7a>
 80157c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157c2:	b141      	cbz	r1, 80157d6 <__swsetup_r+0x6a>
 80157c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157c8:	4299      	cmp	r1, r3
 80157ca:	d002      	beq.n	80157d2 <__swsetup_r+0x66>
 80157cc:	4630      	mov	r0, r6
 80157ce:	f7fd fc67 	bl	80130a0 <_free_r>
 80157d2:	2300      	movs	r3, #0
 80157d4:	6363      	str	r3, [r4, #52]	; 0x34
 80157d6:	89a3      	ldrh	r3, [r4, #12]
 80157d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80157dc:	81a3      	strh	r3, [r4, #12]
 80157de:	2300      	movs	r3, #0
 80157e0:	6063      	str	r3, [r4, #4]
 80157e2:	6923      	ldr	r3, [r4, #16]
 80157e4:	6023      	str	r3, [r4, #0]
 80157e6:	89a3      	ldrh	r3, [r4, #12]
 80157e8:	f043 0308 	orr.w	r3, r3, #8
 80157ec:	81a3      	strh	r3, [r4, #12]
 80157ee:	6923      	ldr	r3, [r4, #16]
 80157f0:	b94b      	cbnz	r3, 8015806 <__swsetup_r+0x9a>
 80157f2:	89a3      	ldrh	r3, [r4, #12]
 80157f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80157f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157fc:	d003      	beq.n	8015806 <__swsetup_r+0x9a>
 80157fe:	4621      	mov	r1, r4
 8015800:	4630      	mov	r0, r6
 8015802:	f000 fa01 	bl	8015c08 <__smakebuf_r>
 8015806:	89a0      	ldrh	r0, [r4, #12]
 8015808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801580c:	f010 0301 	ands.w	r3, r0, #1
 8015810:	d00a      	beq.n	8015828 <__swsetup_r+0xbc>
 8015812:	2300      	movs	r3, #0
 8015814:	60a3      	str	r3, [r4, #8]
 8015816:	6963      	ldr	r3, [r4, #20]
 8015818:	425b      	negs	r3, r3
 801581a:	61a3      	str	r3, [r4, #24]
 801581c:	6923      	ldr	r3, [r4, #16]
 801581e:	b943      	cbnz	r3, 8015832 <__swsetup_r+0xc6>
 8015820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015824:	d1ba      	bne.n	801579c <__swsetup_r+0x30>
 8015826:	bd70      	pop	{r4, r5, r6, pc}
 8015828:	0781      	lsls	r1, r0, #30
 801582a:	bf58      	it	pl
 801582c:	6963      	ldrpl	r3, [r4, #20]
 801582e:	60a3      	str	r3, [r4, #8]
 8015830:	e7f4      	b.n	801581c <__swsetup_r+0xb0>
 8015832:	2000      	movs	r0, #0
 8015834:	e7f7      	b.n	8015826 <__swsetup_r+0xba>
 8015836:	bf00      	nop
 8015838:	20000174 	.word	0x20000174
 801583c:	0802f8c4 	.word	0x0802f8c4
 8015840:	0802f8e4 	.word	0x0802f8e4
 8015844:	0802f8a4 	.word	0x0802f8a4

08015848 <abort>:
 8015848:	2006      	movs	r0, #6
 801584a:	b508      	push	{r3, lr}
 801584c:	f000 fa4c 	bl	8015ce8 <raise>
 8015850:	2001      	movs	r0, #1
 8015852:	f7ed fdf2 	bl	800343a <_exit>
	...

08015858 <__sflush_r>:
 8015858:	898a      	ldrh	r2, [r1, #12]
 801585a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801585c:	4605      	mov	r5, r0
 801585e:	0710      	lsls	r0, r2, #28
 8015860:	460c      	mov	r4, r1
 8015862:	d457      	bmi.n	8015914 <__sflush_r+0xbc>
 8015864:	684b      	ldr	r3, [r1, #4]
 8015866:	2b00      	cmp	r3, #0
 8015868:	dc04      	bgt.n	8015874 <__sflush_r+0x1c>
 801586a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801586c:	2b00      	cmp	r3, #0
 801586e:	dc01      	bgt.n	8015874 <__sflush_r+0x1c>
 8015870:	2000      	movs	r0, #0
 8015872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015876:	2e00      	cmp	r6, #0
 8015878:	d0fa      	beq.n	8015870 <__sflush_r+0x18>
 801587a:	2300      	movs	r3, #0
 801587c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015880:	682f      	ldr	r7, [r5, #0]
 8015882:	602b      	str	r3, [r5, #0]
 8015884:	d032      	beq.n	80158ec <__sflush_r+0x94>
 8015886:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015888:	89a3      	ldrh	r3, [r4, #12]
 801588a:	075a      	lsls	r2, r3, #29
 801588c:	d505      	bpl.n	801589a <__sflush_r+0x42>
 801588e:	6863      	ldr	r3, [r4, #4]
 8015890:	1ac0      	subs	r0, r0, r3
 8015892:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015894:	b10b      	cbz	r3, 801589a <__sflush_r+0x42>
 8015896:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015898:	1ac0      	subs	r0, r0, r3
 801589a:	2300      	movs	r3, #0
 801589c:	4602      	mov	r2, r0
 801589e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158a0:	4628      	mov	r0, r5
 80158a2:	6a21      	ldr	r1, [r4, #32]
 80158a4:	47b0      	blx	r6
 80158a6:	1c43      	adds	r3, r0, #1
 80158a8:	89a3      	ldrh	r3, [r4, #12]
 80158aa:	d106      	bne.n	80158ba <__sflush_r+0x62>
 80158ac:	6829      	ldr	r1, [r5, #0]
 80158ae:	291d      	cmp	r1, #29
 80158b0:	d82c      	bhi.n	801590c <__sflush_r+0xb4>
 80158b2:	4a29      	ldr	r2, [pc, #164]	; (8015958 <__sflush_r+0x100>)
 80158b4:	40ca      	lsrs	r2, r1
 80158b6:	07d6      	lsls	r6, r2, #31
 80158b8:	d528      	bpl.n	801590c <__sflush_r+0xb4>
 80158ba:	2200      	movs	r2, #0
 80158bc:	6062      	str	r2, [r4, #4]
 80158be:	6922      	ldr	r2, [r4, #16]
 80158c0:	04d9      	lsls	r1, r3, #19
 80158c2:	6022      	str	r2, [r4, #0]
 80158c4:	d504      	bpl.n	80158d0 <__sflush_r+0x78>
 80158c6:	1c42      	adds	r2, r0, #1
 80158c8:	d101      	bne.n	80158ce <__sflush_r+0x76>
 80158ca:	682b      	ldr	r3, [r5, #0]
 80158cc:	b903      	cbnz	r3, 80158d0 <__sflush_r+0x78>
 80158ce:	6560      	str	r0, [r4, #84]	; 0x54
 80158d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158d2:	602f      	str	r7, [r5, #0]
 80158d4:	2900      	cmp	r1, #0
 80158d6:	d0cb      	beq.n	8015870 <__sflush_r+0x18>
 80158d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158dc:	4299      	cmp	r1, r3
 80158de:	d002      	beq.n	80158e6 <__sflush_r+0x8e>
 80158e0:	4628      	mov	r0, r5
 80158e2:	f7fd fbdd 	bl	80130a0 <_free_r>
 80158e6:	2000      	movs	r0, #0
 80158e8:	6360      	str	r0, [r4, #52]	; 0x34
 80158ea:	e7c2      	b.n	8015872 <__sflush_r+0x1a>
 80158ec:	6a21      	ldr	r1, [r4, #32]
 80158ee:	2301      	movs	r3, #1
 80158f0:	4628      	mov	r0, r5
 80158f2:	47b0      	blx	r6
 80158f4:	1c41      	adds	r1, r0, #1
 80158f6:	d1c7      	bne.n	8015888 <__sflush_r+0x30>
 80158f8:	682b      	ldr	r3, [r5, #0]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d0c4      	beq.n	8015888 <__sflush_r+0x30>
 80158fe:	2b1d      	cmp	r3, #29
 8015900:	d001      	beq.n	8015906 <__sflush_r+0xae>
 8015902:	2b16      	cmp	r3, #22
 8015904:	d101      	bne.n	801590a <__sflush_r+0xb2>
 8015906:	602f      	str	r7, [r5, #0]
 8015908:	e7b2      	b.n	8015870 <__sflush_r+0x18>
 801590a:	89a3      	ldrh	r3, [r4, #12]
 801590c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015910:	81a3      	strh	r3, [r4, #12]
 8015912:	e7ae      	b.n	8015872 <__sflush_r+0x1a>
 8015914:	690f      	ldr	r7, [r1, #16]
 8015916:	2f00      	cmp	r7, #0
 8015918:	d0aa      	beq.n	8015870 <__sflush_r+0x18>
 801591a:	0793      	lsls	r3, r2, #30
 801591c:	bf18      	it	ne
 801591e:	2300      	movne	r3, #0
 8015920:	680e      	ldr	r6, [r1, #0]
 8015922:	bf08      	it	eq
 8015924:	694b      	ldreq	r3, [r1, #20]
 8015926:	1bf6      	subs	r6, r6, r7
 8015928:	600f      	str	r7, [r1, #0]
 801592a:	608b      	str	r3, [r1, #8]
 801592c:	2e00      	cmp	r6, #0
 801592e:	dd9f      	ble.n	8015870 <__sflush_r+0x18>
 8015930:	4633      	mov	r3, r6
 8015932:	463a      	mov	r2, r7
 8015934:	4628      	mov	r0, r5
 8015936:	6a21      	ldr	r1, [r4, #32]
 8015938:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801593c:	47e0      	blx	ip
 801593e:	2800      	cmp	r0, #0
 8015940:	dc06      	bgt.n	8015950 <__sflush_r+0xf8>
 8015942:	89a3      	ldrh	r3, [r4, #12]
 8015944:	f04f 30ff 	mov.w	r0, #4294967295
 8015948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801594c:	81a3      	strh	r3, [r4, #12]
 801594e:	e790      	b.n	8015872 <__sflush_r+0x1a>
 8015950:	4407      	add	r7, r0
 8015952:	1a36      	subs	r6, r6, r0
 8015954:	e7ea      	b.n	801592c <__sflush_r+0xd4>
 8015956:	bf00      	nop
 8015958:	20400001 	.word	0x20400001

0801595c <_fflush_r>:
 801595c:	b538      	push	{r3, r4, r5, lr}
 801595e:	690b      	ldr	r3, [r1, #16]
 8015960:	4605      	mov	r5, r0
 8015962:	460c      	mov	r4, r1
 8015964:	b913      	cbnz	r3, 801596c <_fflush_r+0x10>
 8015966:	2500      	movs	r5, #0
 8015968:	4628      	mov	r0, r5
 801596a:	bd38      	pop	{r3, r4, r5, pc}
 801596c:	b118      	cbz	r0, 8015976 <_fflush_r+0x1a>
 801596e:	6983      	ldr	r3, [r0, #24]
 8015970:	b90b      	cbnz	r3, 8015976 <_fflush_r+0x1a>
 8015972:	f000 f887 	bl	8015a84 <__sinit>
 8015976:	4b14      	ldr	r3, [pc, #80]	; (80159c8 <_fflush_r+0x6c>)
 8015978:	429c      	cmp	r4, r3
 801597a:	d11b      	bne.n	80159b4 <_fflush_r+0x58>
 801597c:	686c      	ldr	r4, [r5, #4]
 801597e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d0ef      	beq.n	8015966 <_fflush_r+0xa>
 8015986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015988:	07d0      	lsls	r0, r2, #31
 801598a:	d404      	bmi.n	8015996 <_fflush_r+0x3a>
 801598c:	0599      	lsls	r1, r3, #22
 801598e:	d402      	bmi.n	8015996 <_fflush_r+0x3a>
 8015990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015992:	f7ff fcd6 	bl	8015342 <__retarget_lock_acquire_recursive>
 8015996:	4628      	mov	r0, r5
 8015998:	4621      	mov	r1, r4
 801599a:	f7ff ff5d 	bl	8015858 <__sflush_r>
 801599e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80159a0:	4605      	mov	r5, r0
 80159a2:	07da      	lsls	r2, r3, #31
 80159a4:	d4e0      	bmi.n	8015968 <_fflush_r+0xc>
 80159a6:	89a3      	ldrh	r3, [r4, #12]
 80159a8:	059b      	lsls	r3, r3, #22
 80159aa:	d4dd      	bmi.n	8015968 <_fflush_r+0xc>
 80159ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80159ae:	f7ff fcc9 	bl	8015344 <__retarget_lock_release_recursive>
 80159b2:	e7d9      	b.n	8015968 <_fflush_r+0xc>
 80159b4:	4b05      	ldr	r3, [pc, #20]	; (80159cc <_fflush_r+0x70>)
 80159b6:	429c      	cmp	r4, r3
 80159b8:	d101      	bne.n	80159be <_fflush_r+0x62>
 80159ba:	68ac      	ldr	r4, [r5, #8]
 80159bc:	e7df      	b.n	801597e <_fflush_r+0x22>
 80159be:	4b04      	ldr	r3, [pc, #16]	; (80159d0 <_fflush_r+0x74>)
 80159c0:	429c      	cmp	r4, r3
 80159c2:	bf08      	it	eq
 80159c4:	68ec      	ldreq	r4, [r5, #12]
 80159c6:	e7da      	b.n	801597e <_fflush_r+0x22>
 80159c8:	0802f8c4 	.word	0x0802f8c4
 80159cc:	0802f8e4 	.word	0x0802f8e4
 80159d0:	0802f8a4 	.word	0x0802f8a4

080159d4 <std>:
 80159d4:	2300      	movs	r3, #0
 80159d6:	b510      	push	{r4, lr}
 80159d8:	4604      	mov	r4, r0
 80159da:	e9c0 3300 	strd	r3, r3, [r0]
 80159de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80159e2:	6083      	str	r3, [r0, #8]
 80159e4:	8181      	strh	r1, [r0, #12]
 80159e6:	6643      	str	r3, [r0, #100]	; 0x64
 80159e8:	81c2      	strh	r2, [r0, #14]
 80159ea:	6183      	str	r3, [r0, #24]
 80159ec:	4619      	mov	r1, r3
 80159ee:	2208      	movs	r2, #8
 80159f0:	305c      	adds	r0, #92	; 0x5c
 80159f2:	f7fd fb4d 	bl	8013090 <memset>
 80159f6:	4b05      	ldr	r3, [pc, #20]	; (8015a0c <std+0x38>)
 80159f8:	6224      	str	r4, [r4, #32]
 80159fa:	6263      	str	r3, [r4, #36]	; 0x24
 80159fc:	4b04      	ldr	r3, [pc, #16]	; (8015a10 <std+0x3c>)
 80159fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8015a00:	4b04      	ldr	r3, [pc, #16]	; (8015a14 <std+0x40>)
 8015a02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015a04:	4b04      	ldr	r3, [pc, #16]	; (8015a18 <std+0x44>)
 8015a06:	6323      	str	r3, [r4, #48]	; 0x30
 8015a08:	bd10      	pop	{r4, pc}
 8015a0a:	bf00      	nop
 8015a0c:	08015d21 	.word	0x08015d21
 8015a10:	08015d43 	.word	0x08015d43
 8015a14:	08015d7b 	.word	0x08015d7b
 8015a18:	08015d9f 	.word	0x08015d9f

08015a1c <_cleanup_r>:
 8015a1c:	4901      	ldr	r1, [pc, #4]	; (8015a24 <_cleanup_r+0x8>)
 8015a1e:	f000 b8af 	b.w	8015b80 <_fwalk_reent>
 8015a22:	bf00      	nop
 8015a24:	0801595d 	.word	0x0801595d

08015a28 <__sfmoreglue>:
 8015a28:	2268      	movs	r2, #104	; 0x68
 8015a2a:	b570      	push	{r4, r5, r6, lr}
 8015a2c:	1e4d      	subs	r5, r1, #1
 8015a2e:	4355      	muls	r5, r2
 8015a30:	460e      	mov	r6, r1
 8015a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015a36:	f7fd fb9b 	bl	8013170 <_malloc_r>
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	b140      	cbz	r0, 8015a50 <__sfmoreglue+0x28>
 8015a3e:	2100      	movs	r1, #0
 8015a40:	e9c0 1600 	strd	r1, r6, [r0]
 8015a44:	300c      	adds	r0, #12
 8015a46:	60a0      	str	r0, [r4, #8]
 8015a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015a4c:	f7fd fb20 	bl	8013090 <memset>
 8015a50:	4620      	mov	r0, r4
 8015a52:	bd70      	pop	{r4, r5, r6, pc}

08015a54 <__sfp_lock_acquire>:
 8015a54:	4801      	ldr	r0, [pc, #4]	; (8015a5c <__sfp_lock_acquire+0x8>)
 8015a56:	f7ff bc74 	b.w	8015342 <__retarget_lock_acquire_recursive>
 8015a5a:	bf00      	nop
 8015a5c:	200016cd 	.word	0x200016cd

08015a60 <__sfp_lock_release>:
 8015a60:	4801      	ldr	r0, [pc, #4]	; (8015a68 <__sfp_lock_release+0x8>)
 8015a62:	f7ff bc6f 	b.w	8015344 <__retarget_lock_release_recursive>
 8015a66:	bf00      	nop
 8015a68:	200016cd 	.word	0x200016cd

08015a6c <__sinit_lock_acquire>:
 8015a6c:	4801      	ldr	r0, [pc, #4]	; (8015a74 <__sinit_lock_acquire+0x8>)
 8015a6e:	f7ff bc68 	b.w	8015342 <__retarget_lock_acquire_recursive>
 8015a72:	bf00      	nop
 8015a74:	200016ce 	.word	0x200016ce

08015a78 <__sinit_lock_release>:
 8015a78:	4801      	ldr	r0, [pc, #4]	; (8015a80 <__sinit_lock_release+0x8>)
 8015a7a:	f7ff bc63 	b.w	8015344 <__retarget_lock_release_recursive>
 8015a7e:	bf00      	nop
 8015a80:	200016ce 	.word	0x200016ce

08015a84 <__sinit>:
 8015a84:	b510      	push	{r4, lr}
 8015a86:	4604      	mov	r4, r0
 8015a88:	f7ff fff0 	bl	8015a6c <__sinit_lock_acquire>
 8015a8c:	69a3      	ldr	r3, [r4, #24]
 8015a8e:	b11b      	cbz	r3, 8015a98 <__sinit+0x14>
 8015a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a94:	f7ff bff0 	b.w	8015a78 <__sinit_lock_release>
 8015a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015a9c:	6523      	str	r3, [r4, #80]	; 0x50
 8015a9e:	4b13      	ldr	r3, [pc, #76]	; (8015aec <__sinit+0x68>)
 8015aa0:	4a13      	ldr	r2, [pc, #76]	; (8015af0 <__sinit+0x6c>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8015aa6:	42a3      	cmp	r3, r4
 8015aa8:	bf08      	it	eq
 8015aaa:	2301      	moveq	r3, #1
 8015aac:	4620      	mov	r0, r4
 8015aae:	bf08      	it	eq
 8015ab0:	61a3      	streq	r3, [r4, #24]
 8015ab2:	f000 f81f 	bl	8015af4 <__sfp>
 8015ab6:	6060      	str	r0, [r4, #4]
 8015ab8:	4620      	mov	r0, r4
 8015aba:	f000 f81b 	bl	8015af4 <__sfp>
 8015abe:	60a0      	str	r0, [r4, #8]
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	f000 f817 	bl	8015af4 <__sfp>
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	2104      	movs	r1, #4
 8015aca:	60e0      	str	r0, [r4, #12]
 8015acc:	6860      	ldr	r0, [r4, #4]
 8015ace:	f7ff ff81 	bl	80159d4 <std>
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	2109      	movs	r1, #9
 8015ad6:	68a0      	ldr	r0, [r4, #8]
 8015ad8:	f7ff ff7c 	bl	80159d4 <std>
 8015adc:	2202      	movs	r2, #2
 8015ade:	2112      	movs	r1, #18
 8015ae0:	68e0      	ldr	r0, [r4, #12]
 8015ae2:	f7ff ff77 	bl	80159d4 <std>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	61a3      	str	r3, [r4, #24]
 8015aea:	e7d1      	b.n	8015a90 <__sinit+0xc>
 8015aec:	0802f528 	.word	0x0802f528
 8015af0:	08015a1d 	.word	0x08015a1d

08015af4 <__sfp>:
 8015af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015af6:	4607      	mov	r7, r0
 8015af8:	f7ff ffac 	bl	8015a54 <__sfp_lock_acquire>
 8015afc:	4b1e      	ldr	r3, [pc, #120]	; (8015b78 <__sfp+0x84>)
 8015afe:	681e      	ldr	r6, [r3, #0]
 8015b00:	69b3      	ldr	r3, [r6, #24]
 8015b02:	b913      	cbnz	r3, 8015b0a <__sfp+0x16>
 8015b04:	4630      	mov	r0, r6
 8015b06:	f7ff ffbd 	bl	8015a84 <__sinit>
 8015b0a:	3648      	adds	r6, #72	; 0x48
 8015b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015b10:	3b01      	subs	r3, #1
 8015b12:	d503      	bpl.n	8015b1c <__sfp+0x28>
 8015b14:	6833      	ldr	r3, [r6, #0]
 8015b16:	b30b      	cbz	r3, 8015b5c <__sfp+0x68>
 8015b18:	6836      	ldr	r6, [r6, #0]
 8015b1a:	e7f7      	b.n	8015b0c <__sfp+0x18>
 8015b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015b20:	b9d5      	cbnz	r5, 8015b58 <__sfp+0x64>
 8015b22:	4b16      	ldr	r3, [pc, #88]	; (8015b7c <__sfp+0x88>)
 8015b24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015b28:	60e3      	str	r3, [r4, #12]
 8015b2a:	6665      	str	r5, [r4, #100]	; 0x64
 8015b2c:	f7ff fc08 	bl	8015340 <__retarget_lock_init_recursive>
 8015b30:	f7ff ff96 	bl	8015a60 <__sfp_lock_release>
 8015b34:	2208      	movs	r2, #8
 8015b36:	4629      	mov	r1, r5
 8015b38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015b3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015b40:	6025      	str	r5, [r4, #0]
 8015b42:	61a5      	str	r5, [r4, #24]
 8015b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015b48:	f7fd faa2 	bl	8013090 <memset>
 8015b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015b54:	4620      	mov	r0, r4
 8015b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b58:	3468      	adds	r4, #104	; 0x68
 8015b5a:	e7d9      	b.n	8015b10 <__sfp+0x1c>
 8015b5c:	2104      	movs	r1, #4
 8015b5e:	4638      	mov	r0, r7
 8015b60:	f7ff ff62 	bl	8015a28 <__sfmoreglue>
 8015b64:	4604      	mov	r4, r0
 8015b66:	6030      	str	r0, [r6, #0]
 8015b68:	2800      	cmp	r0, #0
 8015b6a:	d1d5      	bne.n	8015b18 <__sfp+0x24>
 8015b6c:	f7ff ff78 	bl	8015a60 <__sfp_lock_release>
 8015b70:	230c      	movs	r3, #12
 8015b72:	603b      	str	r3, [r7, #0]
 8015b74:	e7ee      	b.n	8015b54 <__sfp+0x60>
 8015b76:	bf00      	nop
 8015b78:	0802f528 	.word	0x0802f528
 8015b7c:	ffff0001 	.word	0xffff0001

08015b80 <_fwalk_reent>:
 8015b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b84:	4606      	mov	r6, r0
 8015b86:	4688      	mov	r8, r1
 8015b88:	2700      	movs	r7, #0
 8015b8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b92:	f1b9 0901 	subs.w	r9, r9, #1
 8015b96:	d505      	bpl.n	8015ba4 <_fwalk_reent+0x24>
 8015b98:	6824      	ldr	r4, [r4, #0]
 8015b9a:	2c00      	cmp	r4, #0
 8015b9c:	d1f7      	bne.n	8015b8e <_fwalk_reent+0xe>
 8015b9e:	4638      	mov	r0, r7
 8015ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ba4:	89ab      	ldrh	r3, [r5, #12]
 8015ba6:	2b01      	cmp	r3, #1
 8015ba8:	d907      	bls.n	8015bba <_fwalk_reent+0x3a>
 8015baa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015bae:	3301      	adds	r3, #1
 8015bb0:	d003      	beq.n	8015bba <_fwalk_reent+0x3a>
 8015bb2:	4629      	mov	r1, r5
 8015bb4:	4630      	mov	r0, r6
 8015bb6:	47c0      	blx	r8
 8015bb8:	4307      	orrs	r7, r0
 8015bba:	3568      	adds	r5, #104	; 0x68
 8015bbc:	e7e9      	b.n	8015b92 <_fwalk_reent+0x12>

08015bbe <__swhatbuf_r>:
 8015bbe:	b570      	push	{r4, r5, r6, lr}
 8015bc0:	460e      	mov	r6, r1
 8015bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bc6:	4614      	mov	r4, r2
 8015bc8:	2900      	cmp	r1, #0
 8015bca:	461d      	mov	r5, r3
 8015bcc:	b096      	sub	sp, #88	; 0x58
 8015bce:	da08      	bge.n	8015be2 <__swhatbuf_r+0x24>
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015bd6:	602a      	str	r2, [r5, #0]
 8015bd8:	061a      	lsls	r2, r3, #24
 8015bda:	d410      	bmi.n	8015bfe <__swhatbuf_r+0x40>
 8015bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015be0:	e00e      	b.n	8015c00 <__swhatbuf_r+0x42>
 8015be2:	466a      	mov	r2, sp
 8015be4:	f000 f902 	bl	8015dec <_fstat_r>
 8015be8:	2800      	cmp	r0, #0
 8015bea:	dbf1      	blt.n	8015bd0 <__swhatbuf_r+0x12>
 8015bec:	9a01      	ldr	r2, [sp, #4]
 8015bee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015bf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015bf6:	425a      	negs	r2, r3
 8015bf8:	415a      	adcs	r2, r3
 8015bfa:	602a      	str	r2, [r5, #0]
 8015bfc:	e7ee      	b.n	8015bdc <__swhatbuf_r+0x1e>
 8015bfe:	2340      	movs	r3, #64	; 0x40
 8015c00:	2000      	movs	r0, #0
 8015c02:	6023      	str	r3, [r4, #0]
 8015c04:	b016      	add	sp, #88	; 0x58
 8015c06:	bd70      	pop	{r4, r5, r6, pc}

08015c08 <__smakebuf_r>:
 8015c08:	898b      	ldrh	r3, [r1, #12]
 8015c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c0c:	079d      	lsls	r5, r3, #30
 8015c0e:	4606      	mov	r6, r0
 8015c10:	460c      	mov	r4, r1
 8015c12:	d507      	bpl.n	8015c24 <__smakebuf_r+0x1c>
 8015c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015c18:	6023      	str	r3, [r4, #0]
 8015c1a:	6123      	str	r3, [r4, #16]
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	6163      	str	r3, [r4, #20]
 8015c20:	b002      	add	sp, #8
 8015c22:	bd70      	pop	{r4, r5, r6, pc}
 8015c24:	466a      	mov	r2, sp
 8015c26:	ab01      	add	r3, sp, #4
 8015c28:	f7ff ffc9 	bl	8015bbe <__swhatbuf_r>
 8015c2c:	9900      	ldr	r1, [sp, #0]
 8015c2e:	4605      	mov	r5, r0
 8015c30:	4630      	mov	r0, r6
 8015c32:	f7fd fa9d 	bl	8013170 <_malloc_r>
 8015c36:	b948      	cbnz	r0, 8015c4c <__smakebuf_r+0x44>
 8015c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c3c:	059a      	lsls	r2, r3, #22
 8015c3e:	d4ef      	bmi.n	8015c20 <__smakebuf_r+0x18>
 8015c40:	f023 0303 	bic.w	r3, r3, #3
 8015c44:	f043 0302 	orr.w	r3, r3, #2
 8015c48:	81a3      	strh	r3, [r4, #12]
 8015c4a:	e7e3      	b.n	8015c14 <__smakebuf_r+0xc>
 8015c4c:	4b0d      	ldr	r3, [pc, #52]	; (8015c84 <__smakebuf_r+0x7c>)
 8015c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015c50:	89a3      	ldrh	r3, [r4, #12]
 8015c52:	6020      	str	r0, [r4, #0]
 8015c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c58:	81a3      	strh	r3, [r4, #12]
 8015c5a:	9b00      	ldr	r3, [sp, #0]
 8015c5c:	6120      	str	r0, [r4, #16]
 8015c5e:	6163      	str	r3, [r4, #20]
 8015c60:	9b01      	ldr	r3, [sp, #4]
 8015c62:	b15b      	cbz	r3, 8015c7c <__smakebuf_r+0x74>
 8015c64:	4630      	mov	r0, r6
 8015c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c6a:	f000 f8d1 	bl	8015e10 <_isatty_r>
 8015c6e:	b128      	cbz	r0, 8015c7c <__smakebuf_r+0x74>
 8015c70:	89a3      	ldrh	r3, [r4, #12]
 8015c72:	f023 0303 	bic.w	r3, r3, #3
 8015c76:	f043 0301 	orr.w	r3, r3, #1
 8015c7a:	81a3      	strh	r3, [r4, #12]
 8015c7c:	89a0      	ldrh	r0, [r4, #12]
 8015c7e:	4305      	orrs	r5, r0
 8015c80:	81a5      	strh	r5, [r4, #12]
 8015c82:	e7cd      	b.n	8015c20 <__smakebuf_r+0x18>
 8015c84:	08015a1d 	.word	0x08015a1d

08015c88 <_malloc_usable_size_r>:
 8015c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c8c:	1f18      	subs	r0, r3, #4
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	bfbc      	itt	lt
 8015c92:	580b      	ldrlt	r3, [r1, r0]
 8015c94:	18c0      	addlt	r0, r0, r3
 8015c96:	4770      	bx	lr

08015c98 <_raise_r>:
 8015c98:	291f      	cmp	r1, #31
 8015c9a:	b538      	push	{r3, r4, r5, lr}
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	460d      	mov	r5, r1
 8015ca0:	d904      	bls.n	8015cac <_raise_r+0x14>
 8015ca2:	2316      	movs	r3, #22
 8015ca4:	6003      	str	r3, [r0, #0]
 8015ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8015caa:	bd38      	pop	{r3, r4, r5, pc}
 8015cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015cae:	b112      	cbz	r2, 8015cb6 <_raise_r+0x1e>
 8015cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015cb4:	b94b      	cbnz	r3, 8015cca <_raise_r+0x32>
 8015cb6:	4620      	mov	r0, r4
 8015cb8:	f000 f830 	bl	8015d1c <_getpid_r>
 8015cbc:	462a      	mov	r2, r5
 8015cbe:	4601      	mov	r1, r0
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cc6:	f000 b817 	b.w	8015cf8 <_kill_r>
 8015cca:	2b01      	cmp	r3, #1
 8015ccc:	d00a      	beq.n	8015ce4 <_raise_r+0x4c>
 8015cce:	1c59      	adds	r1, r3, #1
 8015cd0:	d103      	bne.n	8015cda <_raise_r+0x42>
 8015cd2:	2316      	movs	r3, #22
 8015cd4:	6003      	str	r3, [r0, #0]
 8015cd6:	2001      	movs	r0, #1
 8015cd8:	e7e7      	b.n	8015caa <_raise_r+0x12>
 8015cda:	2400      	movs	r4, #0
 8015cdc:	4628      	mov	r0, r5
 8015cde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015ce2:	4798      	blx	r3
 8015ce4:	2000      	movs	r0, #0
 8015ce6:	e7e0      	b.n	8015caa <_raise_r+0x12>

08015ce8 <raise>:
 8015ce8:	4b02      	ldr	r3, [pc, #8]	; (8015cf4 <raise+0xc>)
 8015cea:	4601      	mov	r1, r0
 8015cec:	6818      	ldr	r0, [r3, #0]
 8015cee:	f7ff bfd3 	b.w	8015c98 <_raise_r>
 8015cf2:	bf00      	nop
 8015cf4:	20000174 	.word	0x20000174

08015cf8 <_kill_r>:
 8015cf8:	b538      	push	{r3, r4, r5, lr}
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	4d06      	ldr	r5, [pc, #24]	; (8015d18 <_kill_r+0x20>)
 8015cfe:	4604      	mov	r4, r0
 8015d00:	4608      	mov	r0, r1
 8015d02:	4611      	mov	r1, r2
 8015d04:	602b      	str	r3, [r5, #0]
 8015d06:	f7ed fb88 	bl	800341a <_kill>
 8015d0a:	1c43      	adds	r3, r0, #1
 8015d0c:	d102      	bne.n	8015d14 <_kill_r+0x1c>
 8015d0e:	682b      	ldr	r3, [r5, #0]
 8015d10:	b103      	cbz	r3, 8015d14 <_kill_r+0x1c>
 8015d12:	6023      	str	r3, [r4, #0]
 8015d14:	bd38      	pop	{r3, r4, r5, pc}
 8015d16:	bf00      	nop
 8015d18:	200016c8 	.word	0x200016c8

08015d1c <_getpid_r>:
 8015d1c:	f7ed bb76 	b.w	800340c <_getpid>

08015d20 <__sread>:
 8015d20:	b510      	push	{r4, lr}
 8015d22:	460c      	mov	r4, r1
 8015d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d28:	f000 f894 	bl	8015e54 <_read_r>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	bfab      	itete	ge
 8015d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015d32:	89a3      	ldrhlt	r3, [r4, #12]
 8015d34:	181b      	addge	r3, r3, r0
 8015d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015d3a:	bfac      	ite	ge
 8015d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8015d3e:	81a3      	strhlt	r3, [r4, #12]
 8015d40:	bd10      	pop	{r4, pc}

08015d42 <__swrite>:
 8015d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d46:	461f      	mov	r7, r3
 8015d48:	898b      	ldrh	r3, [r1, #12]
 8015d4a:	4605      	mov	r5, r0
 8015d4c:	05db      	lsls	r3, r3, #23
 8015d4e:	460c      	mov	r4, r1
 8015d50:	4616      	mov	r6, r2
 8015d52:	d505      	bpl.n	8015d60 <__swrite+0x1e>
 8015d54:	2302      	movs	r3, #2
 8015d56:	2200      	movs	r2, #0
 8015d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d5c:	f000 f868 	bl	8015e30 <_lseek_r>
 8015d60:	89a3      	ldrh	r3, [r4, #12]
 8015d62:	4632      	mov	r2, r6
 8015d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015d68:	81a3      	strh	r3, [r4, #12]
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	463b      	mov	r3, r7
 8015d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d76:	f000 b817 	b.w	8015da8 <_write_r>

08015d7a <__sseek>:
 8015d7a:	b510      	push	{r4, lr}
 8015d7c:	460c      	mov	r4, r1
 8015d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d82:	f000 f855 	bl	8015e30 <_lseek_r>
 8015d86:	1c43      	adds	r3, r0, #1
 8015d88:	89a3      	ldrh	r3, [r4, #12]
 8015d8a:	bf15      	itete	ne
 8015d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8015d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015d96:	81a3      	strheq	r3, [r4, #12]
 8015d98:	bf18      	it	ne
 8015d9a:	81a3      	strhne	r3, [r4, #12]
 8015d9c:	bd10      	pop	{r4, pc}

08015d9e <__sclose>:
 8015d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015da2:	f000 b813 	b.w	8015dcc <_close_r>
	...

08015da8 <_write_r>:
 8015da8:	b538      	push	{r3, r4, r5, lr}
 8015daa:	4604      	mov	r4, r0
 8015dac:	4608      	mov	r0, r1
 8015dae:	4611      	mov	r1, r2
 8015db0:	2200      	movs	r2, #0
 8015db2:	4d05      	ldr	r5, [pc, #20]	; (8015dc8 <_write_r+0x20>)
 8015db4:	602a      	str	r2, [r5, #0]
 8015db6:	461a      	mov	r2, r3
 8015db8:	f7ed fb66 	bl	8003488 <_write>
 8015dbc:	1c43      	adds	r3, r0, #1
 8015dbe:	d102      	bne.n	8015dc6 <_write_r+0x1e>
 8015dc0:	682b      	ldr	r3, [r5, #0]
 8015dc2:	b103      	cbz	r3, 8015dc6 <_write_r+0x1e>
 8015dc4:	6023      	str	r3, [r4, #0]
 8015dc6:	bd38      	pop	{r3, r4, r5, pc}
 8015dc8:	200016c8 	.word	0x200016c8

08015dcc <_close_r>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	2300      	movs	r3, #0
 8015dd0:	4d05      	ldr	r5, [pc, #20]	; (8015de8 <_close_r+0x1c>)
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	4608      	mov	r0, r1
 8015dd6:	602b      	str	r3, [r5, #0]
 8015dd8:	f7ed fb72 	bl	80034c0 <_close>
 8015ddc:	1c43      	adds	r3, r0, #1
 8015dde:	d102      	bne.n	8015de6 <_close_r+0x1a>
 8015de0:	682b      	ldr	r3, [r5, #0]
 8015de2:	b103      	cbz	r3, 8015de6 <_close_r+0x1a>
 8015de4:	6023      	str	r3, [r4, #0]
 8015de6:	bd38      	pop	{r3, r4, r5, pc}
 8015de8:	200016c8 	.word	0x200016c8

08015dec <_fstat_r>:
 8015dec:	b538      	push	{r3, r4, r5, lr}
 8015dee:	2300      	movs	r3, #0
 8015df0:	4d06      	ldr	r5, [pc, #24]	; (8015e0c <_fstat_r+0x20>)
 8015df2:	4604      	mov	r4, r0
 8015df4:	4608      	mov	r0, r1
 8015df6:	4611      	mov	r1, r2
 8015df8:	602b      	str	r3, [r5, #0]
 8015dfa:	f7ed fb6c 	bl	80034d6 <_fstat>
 8015dfe:	1c43      	adds	r3, r0, #1
 8015e00:	d102      	bne.n	8015e08 <_fstat_r+0x1c>
 8015e02:	682b      	ldr	r3, [r5, #0]
 8015e04:	b103      	cbz	r3, 8015e08 <_fstat_r+0x1c>
 8015e06:	6023      	str	r3, [r4, #0]
 8015e08:	bd38      	pop	{r3, r4, r5, pc}
 8015e0a:	bf00      	nop
 8015e0c:	200016c8 	.word	0x200016c8

08015e10 <_isatty_r>:
 8015e10:	b538      	push	{r3, r4, r5, lr}
 8015e12:	2300      	movs	r3, #0
 8015e14:	4d05      	ldr	r5, [pc, #20]	; (8015e2c <_isatty_r+0x1c>)
 8015e16:	4604      	mov	r4, r0
 8015e18:	4608      	mov	r0, r1
 8015e1a:	602b      	str	r3, [r5, #0]
 8015e1c:	f7ed fb6a 	bl	80034f4 <_isatty>
 8015e20:	1c43      	adds	r3, r0, #1
 8015e22:	d102      	bne.n	8015e2a <_isatty_r+0x1a>
 8015e24:	682b      	ldr	r3, [r5, #0]
 8015e26:	b103      	cbz	r3, 8015e2a <_isatty_r+0x1a>
 8015e28:	6023      	str	r3, [r4, #0]
 8015e2a:	bd38      	pop	{r3, r4, r5, pc}
 8015e2c:	200016c8 	.word	0x200016c8

08015e30 <_lseek_r>:
 8015e30:	b538      	push	{r3, r4, r5, lr}
 8015e32:	4604      	mov	r4, r0
 8015e34:	4608      	mov	r0, r1
 8015e36:	4611      	mov	r1, r2
 8015e38:	2200      	movs	r2, #0
 8015e3a:	4d05      	ldr	r5, [pc, #20]	; (8015e50 <_lseek_r+0x20>)
 8015e3c:	602a      	str	r2, [r5, #0]
 8015e3e:	461a      	mov	r2, r3
 8015e40:	f7ed fb62 	bl	8003508 <_lseek>
 8015e44:	1c43      	adds	r3, r0, #1
 8015e46:	d102      	bne.n	8015e4e <_lseek_r+0x1e>
 8015e48:	682b      	ldr	r3, [r5, #0]
 8015e4a:	b103      	cbz	r3, 8015e4e <_lseek_r+0x1e>
 8015e4c:	6023      	str	r3, [r4, #0]
 8015e4e:	bd38      	pop	{r3, r4, r5, pc}
 8015e50:	200016c8 	.word	0x200016c8

08015e54 <_read_r>:
 8015e54:	b538      	push	{r3, r4, r5, lr}
 8015e56:	4604      	mov	r4, r0
 8015e58:	4608      	mov	r0, r1
 8015e5a:	4611      	mov	r1, r2
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	4d05      	ldr	r5, [pc, #20]	; (8015e74 <_read_r+0x20>)
 8015e60:	602a      	str	r2, [r5, #0]
 8015e62:	461a      	mov	r2, r3
 8015e64:	f7ed faf3 	bl	800344e <_read>
 8015e68:	1c43      	adds	r3, r0, #1
 8015e6a:	d102      	bne.n	8015e72 <_read_r+0x1e>
 8015e6c:	682b      	ldr	r3, [r5, #0]
 8015e6e:	b103      	cbz	r3, 8015e72 <_read_r+0x1e>
 8015e70:	6023      	str	r3, [r4, #0]
 8015e72:	bd38      	pop	{r3, r4, r5, pc}
 8015e74:	200016c8 	.word	0x200016c8

08015e78 <fmin>:
 8015e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	460d      	mov	r5, r1
 8015e7e:	4616      	mov	r6, r2
 8015e80:	461f      	mov	r7, r3
 8015e82:	f000 f813 	bl	8015eac <__fpclassifyd>
 8015e86:	b158      	cbz	r0, 8015ea0 <fmin+0x28>
 8015e88:	4630      	mov	r0, r6
 8015e8a:	4639      	mov	r1, r7
 8015e8c:	f000 f80e 	bl	8015eac <__fpclassifyd>
 8015e90:	b140      	cbz	r0, 8015ea4 <fmin+0x2c>
 8015e92:	4632      	mov	r2, r6
 8015e94:	463b      	mov	r3, r7
 8015e96:	4620      	mov	r0, r4
 8015e98:	4629      	mov	r1, r5
 8015e9a:	f7ea fdfb 	bl	8000a94 <__aeabi_dcmplt>
 8015e9e:	b908      	cbnz	r0, 8015ea4 <fmin+0x2c>
 8015ea0:	4634      	mov	r4, r6
 8015ea2:	463d      	mov	r5, r7
 8015ea4:	4620      	mov	r0, r4
 8015ea6:	4629      	mov	r1, r5
 8015ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015eac <__fpclassifyd>:
 8015eac:	b510      	push	{r4, lr}
 8015eae:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8015eb2:	460b      	mov	r3, r1
 8015eb4:	d019      	beq.n	8015eea <__fpclassifyd+0x3e>
 8015eb6:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8015eba:	490e      	ldr	r1, [pc, #56]	; (8015ef4 <__fpclassifyd+0x48>)
 8015ebc:	428a      	cmp	r2, r1
 8015ebe:	d90e      	bls.n	8015ede <__fpclassifyd+0x32>
 8015ec0:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8015ec4:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8015ec8:	428a      	cmp	r2, r1
 8015eca:	d908      	bls.n	8015ede <__fpclassifyd+0x32>
 8015ecc:	4a0a      	ldr	r2, [pc, #40]	; (8015ef8 <__fpclassifyd+0x4c>)
 8015ece:	4213      	tst	r3, r2
 8015ed0:	d007      	beq.n	8015ee2 <__fpclassifyd+0x36>
 8015ed2:	4294      	cmp	r4, r2
 8015ed4:	d107      	bne.n	8015ee6 <__fpclassifyd+0x3a>
 8015ed6:	fab0 f080 	clz	r0, r0
 8015eda:	0940      	lsrs	r0, r0, #5
 8015edc:	bd10      	pop	{r4, pc}
 8015ede:	2004      	movs	r0, #4
 8015ee0:	e7fc      	b.n	8015edc <__fpclassifyd+0x30>
 8015ee2:	2003      	movs	r0, #3
 8015ee4:	e7fa      	b.n	8015edc <__fpclassifyd+0x30>
 8015ee6:	2000      	movs	r0, #0
 8015ee8:	e7f8      	b.n	8015edc <__fpclassifyd+0x30>
 8015eea:	2800      	cmp	r0, #0
 8015eec:	d1ee      	bne.n	8015ecc <__fpclassifyd+0x20>
 8015eee:	2002      	movs	r0, #2
 8015ef0:	e7f4      	b.n	8015edc <__fpclassifyd+0x30>
 8015ef2:	bf00      	nop
 8015ef4:	7fdfffff 	.word	0x7fdfffff
 8015ef8:	7ff00000 	.word	0x7ff00000

08015efc <sqrt>:
 8015efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015efe:	4606      	mov	r6, r0
 8015f00:	460f      	mov	r7, r1
 8015f02:	f000 f81f 	bl	8015f44 <__ieee754_sqrt>
 8015f06:	4632      	mov	r2, r6
 8015f08:	4604      	mov	r4, r0
 8015f0a:	460d      	mov	r5, r1
 8015f0c:	463b      	mov	r3, r7
 8015f0e:	4630      	mov	r0, r6
 8015f10:	4639      	mov	r1, r7
 8015f12:	f7ea fde7 	bl	8000ae4 <__aeabi_dcmpun>
 8015f16:	b990      	cbnz	r0, 8015f3e <sqrt+0x42>
 8015f18:	2200      	movs	r2, #0
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	4630      	mov	r0, r6
 8015f1e:	4639      	mov	r1, r7
 8015f20:	f7ea fdb8 	bl	8000a94 <__aeabi_dcmplt>
 8015f24:	b158      	cbz	r0, 8015f3e <sqrt+0x42>
 8015f26:	f7fd f879 	bl	801301c <__errno>
 8015f2a:	2321      	movs	r3, #33	; 0x21
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	6003      	str	r3, [r0, #0]
 8015f30:	2300      	movs	r3, #0
 8015f32:	4610      	mov	r0, r2
 8015f34:	4619      	mov	r1, r3
 8015f36:	f7ea fc65 	bl	8000804 <__aeabi_ddiv>
 8015f3a:	4604      	mov	r4, r0
 8015f3c:	460d      	mov	r5, r1
 8015f3e:	4620      	mov	r0, r4
 8015f40:	4629      	mov	r1, r5
 8015f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015f44 <__ieee754_sqrt>:
 8015f44:	f8df c158 	ldr.w	ip, [pc, #344]	; 80160a0 <__ieee754_sqrt+0x15c>
 8015f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f4c:	ea3c 0c01 	bics.w	ip, ip, r1
 8015f50:	4606      	mov	r6, r0
 8015f52:	460d      	mov	r5, r1
 8015f54:	460c      	mov	r4, r1
 8015f56:	460a      	mov	r2, r1
 8015f58:	4607      	mov	r7, r0
 8015f5a:	4603      	mov	r3, r0
 8015f5c:	d10f      	bne.n	8015f7e <__ieee754_sqrt+0x3a>
 8015f5e:	4602      	mov	r2, r0
 8015f60:	460b      	mov	r3, r1
 8015f62:	f7ea fb25 	bl	80005b0 <__aeabi_dmul>
 8015f66:	4602      	mov	r2, r0
 8015f68:	460b      	mov	r3, r1
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	4629      	mov	r1, r5
 8015f6e:	f7ea f969 	bl	8000244 <__adddf3>
 8015f72:	4606      	mov	r6, r0
 8015f74:	460d      	mov	r5, r1
 8015f76:	4630      	mov	r0, r6
 8015f78:	4629      	mov	r1, r5
 8015f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f7e:	2900      	cmp	r1, #0
 8015f80:	dc0e      	bgt.n	8015fa0 <__ieee754_sqrt+0x5c>
 8015f82:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8015f86:	ea5c 0707 	orrs.w	r7, ip, r7
 8015f8a:	d0f4      	beq.n	8015f76 <__ieee754_sqrt+0x32>
 8015f8c:	b141      	cbz	r1, 8015fa0 <__ieee754_sqrt+0x5c>
 8015f8e:	4602      	mov	r2, r0
 8015f90:	460b      	mov	r3, r1
 8015f92:	f7ea f955 	bl	8000240 <__aeabi_dsub>
 8015f96:	4602      	mov	r2, r0
 8015f98:	460b      	mov	r3, r1
 8015f9a:	f7ea fc33 	bl	8000804 <__aeabi_ddiv>
 8015f9e:	e7e8      	b.n	8015f72 <__ieee754_sqrt+0x2e>
 8015fa0:	1521      	asrs	r1, r4, #20
 8015fa2:	d075      	beq.n	8016090 <__ieee754_sqrt+0x14c>
 8015fa4:	07cc      	lsls	r4, r1, #31
 8015fa6:	f04f 0400 	mov.w	r4, #0
 8015faa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015fae:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8015fb2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015fb6:	bf5e      	ittt	pl
 8015fb8:	0fd9      	lsrpl	r1, r3, #31
 8015fba:	005b      	lslpl	r3, r3, #1
 8015fbc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8015fc0:	0fd9      	lsrs	r1, r3, #31
 8015fc2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8015fc6:	2516      	movs	r5, #22
 8015fc8:	4620      	mov	r0, r4
 8015fca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015fce:	107f      	asrs	r7, r7, #1
 8015fd0:	005b      	lsls	r3, r3, #1
 8015fd2:	1846      	adds	r6, r0, r1
 8015fd4:	4296      	cmp	r6, r2
 8015fd6:	bfde      	ittt	le
 8015fd8:	1b92      	suble	r2, r2, r6
 8015fda:	1870      	addle	r0, r6, r1
 8015fdc:	1864      	addle	r4, r4, r1
 8015fde:	0052      	lsls	r2, r2, #1
 8015fe0:	3d01      	subs	r5, #1
 8015fe2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015fe6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015fea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015fee:	d1f0      	bne.n	8015fd2 <__ieee754_sqrt+0x8e>
 8015ff0:	4629      	mov	r1, r5
 8015ff2:	f04f 0e20 	mov.w	lr, #32
 8015ff6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015ffa:	4282      	cmp	r2, r0
 8015ffc:	eb06 0c05 	add.w	ip, r6, r5
 8016000:	dc02      	bgt.n	8016008 <__ieee754_sqrt+0xc4>
 8016002:	d113      	bne.n	801602c <__ieee754_sqrt+0xe8>
 8016004:	459c      	cmp	ip, r3
 8016006:	d811      	bhi.n	801602c <__ieee754_sqrt+0xe8>
 8016008:	f1bc 0f00 	cmp.w	ip, #0
 801600c:	eb0c 0506 	add.w	r5, ip, r6
 8016010:	da43      	bge.n	801609a <__ieee754_sqrt+0x156>
 8016012:	2d00      	cmp	r5, #0
 8016014:	db41      	blt.n	801609a <__ieee754_sqrt+0x156>
 8016016:	f100 0801 	add.w	r8, r0, #1
 801601a:	1a12      	subs	r2, r2, r0
 801601c:	4640      	mov	r0, r8
 801601e:	459c      	cmp	ip, r3
 8016020:	bf88      	it	hi
 8016022:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016026:	eba3 030c 	sub.w	r3, r3, ip
 801602a:	4431      	add	r1, r6
 801602c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8016030:	f1be 0e01 	subs.w	lr, lr, #1
 8016034:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8016038:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801603c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016040:	d1db      	bne.n	8015ffa <__ieee754_sqrt+0xb6>
 8016042:	4313      	orrs	r3, r2
 8016044:	d006      	beq.n	8016054 <__ieee754_sqrt+0x110>
 8016046:	1c48      	adds	r0, r1, #1
 8016048:	bf0b      	itete	eq
 801604a:	4671      	moveq	r1, lr
 801604c:	3101      	addne	r1, #1
 801604e:	3401      	addeq	r4, #1
 8016050:	f021 0101 	bicne.w	r1, r1, #1
 8016054:	1063      	asrs	r3, r4, #1
 8016056:	0849      	lsrs	r1, r1, #1
 8016058:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801605c:	07e2      	lsls	r2, r4, #31
 801605e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8016062:	bf48      	it	mi
 8016064:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8016068:	460e      	mov	r6, r1
 801606a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801606e:	e782      	b.n	8015f76 <__ieee754_sqrt+0x32>
 8016070:	0ada      	lsrs	r2, r3, #11
 8016072:	3815      	subs	r0, #21
 8016074:	055b      	lsls	r3, r3, #21
 8016076:	2a00      	cmp	r2, #0
 8016078:	d0fa      	beq.n	8016070 <__ieee754_sqrt+0x12c>
 801607a:	02d5      	lsls	r5, r2, #11
 801607c:	d50a      	bpl.n	8016094 <__ieee754_sqrt+0x150>
 801607e:	f1c1 0420 	rsb	r4, r1, #32
 8016082:	fa23 f404 	lsr.w	r4, r3, r4
 8016086:	1e4d      	subs	r5, r1, #1
 8016088:	408b      	lsls	r3, r1
 801608a:	4322      	orrs	r2, r4
 801608c:	1b41      	subs	r1, r0, r5
 801608e:	e789      	b.n	8015fa4 <__ieee754_sqrt+0x60>
 8016090:	4608      	mov	r0, r1
 8016092:	e7f0      	b.n	8016076 <__ieee754_sqrt+0x132>
 8016094:	0052      	lsls	r2, r2, #1
 8016096:	3101      	adds	r1, #1
 8016098:	e7ef      	b.n	801607a <__ieee754_sqrt+0x136>
 801609a:	4680      	mov	r8, r0
 801609c:	e7bd      	b.n	801601a <__ieee754_sqrt+0xd6>
 801609e:	bf00      	nop
 80160a0:	7ff00000 	.word	0x7ff00000

080160a4 <_init>:
 80160a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a6:	bf00      	nop
 80160a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160aa:	bc08      	pop	{r3}
 80160ac:	469e      	mov	lr, r3
 80160ae:	4770      	bx	lr

080160b0 <_fini>:
 80160b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160b2:	bf00      	nop
 80160b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160b6:	bc08      	pop	{r3}
 80160b8:	469e      	mov	lr, r3
 80160ba:	4770      	bx	lr
