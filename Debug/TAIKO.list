
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014254  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e244  08014440  08014440  00024440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022684  08022684  0004b8d4  2**0
                  CONTENTS
  4 .ARM          00000000  08022684  08022684  0004b8d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08022684  08022684  0004b8d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022684  08022684  00032684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022688  08022688  00032688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000b8d4  20000000  0802268c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001320  2000b8d8  0802df60  0004b8d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000cbf8  0802df60  0004cbf8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0004b8d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022dac  00000000  00000000  0004b8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005317  00000000  00000000  0006e6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  000739c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d58  00000000  00000000  00075978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002117d  00000000  00000000  000776d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000281ae  00000000  00000000  0009884d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b02b2  00000000  00000000  000c09fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170cad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009834  00000000  00000000  00170d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000b8d8 	.word	0x2000b8d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08014424 	.word	0x08014424

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000b8dc 	.word	0x2000b8dc
 8000224:	08014424 	.word	0x08014424

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <DrumInit>:

void DrumOutputDefault(DrumType type) {
	drums[type].hit_count++;
}

void DrumInit() {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0

	drum_output_device = DRUM_OUTPUT_NONE;
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <DrumInit+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
//	drum_output_callback = &DrumOutputDefault;
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	e03a      	b.n	80010e4 <DrumInit+0x88>
		drums[i].type = i;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	b2d8      	uxtb	r0, r3
 8001072:	4921      	ldr	r1, [pc, #132]	; (80010f8 <DrumInit+0x9c>)
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	440b      	add	r3, r1
 8001080:	4602      	mov	r2, r0
 8001082:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 8001084:	491c      	ldr	r1, [pc, #112]	; (80010f8 <DrumInit+0x9c>)
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	440b      	add	r3, r1
 8001092:	3308      	adds	r3, #8
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <DrumInit+0xa0>)
 800109e:	1899      	adds	r1, r3, r2
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <DrumInit+0x9c>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	4403      	add	r3, r0
 80010ae:	3310      	adds	r3, #16
 80010b0:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 80010b2:	4911      	ldr	r1, [pc, #68]	; (80010f8 <DrumInit+0x9c>)
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	440b      	add	r3, r1
 80010c0:	3304      	adds	r3, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80010c6:	f002 f9f1 	bl	80034ac <HAL_GetTick>
 80010ca:	4601      	mov	r1, r0
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <DrumInit+0x9c>)
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4403      	add	r3, r0
 80010da:	330c      	adds	r3, #12
 80010dc:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	ddc1      	ble.n	800106e <DrumInit+0x12>
	}

}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000bbf8 	.word	0x2000bbf8
 80010f8:	2000bb38 	.word	0x2000bb38
 80010fc:	2000bb24 	.word	0x2000bb24

08001100 <DrumCalibrate>:

void DrumCalibrate() {
 8001100:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001104:	b092      	sub	sp, #72	; 0x48
 8001106:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001108:	f002 f9d0 	bl	80034ac <HAL_GetTick>
 800110c:	6478      	str	r0, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 800110e:	2010      	movs	r0, #16
 8001110:	f010 f970 	bl	80113f4 <malloc>
 8001114:	4603      	mov	r3, r0
 8001116:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001118:	2300      	movs	r3, #0
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
 800111c:	e00c      	b.n	8001138 <DrumCalibrate+0x38>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 800111e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	18d4      	adds	r4, r2, r3
 8001126:	f44f 7016 	mov.w	r0, #600	; 0x258
 800112a:	f010 f963 	bl	80113f4 <malloc>
 800112e:	4603      	mov	r3, r0
 8001130:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001134:	3301      	adds	r3, #1
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
 8001138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800113a:	2b03      	cmp	r3, #3
 800113c:	ddef      	ble.n	800111e <DrumCalibrate+0x1e>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001142:	e023      	b.n	800118c <DrumCalibrate+0x8c>
		while (last_tick == HAL_GetTick()) {
 8001144:	bf00      	nop
 8001146:	f002 f9b1 	bl	80034ac <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800114e:	4293      	cmp	r3, r2
 8001150:	d0f9      	beq.n	8001146 <DrumCalibrate+0x46>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 8001152:	f002 f9ab 	bl	80034ac <HAL_GetTick>
 8001156:	6478      	str	r0, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 8001158:	2300      	movs	r3, #0
 800115a:	63bb      	str	r3, [r7, #56]	; 0x38
 800115c:	e010      	b.n	8001180 <DrumCalibrate+0x80>
			values[j][i] = drum_sensor_values[j];
 800115e:	4a9c      	ldr	r2, [pc, #624]	; (80013d0 <DrumCalibrate+0x2d0>)
 8001160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001162:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	b28a      	uxth	r2, r1
 8001178:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	3301      	adds	r3, #1
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001182:	2b03      	cmp	r3, #3
 8001184:	ddeb      	ble.n	800115e <DrumCalibrate+0x5e>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001188:	3301      	adds	r3, #1
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800118c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001192:	dbd7      	blt.n	8001144 <DrumCalibrate+0x44>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
 8001198:	e0f2      	b.n	8001380 <DrumCalibrate+0x280>
		uint32_t sum = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a6:	e026      	b.n	80011f6 <DrumCalibrate+0xf6>
			sum += values[i][j];
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4413      	add	r3, r2
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011be:	4413      	add	r3, r2
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 80011c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4413      	add	r3, r2
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d8:	4293      	cmp	r3, r2
 80011da:	d209      	bcs.n	80011f0 <DrumCalibrate+0xf0>
				max_val = values[i][j];
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	3301      	adds	r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011fc:	dbd4      	blt.n	80011a8 <DrumCalibrate+0xa8>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 80011fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001200:	f7ff f95c 	bl	80004bc <__aeabi_ui2d>
 8001204:	a36e      	add	r3, pc, #440	; (adr r3, 80013c0 <DrumCalibrate+0x2c0>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fafb 	bl	8000804 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e036      	b.n	8001296 <DrumCalibrate+0x196>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 8001228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4413      	add	r3, r2
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f94e 	bl	80004dc <__aeabi_i2d>
 8001240:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001244:	f7fe fffc 	bl	8000240 <__aeabi_dsub>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4413      	add	r3, r2
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f93a 	bl	80004dc <__aeabi_i2d>
 8001268:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126c:	f7fe ffe8 	bl	8000240 <__aeabi_dsub>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4620      	mov	r0, r4
 8001276:	4629      	mov	r1, r5
 8001278:	f7ff f99a 	bl	80005b0 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001284:	f7fe ffde 	bl	8000244 <__adddf3>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800129c:	dbc4      	blt.n	8001228 <DrumCalibrate+0x128>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 800129e:	a34a      	add	r3, pc, #296	; (adr r3, 80013c8 <DrumCalibrate+0x2c8>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012a8:	f7ff faac 	bl	8000804 <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f012 ffe2 	bl	801427c <sqrt>
 80012b8:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 80012bc:	4945      	ldr	r1, [pc, #276]	; (80013d4 <DrumCalibrate+0x2d4>)
 80012be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	440b      	add	r3, r1
 80012ca:	f103 0118 	add.w	r1, r3, #24
 80012ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012d2:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 80012d6:	493f      	ldr	r1, [pc, #252]	; (80013d4 <DrumCalibrate+0x2d4>)
 80012d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012da:	4613      	mov	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	4413      	add	r3, r2
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	440b      	add	r3, r1
 80012e4:	3314      	adds	r3, #20
 80012e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e8:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 80012ea:	493a      	ldr	r1, [pc, #232]	; (80013d4 <DrumCalibrate+0x2d4>)
 80012ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	f103 0120 	add.w	r1, r3, #32
 80012fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001300:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <DrumCalibrate+0x2d8>)
 800130a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800130e:	f7ff f94f 	bl	80005b0 <__aeabi_dmul>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800131e:	f7fe ff91 	bl	8000244 <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4690      	mov	r8, r2
 8001328:	4699      	mov	r9, r3
 800132a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800132c:	f7ff f8c6 	bl	80004bc <__aeabi_ui2d>
 8001330:	4604      	mov	r4, r0
 8001332:	460d      	mov	r5, r1
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <DrumCalibrate+0x2dc>)
 800133a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800133e:	f7ff f937 	bl	80005b0 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4620      	mov	r0, r4
 8001348:	4629      	mov	r1, r5
 800134a:	f7fe ff7b 	bl	8000244 <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4640      	mov	r0, r8
 8001354:	4649      	mov	r1, r9
 8001356:	f012 ff4f 	bl	80141f8 <fmin>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4610      	mov	r0, r2
 8001360:	4619      	mov	r1, r3
 8001362:	f7ff fbfd 	bl	8000b60 <__aeabi_d2uiz>
 8001366:	4601      	mov	r1, r0
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <DrumCalibrate+0x2d4>)
 800136a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4403      	add	r3, r0
 8001376:	3328      	adds	r3, #40	; 0x28
 8001378:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 800137a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137c:	3301      	adds	r3, #1
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
 8001380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001382:	2b03      	cmp	r3, #3
 8001384:	f77f af09 	ble.w	800119a <DrumCalibrate+0x9a>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	e00a      	b.n	80013a4 <DrumCalibrate+0x2a4>
		free(values[i]);
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f010 f833 	bl	8011404 <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	3301      	adds	r3, #1
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	ddf1      	ble.n	800138e <DrumCalibrate+0x28e>
	}
	free(values);
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f010 f82a 	bl	8011404 <free>

}
 80013b0:	bf00      	nop
 80013b2:	3748      	adds	r7, #72	; 0x48
 80013b4:	46bd      	mov	sp, r7
 80013b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	00000000 	.word	0x00000000
 80013c4:	4072c000 	.word	0x4072c000
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4072b000 	.word	0x4072b000
 80013d0:	2000bb24 	.word	0x2000bb24
 80013d4:	2000bb38 	.word	0x2000bb38
 80013d8:	401c0000 	.word	0x401c0000
 80013dc:	40140000 	.word	0x40140000

080013e0 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <ILI9341_Send_Command+0x34>)
 80013f2:	f003 fcfc 	bl	8004dee <HAL_GPIO_WritePin>
	DC_COMMAND;
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <ILI9341_Send_Command+0x34>)
 80013fe:	f003 fcf6 	bl	8004dee <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 f95d 	bl	80016c4 <ILI9341_SPI_Send>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40010c00 	.word	0x40010c00

08001418 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <ILI9341_Send_Data+0x34>)
 800142a:	f003 fce0 	bl	8004dee <HAL_GPIO_WritePin>
	DC_DATA;
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <ILI9341_Send_Data+0x34>)
 8001436:	f003 fcda 	bl	8004dee <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f941 	bl	80016c4 <ILI9341_SPI_Send>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40010c00 	.word	0x40010c00

08001450 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 8001454:	f000 f900 	bl	8001658 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8001458:	f000 f958 	bl	800170c <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 800145c:	2001      	movs	r0, #1
 800145e:	f7ff ffbf 	bl	80013e0 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 8001462:	20cb      	movs	r0, #203	; 0xcb
 8001464:	f7ff ffbc 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8001468:	2039      	movs	r0, #57	; 0x39
 800146a:	f7ff ffd5 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 800146e:	202c      	movs	r0, #44	; 0x2c
 8001470:	f7ff ffd2 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff ffcf 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 800147a:	2034      	movs	r0, #52	; 0x34
 800147c:	f7ff ffcc 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001480:	2002      	movs	r0, #2
 8001482:	f7ff ffc9 	bl	8001418 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 8001486:	20cf      	movs	r0, #207	; 0xcf
 8001488:	f7ff ffaa 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff ffc3 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001492:	20c1      	movs	r0, #193	; 0xc1
 8001494:	f7ff ffc0 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8001498:	2030      	movs	r0, #48	; 0x30
 800149a:	f7ff ffbd 	bl	8001418 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800149e:	20e8      	movs	r0, #232	; 0xe8
 80014a0:	f7ff ff9e 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80014a4:	2085      	movs	r0, #133	; 0x85
 80014a6:	f7ff ffb7 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff ffb4 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80014b0:	2078      	movs	r0, #120	; 0x78
 80014b2:	f7ff ffb1 	bl	8001418 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80014b6:	20ea      	movs	r0, #234	; 0xea
 80014b8:	f7ff ff92 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014bc:	2000      	movs	r0, #0
 80014be:	f7ff ffab 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff ffa8 	bl	8001418 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80014c8:	20ed      	movs	r0, #237	; 0xed
 80014ca:	f7ff ff89 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80014ce:	2064      	movs	r0, #100	; 0x64
 80014d0:	f7ff ffa2 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f7ff ff9f 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80014da:	2012      	movs	r0, #18
 80014dc:	f7ff ff9c 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80014e0:	2081      	movs	r0, #129	; 0x81
 80014e2:	f7ff ff99 	bl	8001418 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80014e6:	20f7      	movs	r0, #247	; 0xf7
 80014e8:	f7ff ff7a 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80014ec:	2020      	movs	r0, #32
 80014ee:	f7ff ff93 	bl	8001418 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80014f2:	20c0      	movs	r0, #192	; 0xc0
 80014f4:	f7ff ff74 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 80014f8:	2010      	movs	r0, #16
 80014fa:	f7ff ff8d 	bl	8001418 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 80014fe:	20c1      	movs	r0, #193	; 0xc1
 8001500:	f7ff ff6e 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001504:	2010      	movs	r0, #16
 8001506:	f7ff ff87 	bl	8001418 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 800150a:	20c5      	movs	r0, #197	; 0xc5
 800150c:	f7ff ff68 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001510:	203e      	movs	r0, #62	; 0x3e
 8001512:	f7ff ff81 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8001516:	2028      	movs	r0, #40	; 0x28
 8001518:	f7ff ff7e 	bl	8001418 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 800151c:	20c7      	movs	r0, #199	; 0xc7
 800151e:	f7ff ff5f 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8001522:	2086      	movs	r0, #134	; 0x86
 8001524:	f7ff ff78 	bl	8001418 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8001528:	2036      	movs	r0, #54	; 0x36
 800152a:	f7ff ff59 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 800152e:	2048      	movs	r0, #72	; 0x48
 8001530:	f7ff ff72 	bl	8001418 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 8001534:	203a      	movs	r0, #58	; 0x3a
 8001536:	f7ff ff53 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 800153a:	2055      	movs	r0, #85	; 0x55
 800153c:	f7ff ff6c 	bl	8001418 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001540:	20b1      	movs	r0, #177	; 0xb1
 8001542:	f7ff ff4d 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ff66 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 800154c:	2018      	movs	r0, #24
 800154e:	f7ff ff63 	bl	8001418 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 8001552:	20b6      	movs	r0, #182	; 0xb6
 8001554:	f7ff ff44 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8001558:	2008      	movs	r0, #8
 800155a:	f7ff ff5d 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 800155e:	2082      	movs	r0, #130	; 0x82
 8001560:	f7ff ff5a 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 8001564:	2027      	movs	r0, #39	; 0x27
 8001566:	f7ff ff57 	bl	8001418 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 800156a:	20f2      	movs	r0, #242	; 0xf2
 800156c:	f7ff ff38 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff ff51 	bl	8001418 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 8001576:	2026      	movs	r0, #38	; 0x26
 8001578:	f7ff ff32 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 800157c:	2001      	movs	r0, #1
 800157e:	f7ff ff4b 	bl	8001418 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 8001582:	20e0      	movs	r0, #224	; 0xe0
 8001584:	f7ff ff2c 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8001588:	200f      	movs	r0, #15
 800158a:	f7ff ff45 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800158e:	2031      	movs	r0, #49	; 0x31
 8001590:	f7ff ff42 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8001594:	202b      	movs	r0, #43	; 0x2b
 8001596:	f7ff ff3f 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800159a:	200c      	movs	r0, #12
 800159c:	f7ff ff3c 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015a0:	200e      	movs	r0, #14
 80015a2:	f7ff ff39 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80015a6:	2008      	movs	r0, #8
 80015a8:	f7ff ff36 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80015ac:	204e      	movs	r0, #78	; 0x4e
 80015ae:	f7ff ff33 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80015b2:	20f1      	movs	r0, #241	; 0xf1
 80015b4:	f7ff ff30 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80015b8:	2037      	movs	r0, #55	; 0x37
 80015ba:	f7ff ff2d 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80015be:	2007      	movs	r0, #7
 80015c0:	f7ff ff2a 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80015c4:	2010      	movs	r0, #16
 80015c6:	f7ff ff27 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015ca:	2003      	movs	r0, #3
 80015cc:	f7ff ff24 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015d0:	200e      	movs	r0, #14
 80015d2:	f7ff ff21 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80015d6:	2009      	movs	r0, #9
 80015d8:	f7ff ff1e 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015dc:	2000      	movs	r0, #0
 80015de:	f7ff ff1b 	bl	8001418 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80015e2:	20e1      	movs	r0, #225	; 0xe1
 80015e4:	f7ff fefc 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ff15 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015ee:	200e      	movs	r0, #14
 80015f0:	f7ff ff12 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80015f4:	2014      	movs	r0, #20
 80015f6:	f7ff ff0f 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015fa:	2003      	movs	r0, #3
 80015fc:	f7ff ff0c 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001600:	2011      	movs	r0, #17
 8001602:	f7ff ff09 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8001606:	2007      	movs	r0, #7
 8001608:	f7ff ff06 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800160c:	2031      	movs	r0, #49	; 0x31
 800160e:	f7ff ff03 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8001612:	20c1      	movs	r0, #193	; 0xc1
 8001614:	f7ff ff00 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001618:	2048      	movs	r0, #72	; 0x48
 800161a:	f7ff fefd 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800161e:	2008      	movs	r0, #8
 8001620:	f7ff fefa 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001624:	200f      	movs	r0, #15
 8001626:	f7ff fef7 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800162a:	200c      	movs	r0, #12
 800162c:	f7ff fef4 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001630:	2031      	movs	r0, #49	; 0x31
 8001632:	f7ff fef1 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 8001636:	2036      	movs	r0, #54	; 0x36
 8001638:	f7ff feee 	bl	8001418 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff feeb 	bl	8001418 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 8001642:	2011      	movs	r0, #17
 8001644:	f7ff fecc 	bl	80013e0 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8001648:	2029      	movs	r0, #41	; 0x29
 800164a:	f7ff fec9 	bl	80013e0 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 800164e:	202c      	movs	r0, #44	; 0x2c
 8001650:	f7ff fee2 	bl	8001418 <ILI9341_Send_Data>
}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}

08001658 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <ILI9341_SPI_Init+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001664:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001668:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <ILI9341_SPI_Init+0x64>)
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <ILI9341_SPI_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <ILI9341_SPI_Init+0x64>)
 80016a4:	220a      	movs	r2, #10
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <ILI9341_SPI_Init+0x64>)
 80016aa:	f007 f8aa 	bl	8008802 <HAL_SPI_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80016b4:	f001 fad8 	bl	8002c68 <Error_Handler>
	}
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000bbfc 	.word	0x2000bbfc
 80016c0:	40003800 	.word	0x40003800

080016c4 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80016ce:	1df9      	adds	r1, r7, #7
 80016d0:	2301      	movs	r3, #1
 80016d2:	2201      	movs	r2, #1
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <ILI9341_SPI_Send+0x20>)
 80016d6:	f007 f918 	bl	800890a <HAL_SPI_Transmit>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000bbfc 	.word	0x2000bbfc

080016e8 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	230a      	movs	r3, #10
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <ILI9341_SPI_Send_Multiple+0x20>)
 80016fc:	f007 f905 	bl	800890a <HAL_SPI_Transmit>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000bbfc 	.word	0x2000bbfc

0800170c <ILI9341_Reset>:

void ILI9341_Reset() {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	RESET_ON;
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001716:	4810      	ldr	r0, [pc, #64]	; (8001758 <ILI9341_Reset+0x4c>)
 8001718:	f003 fb69 	bl	8004dee <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f001 fecf 	bl	80034c0 <HAL_Delay>
	RESET_OFF;
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001728:	480b      	ldr	r0, [pc, #44]	; (8001758 <ILI9341_Reset+0x4c>)
 800172a:	f003 fb60 	bl	8004dee <HAL_GPIO_WritePin>
	CS_ON;
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <ILI9341_Reset+0x4c>)
 8001736:	f003 fb5a 	bl	8004dee <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800173a:	2032      	movs	r0, #50	; 0x32
 800173c:	f001 fec0 	bl	80034c0 <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fe4d 	bl	80013e0 <ILI9341_Send_Command>
	CS_OFF;
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <ILI9341_Reset+0x4c>)
 800174e:	f003 fb4e 	bl	8004dee <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40010c00 	.word	0x40010c00

0800175c <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 8001766:	2036      	movs	r0, #54	; 0x36
 8001768:	f7ff fe3a 	bl	80013e0 <ILI9341_Send_Command>
	switch (rotation) {
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d836      	bhi.n	80017e0 <ILI9341_Set_Rotation+0x84>
 8001772:	a201      	add	r2, pc, #4	; (adr r2, 8001778 <ILI9341_Set_Rotation+0x1c>)
 8001774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001778:	08001789 	.word	0x08001789
 800177c:	0800179f 	.word	0x0800179f
 8001780:	080017b5 	.word	0x080017b5
 8001784:	080017cb 	.word	0x080017cb
	case 0:
		ILI9341_Send_Data(0x48);
 8001788:	2048      	movs	r0, #72	; 0x48
 800178a:	f7ff fe45 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 240;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 8001790:	22f0      	movs	r2, #240	; 0xf0
 8001792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 8001796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800179a:	601a      	str	r2, [r3, #0]
		break;
 800179c:	e020      	b.n	80017e0 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 800179e:	2028      	movs	r0, #40	; 0x28
 80017a0:	f7ff fe3a 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 80017a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 80017ae:	22f0      	movs	r2, #240	; 0xf0
 80017b0:	601a      	str	r2, [r3, #0]
		break;
 80017b2:	e015      	b.n	80017e0 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80017b4:	2088      	movs	r0, #136	; 0x88
 80017b6:	f7ff fe2f 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 240;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 80017bc:	22f0      	movs	r2, #240	; 0xf0
 80017be:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 80017c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017c6:	601a      	str	r2, [r3, #0]
		break;
 80017c8:	e00a      	b.n	80017e0 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80017ca:	20e8      	movs	r0, #232	; 0xe8
 80017cc:	f7ff fe24 	bl	8001418 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <ILI9341_Set_Rotation+0x8c>)
 80017d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017d6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <ILI9341_Set_Rotation+0x90>)
 80017da:	22f0      	movs	r2, #240	; 0xf0
 80017dc:	601a      	str	r2, [r3, #0]
		break;
 80017de:	bf00      	nop
	}
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000004 	.word	0x20000004

080017f0 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80017fc:	2200      	movs	r2, #0
 80017fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001802:	4817      	ldr	r0, [pc, #92]	; (8001860 <ILI9341_SPI_Send_32+0x70>)
 8001804:	f003 faf3 	bl	8004dee <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <ILI9341_SPI_Send_32+0x70>)
 8001810:	f003 faed 	bl	8004dee <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff54 	bl	80016c4 <ILI9341_SPI_Send>

	DC_DATA;
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <ILI9341_SPI_Send_32+0x70>)
 8001824:	f003 fae3 	bl	8004dee <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	0e1b      	lsrs	r3, r3, #24
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff48 	bl	80016c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff42 	bl	80016c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	0a1b      	lsrs	r3, r3, #8
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff3c 	bl	80016c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff37 	bl	80016c4 <ILI9341_SPI_Send>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40010c00 	.word	0x40010c00

08001864 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	617b      	str	r3, [r7, #20]
	t |= x2;
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8001884:	6979      	ldr	r1, [r7, #20]
 8001886:	202a      	movs	r0, #42	; 0x2a
 8001888:	f7ff ffb2 	bl	80017f0 <ILI9341_SPI_Send_32>
	t = y1;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	617b      	str	r3, [r7, #20]
	t |= y2;
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800189e:	6979      	ldr	r1, [r7, #20]
 80018a0:	202b      	movs	r0, #43	; 0x2b
 80018a2:	f7ff ffa5 	bl	80017f0 <ILI9341_SPI_Send_32>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 80018ae:	b590      	push	{r4, r7, lr}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4604      	mov	r4, r0
 80018b6:	4608      	mov	r0, r1
 80018b8:	4611      	mov	r1, r2
 80018ba:	461a      	mov	r2, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	80fb      	strh	r3, [r7, #6]
 80018c0:	4603      	mov	r3, r0
 80018c2:	80bb      	strh	r3, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 80018cc:	88f8      	ldrh	r0, [r7, #6]
 80018ce:	88b9      	ldrh	r1, [r7, #4]
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	4413      	add	r3, r2
 80018d6:	3b01      	subs	r3, #1
 80018d8:	461c      	mov	r4, r3
 80018da:	88ba      	ldrh	r2, [r7, #4]
 80018dc:	883b      	ldrh	r3, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4622      	mov	r2, r4
 80018e4:	f7ff ffbe 	bl	8001864 <ILI9341_Set_Address>
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001900:	202c      	movs	r0, #44	; 0x2c
 8001902:	f7ff fd6d 	bl	80013e0 <ILI9341_Send_Command>

	CS_ON;
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190c:	482a      	ldr	r0, [pc, #168]	; (80019b8 <LCD_FillWindow+0xc8>)
 800190e:	f003 fa6e 	bl	8004dee <HAL_GPIO_WritePin>
	DC_DATA;
 8001912:	2201      	movs	r2, #1
 8001914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001918:	4827      	ldr	r0, [pc, #156]	; (80019b8 <LCD_FillWindow+0xc8>)
 800191a:	f003 fa68 	bl	8004dee <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a26      	ldr	r2, [pc, #152]	; (80019bc <LCD_FillWindow+0xcc>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	08db      	lsrs	r3, r3, #3
 8001928:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b3f      	cmp	r3, #63	; 0x3f
 800192e:	dc01      	bgt.n	8001934 <LCD_FillWindow+0x44>
 8001930:	2340      	movs	r3, #64	; 0x40
 8001932:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2bf0      	cmp	r3, #240	; 0xf0
 8001938:	dd01      	ble.n	800193e <LCD_FillWindow+0x4e>
 800193a:	23f0      	movs	r3, #240	; 0xf0
 800193c:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4618      	mov	r0, r3
 8001956:	f00f fd4d 	bl	80113f4 <malloc>
 800195a:	4603      	mov	r3, r0
 800195c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e009      	b.n	8001978 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	b292      	uxth	r2, r2
 8001970:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	3301      	adds	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf1      	blt.n	8001964 <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001980:	e009      	b.n	8001996 <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4619      	mov	r1, r3
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f7ff fead 	bl	80016e8 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d8f1      	bhi.n	8001982 <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4619      	mov	r1, r3
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fe9f 	bl	80016e8 <ILI9341_SPI_Send_Multiple>

	free(array);
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f00f fd2a 	bl	8011404 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40010c00 	.word	0x40010c00
 80019bc:	cccccccd 	.word	0xcccccccd

080019c0 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4604      	mov	r4, r0
 80019c8:	4608      	mov	r0, r1
 80019ca:	4611      	mov	r1, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	80fb      	strh	r3, [r7, #6]
 80019d2:	4603      	mov	r3, r0
 80019d4:	80bb      	strh	r3, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	807b      	strh	r3, [r7, #2]
 80019da:	4613      	mov	r3, r2
 80019dc:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019de:	883b      	ldrh	r3, [r7, #0]
 80019e0:	887a      	ldrh	r2, [r7, #2]
 80019e2:	88b9      	ldrh	r1, [r7, #4]
 80019e4:	88f8      	ldrh	r0, [r7, #6]
 80019e6:	f7ff ff62 	bl	80018ae <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	883a      	ldrh	r2, [r7, #0]
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	8b3b      	ldrh	r3, [r7, #24]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7ff ff79 	bl	80018f0 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
	...

08001a08 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	4603      	mov	r3, r0
 8001a10:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <LCD_FillScreen+0x2c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <LCD_FillScreen+0x30>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	460b      	mov	r3, r1
 8001a24:	2100      	movs	r1, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff ffca 	bl	80019c0 <LCD_DrawFilledRectangle>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000004 	.word	0x20000004

08001a3c <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
 8001a46:	460b      	mov	r3, r1
 8001a48:	80bb      	strh	r3, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	3b20      	subs	r3, #32
 8001a52:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a54:	88b9      	ldrh	r1, [r7, #4]
 8001a56:	88f8      	ldrh	r0, [r7, #6]
 8001a58:	2310      	movs	r3, #16
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	f7ff ff27 	bl	80018ae <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8001a60:	202c      	movs	r0, #44	; 0x2c
 8001a62:	f7ff fcbd 	bl	80013e0 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8001a66:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a6a:	f00f fcc3 	bl	80113f4 <malloc>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a76:	2300      	movs	r3, #0
 8001a78:	75bb      	strb	r3, [r7, #22]
 8001a7a:	e026      	b.n	8001aca <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a7c:	7bfa      	ldrb	r2, [r7, #15]
 8001a7e:	7dbb      	ldrb	r3, [r7, #22]
 8001a80:	491c      	ldr	r1, [pc, #112]	; (8001af4 <LCD_DrawChar+0xb8>)
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	440a      	add	r2, r1
 8001a86:	4413      	add	r3, r2
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	757b      	strb	r3, [r7, #21]
 8001a90:	e015      	b.n	8001abe <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	801a      	strh	r2, [r3, #0]
 8001aa2:	e003      	b.n	8001aac <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aaa:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
			pt++;
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001ab8:	7d7b      	ldrb	r3, [r7, #21]
 8001aba:	3301      	adds	r3, #1
 8001abc:	757b      	strb	r3, [r7, #21]
 8001abe:	7d7b      	ldrb	r3, [r7, #21]
 8001ac0:	2b07      	cmp	r3, #7
 8001ac2:	d9e6      	bls.n	8001a92 <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001ac4:	7dbb      	ldrb	r3, [r7, #22]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	75bb      	strb	r3, [r7, #22]
 8001aca:	7dbb      	ldrb	r3, [r7, #22]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d9d5      	bls.n	8001a7c <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <LCD_DrawChar+0xbc>)
 8001ad8:	f003 f989 	bl	8004dee <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8001adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f7ff fe01 	bl	80016e8 <ILI9341_SPI_Send_Multiple>
	free(array);
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f00f fc8c 	bl	8011404 <free>
}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	08014578 	.word	0x08014578
 8001af8:	40010c00 	.word	0x40010c00

08001afc <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	603a      	str	r2, [r7, #0]
 8001b06:	80fb      	strh	r3, [r7, #6]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001b0c:	e01d      	b.n	8001b4a <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001b14:	d904      	bls.n	8001b20 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b16:	2300      	movs	r3, #0
 8001b18:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001b1a:	88bb      	ldrh	r3, [r7, #4]
 8001b1c:	3310      	adds	r3, #16
 8001b1e:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001b20:	88bb      	ldrh	r3, [r7, #4]
 8001b22:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001b26:	d903      	bls.n	8001b30 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	88b9      	ldrh	r1, [r7, #4]
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff7f 	bl	8001a3c <LCD_DrawChar>

		pStr ++;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	3301      	adds	r3, #1
 8001b42:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	3308      	adds	r3, #8
 8001b48:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1dd      	bne.n	8001b0e <LCD_DrawString+0x12>

	}

}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8001b5c:	b40c      	push	{r2, r3}
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b08e      	sub	sp, #56	; 0x38
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	460a      	mov	r2, r1
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 8001b6e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b72:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8001b74:	f107 000c 	add.w	r0, r7, #12
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b7c:	2128      	movs	r1, #40	; 0x28
 8001b7e:	f010 f9c9 	bl	8011f14 <vsniprintf>
 8001b82:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8001b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db0b      	blt.n	8001ba2 <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f107 020c 	add.w	r2, r7, #12
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7ff ffae 	bl	8001afc <LCD_DrawString>
 8001ba0:	e000      	b.n	8001ba4 <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8001ba2:	bf00      	nop
}
 8001ba4:	3738      	adds	r7, #56	; 0x38
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bac:	b002      	add	sp, #8
 8001bae:	4770      	bx	lr

08001bb0 <HAL_TIM_PeriodElapsedCallback>:

uint32_t audio_interrupt_counts = 0;
uint32_t audio_interrupt_start_tick = 0;
uint32_t mix_interrupt_counts = 0;
uint32_t mix_interrupt_start_tick = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d105      	bne.n	8001bcc <HAL_TIM_PeriodElapsedCallback+0x1c>
		drum_interrupt_counts++;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001bc8:	6013      	str	r3, [r2, #0]
		mix_interrupt_counts++;
		PrecomputeMix();
	}


}
 8001bca:	e00a      	b.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x32>
	else if (htim == &htim4) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d106      	bne.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x32>
		mix_interrupt_counts++;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001bdc:	6013      	str	r3, [r2, #0]
		PrecomputeMix();
 8001bde:	f000 f9c1 	bl	8001f64 <PrecomputeMix>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	2000bedc 	.word	0x2000bedc
 8001bf0:	2000bf70 	.word	0x2000bf70
 8001bf4:	2000bf24 	.word	0x2000bf24
 8001bf8:	2000bf78 	.word	0x2000bf78

08001bfc <HAL_GPIO_EXTI_Callback>:
uint32_t currentMillis = 0;
uint16_t keyPressed = 0;
//uint16_t previousKeyPressed = 0;
uint16_t btn_callbacks = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
	// See if it's falling or rising edge, may fail at times
	int callback_pin_value = HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, GPIO_Pin);
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4807      	ldr	r0, [pc, #28]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001c0c:	f003 f8d8 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	60fb      	str	r3, [r7, #12]
	if (callback_pin_value == GPIO_PIN_RESET) {
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10a      	bne.n	8001c30 <HAL_GPIO_EXTI_Callback+0x34>
		previousMillis = HAL_GetTick();
 8001c1a:	f001 fc47 	bl	80034ac <HAL_GetTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a02      	ldr	r2, [pc, #8]	; (8001c2c <HAL_GPIO_EXTI_Callback+0x30>)
 8001c22:	6013      	str	r3, [r2, #0]
		return;
 8001c24:	e175      	b.n	8001f12 <HAL_GPIO_EXTI_Callback+0x316>
 8001c26:	bf00      	nop
 8001c28:	40011800 	.word	0x40011800
 8001c2c:	2000bf90 	.word	0x2000bf90
	}

//	btn_callbacks += 1;
//	return;
	currentMillis = HAL_GetTick();
 8001c30:	f001 fc3c 	bl	80034ac <HAL_GetTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4aa5      	ldr	r2, [pc, #660]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c38:	6013      	str	r3, [r2, #0]
	keyPressed = 0;
 8001c3a:	4ba5      	ldr	r3, [pc, #660]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	801a      	strh	r2, [r3, #0]
	if (currentMillis - previousMillis > 20) {
 8001c40:	4ba2      	ldr	r3, [pc, #648]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4ba3      	ldr	r3, [pc, #652]	; (8001ed4 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b14      	cmp	r3, #20
 8001c4c:	f240 815a 	bls.w	8001f04 <HAL_GPIO_EXTI_Callback+0x308>

		// Change this if the R pins are not the same
		GPIO_InitStructPrivate.Pin = BTN_PAD_R1_PIN|BTN_PAD_R2_PIN|BTN_PAD_R3_PIN|BTN_PAD_R4_PIN;
 8001c50:	4ba1      	ldr	r3, [pc, #644]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001c52:	220f      	movs	r2, #15
 8001c54:	601a      	str	r2, [r3, #0]
		GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001c56:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001c5c:	4b9e      	ldr	r3, [pc, #632]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
		GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	4b9d      	ldr	r3, [pc, #628]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001c64:	2202      	movs	r2, #2
 8001c66:	60da      	str	r2, [r3, #12]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001c68:	499b      	ldr	r1, [pc, #620]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001c6a:	489c      	ldr	r0, [pc, #624]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001c6c:	f002 ff14 	bl	8004a98 <HAL_GPIO_Init>

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2110      	movs	r1, #16
 8001c74:	4899      	ldr	r0, [pc, #612]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001c76:	f003 f8ba 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	4897      	ldr	r0, [pc, #604]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001c80:	f003 f8b5 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2140      	movs	r1, #64	; 0x40
 8001c88:	4894      	ldr	r0, [pc, #592]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001c8a:	f003 f8b0 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c94:	4892      	ldr	r0, [pc, #584]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001c96:	f003 f8aa 	bl	8004dee <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 16;
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	488f      	ldr	r0, [pc, #572]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001c9e:	f003 f88f 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_GPIO_EXTI_Callback+0xb8>
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d102      	bne.n	8001cb4 <HAL_GPIO_EXTI_Callback+0xb8>
 8001cae:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 15;
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4889      	ldr	r0, [pc, #548]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001cb8:	f003 f882 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_EXTI_Callback+0xd2>
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d102      	bne.n	8001cce <HAL_GPIO_EXTI_Callback+0xd2>
 8001cc8:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001cca:	220f      	movs	r2, #15
 8001ccc:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 14;
 8001cce:	2104      	movs	r1, #4
 8001cd0:	4882      	ldr	r0, [pc, #520]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001cd2:	f003 f875 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_GPIO_EXTI_Callback+0xec>
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d102      	bne.n	8001ce8 <HAL_GPIO_EXTI_Callback+0xec>
 8001ce2:	4b7b      	ldr	r3, [pc, #492]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001ce4:	220e      	movs	r2, #14
 8001ce6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 13;
 8001ce8:	2108      	movs	r1, #8
 8001cea:	487c      	ldr	r0, [pc, #496]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001cec:	f003 f868 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_EXTI_Callback+0x106>
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d102      	bne.n	8001d02 <HAL_GPIO_EXTI_Callback+0x106>
 8001cfc:	4b74      	ldr	r3, [pc, #464]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001cfe:	220d      	movs	r2, #13
 8001d00:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2110      	movs	r1, #16
 8001d06:	4875      	ldr	r0, [pc, #468]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d08:	f003 f871 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2120      	movs	r1, #32
 8001d10:	4872      	ldr	r0, [pc, #456]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d12:	f003 f86c 	bl	8004dee <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 12;
 8001d16:	2101      	movs	r1, #1
 8001d18:	4870      	ldr	r0, [pc, #448]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d1a:	f003 f851 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_GPIO_EXTI_Callback+0x134>
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d102      	bne.n	8001d30 <HAL_GPIO_EXTI_Callback+0x134>
 8001d2a:	4b69      	ldr	r3, [pc, #420]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 11;
 8001d30:	2102      	movs	r1, #2
 8001d32:	486a      	ldr	r0, [pc, #424]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d34:	f003 f844 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_GPIO_EXTI_Callback+0x14e>
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d102      	bne.n	8001d4a <HAL_GPIO_EXTI_Callback+0x14e>
 8001d44:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001d46:	220b      	movs	r2, #11
 8001d48:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 10;
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	4863      	ldr	r0, [pc, #396]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d4e:	f003 f837 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_GPIO_EXTI_Callback+0x168>
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d102      	bne.n	8001d64 <HAL_GPIO_EXTI_Callback+0x168>
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001d60:	220a      	movs	r2, #10
 8001d62:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 9;
 8001d64:	2108      	movs	r1, #8
 8001d66:	485d      	ldr	r0, [pc, #372]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d68:	f003 f82a 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_GPIO_EXTI_Callback+0x182>
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d102      	bne.n	8001d7e <HAL_GPIO_EXTI_Callback+0x182>
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001d7a:	2209      	movs	r2, #9
 8001d7c:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2120      	movs	r1, #32
 8001d82:	4856      	ldr	r0, [pc, #344]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d84:	f003 f833 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	4853      	ldr	r0, [pc, #332]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d8e:	f003 f82e 	bl	8004dee <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 8;
 8001d92:	2101      	movs	r1, #1
 8001d94:	4851      	ldr	r0, [pc, #324]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d96:	f003 f813 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_EXTI_Callback+0x1b0>
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d102      	bne.n	8001dac <HAL_GPIO_EXTI_Callback+0x1b0>
 8001da6:	4b4a      	ldr	r3, [pc, #296]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001da8:	2208      	movs	r2, #8
 8001daa:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 7;
 8001dac:	2102      	movs	r1, #2
 8001dae:	484b      	ldr	r0, [pc, #300]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001db0:	f003 f806 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_GPIO_EXTI_Callback+0x1ca>
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d102      	bne.n	8001dc6 <HAL_GPIO_EXTI_Callback+0x1ca>
 8001dc0:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 6;
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	4844      	ldr	r0, [pc, #272]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001dca:	f002 fff9 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <HAL_GPIO_EXTI_Callback+0x1e4>
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d102      	bne.n	8001de0 <HAL_GPIO_EXTI_Callback+0x1e4>
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001ddc:	2206      	movs	r2, #6
 8001dde:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 5;
 8001de0:	2108      	movs	r1, #8
 8001de2:	483e      	ldr	r0, [pc, #248]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001de4:	f002 ffec 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_GPIO_EXTI_Callback+0x1fe>
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d102      	bne.n	8001dfa <HAL_GPIO_EXTI_Callback+0x1fe>
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001df6:	2205      	movs	r2, #5
 8001df8:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2140      	movs	r1, #64	; 0x40
 8001dfe:	4837      	ldr	r0, [pc, #220]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e00:	f002 fff5 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0a:	4835      	ldr	r0, [pc, #212]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001e0c:	f002 ffef 	bl	8004dee <HAL_GPIO_WritePin>
		if (HAL_GPIO_ReadPin(BTN_PAD_R1_PORT, BTN_PAD_R1_PIN) && GPIO_Pin == BTN_PAD_R1_PIN) keyPressed = 4;
 8001e10:	2101      	movs	r1, #1
 8001e12:	4832      	ldr	r0, [pc, #200]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e14:	f002 ffd4 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_GPIO_EXTI_Callback+0x22e>
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d102      	bne.n	8001e2a <HAL_GPIO_EXTI_Callback+0x22e>
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001e26:	2204      	movs	r2, #4
 8001e28:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R2_PORT, BTN_PAD_R2_PIN) && GPIO_Pin == BTN_PAD_R2_PIN) keyPressed = 3;
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	482b      	ldr	r0, [pc, #172]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e2e:	f002 ffc7 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_GPIO_EXTI_Callback+0x248>
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d102      	bne.n	8001e44 <HAL_GPIO_EXTI_Callback+0x248>
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001e40:	2203      	movs	r2, #3
 8001e42:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R3_PORT, BTN_PAD_R3_PIN) && GPIO_Pin == BTN_PAD_R3_PIN) keyPressed = 2;
 8001e44:	2104      	movs	r1, #4
 8001e46:	4825      	ldr	r0, [pc, #148]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e48:	f002 ffba 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_GPIO_EXTI_Callback+0x262>
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d102      	bne.n	8001e5e <HAL_GPIO_EXTI_Callback+0x262>
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BTN_PAD_R4_PORT, BTN_PAD_R4_PIN) && GPIO_Pin == BTN_PAD_R4_PIN) keyPressed = 1;
 8001e5e:	2108      	movs	r1, #8
 8001e60:	481e      	ldr	r0, [pc, #120]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e62:	f002 ffad 	bl	8004dc0 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_GPIO_EXTI_Callback+0x27c>
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d102      	bne.n	8001e78 <HAL_GPIO_EXTI_Callback+0x27c>
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4817      	ldr	r0, [pc, #92]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e7e:	f002 ffb6 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 8001e82:	2201      	movs	r2, #1
 8001e84:	2120      	movs	r1, #32
 8001e86:	4815      	ldr	r0, [pc, #84]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e88:	f002 ffb1 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2140      	movs	r1, #64	; 0x40
 8001e90:	4812      	ldr	r0, [pc, #72]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001e92:	f002 ffac 	bl	8004dee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9c:	4810      	ldr	r0, [pc, #64]	; (8001ee0 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001e9e:	f002 ffa6 	bl	8004dee <HAL_GPIO_WritePin>

		GPIO_InitStructPrivate.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001ea6:	605a      	str	r2, [r3, #4]
		GPIO_InitStructPrivate.Pull = GPIO_PULLDOWN;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001eaa:	2202      	movs	r2, #2
 8001eac:	609a      	str	r2, [r3, #8]
		HAL_GPIO_Init(BTN_PAD_R1_PORT, &GPIO_InitStructPrivate);
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001eb0:	480a      	ldr	r0, [pc, #40]	; (8001edc <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001eb2:	f002 fdf1 	bl	8004a98 <HAL_GPIO_Init>

		switch (keyPressed) {
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d01b      	beq.n	8001ef6 <HAL_GPIO_EXTI_Callback+0x2fa>
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	dc21      	bgt.n	8001f06 <HAL_GPIO_EXTI_Callback+0x30a>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d024      	beq.n	8001f10 <HAL_GPIO_EXTI_Callback+0x314>
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d11d      	bne.n	8001f06 <HAL_GPIO_EXTI_Callback+0x30a>
 8001eca:	e00d      	b.n	8001ee8 <HAL_GPIO_EXTI_Callback+0x2ec>
 8001ecc:	2000bf94 	.word	0x2000bf94
 8001ed0:	2000bf98 	.word	0x2000bf98
 8001ed4:	2000bf90 	.word	0x2000bf90
 8001ed8:	2000bf80 	.word	0x2000bf80
 8001edc:	40011800 	.word	0x40011800
 8001ee0:	40011000 	.word	0x40011000
 8001ee4:	10310000 	.word	0x10310000
			case 0: return;
			case 1: btn_callbacks += 1; break;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x30a>
			case 2: btn_callbacks -= 1; break;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	e000      	b.n	8001f06 <HAL_GPIO_EXTI_Callback+0x30a>
		}

	}
 8001f04:	bf00      	nop

	previousMillis = currentMillis;
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x320>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <HAL_GPIO_EXTI_Callback+0x324>)
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_EXTI_Callback+0x316>
			case 0: return;
 8001f10:	bf00      	nop
}
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2000bf9a 	.word	0x2000bf9a
 8001f1c:	2000bf94 	.word	0x2000bf94
 8001f20:	2000bf90 	.word	0x2000bf90

08001f24 <AddDrum>:
} AudioTrack;
AudioTrack audio_tracks[MAX_TRACKS];
int num_tracks = 0;
int audio_dma_on = 0;

void AddDrum(DrumSound sound) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
	AddTrack((AudioTrack) {
		.buff = drum_sounds[sound],
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <AddDrum+0x38>)
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	AddTrack((AudioTrack) {
 8001f36:	60bb      	str	r3, [r7, #8]
		.length = drum_sound_lengths[sound],
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	4a09      	ldr	r2, [pc, #36]	; (8001f60 <AddDrum+0x3c>)
 8001f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
	AddTrack((AudioTrack) {
 8001f40:	81bb      	strh	r3, [r7, #12]
 8001f42:	2300      	movs	r3, #0
 8001f44:	81fb      	strh	r3, [r7, #14]
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f4e:	f000 f865 	bl	800201c <AddTrack>
		.pos = 0
	});
}
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000b598 	.word	0x2000b598
 8001f60:	08014b68 	.word	0x08014b68

08001f64 <PrecomputeMix>:

DAC_HandleTypeDef hdac;
int pos = 0;
void PrecomputeMix() {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af02      	add	r7, sp, #8

	if (num_tracks <= 0) {
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <PrecomputeMix+0xa0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	dc0e      	bgt.n	8001f90 <PrecomputeMix+0x2c>
		if (audio_dma_on) HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <PrecomputeMix+0xa4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <PrecomputeMix+0x1e>
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4823      	ldr	r0, [pc, #140]	; (800200c <PrecomputeMix+0xa8>)
 8001f7e:	f002 f8d7 	bl	8004130 <HAL_DAC_Stop_DMA>
		memset(audio_buff, 0, AUDIO_BUFF_LENGTH * 2);
 8001f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f86:	2100      	movs	r1, #0
 8001f88:	4821      	ldr	r0, [pc, #132]	; (8002010 <PrecomputeMix+0xac>)
 8001f8a:	f00f fa43 	bl	8011414 <memset>
//		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
//			audio_buff[i].u = -audio_buff[i].i + 32768;
//		}
	}

}
 8001f8e:	e035      	b.n	8001ffc <PrecomputeMix+0x98>
		if (!audio_dma_on) HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)audio_buff, AUDIO_BUFF_LENGTH, DAC_ALIGN_12B_L);
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <PrecomputeMix+0xa4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d108      	bne.n	8001faa <PrecomputeMix+0x46>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <PrecomputeMix+0xac>)
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4819      	ldr	r0, [pc, #100]	; (800200c <PrecomputeMix+0xa8>)
 8001fa6:	f002 f813 	bl	8003fd0 <HAL_DAC_Start_DMA>
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	e021      	b.n	8001ff4 <PrecomputeMix+0x90>
			audio_buff[i].u = (int16_t) (don[pos]) / 4 + 32768;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <PrecomputeMix+0xb0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a18      	ldr	r2, [pc, #96]	; (8002018 <PrecomputeMix+0xb4>)
 8001fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da00      	bge.n	8001fc2 <PrecomputeMix+0x5e>
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	109b      	asrs	r3, r3, #2
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001fcc:	b299      	uxth	r1, r3
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <PrecomputeMix+0xac>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pos = (pos + 1) % don_length;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <PrecomputeMix+0xb0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f645 22c7 	movw	r2, #23239	; 0x5ac7
 8001fe0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fe4:	fb01 f202 	mul.w	r2, r1, r2
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <PrecomputeMix+0xb0>)
 8001fec:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < AUDIO_BUFF_LENGTH; i++) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ffa:	dbd9      	blt.n	8001fb0 <PrecomputeMix+0x4c>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000c3d4 	.word	0x2000c3d4
 8002008:	2000c3d8 	.word	0x2000c3d8
 800200c:	2000bcc8 	.word	0x2000bcc8
 8002010:	2000bf9c 	.word	0x2000bf9c
 8002014:	2000c3dc 	.word	0x2000c3dc
 8002018:	20000008 	.word	0x20000008

0800201c <AddTrack>:

void AddTrack(AudioTrack track) {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	463b      	mov	r3, r7
 8002024:	e883 0003 	stmia.w	r3, {r0, r1}
	if (num_tracks >= MAX_TRACKS) return;
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <AddTrack+0x3c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b09      	cmp	r3, #9
 800202e:	dc0d      	bgt.n	800204c <AddTrack+0x30>
	audio_tracks[num_tracks++] = track;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <AddTrack+0x3c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	4908      	ldr	r1, [pc, #32]	; (8002058 <AddTrack+0x3c>)
 8002038:	600a      	str	r2, [r1, #0]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <AddTrack+0x40>)
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	463a      	mov	r2, r7
 8002042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002046:	e883 0003 	stmia.w	r3, {r0, r1}
 800204a:	e000      	b.n	800204e <AddTrack+0x32>
	if (num_tracks >= MAX_TRACKS) return;
 800204c:	bf00      	nop
}
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000c3d4 	.word	0x2000c3d4
 800205c:	2000c384 	.word	0x2000c384

08002060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002064:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8002068:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206a:	f001 f9c7 	bl	80033fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206e:	f000 fa87 	bl	8002580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002072:	f000 fd2b 	bl	8002acc <MX_GPIO_Init>
  MX_DMA_Init();
 8002076:	f000 fcef 	bl	8002a58 <MX_DMA_Init>
  MX_SPI2_Init();
 800207a:	f000 fbcd 	bl	8002818 <MX_SPI2_Init>
  MX_TIM3_Init();
 800207e:	f000 fc4d 	bl	800291c <MX_TIM3_Init>
  MX_ADC1_Init();
 8002082:	f000 fadd 	bl	8002640 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8002086:	f00e fdd1 	bl	8010c2c <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 800208a:	f000 fba5 	bl	80027d8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800208e:	f00a fc85 	bl	800c99c <MX_FATFS_Init>
  MX_DAC_Init();
 8002092:	f000 fb3f 	bl	8002714 <MX_DAC_Init>
  MX_I2C1_Init();
 8002096:	f000 fb71 	bl	800277c <MX_I2C1_Init>
  MX_TIM2_Init();
 800209a:	f000 fbf3 	bl	8002884 <MX_TIM2_Init>
  MX_TIM4_Init();
 800209e:	f000 fc8b 	bl	80029b8 <MX_TIM4_Init>
//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)audio_channel_left.out, 128, DAC_ALIGN_12B_R);
//  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)audio_channel_right.out, 128, DAC_ALIGN_12B_R);
//  HAL_TIM_Base_Start(&htim4);
//  HAL_TIM_Base_Start(&htim2);

	HAL_GPIO_WritePin(BTN_PAD_C1_PORT, BTN_PAD_C1_PIN, 1);
 80020a2:	2201      	movs	r2, #1
 80020a4:	2110      	movs	r1, #16
 80020a6:	489d      	ldr	r0, [pc, #628]	; (800231c <main+0x2bc>)
 80020a8:	f002 fea1 	bl	8004dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C2_PORT, BTN_PAD_C2_PIN, 1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	2120      	movs	r1, #32
 80020b0:	489a      	ldr	r0, [pc, #616]	; (800231c <main+0x2bc>)
 80020b2:	f002 fe9c 	bl	8004dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C3_PORT, BTN_PAD_C3_PIN, 1);
 80020b6:	2201      	movs	r2, #1
 80020b8:	2140      	movs	r1, #64	; 0x40
 80020ba:	4898      	ldr	r0, [pc, #608]	; (800231c <main+0x2bc>)
 80020bc:	f002 fe97 	bl	8004dee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_PAD_C4_PORT, BTN_PAD_C4_PIN, 1);
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c6:	4896      	ldr	r0, [pc, #600]	; (8002320 <main+0x2c0>)
 80020c8:	f002 fe91 	bl	8004dee <HAL_GPIO_WritePin>

	ILI9341_Init();
 80020cc:	f7ff f9c0 	bl	8001450 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 80020d0:	2002      	movs	r0, #2
 80020d2:	f7ff fb43 	bl	800175c <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 80020d6:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80020da:	f7ff fc95 	bl	8001a08 <LCD_FillScreen>
	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);
 80020de:	2204      	movs	r2, #4
 80020e0:	4990      	ldr	r1, [pc, #576]	; (8002324 <main+0x2c4>)
 80020e2:	4891      	ldr	r0, [pc, #580]	; (8002328 <main+0x2c8>)
 80020e4:	f001 fafa 	bl	80036dc <HAL_ADC_Start_DMA>
	DrumInit();
 80020e8:	f7fe ffb8 	bl	800105c <DrumInit>

  	// Setting the clock divider somehow helps :D
  	FRESULT fresult = f_mount(&fs, "/", 1);
 80020ec:	2201      	movs	r2, #1
 80020ee:	498f      	ldr	r1, [pc, #572]	; (800232c <main+0x2cc>)
 80020f0:	488f      	ldr	r0, [pc, #572]	; (8002330 <main+0x2d0>)
 80020f2:	f00d fd97 	bl	800fc24 <f_mount>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
  	if (fresult != FR_OK) {
 80020fc:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <main+0xb4>
  		LCD_Print(0, 10, "Error: f_mount (%d)", fresult); while (1);
 8002104:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8002108:	4a8a      	ldr	r2, [pc, #552]	; (8002334 <main+0x2d4>)
 800210a:	210a      	movs	r1, #10
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff fd25 	bl	8001b5c <LCD_Print>
 8002112:	e7fe      	b.n	8002112 <main+0xb2>
  	}

  	FIL file;
  	uint16_t temp;
  	fresult = f_open(&file, "drum.cfg", FA_READ | FA_WRITE);
 8002114:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002118:	2203      	movs	r2, #3
 800211a:	4987      	ldr	r1, [pc, #540]	; (8002338 <main+0x2d8>)
 800211c:	4618      	mov	r0, r3
 800211e:	f00d fdc9 	bl	800fcb4 <f_open>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
  	if (fresult == FR_OK) {
 8002128:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 8090 	bne.w	8002252 <main+0x1f2>
  		uint32_t buff[5];
  		fresult = f_read(&file, buff, 5 * 4, &temp);
 8002132:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8002136:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800213a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800213e:	2214      	movs	r2, #20
 8002140:	f00e f831 	bl	80101a6 <f_read>
 8002144:	4603      	mov	r3, r0
 8002146:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
  		if (buff[0] + buff[1] + buff[2] + buff[3] == buff[4]) {
 800214a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800214e:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002158:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	441a      	add	r2, r3
 8002160:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002164:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	441a      	add	r2, r3
 800216c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002170:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	441a      	add	r2, r3
 8002178:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800217c:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	429a      	cmp	r2, r3
 8002184:	d11f      	bne.n	80021c6 <main+0x166>
  			for (int i = 0; i < 4; i++) drums[i].sensor_thresh = buff[i];
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800218c:	e016      	b.n	80021bc <main+0x15c>
 800218e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002192:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8002196:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 800219a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800219e:	4867      	ldr	r0, [pc, #412]	; (800233c <main+0x2dc>)
 80021a0:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	4403      	add	r3, r0
 80021ae:	3328      	adds	r3, #40	; 0x28
 80021b0:	6019      	str	r1, [r3, #0]
 80021b2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80021b6:	3301      	adds	r3, #1
 80021b8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80021bc:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	dde4      	ble.n	800218e <main+0x12e>
 80021c4:	e03d      	b.n	8002242 <main+0x1e2>
  		} else {
  			DrumCalibrate();
 80021c6:	f7fe ff9b 	bl	8001100 <DrumCalibrate>
  			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80021ca:	4b5c      	ldr	r3, [pc, #368]	; (800233c <main+0x2dc>)
 80021cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021ce:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80021d2:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	4b58      	ldr	r3, [pc, #352]	; (800233c <main+0x2dc>)
 80021da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021dc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80021e0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	4b55      	ldr	r3, [pc, #340]	; (800233c <main+0x2dc>)
 80021e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80021f0:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <main+0x2dc>)
 80021f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80021fc:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002200:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002204:	60da      	str	r2, [r3, #12]
					drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 8002206:	4b4d      	ldr	r3, [pc, #308]	; (800233c <main+0x2dc>)
 8002208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220a:	4b4c      	ldr	r3, [pc, #304]	; (800233c <main+0x2dc>)
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	441a      	add	r2, r3
 8002210:	4b4a      	ldr	r3, [pc, #296]	; (800233c <main+0x2dc>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	441a      	add	r2, r3
 8002218:	4b48      	ldr	r3, [pc, #288]	; (800233c <main+0x2dc>)
 800221a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800221e:	441a      	add	r2, r3
  			uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8002220:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002224:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8002228:	611a      	str	r2, [r3, #16]
  			fresult = f_write(&file, buff, 5 * 4, &temp);
 800222a:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800222e:	f107 0114 	add.w	r1, r7, #20
 8002232:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002236:	2214      	movs	r2, #20
 8002238:	f00e f920 	bl	801047c <f_write>
 800223c:	4603      	mov	r3, r0
 800223e:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
  		}
  		LCD_Print(0, 10, "Have file, reading... %d", fresult);
 8002242:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8002246:	4a3e      	ldr	r2, [pc, #248]	; (8002340 <main+0x2e0>)
 8002248:	210a      	movs	r1, #10
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff fc86 	bl	8001b5c <LCD_Print>
 8002250:	e05a      	b.n	8002308 <main+0x2a8>
  	} else if (fresult == FR_NO_FILE) {
 8002252:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 8002256:	2b04      	cmp	r3, #4
 8002258:	d14e      	bne.n	80022f8 <main+0x298>
  		fresult = f_open(&file, "drum.cfg", FA_WRITE | FA_CREATE_NEW);
 800225a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800225e:	2206      	movs	r2, #6
 8002260:	4935      	ldr	r1, [pc, #212]	; (8002338 <main+0x2d8>)
 8002262:	4618      	mov	r0, r3
 8002264:	f00d fd26 	bl	800fcb4 <f_open>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
  		DrumCalibrate();
 800226e:	f7fe ff47 	bl	8001100 <DrumCalibrate>
  		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <main+0x2dc>)
 8002274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002276:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800227a:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <main+0x2dc>)
 8002282:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002284:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002288:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <main+0x2dc>)
 8002290:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002294:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002298:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <main+0x2dc>)
 80022a0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80022a4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80022a8:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80022ac:	60da      	str	r2, [r3, #12]
  				drums[0].sensor_thresh + drums[1].sensor_thresh + drums[2].sensor_thresh + drums[3].sensor_thresh};
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <main+0x2dc>)
 80022b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <main+0x2dc>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	441a      	add	r2, r3
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <main+0x2dc>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	441a      	add	r2, r3
 80022c0:	4b1e      	ldr	r3, [pc, #120]	; (800233c <main+0x2dc>)
 80022c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80022c6:	441a      	add	r2, r3
  		uint32_t buff[5] = {drums[0].sensor_thresh, drums[1].sensor_thresh, drums[2].sensor_thresh, drums[3].sensor_thresh,
 80022c8:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80022cc:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80022d0:	611a      	str	r2, [r3, #16]
  		fresult = f_write(&file, buff, 5 * 4, &temp);
 80022d2:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80022d6:	4639      	mov	r1, r7
 80022d8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80022dc:	2214      	movs	r2, #20
 80022de:	f00e f8cd 	bl	801047c <f_write>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f887 328f 	strb.w	r3, [r7, #655]	; 0x28f
  		LCD_Print(0, 10, "No file, calibrating... %d", fresult);
 80022e8:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 80022ec:	4a15      	ldr	r2, [pc, #84]	; (8002344 <main+0x2e4>)
 80022ee:	210a      	movs	r1, #10
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff fc33 	bl	8001b5c <LCD_Print>
 80022f6:	e007      	b.n	8002308 <main+0x2a8>
  	} else {
  		LCD_Print(0, 10, "Error: f_open (%d)", fresult); while (1);
 80022f8:	f897 328f 	ldrb.w	r3, [r7, #655]	; 0x28f
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <main+0x2e8>)
 80022fe:	210a      	movs	r1, #10
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff fc2b 	bl	8001b5c <LCD_Print>
 8002306:	e7fe      	b.n	8002306 <main+0x2a6>
  	}
  	f_close(&file);
 8002308:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800230c:	4618      	mov	r0, r3
 800230e:	f00e fb1c 	bl	801094a <f_close>

//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  	for (int i = 0; i < 23239; i++) {
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002318:	e033      	b.n	8002382 <main+0x322>
 800231a:	bf00      	nop
 800231c:	40011800 	.word	0x40011800
 8002320:	40011000 	.word	0x40011000
 8002324:	2000bb24 	.word	0x2000bb24
 8002328:	2000bc54 	.word	0x2000bc54
 800232c:	08014440 	.word	0x08014440
 8002330:	2000b8f4 	.word	0x2000b8f4
 8002334:	08014444 	.word	0x08014444
 8002338:	08014458 	.word	0x08014458
 800233c:	2000bb38 	.word	0x2000bb38
 8002340:	08014464 	.word	0x08014464
 8002344:	08014480 	.word	0x08014480
 8002348:	0801449c 	.word	0x0801449c
  		don[i] = (int32_t) (((int16_t*) don)[i]) / 3 + 32768;
 800234c:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4a76      	ldr	r2, [pc, #472]	; (800252c <main+0x4cc>)
 8002354:	4413      	add	r3, r2
 8002356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235a:	4a75      	ldr	r2, [pc, #468]	; (8002530 <main+0x4d0>)
 800235c:	fb82 1203 	smull	r1, r2, r2, r3
 8002360:	17db      	asrs	r3, r3, #31
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b21b      	sxth	r3, r3
 8002366:	b29b      	uxth	r3, r3
 8002368:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800236c:	b299      	uxth	r1, r3
 800236e:	4a6f      	ldr	r2, [pc, #444]	; (800252c <main+0x4cc>)
 8002370:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002374:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	for (int i = 0; i < 23239; i++) {
 8002378:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800237c:	3301      	adds	r3, #1
 800237e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8002382:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002386:	f645 22c6 	movw	r2, #23238	; 0x5ac6
 800238a:	4293      	cmp	r3, r2
 800238c:	ddde      	ble.n	800234c <main+0x2ec>
  	}
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800238e:	2100      	movs	r1, #0
 8002390:	4868      	ldr	r0, [pc, #416]	; (8002534 <main+0x4d4>)
 8002392:	f001 fdc6 	bl	8003f22 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)don, 23239, DAC_ALIGN_12B_L);
 8002396:	2304      	movs	r3, #4
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	f645 23c7 	movw	r3, #23239	; 0x5ac7
 800239e:	4a63      	ldr	r2, [pc, #396]	; (800252c <main+0x4cc>)
 80023a0:	2100      	movs	r1, #0
 80023a2:	4864      	ldr	r0, [pc, #400]	; (8002534 <main+0x4d4>)
 80023a4:	f001 fe14 	bl	8003fd0 <HAL_DAC_Start_DMA>

	HAL_TIM_Base_Start_IT(&htim3);
 80023a8:	4863      	ldr	r0, [pc, #396]	; (8002538 <main+0x4d8>)
 80023aa:	f006 fd3f 	bl	8008e2c <HAL_TIM_Base_Start_IT>
  	drum_interrupt_start_tick = HAL_GetTick();
 80023ae:	f001 f87d 	bl	80034ac <HAL_GetTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b61      	ldr	r3, [pc, #388]	; (800253c <main+0x4dc>)
 80023b8:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 80023ba:	4861      	ldr	r0, [pc, #388]	; (8002540 <main+0x4e0>)
 80023bc:	f006 fcde 	bl	8008d7c <HAL_TIM_Base_Start>
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 80023c0:	4b5f      	ldr	r3, [pc, #380]	; (8002540 <main+0x4e0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <main+0x4e0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	60da      	str	r2, [r3, #12]
  	audio_interrupt_start_tick = HAL_GetTick();
 80023d0:	f001 f86c 	bl	80034ac <HAL_GetTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4a5b      	ldr	r2, [pc, #364]	; (8002544 <main+0x4e4>)
 80023d8:	6013      	str	r3, [r2, #0]

  	HAL_TIM_Base_Start_IT(&htim4);
 80023da:	485b      	ldr	r0, [pc, #364]	; (8002548 <main+0x4e8>)
 80023dc:	f006 fd26 	bl	8008e2c <HAL_TIM_Base_Start_IT>
	mix_interrupt_start_tick = HAL_GetTick();
 80023e0:	f001 f864 	bl	80034ac <HAL_GetTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4a59      	ldr	r2, [pc, #356]	; (800254c <main+0x4ec>)
 80023e8:	6013      	str	r3, [r2, #0]



//  LCD_DrawFilledRectangle(0, 0, 240, 320, RED);

	long last_ticks = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	long tft_last_ticks = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	long ticks = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
	int num_hits = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	int hit_state = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
//
//		switchhid.Button = 0x00;  // shift release
//		USBD_HID_SendReport(&hUsbDeviceFS,  (uint8_t*) &switchhid, sizeof (switchhid));
//		HAL_Delay (200);

		LCD_Print(0, 0, "%4ld", drum_sensor_values[0]);
 8002408:	4b51      	ldr	r3, [pc, #324]	; (8002550 <main+0x4f0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a51      	ldr	r2, [pc, #324]	; (8002554 <main+0x4f4>)
 800240e:	2100      	movs	r1, #0
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff fba3 	bl	8001b5c <LCD_Print>
//		  num_hits += 1;
//	  } else {
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//	  }
//
		if (HAL_GetTick() - tft_last_ticks > 200) {
 8002416:	f001 f849 	bl	80034ac <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2bc8      	cmp	r3, #200	; 0xc8
 8002424:	d97a      	bls.n	800251c <main+0x4bc>

			AddDrum(HAL_GetTick() % 2);
 8002426:	f001 f841 	bl	80034ac <HAL_GetTick>
 800242a:	4603      	mov	r3, r0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fd75 	bl	8001f24 <AddDrum>

//			__disable_irq();
			int r = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002440:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 800244a:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 800244e:	f001 f82d 	bl	80034ac <HAL_GetTick>
 8002452:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 8002454:	4a40      	ldr	r2, [pc, #256]	; (8002558 <main+0x4f8>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 800245e:	f001 f825 	bl	80034ac <HAL_GetTick>
 8002462:	4603      	mov	r3, r0
 8002464:	4a3d      	ldr	r2, [pc, #244]	; (800255c <main+0x4fc>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 800246c:	4b3c      	ldr	r3, [pc, #240]	; (8002560 <main+0x500>)
 800246e:	fba3 1302 	umull	r1, r3, r3, r2
 8002472:	095c      	lsrs	r4, r3, #5
 8002474:	4623      	mov	r3, r4
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1b1b      	subs	r3, r3, r4
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 800247e:	f001 f815 	bl	80034ac <HAL_GetTick>
 8002482:	4603      	mov	r3, r0
 8002484:	4a37      	ldr	r2, [pc, #220]	; (8002564 <main+0x504>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 800248c:	4b34      	ldr	r3, [pc, #208]	; (8002560 <main+0x500>)
 800248e:	fba3 1302 	umull	r1, r3, r3, r2
 8002492:	095d      	lsrs	r5, r3, #5
 8002494:	462b      	mov	r3, r5
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1b5b      	subs	r3, r3, r5
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 800249e:	f001 f805 	bl	80034ac <HAL_GetTick>
 80024a2:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80024a4:	4a2f      	ldr	r2, [pc, #188]	; (8002564 <main+0x504>)
 80024a6:	fba2 1203 	umull	r1, r2, r2, r3
 80024aa:	0996      	lsrs	r6, r2, #6
 80024ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b0:	fb06 f202 	mul.w	r2, r6, r2
 80024b4:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000,
 80024b6:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <main+0x508>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fc2a 	bl	8000d14 <__aeabi_i2f>
 80024c0:	4682      	mov	sl, r0
 80024c2:	f000 fff3 	bl	80034ac <HAL_GetTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a1c      	ldr	r2, [pc, #112]	; (800253c <main+0x4dc>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	3301      	adds	r3, #1
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fc1b 	bl	8000d0c <__aeabi_ui2f>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4619      	mov	r1, r3
 80024da:	4650      	mov	r0, sl
 80024dc:	f7fe fd22 	bl	8000f24 <__aeabi_fdiv>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4922      	ldr	r1, [pc, #136]	; (800256c <main+0x50c>)
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fc69 	bl	8000dbc <__aeabi_fmul>
 80024ea:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz, %2d",
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe f807 	bl	8000500 <__aeabi_f2d>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	491e      	ldr	r1, [pc, #120]	; (8002570 <main+0x510>)
 80024f8:	6809      	ldr	r1, [r1, #0]
 80024fa:	9106      	str	r1, [sp, #24]
 80024fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002500:	9602      	str	r6, [sp, #8]
 8002502:	9501      	str	r5, [sp, #4]
 8002504:	9400      	str	r4, [sp, #0]
 8002506:	464b      	mov	r3, r9
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <main+0x514>)
 800250a:	4641      	mov	r1, r8
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff fb25 	bl	8001b5c <LCD_Print>
//						drums[i].sensor_avg, drums[i].sensor_sd, drums[i].sensor_thresh);
//			}

//			__enable_irq();

			tft_last_ticks = HAL_GetTick();
 8002512:	f000 ffcb 	bl	80034ac <HAL_GetTick>
 8002516:	4603      	mov	r3, r0
 8002518:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
		}

		LCD_Print(0, 6, "BTN: %3d", btn_callbacks);
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <main+0x518>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	4a16      	ldr	r2, [pc, #88]	; (800257c <main+0x51c>)
 8002522:	2106      	movs	r1, #6
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff fb19 	bl	8001b5c <LCD_Print>
		LCD_Print(0, 0, "%4ld", drum_sensor_values[0]);
 800252a:	e76d      	b.n	8002408 <main+0x3a8>
 800252c:	20000008 	.word	0x20000008
 8002530:	55555556 	.word	0x55555556
 8002534:	2000bcc8 	.word	0x2000bcc8
 8002538:	2000bedc 	.word	0x2000bedc
 800253c:	2000bf6c 	.word	0x2000bf6c
 8002540:	2000be94 	.word	0x2000be94
 8002544:	2000bf74 	.word	0x2000bf74
 8002548:	2000bf24 	.word	0x2000bf24
 800254c:	2000bf7c 	.word	0x2000bf7c
 8002550:	2000bb24 	.word	0x2000bb24
 8002554:	080144b0 	.word	0x080144b0
 8002558:	95217cb1 	.word	0x95217cb1
 800255c:	45e7b273 	.word	0x45e7b273
 8002560:	88888889 	.word	0x88888889
 8002564:	10624dd3 	.word	0x10624dd3
 8002568:	2000bf70 	.word	0x2000bf70
 800256c:	447a0000 	.word	0x447a0000
 8002570:	2000c3d4 	.word	0x2000c3d4
 8002574:	080144b8 	.word	0x080144b8
 8002578:	2000bf9a 	.word	0x2000bf9a
 800257c:	080144e0 	.word	0x080144e0

08002580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b096      	sub	sp, #88	; 0x58
 8002584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800258a:	2228      	movs	r2, #40	; 0x28
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f00e ff40 	bl	8011414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]
 80025b2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025b4:	2301      	movs	r3, #1
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025be:	2300      	movs	r3, #0
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025c2:	2301      	movs	r3, #1
 80025c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c6:	2302      	movs	r3, #2
 80025c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 fad4 	bl	8006b88 <HAL_RCC_OscConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80025e6:	f000 fb3f 	bl	8002c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ea:	230f      	movs	r3, #15
 80025ec:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ee:	2302      	movs	r3, #2
 80025f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80025f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	2102      	movs	r1, #2
 8002606:	4618      	mov	r0, r3
 8002608:	f004 fd40 	bl	800708c <HAL_RCC_ClockConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002612:	f000 fb29 	bl	8002c68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002616:	2312      	movs	r3, #18
 8002618:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800261a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4618      	mov	r0, r3
 8002628:	f004 feaa 	bl	8007380 <HAL_RCCEx_PeriphCLKConfig>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002632:	f000 fb19 	bl	8002c68 <Error_Handler>
  }
}
 8002636:	bf00      	nop
 8002638:	3758      	adds	r7, #88	; 0x58
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <MX_ADC1_Init+0xcc>)
 8002652:	4a2f      	ldr	r2, [pc, #188]	; (8002710 <MX_ADC1_Init+0xd0>)
 8002654:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <MX_ADC1_Init+0xcc>)
 8002658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800265e:	4b2b      	ldr	r3, [pc, #172]	; (800270c <MX_ADC1_Init+0xcc>)
 8002660:	2201      	movs	r2, #1
 8002662:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <MX_ADC1_Init+0xcc>)
 8002666:	2200      	movs	r2, #0
 8002668:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <MX_ADC1_Init+0xcc>)
 800266c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002672:	4b26      	ldr	r3, [pc, #152]	; (800270c <MX_ADC1_Init+0xcc>)
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <MX_ADC1_Init+0xcc>)
 800267a:	2204      	movs	r2, #4
 800267c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800267e:	4823      	ldr	r0, [pc, #140]	; (800270c <MX_ADC1_Init+0xcc>)
 8002680:	f000 ff42 	bl	8003508 <HAL_ADC_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800268a:	f000 faed 	bl	8002c68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002692:	2301      	movs	r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002696:	2307      	movs	r3, #7
 8002698:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	4619      	mov	r1, r3
 800269e:	481b      	ldr	r0, [pc, #108]	; (800270c <MX_ADC1_Init+0xcc>)
 80026a0:	f001 f916 	bl	80038d0 <HAL_ADC_ConfigChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80026aa:	f000 fadd 	bl	8002c68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026b2:	2302      	movs	r3, #2
 80026b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4814      	ldr	r0, [pc, #80]	; (800270c <MX_ADC1_Init+0xcc>)
 80026bc:	f001 f908 	bl	80038d0 <HAL_ADC_ConfigChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80026c6:	f000 facf 	bl	8002c68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80026ca:	2302      	movs	r3, #2
 80026cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80026ce:	2303      	movs	r3, #3
 80026d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	480d      	ldr	r0, [pc, #52]	; (800270c <MX_ADC1_Init+0xcc>)
 80026d8:	f001 f8fa 	bl	80038d0 <HAL_ADC_ConfigChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80026e2:	f000 fac1 	bl	8002c68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026e6:	2303      	movs	r3, #3
 80026e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026ea:	2304      	movs	r3, #4
 80026ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	4806      	ldr	r0, [pc, #24]	; (800270c <MX_ADC1_Init+0xcc>)
 80026f4:	f001 f8ec 	bl	80038d0 <HAL_ADC_ConfigChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80026fe:	f000 fab3 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000bc54 	.word	0x2000bc54
 8002710:	40012400 	.word	0x40012400

08002714 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800271a:	463b      	mov	r3, r7
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <MX_DAC_Init+0x60>)
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <MX_DAC_Init+0x64>)
 8002726:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002728:	4812      	ldr	r0, [pc, #72]	; (8002774 <MX_DAC_Init+0x60>)
 800272a:	f001 fbd8 	bl	8003ede <HAL_DAC_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002734:	f000 fa98 	bl	8002c68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002738:	2324      	movs	r3, #36	; 0x24
 800273a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002740:	463b      	mov	r3, r7
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	480b      	ldr	r0, [pc, #44]	; (8002774 <MX_DAC_Init+0x60>)
 8002748:	f001 fd4a 	bl	80041e0 <HAL_DAC_ConfigChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002752:	f000 fa89 	bl	8002c68 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002756:	463b      	mov	r3, r7
 8002758:	2210      	movs	r2, #16
 800275a:	4619      	mov	r1, r3
 800275c:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_DAC_Init+0x60>)
 800275e:	f001 fd3f 	bl	80041e0 <HAL_DAC_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002768:	f000 fa7e 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	2000bcc8 	.word	0x2000bcc8
 8002778:	40007400 	.word	0x40007400

0800277c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <MX_I2C1_Init+0x50>)
 8002782:	4a13      	ldr	r2, [pc, #76]	; (80027d0 <MX_I2C1_Init+0x54>)
 8002784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002786:	4b11      	ldr	r3, [pc, #68]	; (80027cc <MX_I2C1_Init+0x50>)
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <MX_I2C1_Init+0x58>)
 800278a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <MX_I2C1_Init+0x50>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <MX_I2C1_Init+0x50>)
 8002794:	2200      	movs	r2, #0
 8002796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <MX_I2C1_Init+0x50>)
 800279a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800279e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027a0:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <MX_I2C1_Init+0x50>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <MX_I2C1_Init+0x50>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <MX_I2C1_Init+0x50>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <MX_I2C1_Init+0x50>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b8:	4804      	ldr	r0, [pc, #16]	; (80027cc <MX_I2C1_Init+0x50>)
 80027ba:	f002 fb49 	bl	8004e50 <HAL_I2C_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027c4:	f000 fa50 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	2000bd64 	.word	0x2000bd64
 80027d0:	40005400 	.word	0x40005400
 80027d4:	000186a0 	.word	0x000186a0

080027d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <MX_SDIO_SD_Init+0x38>)
 80027de:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <MX_SDIO_SD_Init+0x3c>)
 80027e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <MX_SDIO_SD_Init+0x38>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <MX_SDIO_SD_Init+0x38>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <MX_SDIO_SD_Init+0x38>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <MX_SDIO_SD_Init+0x38>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <MX_SDIO_SD_Init+0x38>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 100;
 8002800:	4b03      	ldr	r3, [pc, #12]	; (8002810 <MX_SDIO_SD_Init+0x38>)
 8002802:	2264      	movs	r2, #100	; 0x64
 8002804:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	2000bdb8 	.word	0x2000bdb8
 8002814:	40018000 	.word	0x40018000

08002818 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <MX_SPI2_Init+0x64>)
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <MX_SPI2_Init+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <MX_SPI2_Init+0x64>)
 8002824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <MX_SPI2_Init+0x64>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <MX_SPI2_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_SPI2_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_SPI2_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_SPI2_Init+0x64>)
 8002844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002848:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_SPI2_Init+0x64>)
 800284c:	2200      	movs	r2, #0
 800284e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <MX_SPI2_Init+0x64>)
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_SPI2_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <MX_SPI2_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_SPI2_Init+0x64>)
 8002864:	220a      	movs	r2, #10
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002868:	4804      	ldr	r0, [pc, #16]	; (800287c <MX_SPI2_Init+0x64>)
 800286a:	f005 ffca 	bl	8008802 <HAL_SPI_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002874:	f000 f9f8 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	2000be3c 	.word	0x2000be3c
 8002880:	40003800 	.word	0x40003800

08002884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002898:	463b      	mov	r3, r7
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <MX_TIM2_Init+0x94>)
 80028a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <MX_TIM2_Init+0x94>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <MX_TIM2_Init+0x94>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <MX_TIM2_Init+0x94>)
 80028b6:	f240 52db 	movw	r2, #1499	; 0x5db
 80028ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028bc:	4b16      	ldr	r3, [pc, #88]	; (8002918 <MX_TIM2_Init+0x94>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <MX_TIM2_Init+0x94>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028c8:	4813      	ldr	r0, [pc, #76]	; (8002918 <MX_TIM2_Init+0x94>)
 80028ca:	f006 fa07 	bl	8008cdc <HAL_TIM_Base_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028d4:	f000 f9c8 	bl	8002c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <MX_TIM2_Init+0x94>)
 80028e6:	f006 fc09 	bl	80090fc <HAL_TIM_ConfigClockSource>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028f0:	f000 f9ba 	bl	8002c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028f4:	2320      	movs	r3, #32
 80028f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_TIM2_Init+0x94>)
 8002902:	f006 fecb 	bl	800969c <HAL_TIMEx_MasterConfigSynchronization>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800290c:	f000 f9ac 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000be94 	.word	0x2000be94

0800291c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	463b      	mov	r3, r7
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <MX_TIM3_Init+0x94>)
 800293a:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <MX_TIM3_Init+0x98>)
 800293c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002940:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002944:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <MX_TIM3_Init+0x94>)
 800294e:	2231      	movs	r2, #49	; 0x31
 8002950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <MX_TIM3_Init+0x94>)
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800295e:	4814      	ldr	r0, [pc, #80]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002960:	f006 f9bc 	bl	8008cdc <HAL_TIM_Base_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800296a:	f000 f97d 	bl	8002c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800296e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002972:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	4619      	mov	r1, r3
 800297a:	480d      	ldr	r0, [pc, #52]	; (80029b0 <MX_TIM3_Init+0x94>)
 800297c:	f006 fbbe 	bl	80090fc <HAL_TIM_ConfigClockSource>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002986:	f000 f96f 	bl	8002c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002992:	463b      	mov	r3, r7
 8002994:	4619      	mov	r1, r3
 8002996:	4806      	ldr	r0, [pc, #24]	; (80029b0 <MX_TIM3_Init+0x94>)
 8002998:	f006 fe80 	bl	800969c <HAL_TIMEx_MasterConfigSynchronization>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80029a2:	f000 f961 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000bedc 	.word	0x2000bedc
 80029b4:	40000400 	.word	0x40000400

080029b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	60da      	str	r2, [r3, #12]
 80029cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <MX_TIM4_Init+0x98>)
 80029d8:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <MX_TIM4_Init+0x9c>)
 80029da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029dc:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <MX_TIM4_Init+0x98>)
 80029de:	2200      	movs	r2, #0
 80029e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <MX_TIM4_Init+0x98>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <MX_TIM4_Init+0x98>)
 80029ea:	f240 12f3 	movw	r2, #499	; 0x1f3
 80029ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f0:	4b17      	ldr	r3, [pc, #92]	; (8002a50 <MX_TIM4_Init+0x98>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <MX_TIM4_Init+0x98>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029fc:	4814      	ldr	r0, [pc, #80]	; (8002a50 <MX_TIM4_Init+0x98>)
 80029fe:	f006 f96d 	bl	8008cdc <HAL_TIM_Base_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002a08:	f000 f92e 	bl	8002c68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002a0c:	2305      	movs	r3, #5
 8002a0e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8002a10:	2310      	movs	r3, #16
 8002a12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	4619      	mov	r1, r3
 8002a1a:	480d      	ldr	r0, [pc, #52]	; (8002a50 <MX_TIM4_Init+0x98>)
 8002a1c:	f006 fc35 	bl	800928a <HAL_TIM_SlaveConfigSynchro>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002a26:	f000 f91f 	bl	8002c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a32:	1d3b      	adds	r3, r7, #4
 8002a34:	4619      	mov	r1, r3
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <MX_TIM4_Init+0x98>)
 8002a38:	f006 fe30 	bl	800969c <HAL_TIMEx_MasterConfigSynchronization>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002a42:	f000 f911 	bl	8002c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000bf24 	.word	0x2000bf24
 8002a54:	40000800 	.word	0x40000800

08002a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <MX_DMA_Init+0x70>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	4a19      	ldr	r2, [pc, #100]	; (8002ac8 <MX_DMA_Init+0x70>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6153      	str	r3, [r2, #20]
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <MX_DMA_Init+0x70>)
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <MX_DMA_Init+0x70>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <MX_DMA_Init+0x70>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6153      	str	r3, [r2, #20]
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_DMA_Init+0x70>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2100      	movs	r1, #0
 8002a92:	200b      	movs	r0, #11
 8002a94:	f001 f9ed 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a98:	200b      	movs	r0, #11
 8002a9a:	f001 fa06 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	203a      	movs	r0, #58	; 0x3a
 8002aa4:	f001 f9e5 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8002aa8:	203a      	movs	r0, #58	; 0x3a
 8002aaa:	f001 f9fe 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	203b      	movs	r0, #59	; 0x3b
 8002ab4:	f001 f9dd 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8002ab8:	203b      	movs	r0, #59	; 0x3b
 8002aba:	f001 f9f6 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000

08002acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad2:	f107 0318 	add.w	r3, r7, #24
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ae0:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aea:	6193      	str	r3, [r2, #24]
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af8:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	4a55      	ldr	r2, [pc, #340]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002afe:	f043 0310 	orr.w	r3, r3, #16
 8002b02:	6193      	str	r3, [r2, #24]
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b10:	4b50      	ldr	r3, [pc, #320]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b16:	f043 0304 	orr.w	r3, r3, #4
 8002b1a:	6193      	str	r3, [r2, #24]
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b28:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	4a49      	ldr	r2, [pc, #292]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b2e:	f043 0308 	orr.w	r3, r3, #8
 8002b32:	6193      	str	r3, [r2, #24]
 8002b34:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b40:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a43      	ldr	r2, [pc, #268]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b46:	f043 0320 	orr.w	r3, r3, #32
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <MX_GPIO_Init+0x188>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0320 	and.w	r3, r3, #32
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f64f 0170 	movw	r1, #63600	; 0xf870
 8002b5e:	483e      	ldr	r0, [pc, #248]	; (8002c58 <MX_GPIO_Init+0x18c>)
 8002b60:	f002 f945 	bl	8004dee <HAL_GPIO_WritePin>
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002b64:	2200      	movs	r2, #0
 8002b66:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8002b6a:	483c      	ldr	r0, [pc, #240]	; (8002c5c <MX_GPIO_Init+0x190>)
 8002b6c:	f002 f93f 	bl	8004dee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002b76:	483a      	ldr	r0, [pc, #232]	; (8002c60 <MX_GPIO_Init+0x194>)
 8002b78:	f002 f939 	bl	8004dee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <MX_GPIO_Init+0x198>)
 8002b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b88:	f107 0318 	add.w	r3, r7, #24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4832      	ldr	r0, [pc, #200]	; (8002c58 <MX_GPIO_Init+0x18c>)
 8002b90:	f001 ff82 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 PE6 T_CLK_Pin
                           T_CS_Pin T_DIN_Pin T_DO_Pin T_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|T_CLK_Pin
 8002b94:	f64f 0370 	movw	r3, #63600	; 0xf870
 8002b98:	61bb      	str	r3, [r7, #24]
                          |T_CS_Pin|T_DIN_Pin|T_DO_Pin|T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ba6:	f107 0318 	add.w	r3, r7, #24
 8002baa:	4619      	mov	r1, r3
 8002bac:	482a      	ldr	r0, [pc, #168]	; (8002c58 <MX_GPIO_Init+0x18c>)
 8002bae:	f001 ff73 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc4:	f107 0318 	add.w	r3, r7, #24
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4824      	ldr	r0, [pc, #144]	; (8002c5c <MX_GPIO_Init+0x190>)
 8002bcc:	f001 ff64 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002bd0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2302      	movs	r3, #2
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	f107 0318 	add.w	r3, r7, #24
 8002be6:	4619      	mov	r1, r3
 8002be8:	481d      	ldr	r0, [pc, #116]	; (8002c60 <MX_GPIO_Init+0x194>)
 8002bea:	f001 ff55 	bl	8004a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002bee:	2380      	movs	r3, #128	; 0x80
 8002bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002bfe:	f107 0318 	add.w	r3, r7, #24
 8002c02:	4619      	mov	r1, r3
 8002c04:	4815      	ldr	r0, [pc, #84]	; (8002c5c <MX_GPIO_Init+0x190>)
 8002c06:	f001 ff47 	bl	8004a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2006      	movs	r0, #6
 8002c10:	f001 f92f 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c14:	2006      	movs	r0, #6
 8002c16:	f001 f948 	bl	8003eaa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2007      	movs	r0, #7
 8002c20:	f001 f927 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c24:	2007      	movs	r0, #7
 8002c26:	f001 f940 	bl	8003eaa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2008      	movs	r0, #8
 8002c30:	f001 f91f 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c34:	2008      	movs	r0, #8
 8002c36:	f001 f938 	bl	8003eaa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2009      	movs	r0, #9
 8002c40:	f001 f917 	bl	8003e72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c44:	2009      	movs	r0, #9
 8002c46:	f001 f930 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	; 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40011800 	.word	0x40011800
 8002c5c:	40011000 	.word	0x40011000
 8002c60:	40010c00 	.word	0x40010c00
 8002c64:	10310000 	.word	0x10310000

08002c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c6c:	b672      	cpsid	i
}
 8002c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c70:	e7fe      	b.n	8002c70 <Error_Handler+0x8>
	...

08002c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <HAL_MspInit+0x40>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_MspInit+0x40>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6193      	str	r3, [r2, #24]
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_MspInit+0x40>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <HAL_MspInit+0x40>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <HAL_MspInit+0x40>)
 8002c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	61d3      	str	r3, [r2, #28]
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_MspInit+0x40>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	40021000 	.word	0x40021000

08002cb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b088      	sub	sp, #32
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0310 	add.w	r3, r7, #16
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <HAL_ADC_MspInit+0xbc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d149      	bne.n	8002d6c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002cd8:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_ADC_MspInit+0xc0>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <HAL_ADC_MspInit+0xc0>)
 8002cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce2:	6193      	str	r3, [r2, #24]
 8002ce4:	4b24      	ldr	r3, [pc, #144]	; (8002d78 <HAL_ADC_MspInit+0xc0>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_ADC_MspInit+0xc0>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <HAL_ADC_MspInit+0xc0>)
 8002cf6:	f043 0304 	orr.w	r3, r3, #4
 8002cfa:	6193      	str	r3, [r2, #24]
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	; (8002d78 <HAL_ADC_MspInit+0xc0>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002d08:	230f      	movs	r3, #15
 8002d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	4619      	mov	r1, r3
 8002d16:	4819      	ldr	r0, [pc, #100]	; (8002d7c <HAL_ADC_MspInit+0xc4>)
 8002d18:	f001 febe 	bl	8004a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d1e:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_ADC_MspInit+0xcc>)
 8002d20:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d22:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d42:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d46:	2220      	movs	r2, #32
 8002d48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d50:	480b      	ldr	r0, [pc, #44]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d52:	f001 fb25 	bl	80043a0 <HAL_DMA_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002d5c:	f7ff ff84 	bl	8002c68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d64:	621a      	str	r2, [r3, #32]
 8002d66:	4a06      	ldr	r2, [pc, #24]	; (8002d80 <HAL_ADC_MspInit+0xc8>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d6c:	bf00      	nop
 8002d6e:	3720      	adds	r7, #32
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40012400 	.word	0x40012400
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40010800 	.word	0x40010800
 8002d80:	2000bc84 	.word	0x2000bc84
 8002d84:	40020008 	.word	0x40020008

08002d88 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0310 	add.w	r3, r7, #16
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a3d      	ldr	r2, [pc, #244]	; (8002e98 <HAL_DAC_MspInit+0x110>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d172      	bne.n	8002e8e <HAL_DAC_MspInit+0x106>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002da8:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <HAL_DAC_MspInit+0x114>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4a3b      	ldr	r2, [pc, #236]	; (8002e9c <HAL_DAC_MspInit+0x114>)
 8002dae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002db2:	61d3      	str	r3, [r2, #28]
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_DAC_MspInit+0x114>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_DAC_MspInit+0x114>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <HAL_DAC_MspInit+0x114>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6193      	str	r3, [r2, #24]
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_DAC_MspInit+0x114>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002dd8:	2330      	movs	r3, #48	; 0x30
 8002dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 0310 	add.w	r3, r7, #16
 8002de4:	4619      	mov	r1, r3
 8002de6:	482e      	ldr	r0, [pc, #184]	; (8002ea0 <HAL_DAC_MspInit+0x118>)
 8002de8:	f001 fe56 	bl	8004a98 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel3;
 8002dec:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002dee:	4a2e      	ldr	r2, [pc, #184]	; (8002ea8 <HAL_DAC_MspInit+0x120>)
 8002df0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002df2:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002df4:	2210      	movs	r2, #16
 8002df6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df8:	4b2a      	ldr	r3, [pc, #168]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002dfe:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e12:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002e14:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e16:	2220      	movs	r2, #32
 8002e18:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e1a:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e1c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002e20:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002e22:	4820      	ldr	r0, [pc, #128]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e24:	f001 fabc 	bl	80043a0 <HAL_DMA_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_DAC_MspInit+0xaa>
    {
      Error_Handler();
 8002e2e:	f7ff ff1b 	bl	8002c68 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_DAC_MspInit+0x11c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6253      	str	r3, [r2, #36]	; 0x24

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA2_Channel4;
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e40:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_DAC_MspInit+0x128>)
 8002e42:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e46:	2210      	movs	r2, #16
 8002e48:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e52:	2280      	movs	r2, #128	; 0x80
 8002e54:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5c:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e64:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8002e66:	4b11      	ldr	r3, [pc, #68]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e68:	2220      	movs	r2, #32
 8002e6a:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002e6c:	4b0f      	ldr	r3, [pc, #60]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8002e72:	480e      	ldr	r0, [pc, #56]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e74:	f001 fa94 	bl	80043a0 <HAL_DMA_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_DAC_MspInit+0xfa>
    {
      Error_Handler();
 8002e7e:	f7ff fef3 	bl	8002c68 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_DAC_MspInit+0x124>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002e8e:	bf00      	nop
 8002e90:	3720      	adds	r7, #32
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40007400 	.word	0x40007400
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40010800 	.word	0x40010800
 8002ea4:	2000bcdc 	.word	0x2000bcdc
 8002ea8:	40020430 	.word	0x40020430
 8002eac:	2000bd20 	.word	0x2000bd20
 8002eb0:	40020444 	.word	0x40020444

08002eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0310 	add.w	r3, r7, #16
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a15      	ldr	r2, [pc, #84]	; (8002f24 <HAL_I2C_MspInit+0x70>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d123      	bne.n	8002f1c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_I2C_MspInit+0x74>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_I2C_MspInit+0x74>)
 8002eda:	f043 0308 	orr.w	r3, r3, #8
 8002ede:	6193      	str	r3, [r2, #24]
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_I2C_MspInit+0x74>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eec:	23c0      	movs	r3, #192	; 0xc0
 8002eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef0:	2312      	movs	r3, #18
 8002ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef8:	f107 0310 	add.w	r3, r7, #16
 8002efc:	4619      	mov	r1, r3
 8002efe:	480b      	ldr	r0, [pc, #44]	; (8002f2c <HAL_I2C_MspInit+0x78>)
 8002f00:	f001 fdca 	bl	8004a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_I2C_MspInit+0x74>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_I2C_MspInit+0x74>)
 8002f0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f0e:	61d3      	str	r3, [r2, #28]
 8002f10:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_I2C_MspInit+0x74>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f1c:	bf00      	nop
 8002f1e:	3720      	adds	r7, #32
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40005400 	.word	0x40005400
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40010c00 	.word	0x40010c00

08002f30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0318 	add.w	r3, r7, #24
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
  if(hsd->Instance==SDIO)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_SD_MspInit+0xa4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d13c      	bne.n	8002fca <HAL_SD_MspInit+0x9a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002f50:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f5a:	6153      	str	r3, [r2, #20]
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f6e:	f043 0310 	orr.w	r3, r3, #16
 8002f72:	6193      	str	r3, [r2, #24]
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f80:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f86:	f043 0320 	orr.w	r3, r3, #32
 8002f8a:	6193      	str	r3, [r2, #24]
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_SD_MspInit+0xa8>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f9c:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	4619      	mov	r1, r3
 8002fac:	480b      	ldr	r0, [pc, #44]	; (8002fdc <HAL_SD_MspInit+0xac>)
 8002fae:	f001 fd73 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fbe:	f107 0318 	add.w	r3, r7, #24
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4806      	ldr	r0, [pc, #24]	; (8002fe0 <HAL_SD_MspInit+0xb0>)
 8002fc6:	f001 fd67 	bl	8004a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40018000 	.word	0x40018000
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40011000 	.word	0x40011000
 8002fe0:	40011400 	.word	0x40011400

08002fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fec:	f107 0310 	add.w	r3, r7, #16
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_SPI_MspInit+0x8c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d131      	bne.n	8003068 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_SPI_MspInit+0x90>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_SPI_MspInit+0x90>)
 800300a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300e:	61d3      	str	r3, [r2, #28]
 8003010:	4b18      	ldr	r3, [pc, #96]	; (8003074 <HAL_SPI_MspInit+0x90>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301c:	4b15      	ldr	r3, [pc, #84]	; (8003074 <HAL_SPI_MspInit+0x90>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a14      	ldr	r2, [pc, #80]	; (8003074 <HAL_SPI_MspInit+0x90>)
 8003022:	f043 0308 	orr.w	r3, r3, #8
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_SPI_MspInit+0x90>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003034:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003038:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003042:	f107 0310 	add.w	r3, r7, #16
 8003046:	4619      	mov	r1, r3
 8003048:	480b      	ldr	r0, [pc, #44]	; (8003078 <HAL_SPI_MspInit+0x94>)
 800304a:	f001 fd25 	bl	8004a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800304e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305c:	f107 0310 	add.w	r3, r7, #16
 8003060:	4619      	mov	r1, r3
 8003062:	4805      	ldr	r0, [pc, #20]	; (8003078 <HAL_SPI_MspInit+0x94>)
 8003064:	f001 fd18 	bl	8004a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003068:	bf00      	nop
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40003800 	.word	0x40003800
 8003074:	40021000 	.word	0x40021000
 8003078:	40010c00 	.word	0x40010c00

0800307c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d10c      	bne.n	80030a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	4a21      	ldr	r2, [pc, #132]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	61d3      	str	r3, [r2, #28]
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030a6:	e032      	b.n	800310e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_TIM_Base_MspInit+0xa0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d114      	bne.n	80030dc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4a18      	ldr	r2, [pc, #96]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 80030b8:	f043 0302 	orr.w	r3, r3, #2
 80030bc:	61d3      	str	r3, [r2, #28]
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030ca:	2200      	movs	r2, #0
 80030cc:	2100      	movs	r1, #0
 80030ce:	201d      	movs	r0, #29
 80030d0:	f000 fecf 	bl	8003e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030d4:	201d      	movs	r0, #29
 80030d6:	f000 fee8 	bl	8003eaa <HAL_NVIC_EnableIRQ>
}
 80030da:	e018      	b.n	800310e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <HAL_TIM_Base_MspInit+0xa4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d113      	bne.n	800310e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	61d3      	str	r3, [r2, #28]
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_TIM_Base_MspInit+0x9c>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030fe:	2200      	movs	r2, #0
 8003100:	2100      	movs	r1, #0
 8003102:	201e      	movs	r0, #30
 8003104:	f000 feb5 	bl	8003e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003108:	201e      	movs	r0, #30
 800310a:	f000 fece 	bl	8003eaa <HAL_NVIC_EnableIRQ>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	40000400 	.word	0x40000400
 8003120:	40000800 	.word	0x40000800

08003124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <NMI_Handler+0x4>

0800312a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <HardFault_Handler+0x4>

08003130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <MemManage_Handler+0x4>

08003136 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800313a:	e7fe      	b.n	800313a <BusFault_Handler+0x4>

0800313c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <UsageFault_Handler+0x4>

08003142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314e:	b480      	push	{r7}
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr

08003166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316a:	f000 f98d 	bl	8003488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}

08003172 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003176:	2001      	movs	r0, #1
 8003178:	f001 fe52 	bl	8004e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}

08003180 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003184:	2002      	movs	r0, #2
 8003186:	f001 fe4b 	bl	8004e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}

0800318e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003192:	2004      	movs	r0, #4
 8003194:	f001 fe44 	bl	8004e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}

0800319c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80031a0:	2008      	movs	r0, #8
 80031a2:	f001 fe3d 	bl	8004e20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80031b0:	4802      	ldr	r0, [pc, #8]	; (80031bc <DMA1_Channel1_IRQHandler+0x10>)
 80031b2:	f001 fa07 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	2000bc84 	.word	0x2000bc84

080031c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80031c4:	4802      	ldr	r0, [pc, #8]	; (80031d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80031c6:	f002 f8ac 	bl	8005322 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	2000c8e4 	.word	0x2000c8e4

080031d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031d8:	4802      	ldr	r0, [pc, #8]	; (80031e4 <TIM3_IRQHandler+0x10>)
 80031da:	f005 fe87 	bl	8008eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000bedc 	.word	0x2000bedc

080031e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <TIM4_IRQHandler+0x10>)
 80031ee:	f005 fe7d 	bl	8008eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000bf24 	.word	0x2000bf24

080031fc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <DMA2_Channel3_IRQHandler+0x10>)
 8003202:	f001 f9df 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	2000bcdc 	.word	0x2000bcdc

08003210 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA2_Channel4_5_IRQHandler+0x10>)
 8003216:	f001 f9d5 	bl	80045c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	2000bd20 	.word	0x2000bd20

08003224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
	return 1;
 8003228:	2301      	movs	r3, #1
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <_kill>:

int _kill(int pid, int sig)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800323c:	f00e f8b0 	bl	80113a0 <__errno>
 8003240:	4603      	mov	r3, r0
 8003242:	2216      	movs	r2, #22
 8003244:	601a      	str	r2, [r3, #0]
	return -1;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_exit>:

void _exit (int status)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800325a:	f04f 31ff 	mov.w	r1, #4294967295
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ffe7 	bl	8003232 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003264:	e7fe      	b.n	8003264 <_exit+0x12>

08003266 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e00a      	b.n	800328e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003278:	f3af 8000 	nop.w
 800327c:	4601      	mov	r1, r0
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	60ba      	str	r2, [r7, #8]
 8003284:	b2ca      	uxtb	r2, r1
 8003286:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	3301      	adds	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	dbf0      	blt.n	8003278 <_read+0x12>
	}

return len;
 8003296:	687b      	ldr	r3, [r7, #4]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e009      	b.n	80032c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	60ba      	str	r2, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3301      	adds	r3, #1
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	dbf1      	blt.n	80032b2 <_write+0x12>
	}
	return len;
 80032ce:	687b      	ldr	r3, [r7, #4]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_close>:

int _close(int file)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	return -1;
 80032e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <_isatty>:

int _isatty(int file)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	return 1;
 8003314:	2301      	movs	r3, #1
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
	return 0;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <_sbrk+0x5c>)
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <_sbrk+0x60>)
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <_sbrk+0x64>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <_sbrk+0x64>)
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <_sbrk+0x68>)
 8003358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d207      	bcs.n	8003378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003368:	f00e f81a 	bl	80113a0 <__errno>
 800336c:	4603      	mov	r3, r0
 800336e:	220c      	movs	r2, #12
 8003370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295
 8003376:	e009      	b.n	800338c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <_sbrk+0x64>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	4a05      	ldr	r2, [pc, #20]	; (800339c <_sbrk+0x64>)
 8003388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20010000 	.word	0x20010000
 8003398:	00000400 	.word	0x00000400
 800339c:	2000c3e0 	.word	0x2000c3e0
 80033a0:	2000cbf8 	.word	0x2000cbf8

080033a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80033b0:	f7ff fff8 	bl	80033a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033b4:	480b      	ldr	r0, [pc, #44]	; (80033e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80033b6:	490c      	ldr	r1, [pc, #48]	; (80033e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80033b8:	4a0c      	ldr	r2, [pc, #48]	; (80033ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80033ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033bc:	e002      	b.n	80033c4 <LoopCopyDataInit>

080033be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033c2:	3304      	adds	r3, #4

080033c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c8:	d3f9      	bcc.n	80033be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ca:	4a09      	ldr	r2, [pc, #36]	; (80033f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80033cc:	4c09      	ldr	r4, [pc, #36]	; (80033f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033d0:	e001      	b.n	80033d6 <LoopFillZerobss>

080033d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033d4:	3204      	adds	r2, #4

080033d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d8:	d3fb      	bcc.n	80033d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033da:	f00d ffe7 	bl	80113ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033de:	f7fe fe3f 	bl	8002060 <main>
  bx lr
 80033e2:	4770      	bx	lr
  ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	2000b8d4 	.word	0x2000b8d4
  ldr r2, =_sidata
 80033ec:	0802268c 	.word	0x0802268c
  ldr r2, =_sbss
 80033f0:	2000b8d8 	.word	0x2000b8d8
  ldr r4, =_ebss
 80033f4:	2000cbf8 	.word	0x2000cbf8

080033f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC1_2_IRQHandler>
	...

080033fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <HAL_Init+0x28>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a07      	ldr	r2, [pc, #28]	; (8003424 <HAL_Init+0x28>)
 8003406:	f043 0310 	orr.w	r3, r3, #16
 800340a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800340c:	2003      	movs	r0, #3
 800340e:	f000 fd25 	bl	8003e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003412:	2000      	movs	r0, #0
 8003414:	f000 f808 	bl	8003428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003418:	f7ff fc2c 	bl	8002c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40022000 	.word	0x40022000

08003428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_InitTick+0x54>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_InitTick+0x58>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4619      	mov	r1, r3
 800343a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800343e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fd3d 	bl	8003ec6 <HAL_SYSTICK_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e00e      	b.n	8003474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d80a      	bhi.n	8003472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800345c:	2200      	movs	r2, #0
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	f04f 30ff 	mov.w	r0, #4294967295
 8003464:	f000 fd05 	bl	8003e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003468:	4a06      	ldr	r2, [pc, #24]	; (8003484 <HAL_InitTick+0x5c>)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	2000b5a0 	.word	0x2000b5a0
 8003480:	2000b5a8 	.word	0x2000b5a8
 8003484:	2000b5a4 	.word	0x2000b5a4

08003488 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_IncTick+0x1c>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_IncTick+0x20>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4413      	add	r3, r2
 8003498:	4a03      	ldr	r2, [pc, #12]	; (80034a8 <HAL_IncTick+0x20>)
 800349a:	6013      	str	r3, [r2, #0]
}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	2000b5a8 	.word	0x2000b5a8
 80034a8:	2000c3e4 	.word	0x2000c3e4

080034ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return uwTick;
 80034b0:	4b02      	ldr	r3, [pc, #8]	; (80034bc <HAL_GetTick+0x10>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	2000c3e4 	.word	0x2000c3e4

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff fff0 	bl	80034ac <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffe0 	bl	80034ac <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	2000b5a8 	.word	0x2000b5a8

08003508 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0ce      	b.n	80036c8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fbb6 	bl	8002cb8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fb11 	bl	8003b74 <ADC_ConversionStop_Disable>
 8003552:	4603      	mov	r3, r0
 8003554:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80a9 	bne.w	80036b6 <HAL_ADC_Init+0x1ae>
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 80a5 	bne.w	80036b6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003574:	f023 0302 	bic.w	r3, r3, #2
 8003578:	f043 0202 	orr.w	r2, r3, #2
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4951      	ldr	r1, [pc, #324]	; (80036d0 <HAL_ADC_Init+0x1c8>)
 800358a:	428b      	cmp	r3, r1
 800358c:	d10a      	bne.n	80035a4 <HAL_ADC_Init+0x9c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003596:	d002      	beq.n	800359e <HAL_ADC_Init+0x96>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	e004      	b.n	80035a8 <HAL_ADC_Init+0xa0>
 800359e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035a2:	e001      	b.n	80035a8 <HAL_ADC_Init+0xa0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7b1b      	ldrb	r3, [r3, #12]
 80035ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80035b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c0:	d003      	beq.n	80035ca <HAL_ADC_Init+0xc2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d102      	bne.n	80035d0 <HAL_ADC_Init+0xc8>
 80035ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ce:	e000      	b.n	80035d2 <HAL_ADC_Init+0xca>
 80035d0:	2300      	movs	r3, #0
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7d1b      	ldrb	r3, [r3, #20]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d119      	bne.n	8003614 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7b1b      	ldrb	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	035a      	lsls	r2, r3, #13
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	e00b      	b.n	8003614 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_ADC_Init+0x1cc>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	430b      	orrs	r3, r1
 800363a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003644:	d003      	beq.n	800364e <HAL_ADC_Init+0x146>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d104      	bne.n	8003658 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	3b01      	subs	r3, #1
 8003654:	051b      	lsls	r3, r3, #20
 8003656:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	430a      	orrs	r2, r1
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_ADC_Init+0x1d0>)
 8003674:	4013      	ands	r3, r2
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d10b      	bne.n	8003694 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	f023 0303 	bic.w	r3, r3, #3
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003692:	e018      	b.n	80036c6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f023 0312 	bic.w	r3, r3, #18
 800369c:	f043 0210 	orr.w	r2, r3, #16
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80036b4:	e007      	b.n	80036c6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	f043 0210 	orr.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40013c00 	.word	0x40013c00
 80036d4:	ffe1f7fd 	.word	0xffe1f7fd
 80036d8:	ff1f0efe 	.word	0xff1f0efe

080036dc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a64      	ldr	r2, [pc, #400]	; (8003884 <HAL_ADC_Start_DMA+0x1a8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_ADC_Start_DMA+0x24>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a63      	ldr	r2, [pc, #396]	; (8003888 <HAL_ADC_Start_DMA+0x1ac>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d106      	bne.n	800370e <HAL_ADC_Start_DMA+0x32>
 8003700:	4b60      	ldr	r3, [pc, #384]	; (8003884 <HAL_ADC_Start_DMA+0x1a8>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 80b3 	bne.w	8003874 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_ADC_Start_DMA+0x40>
 8003718:	2302      	movs	r3, #2
 800371a:	e0ae      	b.n	800387a <HAL_ADC_Start_DMA+0x19e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f9cb 	bl	8003ac0 <ADC_Enable>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f040 809a 	bne.w	800386a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <HAL_ADC_Start_DMA+0x1ac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d105      	bne.n	8003760 <HAL_ADC_Start_DMA+0x84>
 8003754:	4b4b      	ldr	r3, [pc, #300]	; (8003884 <HAL_ADC_Start_DMA+0x1a8>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d115      	bne.n	800378c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d026      	beq.n	80037c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003782:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800378a:	e01d      	b.n	80037c8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a39      	ldr	r2, [pc, #228]	; (8003884 <HAL_ADC_Start_DMA+0x1a8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_ADC_Start_DMA+0xd0>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a38      	ldr	r2, [pc, #224]	; (8003888 <HAL_ADC_Start_DMA+0x1ac>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10d      	bne.n	80037c8 <HAL_ADC_Start_DMA+0xec>
 80037ac:	4b35      	ldr	r3, [pc, #212]	; (8003884 <HAL_ADC_Start_DMA+0x1a8>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d007      	beq.n	80037c8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d006      	beq.n	80037e2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	f023 0206 	bic.w	r2, r3, #6
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
 80037e0:	e002      	b.n	80037e8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a25      	ldr	r2, [pc, #148]	; (800388c <HAL_ADC_Start_DMA+0x1b0>)
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4a24      	ldr	r2, [pc, #144]	; (8003890 <HAL_ADC_Start_DMA+0x1b4>)
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a23      	ldr	r2, [pc, #140]	; (8003894 <HAL_ADC_Start_DMA+0x1b8>)
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0202 	mvn.w	r2, #2
 8003810:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003820:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a18      	ldr	r0, [r3, #32]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	334c      	adds	r3, #76	; 0x4c
 800382c:	4619      	mov	r1, r3
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f000 fe2b 	bl	800448c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003840:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003844:	d108      	bne.n	8003858 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003854:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003856:	e00f      	b.n	8003878 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003866:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003868:	e006      	b.n	8003878 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8003872:	e001      	b.n	8003878 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40012400 	.word	0x40012400
 8003888:	40012800 	.word	0x40012800
 800388c:	08003bf7 	.word	0x08003bf7
 8003890:	08003c73 	.word	0x08003c73
 8003894:	08003c8f 	.word	0x08003c8f

08003898 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x20>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e0dc      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x1da>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d81c      	bhi.n	800393a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	3b05      	subs	r3, #5
 8003912:	221f      	movs	r2, #31
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	4019      	ands	r1, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	3b05      	subs	r3, #5
 800392c:	fa00 f203 	lsl.w	r2, r0, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	635a      	str	r2, [r3, #52]	; 0x34
 8003938:	e03c      	b.n	80039b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b0c      	cmp	r3, #12
 8003940:	d81c      	bhi.n	800397c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	3b23      	subs	r3, #35	; 0x23
 8003954:	221f      	movs	r2, #31
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	4019      	ands	r1, r3
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	3b23      	subs	r3, #35	; 0x23
 800396e:	fa00 f203 	lsl.w	r2, r0, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	631a      	str	r2, [r3, #48]	; 0x30
 800397a:	e01b      	b.n	80039b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	3b41      	subs	r3, #65	; 0x41
 800398e:	221f      	movs	r2, #31
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	4019      	ands	r1, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	3b41      	subs	r3, #65	; 0x41
 80039a8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	d91c      	bls.n	80039f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68d9      	ldr	r1, [r3, #12]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	3b1e      	subs	r3, #30
 80039ce:	2207      	movs	r2, #7
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	4019      	ands	r1, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6898      	ldr	r0, [r3, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	4413      	add	r3, r2
 80039e6:	3b1e      	subs	r3, #30
 80039e8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	60da      	str	r2, [r3, #12]
 80039f4:	e019      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6919      	ldr	r1, [r3, #16]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	2207      	movs	r2, #7
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	4019      	ands	r1, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6898      	ldr	r0, [r3, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d003      	beq.n	8003a3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003a36:	2b11      	cmp	r3, #17
 8003a38:	d132      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d125      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d126      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d11a      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a13      	ldr	r2, [pc, #76]	; (8003abc <HAL_ADC_ConfigChannel+0x1ec>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	0c9a      	lsrs	r2, r3, #18
 8003a76:	4613      	mov	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a80:	e002      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f9      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x1b2>
 8003a8e:	e007      	b.n	8003aa0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	40012400 	.word	0x40012400
 8003ab8:	2000b5a0 	.word	0x2000b5a0
 8003abc:	431bde83 	.word	0x431bde83

08003ac0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d040      	beq.n	8003b60 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0201 	orr.w	r2, r2, #1
 8003aec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003aee:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <ADC_Enable+0xac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <ADC_Enable+0xb0>)
 8003af4:	fba2 2303 	umull	r2, r3, r2, r3
 8003af8:	0c9b      	lsrs	r3, r3, #18
 8003afa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003afc:	e002      	b.n	8003b04 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f9      	bne.n	8003afe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b0a:	f7ff fccf 	bl	80034ac <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b10:	e01f      	b.n	8003b52 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b12:	f7ff fccb 	bl	80034ac <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d918      	bls.n	8003b52 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d011      	beq.n	8003b52 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	f043 0210 	orr.w	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e007      	b.n	8003b62 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d1d8      	bne.n	8003b12 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	2000b5a0 	.word	0x2000b5a0
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d12e      	bne.n	8003bec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b9e:	f7ff fc85 	bl	80034ac <HAL_GetTick>
 8003ba2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ba4:	e01b      	b.n	8003bde <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ba6:	f7ff fc81 	bl	80034ac <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d914      	bls.n	8003bde <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d10d      	bne.n	8003bde <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	f043 0210 	orr.w	r2, r3, #16
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e007      	b.n	8003bee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d0dc      	beq.n	8003ba6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d127      	bne.n	8003c60 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c2a:	d115      	bne.n	8003c58 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d111      	bne.n	8003c58 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff fe1d 	bl	8003898 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003c5e:	e004      	b.n	8003c6a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	4798      	blx	r3
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7ff fe12 	bl	80038aa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff fe01 	bl	80038bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cf6:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <__NVIC_SetPriorityGrouping+0x44>)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	60d3      	str	r3, [r2, #12]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	e000ed00 	.word	0xe000ed00

08003d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <__NVIC_GetPriorityGrouping+0x18>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	f003 0307 	and.w	r3, r3, #7
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000ed00 	.word	0xe000ed00

08003d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	db0b      	blt.n	8003d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	f003 021f 	and.w	r2, r3, #31
 8003d40:	4906      	ldr	r1, [pc, #24]	; (8003d5c <__NVIC_EnableIRQ+0x34>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2001      	movs	r0, #1
 8003d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	e000e100 	.word	0xe000e100

08003d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	6039      	str	r1, [r7, #0]
 8003d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	db0a      	blt.n	8003d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	490c      	ldr	r1, [pc, #48]	; (8003dac <__NVIC_SetPriority+0x4c>)
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	0112      	lsls	r2, r2, #4
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	440b      	add	r3, r1
 8003d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d88:	e00a      	b.n	8003da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4908      	ldr	r1, [pc, #32]	; (8003db0 <__NVIC_SetPriority+0x50>)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3b04      	subs	r3, #4
 8003d98:	0112      	lsls	r2, r2, #4
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	761a      	strb	r2, [r3, #24]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e100 	.word	0xe000e100
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f1c3 0307 	rsb	r3, r3, #7
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	bf28      	it	cs
 8003dd2:	2304      	movcs	r3, #4
 8003dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d902      	bls.n	8003de4 <NVIC_EncodePriority+0x30>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3b03      	subs	r3, #3
 8003de2:	e000      	b.n	8003de6 <NVIC_EncodePriority+0x32>
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	401a      	ands	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43d9      	mvns	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	4313      	orrs	r3, r2
         );
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e28:	d301      	bcc.n	8003e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e00f      	b.n	8003e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <SysTick_Config+0x40>)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3b01      	subs	r3, #1
 8003e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e36:	210f      	movs	r1, #15
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	f7ff ff90 	bl	8003d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <SysTick_Config+0x40>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <SysTick_Config+0x40>)
 8003e48:	2207      	movs	r2, #7
 8003e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	e000e010 	.word	0xe000e010

08003e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff ff2d 	bl	8003cc4 <__NVIC_SetPriorityGrouping>
}
 8003e6a:	bf00      	nop
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	4603      	mov	r3, r0
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e84:	f7ff ff42 	bl	8003d0c <__NVIC_GetPriorityGrouping>
 8003e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f7ff ff90 	bl	8003db4 <NVIC_EncodePriority>
 8003e94:	4602      	mov	r2, r0
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff5f 	bl	8003d60 <__NVIC_SetPriority>
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff35 	bl	8003d28 <__NVIC_EnableIRQ>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ffa2 	bl	8003e18 <SysTick_Config>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e014      	b.n	8003f1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fe ff41 	bl	8002d88 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e046      	b.n	8003fc4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	795b      	ldrb	r3, [r3, #5]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_DAC_Start+0x20>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e040      	b.n	8003fc4 <HAL_DAC_Start+0xa2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003f76:	2b3c      	cmp	r3, #60	; 0x3c
 8003f78:	d11d      	bne.n	8003fb6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	e014      	b.n	8003fb6 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	213c      	movs	r1, #60	; 0x3c
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d107      	bne.n	8003fb6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f042 0202 	orr.w	r2, r2, #2
 8003fb4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr
	...

08003fd0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e092      	b.n	800410e <HAL_DAC_Start_DMA+0x13e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	795b      	ldrb	r3, [r3, #5]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_DAC_Start_DMA+0x24>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e08c      	b.n	800410e <HAL_DAC_Start_DMA+0x13e>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d129      	bne.n	800405a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	4a43      	ldr	r2, [pc, #268]	; (8004118 <HAL_DAC_Start_DMA+0x148>)
 800400c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4a42      	ldr	r2, [pc, #264]	; (800411c <HAL_DAC_Start_DMA+0x14c>)
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	4a41      	ldr	r2, [pc, #260]	; (8004120 <HAL_DAC_Start_DMA+0x150>)
 800401c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800402c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_DAC_Start_DMA+0x6c>
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	2b04      	cmp	r3, #4
 8004038:	d005      	beq.n	8004046 <HAL_DAC_Start_DMA+0x76>
 800403a:	e009      	b.n	8004050 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	613b      	str	r3, [r7, #16]
        break;
 8004044:	e033      	b.n	80040ae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	613b      	str	r3, [r7, #16]
        break;
 800404e:	e02e      	b.n	80040ae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3310      	adds	r3, #16
 8004056:	613b      	str	r3, [r7, #16]
        break;
 8004058:	e029      	b.n	80040ae <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	4a31      	ldr	r2, [pc, #196]	; (8004124 <HAL_DAC_Start_DMA+0x154>)
 8004060:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	4a30      	ldr	r2, [pc, #192]	; (8004128 <HAL_DAC_Start_DMA+0x158>)
 8004068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	4a2f      	ldr	r2, [pc, #188]	; (800412c <HAL_DAC_Start_DMA+0x15c>)
 8004070:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004080:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_DAC_Start_DMA+0xc0>
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	2b04      	cmp	r3, #4
 800408c:	d005      	beq.n	800409a <HAL_DAC_Start_DMA+0xca>
 800408e:	e009      	b.n	80040a4 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	613b      	str	r3, [r7, #16]
        break;
 8004098:	e009      	b.n	80040ae <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3318      	adds	r3, #24
 80040a0:	613b      	str	r3, [r7, #16]
        break;
 80040a2:	e004      	b.n	80040ae <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	331c      	adds	r3, #28
 80040aa:	613b      	str	r3, [r7, #16]
        break;
 80040ac:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <HAL_DAC_Start_DMA+0xf8>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* DAC_CR_DMAUDRIE1 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6898      	ldr	r0, [r3, #8]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	f000 f9e5 	bl	800448c <HAL_DMA_Start_IT>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]
 80040c6:	e008      	b.n	80040da <HAL_DAC_Start_DMA+0x10a>
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
#endif /* DAC_CR_DMAUDRIE2 */

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	68d8      	ldr	r0, [r3, #12]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	f000 f9db 	bl	800448c <HAL_DMA_Start_IT>
 80040d6:	4603      	mov	r3, r0
 80040d8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10c      	bne.n	8004100 <HAL_DAC_Start_DMA+0x130>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2201      	movs	r2, #1
 80040f4:	409a      	lsls	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e005      	b.n	800410c <HAL_DAC_Start_DMA+0x13c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	08004291 	.word	0x08004291
 800411c:	080042b3 	.word	0x080042b3
 8004120:	080042cf 	.word	0x080042cf
 8004124:	08004333 	.word	0x08004333
 8004128:	08004355 	.word	0x08004355
 800412c:	08004371 	.word	0x08004371

08004130 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e02e      	b.n	80041a2 <HAL_DAC_Stop_DMA+0x72>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	f003 0310 	and.w	r3, r3, #16
 8004150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43da      	mvns	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	400a      	ands	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2201      	movs	r2, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	43da      	mvns	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	400a      	ands	r2, r1
 800417c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <HAL_DAC_Stop_DMA+0x60>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f9df 	bl	800454c <HAL_DMA_Abort>
 800418e:	e004      	b.n	800419a <HAL_DAC_Stop_DMA+0x6a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f9d9 	bl	800454c <HAL_DMA_Abort>
#endif /* DAC_CR_DMAUDRIE2 */
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b089      	sub	sp, #36	; 0x24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <HAL_DAC_ConfigChannel+0x1c>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e042      	b.n	8004286 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	795b      	ldrb	r3, [r3, #5]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_DAC_ConfigChannel+0x2c>
 8004208:	2302      	movs	r3, #2
 800420a:	e03c      	b.n	8004286 <HAL_DAC_ConfigChannel+0xa6>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2202      	movs	r2, #2
 8004216:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	f640 72fe 	movw	r2, #4094	; 0xffe
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	4313      	orrs	r3, r2
 8004252:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	22c0      	movs	r2, #192	; 0xc0
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	400a      	ands	r2, r1
 8004276:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004284:	7ffb      	ldrb	r3, [r7, #31]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3724      	adds	r7, #36	; 0x24
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff83 	bl	80041aa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	711a      	strb	r2, [r3, #4]
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7ff ff7b 	bl	80041bc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f7ff ff70 	bl	80041ce <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	711a      	strb	r2, [r3, #4]
}
 80042f4:	bf00      	nop
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr

0800430e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f7ff ffdb 	bl	80042fc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	711a      	strb	r2, [r3, #4]
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff ffd3 	bl	800430e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004368:	bf00      	nop
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f043 0204 	orr.w	r2, r3, #4
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff ffc8 	bl	8004320 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	711a      	strb	r2, [r3, #4]
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e059      	b.n	800446a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_DMA_Init+0xd4>)
 80043be:	429a      	cmp	r2, r3
 80043c0:	d80f      	bhi.n	80043e2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <HAL_DMA_Init+0xd8>)
 80043ca:	4413      	add	r3, r2
 80043cc:	4a2b      	ldr	r2, [pc, #172]	; (800447c <HAL_DMA_Init+0xdc>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	091b      	lsrs	r3, r3, #4
 80043d4:	009a      	lsls	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a28      	ldr	r2, [pc, #160]	; (8004480 <HAL_DMA_Init+0xe0>)
 80043de:	63da      	str	r2, [r3, #60]	; 0x3c
 80043e0:	e00e      	b.n	8004400 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_DMA_Init+0xe4>)
 80043ea:	4413      	add	r3, r2
 80043ec:	4a23      	ldr	r2, [pc, #140]	; (800447c <HAL_DMA_Init+0xdc>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	009a      	lsls	r2, r3, #2
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_DMA_Init+0xe8>)
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004416:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800441a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800443c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	40020407 	.word	0x40020407
 8004478:	bffdfff8 	.word	0xbffdfff8
 800447c:	cccccccd 	.word	0xcccccccd
 8004480:	40020000 	.word	0x40020000
 8004484:	bffdfbf8 	.word	0xbffdfbf8
 8004488:	40020400 	.word	0x40020400

0800448c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_DMA_Start_IT+0x20>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e04b      	b.n	8004544 <HAL_DMA_Start_IT+0xb8>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d13a      	bne.n	8004536 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 faa9 	bl	8004a3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 020e 	orr.w	r2, r2, #14
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e00f      	b.n	8004524 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 020a 	orr.w	r2, r2, #10
 8004522:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e005      	b.n	8004542 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800453e:	2302      	movs	r3, #2
 8004540:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d008      	beq.n	8004576 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2204      	movs	r2, #4
 8004568:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e020      	b.n	80045b8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 020e 	bic.w	r2, r2, #14
 8004584:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	2101      	movs	r1, #1
 80045a0:	fa01 f202 	lsl.w	r2, r1, r2
 80045a4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2204      	movs	r2, #4
 80045e2:	409a      	lsls	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4013      	ands	r3, r2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80f1 	beq.w	80047d0 <HAL_DMA_IRQHandler+0x20c>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80eb 	beq.w	80047d0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d107      	bne.n	8004618 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0204 	bic.w	r2, r2, #4
 8004616:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	4b5f      	ldr	r3, [pc, #380]	; (800479c <HAL_DMA_IRQHandler+0x1d8>)
 8004620:	429a      	cmp	r2, r3
 8004622:	d958      	bls.n	80046d6 <HAL_DMA_IRQHandler+0x112>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a5d      	ldr	r2, [pc, #372]	; (80047a0 <HAL_DMA_IRQHandler+0x1dc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d04f      	beq.n	80046ce <HAL_DMA_IRQHandler+0x10a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a5c      	ldr	r2, [pc, #368]	; (80047a4 <HAL_DMA_IRQHandler+0x1e0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d048      	beq.n	80046ca <HAL_DMA_IRQHandler+0x106>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a5a      	ldr	r2, [pc, #360]	; (80047a8 <HAL_DMA_IRQHandler+0x1e4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d040      	beq.n	80046c4 <HAL_DMA_IRQHandler+0x100>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a59      	ldr	r2, [pc, #356]	; (80047ac <HAL_DMA_IRQHandler+0x1e8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d038      	beq.n	80046be <HAL_DMA_IRQHandler+0xfa>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a57      	ldr	r2, [pc, #348]	; (80047b0 <HAL_DMA_IRQHandler+0x1ec>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d030      	beq.n	80046b8 <HAL_DMA_IRQHandler+0xf4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a56      	ldr	r2, [pc, #344]	; (80047b4 <HAL_DMA_IRQHandler+0x1f0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d028      	beq.n	80046b2 <HAL_DMA_IRQHandler+0xee>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a4d      	ldr	r2, [pc, #308]	; (800479c <HAL_DMA_IRQHandler+0x1d8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d020      	beq.n	80046ac <HAL_DMA_IRQHandler+0xe8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <HAL_DMA_IRQHandler+0x1f4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d019      	beq.n	80046a8 <HAL_DMA_IRQHandler+0xe4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a50      	ldr	r2, [pc, #320]	; (80047bc <HAL_DMA_IRQHandler+0x1f8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d012      	beq.n	80046a4 <HAL_DMA_IRQHandler+0xe0>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a4f      	ldr	r2, [pc, #316]	; (80047c0 <HAL_DMA_IRQHandler+0x1fc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00a      	beq.n	800469e <HAL_DMA_IRQHandler+0xda>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a4d      	ldr	r2, [pc, #308]	; (80047c4 <HAL_DMA_IRQHandler+0x200>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d102      	bne.n	8004698 <HAL_DMA_IRQHandler+0xd4>
 8004692:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004696:	e01b      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 8004698:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800469c:	e018      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 800469e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a2:	e015      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046a4:	2340      	movs	r3, #64	; 0x40
 80046a6:	e013      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046a8:	2304      	movs	r3, #4
 80046aa:	e011      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046b0:	e00e      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046b6:	e00b      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046bc:	e008      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c2:	e005      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c8:	e002      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046ca:	2340      	movs	r3, #64	; 0x40
 80046cc:	e000      	b.n	80046d0 <HAL_DMA_IRQHandler+0x10c>
 80046ce:	2304      	movs	r3, #4
 80046d0:	4a3d      	ldr	r2, [pc, #244]	; (80047c8 <HAL_DMA_IRQHandler+0x204>)
 80046d2:	6053      	str	r3, [r2, #4]
 80046d4:	e057      	b.n	8004786 <HAL_DMA_IRQHandler+0x1c2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a31      	ldr	r2, [pc, #196]	; (80047a0 <HAL_DMA_IRQHandler+0x1dc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d04f      	beq.n	8004780 <HAL_DMA_IRQHandler+0x1bc>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2f      	ldr	r2, [pc, #188]	; (80047a4 <HAL_DMA_IRQHandler+0x1e0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d048      	beq.n	800477c <HAL_DMA_IRQHandler+0x1b8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2e      	ldr	r2, [pc, #184]	; (80047a8 <HAL_DMA_IRQHandler+0x1e4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d040      	beq.n	8004776 <HAL_DMA_IRQHandler+0x1b2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2c      	ldr	r2, [pc, #176]	; (80047ac <HAL_DMA_IRQHandler+0x1e8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d038      	beq.n	8004770 <HAL_DMA_IRQHandler+0x1ac>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2b      	ldr	r2, [pc, #172]	; (80047b0 <HAL_DMA_IRQHandler+0x1ec>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d030      	beq.n	800476a <HAL_DMA_IRQHandler+0x1a6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a29      	ldr	r2, [pc, #164]	; (80047b4 <HAL_DMA_IRQHandler+0x1f0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d028      	beq.n	8004764 <HAL_DMA_IRQHandler+0x1a0>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a21      	ldr	r2, [pc, #132]	; (800479c <HAL_DMA_IRQHandler+0x1d8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d020      	beq.n	800475e <HAL_DMA_IRQHandler+0x19a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a25      	ldr	r2, [pc, #148]	; (80047b8 <HAL_DMA_IRQHandler+0x1f4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d019      	beq.n	800475a <HAL_DMA_IRQHandler+0x196>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a24      	ldr	r2, [pc, #144]	; (80047bc <HAL_DMA_IRQHandler+0x1f8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d012      	beq.n	8004756 <HAL_DMA_IRQHandler+0x192>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_DMA_IRQHandler+0x1fc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00a      	beq.n	8004750 <HAL_DMA_IRQHandler+0x18c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <HAL_DMA_IRQHandler+0x200>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d102      	bne.n	800474a <HAL_DMA_IRQHandler+0x186>
 8004744:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004748:	e01b      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 800474a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800474e:	e018      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 8004750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004754:	e015      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 8004756:	2340      	movs	r3, #64	; 0x40
 8004758:	e013      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 800475a:	2304      	movs	r3, #4
 800475c:	e011      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 800475e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004762:	e00e      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 8004764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004768:	e00b      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 800476a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800476e:	e008      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 8004770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004774:	e005      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 8004776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800477a:	e002      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	e000      	b.n	8004782 <HAL_DMA_IRQHandler+0x1be>
 8004780:	2304      	movs	r3, #4
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_DMA_IRQHandler+0x208>)
 8004784:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8136 	beq.w	80049fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004798:	e130      	b.n	80049fc <HAL_DMA_IRQHandler+0x438>
 800479a:	bf00      	nop
 800479c:	40020080 	.word	0x40020080
 80047a0:	40020008 	.word	0x40020008
 80047a4:	4002001c 	.word	0x4002001c
 80047a8:	40020030 	.word	0x40020030
 80047ac:	40020044 	.word	0x40020044
 80047b0:	40020058 	.word	0x40020058
 80047b4:	4002006c 	.word	0x4002006c
 80047b8:	40020408 	.word	0x40020408
 80047bc:	4002041c 	.word	0x4002041c
 80047c0:	40020430 	.word	0x40020430
 80047c4:	40020444 	.word	0x40020444
 80047c8:	40020400 	.word	0x40020400
 80047cc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2202      	movs	r2, #2
 80047d6:	409a      	lsls	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80dd 	beq.w	800499c <HAL_DMA_IRQHandler+0x3d8>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80d7 	beq.w	800499c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10b      	bne.n	8004814 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 020a 	bic.w	r2, r2, #10
 800480a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_DMA_IRQHandler+0x444>)
 800481c:	429a      	cmp	r2, r3
 800481e:	d958      	bls.n	80048d2 <HAL_DMA_IRQHandler+0x30e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a79      	ldr	r2, [pc, #484]	; (8004a0c <HAL_DMA_IRQHandler+0x448>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d04f      	beq.n	80048ca <HAL_DMA_IRQHandler+0x306>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a78      	ldr	r2, [pc, #480]	; (8004a10 <HAL_DMA_IRQHandler+0x44c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d048      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x302>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a76      	ldr	r2, [pc, #472]	; (8004a14 <HAL_DMA_IRQHandler+0x450>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d040      	beq.n	80048c0 <HAL_DMA_IRQHandler+0x2fc>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a75      	ldr	r2, [pc, #468]	; (8004a18 <HAL_DMA_IRQHandler+0x454>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d038      	beq.n	80048ba <HAL_DMA_IRQHandler+0x2f6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a73      	ldr	r2, [pc, #460]	; (8004a1c <HAL_DMA_IRQHandler+0x458>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d030      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x2f0>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a72      	ldr	r2, [pc, #456]	; (8004a20 <HAL_DMA_IRQHandler+0x45c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d028      	beq.n	80048ae <HAL_DMA_IRQHandler+0x2ea>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a69      	ldr	r2, [pc, #420]	; (8004a08 <HAL_DMA_IRQHandler+0x444>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d020      	beq.n	80048a8 <HAL_DMA_IRQHandler+0x2e4>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a6e      	ldr	r2, [pc, #440]	; (8004a24 <HAL_DMA_IRQHandler+0x460>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d019      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x2e0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a6c      	ldr	r2, [pc, #432]	; (8004a28 <HAL_DMA_IRQHandler+0x464>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d012      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2dc>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a6b      	ldr	r2, [pc, #428]	; (8004a2c <HAL_DMA_IRQHandler+0x468>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00a      	beq.n	800489a <HAL_DMA_IRQHandler+0x2d6>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a69      	ldr	r2, [pc, #420]	; (8004a30 <HAL_DMA_IRQHandler+0x46c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d102      	bne.n	8004894 <HAL_DMA_IRQHandler+0x2d0>
 800488e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004892:	e01b      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 8004894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004898:	e018      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 800489a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800489e:	e015      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048a0:	2320      	movs	r3, #32
 80048a2:	e013      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e011      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ac:	e00e      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048b2:	e00b      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048b8:	e008      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048be:	e005      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c4:	e002      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048c6:	2320      	movs	r3, #32
 80048c8:	e000      	b.n	80048cc <HAL_DMA_IRQHandler+0x308>
 80048ca:	2302      	movs	r3, #2
 80048cc:	4a59      	ldr	r2, [pc, #356]	; (8004a34 <HAL_DMA_IRQHandler+0x470>)
 80048ce:	6053      	str	r3, [r2, #4]
 80048d0:	e057      	b.n	8004982 <HAL_DMA_IRQHandler+0x3be>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4d      	ldr	r2, [pc, #308]	; (8004a0c <HAL_DMA_IRQHandler+0x448>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04f      	beq.n	800497c <HAL_DMA_IRQHandler+0x3b8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4b      	ldr	r2, [pc, #300]	; (8004a10 <HAL_DMA_IRQHandler+0x44c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d048      	beq.n	8004978 <HAL_DMA_IRQHandler+0x3b4>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a4a      	ldr	r2, [pc, #296]	; (8004a14 <HAL_DMA_IRQHandler+0x450>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_IRQHandler+0x3ae>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a48      	ldr	r2, [pc, #288]	; (8004a18 <HAL_DMA_IRQHandler+0x454>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d038      	beq.n	800496c <HAL_DMA_IRQHandler+0x3a8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a47      	ldr	r2, [pc, #284]	; (8004a1c <HAL_DMA_IRQHandler+0x458>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d030      	beq.n	8004966 <HAL_DMA_IRQHandler+0x3a2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a45      	ldr	r2, [pc, #276]	; (8004a20 <HAL_DMA_IRQHandler+0x45c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d028      	beq.n	8004960 <HAL_DMA_IRQHandler+0x39c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3d      	ldr	r2, [pc, #244]	; (8004a08 <HAL_DMA_IRQHandler+0x444>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d020      	beq.n	800495a <HAL_DMA_IRQHandler+0x396>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a41      	ldr	r2, [pc, #260]	; (8004a24 <HAL_DMA_IRQHandler+0x460>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d019      	beq.n	8004956 <HAL_DMA_IRQHandler+0x392>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a40      	ldr	r2, [pc, #256]	; (8004a28 <HAL_DMA_IRQHandler+0x464>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d012      	beq.n	8004952 <HAL_DMA_IRQHandler+0x38e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3e      	ldr	r2, [pc, #248]	; (8004a2c <HAL_DMA_IRQHandler+0x468>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00a      	beq.n	800494c <HAL_DMA_IRQHandler+0x388>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3d      	ldr	r2, [pc, #244]	; (8004a30 <HAL_DMA_IRQHandler+0x46c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d102      	bne.n	8004946 <HAL_DMA_IRQHandler+0x382>
 8004940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004944:	e01b      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 8004946:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800494a:	e018      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 800494c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004950:	e015      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 8004952:	2320      	movs	r3, #32
 8004954:	e013      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 8004956:	2302      	movs	r3, #2
 8004958:	e011      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 800495a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800495e:	e00e      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 8004960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004964:	e00b      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 8004966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800496a:	e008      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 800496c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004970:	e005      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 8004972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004976:	e002      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 8004978:	2320      	movs	r3, #32
 800497a:	e000      	b.n	800497e <HAL_DMA_IRQHandler+0x3ba>
 800497c:	2302      	movs	r3, #2
 800497e:	4a2e      	ldr	r2, [pc, #184]	; (8004a38 <HAL_DMA_IRQHandler+0x474>)
 8004980:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d034      	beq.n	80049fc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800499a:	e02f      	b.n	80049fc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2208      	movs	r2, #8
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d028      	beq.n	80049fe <HAL_DMA_IRQHandler+0x43a>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d023      	beq.n	80049fe <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 020e 	bic.w	r2, r2, #14
 80049c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f202 	lsl.w	r2, r1, r2
 80049d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d004      	beq.n	80049fe <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
    }
  }
  return;
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
}
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40020080 	.word	0x40020080
 8004a0c:	40020008 	.word	0x40020008
 8004a10:	4002001c 	.word	0x4002001c
 8004a14:	40020030 	.word	0x40020030
 8004a18:	40020044 	.word	0x40020044
 8004a1c:	40020058 	.word	0x40020058
 8004a20:	4002006c 	.word	0x4002006c
 8004a24:	40020408 	.word	0x40020408
 8004a28:	4002041c 	.word	0x4002041c
 8004a2c:	40020430 	.word	0x40020430
 8004a30:	40020444 	.word	0x40020444
 8004a34:	40020400 	.word	0x40020400
 8004a38:	40020000 	.word	0x40020000

08004a3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	2101      	movs	r1, #1
 8004a54:	fa01 f202 	lsl.w	r2, r1, r2
 8004a58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d108      	bne.n	8004a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a7a:	e007      	b.n	8004a8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	60da      	str	r2, [r3, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b08b      	sub	sp, #44	; 0x2c
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004aaa:	e179      	b.n	8004da0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004aac:	2201      	movs	r2, #1
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	4013      	ands	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	f040 8168 	bne.w	8004d9a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	4a96      	ldr	r2, [pc, #600]	; (8004d28 <HAL_GPIO_Init+0x290>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d05e      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004ad4:	4a94      	ldr	r2, [pc, #592]	; (8004d28 <HAL_GPIO_Init+0x290>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d875      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004ada:	4a94      	ldr	r2, [pc, #592]	; (8004d2c <HAL_GPIO_Init+0x294>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d058      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004ae0:	4a92      	ldr	r2, [pc, #584]	; (8004d2c <HAL_GPIO_Init+0x294>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d86f      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004ae6:	4a92      	ldr	r2, [pc, #584]	; (8004d30 <HAL_GPIO_Init+0x298>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d052      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004aec:	4a90      	ldr	r2, [pc, #576]	; (8004d30 <HAL_GPIO_Init+0x298>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d869      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004af2:	4a90      	ldr	r2, [pc, #576]	; (8004d34 <HAL_GPIO_Init+0x29c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04c      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004af8:	4a8e      	ldr	r2, [pc, #568]	; (8004d34 <HAL_GPIO_Init+0x29c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d863      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004afe:	4a8e      	ldr	r2, [pc, #568]	; (8004d38 <HAL_GPIO_Init+0x2a0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d046      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
 8004b04:	4a8c      	ldr	r2, [pc, #560]	; (8004d38 <HAL_GPIO_Init+0x2a0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d85d      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004b0a:	2b12      	cmp	r3, #18
 8004b0c:	d82a      	bhi.n	8004b64 <HAL_GPIO_Init+0xcc>
 8004b0e:	2b12      	cmp	r3, #18
 8004b10:	d859      	bhi.n	8004bc6 <HAL_GPIO_Init+0x12e>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <HAL_GPIO_Init+0x80>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b93 	.word	0x08004b93
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b7f 	.word	0x08004b7f
 8004b24:	08004bc1 	.word	0x08004bc1
 8004b28:	08004bc7 	.word	0x08004bc7
 8004b2c:	08004bc7 	.word	0x08004bc7
 8004b30:	08004bc7 	.word	0x08004bc7
 8004b34:	08004bc7 	.word	0x08004bc7
 8004b38:	08004bc7 	.word	0x08004bc7
 8004b3c:	08004bc7 	.word	0x08004bc7
 8004b40:	08004bc7 	.word	0x08004bc7
 8004b44:	08004bc7 	.word	0x08004bc7
 8004b48:	08004bc7 	.word	0x08004bc7
 8004b4c:	08004bc7 	.word	0x08004bc7
 8004b50:	08004bc7 	.word	0x08004bc7
 8004b54:	08004bc7 	.word	0x08004bc7
 8004b58:	08004bc7 	.word	0x08004bc7
 8004b5c:	08004b75 	.word	0x08004b75
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	4a75      	ldr	r2, [pc, #468]	; (8004d3c <HAL_GPIO_Init+0x2a4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004b6a:	e02c      	b.n	8004bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	623b      	str	r3, [r7, #32]
          break;
 8004b72:	e029      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	623b      	str	r3, [r7, #32]
          break;
 8004b7c:	e024      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	3308      	adds	r3, #8
 8004b84:	623b      	str	r3, [r7, #32]
          break;
 8004b86:	e01f      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	623b      	str	r3, [r7, #32]
          break;
 8004b90:	e01a      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004b9a:	2304      	movs	r3, #4
 8004b9c:	623b      	str	r3, [r7, #32]
          break;
 8004b9e:	e013      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004ba8:	2308      	movs	r3, #8
 8004baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	611a      	str	r2, [r3, #16]
          break;
 8004bb2:	e009      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	615a      	str	r2, [r3, #20]
          break;
 8004bbe:	e003      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	623b      	str	r3, [r7, #32]
          break;
 8004bc4:	e000      	b.n	8004bc8 <HAL_GPIO_Init+0x130>
          break;
 8004bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2bff      	cmp	r3, #255	; 0xff
 8004bcc:	d801      	bhi.n	8004bd2 <HAL_GPIO_Init+0x13a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	e001      	b.n	8004bd6 <HAL_GPIO_Init+0x13e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	2bff      	cmp	r3, #255	; 0xff
 8004bdc:	d802      	bhi.n	8004be4 <HAL_GPIO_Init+0x14c>
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	e002      	b.n	8004bea <HAL_GPIO_Init+0x152>
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	3b08      	subs	r3, #8
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	210f      	movs	r1, #15
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	6a39      	ldr	r1, [r7, #32]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	fa01 f303 	lsl.w	r3, r1, r3
 8004c04:	431a      	orrs	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80c1 	beq.w	8004d9a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004c18:	4b49      	ldr	r3, [pc, #292]	; (8004d40 <HAL_GPIO_Init+0x2a8>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	4a48      	ldr	r2, [pc, #288]	; (8004d40 <HAL_GPIO_Init+0x2a8>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6193      	str	r3, [r2, #24]
 8004c24:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <HAL_GPIO_Init+0x2a8>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004c30:	4a44      	ldr	r2, [pc, #272]	; (8004d44 <HAL_GPIO_Init+0x2ac>)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	3302      	adds	r3, #2
 8004c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	220f      	movs	r2, #15
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a3c      	ldr	r2, [pc, #240]	; (8004d48 <HAL_GPIO_Init+0x2b0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d01f      	beq.n	8004c9c <HAL_GPIO_Init+0x204>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a3b      	ldr	r2, [pc, #236]	; (8004d4c <HAL_GPIO_Init+0x2b4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d019      	beq.n	8004c98 <HAL_GPIO_Init+0x200>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a3a      	ldr	r2, [pc, #232]	; (8004d50 <HAL_GPIO_Init+0x2b8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d013      	beq.n	8004c94 <HAL_GPIO_Init+0x1fc>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a39      	ldr	r2, [pc, #228]	; (8004d54 <HAL_GPIO_Init+0x2bc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00d      	beq.n	8004c90 <HAL_GPIO_Init+0x1f8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <HAL_GPIO_Init+0x2c0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <HAL_GPIO_Init+0x1f4>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a37      	ldr	r2, [pc, #220]	; (8004d5c <HAL_GPIO_Init+0x2c4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <HAL_GPIO_Init+0x1f0>
 8004c84:	2305      	movs	r3, #5
 8004c86:	e00a      	b.n	8004c9e <HAL_GPIO_Init+0x206>
 8004c88:	2306      	movs	r3, #6
 8004c8a:	e008      	b.n	8004c9e <HAL_GPIO_Init+0x206>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	e006      	b.n	8004c9e <HAL_GPIO_Init+0x206>
 8004c90:	2303      	movs	r3, #3
 8004c92:	e004      	b.n	8004c9e <HAL_GPIO_Init+0x206>
 8004c94:	2302      	movs	r3, #2
 8004c96:	e002      	b.n	8004c9e <HAL_GPIO_Init+0x206>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_GPIO_Init+0x206>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca0:	f002 0203 	and.w	r2, r2, #3
 8004ca4:	0092      	lsls	r2, r2, #2
 8004ca6:	4093      	lsls	r3, r2
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004cae:	4925      	ldr	r1, [pc, #148]	; (8004d44 <HAL_GPIO_Init+0x2ac>)
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	089b      	lsrs	r3, r3, #2
 8004cb4:	3302      	adds	r3, #2
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	4924      	ldr	r1, [pc, #144]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]
 8004cd4:	e006      	b.n	8004ce4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	4920      	ldr	r1, [pc, #128]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d006      	beq.n	8004cfe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	491a      	ldr	r1, [pc, #104]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60cb      	str	r3, [r1, #12]
 8004cfc:	e006      	b.n	8004d0c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004cfe:	4b18      	ldr	r3, [pc, #96]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	43db      	mvns	r3, r3
 8004d06:	4916      	ldr	r1, [pc, #88]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d025      	beq.n	8004d64 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004d18:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	4910      	ldr	r1, [pc, #64]	; (8004d60 <HAL_GPIO_Init+0x2c8>)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	e025      	b.n	8004d72 <HAL_GPIO_Init+0x2da>
 8004d26:	bf00      	nop
 8004d28:	10320000 	.word	0x10320000
 8004d2c:	10310000 	.word	0x10310000
 8004d30:	10220000 	.word	0x10220000
 8004d34:	10210000 	.word	0x10210000
 8004d38:	10120000 	.word	0x10120000
 8004d3c:	10110000 	.word	0x10110000
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40010000 	.word	0x40010000
 8004d48:	40010800 	.word	0x40010800
 8004d4c:	40010c00 	.word	0x40010c00
 8004d50:	40011000 	.word	0x40011000
 8004d54:	40011400 	.word	0x40011400
 8004d58:	40011800 	.word	0x40011800
 8004d5c:	40011c00 	.word	0x40011c00
 8004d60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d64:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	4913      	ldr	r1, [pc, #76]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d006      	beq.n	8004d8c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	490e      	ldr	r1, [pc, #56]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	600b      	str	r3, [r1, #0]
 8004d8a:	e006      	b.n	8004d9a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	4909      	ldr	r1, [pc, #36]	; (8004dbc <HAL_GPIO_Init+0x324>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f47f ae7e 	bne.w	8004aac <HAL_GPIO_Init+0x14>
  }
}
 8004db0:	bf00      	nop
 8004db2:	bf00      	nop
 8004db4:	372c      	adds	r7, #44	; 0x2c
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	887b      	ldrh	r3, [r7, #2]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	e001      	b.n	8004de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	807b      	strh	r3, [r7, #2]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dfe:	787b      	ldrb	r3, [r7, #1]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e04:	887a      	ldrh	r2, [r7, #2]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004e0a:	e003      	b.n	8004e14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	041a      	lsls	r2, r3, #16
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	611a      	str	r2, [r3, #16]
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e36:	4a05      	ldr	r2, [pc, #20]	; (8004e4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e38:	88fb      	ldrh	r3, [r7, #6]
 8004e3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc fedc 	bl	8001bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40010400 	.word	0x40010400

08004e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e12b      	b.n	80050ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fe f81c 	bl	8002eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eb4:	f002 fa32 	bl	800731c <HAL_RCC_GetPCLK1Freq>
 8004eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4a81      	ldr	r2, [pc, #516]	; (80050c4 <HAL_I2C_Init+0x274>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d807      	bhi.n	8004ed4 <HAL_I2C_Init+0x84>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a80      	ldr	r2, [pc, #512]	; (80050c8 <HAL_I2C_Init+0x278>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	bf94      	ite	ls
 8004ecc:	2301      	movls	r3, #1
 8004ece:	2300      	movhi	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	e006      	b.n	8004ee2 <HAL_I2C_Init+0x92>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4a7d      	ldr	r2, [pc, #500]	; (80050cc <HAL_I2C_Init+0x27c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	bf94      	ite	ls
 8004edc:	2301      	movls	r3, #1
 8004ede:	2300      	movhi	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0e7      	b.n	80050ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a78      	ldr	r2, [pc, #480]	; (80050d0 <HAL_I2C_Init+0x280>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	0c9b      	lsrs	r3, r3, #18
 8004ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a6a      	ldr	r2, [pc, #424]	; (80050c4 <HAL_I2C_Init+0x274>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d802      	bhi.n	8004f24 <HAL_I2C_Init+0xd4>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3301      	adds	r3, #1
 8004f22:	e009      	b.n	8004f38 <HAL_I2C_Init+0xe8>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	4a69      	ldr	r2, [pc, #420]	; (80050d4 <HAL_I2C_Init+0x284>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	099b      	lsrs	r3, r3, #6
 8004f36:	3301      	adds	r3, #1
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	495c      	ldr	r1, [pc, #368]	; (80050c4 <HAL_I2C_Init+0x274>)
 8004f54:	428b      	cmp	r3, r1
 8004f56:	d819      	bhi.n	8004f8c <HAL_I2C_Init+0x13c>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	1e59      	subs	r1, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f6c:	400b      	ands	r3, r1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_I2C_Init+0x138>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1e59      	subs	r1, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f80:	3301      	adds	r3, #1
 8004f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f86:	e051      	b.n	800502c <HAL_I2C_Init+0x1dc>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	e04f      	b.n	800502c <HAL_I2C_Init+0x1dc>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d111      	bne.n	8004fb8 <HAL_I2C_Init+0x168>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	1e58      	subs	r0, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	440b      	add	r3, r1
 8004fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e012      	b.n	8004fde <HAL_I2C_Init+0x18e>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1e58      	subs	r0, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6859      	ldr	r1, [r3, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	0099      	lsls	r1, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <HAL_I2C_Init+0x196>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e022      	b.n	800502c <HAL_I2C_Init+0x1dc>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10e      	bne.n	800500c <HAL_I2C_Init+0x1bc>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1e58      	subs	r0, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	440b      	add	r3, r1
 8004ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005000:	3301      	adds	r3, #1
 8005002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	e00f      	b.n	800502c <HAL_I2C_Init+0x1dc>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	1e58      	subs	r0, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6859      	ldr	r1, [r3, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	440b      	add	r3, r1
 800501a:	0099      	lsls	r1, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005022:	3301      	adds	r3, #1
 8005024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	6809      	ldr	r1, [r1, #0]
 8005030:	4313      	orrs	r3, r2
 8005032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69da      	ldr	r2, [r3, #28]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800505a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6911      	ldr	r1, [r2, #16]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68d2      	ldr	r2, [r2, #12]
 8005066:	4311      	orrs	r1, r2
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	430b      	orrs	r3, r1
 800506e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695a      	ldr	r2, [r3, #20]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	000186a0 	.word	0x000186a0
 80050c8:	001e847f 	.word	0x001e847f
 80050cc:	003d08ff 	.word	0x003d08ff
 80050d0:	431bde83 	.word	0x431bde83
 80050d4:	10624dd3 	.word	0x10624dd3

080050d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050da:	b08b      	sub	sp, #44	; 0x2c
 80050dc:	af06      	add	r7, sp, #24
 80050de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e0f1      	b.n	80052ce <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f00b fec8 	bl	8010e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2203      	movs	r2, #3
 8005108:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f005 f8cd 	bl	800a2b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	687e      	ldr	r6, [r7, #4]
 800511e:	466d      	mov	r5, sp
 8005120:	f106 0410 	add.w	r4, r6, #16
 8005124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	1d33      	adds	r3, r6, #4
 800512e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005130:	6838      	ldr	r0, [r7, #0]
 8005132:	f005 f897 	bl	800a264 <USB_CoreInit>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0c2      	b.n	80052ce <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f005 f8c8 	bl	800a2e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005154:	2300      	movs	r3, #0
 8005156:	73fb      	strb	r3, [r7, #15]
 8005158:	e040      	b.n	80051dc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	440b      	add	r3, r1
 800516a:	3301      	adds	r3, #1
 800516c:	2201      	movs	r2, #1
 800516e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	4613      	mov	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	440b      	add	r3, r1
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	3303      	adds	r3, #3
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800519a:	7bfa      	ldrb	r2, [r7, #15]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	3338      	adds	r3, #56	; 0x38
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	440b      	add	r3, r1
 80051bc:	333c      	adds	r3, #60	; 0x3c
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	3340      	adds	r3, #64	; 0x40
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	3301      	adds	r3, #1
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d3b9      	bcc.n	800515a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
 80051ea:	e044      	b.n	8005276 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051ec:	7bfa      	ldrb	r2, [r7, #15]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	440b      	add	r3, r1
 80051fa:	f203 1369 	addw	r3, r3, #361	; 0x169
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005202:	7bfa      	ldrb	r2, [r7, #15]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	440b      	add	r3, r1
 8005210:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005214:	7bfa      	ldrb	r2, [r7, #15]
 8005216:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005218:	7bfa      	ldrb	r2, [r7, #15]
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800522a:	2200      	movs	r2, #0
 800522c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800522e:	7bfa      	ldrb	r2, [r7, #15]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	440b      	add	r3, r1
 8005252:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800525a:	7bfa      	ldrb	r2, [r7, #15]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	440b      	add	r3, r1
 8005268:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	3301      	adds	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d3b5      	bcc.n	80051ec <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	687e      	ldr	r6, [r7, #4]
 8005288:	466d      	mov	r5, sp
 800528a:	f106 0410 	add.w	r4, r6, #16
 800528e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	602b      	str	r3, [r5, #0]
 8005296:	1d33      	adds	r3, r6, #4
 8005298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800529a:	6838      	ldr	r0, [r7, #0]
 800529c:	f005 f82e 	bl	800a2fc <USB_DevInit>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e00d      	b.n	80052ce <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f007 faaf 	bl	800c82a <USB_DevDisconnect>

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_PCD_Start+0x16>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e016      	b.n	800531a <HAL_PCD_Start+0x44>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f004 ffc3 	bl	800a284 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80052fe:	2101      	movs	r1, #1
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f00c f816 	bl	8011332 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f007 fa83 	bl	800c816 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b088      	sub	sp, #32
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f007 fa85 	bl	800c83e <USB_ReadInterrupts>
 8005334:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fb04 	bl	800594e <PCD_EP_ISR_Handler>

    return;
 8005346:	e119      	b.n	800557c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534e:	2b00      	cmp	r3, #0
 8005350:	d013      	beq.n	800537a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005364:	b292      	uxth	r2, r2
 8005366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f00b fe0d 	bl	8010f8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005370:	2100      	movs	r1, #0
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f905 	bl	8005582 <HAL_PCD_SetAddress>

    return;
 8005378:	e100      	b.n	800557c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00c      	beq.n	800539e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005396:	b292      	uxth	r2, r2
 8005398:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800539c:	e0ee      	b.n	800557c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00c      	beq.n	80053c2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ba:	b292      	uxth	r2, r2
 80053bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80053c0:	e0dc      	b.n	800557c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d027      	beq.n	800541c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0204 	bic.w	r2, r2, #4
 80053de:	b292      	uxth	r2, r2
 80053e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0208 	bic.w	r2, r2, #8
 80053f6:	b292      	uxth	r2, r2
 80053f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f00b fdfd 	bl	8010ffc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005414:	b292      	uxth	r2, r2
 8005416:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800541a:	e0af      	b.n	800557c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8083 	beq.w	800552e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e010      	b.n	8005450 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	7ffb      	ldrb	r3, [r7, #31]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	b292      	uxth	r2, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	3320      	adds	r3, #32
 8005444:	443b      	add	r3, r7
 8005446:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800544a:	7ffb      	ldrb	r3, [r7, #31]
 800544c:	3301      	adds	r3, #1
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	2b07      	cmp	r3, #7
 8005454:	d9eb      	bls.n	800542e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	b292      	uxth	r2, r2
 800546a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	b292      	uxth	r2, r2
 8005482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005486:	bf00      	nop
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005490:	b29b      	uxth	r3, r3
 8005492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f6      	beq.n	8005488 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ac:	b292      	uxth	r2, r2
 80054ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80054b2:	2300      	movs	r3, #0
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	e00f      	b.n	80054d8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80054b8:	7ffb      	ldrb	r3, [r7, #31]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	4611      	mov	r1, r2
 80054c0:	7ffa      	ldrb	r2, [r7, #31]
 80054c2:	0092      	lsls	r2, r2, #2
 80054c4:	440a      	add	r2, r1
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	3320      	adds	r3, #32
 80054ca:	443b      	add	r3, r7
 80054cc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80054d0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80054d2:	7ffb      	ldrb	r3, [r7, #31]
 80054d4:	3301      	adds	r3, #1
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	7ffb      	ldrb	r3, [r7, #31]
 80054da:	2b07      	cmp	r3, #7
 80054dc:	d9ec      	bls.n	80054b8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	b292      	uxth	r2, r2
 80054f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005508:	b292      	uxth	r2, r2
 800550a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005516:	b29a      	uxth	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0204 	orr.w	r2, r2, #4
 8005520:	b292      	uxth	r2, r2
 8005522:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f00b fd4e 	bl	8010fc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800552c:	e026      	b.n	800557c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00f      	beq.n	8005558 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800554a:	b292      	uxth	r2, r2
 800554c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f00b fd0c 	bl	8010f6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005556:	e011      	b.n	800557c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005574:	b292      	uxth	r2, r2
 8005576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800557a:	bf00      	nop
  }
}
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_PCD_SetAddress+0x1a>
 8005598:	2302      	movs	r3, #2
 800559a:	e013      	b.n	80055c4 <HAL_PCD_SetAddress+0x42>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	4611      	mov	r1, r2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f007 f91b 	bl	800c7f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	70fb      	strb	r3, [r7, #3]
 80055de:	460b      	mov	r3, r1
 80055e0:	803b      	strh	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da0e      	bge.n	8005610 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	705a      	strb	r2, [r3, #1]
 800560e:	e00e      	b.n	800562e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005610:	78fb      	ldrb	r3, [r7, #3]
 8005612:	f003 0207 	and.w	r2, r3, #7
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800562e:	78fb      	ldrb	r3, [r7, #3]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800563a:	883a      	ldrh	r2, [r7, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	78ba      	ldrb	r2, [r7, #2]
 8005644:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005646:	78bb      	ldrb	r3, [r7, #2]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d102      	bne.n	8005652 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_PCD_EP_Open+0x94>
 800565c:	2302      	movs	r3, #2
 800565e:	e00e      	b.n	800567e <HAL_PCD_EP_Open+0xb2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68f9      	ldr	r1, [r7, #12]
 800566e:	4618      	mov	r0, r3
 8005670:	f004 fe64 	bl	800a33c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800567c:	7afb      	ldrb	r3, [r7, #11]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005696:	2b00      	cmp	r3, #0
 8005698:	da0e      	bge.n	80056b8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800569a:	78fb      	ldrb	r3, [r7, #3]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	705a      	strb	r2, [r3, #1]
 80056b6:	e00e      	b.n	80056d6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	f003 0207 	and.w	r2, r3, #7
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_PCD_EP_Close+0x6a>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e00e      	b.n	800570e <HAL_PCD_EP_Close+0x88>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68f9      	ldr	r1, [r7, #12]
 80056fe:	4618      	mov	r0, r3
 8005700:	f005 f9dc 	bl	800aabc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	460b      	mov	r3, r1
 8005724:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	f003 0207 	and.w	r2, r3, #7
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2200      	movs	r2, #0
 800574e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005756:	7afb      	ldrb	r3, [r7, #11]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	b2da      	uxtb	r2, r3
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6979      	ldr	r1, [r7, #20]
 8005768:	4618      	mov	r0, r3
 800576a:	f005 fb93 	bl	800ae94 <USB_EPStartXfer>

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	460b      	mov	r3, r1
 8005786:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005788:	7afb      	ldrb	r3, [r7, #11]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	4613      	mov	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2200      	movs	r2, #0
 80057bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2201      	movs	r2, #1
 80057c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057c4:	7afb      	ldrb	r3, [r7, #11]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f005 fb5c 	bl	800ae94 <USB_EPStartXfer>

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f003 0207 	and.w	r2, r3, #7
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d901      	bls.n	8005804 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e04c      	b.n	800589e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	da0e      	bge.n	800582a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	705a      	strb	r2, [r3, #1]
 8005828:	e00c      	b.n	8005844 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4413      	add	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_PCD_EP_SetStall+0x7e>
 8005860:	2302      	movs	r3, #2
 8005862:	e01c      	b.n	800589e <HAL_PCD_EP_SetStall+0xb8>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68f9      	ldr	r1, [r7, #12]
 8005872:	4618      	mov	r0, r3
 8005874:	f006 febf 	bl	800c5f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	2b00      	cmp	r3, #0
 8005880:	d108      	bne.n	8005894 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f006 ffe4 	bl	800c85c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d901      	bls.n	80058c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e040      	b.n	8005946 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	da0e      	bge.n	80058ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	f003 0307 	and.w	r3, r3, #7
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	4413      	add	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	705a      	strb	r2, [r3, #1]
 80058e8:	e00e      	b.n	8005908 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	f003 0207 	and.w	r2, r3, #7
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4413      	add	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	f003 0307 	and.w	r3, r3, #7
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_PCD_EP_ClrStall+0x82>
 8005924:	2302      	movs	r3, #2
 8005926:	e00e      	b.n	8005946 <HAL_PCD_EP_ClrStall+0xa0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	4618      	mov	r0, r3
 8005938:	f006 fead 	bl	800c696 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b096      	sub	sp, #88	; 0x58
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005956:	e3bf      	b.n	80060d8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005960:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005964:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005972:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 8179 	bne.w	8005c6e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800597c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b00      	cmp	r3, #0
 8005986:	d152      	bne.n	8005a2e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005998:	81fb      	strh	r3, [r7, #14]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3328      	adds	r3, #40	; 0x28
 80059b0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	3302      	adds	r3, #2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80059da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80059de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	441a      	add	r2, r3
 80059e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80059ec:	2100      	movs	r1, #0
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f00b faa3 	bl	8010f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 836b 	beq.w	80060d8 <PCD_EP_ISR_Handler+0x78a>
 8005a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f040 8366 	bne.w	80060d8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	b292      	uxth	r2, r2
 8005a20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005a2c:	e354      	b.n	80060d8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005a34:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005a40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d034      	beq.n	8005ab6 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	3306      	adds	r3, #6
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6812      	ldr	r2, [r2, #0]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f006 ff36 	bl	800c8fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	881b      	ldrh	r3, [r3, #0]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	823b      	strh	r3, [r7, #16]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	8a3a      	ldrh	r2, [r7, #16]
 8005aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f00b fa16 	bl	8010ee0 <HAL_PCD_SetupStageCallback>
 8005ab4:	e310      	b.n	80060d8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005ab6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f280 830c 	bge.w	80060d8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005acc:	4013      	ands	r3, r2
 8005ace:	83fb      	strh	r3, [r7, #30]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	8bfa      	ldrh	r2, [r7, #30]
 8005ad6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ada:	b292      	uxth	r2, r2
 8005adc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	4413      	add	r3, r2
 8005af2:	3306      	adds	r3, #6
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d019      	beq.n	8005b46 <PCD_EP_ISR_Handler+0x1f8>
 8005b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d015      	beq.n	8005b46 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b20:	6959      	ldr	r1, [r3, #20]
 8005b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f006 fee6 	bl	800c8fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	441a      	add	r2, r3
 8005b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005b3e:	2100      	movs	r1, #0
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f00b f9df 	bl	8010f04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005b50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f040 82bd 	bne.w	80060d8 <PCD_EP_ISR_Handler+0x78a>
 8005b5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6a:	f000 82b5 	beq.w	80060d8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	4413      	add	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba4:	d91d      	bls.n	8005be2 <PCD_EP_ISR_Handler+0x294>
 8005ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	647b      	str	r3, [r7, #68]	; 0x44
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <PCD_EP_ISR_Handler+0x272>
 8005bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	029b      	lsls	r3, r3, #10
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e026      	b.n	8005c30 <PCD_EP_ISR_Handler+0x2e2>
 8005be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <PCD_EP_ISR_Handler+0x2b2>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e017      	b.n	8005c30 <PCD_EP_ISR_Handler+0x2e2>
 8005c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	647b      	str	r3, [r7, #68]	; 0x44
 8005c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <PCD_EP_ISR_Handler+0x2cc>
 8005c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c16:	3301      	adds	r3, #1
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	029b      	lsls	r3, r3, #10
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c40:	827b      	strh	r3, [r7, #18]
 8005c42:	8a7b      	ldrh	r3, [r7, #18]
 8005c44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c48:	827b      	strh	r3, [r7, #18]
 8005c4a:	8a7b      	ldrh	r3, [r7, #18]
 8005c4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c50:	827b      	strh	r3, [r7, #18]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	8a7b      	ldrh	r3, [r7, #18]
 8005c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	8013      	strh	r3, [r2, #0]
 8005c6c:	e234      	b.n	80060d8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005c82:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f280 80fc 	bge.w	8005e84 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	461a      	mov	r2, r3
 8005c92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005cc2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cda:	7b1b      	ldrb	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d125      	bne.n	8005d2c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3306      	adds	r3, #6
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d08:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005d0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8092 	beq.w	8005e3a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d1c:	6959      	ldr	r1, [r3, #20]
 8005d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d20:	88da      	ldrh	r2, [r3, #6]
 8005d22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005d26:	f006 fde9 	bl	800c8fc <USB_ReadPMA>
 8005d2a:	e086      	b.n	8005e3a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2e:	78db      	ldrb	r3, [r3, #3]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d10a      	bne.n	8005d4a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005d34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f9d9 	bl	80060f4 <HAL_PCD_EP_DB_Receive>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005d48:	e077      	b.n	8005e3a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d64:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d024      	beq.n	8005df2 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4413      	add	r3, r2
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dd0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005dd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02e      	beq.n	8005e3a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de2:	6959      	ldr	r1, [r3, #20]
 8005de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de6:	891a      	ldrh	r2, [r3, #8]
 8005de8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005dec:	f006 fd86 	bl	800c8fc <USB_ReadPMA>
 8005df0:	e023      	b.n	8005e3a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	3306      	adds	r3, #6
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e1a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005e1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d009      	beq.n	8005e3a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e2c:	6959      	ldr	r1, [r3, #20]
 8005e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e30:	895a      	ldrh	r2, [r3, #10]
 8005e32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e36:	f006 fd61 	bl	800c8fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e3c:	69da      	ldr	r2, [r3, #28]
 8005e3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e42:	441a      	add	r2, r3
 8005e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e46:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005e50:	441a      	add	r2, r3
 8005e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e54:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <PCD_EP_ISR_Handler+0x51c>
 8005e5e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d206      	bcs.n	8005e78 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f00b f847 	bl	8010f04 <HAL_PCD_DataOutStageCallback>
 8005e76:	e005      	b.n	8005e84 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f005 f808 	bl	800ae94 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8123 	beq.w	80060d8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8005e92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee4:	78db      	ldrb	r3, [r3, #3]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	f040 80a2 	bne.w	8006030 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8005eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eee:	2200      	movs	r2, #0
 8005ef0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef4:	7b1b      	ldrb	r3, [r3, #12]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8093 	beq.w	8006022 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005efc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d046      	beq.n	8005f96 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d126      	bne.n	8005f5e <PCD_EP_ISR_Handler+0x610>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	627b      	str	r3, [r7, #36]	; 0x24
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	4413      	add	r3, r2
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
 8005f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	011a      	lsls	r2, r3, #4
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	4413      	add	r3, r2
 8005f32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	6a3b      	ldr	r3, [r7, #32]
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	e061      	b.n	8006022 <PCD_EP_ISR_Handler+0x6d4>
 8005f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d15d      	bne.n	8006022 <PCD_EP_ISR_Handler+0x6d4>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	4413      	add	r3, r2
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	011a      	lsls	r2, r3, #4
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	4413      	add	r3, r2
 8005f88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2200      	movs	r2, #0
 8005f92:	801a      	strh	r2, [r3, #0]
 8005f94:	e045      	b.n	8006022 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d126      	bne.n	8005ff2 <PCD_EP_ISR_Handler+0x6a4>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb8:	4413      	add	r3, r2
 8005fba:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	011a      	lsls	r2, r3, #4
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	e017      	b.n	8006022 <PCD_EP_ISR_Handler+0x6d4>
 8005ff2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d113      	bne.n	8006022 <PCD_EP_ISR_Handler+0x6d4>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006002:	b29b      	uxth	r3, r3
 8006004:	461a      	mov	r2, r3
 8006006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006008:	4413      	add	r3, r2
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800600c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	011a      	lsls	r2, r3, #4
 8006012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006014:	4413      	add	r3, r2
 8006016:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800601a:	63bb      	str	r3, [r7, #56]	; 0x38
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	2200      	movs	r2, #0
 8006020:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f00a ff86 	bl	8010f3a <HAL_PCD_DataInStageCallback>
 800602e:	e053      	b.n	80060d8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006030:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d146      	bne.n	80060ca <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006044:	b29b      	uxth	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4413      	add	r3, r2
 8006050:	3302      	adds	r3, #2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6812      	ldr	r2, [r2, #0]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006064:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006070:	429a      	cmp	r2, r3
 8006072:	d907      	bls.n	8006084 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8006074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800607c:	1ad2      	subs	r2, r2, r3
 800607e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006080:	619a      	str	r2, [r3, #24]
 8006082:	e002      	b.n	800608a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8006084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006086:	2200      	movs	r2, #0
 8006088:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800608a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d106      	bne.n	80060a0 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f00a ff4e 	bl	8010f3a <HAL_PCD_DataInStageCallback>
 800609e:	e01b      	b.n	80060d8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80060a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060a8:	441a      	add	r2, r3
 80060aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ac:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80060ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060b6:	441a      	add	r2, r3
 80060b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ba:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060c2:	4618      	mov	r0, r3
 80060c4:	f004 fee6 	bl	800ae94 <USB_EPStartXfer>
 80060c8:	e006      	b.n	80060d8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80060ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060ce:	461a      	mov	r2, r3
 80060d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f91b 	bl	800630e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	b21b      	sxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f6ff ac37 	blt.w	8005958 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3758      	adds	r7, #88	; 0x58
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d07e      	beq.n	800620a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006114:	b29b      	uxth	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4413      	add	r3, r2
 8006120:	3302      	adds	r3, #2
 8006122:	005b      	lsls	r3, r3, #1
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006134:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	699a      	ldr	r2, [r3, #24]
 800613a:	8b7b      	ldrh	r3, [r7, #26]
 800613c:	429a      	cmp	r2, r3
 800613e:	d306      	bcc.n	800614e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	699a      	ldr	r2, [r3, #24]
 8006144:	8b7b      	ldrh	r3, [r7, #26]
 8006146:	1ad2      	subs	r2, r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	619a      	str	r2, [r3, #24]
 800614c:	e002      	b.n	8006154 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2200      	movs	r2, #0
 8006152:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d123      	bne.n	80061a4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	833b      	strh	r3, [r7, #24]
 8006178:	8b3b      	ldrh	r3, [r7, #24]
 800617a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800617e:	833b      	strh	r3, [r7, #24]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	8b3b      	ldrh	r3, [r7, #24]
 8006190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061a4:	88fb      	ldrh	r3, [r7, #6]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01f      	beq.n	80061ee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	82fb      	strh	r3, [r7, #22]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	8afb      	ldrh	r3, [r7, #22]
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80061ee:	8b7b      	ldrh	r3, [r7, #26]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8087 	beq.w	8006304 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6959      	ldr	r1, [r3, #20]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	891a      	ldrh	r2, [r3, #8]
 8006202:	8b7b      	ldrh	r3, [r7, #26]
 8006204:	f006 fb7a 	bl	800c8fc <USB_ReadPMA>
 8006208:	e07c      	b.n	8006304 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006212:	b29b      	uxth	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	3306      	adds	r3, #6
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006232:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	8b7b      	ldrh	r3, [r7, #26]
 800623a:	429a      	cmp	r2, r3
 800623c:	d306      	bcc.n	800624c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	8b7b      	ldrh	r3, [r7, #26]
 8006244:	1ad2      	subs	r2, r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	619a      	str	r2, [r3, #24]
 800624a:	e002      	b.n	8006252 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d123      	bne.n	80062a2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	83fb      	strh	r3, [r7, #30]
 8006276:	8bfb      	ldrh	r3, [r7, #30]
 8006278:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800627c:	83fb      	strh	r3, [r7, #30]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	441a      	add	r2, r3
 800628c:	8bfb      	ldrh	r3, [r7, #30]
 800628e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	b29b      	uxth	r3, r3
 80062a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11f      	bne.n	80062ec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	83bb      	strh	r3, [r7, #28]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	461a      	mov	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	441a      	add	r2, r3
 80062d6:	8bbb      	ldrh	r3, [r7, #28]
 80062d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80062ec:	8b7b      	ldrh	r3, [r7, #26]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6959      	ldr	r1, [r3, #20]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	895a      	ldrh	r2, [r3, #10]
 80062fe:	8b7b      	ldrh	r3, [r7, #26]
 8006300:	f006 fafc 	bl	800c8fc <USB_ReadPMA>
    }
  }

  return count;
 8006304:	8b7b      	ldrh	r3, [r7, #26]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b0a4      	sub	sp, #144	; 0x90
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	4613      	mov	r3, r2
 800631a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 81dd 	beq.w	80066e2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006330:	b29b      	uxth	r3, r3
 8006332:	461a      	mov	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	4413      	add	r3, r2
 800633c:	3302      	adds	r3, #2
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006350:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800635c:	429a      	cmp	r2, r3
 800635e:	d907      	bls.n	8006370 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	699a      	ldr	r2, [r3, #24]
 8006364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006368:	1ad2      	subs	r2, r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	619a      	str	r2, [r3, #24]
 800636e:	e002      	b.n	8006376 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2200      	movs	r2, #0
 8006374:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 80b9 	bne.w	80064f2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d126      	bne.n	80063d6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006396:	b29b      	uxth	r3, r3
 8006398:	461a      	mov	r2, r3
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	4413      	add	r3, r2
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	011a      	lsls	r2, r3, #4
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	4413      	add	r3, r2
 80063aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e01a      	b.n	800640c <HAL_PCD_EP_DB_Transmit+0xfe>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d116      	bne.n	800640c <HAL_PCD_EP_DB_Transmit+0xfe>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f2:	4413      	add	r3, r2
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	011a      	lsls	r2, r3, #4
 80063fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fe:	4413      	add	r3, r2
 8006400:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	2200      	movs	r2, #0
 800640a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d126      	bne.n	8006468 <HAL_PCD_EP_DB_Transmit+0x15a>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	011a      	lsls	r2, r3, #4
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006440:	61bb      	str	r3, [r7, #24]
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800644c:	b29a      	uxth	r2, r3
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006460:	b29a      	uxth	r2, r3
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e017      	b.n	8006498 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d113      	bne.n	8006498 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	4413      	add	r3, r2
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011a      	lsls	r2, r3, #4
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	4413      	add	r3, r2
 800648c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2200      	movs	r2, #0
 8006496:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	4619      	mov	r1, r3
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f00a fd4b 	bl	8010f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 82fc 	beq.w	8006aa8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	82fb      	strh	r3, [r7, #22]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	8013      	strh	r3, [r2, #0]
 80064f0:	e2da      	b.n	8006aa8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80064f2:	88fb      	ldrh	r3, [r7, #6]
 80064f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d021      	beq.n	8006540 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006516:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006546:	2b01      	cmp	r3, #1
 8006548:	f040 82ae 	bne.w	8006aa8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	695a      	ldr	r2, [r3, #20]
 8006550:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006554:	441a      	add	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	69da      	ldr	r2, [r3, #28]
 800655e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006562:	441a      	add	r2, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	429a      	cmp	r2, r3
 8006572:	d30b      	bcc.n	800658c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6a1a      	ldr	r2, [r3, #32]
 8006580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006584:	1ad2      	subs	r2, r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	621a      	str	r2, [r3, #32]
 800658a:	e017      	b.n	80065bc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d108      	bne.n	80065a6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8006594:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065a4:	e00a      	b.n	80065bc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2200      	movs	r2, #0
 80065ba:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	785b      	ldrb	r3, [r3, #1]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d165      	bne.n	8006690 <HAL_PCD_EP_DB_Transmit+0x382>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	4413      	add	r3, r2
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	011a      	lsls	r2, r3, #4
 80065e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e4:	4413      	add	r3, r2
 80065e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	801a      	strh	r2, [r3, #0]
 80065fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006600:	2b3e      	cmp	r3, #62	; 0x3e
 8006602:	d91d      	bls.n	8006640 <HAL_PCD_EP_DB_Transmit+0x332>
 8006604:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006608:	095b      	lsrs	r3, r3, #5
 800660a:	64bb      	str	r3, [r7, #72]	; 0x48
 800660c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <HAL_PCD_EP_DB_Transmit+0x310>
 8006618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661a:	3b01      	subs	r3, #1
 800661c:	64bb      	str	r3, [r7, #72]	; 0x48
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29a      	uxth	r2, r3
 8006624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006626:	b29b      	uxth	r3, r3
 8006628:	029b      	lsls	r3, r3, #10
 800662a:	b29b      	uxth	r3, r3
 800662c:	4313      	orrs	r3, r2
 800662e:	b29b      	uxth	r3, r3
 8006630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006638:	b29a      	uxth	r2, r3
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	e044      	b.n	80066ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <HAL_PCD_EP_DB_Transmit+0x350>
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	881b      	ldrh	r3, [r3, #0]
 800664c:	b29b      	uxth	r3, r3
 800664e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006652:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006656:	b29a      	uxth	r2, r3
 8006658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e035      	b.n	80066ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 800665e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
 8006666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_PCD_EP_DB_Transmit+0x36a>
 8006672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006674:	3301      	adds	r3, #1
 8006676:	64bb      	str	r3, [r7, #72]	; 0x48
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29a      	uxth	r2, r3
 800667e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006680:	b29b      	uxth	r3, r3
 8006682:	029b      	lsls	r3, r3, #10
 8006684:	b29b      	uxth	r3, r3
 8006686:	4313      	orrs	r3, r2
 8006688:	b29a      	uxth	r2, r3
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e01c      	b.n	80066ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	785b      	ldrb	r3, [r3, #1]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d118      	bne.n	80066ca <HAL_PCD_EP_DB_Transmit+0x3bc>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	647b      	str	r3, [r7, #68]	; 0x44
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ac:	4413      	add	r3, r2
 80066ae:	647b      	str	r3, [r7, #68]	; 0x44
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	011a      	lsls	r2, r3, #4
 80066b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066be:	643b      	str	r3, [r7, #64]	; 0x40
 80066c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	6959      	ldr	r1, [r3, #20]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	891a      	ldrh	r2, [r3, #8]
 80066d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f006 f8c9 	bl	800c872 <USB_WritePMA>
 80066e0:	e1e2      	b.n	8006aa8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4413      	add	r3, r2
 80066f6:	3306      	adds	r3, #6
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800670a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006716:	429a      	cmp	r2, r3
 8006718:	d307      	bcc.n	800672a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	699a      	ldr	r2, [r3, #24]
 800671e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	619a      	str	r2, [r3, #24]
 8006728:	e002      	b.n	8006730 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 80c0 	bne.w	80068ba <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d126      	bne.n	8006790 <HAL_PCD_EP_DB_Transmit+0x482>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006750:	b29b      	uxth	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006756:	4413      	add	r3, r2
 8006758:	67fb      	str	r3, [r7, #124]	; 0x7c
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	011a      	lsls	r2, r3, #4
 8006760:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006762:	4413      	add	r3, r2
 8006764:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006768:	67bb      	str	r3, [r7, #120]	; 0x78
 800676a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006774:	b29a      	uxth	r2, r3
 8006776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	b29b      	uxth	r3, r3
 8006780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006788:	b29a      	uxth	r2, r3
 800678a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800678c:	801a      	strh	r2, [r3, #0]
 800678e:	e01a      	b.n	80067c6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	785b      	ldrb	r3, [r3, #1]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d116      	bne.n	80067c6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	667b      	str	r3, [r7, #100]	; 0x64
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	461a      	mov	r2, r3
 80067aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ac:	4413      	add	r3, r2
 80067ae:	667b      	str	r3, [r7, #100]	; 0x64
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	011a      	lsls	r2, r3, #4
 80067b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067b8:	4413      	add	r3, r2
 80067ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067be:	663b      	str	r3, [r7, #96]	; 0x60
 80067c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067c2:	2200      	movs	r2, #0
 80067c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	677b      	str	r3, [r7, #116]	; 0x74
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d12b      	bne.n	800682c <HAL_PCD_EP_DB_Transmit+0x51e>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	461a      	mov	r2, r3
 80067e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e8:	4413      	add	r3, r2
 80067ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	011a      	lsls	r2, r3, #4
 80067f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800680a:	b29a      	uxth	r2, r3
 800680c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006810:	801a      	strh	r2, [r3, #0]
 8006812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	e017      	b.n	800685c <HAL_PCD_EP_DB_Transmit+0x54e>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d113      	bne.n	800685c <HAL_PCD_EP_DB_Transmit+0x54e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800683c:	b29b      	uxth	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006842:	4413      	add	r3, r2
 8006844:	677b      	str	r3, [r7, #116]	; 0x74
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	011a      	lsls	r2, r3, #4
 800684c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800684e:	4413      	add	r3, r2
 8006850:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006854:	673b      	str	r3, [r7, #112]	; 0x70
 8006856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006858:	2200      	movs	r2, #0
 800685a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	4619      	mov	r1, r3
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f00a fb69 	bl	8010f3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800686e:	2b00      	cmp	r3, #0
 8006870:	f040 811a 	bne.w	8006aa8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	441a      	add	r2, r3
 80068a0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]
 80068b8:	e0f6      	b.n	8006aa8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d121      	bne.n	8006908 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80068f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006904:	b29b      	uxth	r3, r3
 8006906:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800690e:	2b01      	cmp	r3, #1
 8006910:	f040 80ca 	bne.w	8006aa8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800691c:	441a      	add	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	69da      	ldr	r2, [r3, #28]
 8006926:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800692a:	441a      	add	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	429a      	cmp	r2, r3
 800693a:	d30b      	bcc.n	8006954 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6a1a      	ldr	r2, [r3, #32]
 8006948:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800694c:	1ad2      	subs	r2, r2, r3
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	621a      	str	r2, [r3, #32]
 8006952:	e017      	b.n	8006984 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d108      	bne.n	800696e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800695c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800696c:	e00a      	b.n	8006984 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2200      	movs	r2, #0
 800697a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	657b      	str	r3, [r7, #84]	; 0x54
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	785b      	ldrb	r3, [r3, #1]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d165      	bne.n	8006a5e <HAL_PCD_EP_DB_Transmit+0x750>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069a6:	4413      	add	r3, r2
 80069a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	011a      	lsls	r2, r3, #4
 80069b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b2:	4413      	add	r3, r2
 80069b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80069ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c8:	801a      	strh	r2, [r3, #0]
 80069ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069ce:	2b3e      	cmp	r3, #62	; 0x3e
 80069d0:	d91d      	bls.n	8006a0e <HAL_PCD_EP_DB_Transmit+0x700>
 80069d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80069da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d102      	bne.n	80069ec <HAL_PCD_EP_DB_Transmit+0x6de>
 80069e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e8:	3b01      	subs	r3, #1
 80069ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80069ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0a:	801a      	strh	r2, [r3, #0]
 8006a0c:	e041      	b.n	8006a92 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <HAL_PCD_EP_DB_Transmit+0x71e>
 8006a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e032      	b.n	8006a92 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_PCD_EP_DB_Transmit+0x738>
 8006a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a42:	3301      	adds	r3, #1
 8006a44:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	029b      	lsls	r3, r3, #10
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a5a:	801a      	strh	r2, [r3, #0]
 8006a5c:	e019      	b.n	8006a92 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	785b      	ldrb	r3, [r3, #1]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d115      	bne.n	8006a92 <HAL_PCD_EP_DB_Transmit+0x784>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a74:	4413      	add	r3, r2
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	011a      	lsls	r2, r3, #4
 8006a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a86:	653b      	str	r3, [r7, #80]	; 0x50
 8006a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a90:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6818      	ldr	r0, [r3, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	6959      	ldr	r1, [r3, #20]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	895a      	ldrh	r2, [r3, #10]
 8006a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f005 fee5 	bl	800c872 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	82bb      	strh	r3, [r7, #20]
 8006ac4:	8abb      	ldrh	r3, [r7, #20]
 8006ac6:	f083 0310 	eor.w	r3, r3, #16
 8006aca:	82bb      	strh	r3, [r7, #20]
 8006acc:	8abb      	ldrh	r3, [r7, #20]
 8006ace:	f083 0320 	eor.w	r3, r3, #32
 8006ad2:	82bb      	strh	r3, [r7, #20]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	441a      	add	r2, r3
 8006ae2:	8abb      	ldrh	r3, [r7, #20]
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3790      	adds	r7, #144	; 0x90
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	607b      	str	r3, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	817b      	strh	r3, [r7, #10]
 8006b10:	4613      	mov	r3, r2
 8006b12:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006b14:	897b      	ldrh	r3, [r7, #10]
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b20:	897b      	ldrh	r3, [r7, #10]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	e009      	b.n	8006b4c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006b38:	897a      	ldrh	r2, [r7, #10]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4413      	add	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006b4c:	893b      	ldrh	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d107      	bne.n	8006b62 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2200      	movs	r2, #0
 8006b56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	80da      	strh	r2, [r3, #6]
 8006b60:	e00b      	b.n	8006b7a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2201      	movs	r2, #1
 8006b66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	371c      	adds	r7, #28
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
	...

08006b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e272      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8087 	beq.w	8006cb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ba8:	4b92      	ldr	r3, [pc, #584]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d00c      	beq.n	8006bce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006bb4:	4b8f      	ldr	r3, [pc, #572]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f003 030c 	and.w	r3, r3, #12
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d112      	bne.n	8006be6 <HAL_RCC_OscConfig+0x5e>
 8006bc0:	4b8c      	ldr	r3, [pc, #560]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bcc:	d10b      	bne.n	8006be6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bce:	4b89      	ldr	r3, [pc, #548]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d06c      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x12c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d168      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e24c      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bee:	d106      	bne.n	8006bfe <HAL_RCC_OscConfig+0x76>
 8006bf0:	4b80      	ldr	r3, [pc, #512]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a7f      	ldr	r2, [pc, #508]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	e02e      	b.n	8006c5c <HAL_RCC_OscConfig+0xd4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10c      	bne.n	8006c20 <HAL_RCC_OscConfig+0x98>
 8006c06:	4b7b      	ldr	r3, [pc, #492]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a7a      	ldr	r2, [pc, #488]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b78      	ldr	r3, [pc, #480]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a77      	ldr	r2, [pc, #476]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e01d      	b.n	8006c5c <HAL_RCC_OscConfig+0xd4>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c28:	d10c      	bne.n	8006c44 <HAL_RCC_OscConfig+0xbc>
 8006c2a:	4b72      	ldr	r3, [pc, #456]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a71      	ldr	r2, [pc, #452]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	4b6f      	ldr	r3, [pc, #444]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6e      	ldr	r2, [pc, #440]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	e00b      	b.n	8006c5c <HAL_RCC_OscConfig+0xd4>
 8006c44:	4b6b      	ldr	r3, [pc, #428]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a6a      	ldr	r2, [pc, #424]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	4b68      	ldr	r3, [pc, #416]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a67      	ldr	r2, [pc, #412]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d013      	beq.n	8006c8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c64:	f7fc fc22 	bl	80034ac <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c6c:	f7fc fc1e 	bl	80034ac <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b64      	cmp	r3, #100	; 0x64
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e200      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c7e:	4b5d      	ldr	r3, [pc, #372]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f0      	beq.n	8006c6c <HAL_RCC_OscConfig+0xe4>
 8006c8a:	e014      	b.n	8006cb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8c:	f7fc fc0e 	bl	80034ac <HAL_GetTick>
 8006c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c94:	f7fc fc0a 	bl	80034ac <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b64      	cmp	r3, #100	; 0x64
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e1ec      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ca6:	4b53      	ldr	r3, [pc, #332]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f0      	bne.n	8006c94 <HAL_RCC_OscConfig+0x10c>
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d063      	beq.n	8006d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cc2:	4b4c      	ldr	r3, [pc, #304]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006cce:	4b49      	ldr	r3, [pc, #292]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f003 030c 	and.w	r3, r3, #12
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d11c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x18c>
 8006cda:	4b46      	ldr	r3, [pc, #280]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d116      	bne.n	8006d14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ce6:	4b43      	ldr	r3, [pc, #268]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <HAL_RCC_OscConfig+0x176>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d001      	beq.n	8006cfe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e1c0      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfe:	4b3d      	ldr	r3, [pc, #244]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4939      	ldr	r1, [pc, #228]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d12:	e03a      	b.n	8006d8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d020      	beq.n	8006d5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d1c:	4b36      	ldr	r3, [pc, #216]	; (8006df8 <HAL_RCC_OscConfig+0x270>)
 8006d1e:	2201      	movs	r2, #1
 8006d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d22:	f7fc fbc3 	bl	80034ac <HAL_GetTick>
 8006d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d28:	e008      	b.n	8006d3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d2a:	f7fc fbbf 	bl	80034ac <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d901      	bls.n	8006d3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e1a1      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d3c:	4b2d      	ldr	r3, [pc, #180]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f0      	beq.n	8006d2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d48:	4b2a      	ldr	r3, [pc, #168]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	4927      	ldr	r1, [pc, #156]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	600b      	str	r3, [r1, #0]
 8006d5c:	e015      	b.n	8006d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d5e:	4b26      	ldr	r3, [pc, #152]	; (8006df8 <HAL_RCC_OscConfig+0x270>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d64:	f7fc fba2 	bl	80034ac <HAL_GetTick>
 8006d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d6a:	e008      	b.n	8006d7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d6c:	f7fc fb9e 	bl	80034ac <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e180      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d7e:	4b1d      	ldr	r3, [pc, #116]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1f0      	bne.n	8006d6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0308 	and.w	r3, r3, #8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d03a      	beq.n	8006e0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d019      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d9e:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <HAL_RCC_OscConfig+0x274>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da4:	f7fc fb82 	bl	80034ac <HAL_GetTick>
 8006da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006daa:	e008      	b.n	8006dbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dac:	f7fc fb7e 	bl	80034ac <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e160      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	; (8006df4 <HAL_RCC_OscConfig+0x26c>)
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0f0      	beq.n	8006dac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f000 faba 	bl	8007344 <RCC_Delay>
 8006dd0:	e01c      	b.n	8006e0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dd2:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <HAL_RCC_OscConfig+0x274>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd8:	f7fc fb68 	bl	80034ac <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dde:	e00f      	b.n	8006e00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006de0:	f7fc fb64 	bl	80034ac <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d908      	bls.n	8006e00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e146      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
 8006df2:	bf00      	nop
 8006df4:	40021000 	.word	0x40021000
 8006df8:	42420000 	.word	0x42420000
 8006dfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e00:	4b92      	ldr	r3, [pc, #584]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e9      	bne.n	8006de0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80a6 	beq.w	8006f66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e1e:	4b8b      	ldr	r3, [pc, #556]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10d      	bne.n	8006e46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e2a:	4b88      	ldr	r3, [pc, #544]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	4a87      	ldr	r2, [pc, #540]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e34:	61d3      	str	r3, [r2, #28]
 8006e36:	4b85      	ldr	r3, [pc, #532]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3e:	60bb      	str	r3, [r7, #8]
 8006e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e46:	4b82      	ldr	r3, [pc, #520]	; (8007050 <HAL_RCC_OscConfig+0x4c8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d118      	bne.n	8006e84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e52:	4b7f      	ldr	r3, [pc, #508]	; (8007050 <HAL_RCC_OscConfig+0x4c8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a7e      	ldr	r2, [pc, #504]	; (8007050 <HAL_RCC_OscConfig+0x4c8>)
 8006e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e5e:	f7fc fb25 	bl	80034ac <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e64:	e008      	b.n	8006e78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e66:	f7fc fb21 	bl	80034ac <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b64      	cmp	r3, #100	; 0x64
 8006e72:	d901      	bls.n	8006e78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e103      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e78:	4b75      	ldr	r3, [pc, #468]	; (8007050 <HAL_RCC_OscConfig+0x4c8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d106      	bne.n	8006e9a <HAL_RCC_OscConfig+0x312>
 8006e8c:	4b6f      	ldr	r3, [pc, #444]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	4a6e      	ldr	r2, [pc, #440]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	6213      	str	r3, [r2, #32]
 8006e98:	e02d      	b.n	8006ef6 <HAL_RCC_OscConfig+0x36e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10c      	bne.n	8006ebc <HAL_RCC_OscConfig+0x334>
 8006ea2:	4b6a      	ldr	r3, [pc, #424]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	4a69      	ldr	r2, [pc, #420]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	6213      	str	r3, [r2, #32]
 8006eae:	4b67      	ldr	r3, [pc, #412]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	4a66      	ldr	r2, [pc, #408]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	6213      	str	r3, [r2, #32]
 8006eba:	e01c      	b.n	8006ef6 <HAL_RCC_OscConfig+0x36e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2b05      	cmp	r3, #5
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCC_OscConfig+0x356>
 8006ec4:	4b61      	ldr	r3, [pc, #388]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	4a60      	ldr	r2, [pc, #384]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006eca:	f043 0304 	orr.w	r3, r3, #4
 8006ece:	6213      	str	r3, [r2, #32]
 8006ed0:	4b5e      	ldr	r3, [pc, #376]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	4a5d      	ldr	r2, [pc, #372]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ed6:	f043 0301 	orr.w	r3, r3, #1
 8006eda:	6213      	str	r3, [r2, #32]
 8006edc:	e00b      	b.n	8006ef6 <HAL_RCC_OscConfig+0x36e>
 8006ede:	4b5b      	ldr	r3, [pc, #364]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	4a5a      	ldr	r2, [pc, #360]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ee4:	f023 0301 	bic.w	r3, r3, #1
 8006ee8:	6213      	str	r3, [r2, #32]
 8006eea:	4b58      	ldr	r3, [pc, #352]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	4a57      	ldr	r2, [pc, #348]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006ef0:	f023 0304 	bic.w	r3, r3, #4
 8006ef4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d015      	beq.n	8006f2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006efe:	f7fc fad5 	bl	80034ac <HAL_GetTick>
 8006f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f04:	e00a      	b.n	8006f1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f06:	f7fc fad1 	bl	80034ac <HAL_GetTick>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e0b1      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f1c:	4b4b      	ldr	r3, [pc, #300]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006f1e:	6a1b      	ldr	r3, [r3, #32]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0ee      	beq.n	8006f06 <HAL_RCC_OscConfig+0x37e>
 8006f28:	e014      	b.n	8006f54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f2a:	f7fc fabf 	bl	80034ac <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f30:	e00a      	b.n	8006f48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f32:	f7fc fabb 	bl	80034ac <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e09b      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f48:	4b40      	ldr	r3, [pc, #256]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1ee      	bne.n	8006f32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d105      	bne.n	8006f66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f5a:	4b3c      	ldr	r3, [pc, #240]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	4a3b      	ldr	r2, [pc, #236]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8087 	beq.w	800707e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f70:	4b36      	ldr	r3, [pc, #216]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f003 030c 	and.w	r3, r3, #12
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d061      	beq.n	8007040 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d146      	bne.n	8007012 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f84:	4b33      	ldr	r3, [pc, #204]	; (8007054 <HAL_RCC_OscConfig+0x4cc>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f8a:	f7fc fa8f 	bl	80034ac <HAL_GetTick>
 8006f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f90:	e008      	b.n	8006fa4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f92:	f7fc fa8b 	bl	80034ac <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e06d      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fa4:	4b29      	ldr	r3, [pc, #164]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f0      	bne.n	8006f92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb8:	d108      	bne.n	8006fcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006fba:	4b24      	ldr	r3, [pc, #144]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	4921      	ldr	r1, [pc, #132]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fcc:	4b1f      	ldr	r3, [pc, #124]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a19      	ldr	r1, [r3, #32]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	430b      	orrs	r3, r1
 8006fde:	491b      	ldr	r1, [pc, #108]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <HAL_RCC_OscConfig+0x4cc>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fea:	f7fc fa5f 	bl	80034ac <HAL_GetTick>
 8006fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ff0:	e008      	b.n	8007004 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ff2:	f7fc fa5b 	bl	80034ac <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e03d      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007004:	4b11      	ldr	r3, [pc, #68]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x46a>
 8007010:	e035      	b.n	800707e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007012:	4b10      	ldr	r3, [pc, #64]	; (8007054 <HAL_RCC_OscConfig+0x4cc>)
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007018:	f7fc fa48 	bl	80034ac <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007020:	f7fc fa44 	bl	80034ac <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e026      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007032:	4b06      	ldr	r3, [pc, #24]	; (800704c <HAL_RCC_OscConfig+0x4c4>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0x498>
 800703e:	e01e      	b.n	800707e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d107      	bne.n	8007058 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e019      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
 800704c:	40021000 	.word	0x40021000
 8007050:	40007000 	.word	0x40007000
 8007054:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007058:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <HAL_RCC_OscConfig+0x500>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	429a      	cmp	r2, r3
 800706a:	d106      	bne.n	800707a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007076:	429a      	cmp	r2, r3
 8007078:	d001      	beq.n	800707e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3718      	adds	r7, #24
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40021000 	.word	0x40021000

0800708c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0d0      	b.n	8007242 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070a0:	4b6a      	ldr	r3, [pc, #424]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d910      	bls.n	80070d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ae:	4b67      	ldr	r3, [pc, #412]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f023 0207 	bic.w	r2, r3, #7
 80070b6:	4965      	ldr	r1, [pc, #404]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070be:	4b63      	ldr	r3, [pc, #396]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d001      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0b8      	b.n	8007242 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d020      	beq.n	800711e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070e8:	4b59      	ldr	r3, [pc, #356]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4a58      	ldr	r2, [pc, #352]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 80070ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007100:	4b53      	ldr	r3, [pc, #332]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	4a52      	ldr	r2, [pc, #328]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 8007106:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800710a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800710c:	4b50      	ldr	r3, [pc, #320]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	494d      	ldr	r1, [pc, #308]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 800711a:	4313      	orrs	r3, r2
 800711c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d040      	beq.n	80071ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d107      	bne.n	8007142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007132:	4b47      	ldr	r3, [pc, #284]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d115      	bne.n	800716a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e07f      	b.n	8007242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d107      	bne.n	800715a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714a:	4b41      	ldr	r3, [pc, #260]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e073      	b.n	8007242 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800715a:	4b3d      	ldr	r3, [pc, #244]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e06b      	b.n	8007242 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800716a:	4b39      	ldr	r3, [pc, #228]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f023 0203 	bic.w	r2, r3, #3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	4936      	ldr	r1, [pc, #216]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 8007178:	4313      	orrs	r3, r2
 800717a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800717c:	f7fc f996 	bl	80034ac <HAL_GetTick>
 8007180:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007182:	e00a      	b.n	800719a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007184:	f7fc f992 	bl	80034ac <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007192:	4293      	cmp	r3, r2
 8007194:	d901      	bls.n	800719a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e053      	b.n	8007242 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719a:	4b2d      	ldr	r3, [pc, #180]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f003 020c 	and.w	r2, r3, #12
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d1eb      	bne.n	8007184 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071ac:	4b27      	ldr	r3, [pc, #156]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d210      	bcs.n	80071dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ba:	4b24      	ldr	r3, [pc, #144]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 0207 	bic.w	r2, r3, #7
 80071c2:	4922      	ldr	r1, [pc, #136]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	4b20      	ldr	r3, [pc, #128]	; (800724c <HAL_RCC_ClockConfig+0x1c0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e032      	b.n	8007242 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e8:	4b19      	ldr	r3, [pc, #100]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4916      	ldr	r1, [pc, #88]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007206:	4b12      	ldr	r3, [pc, #72]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	490e      	ldr	r1, [pc, #56]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 8007216:	4313      	orrs	r3, r2
 8007218:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800721a:	f000 f821 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 800721e:	4602      	mov	r2, r0
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <HAL_RCC_ClockConfig+0x1c4>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	490a      	ldr	r1, [pc, #40]	; (8007254 <HAL_RCC_ClockConfig+0x1c8>)
 800722c:	5ccb      	ldrb	r3, [r1, r3]
 800722e:	fa22 f303 	lsr.w	r3, r2, r3
 8007232:	4a09      	ldr	r2, [pc, #36]	; (8007258 <HAL_RCC_ClockConfig+0x1cc>)
 8007234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <HAL_RCC_ClockConfig+0x1d0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f7fc f8f4 	bl	8003428 <HAL_InitTick>

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40022000 	.word	0x40022000
 8007250:	40021000 	.word	0x40021000
 8007254:	080221e8 	.word	0x080221e8
 8007258:	2000b5a0 	.word	0x2000b5a0
 800725c:	2000b5a4 	.word	0x2000b5a4

08007260 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	2300      	movs	r3, #0
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
 8007272:	2300      	movs	r3, #0
 8007274:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800727a:	4b1e      	ldr	r3, [pc, #120]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f003 030c 	and.w	r3, r3, #12
 8007286:	2b04      	cmp	r3, #4
 8007288:	d002      	beq.n	8007290 <HAL_RCC_GetSysClockFreq+0x30>
 800728a:	2b08      	cmp	r3, #8
 800728c:	d003      	beq.n	8007296 <HAL_RCC_GetSysClockFreq+0x36>
 800728e:	e027      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007290:	4b19      	ldr	r3, [pc, #100]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007292:	613b      	str	r3, [r7, #16]
      break;
 8007294:	e027      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	0c9b      	lsrs	r3, r3, #18
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	4a17      	ldr	r2, [pc, #92]	; (80072fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80072a0:	5cd3      	ldrb	r3, [r2, r3]
 80072a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d010      	beq.n	80072d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80072ae:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	0c5b      	lsrs	r3, r3, #17
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	4a11      	ldr	r2, [pc, #68]	; (8007300 <HAL_RCC_GetSysClockFreq+0xa0>)
 80072ba:	5cd3      	ldrb	r3, [r2, r3]
 80072bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a0d      	ldr	r2, [pc, #52]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80072c2:	fb03 f202 	mul.w	r2, r3, r2
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e004      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <HAL_RCC_GetSysClockFreq+0xa4>)
 80072d4:	fb02 f303 	mul.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	613b      	str	r3, [r7, #16]
      break;
 80072de:	e002      	b.n	80072e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072e0:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80072e2:	613b      	str	r3, [r7, #16]
      break;
 80072e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072e6:	693b      	ldr	r3, [r7, #16]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000
 80072f8:	007a1200 	.word	0x007a1200
 80072fc:	08022200 	.word	0x08022200
 8007300:	08022210 	.word	0x08022210
 8007304:	003d0900 	.word	0x003d0900

08007308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <HAL_RCC_GetHCLKFreq+0x10>)
 800730e:	681b      	ldr	r3, [r3, #0]
}
 8007310:	4618      	mov	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	bc80      	pop	{r7}
 8007316:	4770      	bx	lr
 8007318:	2000b5a0 	.word	0x2000b5a0

0800731c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007320:	f7ff fff2 	bl	8007308 <HAL_RCC_GetHCLKFreq>
 8007324:	4602      	mov	r2, r0
 8007326:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	4903      	ldr	r1, [pc, #12]	; (8007340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007332:	5ccb      	ldrb	r3, [r1, r3]
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007338:	4618      	mov	r0, r3
 800733a:	bd80      	pop	{r7, pc}
 800733c:	40021000 	.word	0x40021000
 8007340:	080221f8 	.word	0x080221f8

08007344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800734c:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <RCC_Delay+0x34>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <RCC_Delay+0x38>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	0a5b      	lsrs	r3, r3, #9
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	fb02 f303 	mul.w	r3, r2, r3
 800735e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007360:	bf00      	nop
  }
  while (Delay --);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	1e5a      	subs	r2, r3, #1
 8007366:	60fa      	str	r2, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f9      	bne.n	8007360 <RCC_Delay+0x1c>
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	2000b5a0 	.word	0x2000b5a0
 800737c:	10624dd3 	.word	0x10624dd3

08007380 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d07d      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800739c:	2300      	movs	r3, #0
 800739e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073a0:	4b4f      	ldr	r3, [pc, #316]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10d      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ac:	4b4c      	ldr	r3, [pc, #304]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4a4b      	ldr	r2, [pc, #300]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b6:	61d3      	str	r3, [r2, #28]
 80073b8:	4b49      	ldr	r3, [pc, #292]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c8:	4b46      	ldr	r3, [pc, #280]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d118      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a42      	ldr	r2, [pc, #264]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073e0:	f7fc f864 	bl	80034ac <HAL_GetTick>
 80073e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e6:	e008      	b.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e8:	f7fc f860 	bl	80034ac <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b64      	cmp	r3, #100	; 0x64
 80073f4:	d901      	bls.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e06d      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073fa:	4b3a      	ldr	r3, [pc, #232]	; (80074e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0f0      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007406:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800740e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02e      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	429a      	cmp	r2, r3
 8007422:	d027      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007424:	4b2e      	ldr	r3, [pc, #184]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800742e:	4b2e      	ldr	r3, [pc, #184]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007430:	2201      	movs	r2, #1
 8007432:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007434:	4b2c      	ldr	r3, [pc, #176]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800743a:	4a29      	ldr	r2, [pc, #164]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d014      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800744a:	f7fc f82f 	bl	80034ac <HAL_GetTick>
 800744e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007450:	e00a      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007452:	f7fc f82b 	bl	80034ac <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007460:	4293      	cmp	r3, r2
 8007462:	d901      	bls.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e036      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007468:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d0ee      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007474:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4917      	ldr	r1, [pc, #92]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007482:	4313      	orrs	r3, r2
 8007484:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d105      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800748c:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007496:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	490b      	ldr	r1, [pc, #44]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d008      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	4904      	ldr	r1, [pc, #16]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40021000 	.word	0x40021000
 80074e4:	40007000 	.word	0x40007000
 80074e8:	42420440 	.word	0x42420440

080074ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e022      	b.n	8007544 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d105      	bne.n	8007516 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7fb fd0d 	bl	8002f30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2203      	movs	r2, #3
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f814 	bl	800754c <HAL_SD_InitCard>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e00a      	b.n	8007544 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800754c:	b5b0      	push	{r4, r5, r7, lr}
 800754e:	b08e      	sub	sp, #56	; 0x38
 8007550:	af04      	add	r7, sp, #16
 8007552:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007554:	2300      	movs	r3, #0
 8007556:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800755c:	2300      	movs	r3, #0
 800755e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007564:	2300      	movs	r3, #0
 8007566:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007568:	2376      	movs	r3, #118	; 0x76
 800756a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681d      	ldr	r5, [r3, #0]
 8007570:	466c      	mov	r4, sp
 8007572:	f107 0314 	add.w	r3, r7, #20
 8007576:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800757a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800757e:	f107 0308 	add.w	r3, r7, #8
 8007582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007584:	4628      	mov	r0, r5
 8007586:	f002 f907 	bl	8009798 <SDIO_Init>
 800758a:	4603      	mov	r3, r0
 800758c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e04f      	b.n	800763c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800759c:	4b29      	ldr	r3, [pc, #164]	; (8007644 <HAL_SD_InitCard+0xf8>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f002 f93c 	bl	8009824 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80075ac:	4b25      	ldr	r3, [pc, #148]	; (8007644 <HAL_SD_InitCard+0xf8>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80075b2:	2002      	movs	r0, #2
 80075b4:	f7fb ff84 	bl	80034c0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 ff03 	bl	80083c4 <SD_PowerON>
 80075be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00b      	beq.n	80075de <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	431a      	orrs	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e02e      	b.n	800763c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fe22 	bl	8008228 <SD_InitCard>
 80075e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e01b      	b.n	800763c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800760c:	4618      	mov	r0, r3
 800760e:	f002 f995 	bl	800993c <SDMMC_CmdBlockLength>
 8007612:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00f      	beq.n	800763a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <HAL_SD_InitCard+0xfc>)
 8007620:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3728      	adds	r7, #40	; 0x28
 8007640:	46bd      	mov	sp, r7
 8007642:	bdb0      	pop	{r4, r5, r7, pc}
 8007644:	423000a0 	.word	0x423000a0
 8007648:	004005ff 	.word	0x004005ff

0800764c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b092      	sub	sp, #72	; 0x48
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800765a:	f7fb ff27 	bl	80034ac <HAL_GetTick>
 800765e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d107      	bne.n	800767e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e1bd      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b01      	cmp	r3, #1
 8007688:	f040 81b0 	bne.w	80079ec <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	441a      	add	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769c:	429a      	cmp	r2, r3
 800769e:	d907      	bls.n	80076b0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e1a4      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2203      	movs	r2, #3
 80076b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d002      	beq.n	80076ce <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	025b      	lsls	r3, r3, #9
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	025b      	lsls	r3, r3, #9
 80076d8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076da:	2390      	movs	r3, #144	; 0x90
 80076dc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80076de:	2302      	movs	r3, #2
 80076e0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80076e6:	2301      	movs	r3, #1
 80076e8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f107 0214 	add.w	r2, r7, #20
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f002 f8f6 	bl	80098e6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d90a      	bls.n	8007716 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2202      	movs	r2, #2
 8007704:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800770c:	4618      	mov	r0, r3
 800770e:	f002 f959 	bl	80099c4 <SDMMC_CmdReadMultiBlock>
 8007712:	6478      	str	r0, [r7, #68]	; 0x44
 8007714:	e009      	b.n	800772a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007722:	4618      	mov	r0, r3
 8007724:	f002 f92c 	bl	8009980 <SDMMC_CmdReadSingleBlock>
 8007728:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800772a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772c:	2b00      	cmp	r3, #0
 800772e:	d012      	beq.n	8007756 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a7a      	ldr	r2, [pc, #488]	; (8007920 <HAL_SD_ReadBlocks+0x2d4>)
 8007736:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800773c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800773e:	431a      	orrs	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e151      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800775a:	e061      	b.n	8007820 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d03c      	beq.n	80077e4 <HAL_SD_ReadBlocks+0x198>
 800776a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d039      	beq.n	80077e4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007770:	2300      	movs	r3, #0
 8007772:	643b      	str	r3, [r7, #64]	; 0x40
 8007774:	e033      	b.n	80077de <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f002 f836 	bl	80097ec <SDIO_ReadFIFO>
 8007780:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	b2da      	uxtb	r2, r3
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	3301      	adds	r3, #1
 800778e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007792:	3b01      	subs	r3, #1
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	b2da      	uxtb	r2, r3
 800779c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	3301      	adds	r3, #1
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a8:	3b01      	subs	r3, #1
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b8:	3301      	adds	r3, #1
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077be:	3b01      	subs	r3, #1
 80077c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	0e1b      	lsrs	r3, r3, #24
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ce:	3301      	adds	r3, #1
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d4:	3b01      	subs	r3, #1
 80077d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80077d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077da:	3301      	adds	r3, #1
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
 80077de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e0:	2b07      	cmp	r3, #7
 80077e2:	d9c8      	bls.n	8007776 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80077e4:	f7fb fe62 	bl	80034ac <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d902      	bls.n	80077fa <HAL_SD_ReadBlocks+0x1ae>
 80077f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d112      	bne.n	8007820 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a48      	ldr	r2, [pc, #288]	; (8007920 <HAL_SD_ReadBlocks+0x2d4>)
 8007800:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e0ec      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007826:	f240 332a 	movw	r3, #810	; 0x32a
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d095      	beq.n	800775c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d022      	beq.n	8007884 <HAL_SD_ReadBlocks+0x238>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d91f      	bls.n	8007884 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007848:	2b03      	cmp	r3, #3
 800784a:	d01b      	beq.n	8007884 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4618      	mov	r0, r3
 8007852:	f002 f91d 	bl	8009a90 <SDMMC_CmdStopTransfer>
 8007856:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800785a:	2b00      	cmp	r3, #0
 800785c:	d012      	beq.n	8007884 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a2f      	ldr	r2, [pc, #188]	; (8007920 <HAL_SD_ReadBlocks+0x2d4>)
 8007864:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800786a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800786c:	431a      	orrs	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0ba      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d012      	beq.n	80078b8 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a22      	ldr	r2, [pc, #136]	; (8007920 <HAL_SD_ReadBlocks+0x2d4>)
 8007898:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	f043 0208 	orr.w	r2, r3, #8
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e0a0      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d012      	beq.n	80078ec <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_SD_ReadBlocks+0x2d4>)
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	f043 0202 	orr.w	r2, r3, #2
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e086      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d063      	beq.n	80079c2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a08      	ldr	r2, [pc, #32]	; (8007920 <HAL_SD_ReadBlocks+0x2d4>)
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	f043 0220 	orr.w	r2, r3, #32
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e06c      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
 8007920:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f001 ff5f 	bl	80097ec <SDIO_ReadFIFO>
 800792e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	b2da      	uxtb	r2, r3
 8007934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007936:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793a:	3301      	adds	r3, #1
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800793e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007940:	3b01      	subs	r3, #1
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	b2da      	uxtb	r2, r3
 800794a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	3301      	adds	r3, #1
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007956:	3b01      	subs	r3, #1
 8007958:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	b2da      	uxtb	r2, r3
 8007960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007962:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007966:	3301      	adds	r3, #1
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800796a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796c:	3b01      	subs	r3, #1
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007972:	0e1b      	lsrs	r3, r3, #24
 8007974:	b2da      	uxtb	r2, r3
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800797a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800797c:	3301      	adds	r3, #1
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007982:	3b01      	subs	r3, #1
 8007984:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007986:	f7fb fd91 	bl	80034ac <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007992:	429a      	cmp	r2, r3
 8007994:	d902      	bls.n	800799c <HAL_SD_ReadBlocks+0x350>
 8007996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007998:	2b00      	cmp	r3, #0
 800799a:	d112      	bne.n	80079c2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <HAL_SD_ReadBlocks+0x3b8>)
 80079a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2200      	movs	r2, #0
 80079bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e01b      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <HAL_SD_ReadBlocks+0x38a>
 80079d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1a6      	bne.n	8007924 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f240 523a 	movw	r2, #1338	; 0x53a
 80079de:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	e006      	b.n	80079fa <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
  }
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3748      	adds	r7, #72	; 0x48
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	004005ff 	.word	0x004005ff

08007a08 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b092      	sub	sp, #72	; 0x48
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a16:	f7fb fd49 	bl	80034ac <HAL_GetTick>
 8007a1a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d107      	bne.n	8007a3a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e166      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	f040 8159 	bne.w	8007cfa <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	441a      	add	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d907      	bls.n	8007a6c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e14d      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2203      	movs	r2, #3
 8007a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d002      	beq.n	8007a8a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	025b      	lsls	r3, r3, #9
 8007a88:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a8e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	025b      	lsls	r3, r3, #9
 8007a94:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a96:	2390      	movs	r3, #144	; 0x90
 8007a98:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f107 0218 	add.w	r2, r7, #24
 8007aae:	4611      	mov	r1, r2
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 ff18 	bl	80098e6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d90a      	bls.n	8007ad2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 ffbf 	bl	8009a4c <SDMMC_CmdWriteMultiBlock>
 8007ace:	6478      	str	r0, [r7, #68]	; 0x44
 8007ad0:	e009      	b.n	8007ae6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2210      	movs	r2, #16
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 ff92 	bl	8009a08 <SDMMC_CmdWriteSingleBlock>
 8007ae4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d012      	beq.n	8007b12 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a87      	ldr	r2, [pc, #540]	; (8007d10 <HAL_SD_WriteBlocks+0x308>)
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007afa:	431a      	orrs	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e0fa      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007b16:	e065      	b.n	8007be4 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d040      	beq.n	8007ba8 <HAL_SD_WriteBlocks+0x1a0>
 8007b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d03d      	beq.n	8007ba8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8007b30:	e037      	b.n	8007ba2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b40:	3b01      	subs	r3, #1
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	021a      	lsls	r2, r3, #8
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b52:	3301      	adds	r3, #1
 8007b54:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	041a      	lsls	r2, r3, #16
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b70:	3b01      	subs	r3, #1
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	061a      	lsls	r2, r3, #24
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b82:	3301      	adds	r3, #1
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f107 0214 	add.w	r2, r7, #20
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f001 fe34 	bl	8009804 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba4:	2b07      	cmp	r3, #7
 8007ba6:	d9c4      	bls.n	8007b32 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007ba8:	f7fb fc80 	bl	80034ac <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d902      	bls.n	8007bbe <HAL_SD_WriteBlocks+0x1b6>
 8007bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d112      	bne.n	8007be4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a53      	ldr	r2, [pc, #332]	; (8007d10 <HAL_SD_WriteBlocks+0x308>)
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e091      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bea:	f240 331a 	movw	r3, #794	; 0x31a
 8007bee:	4013      	ands	r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d091      	beq.n	8007b18 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d022      	beq.n	8007c48 <HAL_SD_WriteBlocks+0x240>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d91f      	bls.n	8007c48 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d01b      	beq.n	8007c48 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 ff3b 	bl	8009a90 <SDMMC_CmdStopTransfer>
 8007c1a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d012      	beq.n	8007c48 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a3a      	ldr	r2, [pc, #232]	; (8007d10 <HAL_SD_WriteBlocks+0x308>)
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e05f      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d012      	beq.n	8007c7c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a2d      	ldr	r2, [pc, #180]	; (8007d10 <HAL_SD_WriteBlocks+0x308>)
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	f043 0208 	orr.w	r2, r3, #8
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e045      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d012      	beq.n	8007cb0 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a20      	ldr	r2, [pc, #128]	; (8007d10 <HAL_SD_WriteBlocks+0x308>)
 8007c90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c96:	f043 0202 	orr.w	r2, r3, #2
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e02b      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb6:	f003 0310 	and.w	r3, r3, #16
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d012      	beq.n	8007ce4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a13      	ldr	r2, [pc, #76]	; (8007d10 <HAL_SD_WriteBlocks+0x308>)
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	f043 0210 	orr.w	r2, r3, #16
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e011      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cec:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e006      	b.n	8007d08 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
  }
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3748      	adds	r7, #72	; 0x48
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	004005ff 	.word	0x004005ff

08007d14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d22:	0f9b      	lsrs	r3, r3, #30
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2e:	0e9b      	lsrs	r3, r3, #26
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 030f 	and.w	r3, r3, #15
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d40:	0e1b      	lsrs	r3, r3, #24
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0303 	and.w	r3, r3, #3
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d52:	0c1b      	lsrs	r3, r3, #16
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d74:	0d1b      	lsrs	r3, r3, #20
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d92:	0bdb      	lsrs	r3, r3, #15
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da4:	0b9b      	lsrs	r3, r3, #14
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db6:	0b5b      	lsrs	r3, r3, #13
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc8:	0b1b      	lsrs	r3, r3, #12
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d163      	bne.n	8007eac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de8:	009a      	lsls	r2, r3, #2
 8007dea:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007dee:	4013      	ands	r3, r2
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007df4:	0f92      	lsrs	r2, r2, #30
 8007df6:	431a      	orrs	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e00:	0edb      	lsrs	r3, r3, #27
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e12:	0e1b      	lsrs	r3, r3, #24
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e24:	0d5b      	lsrs	r3, r3, #21
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e36:	0c9b      	lsrs	r3, r3, #18
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e48:	0bdb      	lsrs	r3, r3, #15
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	7e1b      	ldrb	r3, [r3, #24]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e76:	fb03 f202 	mul.w	r2, r3, r2
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	7a1b      	ldrb	r3, [r3, #8]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 030f 	and.w	r3, r3, #15
 8007e88:	2201      	movs	r2, #1
 8007e8a:	409a      	lsls	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007e98:	0a52      	lsrs	r2, r2, #9
 8007e9a:	fb03 f202 	mul.w	r2, r3, r2
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea8:	661a      	str	r2, [r3, #96]	; 0x60
 8007eaa:	e031      	b.n	8007f10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d11d      	bne.n	8007ef0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb8:	041b      	lsls	r3, r3, #16
 8007eba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	029a      	lsls	r2, r3, #10
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	661a      	str	r2, [r3, #96]	; 0x60
 8007eee:	e00f      	b.n	8007f10 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a58      	ldr	r2, [pc, #352]	; (8008058 <HAL_SD_GetCardCSD+0x344>)
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e09d      	b.n	800804c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f14:	0b9b      	lsrs	r3, r3, #14
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f26:	09db      	lsrs	r3, r3, #7
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f48:	0fdb      	lsrs	r3, r3, #31
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	0f5b      	lsrs	r3, r3, #29
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f66:	0e9b      	lsrs	r3, r3, #26
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f78:	0d9b      	lsrs	r3, r3, #22
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 030f 	and.w	r3, r3, #15
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	0d5b      	lsrs	r3, r3, #21
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fba:	0bdb      	lsrs	r3, r3, #15
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	0b9b      	lsrs	r3, r3, #14
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe2:	0b5b      	lsrs	r3, r3, #13
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	0b1b      	lsrs	r3, r3, #12
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	0a9b      	lsrs	r3, r3, #10
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	b2da      	uxtb	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	085b      	lsrs	r3, r3, #1
 8008034:	b2db      	uxtb	r3, r3
 8008036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803a:	b2da      	uxtb	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bc80      	pop	{r7}
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	004005ff 	.word	0x004005ff

0800805c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
	...

080080b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80080b4:	b5b0      	push	{r4, r5, r7, lr}
 80080b6:	b08e      	sub	sp, #56	; 0x38
 80080b8:	af04      	add	r7, sp, #16
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2203      	movs	r2, #3
 80080c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d02e      	beq.n	8008132 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080da:	d106      	bne.n	80080ea <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38
 80080e8:	e029      	b.n	800813e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f0:	d10a      	bne.n	8008108 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa1c 	bl	8008530 <SD_WideBus_Enable>
 80080f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080fe:	6a3b      	ldr	r3, [r7, #32]
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	639a      	str	r2, [r3, #56]	; 0x38
 8008106:	e01a      	b.n	800813e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10a      	bne.n	8008124 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa59 	bl	80085c6 <SD_WideBus_Disable>
 8008114:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	431a      	orrs	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	639a      	str	r2, [r3, #56]	; 0x38
 8008122:	e00c      	b.n	800813e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	639a      	str	r2, [r3, #56]	; 0x38
 8008130:	e005      	b.n	800813e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00b      	beq.n	800815e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a26      	ldr	r2, [pc, #152]	; (80081e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800815c:	e01f      	b.n	800819e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681d      	ldr	r5, [r3, #0]
 8008184:	466c      	mov	r4, sp
 8008186:	f107 0314 	add.w	r3, r7, #20
 800818a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800818e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008192:	f107 0308 	add.w	r3, r7, #8
 8008196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008198:	4628      	mov	r0, r5
 800819a:	f001 fafd 	bl	8009798 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 fbc8 	bl	800993c <SDMMC_CmdBlockLength>
 80081ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00c      	beq.n	80081ce <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <HAL_SD_ConfigWideBusOperation+0x130>)
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80081d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3728      	adds	r7, #40	; 0x28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bdb0      	pop	{r4, r5, r7, pc}
 80081e2:	bf00      	nop
 80081e4:	004005ff 	.word	0x004005ff

080081e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80081f4:	f107 030c 	add.w	r3, r7, #12
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f970 	bl	80084e0 <SD_SendStatus>
 8008200:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	0a5b      	lsrs	r3, r3, #9
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800821e:	693b      	ldr	r3, [r7, #16]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008228:	b5b0      	push	{r4, r5, r7, lr}
 800822a:	b094      	sub	sp, #80	; 0x50
 800822c:	af04      	add	r7, sp, #16
 800822e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008230:	2301      	movs	r3, #1
 8008232:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4618      	mov	r0, r3
 800823a:	f001 fb00 	bl	800983e <SDIO_GetPowerState>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008244:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008248:	e0b8      	b.n	80083bc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824e:	2b03      	cmp	r3, #3
 8008250:	d02f      	beq.n	80082b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4618      	mov	r0, r3
 8008258:	f001 fd24 	bl	8009ca4 <SDMMC_CmdSendCID>
 800825c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800825e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <SD_InitCard+0x40>
    {
      return errorstate;
 8008264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008266:	e0a9      	b.n	80083bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f001 fb27 	bl	80098c2 <SDIO_GetResponse>
 8008274:	4602      	mov	r2, r0
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2104      	movs	r1, #4
 8008280:	4618      	mov	r0, r3
 8008282:	f001 fb1e 	bl	80098c2 <SDIO_GetResponse>
 8008286:	4602      	mov	r2, r0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2108      	movs	r1, #8
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fb15 	bl	80098c2 <SDIO_GetResponse>
 8008298:	4602      	mov	r2, r0
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	210c      	movs	r1, #12
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fb0c 	bl	80098c2 <SDIO_GetResponse>
 80082aa:	4602      	mov	r2, r0
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d00d      	beq.n	80082d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f107 020e 	add.w	r2, r7, #14
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fd2a 	bl	8009d1e <SDMMC_CmdSetRelAdd>
 80082ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d001      	beq.n	80082d6 <SD_InitCard+0xae>
    {
      return errorstate;
 80082d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d4:	e072      	b.n	80083bc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d036      	beq.n	800834c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80082de:	89fb      	ldrh	r3, [r7, #14]
 80082e0:	461a      	mov	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ee:	041b      	lsls	r3, r3, #16
 80082f0:	4619      	mov	r1, r3
 80082f2:	4610      	mov	r0, r2
 80082f4:	f001 fcf4 	bl	8009ce0 <SDMMC_CmdSendCSD>
 80082f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80082fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	e05b      	b.n	80083bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2100      	movs	r1, #0
 800830a:	4618      	mov	r0, r3
 800830c:	f001 fad9 	bl	80098c2 <SDIO_GetResponse>
 8008310:	4602      	mov	r2, r0
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2104      	movs	r1, #4
 800831c:	4618      	mov	r0, r3
 800831e:	f001 fad0 	bl	80098c2 <SDIO_GetResponse>
 8008322:	4602      	mov	r2, r0
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2108      	movs	r1, #8
 800832e:	4618      	mov	r0, r3
 8008330:	f001 fac7 	bl	80098c2 <SDIO_GetResponse>
 8008334:	4602      	mov	r2, r0
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	210c      	movs	r1, #12
 8008340:	4618      	mov	r0, r3
 8008342:	f001 fabe 	bl	80098c2 <SDIO_GetResponse>
 8008346:	4602      	mov	r2, r0
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2104      	movs	r1, #4
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fab5 	bl	80098c2 <SDIO_GetResponse>
 8008358:	4603      	mov	r3, r0
 800835a:	0d1a      	lsrs	r2, r3, #20
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008360:	f107 0310 	add.w	r3, r7, #16
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7ff fcd4 	bl	8007d14 <HAL_SD_GetCardCSD>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008372:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008376:	e021      	b.n	80083bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6819      	ldr	r1, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008380:	041b      	lsls	r3, r3, #16
 8008382:	2200      	movs	r2, #0
 8008384:	461c      	mov	r4, r3
 8008386:	4615      	mov	r5, r2
 8008388:	4622      	mov	r2, r4
 800838a:	462b      	mov	r3, r5
 800838c:	4608      	mov	r0, r1
 800838e:	f001 fba1 	bl	8009ad4 <SDMMC_CmdSelDesel>
 8008392:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <SD_InitCard+0x176>
  {
    return errorstate;
 800839a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839c:	e00e      	b.n	80083bc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681d      	ldr	r5, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	466c      	mov	r4, sp
 80083a6:	f103 0210 	add.w	r2, r3, #16
 80083aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80083ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083b0:	3304      	adds	r3, #4
 80083b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083b4:	4628      	mov	r0, r5
 80083b6:	f001 f9ef 	bl	8009798 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3740      	adds	r7, #64	; 0x40
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bdb0      	pop	{r4, r5, r7, pc}

080083c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	2300      	movs	r3, #0
 80083d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fb9c 	bl	8009b1a <SDMMC_CmdGoIdleState>
 80083e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	e072      	b.n	80084d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 fbaf 	bl	8009b56 <SDMMC_CmdOperCond>
 80083f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00d      	beq.n	800841c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f001 fb85 	bl	8009b1a <SDMMC_CmdGoIdleState>
 8008410:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d004      	beq.n	8008422 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	e05b      	b.n	80084d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008426:	2b01      	cmp	r3, #1
 8008428:	d137      	bne.n	800849a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2100      	movs	r1, #0
 8008430:	4618      	mov	r0, r3
 8008432:	f001 fbaf 	bl	8009b94 <SDMMC_CmdAppCommand>
 8008436:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d02d      	beq.n	800849a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800843e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008442:	e047      	b.n	80084d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2100      	movs	r1, #0
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fba2 	bl	8009b94 <SDMMC_CmdAppCommand>
 8008450:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <SD_PowerON+0x98>
    {
      return errorstate;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	e03b      	b.n	80084d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	491e      	ldr	r1, [pc, #120]	; (80084dc <SD_PowerON+0x118>)
 8008462:	4618      	mov	r0, r3
 8008464:	f001 fbb8 	bl	8009bd8 <SDMMC_CmdAppOperCommand>
 8008468:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008470:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008474:	e02e      	b.n	80084d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2100      	movs	r1, #0
 800847c:	4618      	mov	r0, r3
 800847e:	f001 fa20 	bl	80098c2 <SDIO_GetResponse>
 8008482:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	0fdb      	lsrs	r3, r3, #31
 8008488:	2b01      	cmp	r3, #1
 800848a:	d101      	bne.n	8008490 <SD_PowerON+0xcc>
 800848c:	2301      	movs	r3, #1
 800848e:	e000      	b.n	8008492 <SD_PowerON+0xce>
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]

    count++;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	3301      	adds	r3, #1
 8008498:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d802      	bhi.n	80084aa <SD_PowerON+0xe6>
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0cc      	beq.n	8008444 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d902      	bls.n	80084ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80084b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084b8:	e00c      	b.n	80084d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	645a      	str	r2, [r3, #68]	; 0x44
 80084ca:	e002      	b.n	80084d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	c1100000 	.word	0xc1100000

080084e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d102      	bne.n	80084f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80084f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084f4:	e018      	b.n	8008528 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fe:	041b      	lsls	r3, r3, #16
 8008500:	4619      	mov	r1, r3
 8008502:	4610      	mov	r0, r2
 8008504:	f001 fc2c 	bl	8009d60 <SDMMC_CmdSendStatus>
 8008508:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	e009      	b.n	8008528 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f001 f9d1 	bl	80098c2 <SDIO_GetResponse>
 8008520:	4602      	mov	r2, r0
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f001 f9bb 	bl	80098c2 <SDIO_GetResponse>
 800854c:	4603      	mov	r3, r0
 800854e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008556:	d102      	bne.n	800855e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800855c:	e02f      	b.n	80085be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800855e:	f107 030c 	add.w	r3, r7, #12
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f879 	bl	800865c <SD_FindSCR>
 800856a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d001      	beq.n	8008576 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	e023      	b.n	80085be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d01c      	beq.n	80085ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008588:	041b      	lsls	r3, r3, #16
 800858a:	4619      	mov	r1, r3
 800858c:	4610      	mov	r0, r2
 800858e:	f001 fb01 	bl	8009b94 <SDMMC_CmdAppCommand>
 8008592:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	e00f      	b.n	80085be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2102      	movs	r1, #2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 fb3a 	bl	8009c1e <SDMMC_CmdBusWidth>
 80085aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	e003      	b.n	80085be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e001      	b.n	80085be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b086      	sub	sp, #24
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	2300      	movs	r3, #0
 80085d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f001 f970 	bl	80098c2 <SDIO_GetResponse>
 80085e2:	4603      	mov	r3, r0
 80085e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085ec:	d102      	bne.n	80085f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80085ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085f2:	e02f      	b.n	8008654 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80085f4:	f107 030c 	add.w	r3, r7, #12
 80085f8:	4619      	mov	r1, r3
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f82e 	bl	800865c <SD_FindSCR>
 8008600:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	e023      	b.n	8008654 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d01c      	beq.n	8008650 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861e:	041b      	lsls	r3, r3, #16
 8008620:	4619      	mov	r1, r3
 8008622:	4610      	mov	r0, r2
 8008624:	f001 fab6 	bl	8009b94 <SDMMC_CmdAppCommand>
 8008628:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	e00f      	b.n	8008654 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f001 faef 	bl	8009c1e <SDMMC_CmdBusWidth>
 8008640:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	e003      	b.n	8008654 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800864c:	2300      	movs	r3, #0
 800864e:	e001      	b.n	8008654 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800865c:	b590      	push	{r4, r7, lr}
 800865e:	b08f      	sub	sp, #60	; 0x3c
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008666:	f7fa ff21 	bl	80034ac <HAL_GetTick>
 800866a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008670:	2300      	movs	r3, #0
 8008672:	60bb      	str	r3, [r7, #8]
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2108      	movs	r1, #8
 8008682:	4618      	mov	r0, r3
 8008684:	f001 f95a 	bl	800993c <SDMMC_CmdBlockLength>
 8008688:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800868a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008692:	e0b2      	b.n	80087fa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869c:	041b      	lsls	r3, r3, #16
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f001 fa77 	bl	8009b94 <SDMMC_CmdAppCommand>
 80086a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	e0a3      	b.n	80087fa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295
 80086b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80086b8:	2308      	movs	r3, #8
 80086ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80086bc:	2330      	movs	r3, #48	; 0x30
 80086be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80086c0:	2302      	movs	r3, #2
 80086c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80086c8:	2301      	movs	r3, #1
 80086ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f107 0210 	add.w	r2, r7, #16
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 f905 	bl	80098e6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 fabe 	bl	8009c62 <SDMMC_CmdSendSCR>
 80086e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d02a      	beq.n	8008744 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	e083      	b.n	80087fa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00f      	beq.n	8008720 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	f107 0208 	add.w	r2, r7, #8
 800870c:	18d4      	adds	r4, r2, r3
 800870e:	4608      	mov	r0, r1
 8008710:	f001 f86c 	bl	80097ec <SDIO_ReadFIFO>
 8008714:	4603      	mov	r3, r0
 8008716:	6023      	str	r3, [r4, #0]
      index++;
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	3301      	adds	r3, #1
 800871c:	637b      	str	r3, [r7, #52]	; 0x34
 800871e:	e006      	b.n	800872e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d012      	beq.n	8008754 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800872e:	f7fa febd 	bl	80034ac <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d102      	bne.n	8008744 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800873e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008742:	e05a      	b.n	80087fa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0cf      	beq.n	80086f2 <SD_FindSCR+0x96>
 8008752:	e000      	b.n	8008756 <SD_FindSCR+0xfa>
      break;
 8008754:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	f003 0308 	and.w	r3, r3, #8
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2208      	movs	r2, #8
 800876a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800876c:	2308      	movs	r3, #8
 800876e:	e044      	b.n	80087fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008776:	f003 0302 	and.w	r3, r3, #2
 800877a:	2b00      	cmp	r3, #0
 800877c:	d005      	beq.n	800878a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2202      	movs	r2, #2
 8008784:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008786:	2302      	movs	r3, #2
 8008788:	e037      	b.n	80087fa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2220      	movs	r2, #32
 800879e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80087a0:	2320      	movs	r3, #32
 80087a2:	e02a      	b.n	80087fa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80087ac:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	061a      	lsls	r2, r3, #24
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	021b      	lsls	r3, r3, #8
 80087b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087ba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087c4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	0e1b      	lsrs	r3, r3, #24
 80087ca:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ce:	601a      	str	r2, [r3, #0]
    scr++;
 80087d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d2:	3304      	adds	r3, #4
 80087d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	061a      	lsls	r2, r3, #24
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087e2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	0a1b      	lsrs	r3, r3, #8
 80087e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087ec:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	0e1b      	lsrs	r3, r3, #24
 80087f2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	373c      	adds	r7, #60	; 0x3c
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd90      	pop	{r4, r7, pc}

08008802 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e076      	b.n	8008902 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b00      	cmp	r3, #0
 800881a:	d108      	bne.n	800882e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008824:	d009      	beq.n	800883a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	61da      	str	r2, [r3, #28]
 800882c:	e005      	b.n	800883a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d106      	bne.n	800885a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7fa fbc5 	bl	8002fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008870:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008882:	431a      	orrs	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800888c:	431a      	orrs	r2, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088aa:	431a      	orrs	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088be:	ea42 0103 	orr.w	r1, r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	0c1a      	lsrs	r2, r3, #16
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f002 0204 	and.w	r2, r2, #4
 80088e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b088      	sub	sp, #32
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	603b      	str	r3, [r7, #0]
 8008916:	4613      	mov	r3, r2
 8008918:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008924:	2b01      	cmp	r3, #1
 8008926:	d101      	bne.n	800892c <HAL_SPI_Transmit+0x22>
 8008928:	2302      	movs	r3, #2
 800892a:	e12d      	b.n	8008b88 <HAL_SPI_Transmit+0x27e>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008934:	f7fa fdba 	bl	80034ac <HAL_GetTick>
 8008938:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800893a:	88fb      	ldrh	r3, [r7, #6]
 800893c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	d002      	beq.n	8008950 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800894a:	2302      	movs	r3, #2
 800894c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800894e:	e116      	b.n	8008b7e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d002      	beq.n	800895c <HAL_SPI_Transmit+0x52>
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d102      	bne.n	8008962 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008960:	e10d      	b.n	8008b7e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2203      	movs	r2, #3
 8008966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	88fa      	ldrh	r2, [r7, #6]
 800897a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	88fa      	ldrh	r2, [r7, #6]
 8008980:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089a8:	d10f      	bne.n	80089ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d4:	2b40      	cmp	r3, #64	; 0x40
 80089d6:	d007      	beq.n	80089e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f0:	d14f      	bne.n	8008a92 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <HAL_SPI_Transmit+0xf6>
 80089fa:	8afb      	ldrh	r3, [r7, #22]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d142      	bne.n	8008a86 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a04:	881a      	ldrh	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	1c9a      	adds	r2, r3, #2
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a24:	e02f      	b.n	8008a86 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f003 0302 	and.w	r3, r3, #2
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d112      	bne.n	8008a5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	881a      	ldrh	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	1c9a      	adds	r2, r3, #2
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a58:	e015      	b.n	8008a86 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a5a:	f7fa fd27 	bl	80034ac <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d803      	bhi.n	8008a72 <HAL_SPI_Transmit+0x168>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d102      	bne.n	8008a78 <HAL_SPI_Transmit+0x16e>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d106      	bne.n	8008a86 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008a84:	e07b      	b.n	8008b7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1ca      	bne.n	8008a26 <HAL_SPI_Transmit+0x11c>
 8008a90:	e050      	b.n	8008b34 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HAL_SPI_Transmit+0x196>
 8008a9a:	8afb      	ldrh	r3, [r7, #22]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d144      	bne.n	8008b2a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	7812      	ldrb	r2, [r2, #0]
 8008aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008ac6:	e030      	b.n	8008b2a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d113      	bne.n	8008afe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330c      	adds	r3, #12
 8008ae0:	7812      	ldrb	r2, [r2, #0]
 8008ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	3b01      	subs	r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	86da      	strh	r2, [r3, #54]	; 0x36
 8008afc:	e015      	b.n	8008b2a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008afe:	f7fa fcd5 	bl	80034ac <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d803      	bhi.n	8008b16 <HAL_SPI_Transmit+0x20c>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b14:	d102      	bne.n	8008b1c <HAL_SPI_Transmit+0x212>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008b28:	e029      	b.n	8008b7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1c9      	bne.n	8008ac8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f8b1 	bl	8008ca0 <SPI_EndRxTxTransaction>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2220      	movs	r2, #32
 8008b48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10a      	bne.n	8008b68 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b52:	2300      	movs	r3, #0
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	613b      	str	r3, [r7, #16]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	613b      	str	r3, [r7, #16]
 8008b66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008b70:	2301      	movs	r3, #1
 8008b72:	77fb      	strb	r3, [r7, #31]
 8008b74:	e003      	b.n	8008b7e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b86:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008ba0:	f7fa fc84 	bl	80034ac <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4413      	add	r3, r2
 8008bae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008bb0:	f7fa fc7c 	bl	80034ac <HAL_GetTick>
 8008bb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008bb6:	4b39      	ldr	r3, [pc, #228]	; (8008c9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	015b      	lsls	r3, r3, #5
 8008bbc:	0d1b      	lsrs	r3, r3, #20
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	fb02 f303 	mul.w	r3, r2, r3
 8008bc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bc6:	e054      	b.n	8008c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bce:	d050      	beq.n	8008c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bd0:	f7fa fc6c 	bl	80034ac <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d902      	bls.n	8008be6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d13d      	bne.n	8008c62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685a      	ldr	r2, [r3, #4]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bfe:	d111      	bne.n	8008c24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c08:	d004      	beq.n	8008c14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c12:	d107      	bne.n	8008c24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c2c:	d10f      	bne.n	8008c4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c3c:	601a      	str	r2, [r3, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e017      	b.n	8008c92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	bf0c      	ite	eq
 8008c82:	2301      	moveq	r3, #1
 8008c84:	2300      	movne	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	461a      	mov	r2, r3
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d19b      	bne.n	8008bc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3720      	adds	r7, #32
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	2000b5a0 	.word	0x2000b5a0

08008ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af02      	add	r7, sp, #8
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2180      	movs	r1, #128	; 0x80
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7ff ff6a 	bl	8008b90 <SPI_WaitFlagStateUntilTimeout>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc6:	f043 0220 	orr.w	r2, r3, #32
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e000      	b.n	8008cd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e041      	b.n	8008d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fa f9ba 	bl	800307c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 fb1c 	bl	8009358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d001      	beq.n	8008d94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e03c      	b.n	8008e0e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1d      	ldr	r2, [pc, #116]	; (8008e18 <HAL_TIM_Base_Start+0x9c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d018      	beq.n	8008dd8 <HAL_TIM_Base_Start+0x5c>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a1c      	ldr	r2, [pc, #112]	; (8008e1c <HAL_TIM_Base_Start+0xa0>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d013      	beq.n	8008dd8 <HAL_TIM_Base_Start+0x5c>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db8:	d00e      	beq.n	8008dd8 <HAL_TIM_Base_Start+0x5c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a18      	ldr	r2, [pc, #96]	; (8008e20 <HAL_TIM_Base_Start+0xa4>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d009      	beq.n	8008dd8 <HAL_TIM_Base_Start+0x5c>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a16      	ldr	r2, [pc, #88]	; (8008e24 <HAL_TIM_Base_Start+0xa8>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d004      	beq.n	8008dd8 <HAL_TIM_Base_Start+0x5c>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a15      	ldr	r2, [pc, #84]	; (8008e28 <HAL_TIM_Base_Start+0xac>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d111      	bne.n	8008dfc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b06      	cmp	r3, #6
 8008de8:	d010      	beq.n	8008e0c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0201 	orr.w	r2, r2, #1
 8008df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfa:	e007      	b.n	8008e0c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f042 0201 	orr.w	r2, r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bc80      	pop	{r7}
 8008e16:	4770      	bx	lr
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40013400 	.word	0x40013400
 8008e20:	40000400 	.word	0x40000400
 8008e24:	40000800 	.word	0x40000800
 8008e28:	40000c00 	.word	0x40000c00

08008e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d001      	beq.n	8008e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e044      	b.n	8008ece <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2202      	movs	r2, #2
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f042 0201 	orr.w	r2, r2, #1
 8008e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1d      	ldr	r2, [pc, #116]	; (8008ed8 <HAL_TIM_Base_Start_IT+0xac>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d018      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x6c>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a1c      	ldr	r2, [pc, #112]	; (8008edc <HAL_TIM_Base_Start_IT+0xb0>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d013      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x6c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e78:	d00e      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x6c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a18      	ldr	r2, [pc, #96]	; (8008ee0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d009      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x6c>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a16      	ldr	r2, [pc, #88]	; (8008ee4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <HAL_TIM_Base_Start_IT+0x6c>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a15      	ldr	r2, [pc, #84]	; (8008ee8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d111      	bne.n	8008ebc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b06      	cmp	r3, #6
 8008ea8:	d010      	beq.n	8008ecc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0201 	orr.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eba:	e007      	b.n	8008ecc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr
 8008ed8:	40012c00 	.word	0x40012c00
 8008edc:	40013400 	.word	0x40013400
 8008ee0:	40000400 	.word	0x40000400
 8008ee4:	40000800 	.word	0x40000800
 8008ee8:	40000c00 	.word	0x40000c00

08008eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d122      	bne.n	8008f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d11b      	bne.n	8008f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f06f 0202 	mvn.w	r2, #2
 8008f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	699b      	ldr	r3, [r3, #24]
 8008f26:	f003 0303 	and.w	r3, r3, #3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f9f6 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 8008f34:	e005      	b.n	8008f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9e9 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9f8 	bl	8009332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	f003 0304 	and.w	r3, r3, #4
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d122      	bne.n	8008f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	f003 0304 	and.w	r3, r3, #4
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d11b      	bne.n	8008f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0204 	mvn.w	r2, #4
 8008f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2202      	movs	r2, #2
 8008f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f9cc 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 8008f88:	e005      	b.n	8008f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f9bf 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f9ce 	bl	8009332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	f003 0308 	and.w	r3, r3, #8
 8008fa6:	2b08      	cmp	r3, #8
 8008fa8:	d122      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0308 	and.w	r3, r3, #8
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d11b      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f06f 0208 	mvn.w	r2, #8
 8008fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2204      	movs	r2, #4
 8008fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9a2 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 8008fdc:	e005      	b.n	8008fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f995 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9a4 	bl	8009332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0310 	and.w	r3, r3, #16
 8008ffa:	2b10      	cmp	r3, #16
 8008ffc:	d122      	bne.n	8009044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0310 	and.w	r3, r3, #16
 8009008:	2b10      	cmp	r3, #16
 800900a:	d11b      	bne.n	8009044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0210 	mvn.w	r2, #16
 8009014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2208      	movs	r2, #8
 800901a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f978 	bl	8009320 <HAL_TIM_IC_CaptureCallback>
 8009030:	e005      	b.n	800903e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f96b 	bl	800930e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f97a 	bl	8009332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b01      	cmp	r3, #1
 8009050:	d10e      	bne.n	8009070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0301 	and.w	r3, r3, #1
 800905c:	2b01      	cmp	r3, #1
 800905e:	d107      	bne.n	8009070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f06f 0201 	mvn.w	r2, #1
 8009068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7f8 fda0 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800907a:	2b80      	cmp	r3, #128	; 0x80
 800907c:	d10e      	bne.n	800909c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009088:	2b80      	cmp	r3, #128	; 0x80
 800908a:	d107      	bne.n	800909c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fb75 	bl	8009786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a6:	2b40      	cmp	r3, #64	; 0x40
 80090a8:	d10e      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b4:	2b40      	cmp	r3, #64	; 0x40
 80090b6:	d107      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 f93e 	bl	8009344 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d10e      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b20      	cmp	r3, #32
 80090e2:	d107      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0220 	mvn.w	r2, #32
 80090ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fb40 	bl	8009774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_TIM_ConfigClockSource+0x1c>
 8009114:	2302      	movs	r3, #2
 8009116:	e0b4      	b.n	8009282 <HAL_TIM_ConfigClockSource+0x186>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800913e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009150:	d03e      	beq.n	80091d0 <HAL_TIM_ConfigClockSource+0xd4>
 8009152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009156:	f200 8087 	bhi.w	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 800915a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800915e:	f000 8086 	beq.w	800926e <HAL_TIM_ConfigClockSource+0x172>
 8009162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009166:	d87f      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 8009168:	2b70      	cmp	r3, #112	; 0x70
 800916a:	d01a      	beq.n	80091a2 <HAL_TIM_ConfigClockSource+0xa6>
 800916c:	2b70      	cmp	r3, #112	; 0x70
 800916e:	d87b      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 8009170:	2b60      	cmp	r3, #96	; 0x60
 8009172:	d050      	beq.n	8009216 <HAL_TIM_ConfigClockSource+0x11a>
 8009174:	2b60      	cmp	r3, #96	; 0x60
 8009176:	d877      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 8009178:	2b50      	cmp	r3, #80	; 0x50
 800917a:	d03c      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0xfa>
 800917c:	2b50      	cmp	r3, #80	; 0x50
 800917e:	d873      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 8009180:	2b40      	cmp	r3, #64	; 0x40
 8009182:	d058      	beq.n	8009236 <HAL_TIM_ConfigClockSource+0x13a>
 8009184:	2b40      	cmp	r3, #64	; 0x40
 8009186:	d86f      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 8009188:	2b30      	cmp	r3, #48	; 0x30
 800918a:	d064      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x15a>
 800918c:	2b30      	cmp	r3, #48	; 0x30
 800918e:	d86b      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 8009190:	2b20      	cmp	r3, #32
 8009192:	d060      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x15a>
 8009194:	2b20      	cmp	r3, #32
 8009196:	d867      	bhi.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
 8009198:	2b00      	cmp	r3, #0
 800919a:	d05c      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x15a>
 800919c:	2b10      	cmp	r3, #16
 800919e:	d05a      	beq.n	8009256 <HAL_TIM_ConfigClockSource+0x15a>
 80091a0:	e062      	b.n	8009268 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6899      	ldr	r1, [r3, #8]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f000 fa53 	bl	800965c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	609a      	str	r2, [r3, #8]
      break;
 80091ce:	e04f      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6818      	ldr	r0, [r3, #0]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	6899      	ldr	r1, [r3, #8]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f000 fa3c 	bl	800965c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	689a      	ldr	r2, [r3, #8]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091f2:	609a      	str	r2, [r3, #8]
      break;
 80091f4:	e03c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	6859      	ldr	r1, [r3, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	461a      	mov	r2, r3
 8009204:	f000 f9b3 	bl	800956e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2150      	movs	r1, #80	; 0x50
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fa0a 	bl	8009628 <TIM_ITRx_SetConfig>
      break;
 8009214:	e02c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6818      	ldr	r0, [r3, #0]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	461a      	mov	r2, r3
 8009224:	f000 f9d1 	bl	80095ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2160      	movs	r1, #96	; 0x60
 800922e:	4618      	mov	r0, r3
 8009230:	f000 f9fa 	bl	8009628 <TIM_ITRx_SetConfig>
      break;
 8009234:	e01c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	6859      	ldr	r1, [r3, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	461a      	mov	r2, r3
 8009244:	f000 f993 	bl	800956e <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2140      	movs	r1, #64	; 0x40
 800924e:	4618      	mov	r0, r3
 8009250:	f000 f9ea 	bl	8009628 <TIM_ITRx_SetConfig>
      break;
 8009254:	e00c      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4619      	mov	r1, r3
 8009260:	4610      	mov	r0, r2
 8009262:	f000 f9e1 	bl	8009628 <TIM_ITRx_SetConfig>
      break;
 8009266:	e003      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	73fb      	strb	r3, [r7, #15]
      break;
 800926c:	e000      	b.n	8009270 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800926e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009280:	7bfb      	ldrb	r3, [r7, #15]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800929a:	2b01      	cmp	r3, #1
 800929c:	d101      	bne.n	80092a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800929e:	2302      	movs	r3, #2
 80092a0:	e031      	b.n	8009306 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2202      	movs	r2, #2
 80092ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8c9 	bl	800944c <TIM_SlaveTimer_SetConfig>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d009      	beq.n	80092d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e018      	b.n	8009306 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68da      	ldr	r2, [r3, #12]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009316:	bf00      	nop
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	bc80      	pop	{r7}
 800931e:	4770      	bx	lr

08009320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr

08009332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009332:	b480      	push	{r7}
 8009334:	b083      	sub	sp, #12
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	bc80      	pop	{r7}
 8009354:	4770      	bx	lr
	...

08009358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a33      	ldr	r2, [pc, #204]	; (8009438 <TIM_Base_SetConfig+0xe0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d013      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a32      	ldr	r2, [pc, #200]	; (800943c <TIM_Base_SetConfig+0xe4>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d00f      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800937e:	d00b      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a2f      	ldr	r2, [pc, #188]	; (8009440 <TIM_Base_SetConfig+0xe8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d007      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a2e      	ldr	r2, [pc, #184]	; (8009444 <TIM_Base_SetConfig+0xec>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d003      	beq.n	8009398 <TIM_Base_SetConfig+0x40>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a2d      	ldr	r2, [pc, #180]	; (8009448 <TIM_Base_SetConfig+0xf0>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d108      	bne.n	80093aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800939e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a22      	ldr	r2, [pc, #136]	; (8009438 <TIM_Base_SetConfig+0xe0>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d013      	beq.n	80093da <TIM_Base_SetConfig+0x82>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a21      	ldr	r2, [pc, #132]	; (800943c <TIM_Base_SetConfig+0xe4>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00f      	beq.n	80093da <TIM_Base_SetConfig+0x82>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c0:	d00b      	beq.n	80093da <TIM_Base_SetConfig+0x82>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a1e      	ldr	r2, [pc, #120]	; (8009440 <TIM_Base_SetConfig+0xe8>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d007      	beq.n	80093da <TIM_Base_SetConfig+0x82>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a1d      	ldr	r2, [pc, #116]	; (8009444 <TIM_Base_SetConfig+0xec>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_Base_SetConfig+0x82>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a1c      	ldr	r2, [pc, #112]	; (8009448 <TIM_Base_SetConfig+0xf0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d108      	bne.n	80093ec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a09      	ldr	r2, [pc, #36]	; (8009438 <TIM_Base_SetConfig+0xe0>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_Base_SetConfig+0xc8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a08      	ldr	r2, [pc, #32]	; (800943c <TIM_Base_SetConfig+0xe4>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d103      	bne.n	8009428 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	691a      	ldr	r2, [r3, #16]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	615a      	str	r2, [r3, #20]
}
 800942e:	bf00      	nop
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr
 8009438:	40012c00 	.word	0x40012c00
 800943c:	40013400 	.word	0x40013400
 8009440:	40000400 	.word	0x40000400
 8009444:	40000800 	.word	0x40000800
 8009448:	40000c00 	.word	0x40000c00

0800944c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b086      	sub	sp, #24
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009468:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f023 0307 	bic.w	r3, r3, #7
 800947a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2b70      	cmp	r3, #112	; 0x70
 8009494:	d01a      	beq.n	80094cc <TIM_SlaveTimer_SetConfig+0x80>
 8009496:	2b70      	cmp	r3, #112	; 0x70
 8009498:	d860      	bhi.n	800955c <TIM_SlaveTimer_SetConfig+0x110>
 800949a:	2b60      	cmp	r3, #96	; 0x60
 800949c:	d054      	beq.n	8009548 <TIM_SlaveTimer_SetConfig+0xfc>
 800949e:	2b60      	cmp	r3, #96	; 0x60
 80094a0:	d85c      	bhi.n	800955c <TIM_SlaveTimer_SetConfig+0x110>
 80094a2:	2b50      	cmp	r3, #80	; 0x50
 80094a4:	d046      	beq.n	8009534 <TIM_SlaveTimer_SetConfig+0xe8>
 80094a6:	2b50      	cmp	r3, #80	; 0x50
 80094a8:	d858      	bhi.n	800955c <TIM_SlaveTimer_SetConfig+0x110>
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d019      	beq.n	80094e2 <TIM_SlaveTimer_SetConfig+0x96>
 80094ae:	2b40      	cmp	r3, #64	; 0x40
 80094b0:	d854      	bhi.n	800955c <TIM_SlaveTimer_SetConfig+0x110>
 80094b2:	2b30      	cmp	r3, #48	; 0x30
 80094b4:	d055      	beq.n	8009562 <TIM_SlaveTimer_SetConfig+0x116>
 80094b6:	2b30      	cmp	r3, #48	; 0x30
 80094b8:	d850      	bhi.n	800955c <TIM_SlaveTimer_SetConfig+0x110>
 80094ba:	2b20      	cmp	r3, #32
 80094bc:	d051      	beq.n	8009562 <TIM_SlaveTimer_SetConfig+0x116>
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d84c      	bhi.n	800955c <TIM_SlaveTimer_SetConfig+0x110>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d04d      	beq.n	8009562 <TIM_SlaveTimer_SetConfig+0x116>
 80094c6:	2b10      	cmp	r3, #16
 80094c8:	d04b      	beq.n	8009562 <TIM_SlaveTimer_SetConfig+0x116>
 80094ca:	e047      	b.n	800955c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	68d9      	ldr	r1, [r3, #12]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f000 f8be 	bl	800965c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80094e0:	e040      	b.n	8009564 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d101      	bne.n	80094ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e03b      	b.n	8009566 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6a1a      	ldr	r2, [r3, #32]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0201 	bic.w	r2, r2, #1
 8009504:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009514:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	4313      	orrs	r3, r2
 8009520:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	621a      	str	r2, [r3, #32]
      break;
 8009532:	e017      	b.n	8009564 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6899      	ldr	r1, [r3, #8]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	461a      	mov	r2, r3
 8009542:	f000 f814 	bl	800956e <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009546:	e00d      	b.n	8009564 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6899      	ldr	r1, [r3, #8]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	461a      	mov	r2, r3
 8009556:	f000 f838 	bl	80095ca <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800955a:	e003      	b.n	8009564 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	75fb      	strb	r3, [r7, #23]
      break;
 8009560:	e000      	b.n	8009564 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009562:	bf00      	nop
  }

  return status;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800956e:	b480      	push	{r7}
 8009570:	b087      	sub	sp, #28
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	f023 0201 	bic.w	r2, r3, #1
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	011b      	lsls	r3, r3, #4
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f023 030a 	bic.w	r3, r3, #10
 80095aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	621a      	str	r2, [r3, #32]
}
 80095c0:	bf00      	nop
 80095c2:	371c      	adds	r7, #28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bc80      	pop	{r7}
 80095c8:	4770      	bx	lr

080095ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b087      	sub	sp, #28
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	f023 0210 	bic.w	r2, r3, #16
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	031b      	lsls	r3, r3, #12
 80095fa:	693a      	ldr	r2, [r7, #16]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009606:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	621a      	str	r2, [r3, #32]
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr

08009628 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4313      	orrs	r3, r2
 8009646:	f043 0307 	orr.w	r3, r3, #7
 800964a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	609a      	str	r2, [r3, #8]
}
 8009652:	bf00      	nop
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr

0800965c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	021a      	lsls	r2, r3, #8
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	431a      	orrs	r2, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4313      	orrs	r3, r2
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	609a      	str	r2, [r3, #8]
}
 8009690:	bf00      	nop
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr
	...

0800969c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d101      	bne.n	80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e050      	b.n	8009756 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a1b      	ldr	r2, [pc, #108]	; (8009760 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d018      	beq.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a19      	ldr	r2, [pc, #100]	; (8009764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d013      	beq.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970a:	d00e      	beq.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a15      	ldr	r2, [pc, #84]	; (8009768 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d009      	beq.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a14      	ldr	r2, [pc, #80]	; (800976c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d004      	beq.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a12      	ldr	r2, [pc, #72]	; (8009770 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d10c      	bne.n	8009744 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4313      	orrs	r3, r2
 800973a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr
 8009760:	40012c00 	.word	0x40012c00
 8009764:	40013400 	.word	0x40013400
 8009768:	40000400 	.word	0x40000400
 800976c:	40000800 	.word	0x40000800
 8009770:	40000c00 	.word	0x40000c00

08009774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	bc80      	pop	{r7}
 8009784:	4770      	bx	lr

08009786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800978e:	bf00      	nop
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr

08009798 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009798:	b084      	sub	sp, #16
 800979a:	b480      	push	{r7}
 800979c:	b085      	sub	sp, #20
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	f107 001c 	add.w	r0, r7, #28
 80097a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80097ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80097b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80097b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80097b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80097ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80097be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80097c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80097d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bc80      	pop	{r7}
 80097e8:	b004      	add	sp, #16
 80097ea:	4770      	bx	lr

080097ec <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	bc80      	pop	{r7}
 8009802:	4770      	bx	lr

08009804 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	370c      	adds	r7, #12
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr

08009824 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2203      	movs	r2, #3
 8009830:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	bc80      	pop	{r7}
 800983c:	4770      	bx	lr

0800983e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0303 	and.w	r3, r3, #3
}
 800984e:	4618      	mov	r0, r3
 8009850:	370c      	adds	r7, #12
 8009852:	46bd      	mov	sp, r7
 8009854:	bc80      	pop	{r7}
 8009856:	4770      	bx	lr

08009858 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009876:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800987c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009882:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	4313      	orrs	r3, r2
 8009888:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009892:	f023 030f 	bic.w	r3, r3, #15
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	431a      	orrs	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bc80      	pop	{r7}
 80098a8:	4770      	bx	lr

080098aa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	b2db      	uxtb	r3, r3
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	bc80      	pop	{r7}
 80098c0:	4770      	bx	lr

080098c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b085      	sub	sp, #20
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3314      	adds	r3, #20
 80098d0:	461a      	mov	r2, r3
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
}  
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bc80      	pop	{r7}
 80098e4:	4770      	bx	lr

080098e6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800990c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009912:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009918:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009930:	2300      	movs	r3, #0

}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr

0800993c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800994a:	2310      	movs	r3, #16
 800994c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800994e:	2340      	movs	r3, #64	; 0x40
 8009950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009952:	2300      	movs	r3, #0
 8009954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800995a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800995c:	f107 0308 	add.w	r3, r7, #8
 8009960:	4619      	mov	r1, r3
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7ff ff78 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009968:	f241 3288 	movw	r2, #5000	; 0x1388
 800996c:	2110      	movs	r1, #16
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 fa18 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009976:	69fb      	ldr	r3, [r7, #28]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3720      	adds	r7, #32
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800998e:	2311      	movs	r3, #17
 8009990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009992:	2340      	movs	r3, #64	; 0x40
 8009994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009996:	2300      	movs	r3, #0
 8009998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800999a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800999e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099a0:	f107 0308 	add.w	r3, r7, #8
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff ff56 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80099ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b0:	2111      	movs	r1, #17
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f9f6 	bl	8009da4 <SDMMC_GetCmdResp1>
 80099b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ba:	69fb      	ldr	r3, [r7, #28]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80099d2:	2312      	movs	r3, #18
 80099d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099d6:	2340      	movs	r3, #64	; 0x40
 80099d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099da:	2300      	movs	r3, #0
 80099dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099e4:	f107 0308 	add.w	r3, r7, #8
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7ff ff34 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80099f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099f4:	2112      	movs	r1, #18
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f9d4 	bl	8009da4 <SDMMC_GetCmdResp1>
 80099fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099fe:	69fb      	ldr	r3, [r7, #28]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3720      	adds	r7, #32
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009a16:	2318      	movs	r3, #24
 8009a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a1a:	2340      	movs	r3, #64	; 0x40
 8009a1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a28:	f107 0308 	add.w	r3, r7, #8
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff ff12 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a38:	2118      	movs	r1, #24
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9b2 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a42:	69fb      	ldr	r3, [r7, #28]
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3720      	adds	r7, #32
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009a5a:	2319      	movs	r3, #25
 8009a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a5e:	2340      	movs	r3, #64	; 0x40
 8009a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a62:	2300      	movs	r3, #0
 8009a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a6c:	f107 0308 	add.w	r3, r7, #8
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fef0 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a7c:	2119      	movs	r1, #25
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f990 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009a84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a86:	69fb      	ldr	r3, [r7, #28]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3720      	adds	r7, #32
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aa0:	2340      	movs	r3, #64	; 0x40
 8009aa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff fecf 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009aba:	4a05      	ldr	r2, [pc, #20]	; (8009ad0 <SDMMC_CmdStopTransfer+0x40>)
 8009abc:	210c      	movs	r1, #12
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f970 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ac6:	69fb      	ldr	r3, [r7, #28]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3720      	adds	r7, #32
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	05f5e100 	.word	0x05f5e100

08009ad4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009ae4:	2307      	movs	r3, #7
 8009ae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ae8:	2340      	movs	r3, #64	; 0x40
 8009aea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009af6:	f107 0310 	add.w	r3, r7, #16
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7ff feab 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b06:	2107      	movs	r1, #7
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 f94b 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009b0e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3728      	adds	r7, #40	; 0x28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}

08009b1a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009b1a:	b580      	push	{r7, lr}
 8009b1c:	b088      	sub	sp, #32
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b38:	f107 0308 	add.w	r3, r7, #8
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff fe8a 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fb63 	bl	800a210 <SDMMC_GetCmdError>
 8009b4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b4c:	69fb      	ldr	r3, [r7, #28]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b088      	sub	sp, #32
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009b5e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009b62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009b64:	2308      	movs	r3, #8
 8009b66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b68:	2340      	movs	r3, #64	; 0x40
 8009b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b76:	f107 0308 	add.w	r3, r7, #8
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff fe6b 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 faf6 	bl	800a174 <SDMMC_GetCmdResp7>
 8009b88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3720      	adds	r7, #32
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ba2:	2337      	movs	r3, #55	; 0x37
 8009ba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ba6:	2340      	movs	r3, #64	; 0x40
 8009ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009baa:	2300      	movs	r3, #0
 8009bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb4:	f107 0308 	add.w	r3, r7, #8
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fe4c 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc4:	2137      	movs	r1, #55	; 0x37
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f8ec 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bce:	69fb      	ldr	r3, [r7, #28]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3720      	adds	r7, #32
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009bee:	2329      	movs	r3, #41	; 0x29
 8009bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bf2:	2340      	movs	r3, #64	; 0x40
 8009bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fe26 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f9ff 	bl	800a010 <SDMMC_GetCmdResp3>
 8009c12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c14:	69fb      	ldr	r3, [r7, #28]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b088      	sub	sp, #32
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009c2c:	2306      	movs	r3, #6
 8009c2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c30:	2340      	movs	r3, #64	; 0x40
 8009c32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c3e:	f107 0308 	add.w	r3, r7, #8
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7ff fe07 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c4e:	2106      	movs	r1, #6
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f8a7 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c58:	69fb      	ldr	r3, [r7, #28]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3720      	adds	r7, #32
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b088      	sub	sp, #32
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009c6e:	2333      	movs	r3, #51	; 0x33
 8009c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c76:	2300      	movs	r3, #0
 8009c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff fde6 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c90:	2133      	movs	r1, #51	; 0x33
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f886 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009cb4:	23c0      	movs	r3, #192	; 0xc0
 8009cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cc2:	f107 0308 	add.w	r3, r7, #8
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff fdc5 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f956 	bl	8009f80 <SDMMC_GetCmdResp2>
 8009cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009cee:	2309      	movs	r3, #9
 8009cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009cf2:	23c0      	movs	r3, #192	; 0xc0
 8009cf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fda6 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f937 	bl	8009f80 <SDMMC_GetCmdResp2>
 8009d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d14:	69fb      	ldr	r3, [r7, #28]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3720      	adds	r7, #32
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b088      	sub	sp, #32
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d3e:	f107 0308 	add.w	r3, r7, #8
 8009d42:	4619      	mov	r1, r3
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fd87 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	2103      	movs	r1, #3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f99a 	bl	800a088 <SDMMC_GetCmdResp6>
 8009d54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d56:	69fb      	ldr	r3, [r7, #28]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3720      	adds	r7, #32
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009d6e:	230d      	movs	r3, #13
 8009d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d72:	2340      	movs	r3, #64	; 0x40
 8009d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d80:	f107 0308 	add.w	r3, r7, #8
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff fd66 	bl	8009858 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d90:	210d      	movs	r1, #13
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f806 	bl	8009da4 <SDMMC_GetCmdResp1>
 8009d98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3720      	adds	r7, #32
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b088      	sub	sp, #32
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	460b      	mov	r3, r1
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009db2:	4b70      	ldr	r3, [pc, #448]	; (8009f74 <SDMMC_GetCmdResp1+0x1d0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a70      	ldr	r2, [pc, #448]	; (8009f78 <SDMMC_GetCmdResp1+0x1d4>)
 8009db8:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbc:	0a5a      	lsrs	r2, r3, #9
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	fb02 f303 	mul.w	r3, r2, r3
 8009dc4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	1e5a      	subs	r2, r3, #1
 8009dca:	61fa      	str	r2, [r7, #28]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d102      	bne.n	8009dd6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dd4:	e0c9      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dda:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d0ef      	beq.n	8009dc6 <SDMMC_GetCmdResp1+0x22>
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1ea      	bne.n	8009dc6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	f003 0304 	and.w	r3, r3, #4
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2204      	movs	r2, #4
 8009e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e02:	2304      	movs	r3, #4
 8009e04:	e0b1      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2201      	movs	r2, #1
 8009e16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e0a6      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	22c5      	movs	r2, #197	; 0xc5
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7ff fd41 	bl	80098aa <SDIO_GetCommandResponse>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	7afb      	ldrb	r3, [r7, #11]
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d001      	beq.n	8009e36 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e099      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009e36:	2100      	movs	r1, #0
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7ff fd42 	bl	80098c2 <SDIO_GetResponse>
 8009e3e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	4b4e      	ldr	r3, [pc, #312]	; (8009f7c <SDMMC_GetCmdResp1+0x1d8>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e08d      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	da02      	bge.n	8009e5a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e58:	e087      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009e64:	2340      	movs	r3, #64	; 0x40
 8009e66:	e080      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009e72:	2380      	movs	r3, #128	; 0x80
 8009e74:	e079      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e84:	e071      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e94:	e069      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ea4:	e061      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d002      	beq.n	8009eb6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eb4:	e059      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d002      	beq.n	8009ec6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec4:	e051      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ed4:	e049      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009ee0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ee4:	e041      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009ef0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ef4:	e039      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009f00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009f04:	e031      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f14:	e029      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009f20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009f24:	e021      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009f30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009f34:	e019      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009f44:	e011      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009f50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f54:	e009      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f003 0308 	and.w	r3, r3, #8
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009f60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009f64:	e001      	b.n	8009f6a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3720      	adds	r7, #32
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	2000b5a0 	.word	0x2000b5a0
 8009f78:	10624dd3 	.word	0x10624dd3
 8009f7c:	fdffe008 	.word	0xfdffe008

08009f80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f88:	4b1f      	ldr	r3, [pc, #124]	; (800a008 <SDMMC_GetCmdResp2+0x88>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1f      	ldr	r2, [pc, #124]	; (800a00c <SDMMC_GetCmdResp2+0x8c>)
 8009f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f92:	0a5b      	lsrs	r3, r3, #9
 8009f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f98:	fb02 f303 	mul.w	r3, r2, r3
 8009f9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1e5a      	subs	r2, r3, #1
 8009fa2:	60fa      	str	r2, [r7, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d102      	bne.n	8009fae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fac:	e026      	b.n	8009ffc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0ef      	beq.n	8009f9e <SDMMC_GetCmdResp2+0x1e>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1ea      	bne.n	8009f9e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d004      	beq.n	8009fde <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2204      	movs	r2, #4
 8009fd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fda:	2304      	movs	r3, #4
 8009fdc:	e00e      	b.n	8009ffc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d004      	beq.n	8009ff4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e003      	b.n	8009ffc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	22c5      	movs	r2, #197	; 0xc5
 8009ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	bc80      	pop	{r7}
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	2000b5a0 	.word	0x2000b5a0
 800a00c:	10624dd3 	.word	0x10624dd3

0800a010 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a018:	4b19      	ldr	r3, [pc, #100]	; (800a080 <SDMMC_GetCmdResp3+0x70>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a19      	ldr	r2, [pc, #100]	; (800a084 <SDMMC_GetCmdResp3+0x74>)
 800a01e:	fba2 2303 	umull	r2, r3, r2, r3
 800a022:	0a5b      	lsrs	r3, r3, #9
 800a024:	f241 3288 	movw	r2, #5000	; 0x1388
 800a028:	fb02 f303 	mul.w	r3, r2, r3
 800a02c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1e5a      	subs	r2, r3, #1
 800a032:	60fa      	str	r2, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a03c:	e01b      	b.n	800a076 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0ef      	beq.n	800a02e <SDMMC_GetCmdResp3+0x1e>
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1ea      	bne.n	800a02e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d004      	beq.n	800a06e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2204      	movs	r2, #4
 800a068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a06a:	2304      	movs	r3, #4
 800a06c:	e003      	b.n	800a076 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	22c5      	movs	r2, #197	; 0xc5
 800a072:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bc80      	pop	{r7}
 800a07e:	4770      	bx	lr
 800a080:	2000b5a0 	.word	0x2000b5a0
 800a084:	10624dd3 	.word	0x10624dd3

0800a088 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b088      	sub	sp, #32
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	460b      	mov	r3, r1
 800a092:	607a      	str	r2, [r7, #4]
 800a094:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a096:	4b35      	ldr	r3, [pc, #212]	; (800a16c <SDMMC_GetCmdResp6+0xe4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a35      	ldr	r2, [pc, #212]	; (800a170 <SDMMC_GetCmdResp6+0xe8>)
 800a09c:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a0:	0a5b      	lsrs	r3, r3, #9
 800a0a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a6:	fb02 f303 	mul.w	r3, r2, r3
 800a0aa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	1e5a      	subs	r2, r3, #1
 800a0b0:	61fa      	str	r2, [r7, #28]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0ba:	e052      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0ef      	beq.n	800a0ac <SDMMC_GetCmdResp6+0x24>
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1ea      	bne.n	800a0ac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	e03a      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d004      	beq.n	800a102 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e02f      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7ff fbd1 	bl	80098aa <SDIO_GetCommandResponse>
 800a108:	4603      	mov	r3, r0
 800a10a:	461a      	mov	r2, r3
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	4293      	cmp	r3, r2
 800a110:	d001      	beq.n	800a116 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a112:	2301      	movs	r3, #1
 800a114:	e025      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	22c5      	movs	r2, #197	; 0xc5
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a11c:	2100      	movs	r1, #0
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7ff fbcf 	bl	80098c2 <SDIO_GetResponse>
 800a124:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	b29a      	uxth	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e011      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a14c:	e009      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a15c:	e001      	b.n	800a162 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a15e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	2000b5a0 	.word	0x2000b5a0
 800a170:	10624dd3 	.word	0x10624dd3

0800a174 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a17c:	4b22      	ldr	r3, [pc, #136]	; (800a208 <SDMMC_GetCmdResp7+0x94>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a22      	ldr	r2, [pc, #136]	; (800a20c <SDMMC_GetCmdResp7+0x98>)
 800a182:	fba2 2303 	umull	r2, r3, r2, r3
 800a186:	0a5b      	lsrs	r3, r3, #9
 800a188:	f241 3288 	movw	r2, #5000	; 0x1388
 800a18c:	fb02 f303 	mul.w	r3, r2, r3
 800a190:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	1e5a      	subs	r2, r3, #1
 800a196:	60fa      	str	r2, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a19c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1a0:	e02c      	b.n	800a1fc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0ef      	beq.n	800a192 <SDMMC_GetCmdResp7+0x1e>
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1ea      	bne.n	800a192 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d004      	beq.n	800a1d2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	e014      	b.n	800a1fc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d004      	beq.n	800a1e8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e009      	b.n	800a1fc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2240      	movs	r2, #64	; 0x40
 800a1f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a1fa:	2300      	movs	r3, #0
  
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	bc80      	pop	{r7}
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	2000b5a0 	.word	0x2000b5a0
 800a20c:	10624dd3 	.word	0x10624dd3

0800a210 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a218:	4b10      	ldr	r3, [pc, #64]	; (800a25c <SDMMC_GetCmdError+0x4c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a10      	ldr	r2, [pc, #64]	; (800a260 <SDMMC_GetCmdError+0x50>)
 800a21e:	fba2 2303 	umull	r2, r3, r2, r3
 800a222:	0a5b      	lsrs	r3, r3, #9
 800a224:	f241 3288 	movw	r2, #5000	; 0x1388
 800a228:	fb02 f303 	mul.w	r3, r2, r3
 800a22c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1e5a      	subs	r2, r3, #1
 800a232:	60fa      	str	r2, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a238:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a23c:	e009      	b.n	800a252 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a246:	2b00      	cmp	r3, #0
 800a248:	d0f1      	beq.n	800a22e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	22c5      	movs	r2, #197	; 0xc5
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	bc80      	pop	{r7}
 800a25a:	4770      	bx	lr
 800a25c:	2000b5a0 	.word	0x2000b5a0
 800a260:	10624dd3 	.word	0x10624dd3

0800a264 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a264:	b084      	sub	sp, #16
 800a266:	b480      	push	{r7}
 800a268:	b083      	sub	sp, #12
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	f107 0014 	add.w	r0, r7, #20
 800a272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bc80      	pop	{r7}
 800a280:	b004      	add	sp, #16
 800a282:	4770      	bx	lr

0800a284 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a284:	b480      	push	{r7}
 800a286:	b085      	sub	sp, #20
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a294:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a298:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bc80      	pop	{r7}
 800a2ae:	4770      	bx	lr

0800a2b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b085      	sub	sp, #20
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a2b8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800a2bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a2c4:	b29a      	uxth	r2, r3
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	43db      	mvns	r3, r3
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4013      	ands	r3, r2
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr

0800a2e4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bc80      	pop	{r7}
 800a2fa:	4770      	bx	lr

0800a2fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	f107 0014 	add.w	r0, r7, #20
 800a30a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	bc80      	pop	{r7}
 800a338:	b004      	add	sp, #16
 800a33a:	4770      	bx	lr

0800a33c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b09d      	sub	sp, #116	; 0x74
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	881b      	ldrh	r3, [r3, #0]
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a35e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a362:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	78db      	ldrb	r3, [r3, #3]
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d81f      	bhi.n	800a3ae <USB_ActivateEndpoint+0x72>
 800a36e:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <USB_ActivateEndpoint+0x38>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a385 	.word	0x0800a385
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a3b7 	.word	0x0800a3b7
 800a380:	0800a393 	.word	0x0800a393
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a384:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a38c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a390:	e012      	b.n	800a3b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a392:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a396:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a39a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a39e:	e00b      	b.n	800a3b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a3a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a3a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a3ac:	e004      	b.n	800a3b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a3b4:	e000      	b.n	800a3b8 <USB_ActivateEndpoint+0x7c>
      break;
 800a3b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	441a      	add	r2, r3
 800a3c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a3c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	441a      	add	r2, r3
 800a408:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a40c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	7b1b      	ldrb	r3, [r3, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f040 8178 	bne.w	800a71a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	785b      	ldrb	r3, [r3, #1]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 8084 	beq.w	800a53c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	61bb      	str	r3, [r7, #24]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a43e:	b29b      	uxth	r3, r3
 800a440:	461a      	mov	r2, r3
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	4413      	add	r3, r2
 800a446:	61bb      	str	r3, [r7, #24]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	011a      	lsls	r2, r3, #4
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	4413      	add	r3, r2
 800a452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a456:	617b      	str	r3, [r7, #20]
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	88db      	ldrh	r3, [r3, #6]
 800a45c:	085b      	lsrs	r3, r3, #1
 800a45e:	b29b      	uxth	r3, r3
 800a460:	005b      	lsls	r3, r3, #1
 800a462:	b29a      	uxth	r2, r3
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	4413      	add	r3, r2
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	827b      	strh	r3, [r7, #18]
 800a476:	8a7b      	ldrh	r3, [r7, #18]
 800a478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01b      	beq.n	800a4b8 <USB_ActivateEndpoint+0x17c>
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4413      	add	r3, r2
 800a48a:	881b      	ldrh	r3, [r3, #0]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a496:	823b      	strh	r3, [r7, #16]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	441a      	add	r2, r3
 800a4a2:	8a3b      	ldrh	r3, [r7, #16]
 800a4a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	78db      	ldrb	r3, [r3, #3]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d020      	beq.n	800a502 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4d6:	81bb      	strh	r3, [r7, #12]
 800a4d8:	89bb      	ldrh	r3, [r7, #12]
 800a4da:	f083 0320 	eor.w	r3, r3, #32
 800a4de:	81bb      	strh	r3, [r7, #12]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	441a      	add	r2, r3
 800a4ea:	89bb      	ldrh	r3, [r7, #12]
 800a4ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	8013      	strh	r3, [r2, #0]
 800a500:	e2d5      	b.n	800aaae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a518:	81fb      	strh	r3, [r7, #14]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	441a      	add	r2, r3
 800a524:	89fb      	ldrh	r3, [r7, #14]
 800a526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a52a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a52e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a536:	b29b      	uxth	r3, r3
 800a538:	8013      	strh	r3, [r2, #0]
 800a53a:	e2b8      	b.n	800aaae <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	633b      	str	r3, [r7, #48]	; 0x30
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a546:	b29b      	uxth	r3, r3
 800a548:	461a      	mov	r2, r3
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	4413      	add	r3, r2
 800a54e:	633b      	str	r3, [r7, #48]	; 0x30
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	011a      	lsls	r2, r3, #4
 800a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a558:	4413      	add	r3, r2
 800a55a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a55e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	88db      	ldrh	r3, [r3, #6]
 800a564:	085b      	lsrs	r3, r3, #1
 800a566:	b29b      	uxth	r3, r3
 800a568:	005b      	lsls	r3, r3, #1
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	62bb      	str	r3, [r7, #40]	; 0x28
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	461a      	mov	r2, r3
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	4413      	add	r3, r2
 800a582:	62bb      	str	r3, [r7, #40]	; 0x28
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	011a      	lsls	r2, r3, #4
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	4413      	add	r3, r2
 800a58e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b3e      	cmp	r3, #62	; 0x3e
 800a5aa:	d91d      	bls.n	800a5e8 <USB_ActivateEndpoint+0x2ac>
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	095b      	lsrs	r3, r3, #5
 800a5b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	f003 031f 	and.w	r3, r3, #31
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d102      	bne.n	800a5c6 <USB_ActivateEndpoint+0x28a>
 800a5c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	029b      	lsls	r3, r3, #10
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	e026      	b.n	800a636 <USB_ActivateEndpoint+0x2fa>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10a      	bne.n	800a606 <USB_ActivateEndpoint+0x2ca>
 800a5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	e017      	b.n	800a636 <USB_ActivateEndpoint+0x2fa>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	085b      	lsrs	r3, r3, #1
 800a60c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <USB_ActivateEndpoint+0x2e4>
 800a61a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a61c:	3301      	adds	r3, #1
 800a61e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	b29a      	uxth	r2, r3
 800a626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a628:	b29b      	uxth	r3, r3
 800a62a:	029b      	lsls	r3, r3, #10
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	4313      	orrs	r3, r2
 800a630:	b29a      	uxth	r2, r3
 800a632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a634:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	881b      	ldrh	r3, [r3, #0]
 800a642:	847b      	strh	r3, [r7, #34]	; 0x22
 800a644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d01b      	beq.n	800a686 <USB_ActivateEndpoint+0x34a>
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	4413      	add	r3, r2
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a664:	843b      	strh	r3, [r7, #32]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	441a      	add	r2, r3
 800a670:	8c3b      	ldrh	r3, [r7, #32]
 800a672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a67a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a682:	b29b      	uxth	r3, r3
 800a684:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d124      	bne.n	800a6d8 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	4413      	add	r3, r2
 800a698:	881b      	ldrh	r3, [r3, #0]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a4:	83bb      	strh	r3, [r7, #28]
 800a6a6:	8bbb      	ldrh	r3, [r7, #28]
 800a6a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6ac:	83bb      	strh	r3, [r7, #28]
 800a6ae:	8bbb      	ldrh	r3, [r7, #28]
 800a6b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6b4:	83bb      	strh	r3, [r7, #28]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	441a      	add	r2, r3
 800a6c0:	8bbb      	ldrh	r3, [r7, #28]
 800a6c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	8013      	strh	r3, [r2, #0]
 800a6d6:	e1ea      	b.n	800aaae <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ee:	83fb      	strh	r3, [r7, #30]
 800a6f0:	8bfb      	ldrh	r3, [r7, #30]
 800a6f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a6f6:	83fb      	strh	r3, [r7, #30]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	441a      	add	r2, r3
 800a702:	8bfb      	ldrh	r3, [r7, #30]
 800a704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a70c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a714:	b29b      	uxth	r3, r3
 800a716:	8013      	strh	r3, [r2, #0]
 800a718:	e1c9      	b.n	800aaae <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	78db      	ldrb	r3, [r3, #3]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d11e      	bne.n	800a760 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a738:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	441a      	add	r2, r3
 800a746:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a74a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a74e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a752:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	8013      	strh	r3, [r2, #0]
 800a75e:	e01d      	b.n	800a79c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	4413      	add	r3, r2
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a776:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	441a      	add	r2, r3
 800a784:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a78c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a798:	b29b      	uxth	r3, r3
 800a79a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7ac:	4413      	add	r3, r2
 800a7ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	011a      	lsls	r2, r3, #4
 800a7b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7be:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	891b      	ldrh	r3, [r3, #8]
 800a7c4:	085b      	lsrs	r3, r3, #1
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	005b      	lsls	r3, r3, #1
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7ce:	801a      	strh	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	657b      	str	r3, [r7, #84]	; 0x54
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7e0:	4413      	add	r3, r2
 800a7e2:	657b      	str	r3, [r7, #84]	; 0x54
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	011a      	lsls	r2, r3, #4
 800a7ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a7f2:	653b      	str	r3, [r7, #80]	; 0x50
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	895b      	ldrh	r3, [r3, #10]
 800a7f8:	085b      	lsrs	r3, r3, #1
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a802:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	785b      	ldrb	r3, [r3, #1]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f040 8093 	bne.w	800a934 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a81e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d01b      	beq.n	800a862 <USB_ActivateEndpoint+0x526>
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	b29b      	uxth	r3, r3
 800a838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a840:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	441a      	add	r2, r3
 800a84c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a84e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a85a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a85e:	b29b      	uxth	r3, r3
 800a860:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a870:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01b      	beq.n	800a8b2 <USB_ActivateEndpoint+0x576>
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	b29b      	uxth	r3, r3
 800a888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a88c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a890:	877b      	strh	r3, [r7, #58]	; 0x3a
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	441a      	add	r2, r3
 800a89c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a89e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c8:	873b      	strh	r3, [r7, #56]	; 0x38
 800a8ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a8cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8d0:	873b      	strh	r3, [r7, #56]	; 0x38
 800a8d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a8d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8d8:	873b      	strh	r3, [r7, #56]	; 0x38
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	441a      	add	r2, r3
 800a8e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a8e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	b29b      	uxth	r3, r3
 800a908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a90c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a910:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	441a      	add	r2, r3
 800a91c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a91e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a92e:	b29b      	uxth	r3, r3
 800a930:	8013      	strh	r3, [r2, #0]
 800a932:	e0bc      	b.n	800aaae <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d01d      	beq.n	800a98c <USB_ActivateEndpoint+0x650>
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a966:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	441a      	add	r2, r3
 800a974:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a97c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a988:	b29b      	uxth	r3, r3
 800a98a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	4413      	add	r3, r2
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a99c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01d      	beq.n	800a9e4 <USB_ActivateEndpoint+0x6a8>
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9be:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	441a      	add	r2, r3
 800a9cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a9d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	78db      	ldrb	r3, [r3, #3]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d024      	beq.n	800aa36 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aa06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aa0a:	f083 0320 	eor.w	r3, r3, #32
 800aa0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	441a      	add	r2, r3
 800aa1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800aa20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	8013      	strh	r3, [r2, #0]
 800aa34:	e01d      	b.n	800aa72 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	441a      	add	r2, r3
 800aa5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800aa5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	4413      	add	r3, r2
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	441a      	add	r2, r3
 800aa96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800aaae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3774      	adds	r7, #116	; 0x74
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bc80      	pop	{r7}
 800aaba:	4770      	bx	lr

0800aabc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b08d      	sub	sp, #52	; 0x34
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	7b1b      	ldrb	r3, [r3, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f040 808e 	bne.w	800abec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	785b      	ldrb	r3, [r3, #1]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d044      	beq.n	800ab62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4413      	add	r3, r2
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	81bb      	strh	r3, [r7, #12]
 800aae6:	89bb      	ldrh	r3, [r7, #12]
 800aae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01b      	beq.n	800ab28 <USB_DeactivateEndpoint+0x6c>
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab06:	817b      	strh	r3, [r7, #10]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	441a      	add	r2, r3
 800ab12:	897b      	ldrh	r3, [r7, #10]
 800ab14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab3e:	813b      	strh	r3, [r7, #8]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	441a      	add	r2, r3
 800ab4a:	893b      	ldrh	r3, [r7, #8]
 800ab4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	8013      	strh	r3, [r2, #0]
 800ab60:	e192      	b.n	800ae88 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	4413      	add	r3, r2
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	827b      	strh	r3, [r7, #18]
 800ab70:	8a7b      	ldrh	r3, [r7, #18]
 800ab72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d01b      	beq.n	800abb2 <USB_DeactivateEndpoint+0xf6>
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab90:	823b      	strh	r3, [r7, #16]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	441a      	add	r2, r3
 800ab9c:	8a3b      	ldrh	r3, [r7, #16]
 800ab9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abae:	b29b      	uxth	r3, r3
 800abb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc8:	81fb      	strh	r3, [r7, #14]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	441a      	add	r2, r3
 800abd4:	89fb      	ldrh	r3, [r7, #14]
 800abd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	8013      	strh	r3, [r2, #0]
 800abea:	e14d      	b.n	800ae88 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	785b      	ldrb	r3, [r3, #1]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f040 80a5 	bne.w	800ad40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	843b      	strh	r3, [r7, #32]
 800ac04:	8c3b      	ldrh	r3, [r7, #32]
 800ac06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d01b      	beq.n	800ac46 <USB_DeactivateEndpoint+0x18a>
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	4413      	add	r3, r2
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac24:	83fb      	strh	r3, [r7, #30]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	441a      	add	r2, r3
 800ac30:	8bfb      	ldrh	r3, [r7, #30]
 800ac32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	881b      	ldrh	r3, [r3, #0]
 800ac52:	83bb      	strh	r3, [r7, #28]
 800ac54:	8bbb      	ldrh	r3, [r7, #28]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d01b      	beq.n	800ac96 <USB_DeactivateEndpoint+0x1da>
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac74:	837b      	strh	r3, [r7, #26]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	441a      	add	r2, r3
 800ac80:	8b7b      	ldrh	r3, [r7, #26]
 800ac82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	4413      	add	r3, r2
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acac:	833b      	strh	r3, [r7, #24]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	441a      	add	r2, r3
 800acb8:	8b3b      	ldrh	r3, [r7, #24]
 800acba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acca:	b29b      	uxth	r3, r3
 800accc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	b29b      	uxth	r3, r3
 800acdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ace0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ace4:	82fb      	strh	r3, [r7, #22]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	441a      	add	r2, r3
 800acf0:	8afb      	ldrh	r3, [r7, #22]
 800acf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	881b      	ldrh	r3, [r3, #0]
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad1c:	82bb      	strh	r3, [r7, #20]
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	441a      	add	r2, r3
 800ad28:	8abb      	ldrh	r3, [r7, #20]
 800ad2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	8013      	strh	r3, [r2, #0]
 800ad3e:	e0a3      	b.n	800ae88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4413      	add	r3, r2
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ad4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ad50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d01b      	beq.n	800ad90 <USB_DeactivateEndpoint+0x2d4>
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	4413      	add	r3, r2
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	441a      	add	r2, r3
 800ad7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ad7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ad9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d01b      	beq.n	800ade0 <USB_DeactivateEndpoint+0x324>
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	4413      	add	r3, r2
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adbe:	853b      	strh	r3, [r7, #40]	; 0x28
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	441a      	add	r2, r3
 800adca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800add0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800add4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800add8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800addc:	b29b      	uxth	r3, r3
 800adde:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	b29b      	uxth	r3, r3
 800adee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adf6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	441a      	add	r2, r3
 800ae02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	441a      	add	r2, r3
 800ae3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae66:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	441a      	add	r2, r3
 800ae72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3734      	adds	r7, #52	; 0x34
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bc80      	pop	{r7}
 800ae92:	4770      	bx	lr

0800ae94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b0c2      	sub	sp, #264	; 0x108
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aea2:	6018      	str	r0, [r3, #0]
 800aea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeac:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	785b      	ldrb	r3, [r3, #1]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	f040 86b7 	bne.w	800bc2e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800aec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	699a      	ldr	r2, [r3, #24]
 800aecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d908      	bls.n	800aeee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800aedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aeec:	e007      	b.n	800aefe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800aeee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800aefe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	7b1b      	ldrb	r3, [r3, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d13a      	bne.n	800af84 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800af0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6959      	ldr	r1, [r3, #20]
 800af1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	88da      	ldrh	r2, [r3, #6]
 800af26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af30:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af34:	6800      	ldr	r0, [r0, #0]
 800af36:	f001 fc9c 	bl	800c872 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800af3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	613b      	str	r3, [r7, #16]
 800af46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af54:	b29b      	uxth	r3, r3
 800af56:	461a      	mov	r2, r3
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	4413      	add	r3, r2
 800af5c:	613b      	str	r3, [r7, #16]
 800af5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	011a      	lsls	r2, r3, #4
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	4413      	add	r3, r2
 800af70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	801a      	strh	r2, [r3, #0]
 800af80:	f000 be1f 	b.w	800bbc2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800af84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	78db      	ldrb	r3, [r3, #3]
 800af90:	2b02      	cmp	r3, #2
 800af92:	f040 8462 	bne.w	800b85a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800af96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	6a1a      	ldr	r2, [r3, #32]
 800afa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	429a      	cmp	r2, r3
 800afb0:	f240 83df 	bls.w	800b772 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800afb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800afde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	441a      	add	r2, r3
 800aff8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800affc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b004:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6a1a      	ldr	r2, [r3, #32]
 800b01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b020:	1ad2      	subs	r2, r2, r3
 800b022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 81c7 	beq.w	800b3e4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	633b      	str	r3, [r7, #48]	; 0x30
 800b062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	785b      	ldrb	r3, [r3, #1]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d177      	bne.n	800b162 <USB_EPStartXfer+0x2ce>
 800b072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	461a      	mov	r2, r3
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	4413      	add	r3, r2
 800b094:	62bb      	str	r3, [r7, #40]	; 0x28
 800b096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	011a      	lsls	r2, r3, #4
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	881b      	ldrh	r3, [r3, #0]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	801a      	strh	r2, [r3, #0]
 800b0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c2:	2b3e      	cmp	r3, #62	; 0x3e
 800b0c4:	d921      	bls.n	800b10a <USB_EPStartXfer+0x276>
 800b0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ca:	095b      	lsrs	r3, r3, #5
 800b0cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d4:	f003 031f 	and.w	r3, r3, #31
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d104      	bne.n	800b0e6 <USB_EPStartXfer+0x252>
 800b0dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	029b      	lsls	r3, r3, #10
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b102:	b29a      	uxth	r2, r3
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	801a      	strh	r2, [r3, #0]
 800b108:	e050      	b.n	800b1ac <USB_EPStartXfer+0x318>
 800b10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <USB_EPStartXfer+0x294>
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	b29b      	uxth	r3, r3
 800b118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b11c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b120:	b29a      	uxth	r2, r3
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	801a      	strh	r2, [r3, #0]
 800b126:	e041      	b.n	800b1ac <USB_EPStartXfer+0x318>
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12c:	085b      	lsrs	r3, r3, #1
 800b12e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <USB_EPStartXfer+0x2b4>
 800b13e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b142:	3301      	adds	r3, #1
 800b144:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b152:	b29b      	uxth	r3, r3
 800b154:	029b      	lsls	r3, r3, #10
 800b156:	b29b      	uxth	r3, r3
 800b158:	4313      	orrs	r3, r2
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	801a      	strh	r2, [r3, #0]
 800b160:	e024      	b.n	800b1ac <USB_EPStartXfer+0x318>
 800b162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	785b      	ldrb	r3, [r3, #1]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d11c      	bne.n	800b1ac <USB_EPStartXfer+0x318>
 800b172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b180:	b29b      	uxth	r3, r3
 800b182:	461a      	mov	r2, r3
 800b184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b186:	4413      	add	r3, r2
 800b188:	633b      	str	r3, [r7, #48]	; 0x30
 800b18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	011a      	lsls	r2, r3, #4
 800b198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19a:	4413      	add	r3, r2
 800b19c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	895b      	ldrh	r3, [r3, #10]
 800b1b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	6959      	ldr	r1, [r3, #20]
 800b1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b1d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b1d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b1da:	6800      	ldr	r0, [r0, #0]
 800b1dc:	f001 fb49 	bl	800c872 <USB_WritePMA>
            ep->xfer_buff += len;
 800b1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	695a      	ldr	r2, [r3, #20]
 800b1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f0:	441a      	add	r2, r3
 800b1f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b1fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	6a1a      	ldr	r2, [r3, #32]
 800b20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	429a      	cmp	r2, r3
 800b218:	d90f      	bls.n	800b23a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6a1a      	ldr	r2, [r3, #32]
 800b226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22a:	1ad2      	subs	r2, r2, r3
 800b22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	621a      	str	r2, [r3, #32]
 800b238:	e00e      	b.n	800b258 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b23e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2200      	movs	r2, #0
 800b256:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	785b      	ldrb	r3, [r3, #1]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d177      	bne.n	800b358 <USB_EPStartXfer+0x4c4>
 800b268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b26c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b282:	b29b      	uxth	r3, r3
 800b284:	461a      	mov	r2, r3
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	4413      	add	r3, r2
 800b28a:	61bb      	str	r3, [r7, #24]
 800b28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	011a      	lsls	r2, r3, #4
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	4413      	add	r3, r2
 800b29e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	801a      	strh	r2, [r3, #0]
 800b2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b8:	2b3e      	cmp	r3, #62	; 0x3e
 800b2ba:	d921      	bls.n	800b300 <USB_EPStartXfer+0x46c>
 800b2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c0:	095b      	lsrs	r3, r3, #5
 800b2c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ca:	f003 031f 	and.w	r3, r3, #31
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d104      	bne.n	800b2dc <USB_EPStartXfer+0x448>
 800b2d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	029b      	lsls	r3, r3, #10
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	801a      	strh	r2, [r3, #0]
 800b2fe:	e056      	b.n	800b3ae <USB_EPStartXfer+0x51a>
 800b300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <USB_EPStartXfer+0x48a>
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b316:	b29a      	uxth	r2, r3
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	801a      	strh	r2, [r3, #0]
 800b31c:	e047      	b.n	800b3ae <USB_EPStartXfer+0x51a>
 800b31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b322:	085b      	lsrs	r3, r3, #1
 800b324:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <USB_EPStartXfer+0x4aa>
 800b334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b338:	3301      	adds	r3, #1
 800b33a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	b29a      	uxth	r2, r3
 800b344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b348:	b29b      	uxth	r3, r3
 800b34a:	029b      	lsls	r3, r3, #10
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	4313      	orrs	r3, r2
 800b350:	b29a      	uxth	r2, r3
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	801a      	strh	r2, [r3, #0]
 800b356:	e02a      	b.n	800b3ae <USB_EPStartXfer+0x51a>
 800b358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	785b      	ldrb	r3, [r3, #1]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d122      	bne.n	800b3ae <USB_EPStartXfer+0x51a>
 800b368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b36c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	623b      	str	r3, [r7, #32]
 800b374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b382:	b29b      	uxth	r3, r3
 800b384:	461a      	mov	r2, r3
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	4413      	add	r3, r2
 800b38a:	623b      	str	r3, [r7, #32]
 800b38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b390:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	011a      	lsls	r2, r3, #4
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	4413      	add	r3, r2
 800b39e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b3a2:	61fb      	str	r3, [r7, #28]
 800b3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	891b      	ldrh	r3, [r3, #8]
 800b3ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6959      	ldr	r1, [r3, #20]
 800b3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b3d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b3d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b3dc:	6800      	ldr	r0, [r0, #0]
 800b3de:	f001 fa48 	bl	800c872 <USB_WritePMA>
 800b3e2:	e3ee      	b.n	800bbc2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d177      	bne.n	800b4e4 <USB_EPStartXfer+0x650>
 800b3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800b400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b404:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b40e:	b29b      	uxth	r3, r3
 800b410:	461a      	mov	r2, r3
 800b412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b414:	4413      	add	r3, r2
 800b416:	64bb      	str	r3, [r7, #72]	; 0x48
 800b418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	011a      	lsls	r2, r3, #4
 800b426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b428:	4413      	add	r3, r2
 800b42a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b42e:	647b      	str	r3, [r7, #68]	; 0x44
 800b430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b432:	881b      	ldrh	r3, [r3, #0]
 800b434:	b29b      	uxth	r3, r3
 800b436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b43e:	801a      	strh	r2, [r3, #0]
 800b440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b444:	2b3e      	cmp	r3, #62	; 0x3e
 800b446:	d921      	bls.n	800b48c <USB_EPStartXfer+0x5f8>
 800b448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44c:	095b      	lsrs	r3, r3, #5
 800b44e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b456:	f003 031f 	and.w	r3, r3, #31
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d104      	bne.n	800b468 <USB_EPStartXfer+0x5d4>
 800b45e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b462:	3b01      	subs	r3, #1
 800b464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b472:	b29b      	uxth	r3, r3
 800b474:	029b      	lsls	r3, r3, #10
 800b476:	b29b      	uxth	r3, r3
 800b478:	4313      	orrs	r3, r2
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b484:	b29a      	uxth	r2, r3
 800b486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b488:	801a      	strh	r2, [r3, #0]
 800b48a:	e056      	b.n	800b53a <USB_EPStartXfer+0x6a6>
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b490:	2b00      	cmp	r3, #0
 800b492:	d10a      	bne.n	800b4aa <USB_EPStartXfer+0x616>
 800b494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	b29b      	uxth	r3, r3
 800b49a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b49e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4a6:	801a      	strh	r2, [r3, #0]
 800b4a8:	e047      	b.n	800b53a <USB_EPStartXfer+0x6a6>
 800b4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ae:	085b      	lsrs	r3, r3, #1
 800b4b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b8:	f003 0301 	and.w	r3, r3, #1
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d004      	beq.n	800b4ca <USB_EPStartXfer+0x636>
 800b4c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	029b      	lsls	r3, r3, #10
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4e0:	801a      	strh	r2, [r3, #0]
 800b4e2:	e02a      	b.n	800b53a <USB_EPStartXfer+0x6a6>
 800b4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	785b      	ldrb	r3, [r3, #1]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d122      	bne.n	800b53a <USB_EPStartXfer+0x6a6>
 800b4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	653b      	str	r3, [r7, #80]	; 0x50
 800b500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b50e:	b29b      	uxth	r3, r3
 800b510:	461a      	mov	r2, r3
 800b512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b514:	4413      	add	r3, r2
 800b516:	653b      	str	r3, [r7, #80]	; 0x50
 800b518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	011a      	lsls	r2, r3, #4
 800b526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b528:	4413      	add	r3, r2
 800b52a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b52e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b534:	b29a      	uxth	r2, r3
 800b536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	891b      	ldrh	r3, [r3, #8]
 800b546:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b54e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6959      	ldr	r1, [r3, #20]
 800b556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b560:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b564:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b568:	6800      	ldr	r0, [r0, #0]
 800b56a:	f001 f982 	bl	800c872 <USB_WritePMA>
            ep->xfer_buff += len;
 800b56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	695a      	ldr	r2, [r3, #20]
 800b57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57e:	441a      	add	r2, r3
 800b580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6a1a      	ldr	r2, [r3, #32]
 800b598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d90f      	bls.n	800b5c8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6a1a      	ldr	r2, [r3, #32]
 800b5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b8:	1ad2      	subs	r2, r2, r3
 800b5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	621a      	str	r2, [r3, #32]
 800b5c6:	e00e      	b.n	800b5e6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6a1b      	ldr	r3, [r3, #32]
 800b5d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	643b      	str	r3, [r7, #64]	; 0x40
 800b5f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	785b      	ldrb	r3, [r3, #1]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d177      	bne.n	800b6f2 <USB_EPStartXfer+0x85e>
 800b602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	461a      	mov	r2, r3
 800b620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b622:	4413      	add	r3, r2
 800b624:	63bb      	str	r3, [r7, #56]	; 0x38
 800b626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	011a      	lsls	r2, r3, #4
 800b634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b636:	4413      	add	r3, r2
 800b638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b63c:	637b      	str	r3, [r7, #52]	; 0x34
 800b63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	b29b      	uxth	r3, r3
 800b644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b648:	b29a      	uxth	r2, r3
 800b64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b64c:	801a      	strh	r2, [r3, #0]
 800b64e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b652:	2b3e      	cmp	r3, #62	; 0x3e
 800b654:	d921      	bls.n	800b69a <USB_EPStartXfer+0x806>
 800b656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65a:	095b      	lsrs	r3, r3, #5
 800b65c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b664:	f003 031f 	and.w	r3, r3, #31
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d104      	bne.n	800b676 <USB_EPStartXfer+0x7e2>
 800b66c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b670:	3b01      	subs	r3, #1
 800b672:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b680:	b29b      	uxth	r3, r3
 800b682:	029b      	lsls	r3, r3, #10
 800b684:	b29b      	uxth	r3, r3
 800b686:	4313      	orrs	r3, r2
 800b688:	b29b      	uxth	r3, r3
 800b68a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b68e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b692:	b29a      	uxth	r2, r3
 800b694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b696:	801a      	strh	r2, [r3, #0]
 800b698:	e050      	b.n	800b73c <USB_EPStartXfer+0x8a8>
 800b69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10a      	bne.n	800b6b8 <USB_EPStartXfer+0x824>
 800b6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a4:	881b      	ldrh	r3, [r3, #0]
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b4:	801a      	strh	r2, [r3, #0]
 800b6b6:	e041      	b.n	800b73c <USB_EPStartXfer+0x8a8>
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6bc:	085b      	lsrs	r3, r3, #1
 800b6be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d004      	beq.n	800b6d8 <USB_EPStartXfer+0x844>
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	029b      	lsls	r3, r3, #10
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ee:	801a      	strh	r2, [r3, #0]
 800b6f0:	e024      	b.n	800b73c <USB_EPStartXfer+0x8a8>
 800b6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d11c      	bne.n	800b73c <USB_EPStartXfer+0x8a8>
 800b702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b706:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b710:	b29b      	uxth	r3, r3
 800b712:	461a      	mov	r2, r3
 800b714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b716:	4413      	add	r3, r2
 800b718:	643b      	str	r3, [r7, #64]	; 0x40
 800b71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	011a      	lsls	r2, r3, #4
 800b728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b72a:	4413      	add	r3, r2
 800b72c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b730:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b736:	b29a      	uxth	r2, r3
 800b738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	895b      	ldrh	r3, [r3, #10]
 800b748:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6959      	ldr	r1, [r3, #20]
 800b758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b762:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b766:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b76a:	6800      	ldr	r0, [r0, #0]
 800b76c:	f001 f881 	bl	800c872 <USB_WritePMA>
 800b770:	e227      	b.n	800bbc2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b786:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	4413      	add	r3, r2
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b7a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	441a      	add	r2, r3
 800b7c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7fe:	4413      	add	r3, r2
 800b800:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	011a      	lsls	r2, r3, #4
 800b810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b812:	4413      	add	r3, r2
 800b814:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b818:	65bb      	str	r3, [r7, #88]	; 0x58
 800b81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81e:	b29a      	uxth	r2, r3
 800b820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b822:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b824:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b828:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	891b      	ldrh	r3, [r3, #8]
 800b830:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b834:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b838:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	6959      	ldr	r1, [r3, #20]
 800b840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b844:	b29b      	uxth	r3, r3
 800b846:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b84a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b84e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b852:	6800      	ldr	r0, [r0, #0]
 800b854:	f001 f80d 	bl	800c872 <USB_WritePMA>
 800b858:	e1b3      	b.n	800bbc2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6a1a      	ldr	r2, [r3, #32]
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	1ad2      	subs	r2, r2, r3
 800b86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	4413      	add	r3, r2
 800b892:	881b      	ldrh	r3, [r3, #0]
 800b894:	b29b      	uxth	r3, r3
 800b896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 80c6 	beq.w	800ba2c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b8a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	673b      	str	r3, [r7, #112]	; 0x70
 800b8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	785b      	ldrb	r3, [r3, #1]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d177      	bne.n	800b9ac <USB_EPStartXfer+0xb18>
 800b8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	461a      	mov	r2, r3
 800b8da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8dc:	4413      	add	r3, r2
 800b8de:	66bb      	str	r3, [r7, #104]	; 0x68
 800b8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	011a      	lsls	r2, r3, #4
 800b8ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b8f6:	667b      	str	r3, [r7, #100]	; 0x64
 800b8f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b902:	b29a      	uxth	r2, r3
 800b904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b906:	801a      	strh	r2, [r3, #0]
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90c:	2b3e      	cmp	r3, #62	; 0x3e
 800b90e:	d921      	bls.n	800b954 <USB_EPStartXfer+0xac0>
 800b910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b914:	095b      	lsrs	r3, r3, #5
 800b916:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91e:	f003 031f 	and.w	r3, r3, #31
 800b922:	2b00      	cmp	r3, #0
 800b924:	d104      	bne.n	800b930 <USB_EPStartXfer+0xa9c>
 800b926:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b92a:	3b01      	subs	r3, #1
 800b92c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b932:	881b      	ldrh	r3, [r3, #0]
 800b934:	b29a      	uxth	r2, r3
 800b936:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	029b      	lsls	r3, r3, #10
 800b93e:	b29b      	uxth	r3, r3
 800b940:	4313      	orrs	r3, r2
 800b942:	b29b      	uxth	r3, r3
 800b944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b950:	801a      	strh	r2, [r3, #0]
 800b952:	e050      	b.n	800b9f6 <USB_EPStartXfer+0xb62>
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <USB_EPStartXfer+0xade>
 800b95c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	b29b      	uxth	r3, r3
 800b962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b96e:	801a      	strh	r2, [r3, #0]
 800b970:	e041      	b.n	800b9f6 <USB_EPStartXfer+0xb62>
 800b972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b976:	085b      	lsrs	r3, r3, #1
 800b978:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	d004      	beq.n	800b992 <USB_EPStartXfer+0xafe>
 800b988:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b98c:	3301      	adds	r3, #1
 800b98e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b994:	881b      	ldrh	r3, [r3, #0]
 800b996:	b29a      	uxth	r2, r3
 800b998:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	029b      	lsls	r3, r3, #10
 800b9a0:	b29b      	uxth	r3, r3
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	b29a      	uxth	r2, r3
 800b9a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9a8:	801a      	strh	r2, [r3, #0]
 800b9aa:	e024      	b.n	800b9f6 <USB_EPStartXfer+0xb62>
 800b9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	785b      	ldrb	r3, [r3, #1]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d11c      	bne.n	800b9f6 <USB_EPStartXfer+0xb62>
 800b9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9d0:	4413      	add	r3, r2
 800b9d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	011a      	lsls	r2, r3, #4
 800b9e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	895b      	ldrh	r3, [r3, #10]
 800ba02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6959      	ldr	r1, [r3, #20]
 800ba12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ba1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ba20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ba24:	6800      	ldr	r0, [r0, #0]
 800ba26:	f000 ff24 	bl	800c872 <USB_WritePMA>
 800ba2a:	e0ca      	b.n	800bbc2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ba2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	785b      	ldrb	r3, [r3, #1]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d177      	bne.n	800bb2c <USB_EPStartXfer+0xc98>
 800ba3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	461a      	mov	r2, r3
 800ba5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba5c:	4413      	add	r3, r2
 800ba5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	011a      	lsls	r2, r3, #4
 800ba6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba70:	4413      	add	r3, r2
 800ba72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba76:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba86:	801a      	strh	r2, [r3, #0]
 800ba88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8c:	2b3e      	cmp	r3, #62	; 0x3e
 800ba8e:	d921      	bls.n	800bad4 <USB_EPStartXfer+0xc40>
 800ba90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba94:	095b      	lsrs	r3, r3, #5
 800ba96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ba9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9e:	f003 031f 	and.w	r3, r3, #31
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d104      	bne.n	800bab0 <USB_EPStartXfer+0xc1c>
 800baa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800baaa:	3b01      	subs	r3, #1
 800baac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bab2:	881b      	ldrh	r3, [r3, #0]
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800baba:	b29b      	uxth	r3, r3
 800babc:	029b      	lsls	r3, r3, #10
 800babe:	b29b      	uxth	r3, r3
 800bac0:	4313      	orrs	r3, r2
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bacc:	b29a      	uxth	r2, r3
 800bace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bad0:	801a      	strh	r2, [r3, #0]
 800bad2:	e05c      	b.n	800bb8e <USB_EPStartXfer+0xcfa>
 800bad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10a      	bne.n	800baf2 <USB_EPStartXfer+0xc5e>
 800badc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baea:	b29a      	uxth	r2, r3
 800baec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baee:	801a      	strh	r2, [r3, #0]
 800baf0:	e04d      	b.n	800bb8e <USB_EPStartXfer+0xcfa>
 800baf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf6:	085b      	lsrs	r3, r3, #1
 800baf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d004      	beq.n	800bb12 <USB_EPStartXfer+0xc7e>
 800bb08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bb12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb14:	881b      	ldrh	r3, [r3, #0]
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	029b      	lsls	r3, r3, #10
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	4313      	orrs	r3, r2
 800bb24:	b29a      	uxth	r2, r3
 800bb26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb28:	801a      	strh	r2, [r3, #0]
 800bb2a:	e030      	b.n	800bb8e <USB_EPStartXfer+0xcfa>
 800bb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	785b      	ldrb	r3, [r3, #1]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d128      	bne.n	800bb8e <USB_EPStartXfer+0xcfa>
 800bb3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb60:	4413      	add	r3, r2
 800bb62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	011a      	lsls	r2, r3, #4
 800bb74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb78:	4413      	add	r3, r2
 800bb7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	891b      	ldrh	r3, [r3, #8]
 800bb9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6959      	ldr	r1, [r3, #20]
 800bbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bbb4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bbb8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bbbc:	6800      	ldr	r0, [r0, #0]
 800bbbe:	f000 fe58 	bl	800c872 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbe8:	817b      	strh	r3, [r7, #10]
 800bbea:	897b      	ldrh	r3, [r7, #10]
 800bbec:	f083 0310 	eor.w	r3, r3, #16
 800bbf0:	817b      	strh	r3, [r7, #10]
 800bbf2:	897b      	ldrh	r3, [r7, #10]
 800bbf4:	f083 0320 	eor.w	r3, r3, #32
 800bbf8:	817b      	strh	r3, [r7, #10]
 800bbfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	441a      	add	r2, r3
 800bc14:	897b      	ldrh	r3, [r7, #10]
 800bc16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	8013      	strh	r3, [r2, #0]
 800bc2a:	f000 bcde 	b.w	800c5ea <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bc2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	7b1b      	ldrb	r3, [r3, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f040 80bb 	bne.w	800bdb6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bc40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	699a      	ldr	r2, [r3, #24]
 800bc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d917      	bls.n	800bc8c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bc5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	691b      	ldr	r3, [r3, #16]
 800bc68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bc6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	699a      	ldr	r2, [r3, #24]
 800bc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc7c:	1ad2      	subs	r2, r2, r3
 800bc7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	619a      	str	r2, [r3, #24]
 800bc8a:	e00e      	b.n	800bcaa <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800bc8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2200      	movs	r2, #0
 800bca8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bcaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bcb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	461a      	mov	r2, r3
 800bcca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bcce:	4413      	add	r3, r2
 800bcd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bcd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	011a      	lsls	r2, r3, #4
 800bce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bce6:	4413      	add	r3, r2
 800bce8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bcec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bcf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcf4:	881b      	ldrh	r3, [r3, #0]
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd02:	801a      	strh	r2, [r3, #0]
 800bd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd08:	2b3e      	cmp	r3, #62	; 0x3e
 800bd0a:	d924      	bls.n	800bd56 <USB_EPStartXfer+0xec2>
 800bd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd10:	095b      	lsrs	r3, r3, #5
 800bd12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1a:	f003 031f 	and.w	r3, r3, #31
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d104      	bne.n	800bd2c <USB_EPStartXfer+0xe98>
 800bd22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd26:	3b01      	subs	r3, #1
 800bd28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	029b      	lsls	r3, r3, #10
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd4a:	b29a      	uxth	r2, r3
 800bd4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd50:	801a      	strh	r2, [r3, #0]
 800bd52:	f000 bc10 	b.w	800c576 <USB_EPStartXfer+0x16e2>
 800bd56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d10c      	bne.n	800bd78 <USB_EPStartXfer+0xee4>
 800bd5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd74:	801a      	strh	r2, [r3, #0]
 800bd76:	e3fe      	b.n	800c576 <USB_EPStartXfer+0x16e2>
 800bd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7c:	085b      	lsrs	r3, r3, #1
 800bd7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d004      	beq.n	800bd98 <USB_EPStartXfer+0xf04>
 800bd8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd92:	3301      	adds	r3, #1
 800bd94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	029b      	lsls	r3, r3, #10
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	b29a      	uxth	r2, r3
 800bdae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bdb2:	801a      	strh	r2, [r3, #0]
 800bdb4:	e3df      	b.n	800c576 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	78db      	ldrb	r3, [r3, #3]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	f040 8218 	bne.w	800c1f8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bdc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	785b      	ldrb	r3, [r3, #1]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f040 809d 	bne.w	800bf14 <USB_EPStartXfer+0x1080>
 800bdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdfe:	4413      	add	r3, r2
 800be00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	011a      	lsls	r2, r3, #4
 800be12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be16:	4413      	add	r3, r2
 800be18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800be1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	b29b      	uxth	r3, r3
 800be28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be32:	801a      	strh	r2, [r3, #0]
 800be34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	2b3e      	cmp	r3, #62	; 0x3e
 800be42:	d92b      	bls.n	800be9c <USB_EPStartXfer+0x1008>
 800be44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	095b      	lsrs	r3, r3, #5
 800be52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f003 031f 	and.w	r3, r3, #31
 800be66:	2b00      	cmp	r3, #0
 800be68:	d104      	bne.n	800be74 <USB_EPStartXfer+0xfe0>
 800be6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6e:	3b01      	subs	r3, #1
 800be70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be80:	b29b      	uxth	r3, r3
 800be82:	029b      	lsls	r3, r3, #10
 800be84:	b29b      	uxth	r3, r3
 800be86:	4313      	orrs	r3, r2
 800be88:	b29b      	uxth	r3, r3
 800be8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be92:	b29a      	uxth	r2, r3
 800be94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800be98:	801a      	strh	r2, [r3, #0]
 800be9a:	e070      	b.n	800bf7e <USB_EPStartXfer+0x10ea>
 800be9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	691b      	ldr	r3, [r3, #16]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10c      	bne.n	800bec6 <USB_EPStartXfer+0x1032>
 800beac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bec2:	801a      	strh	r2, [r3, #0]
 800bec4:	e05b      	b.n	800bf7e <USB_EPStartXfer+0x10ea>
 800bec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	085b      	lsrs	r3, r3, #1
 800bed4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	f003 0301 	and.w	r3, r3, #1
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <USB_EPStartXfer+0x1062>
 800beec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef0:	3301      	adds	r3, #1
 800bef2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	b29a      	uxth	r2, r3
 800befe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	029b      	lsls	r3, r3, #10
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf10:	801a      	strh	r2, [r3, #0]
 800bf12:	e034      	b.n	800bf7e <USB_EPStartXfer+0x10ea>
 800bf14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	785b      	ldrb	r3, [r3, #1]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d12c      	bne.n	800bf7e <USB_EPStartXfer+0x10ea>
 800bf24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bf48:	4413      	add	r3, r2
 800bf4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	011a      	lsls	r2, r3, #4
 800bf5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bf60:	4413      	add	r3, r2
 800bf62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bf7c:	801a      	strh	r2, [r3, #0]
 800bf7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bf8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	785b      	ldrb	r3, [r3, #1]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f040 809d 	bne.w	800c0d8 <USB_EPStartXfer+0x1244>
 800bf9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	011a      	lsls	r2, r3, #4
 800bfd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfda:	4413      	add	r3, r2
 800bfdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bfe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bff6:	801a      	strh	r2, [r3, #0]
 800bff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	2b3e      	cmp	r3, #62	; 0x3e
 800c006:	d92b      	bls.n	800c060 <USB_EPStartXfer+0x11cc>
 800c008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	095b      	lsrs	r3, r3, #5
 800c016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	f003 031f 	and.w	r3, r3, #31
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d104      	bne.n	800c038 <USB_EPStartXfer+0x11a4>
 800c02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c032:	3b01      	subs	r3, #1
 800c034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c03c:	881b      	ldrh	r3, [r3, #0]
 800c03e:	b29a      	uxth	r2, r3
 800c040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c044:	b29b      	uxth	r3, r3
 800c046:	029b      	lsls	r3, r3, #10
 800c048:	b29b      	uxth	r3, r3
 800c04a:	4313      	orrs	r3, r2
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c056:	b29a      	uxth	r2, r3
 800c058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c05c:	801a      	strh	r2, [r3, #0]
 800c05e:	e069      	b.n	800c134 <USB_EPStartXfer+0x12a0>
 800c060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10c      	bne.n	800c08a <USB_EPStartXfer+0x11f6>
 800c070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c074:	881b      	ldrh	r3, [r3, #0]
 800c076:	b29b      	uxth	r3, r3
 800c078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c07c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c080:	b29a      	uxth	r2, r3
 800c082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c086:	801a      	strh	r2, [r3, #0]
 800c088:	e054      	b.n	800c134 <USB_EPStartXfer+0x12a0>
 800c08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	085b      	lsrs	r3, r3, #1
 800c098:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	f003 0301 	and.w	r3, r3, #1
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d004      	beq.n	800c0ba <USB_EPStartXfer+0x1226>
 800c0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c0ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	029b      	lsls	r3, r3, #10
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0d4:	801a      	strh	r2, [r3, #0]
 800c0d6:	e02d      	b.n	800c134 <USB_EPStartXfer+0x12a0>
 800c0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	785b      	ldrb	r3, [r3, #1]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d125      	bne.n	800c134 <USB_EPStartXfer+0x12a0>
 800c0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0fe:	4413      	add	r3, r2
 800c100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	011a      	lsls	r2, r3, #4
 800c112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c116:	4413      	add	r3, r2
 800c118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c11c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c132:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	69db      	ldr	r3, [r3, #28]
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 8218 	beq.w	800c576 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c14a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4413      	add	r3, r2
 800c160:	881b      	ldrh	r3, [r3, #0]
 800c162:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c166:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c16a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d005      	beq.n	800c17e <USB_EPStartXfer+0x12ea>
 800c172:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10d      	bne.n	800c19a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c17e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c186:	2b00      	cmp	r3, #0
 800c188:	f040 81f5 	bne.w	800c576 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c18c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c194:	2b00      	cmp	r3, #0
 800c196:	f040 81ee 	bne.w	800c576 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c19e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1c0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	441a      	add	r2, r3
 800c1de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c1e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	8013      	strh	r3, [r2, #0]
 800c1f6:	e1be      	b.n	800c576 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	78db      	ldrb	r3, [r3, #3]
 800c204:	2b01      	cmp	r3, #1
 800c206:	f040 81b4 	bne.w	800c572 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	699a      	ldr	r2, [r3, #24]
 800c216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c21a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	429a      	cmp	r2, r3
 800c224:	d917      	bls.n	800c256 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c22a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c23a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c246:	1ad2      	subs	r2, r2, r3
 800c248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c24c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	619a      	str	r2, [r3, #24]
 800c254:	e00e      	b.n	800c274 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c25a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	699b      	ldr	r3, [r3, #24]
 800c262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c26a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2200      	movs	r2, #0
 800c272:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f040 8085 	bne.w	800c390 <USB_EPStartXfer+0x14fc>
 800c286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c298:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	011a      	lsls	r2, r3, #4
 800c2be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c2c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c2d0:	881b      	ldrh	r3, [r3, #0]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c2de:	801a      	strh	r2, [r3, #0]
 800c2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e4:	2b3e      	cmp	r3, #62	; 0x3e
 800c2e6:	d923      	bls.n	800c330 <USB_EPStartXfer+0x149c>
 800c2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ec:	095b      	lsrs	r3, r3, #5
 800c2ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2f6:	f003 031f 	and.w	r3, r3, #31
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d104      	bne.n	800c308 <USB_EPStartXfer+0x1474>
 800c2fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c302:	3b01      	subs	r3, #1
 800c304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	b29a      	uxth	r2, r3
 800c310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c314:	b29b      	uxth	r3, r3
 800c316:	029b      	lsls	r3, r3, #10
 800c318:	b29b      	uxth	r3, r3
 800c31a:	4313      	orrs	r3, r2
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c326:	b29a      	uxth	r2, r3
 800c328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c32c:	801a      	strh	r2, [r3, #0]
 800c32e:	e060      	b.n	800c3f2 <USB_EPStartXfer+0x155e>
 800c330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10c      	bne.n	800c352 <USB_EPStartXfer+0x14be>
 800c338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	b29b      	uxth	r3, r3
 800c340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c348:	b29a      	uxth	r2, r3
 800c34a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c34e:	801a      	strh	r2, [r3, #0]
 800c350:	e04f      	b.n	800c3f2 <USB_EPStartXfer+0x155e>
 800c352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c356:	085b      	lsrs	r3, r3, #1
 800c358:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d004      	beq.n	800c372 <USB_EPStartXfer+0x14de>
 800c368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c36c:	3301      	adds	r3, #1
 800c36e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	b29a      	uxth	r2, r3
 800c37a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c37e:	b29b      	uxth	r3, r3
 800c380:	029b      	lsls	r3, r3, #10
 800c382:	b29b      	uxth	r3, r3
 800c384:	4313      	orrs	r3, r2
 800c386:	b29a      	uxth	r2, r3
 800c388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c38c:	801a      	strh	r2, [r3, #0]
 800c38e:	e030      	b.n	800c3f2 <USB_EPStartXfer+0x155e>
 800c390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	785b      	ldrb	r3, [r3, #1]
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d128      	bne.n	800c3f2 <USB_EPStartXfer+0x155e>
 800c3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	011a      	lsls	r2, r3, #4
 800c3d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c3dc:	4413      	add	r3, r2
 800c3de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c3e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c3f0:	801a      	strh	r2, [r3, #0]
 800c3f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	785b      	ldrb	r3, [r3, #1]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f040 8085 	bne.w	800c51c <USB_EPStartXfer+0x1688>
 800c412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c424:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c42e:	b29b      	uxth	r3, r3
 800c430:	461a      	mov	r2, r3
 800c432:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c436:	4413      	add	r3, r2
 800c438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c43c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	011a      	lsls	r2, r3, #4
 800c44a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c44e:	4413      	add	r3, r2
 800c450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c45c:	881b      	ldrh	r3, [r3, #0]
 800c45e:	b29b      	uxth	r3, r3
 800c460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c464:	b29a      	uxth	r2, r3
 800c466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c46a:	801a      	strh	r2, [r3, #0]
 800c46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c470:	2b3e      	cmp	r3, #62	; 0x3e
 800c472:	d923      	bls.n	800c4bc <USB_EPStartXfer+0x1628>
 800c474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c478:	095b      	lsrs	r3, r3, #5
 800c47a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c482:	f003 031f 	and.w	r3, r3, #31
 800c486:	2b00      	cmp	r3, #0
 800c488:	d104      	bne.n	800c494 <USB_EPStartXfer+0x1600>
 800c48a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c48e:	3b01      	subs	r3, #1
 800c490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	b29a      	uxth	r2, r3
 800c49c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4a0:	b29b      	uxth	r3, r3
 800c4a2:	029b      	lsls	r3, r3, #10
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4b2:	b29a      	uxth	r2, r3
 800c4b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4b8:	801a      	strh	r2, [r3, #0]
 800c4ba:	e05c      	b.n	800c576 <USB_EPStartXfer+0x16e2>
 800c4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10c      	bne.n	800c4de <USB_EPStartXfer+0x164a>
 800c4c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4da:	801a      	strh	r2, [r3, #0]
 800c4dc:	e04b      	b.n	800c576 <USB_EPStartXfer+0x16e2>
 800c4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e2:	085b      	lsrs	r3, r3, #1
 800c4e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ec:	f003 0301 	and.w	r3, r3, #1
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <USB_EPStartXfer+0x166a>
 800c4f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c4fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	b29a      	uxth	r2, r3
 800c506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	029b      	lsls	r3, r3, #10
 800c50e:	b29b      	uxth	r3, r3
 800c510:	4313      	orrs	r3, r2
 800c512:	b29a      	uxth	r2, r3
 800c514:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	e02c      	b.n	800c576 <USB_EPStartXfer+0x16e2>
 800c51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	785b      	ldrb	r3, [r3, #1]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d124      	bne.n	800c576 <USB_EPStartXfer+0x16e2>
 800c52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	461a      	mov	r2, r3
 800c53e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c542:	4413      	add	r3, r2
 800c544:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c54c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	011a      	lsls	r2, r3, #4
 800c556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c55a:	4413      	add	r3, r2
 800c55c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c560:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c568:	b29a      	uxth	r2, r3
 800c56a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c56e:	801a      	strh	r2, [r3, #0]
 800c570:	e001      	b.n	800c576 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e03a      	b.n	800c5ec <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c57a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c57e:	681a      	ldr	r2, [r3, #0]
 800c580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	b29b      	uxth	r3, r3
 800c594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c59c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c5a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c5a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c5a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c5ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c5b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c5b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	441a      	add	r2, r3
 800c5d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c5d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
 800c5fe:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	785b      	ldrb	r3, [r3, #1]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d020      	beq.n	800c64a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4413      	add	r3, r2
 800c612:	881b      	ldrh	r3, [r3, #0]
 800c614:	b29b      	uxth	r3, r3
 800c616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c61a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c61e:	81bb      	strh	r3, [r7, #12]
 800c620:	89bb      	ldrh	r3, [r7, #12]
 800c622:	f083 0310 	eor.w	r3, r3, #16
 800c626:	81bb      	strh	r3, [r7, #12]
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	441a      	add	r2, r3
 800c632:	89bb      	ldrh	r3, [r7, #12]
 800c634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c63c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c644:	b29b      	uxth	r3, r3
 800c646:	8013      	strh	r3, [r2, #0]
 800c648:	e01f      	b.n	800c68a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	b29b      	uxth	r3, r3
 800c658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c65c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c660:	81fb      	strh	r3, [r7, #14]
 800c662:	89fb      	ldrh	r3, [r7, #14]
 800c664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c668:	81fb      	strh	r3, [r7, #14]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	441a      	add	r2, r3
 800c674:	89fb      	ldrh	r3, [r7, #14]
 800c676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c67a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c67e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c686:	b29b      	uxth	r3, r3
 800c688:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	bc80      	pop	{r7}
 800c694:	4770      	bx	lr

0800c696 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c696:	b480      	push	{r7}
 800c698:	b087      	sub	sp, #28
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
 800c69e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	7b1b      	ldrb	r3, [r3, #12]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f040 809d 	bne.w	800c7e4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	785b      	ldrb	r3, [r3, #1]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d04c      	beq.n	800c74c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	823b      	strh	r3, [r7, #16]
 800c6c0:	8a3b      	ldrh	r3, [r7, #16]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01b      	beq.n	800c702 <USB_EPClearStall+0x6c>
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6e0:	81fb      	strh	r3, [r7, #14]
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	441a      	add	r2, r3
 800c6ec:	89fb      	ldrh	r3, [r7, #14]
 800c6ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	78db      	ldrb	r3, [r3, #3]
 800c706:	2b01      	cmp	r3, #1
 800c708:	d06c      	beq.n	800c7e4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4413      	add	r3, r2
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	b29b      	uxth	r3, r3
 800c718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c71c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c720:	81bb      	strh	r3, [r7, #12]
 800c722:	89bb      	ldrh	r3, [r7, #12]
 800c724:	f083 0320 	eor.w	r3, r3, #32
 800c728:	81bb      	strh	r3, [r7, #12]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	441a      	add	r2, r3
 800c734:	89bb      	ldrh	r3, [r7, #12]
 800c736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c73a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c73e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c746:	b29b      	uxth	r3, r3
 800c748:	8013      	strh	r3, [r2, #0]
 800c74a:	e04b      	b.n	800c7e4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4413      	add	r3, r2
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	82fb      	strh	r3, [r7, #22]
 800c75a:	8afb      	ldrh	r3, [r7, #22]
 800c75c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d01b      	beq.n	800c79c <USB_EPClearStall+0x106>
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	881b      	ldrh	r3, [r3, #0]
 800c770:	b29b      	uxth	r3, r3
 800c772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c77a:	82bb      	strh	r3, [r7, #20]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	441a      	add	r2, r3
 800c786:	8abb      	ldrh	r3, [r7, #20]
 800c788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c78c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c798:	b29b      	uxth	r3, r3
 800c79a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b2:	827b      	strh	r3, [r7, #18]
 800c7b4:	8a7b      	ldrh	r3, [r7, #18]
 800c7b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c7ba:	827b      	strh	r3, [r7, #18]
 800c7bc:	8a7b      	ldrh	r3, [r7, #18]
 800c7be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c7c2:	827b      	strh	r3, [r7, #18]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	441a      	add	r2, r3
 800c7ce:	8a7b      	ldrh	r3, [r7, #18]
 800c7d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bc80      	pop	{r7}
 800c7ee:	4770      	bx	lr

0800c7f0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c7fc:	78fb      	ldrb	r3, [r7, #3]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d103      	bne.n	800c80a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2280      	movs	r2, #128	; 0x80
 800c806:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c80a:	2300      	movs	r3, #0
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	bc80      	pop	{r7}
 800c814:	4770      	bx	lr

0800c816 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c816:	b480      	push	{r7}
 800c818:	b083      	sub	sp, #12
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	bc80      	pop	{r7}
 800c828:	4770      	bx	lr

0800c82a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b083      	sub	sp, #12
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	bc80      	pop	{r7}
 800c83c:	4770      	bx	lr

0800c83e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c83e:	b480      	push	{r7}
 800c840:	b085      	sub	sp, #20
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c84c:	b29b      	uxth	r3, r3
 800c84e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c850:	68fb      	ldr	r3, [r7, #12]
}
 800c852:	4618      	mov	r0, r3
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	bc80      	pop	{r7}
 800c85a:	4770      	bx	lr

0800c85c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bc80      	pop	{r7}
 800c870:	4770      	bx	lr

0800c872 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c872:	b480      	push	{r7}
 800c874:	b08b      	sub	sp, #44	; 0x2c
 800c876:	af00      	add	r7, sp, #0
 800c878:	60f8      	str	r0, [r7, #12]
 800c87a:	60b9      	str	r1, [r7, #8]
 800c87c:	4611      	mov	r1, r2
 800c87e:	461a      	mov	r2, r3
 800c880:	460b      	mov	r3, r1
 800c882:	80fb      	strh	r3, [r7, #6]
 800c884:	4613      	mov	r3, r2
 800c886:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c888:	88bb      	ldrh	r3, [r7, #4]
 800c88a:	3301      	adds	r3, #1
 800c88c:	085b      	lsrs	r3, r3, #1
 800c88e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c898:	88fb      	ldrh	r3, [r7, #6]
 800c89a:	005a      	lsls	r2, r3, #1
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8a4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8aa:	e01e      	b.n	800c8ea <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	021b      	lsls	r3, r3, #8
 800c8ba:	b21a      	sxth	r2, r3
 800c8bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	b21b      	sxth	r3, r3
 800c8c4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	8a7a      	ldrh	r2, [r7, #18]
 800c8ca:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	3302      	adds	r3, #2
 800c8d0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1dd      	bne.n	800c8ac <USB_WritePMA+0x3a>
  }
}
 800c8f0:	bf00      	nop
 800c8f2:	bf00      	nop
 800c8f4:	372c      	adds	r7, #44	; 0x2c
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bc80      	pop	{r7}
 800c8fa:	4770      	bx	lr

0800c8fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b08b      	sub	sp, #44	; 0x2c
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	4611      	mov	r1, r2
 800c908:	461a      	mov	r2, r3
 800c90a:	460b      	mov	r3, r1
 800c90c:	80fb      	strh	r3, [r7, #6]
 800c90e:	4613      	mov	r3, r2
 800c910:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c912:	88bb      	ldrh	r3, [r7, #4]
 800c914:	085b      	lsrs	r3, r3, #1
 800c916:	b29b      	uxth	r3, r3
 800c918:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c922:	88fb      	ldrh	r3, [r7, #6]
 800c924:	005a      	lsls	r2, r3, #1
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	4413      	add	r3, r2
 800c92a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c92e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	627b      	str	r3, [r7, #36]	; 0x24
 800c934:	e01b      	b.n	800c96e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	3302      	adds	r3, #2
 800c942:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	b2da      	uxtb	r2, r3
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	3301      	adds	r3, #1
 800c950:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	0a1b      	lsrs	r3, r3, #8
 800c956:	b2da      	uxtb	r2, r3
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	3301      	adds	r3, #1
 800c960:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800c962:	6a3b      	ldr	r3, [r7, #32]
 800c964:	3302      	adds	r3, #2
 800c966:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	3b01      	subs	r3, #1
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1e0      	bne.n	800c936 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c974:	88bb      	ldrh	r3, [r7, #4]
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d007      	beq.n	800c990 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800c980:	6a3b      	ldr	r3, [r7, #32]
 800c982:	881b      	ldrh	r3, [r3, #0]
 800c984:	b29b      	uxth	r3, r3
 800c986:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	701a      	strb	r2, [r3, #0]
  }
}
 800c990:	bf00      	nop
 800c992:	372c      	adds	r7, #44	; 0x2c
 800c994:	46bd      	mov	sp, r7
 800c996:	bc80      	pop	{r7}
 800c998:	4770      	bx	lr
	...

0800c99c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c9a0:	4904      	ldr	r1, [pc, #16]	; (800c9b4 <MX_FATFS_Init+0x18>)
 800c9a2:	4805      	ldr	r0, [pc, #20]	; (800c9b8 <MX_FATFS_Init+0x1c>)
 800c9a4:	f004 f844 	bl	8010a30 <FATFS_LinkDriver>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	4b03      	ldr	r3, [pc, #12]	; (800c9bc <MX_FATFS_Init+0x20>)
 800c9ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c9b0:	bf00      	nop
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	2000c3ec 	.word	0x2000c3ec
 800c9b8:	08022294 	.word	0x08022294
 800c9bc:	2000c3e8 	.word	0x2000c3e8

0800c9c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c9c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bc80      	pop	{r7}
 800c9cc:	4770      	bx	lr
	...

0800c9d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c9da:	f000 f879 	bl	800cad0 <BSP_SD_IsDetected>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d001      	beq.n	800c9e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e012      	b.n	800ca0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c9e8:	480b      	ldr	r0, [pc, #44]	; (800ca18 <BSP_SD_Init+0x48>)
 800c9ea:	f7fa fd7f 	bl	80074ec <HAL_SD_Init>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d109      	bne.n	800ca0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c9f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c9fc:	4806      	ldr	r0, [pc, #24]	; (800ca18 <BSP_SD_Init+0x48>)
 800c9fe:	f7fb fb59 	bl	80080b4 <HAL_SD_ConfigWideBusOperation>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ca0c:	79fb      	ldrb	r3, [r7, #7]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	2000bdb8 	.word	0x2000bdb8

0800ca1c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b088      	sub	sp, #32
 800ca20:	af02      	add	r7, sp, #8
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	607a      	str	r2, [r7, #4]
 800ca28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68ba      	ldr	r2, [r7, #8]
 800ca36:	68f9      	ldr	r1, [r7, #12]
 800ca38:	4806      	ldr	r0, [pc, #24]	; (800ca54 <BSP_SD_ReadBlocks+0x38>)
 800ca3a:	f7fa fe07 	bl	800764c <HAL_SD_ReadBlocks>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	2000bdb8 	.word	0x2000bdb8

0800ca58 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b088      	sub	sp, #32
 800ca5c:	af02      	add	r7, sp, #8
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	607a      	str	r2, [r7, #4]
 800ca64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ca66:	2300      	movs	r3, #0
 800ca68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	68f9      	ldr	r1, [r7, #12]
 800ca74:	4806      	ldr	r0, [pc, #24]	; (800ca90 <BSP_SD_WriteBlocks+0x38>)
 800ca76:	f7fa ffc7 	bl	8007a08 <HAL_SD_WriteBlocks>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	2000bdb8 	.word	0x2000bdb8

0800ca94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca98:	4805      	ldr	r0, [pc, #20]	; (800cab0 <BSP_SD_GetCardState+0x1c>)
 800ca9a:	f7fb fba5 	bl	80081e8 <HAL_SD_GetCardState>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b04      	cmp	r3, #4
 800caa2:	bf14      	ite	ne
 800caa4:	2301      	movne	r3, #1
 800caa6:	2300      	moveq	r3, #0
 800caa8:	b2db      	uxtb	r3, r3
}
 800caaa:	4618      	mov	r0, r3
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	2000bdb8 	.word	0x2000bdb8

0800cab4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	4803      	ldr	r0, [pc, #12]	; (800cacc <BSP_SD_GetCardInfo+0x18>)
 800cac0:	f7fb facc 	bl	800805c <HAL_SD_GetCardInfo>
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	2000bdb8 	.word	0x2000bdb8

0800cad0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cad6:	2301      	movs	r3, #1
 800cad8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800cada:	79fb      	ldrb	r3, [r7, #7]
 800cadc:	b2db      	uxtb	r3, r3
}
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bc80      	pop	{r7}
 800cae6:	4770      	bx	lr

0800cae8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b082      	sub	sp, #8
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	460b      	mov	r3, r1
 800caf2:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800caf4:	2304      	movs	r3, #4
 800caf6:	2203      	movs	r2, #3
 800caf8:	2181      	movs	r1, #129	; 0x81
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f004 faef 	bl	80110de <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800cb06:	2010      	movs	r0, #16
 800cb08:	f004 fbfe 	bl	8011308 <USBD_static_malloc>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800cb1e:	2302      	movs	r3, #2
 800cb20:	e005      	b.n	800cb2e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb28:	2200      	movs	r2, #0
 800cb2a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	460b      	mov	r3, r1
 800cb40:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800cb42:	2181      	movs	r1, #129	; 0x81
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f004 faf0 	bl	801112a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d009      	beq.n	800cb6e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb60:	4618      	mov	r0, r3
 800cb62:	f004 fbdd 	bl	8011320 <USBD_static_free>
    pdev->pClassData = NULL;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b088      	sub	sp, #32
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb88:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800cb92:	2300      	movs	r3, #0
 800cb94:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb96:	2300      	movs	r3, #0
 800cb98:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d045      	beq.n	800cc32 <USBD_HID_Setup+0xba>
 800cba6:	2b20      	cmp	r3, #32
 800cba8:	f040 80d3 	bne.w	800cd52 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	3b02      	subs	r3, #2
 800cbb2:	2b09      	cmp	r3, #9
 800cbb4:	d835      	bhi.n	800cc22 <USBD_HID_Setup+0xaa>
 800cbb6:	a201      	add	r2, pc, #4	; (adr r2, 800cbbc <USBD_HID_Setup+0x44>)
 800cbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbc:	0800cc13 	.word	0x0800cc13
 800cbc0:	0800cbf3 	.word	0x0800cbf3
 800cbc4:	0800cc23 	.word	0x0800cc23
 800cbc8:	0800cc23 	.word	0x0800cc23
 800cbcc:	0800cc23 	.word	0x0800cc23
 800cbd0:	0800cc23 	.word	0x0800cc23
 800cbd4:	0800cc23 	.word	0x0800cc23
 800cbd8:	0800cc23 	.word	0x0800cc23
 800cbdc:	0800cc01 	.word	0x0800cc01
 800cbe0:	0800cbe5 	.word	0x0800cbe5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	885b      	ldrh	r3, [r3, #2]
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	461a      	mov	r2, r3
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	601a      	str	r2, [r3, #0]
          break;
 800cbf0:	e01e      	b.n	800cc30 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f001 f922 	bl	800de42 <USBD_CtlSendData>
          break;
 800cbfe:	e017      	b.n	800cc30 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	885b      	ldrh	r3, [r3, #2]
 800cc04:	0a1b      	lsrs	r3, r3, #8
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	605a      	str	r2, [r3, #4]
          break;
 800cc10:	e00e      	b.n	800cc30 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	3304      	adds	r3, #4
 800cc16:	2201      	movs	r2, #1
 800cc18:	4619      	mov	r1, r3
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f911 	bl	800de42 <USBD_CtlSendData>
          break;
 800cc20:	e006      	b.n	800cc30 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f001 f8a2 	bl	800dd6e <USBD_CtlError>
          ret = USBD_FAIL;
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc2e:	bf00      	nop
      }
      break;
 800cc30:	e096      	b.n	800cd60 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	785b      	ldrb	r3, [r3, #1]
 800cc36:	2b0b      	cmp	r3, #11
 800cc38:	f200 8083 	bhi.w	800cd42 <USBD_HID_Setup+0x1ca>
 800cc3c:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <USBD_HID_Setup+0xcc>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cc75 	.word	0x0800cc75
 800cc48:	0800cd43 	.word	0x0800cd43
 800cc4c:	0800cd43 	.word	0x0800cd43
 800cc50:	0800cd43 	.word	0x0800cd43
 800cc54:	0800cd43 	.word	0x0800cd43
 800cc58:	0800cd43 	.word	0x0800cd43
 800cc5c:	0800cc9d 	.word	0x0800cc9d
 800cc60:	0800cd43 	.word	0x0800cd43
 800cc64:	0800cd43 	.word	0x0800cd43
 800cc68:	0800cd43 	.word	0x0800cd43
 800cc6c:	0800ccf5 	.word	0x0800ccf5
 800cc70:	0800cd1d 	.word	0x0800cd1d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d107      	bne.n	800cc8e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800cc7e:	f107 030e 	add.w	r3, r7, #14
 800cc82:	2202      	movs	r2, #2
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f001 f8db 	bl	800de42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cc8c:	e060      	b.n	800cd50 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 f86c 	bl	800dd6e <USBD_CtlError>
            ret = USBD_FAIL;
 800cc96:	2302      	movs	r3, #2
 800cc98:	75fb      	strb	r3, [r7, #23]
          break;
 800cc9a:	e059      	b.n	800cd50 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	885b      	ldrh	r3, [r3, #2]
 800cca0:	0a1b      	lsrs	r3, r3, #8
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	2b22      	cmp	r3, #34	; 0x22
 800cca6:	d108      	bne.n	800ccba <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	88db      	ldrh	r3, [r3, #6]
 800ccac:	2b4a      	cmp	r3, #74	; 0x4a
 800ccae:	bf28      	it	cs
 800ccb0:	234a      	movcs	r3, #74	; 0x4a
 800ccb2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800ccb4:	4b2d      	ldr	r3, [pc, #180]	; (800cd6c <USBD_HID_Setup+0x1f4>)
 800ccb6:	61bb      	str	r3, [r7, #24]
 800ccb8:	e015      	b.n	800cce6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	885b      	ldrh	r3, [r3, #2]
 800ccbe:	0a1b      	lsrs	r3, r3, #8
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	2b21      	cmp	r3, #33	; 0x21
 800ccc4:	d108      	bne.n	800ccd8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800ccc6:	4b2a      	ldr	r3, [pc, #168]	; (800cd70 <USBD_HID_Setup+0x1f8>)
 800ccc8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	88db      	ldrh	r3, [r3, #6]
 800ccce:	2b09      	cmp	r3, #9
 800ccd0:	bf28      	it	cs
 800ccd2:	2309      	movcs	r3, #9
 800ccd4:	83fb      	strh	r3, [r7, #30]
 800ccd6:	e006      	b.n	800cce6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f001 f847 	bl	800dd6e <USBD_CtlError>
            ret = USBD_FAIL;
 800cce0:	2302      	movs	r3, #2
 800cce2:	75fb      	strb	r3, [r7, #23]
            break;
 800cce4:	e034      	b.n	800cd50 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800cce6:	8bfb      	ldrh	r3, [r7, #30]
 800cce8:	461a      	mov	r2, r3
 800ccea:	69b9      	ldr	r1, [r7, #24]
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f001 f8a8 	bl	800de42 <USBD_CtlSendData>
          break;
 800ccf2:	e02d      	b.n	800cd50 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d107      	bne.n	800cd0e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	3308      	adds	r3, #8
 800cd02:	2201      	movs	r2, #1
 800cd04:	4619      	mov	r1, r3
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f001 f89b 	bl	800de42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd0c:	e020      	b.n	800cd50 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800cd0e:	6839      	ldr	r1, [r7, #0]
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f001 f82c 	bl	800dd6e <USBD_CtlError>
            ret = USBD_FAIL;
 800cd16:	2302      	movs	r3, #2
 800cd18:	75fb      	strb	r3, [r7, #23]
          break;
 800cd1a:	e019      	b.n	800cd50 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d106      	bne.n	800cd34 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	885b      	ldrh	r3, [r3, #2]
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd32:	e00d      	b.n	800cd50 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f001 f819 	bl	800dd6e <USBD_CtlError>
            ret = USBD_FAIL;
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	75fb      	strb	r3, [r7, #23]
          break;
 800cd40:	e006      	b.n	800cd50 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f001 f812 	bl	800dd6e <USBD_CtlError>
          ret = USBD_FAIL;
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	75fb      	strb	r3, [r7, #23]
          break;
 800cd4e:	bf00      	nop
      }
      break;
 800cd50:	e006      	b.n	800cd60 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f001 f80a 	bl	800dd6e <USBD_CtlError>
      ret = USBD_FAIL;
 800cd5a:	2302      	movs	r3, #2
 800cd5c:	75fb      	strb	r3, [r7, #23]
      break;
 800cd5e:	bf00      	nop
  }

  return ret;
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3720      	adds	r7, #32
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	2000b668 	.word	0x2000b668
 800cd70:	2000b650 	.word	0x2000b650

0800cd74 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2222      	movs	r2, #34	; 0x22
 800cd80:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800cd82:	4b03      	ldr	r3, [pc, #12]	; (800cd90 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bc80      	pop	{r7}
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	2000b5e4 	.word	0x2000b5e4

0800cd94 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2222      	movs	r2, #34	; 0x22
 800cda0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800cda2:	4b03      	ldr	r3, [pc, #12]	; (800cdb0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bc80      	pop	{r7}
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	2000b608 	.word	0x2000b608

0800cdb4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2222      	movs	r2, #34	; 0x22
 800cdc0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800cdc2:	4b03      	ldr	r3, [pc, #12]	; (800cdd0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bc80      	pop	{r7}
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	2000b62c 	.word	0x2000b62c

0800cdd4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cde6:	2200      	movs	r2, #0
 800cde8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bc80      	pop	{r7}
 800cdf4:	4770      	bx	lr
	...

0800cdf8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	220a      	movs	r2, #10
 800ce04:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800ce06:	4b03      	ldr	r3, [pc, #12]	; (800ce14 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bc80      	pop	{r7}
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	2000b65c 	.word	0x2000b65c

0800ce18 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	4613      	mov	r3, r2
 800ce24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ce2c:	2302      	movs	r3, #2
 800ce2e:	e01a      	b.n	800ce66 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d003      	beq.n	800ce42 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d003      	beq.n	800ce50 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	79fa      	ldrb	r2, [r7, #7]
 800ce5c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f004 f8da 	bl	8011018 <USBD_LL_Init>

  return USBD_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b085      	sub	sp, #20
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d006      	beq.n	800ce90 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	683a      	ldr	r2, [r7, #0]
 800ce86:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	73fb      	strb	r3, [r7, #15]
 800ce8e:	e001      	b.n	800ce94 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ce90:	2302      	movs	r3, #2
 800ce92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3714      	adds	r7, #20
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bc80      	pop	{r7}
 800ce9e:	4770      	bx	lr

0800cea0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b082      	sub	sp, #8
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f004 f8fd 	bl	80110a8 <USBD_LL_Start>

  return USBD_OK;
 800ceae:	2300      	movs	r3, #0
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cec0:	2300      	movs	r3, #0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bc80      	pop	{r7}
 800ceca:	4770      	bx	lr

0800cecc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ced8:	2302      	movs	r3, #2
 800ceda:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00c      	beq.n	800cf00 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	78fa      	ldrb	r2, [r7, #3]
 800cef0:	4611      	mov	r1, r2
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	4798      	blx	r3
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cefc:	2300      	movs	r3, #0
 800cefe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3710      	adds	r7, #16
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b082      	sub	sp, #8
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	6078      	str	r0, [r7, #4]
 800cf12:	460b      	mov	r3, r1
 800cf14:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	78fa      	ldrb	r2, [r7, #3]
 800cf20:	4611      	mov	r1, r2
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	4798      	blx	r3

  return USBD_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800cf40:	6839      	ldr	r1, [r7, #0]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 fed7 	bl	800dcf6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf56:	461a      	mov	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800cf64:	f003 031f 	and.w	r3, r3, #31
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d016      	beq.n	800cf9a <USBD_LL_SetupStage+0x6a>
 800cf6c:	2b02      	cmp	r3, #2
 800cf6e:	d81c      	bhi.n	800cfaa <USBD_LL_SetupStage+0x7a>
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <USBD_LL_SetupStage+0x4a>
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d008      	beq.n	800cf8a <USBD_LL_SetupStage+0x5a>
 800cf78:	e017      	b.n	800cfaa <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 f9ca 	bl	800d31c <USBD_StdDevReq>
      break;
 800cf88:	e01a      	b.n	800cfc0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800cf90:	4619      	mov	r1, r3
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fa2c 	bl	800d3f0 <USBD_StdItfReq>
      break;
 800cf98:	e012      	b.n	800cfc0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 fa6c 	bl	800d480 <USBD_StdEPReq>
      break;
 800cfa8:	e00a      	b.n	800cfc0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800cfb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f004 f8d5 	bl	8011168 <USBD_LL_StallEP>
      break;
 800cfbe:	bf00      	nop
  }

  return USBD_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cfd8:	7afb      	ldrb	r3, [r7, #11]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d14b      	bne.n	800d076 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cfe4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	d134      	bne.n	800d05a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	68da      	ldr	r2, [r3, #12]
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	691b      	ldr	r3, [r3, #16]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d919      	bls.n	800d030 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	68da      	ldr	r2, [r3, #12]
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	1ad2      	subs	r2, r2, r3
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	68da      	ldr	r2, [r3, #12]
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d012:	429a      	cmp	r2, r3
 800d014:	d203      	bcs.n	800d01e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	e002      	b.n	800d024 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d022:	b29b      	uxth	r3, r3
 800d024:	461a      	mov	r2, r3
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f000 ff38 	bl	800de9e <USBD_CtlContinueRx>
 800d02e:	e038      	b.n	800d0a2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00a      	beq.n	800d052 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d042:	2b03      	cmp	r3, #3
 800d044:	d105      	bne.n	800d052 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 ff35 	bl	800dec2 <USBD_CtlSendStatus>
 800d058:	e023      	b.n	800d0a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d060:	2b05      	cmp	r3, #5
 800d062:	d11e      	bne.n	800d0a2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d06c:	2100      	movs	r1, #0
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f004 f87a 	bl	8011168 <USBD_LL_StallEP>
 800d074:	e015      	b.n	800d0a2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00d      	beq.n	800d09e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d088:	2b03      	cmp	r3, #3
 800d08a:	d108      	bne.n	800d09e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	7afa      	ldrb	r2, [r7, #11]
 800d096:	4611      	mov	r1, r2
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	4798      	blx	r3
 800d09c:	e001      	b.n	800d0a2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d09e:	2302      	movs	r3, #2
 800d0a0:	e000      	b.n	800d0a4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	607a      	str	r2, [r7, #4]
 800d0b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d0ba:	7afb      	ldrb	r3, [r7, #11]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d17f      	bne.n	800d1c0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3314      	adds	r3, #20
 800d0c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d0cc:	2b02      	cmp	r3, #2
 800d0ce:	d15c      	bne.n	800d18a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	68da      	ldr	r2, [r3, #12]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d915      	bls.n	800d108 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	68da      	ldr	r2, [r3, #12]
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	1ad2      	subs	r2, r2, r3
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f000 fec0 	bl	800de7a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2100      	movs	r1, #0
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f004 f8dd 	bl	80112c0 <USBD_LL_PrepareReceive>
 800d106:	e04e      	b.n	800d1a6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	697a      	ldr	r2, [r7, #20]
 800d10e:	6912      	ldr	r2, [r2, #16]
 800d110:	fbb3 f1f2 	udiv	r1, r3, r2
 800d114:	fb01 f202 	mul.w	r2, r1, r2
 800d118:	1a9b      	subs	r3, r3, r2
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d11c      	bne.n	800d158 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	689a      	ldr	r2, [r3, #8]
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800d126:	429a      	cmp	r2, r3
 800d128:	d316      	bcc.n	800d158 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	689a      	ldr	r2, [r3, #8]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d134:	429a      	cmp	r2, r3
 800d136:	d20f      	bcs.n	800d158 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d138:	2200      	movs	r2, #0
 800d13a:	2100      	movs	r1, #0
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f000 fe9c 	bl	800de7a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d14a:	2300      	movs	r3, #0
 800d14c:	2200      	movs	r2, #0
 800d14e:	2100      	movs	r1, #0
 800d150:	68f8      	ldr	r0, [r7, #12]
 800d152:	f004 f8b5 	bl	80112c0 <USBD_LL_PrepareReceive>
 800d156:	e026      	b.n	800d1a6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00a      	beq.n	800d17a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d16a:	2b03      	cmp	r3, #3
 800d16c:	d105      	bne.n	800d17a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d174:	68db      	ldr	r3, [r3, #12]
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d17a:	2180      	movs	r1, #128	; 0x80
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f003 fff3 	bl	8011168 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 feb0 	bl	800dee8 <USBD_CtlReceiveStatus>
 800d188:	e00d      	b.n	800d1a6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d190:	2b04      	cmp	r3, #4
 800d192:	d004      	beq.n	800d19e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d103      	bne.n	800d1a6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d19e:	2180      	movs	r1, #128	; 0x80
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f003 ffe1 	bl	8011168 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d11d      	bne.n	800d1ec <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f7ff fe81 	bl	800ceb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d1be:	e015      	b.n	800d1ec <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c6:	695b      	ldr	r3, [r3, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00d      	beq.n	800d1e8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d1d2:	2b03      	cmp	r3, #3
 800d1d4:	d108      	bne.n	800d1e8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1dc:	695b      	ldr	r3, [r3, #20]
 800d1de:	7afa      	ldrb	r2, [r7, #11]
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	4798      	blx	r3
 800d1e6:	e001      	b.n	800d1ec <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	e000      	b.n	800d1ee <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3718      	adds	r7, #24
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1fe:	2340      	movs	r3, #64	; 0x40
 800d200:	2200      	movs	r2, #0
 800d202:	2100      	movs	r1, #0
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f003 ff6a 	bl	80110de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2240      	movs	r2, #64	; 0x40
 800d216:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d21a:	2340      	movs	r3, #64	; 0x40
 800d21c:	2200      	movs	r2, #0
 800d21e:	2180      	movs	r1, #128	; 0x80
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f003 ff5c 	bl	80110de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2240      	movs	r2, #64	; 0x40
 800d230:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d256:	2b00      	cmp	r3, #0
 800d258:	d009      	beq.n	800d26e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6852      	ldr	r2, [r2, #4]
 800d266:	b2d2      	uxtb	r2, r2
 800d268:	4611      	mov	r1, r2
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	4798      	blx	r3
  }

  return USBD_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	78fa      	ldrb	r2, [r7, #3]
 800d288:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	bc80      	pop	{r7}
 800d294:	4770      	bx	lr

0800d296 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2204      	movs	r2, #4
 800d2ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bc80      	pop	{r7}
 800d2bc:	4770      	bx	lr

0800d2be <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d2be:	b480      	push	{r7}
 800d2c0:	b083      	sub	sp, #12
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d105      	bne.n	800d2dc <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bc80      	pop	{r7}
 800d2e6:	4770      	bx	lr

0800d2e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d10b      	bne.n	800d312 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d300:	69db      	ldr	r3, [r3, #28]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d30c:	69db      	ldr	r3, [r3, #28]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b084      	sub	sp, #16
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d326:	2300      	movs	r3, #0
 800d328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d332:	2b40      	cmp	r3, #64	; 0x40
 800d334:	d005      	beq.n	800d342 <USBD_StdDevReq+0x26>
 800d336:	2b40      	cmp	r3, #64	; 0x40
 800d338:	d84f      	bhi.n	800d3da <USBD_StdDevReq+0xbe>
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d009      	beq.n	800d352 <USBD_StdDevReq+0x36>
 800d33e:	2b20      	cmp	r3, #32
 800d340:	d14b      	bne.n	800d3da <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d348:	689b      	ldr	r3, [r3, #8]
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	4798      	blx	r3
      break;
 800d350:	e048      	b.n	800d3e4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	785b      	ldrb	r3, [r3, #1]
 800d356:	2b09      	cmp	r3, #9
 800d358:	d839      	bhi.n	800d3ce <USBD_StdDevReq+0xb2>
 800d35a:	a201      	add	r2, pc, #4	; (adr r2, 800d360 <USBD_StdDevReq+0x44>)
 800d35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d360:	0800d3b1 	.word	0x0800d3b1
 800d364:	0800d3c5 	.word	0x0800d3c5
 800d368:	0800d3cf 	.word	0x0800d3cf
 800d36c:	0800d3bb 	.word	0x0800d3bb
 800d370:	0800d3cf 	.word	0x0800d3cf
 800d374:	0800d393 	.word	0x0800d393
 800d378:	0800d389 	.word	0x0800d389
 800d37c:	0800d3cf 	.word	0x0800d3cf
 800d380:	0800d3a7 	.word	0x0800d3a7
 800d384:	0800d39d 	.word	0x0800d39d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f9dc 	bl	800d748 <USBD_GetDescriptor>
          break;
 800d390:	e022      	b.n	800d3d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d392:	6839      	ldr	r1, [r7, #0]
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fb3f 	bl	800da18 <USBD_SetAddress>
          break;
 800d39a:	e01d      	b.n	800d3d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800d39c:	6839      	ldr	r1, [r7, #0]
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fb7e 	bl	800daa0 <USBD_SetConfig>
          break;
 800d3a4:	e018      	b.n	800d3d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 fc07 	bl	800dbbc <USBD_GetConfig>
          break;
 800d3ae:	e013      	b.n	800d3d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d3b0:	6839      	ldr	r1, [r7, #0]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 fc37 	bl	800dc26 <USBD_GetStatus>
          break;
 800d3b8:	e00e      	b.n	800d3d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fc65 	bl	800dc8c <USBD_SetFeature>
          break;
 800d3c2:	e009      	b.n	800d3d8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d3c4:	6839      	ldr	r1, [r7, #0]
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fc74 	bl	800dcb4 <USBD_ClrFeature>
          break;
 800d3cc:	e004      	b.n	800d3d8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 fccc 	bl	800dd6e <USBD_CtlError>
          break;
 800d3d6:	bf00      	nop
      }
      break;
 800d3d8:	e004      	b.n	800d3e4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fcc6 	bl	800dd6e <USBD_CtlError>
      break;
 800d3e2:	bf00      	nop
  }

  return ret;
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop

0800d3f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d406:	2b40      	cmp	r3, #64	; 0x40
 800d408:	d005      	beq.n	800d416 <USBD_StdItfReq+0x26>
 800d40a:	2b40      	cmp	r3, #64	; 0x40
 800d40c:	d82e      	bhi.n	800d46c <USBD_StdItfReq+0x7c>
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <USBD_StdItfReq+0x26>
 800d412:	2b20      	cmp	r3, #32
 800d414:	d12a      	bne.n	800d46c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d41c:	3b01      	subs	r3, #1
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d81d      	bhi.n	800d45e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	889b      	ldrh	r3, [r3, #4]
 800d426:	b2db      	uxtb	r3, r3
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d813      	bhi.n	800d454 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	6839      	ldr	r1, [r7, #0]
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	4798      	blx	r3
 800d43a:	4603      	mov	r3, r0
 800d43c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	88db      	ldrh	r3, [r3, #6]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d110      	bne.n	800d468 <USBD_StdItfReq+0x78>
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10d      	bne.n	800d468 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fd38 	bl	800dec2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d452:	e009      	b.n	800d468 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800d454:	6839      	ldr	r1, [r7, #0]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f000 fc89 	bl	800dd6e <USBD_CtlError>
          break;
 800d45c:	e004      	b.n	800d468 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 fc84 	bl	800dd6e <USBD_CtlError>
          break;
 800d466:	e000      	b.n	800d46a <USBD_StdItfReq+0x7a>
          break;
 800d468:	bf00      	nop
      }
      break;
 800d46a:	e004      	b.n	800d476 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800d46c:	6839      	ldr	r1, [r7, #0]
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 fc7d 	bl	800dd6e <USBD_CtlError>
      break;
 800d474:	bf00      	nop
  }

  return USBD_OK;
 800d476:	2300      	movs	r3, #0
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d48a:	2300      	movs	r3, #0
 800d48c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	889b      	ldrh	r3, [r3, #4]
 800d492:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d49c:	2b40      	cmp	r3, #64	; 0x40
 800d49e:	d007      	beq.n	800d4b0 <USBD_StdEPReq+0x30>
 800d4a0:	2b40      	cmp	r3, #64	; 0x40
 800d4a2:	f200 8146 	bhi.w	800d732 <USBD_StdEPReq+0x2b2>
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00a      	beq.n	800d4c0 <USBD_StdEPReq+0x40>
 800d4aa:	2b20      	cmp	r3, #32
 800d4ac:	f040 8141 	bne.w	800d732 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	4798      	blx	r3
      break;
 800d4be:	e13d      	b.n	800d73c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4c8:	2b20      	cmp	r3, #32
 800d4ca:	d10a      	bne.n	800d4e2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4d2:	689b      	ldr	r3, [r3, #8]
 800d4d4:	6839      	ldr	r1, [r7, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	4798      	blx	r3
 800d4da:	4603      	mov	r3, r0
 800d4dc:	73fb      	strb	r3, [r7, #15]

        return ret;
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	e12d      	b.n	800d73e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	785b      	ldrb	r3, [r3, #1]
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d007      	beq.n	800d4fa <USBD_StdEPReq+0x7a>
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	f300 811b 	bgt.w	800d726 <USBD_StdEPReq+0x2a6>
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d072      	beq.n	800d5da <USBD_StdEPReq+0x15a>
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d03a      	beq.n	800d56e <USBD_StdEPReq+0xee>
 800d4f8:	e115      	b.n	800d726 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d500:	2b02      	cmp	r3, #2
 800d502:	d002      	beq.n	800d50a <USBD_StdEPReq+0x8a>
 800d504:	2b03      	cmp	r3, #3
 800d506:	d015      	beq.n	800d534 <USBD_StdEPReq+0xb4>
 800d508:	e02b      	b.n	800d562 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d50a:	7bbb      	ldrb	r3, [r7, #14]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00c      	beq.n	800d52a <USBD_StdEPReq+0xaa>
 800d510:	7bbb      	ldrb	r3, [r7, #14]
 800d512:	2b80      	cmp	r3, #128	; 0x80
 800d514:	d009      	beq.n	800d52a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d516:	7bbb      	ldrb	r3, [r7, #14]
 800d518:	4619      	mov	r1, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f003 fe24 	bl	8011168 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d520:	2180      	movs	r1, #128	; 0x80
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f003 fe20 	bl	8011168 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d528:	e020      	b.n	800d56c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800d52a:	6839      	ldr	r1, [r7, #0]
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fc1e 	bl	800dd6e <USBD_CtlError>
              break;
 800d532:	e01b      	b.n	800d56c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	885b      	ldrh	r3, [r3, #2]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d10e      	bne.n	800d55a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800d53c:	7bbb      	ldrb	r3, [r7, #14]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00b      	beq.n	800d55a <USBD_StdEPReq+0xda>
 800d542:	7bbb      	ldrb	r3, [r7, #14]
 800d544:	2b80      	cmp	r3, #128	; 0x80
 800d546:	d008      	beq.n	800d55a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	88db      	ldrh	r3, [r3, #6]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d104      	bne.n	800d55a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d550:	7bbb      	ldrb	r3, [r7, #14]
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f003 fe07 	bl	8011168 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fcb1 	bl	800dec2 <USBD_CtlSendStatus>

              break;
 800d560:	e004      	b.n	800d56c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800d562:	6839      	ldr	r1, [r7, #0]
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fc02 	bl	800dd6e <USBD_CtlError>
              break;
 800d56a:	bf00      	nop
          }
          break;
 800d56c:	e0e0      	b.n	800d730 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d574:	2b02      	cmp	r3, #2
 800d576:	d002      	beq.n	800d57e <USBD_StdEPReq+0xfe>
 800d578:	2b03      	cmp	r3, #3
 800d57a:	d015      	beq.n	800d5a8 <USBD_StdEPReq+0x128>
 800d57c:	e026      	b.n	800d5cc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d57e:	7bbb      	ldrb	r3, [r7, #14]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00c      	beq.n	800d59e <USBD_StdEPReq+0x11e>
 800d584:	7bbb      	ldrb	r3, [r7, #14]
 800d586:	2b80      	cmp	r3, #128	; 0x80
 800d588:	d009      	beq.n	800d59e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d58a:	7bbb      	ldrb	r3, [r7, #14]
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f003 fdea 	bl	8011168 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d594:	2180      	movs	r1, #128	; 0x80
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f003 fde6 	bl	8011168 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d59c:	e01c      	b.n	800d5d8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800d59e:	6839      	ldr	r1, [r7, #0]
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 fbe4 	bl	800dd6e <USBD_CtlError>
              break;
 800d5a6:	e017      	b.n	800d5d8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	885b      	ldrh	r3, [r3, #2]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d112      	bne.n	800d5d6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d5b0:	7bbb      	ldrb	r3, [r7, #14]
 800d5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d004      	beq.n	800d5c4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d5ba:	7bbb      	ldrb	r3, [r7, #14]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f003 fdf1 	bl	80111a6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fc7c 	bl	800dec2 <USBD_CtlSendStatus>
              }
              break;
 800d5ca:	e004      	b.n	800d5d6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fbcd 	bl	800dd6e <USBD_CtlError>
              break;
 800d5d4:	e000      	b.n	800d5d8 <USBD_StdEPReq+0x158>
              break;
 800d5d6:	bf00      	nop
          }
          break;
 800d5d8:	e0aa      	b.n	800d730 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d002      	beq.n	800d5ea <USBD_StdEPReq+0x16a>
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d032      	beq.n	800d64e <USBD_StdEPReq+0x1ce>
 800d5e8:	e097      	b.n	800d71a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5ea:	7bbb      	ldrb	r3, [r7, #14]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d007      	beq.n	800d600 <USBD_StdEPReq+0x180>
 800d5f0:	7bbb      	ldrb	r3, [r7, #14]
 800d5f2:	2b80      	cmp	r3, #128	; 0x80
 800d5f4:	d004      	beq.n	800d600 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 fbb8 	bl	800dd6e <USBD_CtlError>
                break;
 800d5fe:	e091      	b.n	800d724 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d604:	2b00      	cmp	r3, #0
 800d606:	da0b      	bge.n	800d620 <USBD_StdEPReq+0x1a0>
 800d608:	7bbb      	ldrb	r3, [r7, #14]
 800d60a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d60e:	4613      	mov	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	4413      	add	r3, r2
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	3310      	adds	r3, #16
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	4413      	add	r3, r2
 800d61c:	3304      	adds	r3, #4
 800d61e:	e00b      	b.n	800d638 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d620:	7bbb      	ldrb	r3, [r7, #14]
 800d622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d626:	4613      	mov	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	4413      	add	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	4413      	add	r3, r2
 800d636:	3304      	adds	r3, #4
 800d638:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2200      	movs	r2, #0
 800d63e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	2202      	movs	r2, #2
 800d644:	4619      	mov	r1, r3
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fbfb 	bl	800de42 <USBD_CtlSendData>
              break;
 800d64c:	e06a      	b.n	800d724 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d64e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d652:	2b00      	cmp	r3, #0
 800d654:	da11      	bge.n	800d67a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d656:	7bbb      	ldrb	r3, [r7, #14]
 800d658:	f003 020f 	and.w	r2, r3, #15
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	4613      	mov	r3, r2
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	4413      	add	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	440b      	add	r3, r1
 800d668:	3318      	adds	r3, #24
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d117      	bne.n	800d6a0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 fb7b 	bl	800dd6e <USBD_CtlError>
                  break;
 800d678:	e054      	b.n	800d724 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d67a:	7bbb      	ldrb	r3, [r7, #14]
 800d67c:	f003 020f 	and.w	r2, r3, #15
 800d680:	6879      	ldr	r1, [r7, #4]
 800d682:	4613      	mov	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4413      	add	r3, r2
 800d688:	009b      	lsls	r3, r3, #2
 800d68a:	440b      	add	r3, r1
 800d68c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d104      	bne.n	800d6a0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800d696:	6839      	ldr	r1, [r7, #0]
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 fb68 	bl	800dd6e <USBD_CtlError>
                  break;
 800d69e:	e041      	b.n	800d724 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	da0b      	bge.n	800d6c0 <USBD_StdEPReq+0x240>
 800d6a8:	7bbb      	ldrb	r3, [r7, #14]
 800d6aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4413      	add	r3, r2
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	3310      	adds	r3, #16
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	3304      	adds	r3, #4
 800d6be:	e00b      	b.n	800d6d8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d6c0:	7bbb      	ldrb	r3, [r7, #14]
 800d6c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4413      	add	r3, r2
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d6da:	7bbb      	ldrb	r3, [r7, #14]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d002      	beq.n	800d6e6 <USBD_StdEPReq+0x266>
 800d6e0:	7bbb      	ldrb	r3, [r7, #14]
 800d6e2:	2b80      	cmp	r3, #128	; 0x80
 800d6e4:	d103      	bne.n	800d6ee <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	e00e      	b.n	800d70c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d6ee:	7bbb      	ldrb	r3, [r7, #14]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f003 fd76 	bl	80111e4 <USBD_LL_IsStallEP>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d003      	beq.n	800d706 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2201      	movs	r2, #1
 800d702:	601a      	str	r2, [r3, #0]
 800d704:	e002      	b.n	800d70c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2202      	movs	r2, #2
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 fb95 	bl	800de42 <USBD_CtlSendData>
              break;
 800d718:	e004      	b.n	800d724 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fb26 	bl	800dd6e <USBD_CtlError>
              break;
 800d722:	bf00      	nop
          }
          break;
 800d724:	e004      	b.n	800d730 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 fb20 	bl	800dd6e <USBD_CtlError>
          break;
 800d72e:	bf00      	nop
      }
      break;
 800d730:	e004      	b.n	800d73c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800d732:	6839      	ldr	r1, [r7, #0]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fb1a 	bl	800dd6e <USBD_CtlError>
      break;
 800d73a:	bf00      	nop
  }

  return ret;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
	...

0800d748 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b084      	sub	sp, #16
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d756:	2300      	movs	r3, #0
 800d758:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	885b      	ldrh	r3, [r3, #2]
 800d762:	0a1b      	lsrs	r3, r3, #8
 800d764:	b29b      	uxth	r3, r3
 800d766:	3b01      	subs	r3, #1
 800d768:	2b06      	cmp	r3, #6
 800d76a:	f200 8128 	bhi.w	800d9be <USBD_GetDescriptor+0x276>
 800d76e:	a201      	add	r2, pc, #4	; (adr r2, 800d774 <USBD_GetDescriptor+0x2c>)
 800d770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d774:	0800d791 	.word	0x0800d791
 800d778:	0800d7a9 	.word	0x0800d7a9
 800d77c:	0800d7e9 	.word	0x0800d7e9
 800d780:	0800d9bf 	.word	0x0800d9bf
 800d784:	0800d9bf 	.word	0x0800d9bf
 800d788:	0800d95f 	.word	0x0800d95f
 800d78c:	0800d98b 	.word	0x0800d98b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	7c12      	ldrb	r2, [r2, #16]
 800d79c:	f107 0108 	add.w	r1, r7, #8
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	4798      	blx	r3
 800d7a4:	60f8      	str	r0, [r7, #12]
      break;
 800d7a6:	e112      	b.n	800d9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	7c1b      	ldrb	r3, [r3, #16]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10d      	bne.n	800d7cc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b8:	f107 0208 	add.w	r2, r7, #8
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4798      	blx	r3
 800d7c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d7ca:	e100      	b.n	800d9ce <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d4:	f107 0208 	add.w	r2, r7, #8
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4798      	blx	r3
 800d7dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	701a      	strb	r2, [r3, #0]
      break;
 800d7e6:	e0f2      	b.n	800d9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	885b      	ldrh	r3, [r3, #2]
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b05      	cmp	r3, #5
 800d7f0:	f200 80ac 	bhi.w	800d94c <USBD_GetDescriptor+0x204>
 800d7f4:	a201      	add	r2, pc, #4	; (adr r2, 800d7fc <USBD_GetDescriptor+0xb4>)
 800d7f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7fa:	bf00      	nop
 800d7fc:	0800d815 	.word	0x0800d815
 800d800:	0800d849 	.word	0x0800d849
 800d804:	0800d87d 	.word	0x0800d87d
 800d808:	0800d8b1 	.word	0x0800d8b1
 800d80c:	0800d8e5 	.word	0x0800d8e5
 800d810:	0800d919 	.word	0x0800d919
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d00b      	beq.n	800d838 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	7c12      	ldrb	r2, [r2, #16]
 800d82c:	f107 0108 	add.w	r1, r7, #8
 800d830:	4610      	mov	r0, r2
 800d832:	4798      	blx	r3
 800d834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d836:	e091      	b.n	800d95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fa97 	bl	800dd6e <USBD_CtlError>
            err++;
 800d840:	7afb      	ldrb	r3, [r7, #11]
 800d842:	3301      	adds	r3, #1
 800d844:	72fb      	strb	r3, [r7, #11]
          break;
 800d846:	e089      	b.n	800d95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00b      	beq.n	800d86c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	7c12      	ldrb	r2, [r2, #16]
 800d860:	f107 0108 	add.w	r1, r7, #8
 800d864:	4610      	mov	r0, r2
 800d866:	4798      	blx	r3
 800d868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d86a:	e077      	b.n	800d95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d86c:	6839      	ldr	r1, [r7, #0]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fa7d 	bl	800dd6e <USBD_CtlError>
            err++;
 800d874:	7afb      	ldrb	r3, [r7, #11]
 800d876:	3301      	adds	r3, #1
 800d878:	72fb      	strb	r3, [r7, #11]
          break;
 800d87a:	e06f      	b.n	800d95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00b      	beq.n	800d8a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	7c12      	ldrb	r2, [r2, #16]
 800d894:	f107 0108 	add.w	r1, r7, #8
 800d898:	4610      	mov	r0, r2
 800d89a:	4798      	blx	r3
 800d89c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d89e:	e05d      	b.n	800d95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8a0:	6839      	ldr	r1, [r7, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 fa63 	bl	800dd6e <USBD_CtlError>
            err++;
 800d8a8:	7afb      	ldrb	r3, [r7, #11]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d8ae:	e055      	b.n	800d95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d8b6:	691b      	ldr	r3, [r3, #16]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00b      	beq.n	800d8d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	687a      	ldr	r2, [r7, #4]
 800d8c6:	7c12      	ldrb	r2, [r2, #16]
 800d8c8:	f107 0108 	add.w	r1, r7, #8
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	4798      	blx	r3
 800d8d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8d2:	e043      	b.n	800d95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8d4:	6839      	ldr	r1, [r7, #0]
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f000 fa49 	bl	800dd6e <USBD_CtlError>
            err++;
 800d8dc:	7afb      	ldrb	r3, [r7, #11]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d8e2:	e03b      	b.n	800d95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d8ea:	695b      	ldr	r3, [r3, #20]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d00b      	beq.n	800d908 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	687a      	ldr	r2, [r7, #4]
 800d8fa:	7c12      	ldrb	r2, [r2, #16]
 800d8fc:	f107 0108 	add.w	r1, r7, #8
 800d900:	4610      	mov	r0, r2
 800d902:	4798      	blx	r3
 800d904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d906:	e029      	b.n	800d95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 fa2f 	bl	800dd6e <USBD_CtlError>
            err++;
 800d910:	7afb      	ldrb	r3, [r7, #11]
 800d912:	3301      	adds	r3, #1
 800d914:	72fb      	strb	r3, [r7, #11]
          break;
 800d916:	e021      	b.n	800d95c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00b      	beq.n	800d93c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800d92a:	699b      	ldr	r3, [r3, #24]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	7c12      	ldrb	r2, [r2, #16]
 800d930:	f107 0108 	add.w	r1, r7, #8
 800d934:	4610      	mov	r0, r2
 800d936:	4798      	blx	r3
 800d938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d93a:	e00f      	b.n	800d95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d93c:	6839      	ldr	r1, [r7, #0]
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 fa15 	bl	800dd6e <USBD_CtlError>
            err++;
 800d944:	7afb      	ldrb	r3, [r7, #11]
 800d946:	3301      	adds	r3, #1
 800d948:	72fb      	strb	r3, [r7, #11]
          break;
 800d94a:	e007      	b.n	800d95c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d94c:	6839      	ldr	r1, [r7, #0]
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fa0d 	bl	800dd6e <USBD_CtlError>
          err++;
 800d954:	7afb      	ldrb	r3, [r7, #11]
 800d956:	3301      	adds	r3, #1
 800d958:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800d95a:	e038      	b.n	800d9ce <USBD_GetDescriptor+0x286>
 800d95c:	e037      	b.n	800d9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7c1b      	ldrb	r3, [r3, #16]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d109      	bne.n	800d97a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d96e:	f107 0208 	add.w	r2, r7, #8
 800d972:	4610      	mov	r0, r2
 800d974:	4798      	blx	r3
 800d976:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d978:	e029      	b.n	800d9ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d97a:	6839      	ldr	r1, [r7, #0]
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 f9f6 	bl	800dd6e <USBD_CtlError>
        err++;
 800d982:	7afb      	ldrb	r3, [r7, #11]
 800d984:	3301      	adds	r3, #1
 800d986:	72fb      	strb	r3, [r7, #11]
      break;
 800d988:	e021      	b.n	800d9ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7c1b      	ldrb	r3, [r3, #16]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d10d      	bne.n	800d9ae <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d99a:	f107 0208 	add.w	r2, r7, #8
 800d99e:	4610      	mov	r0, r2
 800d9a0:	4798      	blx	r3
 800d9a2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	2207      	movs	r2, #7
 800d9aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9ac:	e00f      	b.n	800d9ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d9ae:	6839      	ldr	r1, [r7, #0]
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f9dc 	bl	800dd6e <USBD_CtlError>
        err++;
 800d9b6:	7afb      	ldrb	r3, [r7, #11]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d9bc:	e007      	b.n	800d9ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d9be:	6839      	ldr	r1, [r7, #0]
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f9d4 	bl	800dd6e <USBD_CtlError>
      err++;
 800d9c6:	7afb      	ldrb	r3, [r7, #11]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d9cc:	bf00      	nop
  }

  if (err != 0U)
 800d9ce:	7afb      	ldrb	r3, [r7, #11]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d11c      	bne.n	800da0e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d9d4:	893b      	ldrh	r3, [r7, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d011      	beq.n	800d9fe <USBD_GetDescriptor+0x2b6>
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	88db      	ldrh	r3, [r3, #6]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00d      	beq.n	800d9fe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	88da      	ldrh	r2, [r3, #6]
 800d9e6:	893b      	ldrh	r3, [r7, #8]
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	bf28      	it	cs
 800d9ec:	4613      	movcs	r3, r2
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d9f2:	893b      	ldrh	r3, [r7, #8]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	68f9      	ldr	r1, [r7, #12]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 fa22 	bl	800de42 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	88db      	ldrh	r3, [r3, #6]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d104      	bne.n	800da10 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 fa5b 	bl	800dec2 <USBD_CtlSendStatus>
 800da0c:	e000      	b.n	800da10 <USBD_GetDescriptor+0x2c8>
    return;
 800da0e:	bf00      	nop
    }
  }
}
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop

0800da18 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	889b      	ldrh	r3, [r3, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d130      	bne.n	800da8c <USBD_SetAddress+0x74>
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	88db      	ldrh	r3, [r3, #6]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d12c      	bne.n	800da8c <USBD_SetAddress+0x74>
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	885b      	ldrh	r3, [r3, #2]
 800da36:	2b7f      	cmp	r3, #127	; 0x7f
 800da38:	d828      	bhi.n	800da8c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	885b      	ldrh	r3, [r3, #2]
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da4c:	2b03      	cmp	r3, #3
 800da4e:	d104      	bne.n	800da5a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800da50:	6839      	ldr	r1, [r7, #0]
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f98b 	bl	800dd6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da58:	e01d      	b.n	800da96 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	7bfa      	ldrb	r2, [r7, #15]
 800da5e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	4619      	mov	r1, r3
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f003 fbe8 	bl	801123c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fa28 	bl	800dec2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d004      	beq.n	800da82 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2202      	movs	r2, #2
 800da7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da80:	e009      	b.n	800da96 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2201      	movs	r2, #1
 800da86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da8a:	e004      	b.n	800da96 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 f96d 	bl	800dd6e <USBD_CtlError>
  }
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
	...

0800daa0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	885b      	ldrh	r3, [r3, #2]
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	4b41      	ldr	r3, [pc, #260]	; (800dbb8 <USBD_SetConfig+0x118>)
 800dab2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dab4:	4b40      	ldr	r3, [pc, #256]	; (800dbb8 <USBD_SetConfig+0x118>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d904      	bls.n	800dac6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f955 	bl	800dd6e <USBD_CtlError>
 800dac4:	e075      	b.n	800dbb2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dacc:	2b02      	cmp	r3, #2
 800dace:	d002      	beq.n	800dad6 <USBD_SetConfig+0x36>
 800dad0:	2b03      	cmp	r3, #3
 800dad2:	d023      	beq.n	800db1c <USBD_SetConfig+0x7c>
 800dad4:	e062      	b.n	800db9c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800dad6:	4b38      	ldr	r3, [pc, #224]	; (800dbb8 <USBD_SetConfig+0x118>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d01a      	beq.n	800db14 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800dade:	4b36      	ldr	r3, [pc, #216]	; (800dbb8 <USBD_SetConfig+0x118>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	461a      	mov	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2203      	movs	r2, #3
 800daec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800daf0:	4b31      	ldr	r3, [pc, #196]	; (800dbb8 <USBD_SetConfig+0x118>)
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	4619      	mov	r1, r3
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff f9e8 	bl	800cecc <USBD_SetClassConfig>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d104      	bne.n	800db0c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f932 	bl	800dd6e <USBD_CtlError>
            return;
 800db0a:	e052      	b.n	800dbb2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f9d8 	bl	800dec2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800db12:	e04e      	b.n	800dbb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 f9d4 	bl	800dec2 <USBD_CtlSendStatus>
        break;
 800db1a:	e04a      	b.n	800dbb2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800db1c:	4b26      	ldr	r3, [pc, #152]	; (800dbb8 <USBD_SetConfig+0x118>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d112      	bne.n	800db4a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2202      	movs	r2, #2
 800db28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800db2c:	4b22      	ldr	r3, [pc, #136]	; (800dbb8 <USBD_SetConfig+0x118>)
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	461a      	mov	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800db36:	4b20      	ldr	r3, [pc, #128]	; (800dbb8 <USBD_SetConfig+0x118>)
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff f9e4 	bl	800cf0a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f9bd 	bl	800dec2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800db48:	e033      	b.n	800dbb2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800db4a:	4b1b      	ldr	r3, [pc, #108]	; (800dbb8 <USBD_SetConfig+0x118>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	461a      	mov	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	429a      	cmp	r2, r3
 800db56:	d01d      	beq.n	800db94 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff f9d2 	bl	800cf0a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800db66:	4b14      	ldr	r3, [pc, #80]	; (800dbb8 <USBD_SetConfig+0x118>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	461a      	mov	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800db70:	4b11      	ldr	r3, [pc, #68]	; (800dbb8 <USBD_SetConfig+0x118>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	4619      	mov	r1, r3
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f7ff f9a8 	bl	800cecc <USBD_SetClassConfig>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b02      	cmp	r3, #2
 800db80:	d104      	bne.n	800db8c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f8f2 	bl	800dd6e <USBD_CtlError>
            return;
 800db8a:	e012      	b.n	800dbb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f000 f998 	bl	800dec2 <USBD_CtlSendStatus>
        break;
 800db92:	e00e      	b.n	800dbb2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 f994 	bl	800dec2 <USBD_CtlSendStatus>
        break;
 800db9a:	e00a      	b.n	800dbb2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800db9c:	6839      	ldr	r1, [r7, #0]
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f8e5 	bl	800dd6e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800dba4:	4b04      	ldr	r3, [pc, #16]	; (800dbb8 <USBD_SetConfig+0x118>)
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7ff f9ad 	bl	800cf0a <USBD_ClrClassConfig>
        break;
 800dbb0:	bf00      	nop
    }
  }
}
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	2000c3f0 	.word	0x2000c3f0

0800dbbc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	88db      	ldrh	r3, [r3, #6]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d004      	beq.n	800dbd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 f8cc 	bl	800dd6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dbd6:	e022      	b.n	800dc1e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	dc02      	bgt.n	800dbe8 <USBD_GetConfig+0x2c>
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	dc03      	bgt.n	800dbee <USBD_GetConfig+0x32>
 800dbe6:	e015      	b.n	800dc14 <USBD_GetConfig+0x58>
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d00b      	beq.n	800dc04 <USBD_GetConfig+0x48>
 800dbec:	e012      	b.n	800dc14 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	3308      	adds	r3, #8
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 f920 	bl	800de42 <USBD_CtlSendData>
        break;
 800dc02:	e00c      	b.n	800dc1e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	3304      	adds	r3, #4
 800dc08:	2201      	movs	r2, #1
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 f918 	bl	800de42 <USBD_CtlSendData>
        break;
 800dc12:	e004      	b.n	800dc1e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f8a9 	bl	800dd6e <USBD_CtlError>
        break;
 800dc1c:	bf00      	nop
}
 800dc1e:	bf00      	nop
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b082      	sub	sp, #8
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
 800dc2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc36:	3b01      	subs	r3, #1
 800dc38:	2b02      	cmp	r3, #2
 800dc3a:	d81e      	bhi.n	800dc7a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	88db      	ldrh	r3, [r3, #6]
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	d004      	beq.n	800dc4e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 f891 	bl	800dd6e <USBD_CtlError>
        break;
 800dc4c:	e01a      	b.n	800dc84 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2201      	movs	r2, #1
 800dc52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d005      	beq.n	800dc6a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	f043 0202 	orr.w	r2, r3, #2
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	330c      	adds	r3, #12
 800dc6e:	2202      	movs	r2, #2
 800dc70:	4619      	mov	r1, r3
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f8e5 	bl	800de42 <USBD_CtlSendData>
      break;
 800dc78:	e004      	b.n	800dc84 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f876 	bl	800dd6e <USBD_CtlError>
      break;
 800dc82:	bf00      	nop
  }
}
 800dc84:	bf00      	nop
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	885b      	ldrh	r3, [r3, #2]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d106      	bne.n	800dcac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f90b 	bl	800dec2 <USBD_CtlSendStatus>
  }
}
 800dcac:	bf00      	nop
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	d80b      	bhi.n	800dce2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	885b      	ldrh	r3, [r3, #2]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d10c      	bne.n	800dcec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 f8f1 	bl	800dec2 <USBD_CtlSendStatus>
      }
      break;
 800dce0:	e004      	b.n	800dcec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 f842 	bl	800dd6e <USBD_CtlError>
      break;
 800dcea:	e000      	b.n	800dcee <USBD_ClrFeature+0x3a>
      break;
 800dcec:	bf00      	nop
  }
}
 800dcee:	bf00      	nop
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcf6:	b480      	push	{r7}
 800dcf8:	b083      	sub	sp, #12
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
 800dcfe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	781a      	ldrb	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	785a      	ldrb	r2, [r3, #1]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	3302      	adds	r3, #2
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	3303      	adds	r3, #3
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	021b      	lsls	r3, r3, #8
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4413      	add	r3, r2
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	3305      	adds	r3, #5
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	021b      	lsls	r3, r3, #8
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	4413      	add	r3, r2
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	3306      	adds	r3, #6
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	3307      	adds	r3, #7
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	021b      	lsls	r3, r3, #8
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	4413      	add	r3, r2
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	80da      	strh	r2, [r3, #6]

}
 800dd64:	bf00      	nop
 800dd66:	370c      	adds	r7, #12
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bc80      	pop	{r7}
 800dd6c:	4770      	bx	lr

0800dd6e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b082      	sub	sp, #8
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800dd78:	2180      	movs	r1, #128	; 0x80
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f003 f9f4 	bl	8011168 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800dd80:	2100      	movs	r1, #0
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f003 f9f0 	bl	8011168 <USBD_LL_StallEP>
}
 800dd88:	bf00      	nop
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d032      	beq.n	800de0c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dda6:	68f8      	ldr	r0, [r7, #12]
 800dda8:	f000 f834 	bl	800de14 <USBD_GetLen>
 800ddac:	4603      	mov	r3, r0
 800ddae:	3301      	adds	r3, #1
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	005b      	lsls	r3, r3, #1
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
 800ddbc:	1c5a      	adds	r2, r3, #1
 800ddbe:	75fa      	strb	r2, [r7, #23]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	7812      	ldrb	r2, [r2, #0]
 800ddca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ddcc:	7dfb      	ldrb	r3, [r7, #23]
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	75fa      	strb	r2, [r7, #23]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	2203      	movs	r2, #3
 800ddda:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800dddc:	e012      	b.n	800de04 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	1c5a      	adds	r2, r3, #1
 800dde2:	60fa      	str	r2, [r7, #12]
 800dde4:	7dfa      	ldrb	r2, [r7, #23]
 800dde6:	1c51      	adds	r1, r2, #1
 800dde8:	75f9      	strb	r1, [r7, #23]
 800ddea:	4611      	mov	r1, r2
 800ddec:	68ba      	ldr	r2, [r7, #8]
 800ddee:	440a      	add	r2, r1
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
 800ddf6:	1c5a      	adds	r2, r3, #1
 800ddf8:	75fa      	strb	r2, [r7, #23]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	4413      	add	r3, r2
 800de00:	2200      	movs	r2, #0
 800de02:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1e8      	bne.n	800ddde <USBD_GetString+0x4e>
    }
  }
}
 800de0c:	bf00      	nop
 800de0e:	3718      	adds	r7, #24
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800de20:	e005      	b.n	800de2e <USBD_GetLen+0x1a>
  {
    len++;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	3301      	adds	r3, #1
 800de26:	73fb      	strb	r3, [r7, #15]
    buf++;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3301      	adds	r3, #1
 800de2c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1f5      	bne.n	800de22 <USBD_GetLen+0xe>
  }

  return len;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bc80      	pop	{r7}
 800de40:	4770      	bx	lr

0800de42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b084      	sub	sp, #16
 800de46:	af00      	add	r7, sp, #0
 800de48:	60f8      	str	r0, [r7, #12]
 800de4a:	60b9      	str	r1, [r7, #8]
 800de4c:	4613      	mov	r3, r2
 800de4e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2202      	movs	r2, #2
 800de54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800de58:	88fa      	ldrh	r2, [r7, #6]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800de5e:	88fa      	ldrh	r2, [r7, #6]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de64:	88fb      	ldrh	r3, [r7, #6]
 800de66:	68ba      	ldr	r2, [r7, #8]
 800de68:	2100      	movs	r1, #0
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f003 fa05 	bl	801127a <USBD_LL_Transmit>

  return USBD_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	4613      	mov	r3, r2
 800de86:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de88:	88fb      	ldrh	r3, [r7, #6]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	2100      	movs	r1, #0
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f003 f9f3 	bl	801127a <USBD_LL_Transmit>

  return USBD_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	4613      	mov	r3, r2
 800deaa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800deac:	88fb      	ldrh	r3, [r7, #6]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	2100      	movs	r1, #0
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f003 fa04 	bl	80112c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b082      	sub	sp, #8
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2204      	movs	r2, #4
 800dece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ded2:	2300      	movs	r3, #0
 800ded4:	2200      	movs	r2, #0
 800ded6:	2100      	movs	r1, #0
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f003 f9ce 	bl	801127a <USBD_LL_Transmit>

  return USBD_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2205      	movs	r2, #5
 800def4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800def8:	2300      	movs	r3, #0
 800defa:	2200      	movs	r2, #0
 800defc:	2100      	movs	r1, #0
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f003 f9de 	bl	80112c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df04:	2300      	movs	r3, #0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
	...

0800df10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	4603      	mov	r3, r0
 800df18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	4a08      	ldr	r2, [pc, #32]	; (800df40 <disk_status+0x30>)
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	79fa      	ldrb	r2, [r7, #7]
 800df28:	4905      	ldr	r1, [pc, #20]	; (800df40 <disk_status+0x30>)
 800df2a:	440a      	add	r2, r1
 800df2c:	7a12      	ldrb	r2, [r2, #8]
 800df2e:	4610      	mov	r0, r2
 800df30:	4798      	blx	r3
 800df32:	4603      	mov	r3, r0
 800df34:	73fb      	strb	r3, [r7, #15]
  return stat;
 800df36:	7bfb      	ldrb	r3, [r7, #15]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	2000c414 	.word	0x2000c414

0800df44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	4a0d      	ldr	r2, [pc, #52]	; (800df8c <disk_initialize+0x48>)
 800df56:	5cd3      	ldrb	r3, [r2, r3]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d111      	bne.n	800df80 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	4a0b      	ldr	r2, [pc, #44]	; (800df8c <disk_initialize+0x48>)
 800df60:	2101      	movs	r1, #1
 800df62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	4a09      	ldr	r2, [pc, #36]	; (800df8c <disk_initialize+0x48>)
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	79fa      	ldrb	r2, [r7, #7]
 800df72:	4906      	ldr	r1, [pc, #24]	; (800df8c <disk_initialize+0x48>)
 800df74:	440a      	add	r2, r1
 800df76:	7a12      	ldrb	r2, [r2, #8]
 800df78:	4610      	mov	r0, r2
 800df7a:	4798      	blx	r3
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800df80:	7bfb      	ldrb	r3, [r7, #15]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	2000c414 	.word	0x2000c414

0800df90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800df90:	b590      	push	{r4, r7, lr}
 800df92:	b087      	sub	sp, #28
 800df94:	af00      	add	r7, sp, #0
 800df96:	60b9      	str	r1, [r7, #8]
 800df98:	607a      	str	r2, [r7, #4]
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	4603      	mov	r3, r0
 800df9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
 800dfa2:	4a0a      	ldr	r2, [pc, #40]	; (800dfcc <disk_read+0x3c>)
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	689c      	ldr	r4, [r3, #8]
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	4a07      	ldr	r2, [pc, #28]	; (800dfcc <disk_read+0x3c>)
 800dfb0:	4413      	add	r3, r2
 800dfb2:	7a18      	ldrb	r0, [r3, #8]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	68b9      	ldr	r1, [r7, #8]
 800dfba:	47a0      	blx	r4
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	75fb      	strb	r3, [r7, #23]
  return res;
 800dfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	371c      	adds	r7, #28
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd90      	pop	{r4, r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	2000c414 	.word	0x2000c414

0800dfd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dfd0:	b590      	push	{r4, r7, lr}
 800dfd2:	b087      	sub	sp, #28
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60b9      	str	r1, [r7, #8]
 800dfd8:	607a      	str	r2, [r7, #4]
 800dfda:	603b      	str	r3, [r7, #0]
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	4a0a      	ldr	r2, [pc, #40]	; (800e00c <disk_write+0x3c>)
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	68dc      	ldr	r4, [r3, #12]
 800dfec:	7bfb      	ldrb	r3, [r7, #15]
 800dfee:	4a07      	ldr	r2, [pc, #28]	; (800e00c <disk_write+0x3c>)
 800dff0:	4413      	add	r3, r2
 800dff2:	7a18      	ldrb	r0, [r3, #8]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	47a0      	blx	r4
 800dffc:	4603      	mov	r3, r0
 800dffe:	75fb      	strb	r3, [r7, #23]
  return res;
 800e000:	7dfb      	ldrb	r3, [r7, #23]
}
 800e002:	4618      	mov	r0, r3
 800e004:	371c      	adds	r7, #28
 800e006:	46bd      	mov	sp, r7
 800e008:	bd90      	pop	{r4, r7, pc}
 800e00a:	bf00      	nop
 800e00c:	2000c414 	.word	0x2000c414

0800e010 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	4603      	mov	r3, r0
 800e018:	603a      	str	r2, [r7, #0]
 800e01a:	71fb      	strb	r3, [r7, #7]
 800e01c:	460b      	mov	r3, r1
 800e01e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e020:	79fb      	ldrb	r3, [r7, #7]
 800e022:	4a09      	ldr	r2, [pc, #36]	; (800e048 <disk_ioctl+0x38>)
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	79fa      	ldrb	r2, [r7, #7]
 800e02e:	4906      	ldr	r1, [pc, #24]	; (800e048 <disk_ioctl+0x38>)
 800e030:	440a      	add	r2, r1
 800e032:	7a10      	ldrb	r0, [r2, #8]
 800e034:	79b9      	ldrb	r1, [r7, #6]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	4798      	blx	r3
 800e03a:	4603      	mov	r3, r0
 800e03c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3710      	adds	r7, #16
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	2000c414 	.word	0x2000c414

0800e04c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e04c:	b480      	push	{r7}
 800e04e:	b087      	sub	sp, #28
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800e060:	e007      	b.n	800e072 <mem_cpy+0x26>
		*d++ = *s++;
 800e062:	693a      	ldr	r2, [r7, #16]
 800e064:	1c53      	adds	r3, r2, #1
 800e066:	613b      	str	r3, [r7, #16]
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	1c59      	adds	r1, r3, #1
 800e06c:	6179      	str	r1, [r7, #20]
 800e06e:	7812      	ldrb	r2, [r2, #0]
 800e070:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	1e5a      	subs	r2, r3, #1
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1f2      	bne.n	800e062 <mem_cpy+0x16>
}
 800e07c:	bf00      	nop
 800e07e:	bf00      	nop
 800e080:	371c      	adds	r7, #28
 800e082:	46bd      	mov	sp, r7
 800e084:	bc80      	pop	{r7}
 800e086:	4770      	bx	lr

0800e088 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e088:	b480      	push	{r7}
 800e08a:	b087      	sub	sp, #28
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800e098:	e005      	b.n	800e0a6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	1c5a      	adds	r2, r3, #1
 800e09e:	617a      	str	r2, [r7, #20]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	b2d2      	uxtb	r2, r2
 800e0a4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	1e5a      	subs	r2, r3, #1
 800e0aa:	607a      	str	r2, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1f4      	bne.n	800e09a <mem_set+0x12>
}
 800e0b0:	bf00      	nop
 800e0b2:	bf00      	nop
 800e0b4:	371c      	adds	r7, #28
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bc80      	pop	{r7}
 800e0ba:	4770      	bx	lr

0800e0bc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800e0bc:	b480      	push	{r7}
 800e0be:	b089      	sub	sp, #36	; 0x24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	61fb      	str	r3, [r7, #28]
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800e0d4:	bf00      	nop
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	1e5a      	subs	r2, r3, #1
 800e0da:	607a      	str	r2, [r7, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00d      	beq.n	800e0fc <mem_cmp+0x40>
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	1c5a      	adds	r2, r3, #1
 800e0e4:	61fa      	str	r2, [r7, #28]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	69bb      	ldr	r3, [r7, #24]
 800e0ec:	1c5a      	adds	r2, r3, #1
 800e0ee:	61ba      	str	r2, [r7, #24]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	1acb      	subs	r3, r1, r3
 800e0f4:	617b      	str	r3, [r7, #20]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d0ec      	beq.n	800e0d6 <mem_cmp+0x1a>
	return r;
 800e0fc:	697b      	ldr	r3, [r7, #20]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3724      	adds	r7, #36	; 0x24
 800e102:	46bd      	mov	sp, r7
 800e104:	bc80      	pop	{r7}
 800e106:	4770      	bx	lr

0800e108 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e112:	e002      	b.n	800e11a <chk_chr+0x12>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3301      	adds	r3, #1
 800e118:	607b      	str	r3, [r7, #4]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d005      	beq.n	800e12e <chk_chr+0x26>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d1f2      	bne.n	800e114 <chk_chr+0xc>
	return *str;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	781b      	ldrb	r3, [r3, #0]
}
 800e132:	4618      	mov	r0, r3
 800e134:	370c      	adds	r7, #12
 800e136:	46bd      	mov	sp, r7
 800e138:	bc80      	pop	{r7}
 800e13a:	4770      	bx	lr

0800e13c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e146:	2300      	movs	r3, #0
 800e148:	60bb      	str	r3, [r7, #8]
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	60fb      	str	r3, [r7, #12]
 800e14e:	e038      	b.n	800e1c2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 800e150:	492f      	ldr	r1, [pc, #188]	; (800e210 <chk_lock+0xd4>)
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	4613      	mov	r3, r2
 800e156:	005b      	lsls	r3, r3, #1
 800e158:	4413      	add	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	440b      	add	r3, r1
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d029      	beq.n	800e1b8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e164:	492a      	ldr	r1, [pc, #168]	; (800e210 <chk_lock+0xd4>)
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	4613      	mov	r3, r2
 800e16a:	005b      	lsls	r3, r3, #1
 800e16c:	4413      	add	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	440b      	add	r3, r1
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d11e      	bne.n	800e1bc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800e17e:	4924      	ldr	r1, [pc, #144]	; (800e210 <chk_lock+0xd4>)
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	4613      	mov	r3, r2
 800e184:	005b      	lsls	r3, r3, #1
 800e186:	4413      	add	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	440b      	add	r3, r1
 800e18c:	3304      	adds	r3, #4
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800e196:	429a      	cmp	r2, r3
 800e198:	d110      	bne.n	800e1bc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e19a:	491d      	ldr	r1, [pc, #116]	; (800e210 <chk_lock+0xd4>)
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	005b      	lsls	r3, r3, #1
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	440b      	add	r3, r1
 800e1a8:	3308      	adds	r3, #8
 800e1aa:	881a      	ldrh	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800e1b2:	429a      	cmp	r2, r3
 800e1b4:	d102      	bne.n	800e1bc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 800e1b6:	e007      	b.n	800e1c8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	60fb      	str	r3, [r7, #12]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d9c3      	bls.n	800e150 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2b02      	cmp	r3, #2
 800e1cc:	d109      	bne.n	800e1e2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d102      	bne.n	800e1da <chk_lock+0x9e>
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d101      	bne.n	800e1de <chk_lock+0xa2>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	e013      	b.n	800e206 <chk_lock+0xca>
 800e1de:	2312      	movs	r3, #18
 800e1e0:	e011      	b.n	800e206 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10b      	bne.n	800e200 <chk_lock+0xc4>
 800e1e8:	4909      	ldr	r1, [pc, #36]	; (800e210 <chk_lock+0xd4>)
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	330a      	adds	r3, #10
 800e1f8:	881b      	ldrh	r3, [r3, #0]
 800e1fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1fe:	d101      	bne.n	800e204 <chk_lock+0xc8>
 800e200:	2310      	movs	r3, #16
 800e202:	e000      	b.n	800e206 <chk_lock+0xca>
 800e204:	2300      	movs	r3, #0
}
 800e206:	4618      	mov	r0, r3
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bc80      	pop	{r7}
 800e20e:	4770      	bx	lr
 800e210:	2000c3fc 	.word	0x2000c3fc

0800e214 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e21a:	2300      	movs	r3, #0
 800e21c:	607b      	str	r3, [r7, #4]
 800e21e:	e002      	b.n	800e226 <enq_lock+0x12>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3301      	adds	r3, #1
 800e224:	607b      	str	r3, [r7, #4]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d809      	bhi.n	800e240 <enq_lock+0x2c>
 800e22c:	490a      	ldr	r1, [pc, #40]	; (800e258 <enq_lock+0x44>)
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	4613      	mov	r3, r2
 800e232:	005b      	lsls	r3, r3, #1
 800e234:	4413      	add	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	440b      	add	r3, r1
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d1ef      	bne.n	800e220 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b02      	cmp	r3, #2
 800e244:	bf14      	ite	ne
 800e246:	2301      	movne	r3, #1
 800e248:	2300      	moveq	r3, #0
 800e24a:	b2db      	uxtb	r3, r3
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	bc80      	pop	{r7}
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop
 800e258:	2000c3fc 	.word	0x2000c3fc

0800e25c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	e02b      	b.n	800e2c4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800e26c:	4955      	ldr	r1, [pc, #340]	; (800e3c4 <inc_lock+0x168>)
 800e26e:	68fa      	ldr	r2, [r7, #12]
 800e270:	4613      	mov	r3, r2
 800e272:	005b      	lsls	r3, r3, #1
 800e274:	4413      	add	r3, r2
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	440b      	add	r3, r1
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800e282:	429a      	cmp	r2, r3
 800e284:	d11b      	bne.n	800e2be <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800e286:	494f      	ldr	r1, [pc, #316]	; (800e3c4 <inc_lock+0x168>)
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	4613      	mov	r3, r2
 800e28c:	005b      	lsls	r3, r3, #1
 800e28e:	4413      	add	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	440b      	add	r3, r1
 800e294:	3304      	adds	r3, #4
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800e29e:	429a      	cmp	r2, r3
 800e2a0:	d10d      	bne.n	800e2be <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800e2a2:	4948      	ldr	r1, [pc, #288]	; (800e3c4 <inc_lock+0x168>)
 800e2a4:	68fa      	ldr	r2, [r7, #12]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	4413      	add	r3, r2
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	440b      	add	r3, r1
 800e2b0:	3308      	adds	r3, #8
 800e2b2:	881a      	ldrh	r2, [r3, #0]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d006      	beq.n	800e2cc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	60fb      	str	r3, [r7, #12]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d9d0      	bls.n	800e26c <inc_lock+0x10>
 800e2ca:	e000      	b.n	800e2ce <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 800e2cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d145      	bne.n	800e360 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	e002      	b.n	800e2e0 <inc_lock+0x84>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	60fb      	str	r3, [r7, #12]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2b01      	cmp	r3, #1
 800e2e4:	d809      	bhi.n	800e2fa <inc_lock+0x9e>
 800e2e6:	4937      	ldr	r1, [pc, #220]	; (800e3c4 <inc_lock+0x168>)
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	005b      	lsls	r3, r3, #1
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	440b      	add	r3, r1
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1ef      	bne.n	800e2da <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d101      	bne.n	800e304 <inc_lock+0xa8>
 800e300:	2300      	movs	r3, #0
 800e302:	e05a      	b.n	800e3ba <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 800e30a:	482e      	ldr	r0, [pc, #184]	; (800e3c4 <inc_lock+0x168>)
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	4613      	mov	r3, r2
 800e310:	005b      	lsls	r3, r3, #1
 800e312:	4413      	add	r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4403      	add	r3, r0
 800e318:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800e320:	4828      	ldr	r0, [pc, #160]	; (800e3c4 <inc_lock+0x168>)
 800e322:	68fa      	ldr	r2, [r7, #12]
 800e324:	4613      	mov	r3, r2
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	4413      	add	r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	4403      	add	r3, r0
 800e32e:	3304      	adds	r3, #4
 800e330:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800e338:	4922      	ldr	r1, [pc, #136]	; (800e3c4 <inc_lock+0x168>)
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	4613      	mov	r3, r2
 800e33e:	005b      	lsls	r3, r3, #1
 800e340:	4413      	add	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	440b      	add	r3, r1
 800e346:	3308      	adds	r3, #8
 800e348:	4602      	mov	r2, r0
 800e34a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800e34c:	491d      	ldr	r1, [pc, #116]	; (800e3c4 <inc_lock+0x168>)
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	4613      	mov	r3, r2
 800e352:	005b      	lsls	r3, r3, #1
 800e354:	4413      	add	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	440b      	add	r3, r1
 800e35a:	330a      	adds	r3, #10
 800e35c:	2200      	movs	r2, #0
 800e35e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d00c      	beq.n	800e380 <inc_lock+0x124>
 800e366:	4917      	ldr	r1, [pc, #92]	; (800e3c4 <inc_lock+0x168>)
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	4613      	mov	r3, r2
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	440b      	add	r3, r1
 800e374:	330a      	adds	r3, #10
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <inc_lock+0x124>
 800e37c:	2300      	movs	r3, #0
 800e37e:	e01c      	b.n	800e3ba <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10b      	bne.n	800e39e <inc_lock+0x142>
 800e386:	490f      	ldr	r1, [pc, #60]	; (800e3c4 <inc_lock+0x168>)
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	4613      	mov	r3, r2
 800e38c:	005b      	lsls	r3, r3, #1
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	440b      	add	r3, r1
 800e394:	330a      	adds	r3, #10
 800e396:	881b      	ldrh	r3, [r3, #0]
 800e398:	3301      	adds	r3, #1
 800e39a:	b299      	uxth	r1, r3
 800e39c:	e001      	b.n	800e3a2 <inc_lock+0x146>
 800e39e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e3a2:	4808      	ldr	r0, [pc, #32]	; (800e3c4 <inc_lock+0x168>)
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	005b      	lsls	r3, r3, #1
 800e3aa:	4413      	add	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4403      	add	r3, r0
 800e3b0:	330a      	adds	r3, #10
 800e3b2:	460a      	mov	r2, r1
 800e3b4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3301      	adds	r3, #1
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bc80      	pop	{r7}
 800e3c2:	4770      	bx	lr
 800e3c4:	2000c3fc 	.word	0x2000c3fc

0800e3c8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	607b      	str	r3, [r7, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d82e      	bhi.n	800e43a <dec_lock+0x72>
		n = Files[i].ctr;
 800e3dc:	491b      	ldr	r1, [pc, #108]	; (800e44c <dec_lock+0x84>)
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	4413      	add	r3, r2
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	440b      	add	r3, r1
 800e3ea:	330a      	adds	r3, #10
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e3f0:	89fb      	ldrh	r3, [r7, #14]
 800e3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3f6:	d101      	bne.n	800e3fc <dec_lock+0x34>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800e3fc:	89fb      	ldrh	r3, [r7, #14]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d002      	beq.n	800e408 <dec_lock+0x40>
 800e402:	89fb      	ldrh	r3, [r7, #14]
 800e404:	3b01      	subs	r3, #1
 800e406:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e408:	4910      	ldr	r1, [pc, #64]	; (800e44c <dec_lock+0x84>)
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	4613      	mov	r3, r2
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	4413      	add	r3, r2
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	440b      	add	r3, r1
 800e416:	330a      	adds	r3, #10
 800e418:	89fa      	ldrh	r2, [r7, #14]
 800e41a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e41c:	89fb      	ldrh	r3, [r7, #14]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d108      	bne.n	800e434 <dec_lock+0x6c>
 800e422:	490a      	ldr	r1, [pc, #40]	; (800e44c <dec_lock+0x84>)
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	4613      	mov	r3, r2
 800e428:	005b      	lsls	r3, r3, #1
 800e42a:	4413      	add	r3, r2
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	440b      	add	r3, r1
 800e430:	2200      	movs	r2, #0
 800e432:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e434:	2300      	movs	r3, #0
 800e436:	737b      	strb	r3, [r7, #13]
 800e438:	e001      	b.n	800e43e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e43a:	2302      	movs	r3, #2
 800e43c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e43e:	7b7b      	ldrb	r3, [r7, #13]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	bc80      	pop	{r7}
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	2000c3fc 	.word	0x2000c3fc

0800e450 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e458:	2300      	movs	r3, #0
 800e45a:	60fb      	str	r3, [r7, #12]
 800e45c:	e016      	b.n	800e48c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e45e:	4910      	ldr	r1, [pc, #64]	; (800e4a0 <clear_lock+0x50>)
 800e460:	68fa      	ldr	r2, [r7, #12]
 800e462:	4613      	mov	r3, r2
 800e464:	005b      	lsls	r3, r3, #1
 800e466:	4413      	add	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	440b      	add	r3, r1
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	d108      	bne.n	800e486 <clear_lock+0x36>
 800e474:	490a      	ldr	r1, [pc, #40]	; (800e4a0 <clear_lock+0x50>)
 800e476:	68fa      	ldr	r2, [r7, #12]
 800e478:	4613      	mov	r3, r2
 800e47a:	005b      	lsls	r3, r3, #1
 800e47c:	4413      	add	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	440b      	add	r3, r1
 800e482:	2200      	movs	r2, #0
 800e484:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	3301      	adds	r3, #1
 800e48a:	60fb      	str	r3, [r7, #12]
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d9e5      	bls.n	800e45e <clear_lock+0xe>
	}
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	bc80      	pop	{r7}
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	2000c3fc 	.word	0x2000c3fc

0800e4a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b086      	sub	sp, #24
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d038      	beq.n	800e52c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e4c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e4c8:	6879      	ldr	r1, [r7, #4]
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	f7ff fd7f 	bl	800dfd0 <disk_write>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d002      	beq.n	800e4de <sync_window+0x3a>
			res = FR_DISK_ERR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	73fb      	strb	r3, [r7, #15]
 800e4dc:	e026      	b.n	800e52c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800e4ec:	697a      	ldr	r2, [r7, #20]
 800e4ee:	1ad2      	subs	r2, r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d218      	bcs.n	800e52c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800e500:	613b      	str	r3, [r7, #16]
 800e502:	e010      	b.n	800e526 <sync_window+0x82>
					wsect += fs->fsize;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e50a:	697a      	ldr	r2, [r7, #20]
 800e50c:	4413      	add	r3, r2
 800e50e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e516:	6879      	ldr	r1, [r7, #4]
 800e518:	2301      	movs	r3, #1
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	f7ff fd58 	bl	800dfd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	3b01      	subs	r3, #1
 800e524:	613b      	str	r3, [r7, #16]
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d8eb      	bhi.n	800e504 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 800e52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b084      	sub	sp, #16
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d01b      	beq.n	800e588 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff ffa7 	bl	800e4a4 <sync_window>
 800e556:	4603      	mov	r3, r0
 800e558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d113      	bne.n	800e588 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	2301      	movs	r3, #1
 800e56a:	683a      	ldr	r2, [r7, #0]
 800e56c:	f7ff fd10 	bl	800df90 <disk_read>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d004      	beq.n	800e580 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e576:	f04f 33ff 	mov.w	r3, #4294967295
 800e57a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	683a      	ldr	r2, [r7, #0]
 800e584:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 800e588:	7bfb      	ldrb	r3, [r7, #15]
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3710      	adds	r7, #16
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b084      	sub	sp, #16
 800e596:	af00      	add	r7, sp, #0
 800e598:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7ff ff82 	bl	800e4a4 <sync_window>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e5a4:	7bfb      	ldrb	r3, [r7, #15]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f040 809b 	bne.w	800e6e2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e5b2:	2b03      	cmp	r3, #3
 800e5b4:	f040 8088 	bne.w	800e6c8 <sync_fs+0x136>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	f040 8082 	bne.w	800e6c8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7ff fd5b 	bl	800e088 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2255      	movs	r2, #85	; 0x55
 800e5d6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	22aa      	movs	r2, #170	; 0xaa
 800e5de:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2252      	movs	r2, #82	; 0x52
 800e5e6:	701a      	strb	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2252      	movs	r2, #82	; 0x52
 800e5ec:	705a      	strb	r2, [r3, #1]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2261      	movs	r2, #97	; 0x61
 800e5f2:	709a      	strb	r2, [r3, #2]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2241      	movs	r2, #65	; 0x41
 800e5f8:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2272      	movs	r2, #114	; 0x72
 800e5fe:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2272      	movs	r2, #114	; 0x72
 800e606:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2241      	movs	r2, #65	; 0x41
 800e60e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2261      	movs	r2, #97	; 0x61
 800e616:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e620:	b2da      	uxtb	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e62e:	b29b      	uxth	r3, r3
 800e630:	0a1b      	lsrs	r3, r3, #8
 800e632:	b29b      	uxth	r3, r3
 800e634:	b2da      	uxtb	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e642:	0c1b      	lsrs	r3, r3, #16
 800e644:	b2da      	uxtb	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e652:	0e1b      	lsrs	r3, r3, #24
 800e654:	b2da      	uxtb	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e662:	b2da      	uxtb	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e670:	b29b      	uxth	r3, r3
 800e672:	0a1b      	lsrs	r3, r3, #8
 800e674:	b29b      	uxth	r3, r3
 800e676:	b2da      	uxtb	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e684:	0c1b      	lsrs	r3, r3, #16
 800e686:	b2da      	uxtb	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800e694:	0e1b      	lsrs	r3, r3, #24
 800e696:	b2da      	uxtb	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800e6a4:	1c5a      	adds	r2, r3, #1
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800e6b2:	6879      	ldr	r1, [r7, #4]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	f7ff fc88 	bl	800dfd0 <disk_write>
			fs->fsi_flag = 0;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7ff fc9c 	bl	800e010 <disk_ioctl>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	3b02      	subs	r3, #2
 800e6fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e702:	3b02      	subs	r3, #2
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	429a      	cmp	r2, r3
 800e708:	d301      	bcc.n	800e70e <clust2sect+0x22>
 800e70a:	2300      	movs	r3, #0
 800e70c:	e00a      	b.n	800e724 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800e714:	461a      	mov	r2, r3
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	fb03 f202 	mul.w	r2, r3, r2
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800e722:	4413      	add	r3, r2
}
 800e724:	4618      	mov	r0, r3
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	bc80      	pop	{r7}
 800e72c:	4770      	bx	lr

0800e72e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800e72e:	b580      	push	{r7, lr}
 800e730:	b086      	sub	sp, #24
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d905      	bls.n	800e74a <get_fat+0x1c>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e744:	683a      	ldr	r2, [r7, #0]
 800e746:	429a      	cmp	r2, r3
 800e748:	d302      	bcc.n	800e750 <get_fat+0x22>
		val = 1;	/* Internal error */
 800e74a:	2301      	movs	r3, #1
 800e74c:	617b      	str	r3, [r7, #20]
 800e74e:	e0a3      	b.n	800e898 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e750:	f04f 33ff 	mov.w	r3, #4294967295
 800e754:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e75c:	2b03      	cmp	r3, #3
 800e75e:	d068      	beq.n	800e832 <get_fat+0x104>
 800e760:	2b03      	cmp	r3, #3
 800e762:	f300 808f 	bgt.w	800e884 <get_fat+0x156>
 800e766:	2b01      	cmp	r3, #1
 800e768:	d002      	beq.n	800e770 <get_fat+0x42>
 800e76a:	2b02      	cmp	r3, #2
 800e76c:	d040      	beq.n	800e7f0 <get_fat+0xc2>
 800e76e:	e089      	b.n	800e884 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	085b      	lsrs	r3, r3, #1
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	4413      	add	r3, r2
 800e77c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	0a5b      	lsrs	r3, r3, #9
 800e788:	4413      	add	r3, r2
 800e78a:	4619      	mov	r1, r3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f7ff fed2 	bl	800e536 <move_window>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d178      	bne.n	800e88a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	60fa      	str	r2, [r7, #12]
 800e79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	5cd3      	ldrb	r3, [r2, r3]
 800e7a6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	0a5b      	lsrs	r3, r3, #9
 800e7b2:	4413      	add	r3, r2
 800e7b4:	4619      	mov	r1, r3
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7ff febd 	bl	800e536 <move_window>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d165      	bne.n	800e88e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	5cd3      	ldrb	r3, [r2, r3]
 800e7cc:	021b      	lsls	r3, r3, #8
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	f003 0301 	and.w	r3, r3, #1
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <get_fat+0xb8>
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	091b      	lsrs	r3, r3, #4
 800e7e4:	e002      	b.n	800e7ec <get_fat+0xbe>
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7ec:	617b      	str	r3, [r7, #20]
			break;
 800e7ee:	e053      	b.n	800e898 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	0a1b      	lsrs	r3, r3, #8
 800e7fa:	4413      	add	r3, r2
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7ff fe99 	bl	800e536 <move_window>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d143      	bne.n	800e892 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	4413      	add	r3, r2
 800e816:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	3301      	adds	r3, #1
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	021b      	lsls	r3, r3, #8
 800e820:	b21a      	sxth	r2, r3
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	b21b      	sxth	r3, r3
 800e828:	4313      	orrs	r3, r2
 800e82a:	b21b      	sxth	r3, r3
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	617b      	str	r3, [r7, #20]
			break;
 800e830:	e032      	b.n	800e898 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	09db      	lsrs	r3, r3, #7
 800e83c:	4413      	add	r3, r2
 800e83e:	4619      	mov	r1, r3
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff fe78 	bl	800e536 <move_window>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d124      	bne.n	800e896 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	4413      	add	r3, r2
 800e858:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	3303      	adds	r3, #3
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	061a      	lsls	r2, r3, #24
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	3302      	adds	r3, #2
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	041b      	lsls	r3, r3, #16
 800e86a:	4313      	orrs	r3, r2
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	3201      	adds	r2, #1
 800e870:	7812      	ldrb	r2, [r2, #0]
 800e872:	0212      	lsls	r2, r2, #8
 800e874:	4313      	orrs	r3, r2
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	7812      	ldrb	r2, [r2, #0]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e880:	617b      	str	r3, [r7, #20]
			break;
 800e882:	e009      	b.n	800e898 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800e884:	2301      	movs	r3, #1
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	e006      	b.n	800e898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e88a:	bf00      	nop
 800e88c:	e004      	b.n	800e898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e88e:	bf00      	nop
 800e890:	e002      	b.n	800e898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e892:	bf00      	nop
 800e894:	e000      	b.n	800e898 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e896:	bf00      	nop
		}
	}

	return val;
 800e898:	697b      	ldr	r3, [r7, #20]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b088      	sub	sp, #32
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d905      	bls.n	800e8c0 <put_fat+0x1e>
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d302      	bcc.n	800e8c6 <put_fat+0x24>
		res = FR_INT_ERR;
 800e8c0:	2302      	movs	r3, #2
 800e8c2:	77fb      	strb	r3, [r7, #31]
 800e8c4:	e0f6      	b.n	800eab4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	f000 809e 	beq.w	800ea0e <put_fat+0x16c>
 800e8d2:	2b03      	cmp	r3, #3
 800e8d4:	f300 80e4 	bgt.w	800eaa0 <put_fat+0x1fe>
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d002      	beq.n	800e8e2 <put_fat+0x40>
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d06f      	beq.n	800e9c0 <put_fat+0x11e>
 800e8e0:	e0de      	b.n	800eaa0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	617b      	str	r3, [r7, #20]
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	085b      	lsrs	r3, r3, #1
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	0a5b      	lsrs	r3, r3, #9
 800e8fa:	4413      	add	r3, r2
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f7ff fe19 	bl	800e536 <move_window>
 800e904:	4603      	mov	r3, r0
 800e906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e908:	7ffb      	ldrb	r3, [r7, #31]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f040 80cb 	bne.w	800eaa6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	617a      	str	r2, [r7, #20]
 800e916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	4413      	add	r3, r2
 800e91e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	f003 0301 	and.w	r3, r3, #1
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00d      	beq.n	800e946 <put_fat+0xa4>
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	b25b      	sxtb	r3, r3
 800e930:	f003 030f 	and.w	r3, r3, #15
 800e934:	b25a      	sxtb	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	011b      	lsls	r3, r3, #4
 800e93c:	b25b      	sxtb	r3, r3
 800e93e:	4313      	orrs	r3, r2
 800e940:	b25b      	sxtb	r3, r3
 800e942:	b2db      	uxtb	r3, r3
 800e944:	e001      	b.n	800e94a <put_fat+0xa8>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	69ba      	ldr	r2, [r7, #24]
 800e94c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2201      	movs	r2, #1
 800e952:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	0a5b      	lsrs	r3, r3, #9
 800e960:	4413      	add	r3, r2
 800e962:	4619      	mov	r1, r3
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7ff fde6 	bl	800e536 <move_window>
 800e96a:	4603      	mov	r3, r0
 800e96c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e96e:	7ffb      	ldrb	r3, [r7, #31]
 800e970:	2b00      	cmp	r3, #0
 800e972:	f040 809a 	bne.w	800eaaa <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	4413      	add	r3, r2
 800e980:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	f003 0301 	and.w	r3, r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d003      	beq.n	800e994 <put_fat+0xf2>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	091b      	lsrs	r3, r3, #4
 800e990:	b2db      	uxtb	r3, r3
 800e992:	e00e      	b.n	800e9b2 <put_fat+0x110>
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	b25b      	sxtb	r3, r3
 800e99a:	f023 030f 	bic.w	r3, r3, #15
 800e99e:	b25a      	sxtb	r2, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	0a1b      	lsrs	r3, r3, #8
 800e9a4:	b25b      	sxtb	r3, r3
 800e9a6:	f003 030f 	and.w	r3, r3, #15
 800e9aa:	b25b      	sxtb	r3, r3
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	b25b      	sxtb	r3, r3
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	69ba      	ldr	r2, [r7, #24]
 800e9b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800e9be:	e079      	b.n	800eab4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	0a1b      	lsrs	r3, r3, #8
 800e9ca:	4413      	add	r3, r2
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f7ff fdb1 	bl	800e536 <move_window>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9d8:	7ffb      	ldrb	r3, [r7, #31]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d167      	bne.n	800eaae <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	005b      	lsls	r3, r3, #1
 800e9e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e9e6:	68fa      	ldr	r2, [r7, #12]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	701a      	strb	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	0a1b      	lsrs	r3, r3, #8
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	b2d2      	uxtb	r2, r2
 800ea02:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2201      	movs	r2, #1
 800ea08:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ea0c:	e052      	b.n	800eab4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	09db      	lsrs	r3, r3, #7
 800ea18:	4413      	add	r3, r2
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f7ff fd8a 	bl	800e536 <move_window>
 800ea22:	4603      	mov	r3, r0
 800ea24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea26:	7ffb      	ldrb	r3, [r7, #31]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d142      	bne.n	800eab2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	009b      	lsls	r3, r3, #2
 800ea30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	4413      	add	r3, r2
 800ea38:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	3303      	adds	r3, #3
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	061a      	lsls	r2, r3, #24
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	3302      	adds	r3, #2
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	041b      	lsls	r3, r3, #16
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	69ba      	ldr	r2, [r7, #24]
 800ea4e:	3201      	adds	r2, #1
 800ea50:	7812      	ldrb	r2, [r2, #0]
 800ea52:	0212      	lsls	r2, r2, #8
 800ea54:	4313      	orrs	r3, r2
 800ea56:	69ba      	ldr	r2, [r7, #24]
 800ea58:	7812      	ldrb	r2, [r2, #0]
 800ea5a:	4313      	orrs	r3, r2
 800ea5c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	701a      	strb	r2, [r3, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	0a1b      	lsrs	r3, r3, #8
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	b2d2      	uxtb	r2, r2
 800ea7c:	701a      	strb	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	0c1a      	lsrs	r2, r3, #16
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	3302      	adds	r3, #2
 800ea86:	b2d2      	uxtb	r2, r2
 800ea88:	701a      	strb	r2, [r3, #0]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	0e1a      	lsrs	r2, r3, #24
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	3303      	adds	r3, #3
 800ea92:	b2d2      	uxtb	r2, r2
 800ea94:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800ea9e:	e009      	b.n	800eab4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	77fb      	strb	r3, [r7, #31]
 800eaa4:	e006      	b.n	800eab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800eaa6:	bf00      	nop
 800eaa8:	e004      	b.n	800eab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800eaaa:	bf00      	nop
 800eaac:	e002      	b.n	800eab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800eaae:	bf00      	nop
 800eab0:	e000      	b.n	800eab4 <put_fat+0x212>
			if (res != FR_OK) break;
 800eab2:	bf00      	nop
		}
	}

	return res;
 800eab4:	7ffb      	ldrb	r3, [r7, #31]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3720      	adds	r7, #32
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b084      	sub	sp, #16
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d905      	bls.n	800eada <remove_chain+0x1c>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d302      	bcc.n	800eae0 <remove_chain+0x22>
		res = FR_INT_ERR;
 800eada:	2302      	movs	r3, #2
 800eadc:	73fb      	strb	r3, [r7, #15]
 800eade:	e043      	b.n	800eb68 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800eae0:	2300      	movs	r3, #0
 800eae2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800eae4:	e036      	b.n	800eb54 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800eae6:	6839      	ldr	r1, [r7, #0]
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7ff fe20 	bl	800e72e <get_fat>
 800eaee:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d035      	beq.n	800eb62 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d102      	bne.n	800eb02 <remove_chain+0x44>
 800eafc:	2302      	movs	r3, #2
 800eafe:	73fb      	strb	r3, [r7, #15]
 800eb00:	e032      	b.n	800eb68 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb08:	d102      	bne.n	800eb10 <remove_chain+0x52>
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	73fb      	strb	r3, [r7, #15]
 800eb0e:	e02b      	b.n	800eb68 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800eb10:	2200      	movs	r2, #0
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7ff fec4 	bl	800e8a2 <put_fat>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d120      	bne.n	800eb66 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2e:	d00f      	beq.n	800eb50 <remove_chain+0x92>
				fs->free_clust++;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800eb44:	f043 0301 	orr.w	r3, r3, #1
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eb5a:	683a      	ldr	r2, [r7, #0]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d3c2      	bcc.n	800eae6 <remove_chain+0x28>
 800eb60:	e002      	b.n	800eb68 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800eb62:	bf00      	nop
 800eb64:	e000      	b.n	800eb68 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800eb66:	bf00      	nop
		}
	}

	return res;
 800eb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b086      	sub	sp, #24
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10f      	bne.n	800eba2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800eb88:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d005      	beq.n	800eb9c <create_chain+0x2a>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eb96:	693a      	ldr	r2, [r7, #16]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d31c      	bcc.n	800ebd6 <create_chain+0x64>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	613b      	str	r3, [r7, #16]
 800eba0:	e019      	b.n	800ebd6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff fdc2 	bl	800e72e <get_fat>
 800ebaa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d801      	bhi.n	800ebb6 <create_chain+0x44>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e076      	b.n	800eca4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebbc:	d101      	bne.n	800ebc2 <create_chain+0x50>
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	e070      	b.n	800eca4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d201      	bcs.n	800ebd2 <create_chain+0x60>
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	e068      	b.n	800eca4 <create_chain+0x132>
		scl = clst;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800ebd6:	693b      	ldr	r3, [r7, #16]
 800ebd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d307      	bcc.n	800ebfc <create_chain+0x8a>
			ncl = 2;
 800ebec:	2302      	movs	r3, #2
 800ebee:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800ebf0:	697a      	ldr	r2, [r7, #20]
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d901      	bls.n	800ebfc <create_chain+0x8a>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	e053      	b.n	800eca4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800ebfc:	6979      	ldr	r1, [r7, #20]
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff fd95 	bl	800e72e <get_fat>
 800ec04:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00e      	beq.n	800ec2a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec12:	d002      	beq.n	800ec1a <create_chain+0xa8>
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d101      	bne.n	800ec1e <create_chain+0xac>
			return cs;
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	e042      	b.n	800eca4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d1d9      	bne.n	800ebda <create_chain+0x68>
 800ec26:	2300      	movs	r3, #0
 800ec28:	e03c      	b.n	800eca4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800ec2a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800ec2c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800ec30:	6979      	ldr	r1, [r7, #20]
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff fe35 	bl	800e8a2 <put_fat>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d109      	bne.n	800ec56 <create_chain+0xe4>
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d006      	beq.n	800ec56 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800ec48:	697a      	ldr	r2, [r7, #20]
 800ec4a:	6839      	ldr	r1, [r7, #0]
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff fe28 	bl	800e8a2 <put_fat>
 800ec52:	4603      	mov	r3, r0
 800ec54:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800ec56:	7bfb      	ldrb	r3, [r7, #15]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d11a      	bne.n	800ec92 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	697a      	ldr	r2, [r7, #20]
 800ec60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec6e:	d018      	beq.n	800eca2 <create_chain+0x130>
			fs->free_clust--;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ec76:	1e5a      	subs	r2, r3, #1
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800ec84:	f043 0301 	orr.w	r3, r3, #1
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800ec90:	e007      	b.n	800eca2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d102      	bne.n	800ec9e <create_chain+0x12c>
 800ec98:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9c:	e000      	b.n	800eca0 <create_chain+0x12e>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800eca2:	697b      	ldr	r3, [r7, #20]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3718      	adds	r7, #24
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b087      	sub	sp, #28
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	0a5b      	lsrs	r3, r3, #9
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800ecca:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800ecce:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecd2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	1d1a      	adds	r2, r3, #4
 800ecd8:	613a      	str	r2, [r7, #16]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <clmt_clust+0x3c>
 800ece4:	2300      	movs	r3, #0
 800ece6:	e010      	b.n	800ed0a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800ece8:	697a      	ldr	r2, [r7, #20]
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d307      	bcc.n	800ed00 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800ecf0:	697a      	ldr	r2, [r7, #20]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	1ad3      	subs	r3, r2, r3
 800ecf6:	617b      	str	r3, [r7, #20]
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ecfe:	e7e9      	b.n	800ecd4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800ed00:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	4413      	add	r3, r2
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	371c      	adds	r7, #28
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bc80      	pop	{r7}
 800ed12:	4770      	bx	lr

0800ed14 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	b29a      	uxth	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ed2e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d007      	beq.n	800ed46 <dir_sdi+0x32>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed40:	697a      	ldr	r2, [r7, #20]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d301      	bcc.n	800ed4a <dir_sdi+0x36>
		return FR_INT_ERR;
 800ed46:	2302      	movs	r3, #2
 800ed48:	e074      	b.n	800ee34 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10c      	bne.n	800ed6a <dir_sdi+0x56>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ed5a:	2b03      	cmp	r3, #3
 800ed5c:	d105      	bne.n	800ed6a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed64:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ed68:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d111      	bne.n	800ed94 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed76:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d301      	bcc.n	800ed86 <dir_sdi+0x72>
			return FR_INT_ERR;
 800ed82:	2302      	movs	r3, #2
 800ed84:	e056      	b.n	800ee34 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed8c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ed90:	613b      	str	r3, [r7, #16]
 800ed92:	e032      	b.n	800edfa <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed9a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ed9e:	011b      	lsls	r3, r3, #4
 800eda0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800eda2:	e01e      	b.n	800ede2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800edaa:	6979      	ldr	r1, [r7, #20]
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff fcbe 	bl	800e72e <get_fat>
 800edb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edba:	d101      	bne.n	800edc0 <dir_sdi+0xac>
 800edbc:	2301      	movs	r3, #1
 800edbe:	e039      	b.n	800ee34 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d907      	bls.n	800edd6 <dir_sdi+0xc2>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800edcc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d301      	bcc.n	800edda <dir_sdi+0xc6>
				return FR_INT_ERR;
 800edd6:	2302      	movs	r3, #2
 800edd8:	e02c      	b.n	800ee34 <dir_sdi+0x120>
			idx -= ic;
 800edda:	683a      	ldr	r2, [r7, #0]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d2dc      	bcs.n	800eda4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800edf0:	6979      	ldr	r1, [r7, #20]
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7ff fc7a 	bl	800e6ec <clust2sect>
 800edf8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	697a      	ldr	r2, [r7, #20]
 800edfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d101      	bne.n	800ee0c <dir_sdi+0xf8>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	e013      	b.n	800ee34 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	091a      	lsrs	r2, r3, #4
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	441a      	add	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee20:	461a      	mov	r2, r3
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	f003 030f 	and.w	r3, r3, #15
 800ee28:	015b      	lsls	r3, r3, #5
 800ee2a:	441a      	add	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800ee32:	2300      	movs	r3, #0
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ee3c:	b590      	push	{r4, r7, lr}
 800ee3e:	b087      	sub	sp, #28
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d004      	beq.n	800ee62 <dir_next+0x26>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d101      	bne.n	800ee66 <dir_next+0x2a>
		return FR_NO_FILE;
 800ee62:	2304      	movs	r3, #4
 800ee64:	e0dd      	b.n	800f022 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f003 030f 	and.w	r3, r3, #15
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f040 80c6 	bne.w	800effe <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ee78:	1c5a      	adds	r2, r3, #1
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d10b      	bne.n	800eea2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ee90:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800ee94:	461a      	mov	r2, r3
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	f0c0 80b0 	bcc.w	800effe <dir_next+0x1c2>
				return FR_NO_FILE;
 800ee9e:	2304      	movs	r3, #4
 800eea0:	e0bf      	b.n	800f022 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	091b      	lsrs	r3, r3, #4
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800eeac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800eeb0:	3a01      	subs	r2, #1
 800eeb2:	4013      	ands	r3, r2
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f040 80a2 	bne.w	800effe <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800eec6:	4619      	mov	r1, r3
 800eec8:	4610      	mov	r0, r2
 800eeca:	f7ff fc30 	bl	800e72e <get_fat>
 800eece:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d801      	bhi.n	800eeda <dir_next+0x9e>
 800eed6:	2302      	movs	r3, #2
 800eed8:	e0a3      	b.n	800f022 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee0:	d101      	bne.n	800eee6 <dir_next+0xaa>
 800eee2:	2301      	movs	r3, #1
 800eee4:	e09d      	b.n	800f022 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800eeec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eef0:	697a      	ldr	r2, [r7, #20]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d374      	bcc.n	800efe0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d101      	bne.n	800ef00 <dir_next+0xc4>
 800eefc:	2304      	movs	r3, #4
 800eefe:	e090      	b.n	800f022 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	4610      	mov	r0, r2
 800ef10:	f7ff fe2f 	bl	800eb72 <create_chain>
 800ef14:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d101      	bne.n	800ef20 <dir_next+0xe4>
 800ef1c:	2307      	movs	r3, #7
 800ef1e:	e080      	b.n	800f022 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	2b01      	cmp	r3, #1
 800ef24:	d101      	bne.n	800ef2a <dir_next+0xee>
 800ef26:	2302      	movs	r3, #2
 800ef28:	e07b      	b.n	800f022 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef30:	d101      	bne.n	800ef36 <dir_next+0xfa>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e075      	b.n	800f022 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fab1 	bl	800e4a4 <sync_window>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <dir_next+0x110>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e06a      	b.n	800f022 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ef52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ef56:	2100      	movs	r1, #0
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7ff f895 	bl	800e088 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800ef6a:	6979      	ldr	r1, [r7, #20]
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	f7ff fbbd 	bl	800e6ec <clust2sect>
 800ef72:	4603      	mov	r3, r0
 800ef74:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800ef78:	2300      	movs	r3, #0
 800ef7a:	613b      	str	r3, [r7, #16]
 800ef7c:	e01b      	b.n	800efb6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ef84:	2201      	movs	r2, #1
 800ef86:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff fa87 	bl	800e4a4 <sync_window>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <dir_next+0x164>
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e040      	b.n	800f022 <dir_next+0x1e6>
						dp->fs->winsect++;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800efa6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800efaa:	3201      	adds	r2, #1
 800efac:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	3301      	adds	r3, #1
 800efb4:	613b      	str	r3, [r7, #16]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800efbc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800efc0:	461a      	mov	r2, r3
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d3da      	bcc.n	800ef7e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800efce:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800efd8:	693a      	ldr	r2, [r7, #16]
 800efda:	1a8a      	subs	r2, r1, r2
 800efdc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	697a      	ldr	r2, [r7, #20]
 800efe4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800efee:	6979      	ldr	r1, [r7, #20]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7ff fb7b 	bl	800e6ec <clust2sect>
 800eff6:	4602      	mov	r2, r0
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	b29a      	uxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f00e:	461a      	mov	r2, r3
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f003 030f 	and.w	r3, r3, #15
 800f016:	015b      	lsls	r3, r3, #5
 800f018:	441a      	add	r2, r3
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800f020:	2300      	movs	r3, #0
}
 800f022:	4618      	mov	r0, r3
 800f024:	371c      	adds	r7, #28
 800f026:	46bd      	mov	sp, r7
 800f028:	bd90      	pop	{r4, r7, pc}

0800f02a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b084      	sub	sp, #16
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
 800f032:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800f034:	2100      	movs	r1, #0
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7ff fe6c 	bl	800ed14 <dir_sdi>
 800f03c:	4603      	mov	r3, r0
 800f03e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d131      	bne.n	800f0aa <dir_alloc+0x80>
		n = 0;
 800f046:	2300      	movs	r3, #0
 800f048:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f056:	4619      	mov	r1, r3
 800f058:	4610      	mov	r0, r2
 800f05a:	f7ff fa6c 	bl	800e536 <move_window>
 800f05e:	4603      	mov	r3, r0
 800f060:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f062:	7bfb      	ldrb	r3, [r7, #15]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d11f      	bne.n	800f0a8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2be5      	cmp	r3, #229	; 0xe5
 800f072:	d005      	beq.n	800f080 <dir_alloc+0x56>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d107      	bne.n	800f090 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	3301      	adds	r3, #1
 800f084:	60bb      	str	r3, [r7, #8]
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d102      	bne.n	800f094 <dir_alloc+0x6a>
 800f08e:	e00c      	b.n	800f0aa <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f090:	2300      	movs	r3, #0
 800f092:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800f094:	2101      	movs	r1, #1
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7ff fed0 	bl	800ee3c <dir_next>
 800f09c:	4603      	mov	r3, r0
 800f09e:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d0d1      	beq.n	800f04a <dir_alloc+0x20>
 800f0a6:	e000      	b.n	800f0aa <dir_alloc+0x80>
			if (res != FR_OK) break;
 800f0a8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
 800f0ac:	2b04      	cmp	r3, #4
 800f0ae:	d101      	bne.n	800f0b4 <dir_alloc+0x8a>
 800f0b0:	2307      	movs	r3, #7
 800f0b2:	73fb      	strb	r3, [r7, #15]
	return res;
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800f0be:	b480      	push	{r7}
 800f0c0:	b085      	sub	sp, #20
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
 800f0c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	331b      	adds	r3, #27
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	021b      	lsls	r3, r3, #8
 800f0d0:	b21a      	sxth	r2, r3
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	331a      	adds	r3, #26
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	b21b      	sxth	r3, r3
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	b21b      	sxth	r3, r3
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f0e8:	2b03      	cmp	r3, #3
 800f0ea:	d10f      	bne.n	800f10c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	3315      	adds	r3, #21
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	021b      	lsls	r3, r3, #8
 800f0f4:	b21a      	sxth	r2, r3
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	3314      	adds	r3, #20
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	b21b      	sxth	r3, r3
 800f0fe:	4313      	orrs	r3, r2
 800f100:	b21b      	sxth	r3, r3
 800f102:	b29b      	uxth	r3, r3
 800f104:	041b      	lsls	r3, r3, #16
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	4313      	orrs	r3, r2
 800f10a:	60fb      	str	r3, [r7, #12]

	return cl;
 800f10c:	68fb      	ldr	r3, [r7, #12]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3714      	adds	r7, #20
 800f112:	46bd      	mov	sp, r7
 800f114:	bc80      	pop	{r7}
 800f116:	4770      	bx	lr

0800f118 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	331a      	adds	r3, #26
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	b2d2      	uxtb	r2, r2
 800f12a:	701a      	strb	r2, [r3, #0]
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	0a1b      	lsrs	r3, r3, #8
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	331b      	adds	r3, #27
 800f138:	b2d2      	uxtb	r2, r2
 800f13a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	0c1a      	lsrs	r2, r3, #16
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	3314      	adds	r3, #20
 800f144:	b2d2      	uxtb	r2, r2
 800f146:	701a      	strb	r2, [r3, #0]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	0c1b      	lsrs	r3, r3, #16
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	0a1b      	lsrs	r3, r3, #8
 800f150:	b29a      	uxth	r2, r3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	3315      	adds	r3, #21
 800f156:	b2d2      	uxtb	r2, r2
 800f158:	701a      	strb	r2, [r3, #0]
}
 800f15a:	bf00      	nop
 800f15c:	370c      	adds	r7, #12
 800f15e:	46bd      	mov	sp, r7
 800f160:	bc80      	pop	{r7}
 800f162:	4770      	bx	lr

0800f164 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b086      	sub	sp, #24
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f16c:	2100      	movs	r1, #0
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f7ff fdd0 	bl	800ed14 <dir_sdi>
 800f174:	4603      	mov	r3, r0
 800f176:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f178:	7dfb      	ldrb	r3, [r7, #23]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d001      	beq.n	800f182 <dir_find+0x1e>
 800f17e:	7dfb      	ldrb	r3, [r7, #23]
 800f180:	e03b      	b.n	800f1fa <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f18e:	4619      	mov	r1, r3
 800f190:	4610      	mov	r0, r2
 800f192:	f7ff f9d0 	bl	800e536 <move_window>
 800f196:	4603      	mov	r3, r0
 800f198:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f19a:	7dfb      	ldrb	r3, [r7, #23]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d128      	bne.n	800f1f2 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f1a6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f1ae:	7bfb      	ldrb	r3, [r7, #15]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d102      	bne.n	800f1ba <dir_find+0x56>
 800f1b4:	2304      	movs	r3, #4
 800f1b6:	75fb      	strb	r3, [r7, #23]
 800f1b8:	e01e      	b.n	800f1f8 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	330b      	adds	r3, #11
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	f003 0308 	and.w	r3, r3, #8
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d10a      	bne.n	800f1de <dir_find+0x7a>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f1ce:	220b      	movs	r2, #11
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6938      	ldr	r0, [r7, #16]
 800f1d4:	f7fe ff72 	bl	800e0bc <mem_cmp>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00b      	beq.n	800f1f6 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800f1de:	2100      	movs	r1, #0
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f7ff fe2b 	bl	800ee3c <dir_next>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f1ea:	7dfb      	ldrb	r3, [r7, #23]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d0c8      	beq.n	800f182 <dir_find+0x1e>
 800f1f0:	e002      	b.n	800f1f8 <dir_find+0x94>
		if (res != FR_OK) break;
 800f1f2:	bf00      	nop
 800f1f4:	e000      	b.n	800f1f8 <dir_find+0x94>
			break;
 800f1f6:	bf00      	nop

	return res;
 800f1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3718      	adds	r7, #24
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b084      	sub	sp, #16
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f20a:	2101      	movs	r1, #1
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f7ff ff0c 	bl	800f02a <dir_alloc>
 800f212:	4603      	mov	r3, r0
 800f214:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800f216:	7bfb      	ldrb	r3, [r7, #15]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d126      	bne.n	800f26a <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f228:	4619      	mov	r1, r3
 800f22a:	4610      	mov	r0, r2
 800f22c:	f7ff f983 	bl	800e536 <move_window>
 800f230:	4603      	mov	r3, r0
 800f232:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f234:	7bfb      	ldrb	r3, [r7, #15]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d117      	bne.n	800f26a <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f240:	2220      	movs	r2, #32
 800f242:	2100      	movs	r1, #0
 800f244:	4618      	mov	r0, r3
 800f246:	f7fe ff1f 	bl	800e088 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f256:	220b      	movs	r2, #11
 800f258:	4619      	mov	r1, r3
 800f25a:	f7fe fef7 	bl	800e04c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f264:	2201      	movs	r2, #1
 800f266:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b088      	sub	sp, #32
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	60fb      	str	r3, [r7, #12]
 800f284:	e002      	b.n	800f28c <create_name+0x18>
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	3301      	adds	r3, #1
 800f28a:	60fb      	str	r3, [r7, #12]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b2f      	cmp	r3, #47	; 0x2f
 800f292:	d0f8      	beq.n	800f286 <create_name+0x12>
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	2b5c      	cmp	r3, #92	; 0x5c
 800f29a:	d0f4      	beq.n	800f286 <create_name+0x12>
	sfn = dp->fn;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f2a2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f2a4:	220b      	movs	r2, #11
 800f2a6:	2120      	movs	r1, #32
 800f2a8:	68b8      	ldr	r0, [r7, #8]
 800f2aa:	f7fe feed 	bl	800e088 <mem_set>
	si = i = b = 0; ni = 8;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	77fb      	strb	r3, [r7, #31]
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	613b      	str	r3, [r7, #16]
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	617b      	str	r3, [r7, #20]
 800f2ba:	2308      	movs	r3, #8
 800f2bc:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	1c5a      	adds	r2, r3, #1
 800f2c2:	617a      	str	r2, [r7, #20]
 800f2c4:	68fa      	ldr	r2, [r7, #12]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800f2cc:	7fbb      	ldrb	r3, [r7, #30]
 800f2ce:	2b20      	cmp	r3, #32
 800f2d0:	d953      	bls.n	800f37a <create_name+0x106>
 800f2d2:	7fbb      	ldrb	r3, [r7, #30]
 800f2d4:	2b2f      	cmp	r3, #47	; 0x2f
 800f2d6:	d050      	beq.n	800f37a <create_name+0x106>
 800f2d8:	7fbb      	ldrb	r3, [r7, #30]
 800f2da:	2b5c      	cmp	r3, #92	; 0x5c
 800f2dc:	d04d      	beq.n	800f37a <create_name+0x106>
		if (c == '.' || i >= ni) {
 800f2de:	7fbb      	ldrb	r3, [r7, #30]
 800f2e0:	2b2e      	cmp	r3, #46	; 0x2e
 800f2e2:	d003      	beq.n	800f2ec <create_name+0x78>
 800f2e4:	693a      	ldr	r2, [r7, #16]
 800f2e6:	69bb      	ldr	r3, [r7, #24]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d30f      	bcc.n	800f30c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	2b08      	cmp	r3, #8
 800f2f0:	d102      	bne.n	800f2f8 <create_name+0x84>
 800f2f2:	7fbb      	ldrb	r3, [r7, #30]
 800f2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2f6:	d001      	beq.n	800f2fc <create_name+0x88>
 800f2f8:	2306      	movs	r3, #6
 800f2fa:	e073      	b.n	800f3e4 <create_name+0x170>
			i = 8; ni = 11;
 800f2fc:	2308      	movs	r3, #8
 800f2fe:	613b      	str	r3, [r7, #16]
 800f300:	230b      	movs	r3, #11
 800f302:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800f304:	7ffb      	ldrb	r3, [r7, #31]
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	77fb      	strb	r3, [r7, #31]
 800f30a:	e035      	b.n	800f378 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f30c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800f310:	2b00      	cmp	r3, #0
 800f312:	da08      	bge.n	800f326 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800f314:	7ffb      	ldrb	r3, [r7, #31]
 800f316:	f043 0303 	orr.w	r3, r3, #3
 800f31a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f31c:	7fbb      	ldrb	r3, [r7, #30]
 800f31e:	3b80      	subs	r3, #128	; 0x80
 800f320:	4a32      	ldr	r2, [pc, #200]	; (800f3ec <create_name+0x178>)
 800f322:	5cd3      	ldrb	r3, [r2, r3]
 800f324:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800f326:	7fbb      	ldrb	r3, [r7, #30]
 800f328:	4619      	mov	r1, r3
 800f32a:	4831      	ldr	r0, [pc, #196]	; (800f3f0 <create_name+0x17c>)
 800f32c:	f7fe feec 	bl	800e108 <chk_chr>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d001      	beq.n	800f33a <create_name+0xc6>
				return FR_INVALID_NAME;
 800f336:	2306      	movs	r3, #6
 800f338:	e054      	b.n	800f3e4 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800f33a:	7fbb      	ldrb	r3, [r7, #30]
 800f33c:	2b40      	cmp	r3, #64	; 0x40
 800f33e:	d907      	bls.n	800f350 <create_name+0xdc>
 800f340:	7fbb      	ldrb	r3, [r7, #30]
 800f342:	2b5a      	cmp	r3, #90	; 0x5a
 800f344:	d804      	bhi.n	800f350 <create_name+0xdc>
				b |= 2;
 800f346:	7ffb      	ldrb	r3, [r7, #31]
 800f348:	f043 0302 	orr.w	r3, r3, #2
 800f34c:	77fb      	strb	r3, [r7, #31]
 800f34e:	e00c      	b.n	800f36a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800f350:	7fbb      	ldrb	r3, [r7, #30]
 800f352:	2b60      	cmp	r3, #96	; 0x60
 800f354:	d909      	bls.n	800f36a <create_name+0xf6>
 800f356:	7fbb      	ldrb	r3, [r7, #30]
 800f358:	2b7a      	cmp	r3, #122	; 0x7a
 800f35a:	d806      	bhi.n	800f36a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800f35c:	7ffb      	ldrb	r3, [r7, #31]
 800f35e:	f043 0301 	orr.w	r3, r3, #1
 800f362:	77fb      	strb	r3, [r7, #31]
 800f364:	7fbb      	ldrb	r3, [r7, #30]
 800f366:	3b20      	subs	r3, #32
 800f368:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	1c5a      	adds	r2, r3, #1
 800f36e:	613a      	str	r2, [r7, #16]
 800f370:	68ba      	ldr	r2, [r7, #8]
 800f372:	4413      	add	r3, r2
 800f374:	7fba      	ldrb	r2, [r7, #30]
 800f376:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f378:	e7a1      	b.n	800f2be <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f37a:	68fa      	ldr	r2, [r7, #12]
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	441a      	add	r2, r3
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800f384:	7fbb      	ldrb	r3, [r7, #30]
 800f386:	2b20      	cmp	r3, #32
 800f388:	d801      	bhi.n	800f38e <create_name+0x11a>
 800f38a:	2304      	movs	r3, #4
 800f38c:	e000      	b.n	800f390 <create_name+0x11c>
 800f38e:	2300      	movs	r3, #0
 800f390:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d101      	bne.n	800f39c <create_name+0x128>
 800f398:	2306      	movs	r3, #6
 800f39a:	e023      	b.n	800f3e4 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	2be5      	cmp	r3, #229	; 0xe5
 800f3a2:	d102      	bne.n	800f3aa <create_name+0x136>
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	2205      	movs	r2, #5
 800f3a8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	2b08      	cmp	r3, #8
 800f3ae:	d102      	bne.n	800f3b6 <create_name+0x142>
 800f3b0:	7ffb      	ldrb	r3, [r7, #31]
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800f3b6:	7ffb      	ldrb	r3, [r7, #31]
 800f3b8:	f003 0303 	and.w	r3, r3, #3
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d103      	bne.n	800f3c8 <create_name+0x154>
 800f3c0:	7fbb      	ldrb	r3, [r7, #30]
 800f3c2:	f043 0310 	orr.w	r3, r3, #16
 800f3c6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800f3c8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ca:	f003 030c 	and.w	r3, r3, #12
 800f3ce:	2b04      	cmp	r3, #4
 800f3d0:	d103      	bne.n	800f3da <create_name+0x166>
 800f3d2:	7fbb      	ldrb	r3, [r7, #30]
 800f3d4:	f043 0308 	orr.w	r3, r3, #8
 800f3d8:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	330b      	adds	r3, #11
 800f3de:	7fba      	ldrb	r2, [r7, #30]
 800f3e0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f3e2:	2300      	movs	r3, #0
#endif
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3720      	adds	r7, #32
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	08022214 	.word	0x08022214
 800f3f0:	080144ec 	.word	0x080144ec

0800f3f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b084      	sub	sp, #16
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	2b2f      	cmp	r3, #47	; 0x2f
 800f404:	d003      	beq.n	800f40e <follow_path+0x1a>
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	2b5c      	cmp	r3, #92	; 0x5c
 800f40c:	d102      	bne.n	800f414 <follow_path+0x20>
		path++;
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	3301      	adds	r3, #1
 800f412:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	2b1f      	cmp	r3, #31
 800f422:	d80a      	bhi.n	800f43a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800f424:	2100      	movs	r1, #0
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff fc74 	bl	800ed14 <dir_sdi>
 800f42c:	4603      	mov	r3, r0
 800f42e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800f438:	e045      	b.n	800f4c6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f43a:	463b      	mov	r3, r7
 800f43c:	4619      	mov	r1, r3
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7ff ff18 	bl	800f274 <create_name>
 800f444:	4603      	mov	r3, r0
 800f446:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800f448:	7bfb      	ldrb	r3, [r7, #15]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d136      	bne.n	800f4bc <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7ff fe88 	bl	800f164 <dir_find>
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800f45e:	7adb      	ldrb	r3, [r3, #11]
 800f460:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d00a      	beq.n	800f47e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	d128      	bne.n	800f4c0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	f003 0304 	and.w	r3, r3, #4
 800f474:	2b00      	cmp	r3, #0
 800f476:	d123      	bne.n	800f4c0 <follow_path+0xcc>
 800f478:	2305      	movs	r3, #5
 800f47a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800f47c:	e020      	b.n	800f4c0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f47e:	7bbb      	ldrb	r3, [r7, #14]
 800f480:	f003 0304 	and.w	r3, r3, #4
 800f484:	2b00      	cmp	r3, #0
 800f486:	d11d      	bne.n	800f4c4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f48e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	330b      	adds	r3, #11
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	f003 0310 	and.w	r3, r3, #16
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d102      	bne.n	800f4a4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800f49e:	2305      	movs	r3, #5
 800f4a0:	73fb      	strb	r3, [r7, #15]
 800f4a2:	e010      	b.n	800f4c6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f4aa:	68b9      	ldr	r1, [r7, #8]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff fe06 	bl	800f0be <ld_clust>
 800f4b2:	4602      	mov	r2, r0
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f4ba:	e7be      	b.n	800f43a <follow_path+0x46>
			if (res != FR_OK) break;
 800f4bc:	bf00      	nop
 800f4be:	e002      	b.n	800f4c6 <follow_path+0xd2>
				break;
 800f4c0:	bf00      	nop
 800f4c2:	e000      	b.n	800f4c6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f4c4:	bf00      	nop
		}
	}

	return res;
 800f4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	3710      	adds	r7, #16
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	bd80      	pop	{r7, pc}

0800f4d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b087      	sub	sp, #28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d031      	beq.n	800f54a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	617b      	str	r3, [r7, #20]
 800f4ec:	e002      	b.n	800f4f4 <get_ldnumber+0x24>
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	2b20      	cmp	r3, #32
 800f4fa:	d903      	bls.n	800f504 <get_ldnumber+0x34>
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	2b3a      	cmp	r3, #58	; 0x3a
 800f502:	d1f4      	bne.n	800f4ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	2b3a      	cmp	r3, #58	; 0x3a
 800f50a:	d11c      	bne.n	800f546 <get_ldnumber+0x76>
			tp = *path;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	1c5a      	adds	r2, r3, #1
 800f516:	60fa      	str	r2, [r7, #12]
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	3b30      	subs	r3, #48	; 0x30
 800f51c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2b09      	cmp	r3, #9
 800f522:	d80e      	bhi.n	800f542 <get_ldnumber+0x72>
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d10a      	bne.n	800f542 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d107      	bne.n	800f542 <get_ldnumber+0x72>
					vol = (int)i;
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	3301      	adds	r3, #1
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	697a      	ldr	r2, [r7, #20]
 800f540:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	e002      	b.n	800f54c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f546:	2300      	movs	r3, #0
 800f548:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f54a:	693b      	ldr	r3, [r7, #16]
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	371c      	adds	r7, #28
 800f550:	46bd      	mov	sp, r7
 800f552:	bc80      	pop	{r7}
 800f554:	4770      	bx	lr
	...

0800f558 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b082      	sub	sp, #8
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2200      	movs	r2, #0
 800f566:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f04f 32ff 	mov.w	r2, #4294967295
 800f570:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800f574:	6839      	ldr	r1, [r7, #0]
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7fe ffdd 	bl	800e536 <move_window>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <check_fs+0x2e>
		return 3;
 800f582:	2303      	movs	r3, #3
 800f584:	e04a      	b.n	800f61c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f58c:	3301      	adds	r3, #1
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	021b      	lsls	r3, r3, #8
 800f592:	b21a      	sxth	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800f59a:	b21b      	sxth	r3, r3
 800f59c:	4313      	orrs	r3, r2
 800f59e:	b21b      	sxth	r3, r3
 800f5a0:	4a20      	ldr	r2, [pc, #128]	; (800f624 <check_fs+0xcc>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d001      	beq.n	800f5aa <check_fs+0x52>
		return 2;
 800f5a6:	2302      	movs	r3, #2
 800f5a8:	e038      	b.n	800f61c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	3336      	adds	r3, #54	; 0x36
 800f5ae:	3303      	adds	r3, #3
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	061a      	lsls	r2, r3, #24
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	3336      	adds	r3, #54	; 0x36
 800f5b8:	3302      	adds	r3, #2
 800f5ba:	781b      	ldrb	r3, [r3, #0]
 800f5bc:	041b      	lsls	r3, r3, #16
 800f5be:	4313      	orrs	r3, r2
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	3236      	adds	r2, #54	; 0x36
 800f5c4:	3201      	adds	r2, #1
 800f5c6:	7812      	ldrb	r2, [r2, #0]
 800f5c8:	0212      	lsls	r2, r2, #8
 800f5ca:	4313      	orrs	r3, r2
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f5d8:	4a13      	ldr	r2, [pc, #76]	; (800f628 <check_fs+0xd0>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d101      	bne.n	800f5e2 <check_fs+0x8a>
		return 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	e01c      	b.n	800f61c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3352      	adds	r3, #82	; 0x52
 800f5e6:	3303      	adds	r3, #3
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	061a      	lsls	r2, r3, #24
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	3352      	adds	r3, #82	; 0x52
 800f5f0:	3302      	adds	r3, #2
 800f5f2:	781b      	ldrb	r3, [r3, #0]
 800f5f4:	041b      	lsls	r3, r3, #16
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	3252      	adds	r2, #82	; 0x52
 800f5fc:	3201      	adds	r2, #1
 800f5fe:	7812      	ldrb	r2, [r2, #0]
 800f600:	0212      	lsls	r2, r2, #8
 800f602:	4313      	orrs	r3, r2
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800f60a:	4313      	orrs	r3, r2
 800f60c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f610:	4a05      	ldr	r2, [pc, #20]	; (800f628 <check_fs+0xd0>)
 800f612:	4293      	cmp	r3, r2
 800f614:	d101      	bne.n	800f61a <check_fs+0xc2>
		return 0;
 800f616:	2300      	movs	r3, #0
 800f618:	e000      	b.n	800f61c <check_fs+0xc4>

	return 1;
 800f61a:	2301      	movs	r3, #1
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3708      	adds	r7, #8
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	ffffaa55 	.word	0xffffaa55
 800f628:	00544146 	.word	0x00544146

0800f62c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b096      	sub	sp, #88	; 0x58
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	2200      	movs	r2, #0
 800f63e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f640:	68b8      	ldr	r0, [r7, #8]
 800f642:	f7ff ff45 	bl	800f4d0 <get_ldnumber>
 800f646:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	da01      	bge.n	800f652 <find_volume+0x26>
 800f64e:	230b      	movs	r3, #11
 800f650:	e2a8      	b.n	800fba4 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f652:	4a9d      	ldr	r2, [pc, #628]	; (800f8c8 <find_volume+0x29c>)
 800f654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f65a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d101      	bne.n	800f666 <find_volume+0x3a>
 800f662:	230c      	movs	r3, #12
 800f664:	e29e      	b.n	800fba4 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f66a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800f66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f672:	2b00      	cmp	r3, #0
 800f674:	d01b      	beq.n	800f6ae <find_volume+0x82>
		stat = disk_status(fs->drv);
 800f676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f678:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fe fc47 	bl	800df10 <disk_status>
 800f682:	4603      	mov	r3, r0
 800f684:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f68c:	f003 0301 	and.w	r3, r3, #1
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10c      	bne.n	800f6ae <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800f694:	79fb      	ldrb	r3, [r7, #7]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d007      	beq.n	800f6aa <find_volume+0x7e>
 800f69a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f69e:	f003 0304 	and.w	r3, r3, #4
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800f6a6:	230a      	movs	r3, #10
 800f6a8:	e27c      	b.n	800fba4 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	e27a      	b.n	800fba4 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b8:	b2da      	uxtb	r2, r3
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6bc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe fc3c 	bl	800df44 <disk_initialize>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800f6d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6d6:	f003 0301 	and.w	r3, r3, #1
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d001      	beq.n	800f6e2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f6de:	2303      	movs	r3, #3
 800f6e0:	e260      	b.n	800fba4 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800f6e2:	79fb      	ldrb	r3, [r7, #7]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d007      	beq.n	800f6f8 <find_volume+0xcc>
 800f6e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f6ec:	f003 0304 	and.w	r3, r3, #4
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d001      	beq.n	800f6f8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f6f4:	230a      	movs	r3, #10
 800f6f6:	e255      	b.n	800fba4 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800f6fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f700:	f7ff ff2a 	bl	800f558 <check_fs>
 800f704:	4603      	mov	r3, r0
 800f706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800f70a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d153      	bne.n	800f7ba <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f712:	2300      	movs	r3, #0
 800f714:	643b      	str	r3, [r7, #64]	; 0x40
 800f716:	e028      	b.n	800f76a <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800f718:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f71c:	011b      	lsls	r3, r3, #4
 800f71e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f722:	4413      	add	r3, r2
 800f724:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800f726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f728:	3304      	adds	r3, #4
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d012      	beq.n	800f756 <find_volume+0x12a>
 800f730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f732:	330b      	adds	r3, #11
 800f734:	781b      	ldrb	r3, [r3, #0]
 800f736:	061a      	lsls	r2, r3, #24
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	330a      	adds	r3, #10
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	041b      	lsls	r3, r3, #16
 800f740:	4313      	orrs	r3, r2
 800f742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f744:	3209      	adds	r2, #9
 800f746:	7812      	ldrb	r2, [r2, #0]
 800f748:	0212      	lsls	r2, r2, #8
 800f74a:	4313      	orrs	r3, r2
 800f74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f74e:	3208      	adds	r2, #8
 800f750:	7812      	ldrb	r2, [r2, #0]
 800f752:	431a      	orrs	r2, r3
 800f754:	e000      	b.n	800f758 <find_volume+0x12c>
 800f756:	2200      	movs	r2, #0
 800f758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	3358      	adds	r3, #88	; 0x58
 800f75e:	443b      	add	r3, r7
 800f760:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800f764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f766:	3301      	adds	r3, #1
 800f768:	643b      	str	r3, [r7, #64]	; 0x40
 800f76a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f76c:	2b03      	cmp	r3, #3
 800f76e:	d9d3      	bls.n	800f718 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800f770:	2300      	movs	r3, #0
 800f772:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f776:	2b00      	cmp	r3, #0
 800f778:	d002      	beq.n	800f780 <find_volume+0x154>
 800f77a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f77c:	3b01      	subs	r3, #1
 800f77e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800f780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	3358      	adds	r3, #88	; 0x58
 800f786:	443b      	add	r3, r7
 800f788:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f78c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800f78e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f790:	2b00      	cmp	r3, #0
 800f792:	d005      	beq.n	800f7a0 <find_volume+0x174>
 800f794:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f796:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f798:	f7ff fede 	bl	800f558 <check_fs>
 800f79c:	4603      	mov	r3, r0
 800f79e:	e000      	b.n	800f7a2 <find_volume+0x176>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800f7a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d005      	beq.n	800f7ba <find_volume+0x18e>
 800f7ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	643b      	str	r3, [r7, #64]	; 0x40
 800f7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d9e2      	bls.n	800f780 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f7ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7be:	2b03      	cmp	r3, #3
 800f7c0:	d101      	bne.n	800f7c6 <find_volume+0x19a>
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	e1ee      	b.n	800fba4 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800f7c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <find_volume+0x1a6>
 800f7ce:	230d      	movs	r3, #13
 800f7d0:	e1e8      	b.n	800fba4 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	7b1b      	ldrb	r3, [r3, #12]
 800f7d6:	021b      	lsls	r3, r3, #8
 800f7d8:	b21a      	sxth	r2, r3
 800f7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7dc:	7adb      	ldrb	r3, [r3, #11]
 800f7de:	b21b      	sxth	r3, r3
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	b21b      	sxth	r3, r3
 800f7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7e8:	d001      	beq.n	800f7ee <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800f7ea:	230d      	movs	r3, #13
 800f7ec:	e1da      	b.n	800fba4 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f0:	7ddb      	ldrb	r3, [r3, #23]
 800f7f2:	021b      	lsls	r3, r3, #8
 800f7f4:	b21a      	sxth	r2, r3
 800f7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f8:	7d9b      	ldrb	r3, [r3, #22]
 800f7fa:	b21b      	sxth	r3, r3
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	b21b      	sxth	r3, r3
 800f800:	b29b      	uxth	r3, r3
 800f802:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800f804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f806:	2b00      	cmp	r3, #0
 800f808:	d112      	bne.n	800f830 <find_volume+0x204>
 800f80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f810:	061a      	lsls	r2, r3, #24
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f818:	041b      	lsls	r3, r3, #16
 800f81a:	4313      	orrs	r3, r2
 800f81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f81e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800f822:	0212      	lsls	r2, r2, #8
 800f824:	4313      	orrs	r3, r2
 800f826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f828:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800f82c:	4313      	orrs	r3, r2
 800f82e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f834:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	7c1a      	ldrb	r2, [r3, #16]
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800f842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f844:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d006      	beq.n	800f85a <find_volume+0x22e>
 800f84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800f852:	2b02      	cmp	r3, #2
 800f854:	d001      	beq.n	800f85a <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800f856:	230d      	movs	r3, #13
 800f858:	e1a4      	b.n	800fba4 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800f85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800f860:	461a      	mov	r2, r3
 800f862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f864:	fb02 f303 	mul.w	r3, r2, r3
 800f868:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	7b5a      	ldrb	r2, [r3, #13]
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800f874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f876:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00a      	beq.n	800f894 <find_volume+0x268>
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f884:	461a      	mov	r2, r3
 800f886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f888:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800f88c:	3b01      	subs	r3, #1
 800f88e:	4013      	ands	r3, r2
 800f890:	2b00      	cmp	r3, #0
 800f892:	d001      	beq.n	800f898 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800f894:	230d      	movs	r3, #13
 800f896:	e185      	b.n	800fba4 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800f898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89a:	7c9b      	ldrb	r3, [r3, #18]
 800f89c:	021b      	lsls	r3, r3, #8
 800f89e:	b21a      	sxth	r2, r3
 800f8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a2:	7c5b      	ldrb	r3, [r3, #17]
 800f8a4:	b21b      	sxth	r3, r3
 800f8a6:	4313      	orrs	r3, r2
 800f8a8:	b21b      	sxth	r3, r3
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ae:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800f8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f8b8:	f003 030f 	and.w	r3, r3, #15
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d004      	beq.n	800f8cc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800f8c2:	230d      	movs	r3, #13
 800f8c4:	e16e      	b.n	800fba4 <find_volume+0x578>
 800f8c6:	bf00      	nop
 800f8c8:	2000c3f4 	.word	0x2000c3f4

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ce:	7d1b      	ldrb	r3, [r3, #20]
 800f8d0:	021b      	lsls	r3, r3, #8
 800f8d2:	b21a      	sxth	r2, r3
 800f8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d6:	7cdb      	ldrb	r3, [r3, #19]
 800f8d8:	b21b      	sxth	r3, r3
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	b21b      	sxth	r3, r3
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800f8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d112      	bne.n	800f90e <find_volume+0x2e2>
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f8ee:	061a      	lsls	r2, r3, #24
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f8f6:	041b      	lsls	r3, r3, #16
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8fc:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800f900:	0212      	lsls	r2, r2, #8
 800f902:	4313      	orrs	r3, r2
 800f904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f906:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	7bdb      	ldrb	r3, [r3, #15]
 800f912:	021b      	lsls	r3, r3, #8
 800f914:	b21a      	sxth	r2, r3
 800f916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f918:	7b9b      	ldrb	r3, [r3, #14]
 800f91a:	b21b      	sxth	r3, r3
 800f91c:	4313      	orrs	r3, r2
 800f91e:	b21b      	sxth	r3, r3
 800f920:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800f922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f924:	2b00      	cmp	r3, #0
 800f926:	d101      	bne.n	800f92c <find_volume+0x300>
 800f928:	230d      	movs	r3, #13
 800f92a:	e13b      	b.n	800fba4 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800f92c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f930:	4413      	add	r3, r2
 800f932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f934:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800f938:	0912      	lsrs	r2, r2, #4
 800f93a:	b292      	uxth	r2, r2
 800f93c:	4413      	add	r3, r2
 800f93e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f944:	429a      	cmp	r2, r3
 800f946:	d201      	bcs.n	800f94c <find_volume+0x320>
 800f948:	230d      	movs	r3, #13
 800f94a:	e12b      	b.n	800fba4 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800f94c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f950:	1ad3      	subs	r3, r2, r3
 800f952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f954:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800f958:	fbb3 f3f2 	udiv	r3, r3, r2
 800f95c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800f95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f960:	2b00      	cmp	r3, #0
 800f962:	d101      	bne.n	800f968 <find_volume+0x33c>
 800f964:	230d      	movs	r3, #13
 800f966:	e11d      	b.n	800fba4 <find_volume+0x578>
	fmt = FS_FAT12;
 800f968:	2301      	movs	r3, #1
 800f96a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f974:	4293      	cmp	r3, r2
 800f976:	d902      	bls.n	800f97e <find_volume+0x352>
 800f978:	2302      	movs	r3, #2
 800f97a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f984:	4293      	cmp	r3, r2
 800f986:	d902      	bls.n	800f98e <find_volume+0x362>
 800f988:	2303      	movs	r3, #3
 800f98a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800f98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f990:	1c9a      	adds	r2, r3, #2
 800f992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800f998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f99c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800f9a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9a4:	441a      	add	r2, r3
 800f9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800f9ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b0:	441a      	add	r2, r3
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800f9b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9bc:	2b03      	cmp	r3, #3
 800f9be:	d121      	bne.n	800fa04 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800f9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <find_volume+0x3a2>
 800f9ca:	230d      	movs	r3, #13
 800f9cc:	e0ea      	b.n	800fba4 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f9d4:	061a      	lsls	r2, r3, #24
 800f9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800f9dc:	041b      	lsls	r3, r3, #16
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9e2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800f9e6:	0212      	lsls	r2, r2, #8
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ec:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800f9f0:	431a      	orrs	r2, r3
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f4:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800f9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	647b      	str	r3, [r7, #68]	; 0x44
 800fa02:	e025      	b.n	800fa50 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800fa04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa06:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d101      	bne.n	800fa12 <find_volume+0x3e6>
 800fa0e:	230d      	movs	r3, #13
 800fa10:	e0c8      	b.n	800fba4 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa14:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800fa18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa1a:	441a      	add	r2, r3
 800fa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa1e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fa22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa26:	2b02      	cmp	r3, #2
 800fa28:	d104      	bne.n	800fa34 <find_volume+0x408>
 800fa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa30:	005b      	lsls	r3, r3, #1
 800fa32:	e00c      	b.n	800fa4e <find_volume+0x422>
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	4413      	add	r3, r2
 800fa40:	085a      	lsrs	r2, r3, #1
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fa48:	f003 0301 	and.w	r3, r3, #1
 800fa4c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800fa4e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800fa50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa52:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800fa56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fa5c:	0a5b      	lsrs	r3, r3, #9
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d201      	bcs.n	800fa66 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800fa62:	230d      	movs	r3, #13
 800fa64:	e09e      	b.n	800fba4 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800fa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa68:	f04f 32ff 	mov.w	r2, #4294967295
 800fa6c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800fa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800fa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7e:	2280      	movs	r2, #128	; 0x80
 800fa80:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800fa84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa88:	2b03      	cmp	r3, #3
 800fa8a:	d177      	bne.n	800fb7c <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa92:	021b      	lsls	r3, r3, #8
 800fa94:	b21a      	sxth	r2, r3
 800fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa9c:	b21b      	sxth	r3, r3
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	b21b      	sxth	r3, r3
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d16a      	bne.n	800fb7c <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800faa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faa8:	3301      	adds	r3, #1
 800faaa:	4619      	mov	r1, r3
 800faac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800faae:	f7fe fd42 	bl	800e536 <move_window>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d161      	bne.n	800fb7c <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800fab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faba:	2200      	movs	r2, #0
 800fabc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800fac6:	021b      	lsls	r3, r3, #8
 800fac8:	b21a      	sxth	r2, r3
 800faca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800facc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800fad0:	b21b      	sxth	r3, r3
 800fad2:	4313      	orrs	r3, r2
 800fad4:	b21b      	sxth	r3, r3
 800fad6:	4a35      	ldr	r2, [pc, #212]	; (800fbac <find_volume+0x580>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d14f      	bne.n	800fb7c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800fadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fade:	78db      	ldrb	r3, [r3, #3]
 800fae0:	061a      	lsls	r2, r3, #24
 800fae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae4:	789b      	ldrb	r3, [r3, #2]
 800fae6:	041b      	lsls	r3, r3, #16
 800fae8:	4313      	orrs	r3, r2
 800faea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faec:	7852      	ldrb	r2, [r2, #1]
 800faee:	0212      	lsls	r2, r2, #8
 800faf0:	4313      	orrs	r3, r2
 800faf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800faf4:	7812      	ldrb	r2, [r2, #0]
 800faf6:	4313      	orrs	r3, r2
 800faf8:	4a2d      	ldr	r2, [pc, #180]	; (800fbb0 <find_volume+0x584>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d13e      	bne.n	800fb7c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800fafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb00:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800fb04:	061a      	lsls	r2, r3, #24
 800fb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb08:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800fb0c:	041b      	lsls	r3, r3, #16
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb12:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800fb16:	0212      	lsls	r2, r2, #8
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb1c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800fb20:	4313      	orrs	r3, r2
 800fb22:	4a24      	ldr	r2, [pc, #144]	; (800fbb4 <find_volume+0x588>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d129      	bne.n	800fb7c <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800fb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800fb2e:	061a      	lsls	r2, r3, #24
 800fb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb32:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800fb36:	041b      	lsls	r3, r3, #16
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb3c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800fb40:	0212      	lsls	r2, r2, #8
 800fb42:	4313      	orrs	r3, r2
 800fb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb46:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800fb4a:	431a      	orrs	r2, r3
 800fb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800fb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb54:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800fb58:	061a      	lsls	r2, r3, #24
 800fb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800fb60:	041b      	lsls	r3, r3, #16
 800fb62:	4313      	orrs	r3, r2
 800fb64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb66:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800fb6a:	0212      	lsls	r2, r2, #8
 800fb6c:	4313      	orrs	r3, r2
 800fb6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb70:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800fb74:	431a      	orrs	r2, r3
 800fb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fb82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800fb86:	4b0c      	ldr	r3, [pc, #48]	; (800fbb8 <find_volume+0x58c>)
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	4b0a      	ldr	r3, [pc, #40]	; (800fbb8 <find_volume+0x58c>)
 800fb90:	801a      	strh	r2, [r3, #0]
 800fb92:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <find_volume+0x58c>)
 800fb94:	881a      	ldrh	r2, [r3, #0]
 800fb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb98:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800fb9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb9e:	f7fe fc57 	bl	800e450 <clear_lock>
#endif

	return FR_OK;
 800fba2:	2300      	movs	r3, #0
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3758      	adds	r7, #88	; 0x58
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	ffffaa55 	.word	0xffffaa55
 800fbb0:	41615252 	.word	0x41615252
 800fbb4:	61417272 	.word	0x61417272
 800fbb8:	2000c3f8 	.word	0x2000c3f8

0800fbbc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d022      	beq.n	800fc14 <validate+0x58>
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d01d      	beq.n	800fc14 <validate+0x58>
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fbde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d016      	beq.n	800fc14 <validate+0x58>
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fbec:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d10c      	bne.n	800fc14 <validate+0x58>
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fc00:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fe f983 	bl	800df10 <disk_status>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	f003 0301 	and.w	r3, r3, #1
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d001      	beq.n	800fc18 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800fc14:	2309      	movs	r3, #9
 800fc16:	e000      	b.n	800fc1a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
	...

0800fc24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b088      	sub	sp, #32
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800fc36:	f107 0310 	add.w	r3, r7, #16
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7ff fc48 	bl	800f4d0 <get_ldnumber>
 800fc40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	da01      	bge.n	800fc4c <f_mount+0x28>
 800fc48:	230b      	movs	r3, #11
 800fc4a:	e02d      	b.n	800fca8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fc4c:	4a18      	ldr	r2, [pc, #96]	; (800fcb0 <f_mount+0x8c>)
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d006      	beq.n	800fc6a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800fc5c:	69b8      	ldr	r0, [r7, #24]
 800fc5e:	f7fe fbf7 	bl	800e450 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d003      	beq.n	800fc78 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fc78:	68fa      	ldr	r2, [r7, #12]
 800fc7a:	490d      	ldr	r1, [pc, #52]	; (800fcb0 <f_mount+0x8c>)
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d002      	beq.n	800fc8e <f_mount+0x6a>
 800fc88:	79fb      	ldrb	r3, [r7, #7]
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d001      	beq.n	800fc92 <f_mount+0x6e>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	e00a      	b.n	800fca8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800fc92:	f107 0108 	add.w	r1, r7, #8
 800fc96:	f107 030c 	add.w	r3, r7, #12
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7ff fcc5 	bl	800f62c <find_volume>
 800fca2:	4603      	mov	r3, r0
 800fca4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fca6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3720      	adds	r7, #32
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	2000c3f4 	.word	0x2000c3f4

0800fcb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fcc0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fcc4:	6018      	str	r0, [r3, #0]
 800fcc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fcca:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800fcce:	6019      	str	r1, [r3, #0]
 800fcd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fcd4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fcd8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800fcda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fcde:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d101      	bne.n	800fcec <f_open+0x38>
 800fce8:	2309      	movs	r3, #9
 800fcea:	e257      	b.n	801019c <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800fcec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fcf0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800fcfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd00:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fd04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800fd08:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800fd0c:	7812      	ldrb	r2, [r2, #0]
 800fd0e:	f002 021f 	and.w	r2, r2, #31
 800fd12:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800fd14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd18:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fd1c:	781b      	ldrb	r3, [r3, #0]
 800fd1e:	f023 0301 	bic.w	r3, r3, #1
 800fd22:	b2da      	uxtb	r2, r3
 800fd24:	f107 0108 	add.w	r1, r7, #8
 800fd28:	f107 0320 	add.w	r3, r7, #32
 800fd2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7ff fc7b 	bl	800f62c <find_volume>
 800fd36:	4603      	mov	r3, r0
 800fd38:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800fd3c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f040 8229 	bne.w	8010198 <f_open+0x4e4>
		INIT_BUF(dj);
 800fd46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd4a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd4e:	f107 0214 	add.w	r2, r7, #20
 800fd52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800fd56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd5a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	f107 0320 	add.w	r3, r7, #32
 800fd64:	4611      	mov	r1, r2
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7ff fb44 	bl	800f3f4 <follow_path>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800fd72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd76:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fd7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fd7e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd82:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d11d      	bne.n	800fdc6 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800fd8a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d103      	bne.n	800fd9a <f_open+0xe6>
				res = FR_INVALID_NAME;
 800fd92:	2306      	movs	r3, #6
 800fd94:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800fd98:	e015      	b.n	800fdc6 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fd9e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	f023 0301 	bic.w	r3, r3, #1
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	bf14      	ite	ne
 800fdac:	2301      	movne	r3, #1
 800fdae:	2300      	moveq	r3, #0
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	f107 0320 	add.w	r3, r7, #32
 800fdb8:	4611      	mov	r1, r2
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fe f9be 	bl	800e13c <chk_lock>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fdc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fdca:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	f003 031c 	and.w	r3, r3, #28
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f000 80e6 	beq.w	800ffa6 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800fdda:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d027      	beq.n	800fe32 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800fde2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fde6:	2b04      	cmp	r3, #4
 800fde8:	d10e      	bne.n	800fe08 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fdea:	f7fe fa13 	bl	800e214 <enq_lock>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d006      	beq.n	800fe02 <f_open+0x14e>
 800fdf4:	f107 0320 	add.w	r3, r7, #32
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7ff fa02 	bl	800f202 <dir_register>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	e000      	b.n	800fe04 <f_open+0x150>
 800fe02:	2312      	movs	r3, #18
 800fe04:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fe08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe0c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fe10:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800fe14:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800fe18:	7812      	ldrb	r2, [r2, #0]
 800fe1a:	f042 0208 	orr.w	r2, r2, #8
 800fe1e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800fe20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe24:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800fe28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fe2c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800fe30:	e017      	b.n	800fe62 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fe32:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fe36:	330b      	adds	r3, #11
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	f003 0311 	and.w	r3, r3, #17
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <f_open+0x196>
					res = FR_DENIED;
 800fe42:	2307      	movs	r3, #7
 800fe44:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800fe48:	e00b      	b.n	800fe62 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800fe4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe4e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	f003 0304 	and.w	r3, r3, #4
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d002      	beq.n	800fe62 <f_open+0x1ae>
						res = FR_EXIST;
 800fe5c:	2308      	movs	r3, #8
 800fe5e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fe62:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	f040 80c1 	bne.w	800ffee <f_open+0x33a>
 800fe6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fe70:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	f003 0308 	and.w	r3, r3, #8
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f000 80b7 	beq.w	800ffee <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 800fe80:	f7fc fd9e 	bl	800c9c0 <get_fattime>
 800fe84:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800fe88:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fe8c:	330e      	adds	r3, #14
 800fe8e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800fe92:	b2d2      	uxtb	r2, r2
 800fe94:	701a      	strb	r2, [r3, #0]
 800fe96:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	0a1b      	lsrs	r3, r3, #8
 800fe9e:	b29a      	uxth	r2, r3
 800fea0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fea4:	330f      	adds	r3, #15
 800fea6:	b2d2      	uxtb	r2, r2
 800fea8:	701a      	strb	r2, [r3, #0]
 800feaa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800feae:	0c1a      	lsrs	r2, r3, #16
 800feb0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800feb4:	3310      	adds	r3, #16
 800feb6:	b2d2      	uxtb	r2, r2
 800feb8:	701a      	strb	r2, [r3, #0]
 800feba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800febe:	0e1a      	lsrs	r2, r3, #24
 800fec0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fec4:	3311      	adds	r3, #17
 800fec6:	b2d2      	uxtb	r2, r2
 800fec8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800feca:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fece:	330b      	adds	r3, #11
 800fed0:	2200      	movs	r2, #0
 800fed2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800fed4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fed8:	331c      	adds	r3, #28
 800feda:	2200      	movs	r2, #0
 800fedc:	701a      	strb	r2, [r3, #0]
 800fede:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fee2:	331d      	adds	r3, #29
 800fee4:	2200      	movs	r2, #0
 800fee6:	701a      	strb	r2, [r3, #0]
 800fee8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800feec:	331e      	adds	r3, #30
 800feee:	2200      	movs	r2, #0
 800fef0:	701a      	strb	r2, [r3, #0]
 800fef2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800fef6:	331f      	adds	r3, #31
 800fef8:	2200      	movs	r2, #0
 800fefa:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800fefc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff00:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ff04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff08:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7ff f8d6 	bl	800f0be <ld_clust>
 800ff12:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800ff16:	2100      	movs	r1, #0
 800ff18:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800ff1c:	f7ff f8fc 	bl	800f118 <st_clust>
				dj.fs->wflag = 1;
 800ff20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff24:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ff28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff2c:	2201      	movs	r2, #1
 800ff2e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800ff32:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d059      	beq.n	800ffee <f_open+0x33a>
					dw = dj.fs->winsect;
 800ff3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff3e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ff42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff46:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800ff4a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800ff4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff52:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ff56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff5a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe fdad 	bl	800eabe <remove_chain>
 800ff64:	4603      	mov	r3, r0
 800ff66:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800ff6a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d13d      	bne.n	800ffee <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800ff72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff76:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ff7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff7e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800ff82:	3a01      	subs	r2, #1
 800ff84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800ff88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ff8c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800ff90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ff94:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fe facc 	bl	800e536 <move_window>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ffa4:	e023      	b.n	800ffee <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800ffa6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d11f      	bne.n	800ffee <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800ffae:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ffb2:	330b      	adds	r3, #11
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	f003 0310 	and.w	r3, r3, #16
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d003      	beq.n	800ffc6 <f_open+0x312>
					res = FR_NO_FILE;
 800ffbe:	2304      	movs	r3, #4
 800ffc0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800ffc4:	e013      	b.n	800ffee <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800ffc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800ffca:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	f003 0302 	and.w	r3, r3, #2
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00a      	beq.n	800ffee <f_open+0x33a>
 800ffd8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800ffdc:	330b      	adds	r3, #11
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	f003 0301 	and.w	r3, r3, #1
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <f_open+0x33a>
						res = FR_DENIED;
 800ffe8:	2307      	movs	r3, #7
 800ffea:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800ffee:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d153      	bne.n	801009e <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800fffa:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	f003 0308 	and.w	r3, r3, #8
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00b      	beq.n	8010020 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8010008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801000c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010010:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8010014:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8010018:	7812      	ldrb	r2, [r2, #0]
 801001a:	f042 0220 	orr.w	r2, r2, #32
 801001e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8010020:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010024:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010028:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801002c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8010030:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010034:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 801003e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010042:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801004c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010050:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010054:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	f023 0301 	bic.w	r3, r3, #1
 801005e:	2b00      	cmp	r3, #0
 8010060:	bf14      	ite	ne
 8010062:	2301      	movne	r3, #1
 8010064:	2300      	moveq	r3, #0
 8010066:	b2db      	uxtb	r3, r3
 8010068:	461a      	mov	r2, r3
 801006a:	f107 0320 	add.w	r3, r7, #32
 801006e:	4611      	mov	r1, r2
 8010070:	4618      	mov	r0, r3
 8010072:	f7fe f8f3 	bl	800e25c <inc_lock>
 8010076:	4602      	mov	r2, r0
 8010078:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801007c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8010086:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801008a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010094:	2b00      	cmp	r3, #0
 8010096:	d102      	bne.n	801009e <f_open+0x3ea>
 8010098:	2302      	movs	r3, #2
 801009a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 801009e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d178      	bne.n	8010198 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80100a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80100aa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80100b4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80100b8:	7812      	ldrb	r2, [r2, #0]
 80100ba:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80100be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80100c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2200      	movs	r2, #0
 80100ca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80100ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80100d2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80100d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80100da:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe ffed 	bl	800f0be <ld_clust>
 80100e4:	4602      	mov	r2, r0
 80100e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80100ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80100f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80100f8:	331f      	adds	r3, #31
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	061a      	lsls	r2, r3, #24
 80100fe:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8010102:	331e      	adds	r3, #30
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	041b      	lsls	r3, r3, #16
 8010108:	4313      	orrs	r3, r2
 801010a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801010e:	321d      	adds	r2, #29
 8010110:	7812      	ldrb	r2, [r2, #0]
 8010112:	0212      	lsls	r2, r2, #8
 8010114:	4313      	orrs	r3, r2
 8010116:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801011a:	321c      	adds	r2, #28
 801011c:	7812      	ldrb	r2, [r2, #0]
 801011e:	431a      	orrs	r2, r3
 8010120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010124:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 801012e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010132:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	2200      	movs	r2, #0
 801013a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 801013e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010142:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2200      	movs	r2, #0
 801014a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 801014e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010152:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2200      	movs	r2, #0
 801015a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 801015e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8010162:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8010166:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801016a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801016e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8010178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801017c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010186:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 801018a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801018e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 8010198:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 801019c:	4618      	mov	r0, r3
 801019e:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b08c      	sub	sp, #48	; 0x30
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	60f8      	str	r0, [r7, #12]
 80101ae:	60b9      	str	r1, [r7, #8]
 80101b0:	607a      	str	r2, [r7, #4]
 80101b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	2200      	movs	r2, #0
 80101bc:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f7ff fcfc 	bl	800fbbc <validate>
 80101c4:	4603      	mov	r3, r0
 80101c6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80101c8:	7ffb      	ldrb	r3, [r7, #31]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d001      	beq.n	80101d2 <f_read+0x2c>
 80101ce:	7ffb      	ldrb	r3, [r7, #31]
 80101d0:	e150      	b.n	8010474 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d003      	beq.n	80101e4 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80101e2:	e147      	b.n	8010474 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80101ea:	f003 0301 	and.w	r3, r3, #1
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d101      	bne.n	80101f6 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80101f2:	2307      	movs	r3, #7
 80101f4:	e13e      	b.n	8010474 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	429a      	cmp	r2, r3
 801020c:	f240 812d 	bls.w	801046a <f_read+0x2c4>
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010214:	e129      	b.n	801046a <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801021c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010220:	2b00      	cmp	r3, #0
 8010222:	f040 80f2 	bne.w	801040a <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801022c:	0a5b      	lsrs	r3, r3, #9
 801022e:	b2da      	uxtb	r2, r3
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010236:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801023a:	3b01      	subs	r3, #1
 801023c:	b2db      	uxtb	r3, r3
 801023e:	4013      	ands	r3, r2
 8010240:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8010242:	7dfb      	ldrb	r3, [r7, #23]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d139      	bne.n	80102bc <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801024e:	2b00      	cmp	r3, #0
 8010250:	d104      	bne.n	801025c <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010258:	62fb      	str	r3, [r7, #44]	; 0x2c
 801025a:	e018      	b.n	801028e <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8010262:	2b00      	cmp	r3, #0
 8010264:	d008      	beq.n	8010278 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801026c:	4619      	mov	r1, r3
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f7fe fd1c 	bl	800ecac <clmt_clust>
 8010274:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010276:	e00a      	b.n	801028e <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010284:	4619      	mov	r1, r3
 8010286:	4610      	mov	r0, r2
 8010288:	f7fe fa51 	bl	800e72e <get_fat>
 801028c:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 801028e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010290:	2b01      	cmp	r3, #1
 8010292:	d805      	bhi.n	80102a0 <f_read+0xfa>
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2202      	movs	r2, #2
 8010298:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801029c:	2302      	movs	r3, #2
 801029e:	e0e9      	b.n	8010474 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80102a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102a6:	d105      	bne.n	80102b4 <f_read+0x10e>
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2201      	movs	r2, #1
 80102ac:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80102b0:	2301      	movs	r3, #1
 80102b2:	e0df      	b.n	8010474 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80102c8:	4619      	mov	r1, r3
 80102ca:	4610      	mov	r0, r2
 80102cc:	f7fe fa0e 	bl	800e6ec <clust2sect>
 80102d0:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80102d2:	693b      	ldr	r3, [r7, #16]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d105      	bne.n	80102e4 <f_read+0x13e>
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2202      	movs	r2, #2
 80102dc:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80102e0:	2302      	movs	r3, #2
 80102e2:	e0c7      	b.n	8010474 <f_read+0x2ce>
			sect += csect;
 80102e4:	7dfb      	ldrb	r3, [r7, #23]
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	4413      	add	r3, r2
 80102ea:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	0a5b      	lsrs	r3, r3, #9
 80102f0:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 80102f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d046      	beq.n	8010386 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80102f8:	7dfa      	ldrb	r2, [r7, #23]
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	4413      	add	r3, r2
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010304:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010308:	4293      	cmp	r3, r2
 801030a:	d908      	bls.n	801031e <f_read+0x178>
					cc = fp->fs->csize - csect;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010312:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010316:	461a      	mov	r2, r3
 8010318:	7dfb      	ldrb	r3, [r7, #23]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010324:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	693a      	ldr	r2, [r7, #16]
 801032c:	6a39      	ldr	r1, [r7, #32]
 801032e:	f7fd fe2f 	bl	800df90 <disk_read>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d005      	beq.n	8010344 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2201      	movs	r2, #1
 801033c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010340:	2301      	movs	r3, #1
 8010342:	e097      	b.n	8010474 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801034a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801034e:	2b00      	cmp	r3, #0
 8010350:	d015      	beq.n	801037e <f_read+0x1d8>
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801035e:	429a      	cmp	r2, r3
 8010360:	d90d      	bls.n	801037e <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	025b      	lsls	r3, r3, #9
 801036e:	6a3a      	ldr	r2, [r7, #32]
 8010370:	4413      	add	r3, r2
 8010372:	68f9      	ldr	r1, [r7, #12]
 8010374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010378:	4618      	mov	r0, r3
 801037a:	f7fd fe67 	bl	800e04c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 801037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010380:	025b      	lsls	r3, r3, #9
 8010382:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8010384:	e05b      	b.n	801043e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801038c:	693a      	ldr	r2, [r7, #16]
 801038e:	429a      	cmp	r2, r3
 8010390:	d037      	beq.n	8010402 <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801039c:	2b00      	cmp	r3, #0
 801039e:	d01d      	beq.n	80103dc <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103a6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80103aa:	68f9      	ldr	r1, [r7, #12]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80103b2:	2301      	movs	r3, #1
 80103b4:	f7fd fe0c 	bl	800dfd0 <disk_write>
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d005      	beq.n	80103ca <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2201      	movs	r2, #1
 80103c2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80103c6:	2301      	movs	r3, #1
 80103c8:	e054      	b.n	8010474 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80103d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103d4:	b2da      	uxtb	r2, r3
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80103e2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80103e6:	68f9      	ldr	r1, [r7, #12]
 80103e8:	2301      	movs	r3, #1
 80103ea:	693a      	ldr	r2, [r7, #16]
 80103ec:	f7fd fdd0 	bl	800df90 <disk_read>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d005      	beq.n	8010402 <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2201      	movs	r2, #1
 80103fa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80103fe:	2301      	movs	r3, #1
 8010400:	e038      	b.n	8010474 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	693a      	ldr	r2, [r7, #16]
 8010406:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010414:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010418:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 801041a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	429a      	cmp	r2, r3
 8010420:	d901      	bls.n	8010426 <f_read+0x280>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 801042c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010430:	68fa      	ldr	r2, [r7, #12]
 8010432:	4413      	add	r3, r2
 8010434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010436:	4619      	mov	r1, r3
 8010438:	6a38      	ldr	r0, [r7, #32]
 801043a:	f7fd fe07 	bl	800e04c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801043e:	6a3a      	ldr	r2, [r7, #32]
 8010440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010442:	4413      	add	r3, r2
 8010444:	623b      	str	r3, [r7, #32]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044e:	441a      	add	r2, r3
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045c:	441a      	add	r2, r3
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	f47f aed2 	bne.w	8010216 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8010472:	2300      	movs	r3, #0
}
 8010474:	4618      	mov	r0, r3
 8010476:	3730      	adds	r7, #48	; 0x30
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b08a      	sub	sp, #40	; 0x28
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
 8010488:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	2200      	movs	r2, #0
 8010492:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f7ff fb91 	bl	800fbbc <validate>
 801049a:	4603      	mov	r3, r0
 801049c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 801049e:	7dfb      	ldrb	r3, [r7, #23]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d001      	beq.n	80104a8 <f_write+0x2c>
 80104a4:	7dfb      	ldrb	r3, [r7, #23]
 80104a6:	e192      	b.n	80107ce <f_write+0x352>
	if (fp->err)							/* Check error */
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d003      	beq.n	80104ba <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80104b8:	e189      	b.n	80107ce <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80104c0:	f003 0302 	and.w	r3, r3, #2
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80104c8:	2307      	movs	r3, #7
 80104ca:	e180      	b.n	80107ce <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	441a      	add	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80104dc:	429a      	cmp	r2, r3
 80104de:	f080 8158 	bcs.w	8010792 <f_write+0x316>
 80104e2:	2300      	movs	r3, #0
 80104e4:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80104e6:	e154      	b.n	8010792 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80104ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f040 8114 	bne.w	8010720 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80104fe:	0a5b      	lsrs	r3, r3, #9
 8010500:	b2da      	uxtb	r2, r3
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010508:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 801050c:	3b01      	subs	r3, #1
 801050e:	b2db      	uxtb	r3, r3
 8010510:	4013      	ands	r3, r2
 8010512:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8010514:	7dbb      	ldrb	r3, [r7, #22]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d151      	bne.n	80105be <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10f      	bne.n	8010544 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801052a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 801052c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052e:	2b00      	cmp	r3, #0
 8010530:	d121      	bne.n	8010576 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010538:	2100      	movs	r1, #0
 801053a:	4618      	mov	r0, r3
 801053c:	f7fe fb19 	bl	800eb72 <create_chain>
 8010540:	6278      	str	r0, [r7, #36]	; 0x24
 8010542:	e018      	b.n	8010576 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801054a:	2b00      	cmp	r3, #0
 801054c:	d008      	beq.n	8010560 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010554:	4619      	mov	r1, r3
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f7fe fba8 	bl	800ecac <clmt_clust>
 801055c:	6278      	str	r0, [r7, #36]	; 0x24
 801055e:	e00a      	b.n	8010576 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801056c:	4619      	mov	r1, r3
 801056e:	4610      	mov	r0, r2
 8010570:	f7fe faff 	bl	800eb72 <create_chain>
 8010574:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010578:	2b00      	cmp	r3, #0
 801057a:	f000 810f 	beq.w	801079c <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 801057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010580:	2b01      	cmp	r3, #1
 8010582:	d105      	bne.n	8010590 <f_write+0x114>
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2202      	movs	r2, #2
 8010588:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801058c:	2302      	movs	r3, #2
 801058e:	e11e      	b.n	80107ce <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8010590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010596:	d105      	bne.n	80105a4 <f_write+0x128>
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2201      	movs	r2, #1
 801059c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80105a0:	2301      	movs	r3, #1
 80105a2:	e114      	b.n	80107ce <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d103      	bne.n	80105be <f_write+0x142>
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80105c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d01d      	beq.n	8010608 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80105d2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80105d6:	68f9      	ldr	r1, [r7, #12]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80105de:	2301      	movs	r3, #1
 80105e0:	f7fd fcf6 	bl	800dfd0 <disk_write>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d005      	beq.n	80105f6 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2201      	movs	r2, #1
 80105ee:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80105f2:	2301      	movs	r3, #1
 80105f4:	e0eb      	b.n	80107ce <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80105fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010600:	b2da      	uxtb	r2, r3
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010614:	4619      	mov	r1, r3
 8010616:	4610      	mov	r0, r2
 8010618:	f7fe f868 	bl	800e6ec <clust2sect>
 801061c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d105      	bne.n	8010630 <f_write+0x1b4>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2202      	movs	r2, #2
 8010628:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801062c:	2302      	movs	r3, #2
 801062e:	e0ce      	b.n	80107ce <f_write+0x352>
			sect += csect;
 8010630:	7dbb      	ldrb	r3, [r7, #22]
 8010632:	693a      	ldr	r2, [r7, #16]
 8010634:	4413      	add	r3, r2
 8010636:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	0a5b      	lsrs	r3, r3, #9
 801063c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d048      	beq.n	80106d6 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8010644:	7dba      	ldrb	r2, [r7, #22]
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	4413      	add	r3, r2
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8010650:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8010654:	4293      	cmp	r3, r2
 8010656:	d908      	bls.n	801066a <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801065e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8010662:	461a      	mov	r2, r3
 8010664:	7dbb      	ldrb	r3, [r7, #22]
 8010666:	1ad3      	subs	r3, r2, r3
 8010668:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010670:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010674:	69fb      	ldr	r3, [r7, #28]
 8010676:	693a      	ldr	r2, [r7, #16]
 8010678:	69b9      	ldr	r1, [r7, #24]
 801067a:	f7fd fca9 	bl	800dfd0 <disk_write>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d005      	beq.n	8010690 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2201      	movs	r2, #1
 8010688:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 801068c:	2301      	movs	r3, #1
 801068e:	e09e      	b.n	80107ce <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	69fa      	ldr	r2, [r7, #28]
 801069c:	429a      	cmp	r2, r3
 801069e:	d916      	bls.n	80106ce <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	025b      	lsls	r3, r3, #9
 80106ae:	69ba      	ldr	r2, [r7, #24]
 80106b0:	4413      	add	r3, r2
 80106b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106b6:	4619      	mov	r1, r3
 80106b8:	f7fd fcc8 	bl	800e04c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80106c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106c6:	b2da      	uxtb	r2, r3
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	025b      	lsls	r3, r3, #9
 80106d2:	623b      	str	r3, [r7, #32]
				continue;
 80106d4:	e047      	b.n	8010766 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	429a      	cmp	r2, r3
 80106e0:	d01a      	beq.n	8010718 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d212      	bcs.n	8010718 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80106f8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80106fc:	68f9      	ldr	r1, [r7, #12]
 80106fe:	2301      	movs	r3, #1
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	f7fd fc45 	bl	800df90 <disk_read>
 8010706:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8010708:	2b00      	cmp	r3, #0
 801070a:	d005      	beq.n	8010718 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2201      	movs	r2, #1
 8010710:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8010714:	2301      	movs	r3, #1
 8010716:	e05a      	b.n	80107ce <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	693a      	ldr	r2, [r7, #16]
 801071c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801072a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801072e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8010730:	6a3a      	ldr	r2, [r7, #32]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	429a      	cmp	r2, r3
 8010736:	d901      	bls.n	801073c <f_write+0x2c0>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8010742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	4413      	add	r3, r2
 801074a:	6a3a      	ldr	r2, [r7, #32]
 801074c:	69b9      	ldr	r1, [r7, #24]
 801074e:	4618      	mov	r0, r3
 8010750:	f7fd fc7c 	bl	800e04c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 801075a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801075e:	b2da      	uxtb	r2, r3
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8010766:	69ba      	ldr	r2, [r7, #24]
 8010768:	6a3b      	ldr	r3, [r7, #32]
 801076a:	4413      	add	r3, r2
 801076c:	61bb      	str	r3, [r7, #24]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	441a      	add	r2, r3
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	681a      	ldr	r2, [r3, #0]
 8010782:	6a3b      	ldr	r3, [r7, #32]
 8010784:	441a      	add	r2, r3
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	601a      	str	r2, [r3, #0]
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	6a3b      	ldr	r3, [r7, #32]
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b00      	cmp	r3, #0
 8010796:	f47f aea7 	bne.w	80104e8 <f_write+0x6c>
 801079a:	e000      	b.n	801079e <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801079c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d905      	bls.n	80107ba <f_write+0x33e>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80107c0:	f043 0320 	orr.w	r3, r3, #32
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 80107cc:	2300      	movs	r3, #0
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3728      	adds	r7, #40	; 0x28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd80      	pop	{r7, pc}

080107d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80107d6:	b580      	push	{r7, lr}
 80107d8:	b086      	sub	sp, #24
 80107da:	af00      	add	r7, sp, #0
 80107dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ff f9ec 	bl	800fbbc <validate>
 80107e4:	4603      	mov	r3, r0
 80107e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f040 80a8 	bne.w	8010940 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80107f6:	f003 0320 	and.w	r3, r3, #32
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	f000 80a0 	beq.w	8010940 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801080a:	2b00      	cmp	r3, #0
 801080c:	d019      	beq.n	8010842 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010814:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010820:	2301      	movs	r3, #1
 8010822:	f7fd fbd5 	bl	800dfd0 <disk_write>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d001      	beq.n	8010830 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 801082c:	2301      	movs	r3, #1
 801082e:	e088      	b.n	8010942 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801083a:	b2da      	uxtb	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801084e:	4619      	mov	r1, r3
 8010850:	4610      	mov	r0, r2
 8010852:	f7fd fe70 	bl	800e536 <move_window>
 8010856:	4603      	mov	r3, r0
 8010858:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 801085a:	7dfb      	ldrb	r3, [r7, #23]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d16f      	bne.n	8010940 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8010866:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	330b      	adds	r3, #11
 801086c:	781a      	ldrb	r2, [r3, #0]
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	330b      	adds	r3, #11
 8010872:	f042 0220 	orr.w	r2, r2, #32
 8010876:	b2d2      	uxtb	r2, r2
 8010878:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010880:	693b      	ldr	r3, [r7, #16]
 8010882:	331c      	adds	r3, #28
 8010884:	b2d2      	uxtb	r2, r2
 8010886:	701a      	strb	r2, [r3, #0]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 801088e:	b29b      	uxth	r3, r3
 8010890:	0a1b      	lsrs	r3, r3, #8
 8010892:	b29a      	uxth	r2, r3
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	331d      	adds	r3, #29
 8010898:	b2d2      	uxtb	r2, r2
 801089a:	701a      	strb	r2, [r3, #0]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80108a2:	0c1a      	lsrs	r2, r3, #16
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	331e      	adds	r3, #30
 80108a8:	b2d2      	uxtb	r2, r2
 80108aa:	701a      	strb	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80108b2:	0e1a      	lsrs	r2, r3, #24
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	331f      	adds	r3, #31
 80108b8:	b2d2      	uxtb	r2, r2
 80108ba:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80108c2:	4619      	mov	r1, r3
 80108c4:	6938      	ldr	r0, [r7, #16]
 80108c6:	f7fe fc27 	bl	800f118 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80108ca:	f7fc f879 	bl	800c9c0 <get_fattime>
 80108ce:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	3316      	adds	r3, #22
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	b2d2      	uxtb	r2, r2
 80108d8:	701a      	strb	r2, [r3, #0]
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	b29b      	uxth	r3, r3
 80108de:	0a1b      	lsrs	r3, r3, #8
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	3317      	adds	r3, #23
 80108e6:	b2d2      	uxtb	r2, r2
 80108e8:	701a      	strb	r2, [r3, #0]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	0c1a      	lsrs	r2, r3, #16
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	3318      	adds	r3, #24
 80108f2:	b2d2      	uxtb	r2, r2
 80108f4:	701a      	strb	r2, [r3, #0]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	0e1a      	lsrs	r2, r3, #24
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	3319      	adds	r3, #25
 80108fe:	b2d2      	uxtb	r2, r2
 8010900:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	3312      	adds	r3, #18
 8010906:	2200      	movs	r2, #0
 8010908:	701a      	strb	r2, [r3, #0]
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	3313      	adds	r3, #19
 801090e:	2200      	movs	r2, #0
 8010910:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8010918:	f023 0320 	bic.w	r3, r3, #32
 801091c:	b2da      	uxtb	r2, r3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801092a:	2201      	movs	r2, #1
 801092c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010936:	4618      	mov	r0, r3
 8010938:	f7fd fe2b 	bl	800e592 <sync_fs>
 801093c:	4603      	mov	r3, r0
 801093e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8010940:	7dfb      	ldrb	r3, [r7, #23]
}
 8010942:	4618      	mov	r0, r3
 8010944:	3718      	adds	r7, #24
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b084      	sub	sp, #16
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff ff3f 	bl	80107d6 <f_sync>
 8010958:	4603      	mov	r3, r0
 801095a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801095c:	7bfb      	ldrb	r3, [r7, #15]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d116      	bne.n	8010990 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff f92a 	bl	800fbbc <validate>
 8010968:	4603      	mov	r3, r0
 801096a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801096c:	7bfb      	ldrb	r3, [r7, #15]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d10e      	bne.n	8010990 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8010978:	4618      	mov	r0, r3
 801097a:	f7fd fd25 	bl	800e3c8 <dec_lock>
 801097e:	4603      	mov	r3, r0
 8010980:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010982:	7bfb      	ldrb	r3, [r7, #15]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d103      	bne.n	8010990 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2200      	movs	r2, #0
 801098c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010990:	7bfb      	ldrb	r3, [r7, #15]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3710      	adds	r7, #16
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
	...

0801099c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801099c:	b480      	push	{r7}
 801099e:	b087      	sub	sp, #28
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	60f8      	str	r0, [r7, #12]
 80109a4:	60b9      	str	r1, [r7, #8]
 80109a6:	4613      	mov	r3, r2
 80109a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80109aa:	2301      	movs	r3, #1
 80109ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80109ae:	2300      	movs	r3, #0
 80109b0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80109b2:	4b1e      	ldr	r3, [pc, #120]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109b4:	7a5b      	ldrb	r3, [r3, #9]
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	d831      	bhi.n	8010a20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80109bc:	4b1b      	ldr	r3, [pc, #108]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109be:	7a5b      	ldrb	r3, [r3, #9]
 80109c0:	b2db      	uxtb	r3, r3
 80109c2:	461a      	mov	r2, r3
 80109c4:	4b19      	ldr	r3, [pc, #100]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109c6:	2100      	movs	r1, #0
 80109c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80109ca:	4b18      	ldr	r3, [pc, #96]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109cc:	7a5b      	ldrb	r3, [r3, #9]
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	4a16      	ldr	r2, [pc, #88]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	4413      	add	r3, r2
 80109d6:	68fa      	ldr	r2, [r7, #12]
 80109d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80109da:	4b14      	ldr	r3, [pc, #80]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109dc:	7a5b      	ldrb	r3, [r3, #9]
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	461a      	mov	r2, r3
 80109e2:	4b12      	ldr	r3, [pc, #72]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109e4:	4413      	add	r3, r2
 80109e6:	79fa      	ldrb	r2, [r7, #7]
 80109e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80109ea:	4b10      	ldr	r3, [pc, #64]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109ec:	7a5b      	ldrb	r3, [r3, #9]
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	1c5a      	adds	r2, r3, #1
 80109f2:	b2d1      	uxtb	r1, r2
 80109f4:	4a0d      	ldr	r2, [pc, #52]	; (8010a2c <FATFS_LinkDriverEx+0x90>)
 80109f6:	7251      	strb	r1, [r2, #9]
 80109f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80109fa:	7dbb      	ldrb	r3, [r7, #22]
 80109fc:	3330      	adds	r3, #48	; 0x30
 80109fe:	b2da      	uxtb	r2, r3
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	3301      	adds	r3, #1
 8010a08:	223a      	movs	r2, #58	; 0x3a
 8010a0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	3302      	adds	r3, #2
 8010a10:	222f      	movs	r2, #47	; 0x2f
 8010a12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	3303      	adds	r3, #3
 8010a18:	2200      	movs	r2, #0
 8010a1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8010a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	371c      	adds	r7, #28
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bc80      	pop	{r7}
 8010a2a:	4770      	bx	lr
 8010a2c:	2000c414 	.word	0x2000c414

08010a30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	6839      	ldr	r1, [r7, #0]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f7ff ffac 	bl	801099c <FATFS_LinkDriverEx>
 8010a44:	4603      	mov	r3, r0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
	...

08010a50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	4603      	mov	r3, r0
 8010a58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010a5a:	4b0b      	ldr	r3, [pc, #44]	; (8010a88 <SD_initialize+0x38>)
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	701a      	strb	r2, [r3, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8010a60:	f7fb ffb6 	bl	800c9d0 <BSP_SD_Init>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d107      	bne.n	8010a7a <SD_initialize+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010a6a:	4b07      	ldr	r3, [pc, #28]	; (8010a88 <SD_initialize+0x38>)
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	b2db      	uxtb	r3, r3
 8010a70:	f023 0301 	bic.w	r3, r3, #1
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	4b04      	ldr	r3, [pc, #16]	; (8010a88 <SD_initialize+0x38>)
 8010a78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010a7a:	4b03      	ldr	r3, [pc, #12]	; (8010a88 <SD_initialize+0x38>)
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	b2db      	uxtb	r3, r3
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	2000b6b2 	.word	0x2000b6b2

08010a8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	4603      	mov	r3, r0
 8010a94:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010a96:	4b0b      	ldr	r3, [pc, #44]	; (8010ac4 <SD_status+0x38>)
 8010a98:	2201      	movs	r2, #1
 8010a9a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010a9c:	f7fb fffa 	bl	800ca94 <BSP_SD_GetCardState>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d107      	bne.n	8010ab6 <SD_status+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010aa6:	4b07      	ldr	r3, [pc, #28]	; (8010ac4 <SD_status+0x38>)
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	f023 0301 	bic.w	r3, r3, #1
 8010ab0:	b2da      	uxtb	r2, r3
 8010ab2:	4b04      	ldr	r3, [pc, #16]	; (8010ac4 <SD_status+0x38>)
 8010ab4:	701a      	strb	r2, [r3, #0]
  }
  
  return Stat;
 8010ab6:	4b03      	ldr	r3, [pc, #12]	; (8010ac4 <SD_status+0x38>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	b2db      	uxtb	r3, r3
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	2000b6b2 	.word	0x2000b6b2

08010ac8 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b086      	sub	sp, #24
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60b9      	str	r1, [r7, #8]
 8010ad0:	607a      	str	r2, [r7, #4]
 8010ad2:	603b      	str	r3, [r7, #0]
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ad8:	2301      	movs	r3, #1
 8010ada:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010adc:	4b0f      	ldr	r3, [pc, #60]	; (8010b1c <SD_read+0x54>)
 8010ade:	613b      	str	r3, [r7, #16]

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 8010ae0:	4b0f      	ldr	r3, [pc, #60]	; (8010b20 <SD_read+0x58>)
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	6879      	ldr	r1, [r7, #4]
 8010ae6:	68b8      	ldr	r0, [r7, #8]
 8010ae8:	f7fb ff98 	bl	800ca1c <BSP_SD_ReadBlocks>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d10e      	bne.n	8010b10 <SD_read+0x48>
                       (uint32_t) (sector), 
                       count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010af2:	e006      	b.n	8010b02 <SD_read+0x3a>
    {
      if (timeout-- == 0)
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	1e5a      	subs	r2, r3, #1
 8010af8:	613a      	str	r2, [r7, #16]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <SD_read+0x3a>
      {
        return RES_ERROR;
 8010afe:	2301      	movs	r3, #1
 8010b00:	e007      	b.n	8010b12 <SD_read+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010b02:	f7fb ffc7 	bl	800ca94 <BSP_SD_GetCardState>
 8010b06:	4603      	mov	r3, r0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d1f3      	bne.n	8010af4 <SD_read+0x2c>
      }
    }
    res = RES_OK;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3718      	adds	r7, #24
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	000186a0 	.word	0x000186a0
 8010b20:	05f5e100 	.word	0x05f5e100

08010b24 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60b9      	str	r1, [r7, #8]
 8010b2c:	607a      	str	r2, [r7, #4]
 8010b2e:	603b      	str	r3, [r7, #0]
 8010b30:	4603      	mov	r3, r0
 8010b32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b34:	2301      	movs	r3, #1
 8010b36:	75fb      	strb	r3, [r7, #23]
  uint32_t timeout = 100000;
 8010b38:	4b0f      	ldr	r3, [pc, #60]	; (8010b78 <SD_write+0x54>)
 8010b3a:	613b      	str	r3, [r7, #16]

  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8010b3c:	4b0f      	ldr	r3, [pc, #60]	; (8010b7c <SD_write+0x58>)
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	6879      	ldr	r1, [r7, #4]
 8010b42:	68b8      	ldr	r0, [r7, #8]
 8010b44:	f7fb ff88 	bl	800ca58 <BSP_SD_WriteBlocks>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d10e      	bne.n	8010b6c <SD_write+0x48>
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010b4e:	e006      	b.n	8010b5e <SD_write+0x3a>
    {
      if (timeout-- == 0)
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	1e5a      	subs	r2, r3, #1
 8010b54:	613a      	str	r2, [r7, #16]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d101      	bne.n	8010b5e <SD_write+0x3a>
      {
        return RES_ERROR;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	e007      	b.n	8010b6e <SD_write+0x4a>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010b5e:	f7fb ff99 	bl	800ca94 <BSP_SD_GetCardState>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1f3      	bne.n	8010b50 <SD_write+0x2c>
      }
    }    
    res = RES_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return res;
 8010b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3718      	adds	r7, #24
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	000186a0 	.word	0x000186a0
 8010b7c:	05f5e100 	.word	0x05f5e100

08010b80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b08c      	sub	sp, #48	; 0x30
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	4603      	mov	r3, r0
 8010b88:	603a      	str	r2, [r7, #0]
 8010b8a:	71fb      	strb	r3, [r7, #7]
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010b90:	2301      	movs	r3, #1
 8010b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010b96:	4b24      	ldr	r3, [pc, #144]	; (8010c28 <SD_ioctl+0xa8>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	f003 0301 	and.w	r3, r3, #1
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d001      	beq.n	8010ba8 <SD_ioctl+0x28>
 8010ba4:	2303      	movs	r3, #3
 8010ba6:	e03b      	b.n	8010c20 <SD_ioctl+0xa0>
  
  switch (cmd)
 8010ba8:	79bb      	ldrb	r3, [r7, #6]
 8010baa:	2b03      	cmp	r3, #3
 8010bac:	d833      	bhi.n	8010c16 <SD_ioctl+0x96>
 8010bae:	a201      	add	r2, pc, #4	; (adr r2, 8010bb4 <SD_ioctl+0x34>)
 8010bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bb4:	08010bc5 	.word	0x08010bc5
 8010bb8:	08010bcd 	.word	0x08010bcd
 8010bbc:	08010be5 	.word	0x08010be5
 8010bc0:	08010bff 	.word	0x08010bff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010bca:	e027      	b.n	8010c1c <SD_ioctl+0x9c>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010bcc:	f107 030c 	add.w	r3, r7, #12
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fb ff6f 	bl	800cab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010be2:	e01b      	b.n	8010c1c <SD_ioctl+0x9c>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010be4:	f107 030c 	add.w	r3, r7, #12
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fb ff63 	bl	800cab4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf0:	b29a      	uxth	r2, r3
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010bfc:	e00e      	b.n	8010c1c <SD_ioctl+0x9c>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010bfe:	f107 030c 	add.w	r3, r7, #12
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fb ff56 	bl	800cab4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8010c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010c14:	e002      	b.n	8010c1c <SD_ioctl+0x9c>
  
  default:
    res = RES_PARERR;
 8010c16:	2304      	movs	r3, #4
 8010c18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  
  return res;
 8010c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3730      	adds	r7, #48	; 0x30
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	2000b6b2 	.word	0x2000b6b2

08010c2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010c30:	2200      	movs	r2, #0
 8010c32:	490e      	ldr	r1, [pc, #56]	; (8010c6c <MX_USB_DEVICE_Init+0x40>)
 8010c34:	480e      	ldr	r0, [pc, #56]	; (8010c70 <MX_USB_DEVICE_Init+0x44>)
 8010c36:	f7fc f8ef 	bl	800ce18 <USBD_Init>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d001      	beq.n	8010c44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010c40:	f7f2 f812 	bl	8002c68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8010c44:	490b      	ldr	r1, [pc, #44]	; (8010c74 <MX_USB_DEVICE_Init+0x48>)
 8010c46:	480a      	ldr	r0, [pc, #40]	; (8010c70 <MX_USB_DEVICE_Init+0x44>)
 8010c48:	f7fc f911 	bl	800ce6e <USBD_RegisterClass>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d001      	beq.n	8010c56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010c52:	f7f2 f809 	bl	8002c68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010c56:	4806      	ldr	r0, [pc, #24]	; (8010c70 <MX_USB_DEVICE_Init+0x44>)
 8010c58:	f7fc f922 	bl	800cea0 <USBD_Start>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d001      	beq.n	8010c66 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8010c62:	f7f2 f801 	bl	8002c68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010c66:	bf00      	nop
 8010c68:	bd80      	pop	{r7, pc}
 8010c6a:	bf00      	nop
 8010c6c:	2000b6b4 	.word	0x2000b6b4
 8010c70:	2000c420 	.word	0x2000c420
 8010c74:	2000b5ac 	.word	0x2000b5ac

08010c78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	4603      	mov	r3, r0
 8010c80:	6039      	str	r1, [r7, #0]
 8010c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	2212      	movs	r2, #18
 8010c88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010c8a:	4b03      	ldr	r3, [pc, #12]	; (8010c98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bc80      	pop	{r7}
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop
 8010c98:	2000b6d0 	.word	0x2000b6d0

08010c9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	6039      	str	r1, [r7, #0]
 8010ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	2204      	movs	r2, #4
 8010cac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010cae:	4b03      	ldr	r3, [pc, #12]	; (8010cbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bc80      	pop	{r7}
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	2000b6e4 	.word	0x2000b6e4

08010cc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	6039      	str	r1, [r7, #0]
 8010cca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010ccc:	79fb      	ldrb	r3, [r7, #7]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d105      	bne.n	8010cde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010cd2:	683a      	ldr	r2, [r7, #0]
 8010cd4:	4907      	ldr	r1, [pc, #28]	; (8010cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010cd6:	4808      	ldr	r0, [pc, #32]	; (8010cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010cd8:	f7fd f85a 	bl	800dd90 <USBD_GetString>
 8010cdc:	e004      	b.n	8010ce8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010cde:	683a      	ldr	r2, [r7, #0]
 8010ce0:	4904      	ldr	r1, [pc, #16]	; (8010cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010ce2:	4805      	ldr	r0, [pc, #20]	; (8010cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010ce4:	f7fd f854 	bl	800dd90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ce8:	4b02      	ldr	r3, [pc, #8]	; (8010cf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	2000c6e4 	.word	0x2000c6e4
 8010cf8:	08014530 	.word	0x08014530

08010cfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	4603      	mov	r3, r0
 8010d04:	6039      	str	r1, [r7, #0]
 8010d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010d08:	683a      	ldr	r2, [r7, #0]
 8010d0a:	4904      	ldr	r1, [pc, #16]	; (8010d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010d0c:	4804      	ldr	r0, [pc, #16]	; (8010d20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010d0e:	f7fd f83f 	bl	800dd90 <USBD_GetString>
  return USBD_StrDesc;
 8010d12:	4b02      	ldr	r3, [pc, #8]	; (8010d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3708      	adds	r7, #8
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	2000c6e4 	.word	0x2000c6e4
 8010d20:	08014548 	.word	0x08014548

08010d24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	6039      	str	r1, [r7, #0]
 8010d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	221a      	movs	r2, #26
 8010d34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010d36:	f000 f843 	bl	8010dc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010d3a:	4b02      	ldr	r3, [pc, #8]	; (8010d44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	2000b6e8 	.word	0x2000b6e8

08010d48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	4603      	mov	r3, r0
 8010d50:	6039      	str	r1, [r7, #0]
 8010d52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010d54:	79fb      	ldrb	r3, [r7, #7]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d105      	bne.n	8010d66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d5a:	683a      	ldr	r2, [r7, #0]
 8010d5c:	4907      	ldr	r1, [pc, #28]	; (8010d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d5e:	4808      	ldr	r0, [pc, #32]	; (8010d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d60:	f7fd f816 	bl	800dd90 <USBD_GetString>
 8010d64:	e004      	b.n	8010d70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010d66:	683a      	ldr	r2, [r7, #0]
 8010d68:	4904      	ldr	r1, [pc, #16]	; (8010d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010d6a:	4805      	ldr	r0, [pc, #20]	; (8010d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010d6c:	f7fd f810 	bl	800dd90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d70:	4b02      	ldr	r3, [pc, #8]	; (8010d7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}
 8010d7a:	bf00      	nop
 8010d7c:	2000c6e4 	.word	0x2000c6e4
 8010d80:	0801455c 	.word	0x0801455c

08010d84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	6039      	str	r1, [r7, #0]
 8010d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d90:	79fb      	ldrb	r3, [r7, #7]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d105      	bne.n	8010da2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d96:	683a      	ldr	r2, [r7, #0]
 8010d98:	4907      	ldr	r1, [pc, #28]	; (8010db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d9a:	4808      	ldr	r0, [pc, #32]	; (8010dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d9c:	f7fc fff8 	bl	800dd90 <USBD_GetString>
 8010da0:	e004      	b.n	8010dac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010da2:	683a      	ldr	r2, [r7, #0]
 8010da4:	4904      	ldr	r1, [pc, #16]	; (8010db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010da6:	4805      	ldr	r0, [pc, #20]	; (8010dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010da8:	f7fc fff2 	bl	800dd90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010dac:	4b02      	ldr	r3, [pc, #8]	; (8010db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3708      	adds	r7, #8
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	2000c6e4 	.word	0x2000c6e4
 8010dbc:	08014568 	.word	0x08014568

08010dc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010dc6:	4b0f      	ldr	r3, [pc, #60]	; (8010e04 <Get_SerialNum+0x44>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010dcc:	4b0e      	ldr	r3, [pc, #56]	; (8010e08 <Get_SerialNum+0x48>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010dd2:	4b0e      	ldr	r3, [pc, #56]	; (8010e0c <Get_SerialNum+0x4c>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010dd8:	68fa      	ldr	r2, [r7, #12]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4413      	add	r3, r2
 8010dde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d009      	beq.n	8010dfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010de6:	2208      	movs	r2, #8
 8010de8:	4909      	ldr	r1, [pc, #36]	; (8010e10 <Get_SerialNum+0x50>)
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f000 f814 	bl	8010e18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010df0:	2204      	movs	r2, #4
 8010df2:	4908      	ldr	r1, [pc, #32]	; (8010e14 <Get_SerialNum+0x54>)
 8010df4:	68b8      	ldr	r0, [r7, #8]
 8010df6:	f000 f80f 	bl	8010e18 <IntToUnicode>
  }
}
 8010dfa:	bf00      	nop
 8010dfc:	3710      	adds	r7, #16
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	bf00      	nop
 8010e04:	1ffff7e8 	.word	0x1ffff7e8
 8010e08:	1ffff7ec 	.word	0x1ffff7ec
 8010e0c:	1ffff7f0 	.word	0x1ffff7f0
 8010e10:	2000b6ea 	.word	0x2000b6ea
 8010e14:	2000b6fa 	.word	0x2000b6fa

08010e18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b087      	sub	sp, #28
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	4613      	mov	r3, r2
 8010e24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	75fb      	strb	r3, [r7, #23]
 8010e2e:	e027      	b.n	8010e80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	0f1b      	lsrs	r3, r3, #28
 8010e34:	2b09      	cmp	r3, #9
 8010e36:	d80b      	bhi.n	8010e50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	0f1b      	lsrs	r3, r3, #28
 8010e3c:	b2da      	uxtb	r2, r3
 8010e3e:	7dfb      	ldrb	r3, [r7, #23]
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	4619      	mov	r1, r3
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	440b      	add	r3, r1
 8010e48:	3230      	adds	r2, #48	; 0x30
 8010e4a:	b2d2      	uxtb	r2, r2
 8010e4c:	701a      	strb	r2, [r3, #0]
 8010e4e:	e00a      	b.n	8010e66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	0f1b      	lsrs	r3, r3, #28
 8010e54:	b2da      	uxtb	r2, r3
 8010e56:	7dfb      	ldrb	r3, [r7, #23]
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	440b      	add	r3, r1
 8010e60:	3237      	adds	r2, #55	; 0x37
 8010e62:	b2d2      	uxtb	r2, r2
 8010e64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	011b      	lsls	r3, r3, #4
 8010e6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010e6c:	7dfb      	ldrb	r3, [r7, #23]
 8010e6e:	005b      	lsls	r3, r3, #1
 8010e70:	3301      	adds	r3, #1
 8010e72:	68ba      	ldr	r2, [r7, #8]
 8010e74:	4413      	add	r3, r2
 8010e76:	2200      	movs	r2, #0
 8010e78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010e7a:	7dfb      	ldrb	r3, [r7, #23]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	75fb      	strb	r3, [r7, #23]
 8010e80:	7dfa      	ldrb	r2, [r7, #23]
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d3d3      	bcc.n	8010e30 <IntToUnicode+0x18>
  }
}
 8010e88:	bf00      	nop
 8010e8a:	bf00      	nop
 8010e8c:	371c      	adds	r7, #28
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bc80      	pop	{r7}
 8010e92:	4770      	bx	lr

08010e94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a0d      	ldr	r2, [pc, #52]	; (8010ed8 <HAL_PCD_MspInit+0x44>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d113      	bne.n	8010ece <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010ea6:	4b0d      	ldr	r3, [pc, #52]	; (8010edc <HAL_PCD_MspInit+0x48>)
 8010ea8:	69db      	ldr	r3, [r3, #28]
 8010eaa:	4a0c      	ldr	r2, [pc, #48]	; (8010edc <HAL_PCD_MspInit+0x48>)
 8010eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010eb0:	61d3      	str	r3, [r2, #28]
 8010eb2:	4b0a      	ldr	r3, [pc, #40]	; (8010edc <HAL_PCD_MspInit+0x48>)
 8010eb4:	69db      	ldr	r3, [r3, #28]
 8010eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010eba:	60fb      	str	r3, [r7, #12]
 8010ebc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	2014      	movs	r0, #20
 8010ec4:	f7f2 ffd5 	bl	8003e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8010ec8:	2014      	movs	r0, #20
 8010eca:	f7f2 ffee 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010ece:	bf00      	nop
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	40005c00 	.word	0x40005c00
 8010edc:	40021000 	.word	0x40021000

08010ee0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	4610      	mov	r0, r2
 8010ef8:	f7fc f81a 	bl	800cf30 <USBD_LL_SetupStage>
}
 8010efc:	bf00      	nop
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010f16:	78fa      	ldrb	r2, [r7, #3]
 8010f18:	6879      	ldr	r1, [r7, #4]
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	009b      	lsls	r3, r3, #2
 8010f1e:	4413      	add	r3, r2
 8010f20:	00db      	lsls	r3, r3, #3
 8010f22:	440b      	add	r3, r1
 8010f24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010f28:	681a      	ldr	r2, [r3, #0]
 8010f2a:	78fb      	ldrb	r3, [r7, #3]
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	f7fc f84c 	bl	800cfca <USBD_LL_DataOutStage>
}
 8010f32:	bf00      	nop
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b082      	sub	sp, #8
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
 8010f42:	460b      	mov	r3, r1
 8010f44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010f4c:	78fa      	ldrb	r2, [r7, #3]
 8010f4e:	6879      	ldr	r1, [r7, #4]
 8010f50:	4613      	mov	r3, r2
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	4413      	add	r3, r2
 8010f56:	00db      	lsls	r3, r3, #3
 8010f58:	440b      	add	r3, r1
 8010f5a:	333c      	adds	r3, #60	; 0x3c
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	78fb      	ldrb	r3, [r7, #3]
 8010f60:	4619      	mov	r1, r3
 8010f62:	f7fc f8a3 	bl	800d0ac <USBD_LL_DataInStage>
}
 8010f66:	bf00      	nop
 8010f68:	3708      	adds	r7, #8
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b082      	sub	sp, #8
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fc f9b3 	bl	800d2e8 <USBD_LL_SOF>
}
 8010f82:	bf00      	nop
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b084      	sub	sp, #16
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010f92:	2301      	movs	r3, #1
 8010f94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	689b      	ldr	r3, [r3, #8]
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d001      	beq.n	8010fa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010f9e:	f7f1 fe63 	bl	8002c68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010fa8:	7bfa      	ldrb	r2, [r7, #15]
 8010faa:	4611      	mov	r1, r2
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fc f963 	bl	800d278 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7fc f91c 	bl	800d1f6 <USBD_LL_Reset>
}
 8010fbe:	bf00      	nop
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
	...

08010fc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fc f95d 	bl	800d296 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	699b      	ldr	r3, [r3, #24]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d005      	beq.n	8010ff0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010fe4:	4b04      	ldr	r3, [pc, #16]	; (8010ff8 <HAL_PCD_SuspendCallback+0x30>)
 8010fe6:	691b      	ldr	r3, [r3, #16]
 8010fe8:	4a03      	ldr	r2, [pc, #12]	; (8010ff8 <HAL_PCD_SuspendCallback+0x30>)
 8010fea:	f043 0306 	orr.w	r3, r3, #6
 8010fee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	e000ed00 	.word	0xe000ed00

08010ffc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801100a:	4618      	mov	r0, r3
 801100c:	f7fc f957 	bl	800d2be <USBD_LL_Resume>
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8011020:	4a1f      	ldr	r2, [pc, #124]	; (80110a0 <USBD_LL_Init+0x88>)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	4a1d      	ldr	r2, [pc, #116]	; (80110a0 <USBD_LL_Init+0x88>)
 801102c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8011030:	4b1b      	ldr	r3, [pc, #108]	; (80110a0 <USBD_LL_Init+0x88>)
 8011032:	4a1c      	ldr	r2, [pc, #112]	; (80110a4 <USBD_LL_Init+0x8c>)
 8011034:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011036:	4b1a      	ldr	r3, [pc, #104]	; (80110a0 <USBD_LL_Init+0x88>)
 8011038:	2208      	movs	r2, #8
 801103a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801103c:	4b18      	ldr	r3, [pc, #96]	; (80110a0 <USBD_LL_Init+0x88>)
 801103e:	2202      	movs	r2, #2
 8011040:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011042:	4b17      	ldr	r3, [pc, #92]	; (80110a0 <USBD_LL_Init+0x88>)
 8011044:	2200      	movs	r2, #0
 8011046:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011048:	4b15      	ldr	r3, [pc, #84]	; (80110a0 <USBD_LL_Init+0x88>)
 801104a:	2200      	movs	r2, #0
 801104c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801104e:	4b14      	ldr	r3, [pc, #80]	; (80110a0 <USBD_LL_Init+0x88>)
 8011050:	2200      	movs	r2, #0
 8011052:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011054:	4812      	ldr	r0, [pc, #72]	; (80110a0 <USBD_LL_Init+0x88>)
 8011056:	f7f4 f83f 	bl	80050d8 <HAL_PCD_Init>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d001      	beq.n	8011064 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8011060:	f7f1 fe02 	bl	8002c68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801106a:	2318      	movs	r3, #24
 801106c:	2200      	movs	r2, #0
 801106e:	2100      	movs	r1, #0
 8011070:	f7f5 fd47 	bl	8006b02 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801107a:	2358      	movs	r3, #88	; 0x58
 801107c:	2200      	movs	r2, #0
 801107e:	2180      	movs	r1, #128	; 0x80
 8011080:	f7f5 fd3f 	bl	8006b02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801108a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801108e:	2200      	movs	r2, #0
 8011090:	2181      	movs	r1, #129	; 0x81
 8011092:	f7f5 fd36 	bl	8006b02 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8011096:	2300      	movs	r3, #0
}
 8011098:	4618      	mov	r0, r3
 801109a:	3708      	adds	r7, #8
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}
 80110a0:	2000c8e4 	.word	0x2000c8e4
 80110a4:	40005c00 	.word	0x40005c00

080110a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110be:	4618      	mov	r0, r3
 80110c0:	f7f4 f909 	bl	80052d6 <HAL_PCD_Start>
 80110c4:	4603      	mov	r3, r0
 80110c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110c8:	7bfb      	ldrb	r3, [r7, #15]
 80110ca:	4618      	mov	r0, r3
 80110cc:	f000 f93c 	bl	8011348 <USBD_Get_USB_Status>
 80110d0:	4603      	mov	r3, r0
 80110d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80110de:	b580      	push	{r7, lr}
 80110e0:	b084      	sub	sp, #16
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	4608      	mov	r0, r1
 80110e8:	4611      	mov	r1, r2
 80110ea:	461a      	mov	r2, r3
 80110ec:	4603      	mov	r3, r0
 80110ee:	70fb      	strb	r3, [r7, #3]
 80110f0:	460b      	mov	r3, r1
 80110f2:	70bb      	strb	r3, [r7, #2]
 80110f4:	4613      	mov	r3, r2
 80110f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110f8:	2300      	movs	r3, #0
 80110fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110fc:	2300      	movs	r3, #0
 80110fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8011106:	78bb      	ldrb	r3, [r7, #2]
 8011108:	883a      	ldrh	r2, [r7, #0]
 801110a:	78f9      	ldrb	r1, [r7, #3]
 801110c:	f7f4 fa5e 	bl	80055cc <HAL_PCD_EP_Open>
 8011110:	4603      	mov	r3, r0
 8011112:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011114:	7bfb      	ldrb	r3, [r7, #15]
 8011116:	4618      	mov	r0, r3
 8011118:	f000 f916 	bl	8011348 <USBD_Get_USB_Status>
 801111c:	4603      	mov	r3, r0
 801111e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011120:	7bbb      	ldrb	r3, [r7, #14]
}
 8011122:	4618      	mov	r0, r3
 8011124:	3710      	adds	r7, #16
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801112a:	b580      	push	{r7, lr}
 801112c:	b084      	sub	sp, #16
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	460b      	mov	r3, r1
 8011134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011136:	2300      	movs	r3, #0
 8011138:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801113a:	2300      	movs	r3, #0
 801113c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011144:	78fa      	ldrb	r2, [r7, #3]
 8011146:	4611      	mov	r1, r2
 8011148:	4618      	mov	r0, r3
 801114a:	f7f4 fa9c 	bl	8005686 <HAL_PCD_EP_Close>
 801114e:	4603      	mov	r3, r0
 8011150:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011152:	7bfb      	ldrb	r3, [r7, #15]
 8011154:	4618      	mov	r0, r3
 8011156:	f000 f8f7 	bl	8011348 <USBD_Get_USB_Status>
 801115a:	4603      	mov	r3, r0
 801115c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801115e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011160:	4618      	mov	r0, r3
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	460b      	mov	r3, r1
 8011172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011174:	2300      	movs	r3, #0
 8011176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011178:	2300      	movs	r3, #0
 801117a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011182:	78fa      	ldrb	r2, [r7, #3]
 8011184:	4611      	mov	r1, r2
 8011186:	4618      	mov	r0, r3
 8011188:	f7f4 fb2d 	bl	80057e6 <HAL_PCD_EP_SetStall>
 801118c:	4603      	mov	r3, r0
 801118e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011190:	7bfb      	ldrb	r3, [r7, #15]
 8011192:	4618      	mov	r0, r3
 8011194:	f000 f8d8 	bl	8011348 <USBD_Get_USB_Status>
 8011198:	4603      	mov	r3, r0
 801119a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801119c:	7bbb      	ldrb	r3, [r7, #14]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b084      	sub	sp, #16
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
 80111ae:	460b      	mov	r3, r1
 80111b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111b6:	2300      	movs	r3, #0
 80111b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111c0:	78fa      	ldrb	r2, [r7, #3]
 80111c2:	4611      	mov	r1, r2
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7f4 fb6e 	bl	80058a6 <HAL_PCD_EP_ClrStall>
 80111ca:	4603      	mov	r3, r0
 80111cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111ce:	7bfb      	ldrb	r3, [r7, #15]
 80111d0:	4618      	mov	r0, r3
 80111d2:	f000 f8b9 	bl	8011348 <USBD_Get_USB_Status>
 80111d6:	4603      	mov	r3, r0
 80111d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111da:	7bbb      	ldrb	r3, [r7, #14]
}
 80111dc:	4618      	mov	r0, r3
 80111de:	3710      	adds	r7, #16
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b085      	sub	sp, #20
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	460b      	mov	r3, r1
 80111ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80111f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80111f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	da0c      	bge.n	801121a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011200:	78fb      	ldrb	r3, [r7, #3]
 8011202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011206:	68f9      	ldr	r1, [r7, #12]
 8011208:	1c5a      	adds	r2, r3, #1
 801120a:	4613      	mov	r3, r2
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	4413      	add	r3, r2
 8011210:	00db      	lsls	r3, r3, #3
 8011212:	440b      	add	r3, r1
 8011214:	3302      	adds	r3, #2
 8011216:	781b      	ldrb	r3, [r3, #0]
 8011218:	e00b      	b.n	8011232 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801121a:	78fb      	ldrb	r3, [r7, #3]
 801121c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011220:	68f9      	ldr	r1, [r7, #12]
 8011222:	4613      	mov	r3, r2
 8011224:	009b      	lsls	r3, r3, #2
 8011226:	4413      	add	r3, r2
 8011228:	00db      	lsls	r3, r3, #3
 801122a:	440b      	add	r3, r1
 801122c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011230:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011232:	4618      	mov	r0, r3
 8011234:	3714      	adds	r7, #20
 8011236:	46bd      	mov	sp, r7
 8011238:	bc80      	pop	{r7}
 801123a:	4770      	bx	lr

0801123c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b084      	sub	sp, #16
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	460b      	mov	r3, r1
 8011246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011248:	2300      	movs	r3, #0
 801124a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801124c:	2300      	movs	r3, #0
 801124e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011256:	78fa      	ldrb	r2, [r7, #3]
 8011258:	4611      	mov	r1, r2
 801125a:	4618      	mov	r0, r3
 801125c:	f7f4 f991 	bl	8005582 <HAL_PCD_SetAddress>
 8011260:	4603      	mov	r3, r0
 8011262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011264:	7bfb      	ldrb	r3, [r7, #15]
 8011266:	4618      	mov	r0, r3
 8011268:	f000 f86e 	bl	8011348 <USBD_Get_USB_Status>
 801126c:	4603      	mov	r3, r0
 801126e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011270:	7bbb      	ldrb	r3, [r7, #14]
}
 8011272:	4618      	mov	r0, r3
 8011274:	3710      	adds	r7, #16
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b086      	sub	sp, #24
 801127e:	af00      	add	r7, sp, #0
 8011280:	60f8      	str	r0, [r7, #12]
 8011282:	607a      	str	r2, [r7, #4]
 8011284:	461a      	mov	r2, r3
 8011286:	460b      	mov	r3, r1
 8011288:	72fb      	strb	r3, [r7, #11]
 801128a:	4613      	mov	r3, r2
 801128c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801128e:	2300      	movs	r3, #0
 8011290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011292:	2300      	movs	r3, #0
 8011294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801129c:	893b      	ldrh	r3, [r7, #8]
 801129e:	7af9      	ldrb	r1, [r7, #11]
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	f7f4 fa69 	bl	8005778 <HAL_PCD_EP_Transmit>
 80112a6:	4603      	mov	r3, r0
 80112a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112aa:	7dfb      	ldrb	r3, [r7, #23]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f000 f84b 	bl	8011348 <USBD_Get_USB_Status>
 80112b2:	4603      	mov	r3, r0
 80112b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80112b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3718      	adds	r7, #24
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	607a      	str	r2, [r7, #4]
 80112ca:	461a      	mov	r2, r3
 80112cc:	460b      	mov	r3, r1
 80112ce:	72fb      	strb	r3, [r7, #11]
 80112d0:	4613      	mov	r3, r2
 80112d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112d8:	2300      	movs	r3, #0
 80112da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80112e2:	893b      	ldrh	r3, [r7, #8]
 80112e4:	7af9      	ldrb	r1, [r7, #11]
 80112e6:	687a      	ldr	r2, [r7, #4]
 80112e8:	f7f4 fa15 	bl	8005716 <HAL_PCD_EP_Receive>
 80112ec:	4603      	mov	r3, r0
 80112ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112f0:	7dfb      	ldrb	r3, [r7, #23]
 80112f2:	4618      	mov	r0, r3
 80112f4:	f000 f828 	bl	8011348 <USBD_Get_USB_Status>
 80112f8:	4603      	mov	r3, r0
 80112fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80112fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3718      	adds	r7, #24
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
	...

08011308 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011310:	4b02      	ldr	r3, [pc, #8]	; (801131c <USBD_static_malloc+0x14>)
}
 8011312:	4618      	mov	r0, r3
 8011314:	370c      	adds	r7, #12
 8011316:	46bd      	mov	sp, r7
 8011318:	bc80      	pop	{r7}
 801131a:	4770      	bx	lr
 801131c:	2000cbd4 	.word	0x2000cbd4

08011320 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011320:	b480      	push	{r7}
 8011322:	b083      	sub	sp, #12
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]

}
 8011328:	bf00      	nop
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	bc80      	pop	{r7}
 8011330:	4770      	bx	lr

08011332 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011332:	b480      	push	{r7}
 8011334:	b083      	sub	sp, #12
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	460b      	mov	r3, r1
 801133c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801133e:	bf00      	nop
 8011340:	370c      	adds	r7, #12
 8011342:	46bd      	mov	sp, r7
 8011344:	bc80      	pop	{r7}
 8011346:	4770      	bx	lr

08011348 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011348:	b480      	push	{r7}
 801134a:	b085      	sub	sp, #20
 801134c:	af00      	add	r7, sp, #0
 801134e:	4603      	mov	r3, r0
 8011350:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011356:	79fb      	ldrb	r3, [r7, #7]
 8011358:	2b03      	cmp	r3, #3
 801135a:	d817      	bhi.n	801138c <USBD_Get_USB_Status+0x44>
 801135c:	a201      	add	r2, pc, #4	; (adr r2, 8011364 <USBD_Get_USB_Status+0x1c>)
 801135e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011362:	bf00      	nop
 8011364:	08011375 	.word	0x08011375
 8011368:	0801137b 	.word	0x0801137b
 801136c:	08011381 	.word	0x08011381
 8011370:	08011387 	.word	0x08011387
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011374:	2300      	movs	r3, #0
 8011376:	73fb      	strb	r3, [r7, #15]
    break;
 8011378:	e00b      	b.n	8011392 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801137a:	2302      	movs	r3, #2
 801137c:	73fb      	strb	r3, [r7, #15]
    break;
 801137e:	e008      	b.n	8011392 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011380:	2301      	movs	r3, #1
 8011382:	73fb      	strb	r3, [r7, #15]
    break;
 8011384:	e005      	b.n	8011392 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011386:	2302      	movs	r3, #2
 8011388:	73fb      	strb	r3, [r7, #15]
    break;
 801138a:	e002      	b.n	8011392 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801138c:	2302      	movs	r3, #2
 801138e:	73fb      	strb	r3, [r7, #15]
    break;
 8011390:	bf00      	nop
  }
  return usb_status;
 8011392:	7bfb      	ldrb	r3, [r7, #15]
}
 8011394:	4618      	mov	r0, r3
 8011396:	3714      	adds	r7, #20
 8011398:	46bd      	mov	sp, r7
 801139a:	bc80      	pop	{r7}
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop

080113a0 <__errno>:
 80113a0:	4b01      	ldr	r3, [pc, #4]	; (80113a8 <__errno+0x8>)
 80113a2:	6818      	ldr	r0, [r3, #0]
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	2000b704 	.word	0x2000b704

080113ac <__libc_init_array>:
 80113ac:	b570      	push	{r4, r5, r6, lr}
 80113ae:	2600      	movs	r6, #0
 80113b0:	4d0c      	ldr	r5, [pc, #48]	; (80113e4 <__libc_init_array+0x38>)
 80113b2:	4c0d      	ldr	r4, [pc, #52]	; (80113e8 <__libc_init_array+0x3c>)
 80113b4:	1b64      	subs	r4, r4, r5
 80113b6:	10a4      	asrs	r4, r4, #2
 80113b8:	42a6      	cmp	r6, r4
 80113ba:	d109      	bne.n	80113d0 <__libc_init_array+0x24>
 80113bc:	f003 f832 	bl	8014424 <_init>
 80113c0:	2600      	movs	r6, #0
 80113c2:	4d0a      	ldr	r5, [pc, #40]	; (80113ec <__libc_init_array+0x40>)
 80113c4:	4c0a      	ldr	r4, [pc, #40]	; (80113f0 <__libc_init_array+0x44>)
 80113c6:	1b64      	subs	r4, r4, r5
 80113c8:	10a4      	asrs	r4, r4, #2
 80113ca:	42a6      	cmp	r6, r4
 80113cc:	d105      	bne.n	80113da <__libc_init_array+0x2e>
 80113ce:	bd70      	pop	{r4, r5, r6, pc}
 80113d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80113d4:	4798      	blx	r3
 80113d6:	3601      	adds	r6, #1
 80113d8:	e7ee      	b.n	80113b8 <__libc_init_array+0xc>
 80113da:	f855 3b04 	ldr.w	r3, [r5], #4
 80113de:	4798      	blx	r3
 80113e0:	3601      	adds	r6, #1
 80113e2:	e7f2      	b.n	80113ca <__libc_init_array+0x1e>
 80113e4:	08022684 	.word	0x08022684
 80113e8:	08022684 	.word	0x08022684
 80113ec:	08022684 	.word	0x08022684
 80113f0:	08022688 	.word	0x08022688

080113f4 <malloc>:
 80113f4:	4b02      	ldr	r3, [pc, #8]	; (8011400 <malloc+0xc>)
 80113f6:	4601      	mov	r1, r0
 80113f8:	6818      	ldr	r0, [r3, #0]
 80113fa:	f000 b87b 	b.w	80114f4 <_malloc_r>
 80113fe:	bf00      	nop
 8011400:	2000b704 	.word	0x2000b704

08011404 <free>:
 8011404:	4b02      	ldr	r3, [pc, #8]	; (8011410 <free+0xc>)
 8011406:	4601      	mov	r1, r0
 8011408:	6818      	ldr	r0, [r3, #0]
 801140a:	f000 b80b 	b.w	8011424 <_free_r>
 801140e:	bf00      	nop
 8011410:	2000b704 	.word	0x2000b704

08011414 <memset>:
 8011414:	4603      	mov	r3, r0
 8011416:	4402      	add	r2, r0
 8011418:	4293      	cmp	r3, r2
 801141a:	d100      	bne.n	801141e <memset+0xa>
 801141c:	4770      	bx	lr
 801141e:	f803 1b01 	strb.w	r1, [r3], #1
 8011422:	e7f9      	b.n	8011418 <memset+0x4>

08011424 <_free_r>:
 8011424:	b538      	push	{r3, r4, r5, lr}
 8011426:	4605      	mov	r5, r0
 8011428:	2900      	cmp	r1, #0
 801142a:	d040      	beq.n	80114ae <_free_r+0x8a>
 801142c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011430:	1f0c      	subs	r4, r1, #4
 8011432:	2b00      	cmp	r3, #0
 8011434:	bfb8      	it	lt
 8011436:	18e4      	addlt	r4, r4, r3
 8011438:	f001 fc14 	bl	8012c64 <__malloc_lock>
 801143c:	4a1c      	ldr	r2, [pc, #112]	; (80114b0 <_free_r+0x8c>)
 801143e:	6813      	ldr	r3, [r2, #0]
 8011440:	b933      	cbnz	r3, 8011450 <_free_r+0x2c>
 8011442:	6063      	str	r3, [r4, #4]
 8011444:	6014      	str	r4, [r2, #0]
 8011446:	4628      	mov	r0, r5
 8011448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801144c:	f001 bc10 	b.w	8012c70 <__malloc_unlock>
 8011450:	42a3      	cmp	r3, r4
 8011452:	d908      	bls.n	8011466 <_free_r+0x42>
 8011454:	6820      	ldr	r0, [r4, #0]
 8011456:	1821      	adds	r1, r4, r0
 8011458:	428b      	cmp	r3, r1
 801145a:	bf01      	itttt	eq
 801145c:	6819      	ldreq	r1, [r3, #0]
 801145e:	685b      	ldreq	r3, [r3, #4]
 8011460:	1809      	addeq	r1, r1, r0
 8011462:	6021      	streq	r1, [r4, #0]
 8011464:	e7ed      	b.n	8011442 <_free_r+0x1e>
 8011466:	461a      	mov	r2, r3
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	b10b      	cbz	r3, 8011470 <_free_r+0x4c>
 801146c:	42a3      	cmp	r3, r4
 801146e:	d9fa      	bls.n	8011466 <_free_r+0x42>
 8011470:	6811      	ldr	r1, [r2, #0]
 8011472:	1850      	adds	r0, r2, r1
 8011474:	42a0      	cmp	r0, r4
 8011476:	d10b      	bne.n	8011490 <_free_r+0x6c>
 8011478:	6820      	ldr	r0, [r4, #0]
 801147a:	4401      	add	r1, r0
 801147c:	1850      	adds	r0, r2, r1
 801147e:	4283      	cmp	r3, r0
 8011480:	6011      	str	r1, [r2, #0]
 8011482:	d1e0      	bne.n	8011446 <_free_r+0x22>
 8011484:	6818      	ldr	r0, [r3, #0]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	4401      	add	r1, r0
 801148a:	6011      	str	r1, [r2, #0]
 801148c:	6053      	str	r3, [r2, #4]
 801148e:	e7da      	b.n	8011446 <_free_r+0x22>
 8011490:	d902      	bls.n	8011498 <_free_r+0x74>
 8011492:	230c      	movs	r3, #12
 8011494:	602b      	str	r3, [r5, #0]
 8011496:	e7d6      	b.n	8011446 <_free_r+0x22>
 8011498:	6820      	ldr	r0, [r4, #0]
 801149a:	1821      	adds	r1, r4, r0
 801149c:	428b      	cmp	r3, r1
 801149e:	bf01      	itttt	eq
 80114a0:	6819      	ldreq	r1, [r3, #0]
 80114a2:	685b      	ldreq	r3, [r3, #4]
 80114a4:	1809      	addeq	r1, r1, r0
 80114a6:	6021      	streq	r1, [r4, #0]
 80114a8:	6063      	str	r3, [r4, #4]
 80114aa:	6054      	str	r4, [r2, #4]
 80114ac:	e7cb      	b.n	8011446 <_free_r+0x22>
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	2000cbe8 	.word	0x2000cbe8

080114b4 <sbrk_aligned>:
 80114b4:	b570      	push	{r4, r5, r6, lr}
 80114b6:	4e0e      	ldr	r6, [pc, #56]	; (80114f0 <sbrk_aligned+0x3c>)
 80114b8:	460c      	mov	r4, r1
 80114ba:	6831      	ldr	r1, [r6, #0]
 80114bc:	4605      	mov	r5, r0
 80114be:	b911      	cbnz	r1, 80114c6 <sbrk_aligned+0x12>
 80114c0:	f000 fcec 	bl	8011e9c <_sbrk_r>
 80114c4:	6030      	str	r0, [r6, #0]
 80114c6:	4621      	mov	r1, r4
 80114c8:	4628      	mov	r0, r5
 80114ca:	f000 fce7 	bl	8011e9c <_sbrk_r>
 80114ce:	1c43      	adds	r3, r0, #1
 80114d0:	d00a      	beq.n	80114e8 <sbrk_aligned+0x34>
 80114d2:	1cc4      	adds	r4, r0, #3
 80114d4:	f024 0403 	bic.w	r4, r4, #3
 80114d8:	42a0      	cmp	r0, r4
 80114da:	d007      	beq.n	80114ec <sbrk_aligned+0x38>
 80114dc:	1a21      	subs	r1, r4, r0
 80114de:	4628      	mov	r0, r5
 80114e0:	f000 fcdc 	bl	8011e9c <_sbrk_r>
 80114e4:	3001      	adds	r0, #1
 80114e6:	d101      	bne.n	80114ec <sbrk_aligned+0x38>
 80114e8:	f04f 34ff 	mov.w	r4, #4294967295
 80114ec:	4620      	mov	r0, r4
 80114ee:	bd70      	pop	{r4, r5, r6, pc}
 80114f0:	2000cbec 	.word	0x2000cbec

080114f4 <_malloc_r>:
 80114f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114f8:	1ccd      	adds	r5, r1, #3
 80114fa:	f025 0503 	bic.w	r5, r5, #3
 80114fe:	3508      	adds	r5, #8
 8011500:	2d0c      	cmp	r5, #12
 8011502:	bf38      	it	cc
 8011504:	250c      	movcc	r5, #12
 8011506:	2d00      	cmp	r5, #0
 8011508:	4607      	mov	r7, r0
 801150a:	db01      	blt.n	8011510 <_malloc_r+0x1c>
 801150c:	42a9      	cmp	r1, r5
 801150e:	d905      	bls.n	801151c <_malloc_r+0x28>
 8011510:	230c      	movs	r3, #12
 8011512:	2600      	movs	r6, #0
 8011514:	603b      	str	r3, [r7, #0]
 8011516:	4630      	mov	r0, r6
 8011518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801151c:	4e2e      	ldr	r6, [pc, #184]	; (80115d8 <_malloc_r+0xe4>)
 801151e:	f001 fba1 	bl	8012c64 <__malloc_lock>
 8011522:	6833      	ldr	r3, [r6, #0]
 8011524:	461c      	mov	r4, r3
 8011526:	bb34      	cbnz	r4, 8011576 <_malloc_r+0x82>
 8011528:	4629      	mov	r1, r5
 801152a:	4638      	mov	r0, r7
 801152c:	f7ff ffc2 	bl	80114b4 <sbrk_aligned>
 8011530:	1c43      	adds	r3, r0, #1
 8011532:	4604      	mov	r4, r0
 8011534:	d14d      	bne.n	80115d2 <_malloc_r+0xde>
 8011536:	6834      	ldr	r4, [r6, #0]
 8011538:	4626      	mov	r6, r4
 801153a:	2e00      	cmp	r6, #0
 801153c:	d140      	bne.n	80115c0 <_malloc_r+0xcc>
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	4631      	mov	r1, r6
 8011542:	4638      	mov	r0, r7
 8011544:	eb04 0803 	add.w	r8, r4, r3
 8011548:	f000 fca8 	bl	8011e9c <_sbrk_r>
 801154c:	4580      	cmp	r8, r0
 801154e:	d13a      	bne.n	80115c6 <_malloc_r+0xd2>
 8011550:	6821      	ldr	r1, [r4, #0]
 8011552:	3503      	adds	r5, #3
 8011554:	1a6d      	subs	r5, r5, r1
 8011556:	f025 0503 	bic.w	r5, r5, #3
 801155a:	3508      	adds	r5, #8
 801155c:	2d0c      	cmp	r5, #12
 801155e:	bf38      	it	cc
 8011560:	250c      	movcc	r5, #12
 8011562:	4638      	mov	r0, r7
 8011564:	4629      	mov	r1, r5
 8011566:	f7ff ffa5 	bl	80114b4 <sbrk_aligned>
 801156a:	3001      	adds	r0, #1
 801156c:	d02b      	beq.n	80115c6 <_malloc_r+0xd2>
 801156e:	6823      	ldr	r3, [r4, #0]
 8011570:	442b      	add	r3, r5
 8011572:	6023      	str	r3, [r4, #0]
 8011574:	e00e      	b.n	8011594 <_malloc_r+0xa0>
 8011576:	6822      	ldr	r2, [r4, #0]
 8011578:	1b52      	subs	r2, r2, r5
 801157a:	d41e      	bmi.n	80115ba <_malloc_r+0xc6>
 801157c:	2a0b      	cmp	r2, #11
 801157e:	d916      	bls.n	80115ae <_malloc_r+0xba>
 8011580:	1961      	adds	r1, r4, r5
 8011582:	42a3      	cmp	r3, r4
 8011584:	6025      	str	r5, [r4, #0]
 8011586:	bf18      	it	ne
 8011588:	6059      	strne	r1, [r3, #4]
 801158a:	6863      	ldr	r3, [r4, #4]
 801158c:	bf08      	it	eq
 801158e:	6031      	streq	r1, [r6, #0]
 8011590:	5162      	str	r2, [r4, r5]
 8011592:	604b      	str	r3, [r1, #4]
 8011594:	4638      	mov	r0, r7
 8011596:	f104 060b 	add.w	r6, r4, #11
 801159a:	f001 fb69 	bl	8012c70 <__malloc_unlock>
 801159e:	f026 0607 	bic.w	r6, r6, #7
 80115a2:	1d23      	adds	r3, r4, #4
 80115a4:	1af2      	subs	r2, r6, r3
 80115a6:	d0b6      	beq.n	8011516 <_malloc_r+0x22>
 80115a8:	1b9b      	subs	r3, r3, r6
 80115aa:	50a3      	str	r3, [r4, r2]
 80115ac:	e7b3      	b.n	8011516 <_malloc_r+0x22>
 80115ae:	6862      	ldr	r2, [r4, #4]
 80115b0:	42a3      	cmp	r3, r4
 80115b2:	bf0c      	ite	eq
 80115b4:	6032      	streq	r2, [r6, #0]
 80115b6:	605a      	strne	r2, [r3, #4]
 80115b8:	e7ec      	b.n	8011594 <_malloc_r+0xa0>
 80115ba:	4623      	mov	r3, r4
 80115bc:	6864      	ldr	r4, [r4, #4]
 80115be:	e7b2      	b.n	8011526 <_malloc_r+0x32>
 80115c0:	4634      	mov	r4, r6
 80115c2:	6876      	ldr	r6, [r6, #4]
 80115c4:	e7b9      	b.n	801153a <_malloc_r+0x46>
 80115c6:	230c      	movs	r3, #12
 80115c8:	4638      	mov	r0, r7
 80115ca:	603b      	str	r3, [r7, #0]
 80115cc:	f001 fb50 	bl	8012c70 <__malloc_unlock>
 80115d0:	e7a1      	b.n	8011516 <_malloc_r+0x22>
 80115d2:	6025      	str	r5, [r4, #0]
 80115d4:	e7de      	b.n	8011594 <_malloc_r+0xa0>
 80115d6:	bf00      	nop
 80115d8:	2000cbe8 	.word	0x2000cbe8

080115dc <__cvt>:
 80115dc:	2b00      	cmp	r3, #0
 80115de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115e2:	461f      	mov	r7, r3
 80115e4:	bfbb      	ittet	lt
 80115e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80115ea:	461f      	movlt	r7, r3
 80115ec:	2300      	movge	r3, #0
 80115ee:	232d      	movlt	r3, #45	; 0x2d
 80115f0:	b088      	sub	sp, #32
 80115f2:	4614      	mov	r4, r2
 80115f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80115f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80115f8:	7013      	strb	r3, [r2, #0]
 80115fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80115fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8011600:	f023 0820 	bic.w	r8, r3, #32
 8011604:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011608:	d005      	beq.n	8011616 <__cvt+0x3a>
 801160a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801160e:	d100      	bne.n	8011612 <__cvt+0x36>
 8011610:	3501      	adds	r5, #1
 8011612:	2302      	movs	r3, #2
 8011614:	e000      	b.n	8011618 <__cvt+0x3c>
 8011616:	2303      	movs	r3, #3
 8011618:	aa07      	add	r2, sp, #28
 801161a:	9204      	str	r2, [sp, #16]
 801161c:	aa06      	add	r2, sp, #24
 801161e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8011622:	e9cd 3500 	strd	r3, r5, [sp]
 8011626:	4622      	mov	r2, r4
 8011628:	463b      	mov	r3, r7
 801162a:	f000 fd0d 	bl	8012048 <_dtoa_r>
 801162e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011632:	4606      	mov	r6, r0
 8011634:	d102      	bne.n	801163c <__cvt+0x60>
 8011636:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011638:	07db      	lsls	r3, r3, #31
 801163a:	d522      	bpl.n	8011682 <__cvt+0xa6>
 801163c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011640:	eb06 0905 	add.w	r9, r6, r5
 8011644:	d110      	bne.n	8011668 <__cvt+0x8c>
 8011646:	7833      	ldrb	r3, [r6, #0]
 8011648:	2b30      	cmp	r3, #48	; 0x30
 801164a:	d10a      	bne.n	8011662 <__cvt+0x86>
 801164c:	2200      	movs	r2, #0
 801164e:	2300      	movs	r3, #0
 8011650:	4620      	mov	r0, r4
 8011652:	4639      	mov	r1, r7
 8011654:	f7ef fa14 	bl	8000a80 <__aeabi_dcmpeq>
 8011658:	b918      	cbnz	r0, 8011662 <__cvt+0x86>
 801165a:	f1c5 0501 	rsb	r5, r5, #1
 801165e:	f8ca 5000 	str.w	r5, [sl]
 8011662:	f8da 3000 	ldr.w	r3, [sl]
 8011666:	4499      	add	r9, r3
 8011668:	2200      	movs	r2, #0
 801166a:	2300      	movs	r3, #0
 801166c:	4620      	mov	r0, r4
 801166e:	4639      	mov	r1, r7
 8011670:	f7ef fa06 	bl	8000a80 <__aeabi_dcmpeq>
 8011674:	b108      	cbz	r0, 801167a <__cvt+0x9e>
 8011676:	f8cd 901c 	str.w	r9, [sp, #28]
 801167a:	2230      	movs	r2, #48	; 0x30
 801167c:	9b07      	ldr	r3, [sp, #28]
 801167e:	454b      	cmp	r3, r9
 8011680:	d307      	bcc.n	8011692 <__cvt+0xb6>
 8011682:	4630      	mov	r0, r6
 8011684:	9b07      	ldr	r3, [sp, #28]
 8011686:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011688:	1b9b      	subs	r3, r3, r6
 801168a:	6013      	str	r3, [r2, #0]
 801168c:	b008      	add	sp, #32
 801168e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011692:	1c59      	adds	r1, r3, #1
 8011694:	9107      	str	r1, [sp, #28]
 8011696:	701a      	strb	r2, [r3, #0]
 8011698:	e7f0      	b.n	801167c <__cvt+0xa0>

0801169a <__exponent>:
 801169a:	4603      	mov	r3, r0
 801169c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801169e:	2900      	cmp	r1, #0
 80116a0:	f803 2b02 	strb.w	r2, [r3], #2
 80116a4:	bfb6      	itet	lt
 80116a6:	222d      	movlt	r2, #45	; 0x2d
 80116a8:	222b      	movge	r2, #43	; 0x2b
 80116aa:	4249      	neglt	r1, r1
 80116ac:	2909      	cmp	r1, #9
 80116ae:	7042      	strb	r2, [r0, #1]
 80116b0:	dd2b      	ble.n	801170a <__exponent+0x70>
 80116b2:	f10d 0407 	add.w	r4, sp, #7
 80116b6:	46a4      	mov	ip, r4
 80116b8:	270a      	movs	r7, #10
 80116ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80116be:	460a      	mov	r2, r1
 80116c0:	46a6      	mov	lr, r4
 80116c2:	fb07 1516 	mls	r5, r7, r6, r1
 80116c6:	2a63      	cmp	r2, #99	; 0x63
 80116c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80116cc:	4631      	mov	r1, r6
 80116ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80116d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80116d6:	dcf0      	bgt.n	80116ba <__exponent+0x20>
 80116d8:	3130      	adds	r1, #48	; 0x30
 80116da:	f1ae 0502 	sub.w	r5, lr, #2
 80116de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80116e2:	4629      	mov	r1, r5
 80116e4:	1c44      	adds	r4, r0, #1
 80116e6:	4561      	cmp	r1, ip
 80116e8:	d30a      	bcc.n	8011700 <__exponent+0x66>
 80116ea:	f10d 0209 	add.w	r2, sp, #9
 80116ee:	eba2 020e 	sub.w	r2, r2, lr
 80116f2:	4565      	cmp	r5, ip
 80116f4:	bf88      	it	hi
 80116f6:	2200      	movhi	r2, #0
 80116f8:	4413      	add	r3, r2
 80116fa:	1a18      	subs	r0, r3, r0
 80116fc:	b003      	add	sp, #12
 80116fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011700:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011704:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011708:	e7ed      	b.n	80116e6 <__exponent+0x4c>
 801170a:	2330      	movs	r3, #48	; 0x30
 801170c:	3130      	adds	r1, #48	; 0x30
 801170e:	7083      	strb	r3, [r0, #2]
 8011710:	70c1      	strb	r1, [r0, #3]
 8011712:	1d03      	adds	r3, r0, #4
 8011714:	e7f1      	b.n	80116fa <__exponent+0x60>
	...

08011718 <_printf_float>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	b091      	sub	sp, #68	; 0x44
 801171e:	460c      	mov	r4, r1
 8011720:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011724:	4616      	mov	r6, r2
 8011726:	461f      	mov	r7, r3
 8011728:	4605      	mov	r5, r0
 801172a:	f001 fa7b 	bl	8012c24 <_localeconv_r>
 801172e:	6803      	ldr	r3, [r0, #0]
 8011730:	4618      	mov	r0, r3
 8011732:	9309      	str	r3, [sp, #36]	; 0x24
 8011734:	f7ee fd78 	bl	8000228 <strlen>
 8011738:	2300      	movs	r3, #0
 801173a:	930e      	str	r3, [sp, #56]	; 0x38
 801173c:	f8d8 3000 	ldr.w	r3, [r8]
 8011740:	900a      	str	r0, [sp, #40]	; 0x28
 8011742:	3307      	adds	r3, #7
 8011744:	f023 0307 	bic.w	r3, r3, #7
 8011748:	f103 0208 	add.w	r2, r3, #8
 801174c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011750:	f8d4 b000 	ldr.w	fp, [r4]
 8011754:	f8c8 2000 	str.w	r2, [r8]
 8011758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011760:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8011764:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8011768:	930b      	str	r3, [sp, #44]	; 0x2c
 801176a:	f04f 32ff 	mov.w	r2, #4294967295
 801176e:	4640      	mov	r0, r8
 8011770:	4b9c      	ldr	r3, [pc, #624]	; (80119e4 <_printf_float+0x2cc>)
 8011772:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011774:	f7ef f9b6 	bl	8000ae4 <__aeabi_dcmpun>
 8011778:	bb70      	cbnz	r0, 80117d8 <_printf_float+0xc0>
 801177a:	f04f 32ff 	mov.w	r2, #4294967295
 801177e:	4640      	mov	r0, r8
 8011780:	4b98      	ldr	r3, [pc, #608]	; (80119e4 <_printf_float+0x2cc>)
 8011782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011784:	f7ef f990 	bl	8000aa8 <__aeabi_dcmple>
 8011788:	bb30      	cbnz	r0, 80117d8 <_printf_float+0xc0>
 801178a:	2200      	movs	r2, #0
 801178c:	2300      	movs	r3, #0
 801178e:	4640      	mov	r0, r8
 8011790:	4651      	mov	r1, sl
 8011792:	f7ef f97f 	bl	8000a94 <__aeabi_dcmplt>
 8011796:	b110      	cbz	r0, 801179e <_printf_float+0x86>
 8011798:	232d      	movs	r3, #45	; 0x2d
 801179a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801179e:	4b92      	ldr	r3, [pc, #584]	; (80119e8 <_printf_float+0x2d0>)
 80117a0:	4892      	ldr	r0, [pc, #584]	; (80119ec <_printf_float+0x2d4>)
 80117a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80117a6:	bf94      	ite	ls
 80117a8:	4698      	movls	r8, r3
 80117aa:	4680      	movhi	r8, r0
 80117ac:	2303      	movs	r3, #3
 80117ae:	f04f 0a00 	mov.w	sl, #0
 80117b2:	6123      	str	r3, [r4, #16]
 80117b4:	f02b 0304 	bic.w	r3, fp, #4
 80117b8:	6023      	str	r3, [r4, #0]
 80117ba:	4633      	mov	r3, r6
 80117bc:	4621      	mov	r1, r4
 80117be:	4628      	mov	r0, r5
 80117c0:	9700      	str	r7, [sp, #0]
 80117c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80117c4:	f000 f9d4 	bl	8011b70 <_printf_common>
 80117c8:	3001      	adds	r0, #1
 80117ca:	f040 8090 	bne.w	80118ee <_printf_float+0x1d6>
 80117ce:	f04f 30ff 	mov.w	r0, #4294967295
 80117d2:	b011      	add	sp, #68	; 0x44
 80117d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d8:	4642      	mov	r2, r8
 80117da:	4653      	mov	r3, sl
 80117dc:	4640      	mov	r0, r8
 80117de:	4651      	mov	r1, sl
 80117e0:	f7ef f980 	bl	8000ae4 <__aeabi_dcmpun>
 80117e4:	b148      	cbz	r0, 80117fa <_printf_float+0xe2>
 80117e6:	f1ba 0f00 	cmp.w	sl, #0
 80117ea:	bfb8      	it	lt
 80117ec:	232d      	movlt	r3, #45	; 0x2d
 80117ee:	4880      	ldr	r0, [pc, #512]	; (80119f0 <_printf_float+0x2d8>)
 80117f0:	bfb8      	it	lt
 80117f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80117f6:	4b7f      	ldr	r3, [pc, #508]	; (80119f4 <_printf_float+0x2dc>)
 80117f8:	e7d3      	b.n	80117a2 <_printf_float+0x8a>
 80117fa:	6863      	ldr	r3, [r4, #4]
 80117fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011800:	1c5a      	adds	r2, r3, #1
 8011802:	d142      	bne.n	801188a <_printf_float+0x172>
 8011804:	2306      	movs	r3, #6
 8011806:	6063      	str	r3, [r4, #4]
 8011808:	2200      	movs	r2, #0
 801180a:	9206      	str	r2, [sp, #24]
 801180c:	aa0e      	add	r2, sp, #56	; 0x38
 801180e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011812:	aa0d      	add	r2, sp, #52	; 0x34
 8011814:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8011818:	9203      	str	r2, [sp, #12]
 801181a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801181e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011822:	6023      	str	r3, [r4, #0]
 8011824:	6863      	ldr	r3, [r4, #4]
 8011826:	4642      	mov	r2, r8
 8011828:	9300      	str	r3, [sp, #0]
 801182a:	4628      	mov	r0, r5
 801182c:	4653      	mov	r3, sl
 801182e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011830:	f7ff fed4 	bl	80115dc <__cvt>
 8011834:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011836:	4680      	mov	r8, r0
 8011838:	2947      	cmp	r1, #71	; 0x47
 801183a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801183c:	d108      	bne.n	8011850 <_printf_float+0x138>
 801183e:	1cc8      	adds	r0, r1, #3
 8011840:	db02      	blt.n	8011848 <_printf_float+0x130>
 8011842:	6863      	ldr	r3, [r4, #4]
 8011844:	4299      	cmp	r1, r3
 8011846:	dd40      	ble.n	80118ca <_printf_float+0x1b2>
 8011848:	f1a9 0902 	sub.w	r9, r9, #2
 801184c:	fa5f f989 	uxtb.w	r9, r9
 8011850:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011854:	d81f      	bhi.n	8011896 <_printf_float+0x17e>
 8011856:	464a      	mov	r2, r9
 8011858:	3901      	subs	r1, #1
 801185a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801185e:	910d      	str	r1, [sp, #52]	; 0x34
 8011860:	f7ff ff1b 	bl	801169a <__exponent>
 8011864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011866:	4682      	mov	sl, r0
 8011868:	1813      	adds	r3, r2, r0
 801186a:	2a01      	cmp	r2, #1
 801186c:	6123      	str	r3, [r4, #16]
 801186e:	dc02      	bgt.n	8011876 <_printf_float+0x15e>
 8011870:	6822      	ldr	r2, [r4, #0]
 8011872:	07d2      	lsls	r2, r2, #31
 8011874:	d501      	bpl.n	801187a <_printf_float+0x162>
 8011876:	3301      	adds	r3, #1
 8011878:	6123      	str	r3, [r4, #16]
 801187a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801187e:	2b00      	cmp	r3, #0
 8011880:	d09b      	beq.n	80117ba <_printf_float+0xa2>
 8011882:	232d      	movs	r3, #45	; 0x2d
 8011884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011888:	e797      	b.n	80117ba <_printf_float+0xa2>
 801188a:	2947      	cmp	r1, #71	; 0x47
 801188c:	d1bc      	bne.n	8011808 <_printf_float+0xf0>
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1ba      	bne.n	8011808 <_printf_float+0xf0>
 8011892:	2301      	movs	r3, #1
 8011894:	e7b7      	b.n	8011806 <_printf_float+0xee>
 8011896:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801189a:	d118      	bne.n	80118ce <_printf_float+0x1b6>
 801189c:	2900      	cmp	r1, #0
 801189e:	6863      	ldr	r3, [r4, #4]
 80118a0:	dd0b      	ble.n	80118ba <_printf_float+0x1a2>
 80118a2:	6121      	str	r1, [r4, #16]
 80118a4:	b913      	cbnz	r3, 80118ac <_printf_float+0x194>
 80118a6:	6822      	ldr	r2, [r4, #0]
 80118a8:	07d0      	lsls	r0, r2, #31
 80118aa:	d502      	bpl.n	80118b2 <_printf_float+0x19a>
 80118ac:	3301      	adds	r3, #1
 80118ae:	440b      	add	r3, r1
 80118b0:	6123      	str	r3, [r4, #16]
 80118b2:	f04f 0a00 	mov.w	sl, #0
 80118b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80118b8:	e7df      	b.n	801187a <_printf_float+0x162>
 80118ba:	b913      	cbnz	r3, 80118c2 <_printf_float+0x1aa>
 80118bc:	6822      	ldr	r2, [r4, #0]
 80118be:	07d2      	lsls	r2, r2, #31
 80118c0:	d501      	bpl.n	80118c6 <_printf_float+0x1ae>
 80118c2:	3302      	adds	r3, #2
 80118c4:	e7f4      	b.n	80118b0 <_printf_float+0x198>
 80118c6:	2301      	movs	r3, #1
 80118c8:	e7f2      	b.n	80118b0 <_printf_float+0x198>
 80118ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80118ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118d0:	4299      	cmp	r1, r3
 80118d2:	db05      	blt.n	80118e0 <_printf_float+0x1c8>
 80118d4:	6823      	ldr	r3, [r4, #0]
 80118d6:	6121      	str	r1, [r4, #16]
 80118d8:	07d8      	lsls	r0, r3, #31
 80118da:	d5ea      	bpl.n	80118b2 <_printf_float+0x19a>
 80118dc:	1c4b      	adds	r3, r1, #1
 80118de:	e7e7      	b.n	80118b0 <_printf_float+0x198>
 80118e0:	2900      	cmp	r1, #0
 80118e2:	bfcc      	ite	gt
 80118e4:	2201      	movgt	r2, #1
 80118e6:	f1c1 0202 	rsble	r2, r1, #2
 80118ea:	4413      	add	r3, r2
 80118ec:	e7e0      	b.n	80118b0 <_printf_float+0x198>
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	055a      	lsls	r2, r3, #21
 80118f2:	d407      	bmi.n	8011904 <_printf_float+0x1ec>
 80118f4:	6923      	ldr	r3, [r4, #16]
 80118f6:	4642      	mov	r2, r8
 80118f8:	4631      	mov	r1, r6
 80118fa:	4628      	mov	r0, r5
 80118fc:	47b8      	blx	r7
 80118fe:	3001      	adds	r0, #1
 8011900:	d12b      	bne.n	801195a <_printf_float+0x242>
 8011902:	e764      	b.n	80117ce <_printf_float+0xb6>
 8011904:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011908:	f240 80dd 	bls.w	8011ac6 <_printf_float+0x3ae>
 801190c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011910:	2200      	movs	r2, #0
 8011912:	2300      	movs	r3, #0
 8011914:	f7ef f8b4 	bl	8000a80 <__aeabi_dcmpeq>
 8011918:	2800      	cmp	r0, #0
 801191a:	d033      	beq.n	8011984 <_printf_float+0x26c>
 801191c:	2301      	movs	r3, #1
 801191e:	4631      	mov	r1, r6
 8011920:	4628      	mov	r0, r5
 8011922:	4a35      	ldr	r2, [pc, #212]	; (80119f8 <_printf_float+0x2e0>)
 8011924:	47b8      	blx	r7
 8011926:	3001      	adds	r0, #1
 8011928:	f43f af51 	beq.w	80117ce <_printf_float+0xb6>
 801192c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011930:	429a      	cmp	r2, r3
 8011932:	db02      	blt.n	801193a <_printf_float+0x222>
 8011934:	6823      	ldr	r3, [r4, #0]
 8011936:	07d8      	lsls	r0, r3, #31
 8011938:	d50f      	bpl.n	801195a <_printf_float+0x242>
 801193a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801193e:	4631      	mov	r1, r6
 8011940:	4628      	mov	r0, r5
 8011942:	47b8      	blx	r7
 8011944:	3001      	adds	r0, #1
 8011946:	f43f af42 	beq.w	80117ce <_printf_float+0xb6>
 801194a:	f04f 0800 	mov.w	r8, #0
 801194e:	f104 091a 	add.w	r9, r4, #26
 8011952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011954:	3b01      	subs	r3, #1
 8011956:	4543      	cmp	r3, r8
 8011958:	dc09      	bgt.n	801196e <_printf_float+0x256>
 801195a:	6823      	ldr	r3, [r4, #0]
 801195c:	079b      	lsls	r3, r3, #30
 801195e:	f100 8102 	bmi.w	8011b66 <_printf_float+0x44e>
 8011962:	68e0      	ldr	r0, [r4, #12]
 8011964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011966:	4298      	cmp	r0, r3
 8011968:	bfb8      	it	lt
 801196a:	4618      	movlt	r0, r3
 801196c:	e731      	b.n	80117d2 <_printf_float+0xba>
 801196e:	2301      	movs	r3, #1
 8011970:	464a      	mov	r2, r9
 8011972:	4631      	mov	r1, r6
 8011974:	4628      	mov	r0, r5
 8011976:	47b8      	blx	r7
 8011978:	3001      	adds	r0, #1
 801197a:	f43f af28 	beq.w	80117ce <_printf_float+0xb6>
 801197e:	f108 0801 	add.w	r8, r8, #1
 8011982:	e7e6      	b.n	8011952 <_printf_float+0x23a>
 8011984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011986:	2b00      	cmp	r3, #0
 8011988:	dc38      	bgt.n	80119fc <_printf_float+0x2e4>
 801198a:	2301      	movs	r3, #1
 801198c:	4631      	mov	r1, r6
 801198e:	4628      	mov	r0, r5
 8011990:	4a19      	ldr	r2, [pc, #100]	; (80119f8 <_printf_float+0x2e0>)
 8011992:	47b8      	blx	r7
 8011994:	3001      	adds	r0, #1
 8011996:	f43f af1a 	beq.w	80117ce <_printf_float+0xb6>
 801199a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801199e:	4313      	orrs	r3, r2
 80119a0:	d102      	bne.n	80119a8 <_printf_float+0x290>
 80119a2:	6823      	ldr	r3, [r4, #0]
 80119a4:	07d9      	lsls	r1, r3, #31
 80119a6:	d5d8      	bpl.n	801195a <_printf_float+0x242>
 80119a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119ac:	4631      	mov	r1, r6
 80119ae:	4628      	mov	r0, r5
 80119b0:	47b8      	blx	r7
 80119b2:	3001      	adds	r0, #1
 80119b4:	f43f af0b 	beq.w	80117ce <_printf_float+0xb6>
 80119b8:	f04f 0900 	mov.w	r9, #0
 80119bc:	f104 0a1a 	add.w	sl, r4, #26
 80119c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119c2:	425b      	negs	r3, r3
 80119c4:	454b      	cmp	r3, r9
 80119c6:	dc01      	bgt.n	80119cc <_printf_float+0x2b4>
 80119c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119ca:	e794      	b.n	80118f6 <_printf_float+0x1de>
 80119cc:	2301      	movs	r3, #1
 80119ce:	4652      	mov	r2, sl
 80119d0:	4631      	mov	r1, r6
 80119d2:	4628      	mov	r0, r5
 80119d4:	47b8      	blx	r7
 80119d6:	3001      	adds	r0, #1
 80119d8:	f43f aef9 	beq.w	80117ce <_printf_float+0xb6>
 80119dc:	f109 0901 	add.w	r9, r9, #1
 80119e0:	e7ee      	b.n	80119c0 <_printf_float+0x2a8>
 80119e2:	bf00      	nop
 80119e4:	7fefffff 	.word	0x7fefffff
 80119e8:	080222ac 	.word	0x080222ac
 80119ec:	080222b0 	.word	0x080222b0
 80119f0:	080222b8 	.word	0x080222b8
 80119f4:	080222b4 	.word	0x080222b4
 80119f8:	080222bc 	.word	0x080222bc
 80119fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a00:	429a      	cmp	r2, r3
 8011a02:	bfa8      	it	ge
 8011a04:	461a      	movge	r2, r3
 8011a06:	2a00      	cmp	r2, #0
 8011a08:	4691      	mov	r9, r2
 8011a0a:	dc37      	bgt.n	8011a7c <_printf_float+0x364>
 8011a0c:	f04f 0b00 	mov.w	fp, #0
 8011a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a14:	f104 021a 	add.w	r2, r4, #26
 8011a18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011a1c:	ebaa 0309 	sub.w	r3, sl, r9
 8011a20:	455b      	cmp	r3, fp
 8011a22:	dc33      	bgt.n	8011a8c <_printf_float+0x374>
 8011a24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	db3b      	blt.n	8011aa4 <_printf_float+0x38c>
 8011a2c:	6823      	ldr	r3, [r4, #0]
 8011a2e:	07da      	lsls	r2, r3, #31
 8011a30:	d438      	bmi.n	8011aa4 <_printf_float+0x38c>
 8011a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011a36:	eba3 020a 	sub.w	r2, r3, sl
 8011a3a:	eba3 0901 	sub.w	r9, r3, r1
 8011a3e:	4591      	cmp	r9, r2
 8011a40:	bfa8      	it	ge
 8011a42:	4691      	movge	r9, r2
 8011a44:	f1b9 0f00 	cmp.w	r9, #0
 8011a48:	dc34      	bgt.n	8011ab4 <_printf_float+0x39c>
 8011a4a:	f04f 0800 	mov.w	r8, #0
 8011a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a52:	f104 0a1a 	add.w	sl, r4, #26
 8011a56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011a5a:	1a9b      	subs	r3, r3, r2
 8011a5c:	eba3 0309 	sub.w	r3, r3, r9
 8011a60:	4543      	cmp	r3, r8
 8011a62:	f77f af7a 	ble.w	801195a <_printf_float+0x242>
 8011a66:	2301      	movs	r3, #1
 8011a68:	4652      	mov	r2, sl
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	4628      	mov	r0, r5
 8011a6e:	47b8      	blx	r7
 8011a70:	3001      	adds	r0, #1
 8011a72:	f43f aeac 	beq.w	80117ce <_printf_float+0xb6>
 8011a76:	f108 0801 	add.w	r8, r8, #1
 8011a7a:	e7ec      	b.n	8011a56 <_printf_float+0x33e>
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	4631      	mov	r1, r6
 8011a80:	4642      	mov	r2, r8
 8011a82:	4628      	mov	r0, r5
 8011a84:	47b8      	blx	r7
 8011a86:	3001      	adds	r0, #1
 8011a88:	d1c0      	bne.n	8011a0c <_printf_float+0x2f4>
 8011a8a:	e6a0      	b.n	80117ce <_printf_float+0xb6>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	4631      	mov	r1, r6
 8011a90:	4628      	mov	r0, r5
 8011a92:	920b      	str	r2, [sp, #44]	; 0x2c
 8011a94:	47b8      	blx	r7
 8011a96:	3001      	adds	r0, #1
 8011a98:	f43f ae99 	beq.w	80117ce <_printf_float+0xb6>
 8011a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a9e:	f10b 0b01 	add.w	fp, fp, #1
 8011aa2:	e7b9      	b.n	8011a18 <_printf_float+0x300>
 8011aa4:	4631      	mov	r1, r6
 8011aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011aaa:	4628      	mov	r0, r5
 8011aac:	47b8      	blx	r7
 8011aae:	3001      	adds	r0, #1
 8011ab0:	d1bf      	bne.n	8011a32 <_printf_float+0x31a>
 8011ab2:	e68c      	b.n	80117ce <_printf_float+0xb6>
 8011ab4:	464b      	mov	r3, r9
 8011ab6:	4631      	mov	r1, r6
 8011ab8:	4628      	mov	r0, r5
 8011aba:	eb08 020a 	add.w	r2, r8, sl
 8011abe:	47b8      	blx	r7
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d1c2      	bne.n	8011a4a <_printf_float+0x332>
 8011ac4:	e683      	b.n	80117ce <_printf_float+0xb6>
 8011ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ac8:	2a01      	cmp	r2, #1
 8011aca:	dc01      	bgt.n	8011ad0 <_printf_float+0x3b8>
 8011acc:	07db      	lsls	r3, r3, #31
 8011ace:	d537      	bpl.n	8011b40 <_printf_float+0x428>
 8011ad0:	2301      	movs	r3, #1
 8011ad2:	4642      	mov	r2, r8
 8011ad4:	4631      	mov	r1, r6
 8011ad6:	4628      	mov	r0, r5
 8011ad8:	47b8      	blx	r7
 8011ada:	3001      	adds	r0, #1
 8011adc:	f43f ae77 	beq.w	80117ce <_printf_float+0xb6>
 8011ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ae4:	4631      	mov	r1, r6
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	47b8      	blx	r7
 8011aea:	3001      	adds	r0, #1
 8011aec:	f43f ae6f 	beq.w	80117ce <_printf_float+0xb6>
 8011af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011af4:	2200      	movs	r2, #0
 8011af6:	2300      	movs	r3, #0
 8011af8:	f7ee ffc2 	bl	8000a80 <__aeabi_dcmpeq>
 8011afc:	b9d8      	cbnz	r0, 8011b36 <_printf_float+0x41e>
 8011afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b00:	f108 0201 	add.w	r2, r8, #1
 8011b04:	3b01      	subs	r3, #1
 8011b06:	4631      	mov	r1, r6
 8011b08:	4628      	mov	r0, r5
 8011b0a:	47b8      	blx	r7
 8011b0c:	3001      	adds	r0, #1
 8011b0e:	d10e      	bne.n	8011b2e <_printf_float+0x416>
 8011b10:	e65d      	b.n	80117ce <_printf_float+0xb6>
 8011b12:	2301      	movs	r3, #1
 8011b14:	464a      	mov	r2, r9
 8011b16:	4631      	mov	r1, r6
 8011b18:	4628      	mov	r0, r5
 8011b1a:	47b8      	blx	r7
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	f43f ae56 	beq.w	80117ce <_printf_float+0xb6>
 8011b22:	f108 0801 	add.w	r8, r8, #1
 8011b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b28:	3b01      	subs	r3, #1
 8011b2a:	4543      	cmp	r3, r8
 8011b2c:	dcf1      	bgt.n	8011b12 <_printf_float+0x3fa>
 8011b2e:	4653      	mov	r3, sl
 8011b30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011b34:	e6e0      	b.n	80118f8 <_printf_float+0x1e0>
 8011b36:	f04f 0800 	mov.w	r8, #0
 8011b3a:	f104 091a 	add.w	r9, r4, #26
 8011b3e:	e7f2      	b.n	8011b26 <_printf_float+0x40e>
 8011b40:	2301      	movs	r3, #1
 8011b42:	4642      	mov	r2, r8
 8011b44:	e7df      	b.n	8011b06 <_printf_float+0x3ee>
 8011b46:	2301      	movs	r3, #1
 8011b48:	464a      	mov	r2, r9
 8011b4a:	4631      	mov	r1, r6
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	47b8      	blx	r7
 8011b50:	3001      	adds	r0, #1
 8011b52:	f43f ae3c 	beq.w	80117ce <_printf_float+0xb6>
 8011b56:	f108 0801 	add.w	r8, r8, #1
 8011b5a:	68e3      	ldr	r3, [r4, #12]
 8011b5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b5e:	1a5b      	subs	r3, r3, r1
 8011b60:	4543      	cmp	r3, r8
 8011b62:	dcf0      	bgt.n	8011b46 <_printf_float+0x42e>
 8011b64:	e6fd      	b.n	8011962 <_printf_float+0x24a>
 8011b66:	f04f 0800 	mov.w	r8, #0
 8011b6a:	f104 0919 	add.w	r9, r4, #25
 8011b6e:	e7f4      	b.n	8011b5a <_printf_float+0x442>

08011b70 <_printf_common>:
 8011b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b74:	4616      	mov	r6, r2
 8011b76:	4699      	mov	r9, r3
 8011b78:	688a      	ldr	r2, [r1, #8]
 8011b7a:	690b      	ldr	r3, [r1, #16]
 8011b7c:	4607      	mov	r7, r0
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	bfb8      	it	lt
 8011b82:	4613      	movlt	r3, r2
 8011b84:	6033      	str	r3, [r6, #0]
 8011b86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b90:	b10a      	cbz	r2, 8011b96 <_printf_common+0x26>
 8011b92:	3301      	adds	r3, #1
 8011b94:	6033      	str	r3, [r6, #0]
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	0699      	lsls	r1, r3, #26
 8011b9a:	bf42      	ittt	mi
 8011b9c:	6833      	ldrmi	r3, [r6, #0]
 8011b9e:	3302      	addmi	r3, #2
 8011ba0:	6033      	strmi	r3, [r6, #0]
 8011ba2:	6825      	ldr	r5, [r4, #0]
 8011ba4:	f015 0506 	ands.w	r5, r5, #6
 8011ba8:	d106      	bne.n	8011bb8 <_printf_common+0x48>
 8011baa:	f104 0a19 	add.w	sl, r4, #25
 8011bae:	68e3      	ldr	r3, [r4, #12]
 8011bb0:	6832      	ldr	r2, [r6, #0]
 8011bb2:	1a9b      	subs	r3, r3, r2
 8011bb4:	42ab      	cmp	r3, r5
 8011bb6:	dc28      	bgt.n	8011c0a <_printf_common+0x9a>
 8011bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011bbc:	1e13      	subs	r3, r2, #0
 8011bbe:	6822      	ldr	r2, [r4, #0]
 8011bc0:	bf18      	it	ne
 8011bc2:	2301      	movne	r3, #1
 8011bc4:	0692      	lsls	r2, r2, #26
 8011bc6:	d42d      	bmi.n	8011c24 <_printf_common+0xb4>
 8011bc8:	4649      	mov	r1, r9
 8011bca:	4638      	mov	r0, r7
 8011bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011bd0:	47c0      	blx	r8
 8011bd2:	3001      	adds	r0, #1
 8011bd4:	d020      	beq.n	8011c18 <_printf_common+0xa8>
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	68e5      	ldr	r5, [r4, #12]
 8011bda:	f003 0306 	and.w	r3, r3, #6
 8011bde:	2b04      	cmp	r3, #4
 8011be0:	bf18      	it	ne
 8011be2:	2500      	movne	r5, #0
 8011be4:	6832      	ldr	r2, [r6, #0]
 8011be6:	f04f 0600 	mov.w	r6, #0
 8011bea:	68a3      	ldr	r3, [r4, #8]
 8011bec:	bf08      	it	eq
 8011bee:	1aad      	subeq	r5, r5, r2
 8011bf0:	6922      	ldr	r2, [r4, #16]
 8011bf2:	bf08      	it	eq
 8011bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	bfc4      	itt	gt
 8011bfc:	1a9b      	subgt	r3, r3, r2
 8011bfe:	18ed      	addgt	r5, r5, r3
 8011c00:	341a      	adds	r4, #26
 8011c02:	42b5      	cmp	r5, r6
 8011c04:	d11a      	bne.n	8011c3c <_printf_common+0xcc>
 8011c06:	2000      	movs	r0, #0
 8011c08:	e008      	b.n	8011c1c <_printf_common+0xac>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	4652      	mov	r2, sl
 8011c0e:	4649      	mov	r1, r9
 8011c10:	4638      	mov	r0, r7
 8011c12:	47c0      	blx	r8
 8011c14:	3001      	adds	r0, #1
 8011c16:	d103      	bne.n	8011c20 <_printf_common+0xb0>
 8011c18:	f04f 30ff 	mov.w	r0, #4294967295
 8011c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c20:	3501      	adds	r5, #1
 8011c22:	e7c4      	b.n	8011bae <_printf_common+0x3e>
 8011c24:	2030      	movs	r0, #48	; 0x30
 8011c26:	18e1      	adds	r1, r4, r3
 8011c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c2c:	1c5a      	adds	r2, r3, #1
 8011c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c32:	4422      	add	r2, r4
 8011c34:	3302      	adds	r3, #2
 8011c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c3a:	e7c5      	b.n	8011bc8 <_printf_common+0x58>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	4622      	mov	r2, r4
 8011c40:	4649      	mov	r1, r9
 8011c42:	4638      	mov	r0, r7
 8011c44:	47c0      	blx	r8
 8011c46:	3001      	adds	r0, #1
 8011c48:	d0e6      	beq.n	8011c18 <_printf_common+0xa8>
 8011c4a:	3601      	adds	r6, #1
 8011c4c:	e7d9      	b.n	8011c02 <_printf_common+0x92>
	...

08011c50 <_printf_i>:
 8011c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c54:	7e0f      	ldrb	r7, [r1, #24]
 8011c56:	4691      	mov	r9, r2
 8011c58:	2f78      	cmp	r7, #120	; 0x78
 8011c5a:	4680      	mov	r8, r0
 8011c5c:	460c      	mov	r4, r1
 8011c5e:	469a      	mov	sl, r3
 8011c60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c66:	d807      	bhi.n	8011c78 <_printf_i+0x28>
 8011c68:	2f62      	cmp	r7, #98	; 0x62
 8011c6a:	d80a      	bhi.n	8011c82 <_printf_i+0x32>
 8011c6c:	2f00      	cmp	r7, #0
 8011c6e:	f000 80d9 	beq.w	8011e24 <_printf_i+0x1d4>
 8011c72:	2f58      	cmp	r7, #88	; 0x58
 8011c74:	f000 80a4 	beq.w	8011dc0 <_printf_i+0x170>
 8011c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c80:	e03a      	b.n	8011cf8 <_printf_i+0xa8>
 8011c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c86:	2b15      	cmp	r3, #21
 8011c88:	d8f6      	bhi.n	8011c78 <_printf_i+0x28>
 8011c8a:	a101      	add	r1, pc, #4	; (adr r1, 8011c90 <_printf_i+0x40>)
 8011c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c90:	08011ce9 	.word	0x08011ce9
 8011c94:	08011cfd 	.word	0x08011cfd
 8011c98:	08011c79 	.word	0x08011c79
 8011c9c:	08011c79 	.word	0x08011c79
 8011ca0:	08011c79 	.word	0x08011c79
 8011ca4:	08011c79 	.word	0x08011c79
 8011ca8:	08011cfd 	.word	0x08011cfd
 8011cac:	08011c79 	.word	0x08011c79
 8011cb0:	08011c79 	.word	0x08011c79
 8011cb4:	08011c79 	.word	0x08011c79
 8011cb8:	08011c79 	.word	0x08011c79
 8011cbc:	08011e0b 	.word	0x08011e0b
 8011cc0:	08011d2d 	.word	0x08011d2d
 8011cc4:	08011ded 	.word	0x08011ded
 8011cc8:	08011c79 	.word	0x08011c79
 8011ccc:	08011c79 	.word	0x08011c79
 8011cd0:	08011e2d 	.word	0x08011e2d
 8011cd4:	08011c79 	.word	0x08011c79
 8011cd8:	08011d2d 	.word	0x08011d2d
 8011cdc:	08011c79 	.word	0x08011c79
 8011ce0:	08011c79 	.word	0x08011c79
 8011ce4:	08011df5 	.word	0x08011df5
 8011ce8:	682b      	ldr	r3, [r5, #0]
 8011cea:	1d1a      	adds	r2, r3, #4
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	602a      	str	r2, [r5, #0]
 8011cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011cf8:	2301      	movs	r3, #1
 8011cfa:	e0a4      	b.n	8011e46 <_printf_i+0x1f6>
 8011cfc:	6820      	ldr	r0, [r4, #0]
 8011cfe:	6829      	ldr	r1, [r5, #0]
 8011d00:	0606      	lsls	r6, r0, #24
 8011d02:	f101 0304 	add.w	r3, r1, #4
 8011d06:	d50a      	bpl.n	8011d1e <_printf_i+0xce>
 8011d08:	680e      	ldr	r6, [r1, #0]
 8011d0a:	602b      	str	r3, [r5, #0]
 8011d0c:	2e00      	cmp	r6, #0
 8011d0e:	da03      	bge.n	8011d18 <_printf_i+0xc8>
 8011d10:	232d      	movs	r3, #45	; 0x2d
 8011d12:	4276      	negs	r6, r6
 8011d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d18:	230a      	movs	r3, #10
 8011d1a:	485e      	ldr	r0, [pc, #376]	; (8011e94 <_printf_i+0x244>)
 8011d1c:	e019      	b.n	8011d52 <_printf_i+0x102>
 8011d1e:	680e      	ldr	r6, [r1, #0]
 8011d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011d24:	602b      	str	r3, [r5, #0]
 8011d26:	bf18      	it	ne
 8011d28:	b236      	sxthne	r6, r6
 8011d2a:	e7ef      	b.n	8011d0c <_printf_i+0xbc>
 8011d2c:	682b      	ldr	r3, [r5, #0]
 8011d2e:	6820      	ldr	r0, [r4, #0]
 8011d30:	1d19      	adds	r1, r3, #4
 8011d32:	6029      	str	r1, [r5, #0]
 8011d34:	0601      	lsls	r1, r0, #24
 8011d36:	d501      	bpl.n	8011d3c <_printf_i+0xec>
 8011d38:	681e      	ldr	r6, [r3, #0]
 8011d3a:	e002      	b.n	8011d42 <_printf_i+0xf2>
 8011d3c:	0646      	lsls	r6, r0, #25
 8011d3e:	d5fb      	bpl.n	8011d38 <_printf_i+0xe8>
 8011d40:	881e      	ldrh	r6, [r3, #0]
 8011d42:	2f6f      	cmp	r7, #111	; 0x6f
 8011d44:	bf0c      	ite	eq
 8011d46:	2308      	moveq	r3, #8
 8011d48:	230a      	movne	r3, #10
 8011d4a:	4852      	ldr	r0, [pc, #328]	; (8011e94 <_printf_i+0x244>)
 8011d4c:	2100      	movs	r1, #0
 8011d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d52:	6865      	ldr	r5, [r4, #4]
 8011d54:	2d00      	cmp	r5, #0
 8011d56:	bfa8      	it	ge
 8011d58:	6821      	ldrge	r1, [r4, #0]
 8011d5a:	60a5      	str	r5, [r4, #8]
 8011d5c:	bfa4      	itt	ge
 8011d5e:	f021 0104 	bicge.w	r1, r1, #4
 8011d62:	6021      	strge	r1, [r4, #0]
 8011d64:	b90e      	cbnz	r6, 8011d6a <_printf_i+0x11a>
 8011d66:	2d00      	cmp	r5, #0
 8011d68:	d04d      	beq.n	8011e06 <_printf_i+0x1b6>
 8011d6a:	4615      	mov	r5, r2
 8011d6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d70:	fb03 6711 	mls	r7, r3, r1, r6
 8011d74:	5dc7      	ldrb	r7, [r0, r7]
 8011d76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d7a:	4637      	mov	r7, r6
 8011d7c:	42bb      	cmp	r3, r7
 8011d7e:	460e      	mov	r6, r1
 8011d80:	d9f4      	bls.n	8011d6c <_printf_i+0x11c>
 8011d82:	2b08      	cmp	r3, #8
 8011d84:	d10b      	bne.n	8011d9e <_printf_i+0x14e>
 8011d86:	6823      	ldr	r3, [r4, #0]
 8011d88:	07de      	lsls	r6, r3, #31
 8011d8a:	d508      	bpl.n	8011d9e <_printf_i+0x14e>
 8011d8c:	6923      	ldr	r3, [r4, #16]
 8011d8e:	6861      	ldr	r1, [r4, #4]
 8011d90:	4299      	cmp	r1, r3
 8011d92:	bfde      	ittt	le
 8011d94:	2330      	movle	r3, #48	; 0x30
 8011d96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011d9e:	1b52      	subs	r2, r2, r5
 8011da0:	6122      	str	r2, [r4, #16]
 8011da2:	464b      	mov	r3, r9
 8011da4:	4621      	mov	r1, r4
 8011da6:	4640      	mov	r0, r8
 8011da8:	f8cd a000 	str.w	sl, [sp]
 8011dac:	aa03      	add	r2, sp, #12
 8011dae:	f7ff fedf 	bl	8011b70 <_printf_common>
 8011db2:	3001      	adds	r0, #1
 8011db4:	d14c      	bne.n	8011e50 <_printf_i+0x200>
 8011db6:	f04f 30ff 	mov.w	r0, #4294967295
 8011dba:	b004      	add	sp, #16
 8011dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dc0:	4834      	ldr	r0, [pc, #208]	; (8011e94 <_printf_i+0x244>)
 8011dc2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011dc6:	6829      	ldr	r1, [r5, #0]
 8011dc8:	6823      	ldr	r3, [r4, #0]
 8011dca:	f851 6b04 	ldr.w	r6, [r1], #4
 8011dce:	6029      	str	r1, [r5, #0]
 8011dd0:	061d      	lsls	r5, r3, #24
 8011dd2:	d514      	bpl.n	8011dfe <_printf_i+0x1ae>
 8011dd4:	07df      	lsls	r7, r3, #31
 8011dd6:	bf44      	itt	mi
 8011dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8011ddc:	6023      	strmi	r3, [r4, #0]
 8011dde:	b91e      	cbnz	r6, 8011de8 <_printf_i+0x198>
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	f023 0320 	bic.w	r3, r3, #32
 8011de6:	6023      	str	r3, [r4, #0]
 8011de8:	2310      	movs	r3, #16
 8011dea:	e7af      	b.n	8011d4c <_printf_i+0xfc>
 8011dec:	6823      	ldr	r3, [r4, #0]
 8011dee:	f043 0320 	orr.w	r3, r3, #32
 8011df2:	6023      	str	r3, [r4, #0]
 8011df4:	2378      	movs	r3, #120	; 0x78
 8011df6:	4828      	ldr	r0, [pc, #160]	; (8011e98 <_printf_i+0x248>)
 8011df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011dfc:	e7e3      	b.n	8011dc6 <_printf_i+0x176>
 8011dfe:	0659      	lsls	r1, r3, #25
 8011e00:	bf48      	it	mi
 8011e02:	b2b6      	uxthmi	r6, r6
 8011e04:	e7e6      	b.n	8011dd4 <_printf_i+0x184>
 8011e06:	4615      	mov	r5, r2
 8011e08:	e7bb      	b.n	8011d82 <_printf_i+0x132>
 8011e0a:	682b      	ldr	r3, [r5, #0]
 8011e0c:	6826      	ldr	r6, [r4, #0]
 8011e0e:	1d18      	adds	r0, r3, #4
 8011e10:	6961      	ldr	r1, [r4, #20]
 8011e12:	6028      	str	r0, [r5, #0]
 8011e14:	0635      	lsls	r5, r6, #24
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	d501      	bpl.n	8011e1e <_printf_i+0x1ce>
 8011e1a:	6019      	str	r1, [r3, #0]
 8011e1c:	e002      	b.n	8011e24 <_printf_i+0x1d4>
 8011e1e:	0670      	lsls	r0, r6, #25
 8011e20:	d5fb      	bpl.n	8011e1a <_printf_i+0x1ca>
 8011e22:	8019      	strh	r1, [r3, #0]
 8011e24:	2300      	movs	r3, #0
 8011e26:	4615      	mov	r5, r2
 8011e28:	6123      	str	r3, [r4, #16]
 8011e2a:	e7ba      	b.n	8011da2 <_printf_i+0x152>
 8011e2c:	682b      	ldr	r3, [r5, #0]
 8011e2e:	2100      	movs	r1, #0
 8011e30:	1d1a      	adds	r2, r3, #4
 8011e32:	602a      	str	r2, [r5, #0]
 8011e34:	681d      	ldr	r5, [r3, #0]
 8011e36:	6862      	ldr	r2, [r4, #4]
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f000 fef7 	bl	8012c2c <memchr>
 8011e3e:	b108      	cbz	r0, 8011e44 <_printf_i+0x1f4>
 8011e40:	1b40      	subs	r0, r0, r5
 8011e42:	6060      	str	r0, [r4, #4]
 8011e44:	6863      	ldr	r3, [r4, #4]
 8011e46:	6123      	str	r3, [r4, #16]
 8011e48:	2300      	movs	r3, #0
 8011e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e4e:	e7a8      	b.n	8011da2 <_printf_i+0x152>
 8011e50:	462a      	mov	r2, r5
 8011e52:	4649      	mov	r1, r9
 8011e54:	4640      	mov	r0, r8
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	47d0      	blx	sl
 8011e5a:	3001      	adds	r0, #1
 8011e5c:	d0ab      	beq.n	8011db6 <_printf_i+0x166>
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	079b      	lsls	r3, r3, #30
 8011e62:	d413      	bmi.n	8011e8c <_printf_i+0x23c>
 8011e64:	68e0      	ldr	r0, [r4, #12]
 8011e66:	9b03      	ldr	r3, [sp, #12]
 8011e68:	4298      	cmp	r0, r3
 8011e6a:	bfb8      	it	lt
 8011e6c:	4618      	movlt	r0, r3
 8011e6e:	e7a4      	b.n	8011dba <_printf_i+0x16a>
 8011e70:	2301      	movs	r3, #1
 8011e72:	4632      	mov	r2, r6
 8011e74:	4649      	mov	r1, r9
 8011e76:	4640      	mov	r0, r8
 8011e78:	47d0      	blx	sl
 8011e7a:	3001      	adds	r0, #1
 8011e7c:	d09b      	beq.n	8011db6 <_printf_i+0x166>
 8011e7e:	3501      	adds	r5, #1
 8011e80:	68e3      	ldr	r3, [r4, #12]
 8011e82:	9903      	ldr	r1, [sp, #12]
 8011e84:	1a5b      	subs	r3, r3, r1
 8011e86:	42ab      	cmp	r3, r5
 8011e88:	dcf2      	bgt.n	8011e70 <_printf_i+0x220>
 8011e8a:	e7eb      	b.n	8011e64 <_printf_i+0x214>
 8011e8c:	2500      	movs	r5, #0
 8011e8e:	f104 0619 	add.w	r6, r4, #25
 8011e92:	e7f5      	b.n	8011e80 <_printf_i+0x230>
 8011e94:	080222be 	.word	0x080222be
 8011e98:	080222cf 	.word	0x080222cf

08011e9c <_sbrk_r>:
 8011e9c:	b538      	push	{r3, r4, r5, lr}
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	4d05      	ldr	r5, [pc, #20]	; (8011eb8 <_sbrk_r+0x1c>)
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	4608      	mov	r0, r1
 8011ea6:	602b      	str	r3, [r5, #0]
 8011ea8:	f7f1 fa46 	bl	8003338 <_sbrk>
 8011eac:	1c43      	adds	r3, r0, #1
 8011eae:	d102      	bne.n	8011eb6 <_sbrk_r+0x1a>
 8011eb0:	682b      	ldr	r3, [r5, #0]
 8011eb2:	b103      	cbz	r3, 8011eb6 <_sbrk_r+0x1a>
 8011eb4:	6023      	str	r3, [r4, #0]
 8011eb6:	bd38      	pop	{r3, r4, r5, pc}
 8011eb8:	2000cbf0 	.word	0x2000cbf0

08011ebc <_vsniprintf_r>:
 8011ebc:	b530      	push	{r4, r5, lr}
 8011ebe:	4614      	mov	r4, r2
 8011ec0:	2c00      	cmp	r4, #0
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	b09b      	sub	sp, #108	; 0x6c
 8011ec8:	da05      	bge.n	8011ed6 <_vsniprintf_r+0x1a>
 8011eca:	238b      	movs	r3, #139	; 0x8b
 8011ecc:	6003      	str	r3, [r0, #0]
 8011ece:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed2:	b01b      	add	sp, #108	; 0x6c
 8011ed4:	bd30      	pop	{r4, r5, pc}
 8011ed6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011eda:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011ede:	bf0c      	ite	eq
 8011ee0:	4623      	moveq	r3, r4
 8011ee2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011ee6:	9302      	str	r3, [sp, #8]
 8011ee8:	9305      	str	r3, [sp, #20]
 8011eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011eee:	9100      	str	r1, [sp, #0]
 8011ef0:	9104      	str	r1, [sp, #16]
 8011ef2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011ef6:	4669      	mov	r1, sp
 8011ef8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011efa:	f001 fab1 	bl	8013460 <_svfiprintf_r>
 8011efe:	1c43      	adds	r3, r0, #1
 8011f00:	bfbc      	itt	lt
 8011f02:	238b      	movlt	r3, #139	; 0x8b
 8011f04:	602b      	strlt	r3, [r5, #0]
 8011f06:	2c00      	cmp	r4, #0
 8011f08:	d0e3      	beq.n	8011ed2 <_vsniprintf_r+0x16>
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	9b00      	ldr	r3, [sp, #0]
 8011f0e:	701a      	strb	r2, [r3, #0]
 8011f10:	e7df      	b.n	8011ed2 <_vsniprintf_r+0x16>
	...

08011f14 <vsniprintf>:
 8011f14:	b507      	push	{r0, r1, r2, lr}
 8011f16:	9300      	str	r3, [sp, #0]
 8011f18:	4613      	mov	r3, r2
 8011f1a:	460a      	mov	r2, r1
 8011f1c:	4601      	mov	r1, r0
 8011f1e:	4803      	ldr	r0, [pc, #12]	; (8011f2c <vsniprintf+0x18>)
 8011f20:	6800      	ldr	r0, [r0, #0]
 8011f22:	f7ff ffcb 	bl	8011ebc <_vsniprintf_r>
 8011f26:	b003      	add	sp, #12
 8011f28:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f2c:	2000b704 	.word	0x2000b704

08011f30 <quorem>:
 8011f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f34:	6903      	ldr	r3, [r0, #16]
 8011f36:	690c      	ldr	r4, [r1, #16]
 8011f38:	4607      	mov	r7, r0
 8011f3a:	42a3      	cmp	r3, r4
 8011f3c:	f2c0 8082 	blt.w	8012044 <quorem+0x114>
 8011f40:	3c01      	subs	r4, #1
 8011f42:	f100 0514 	add.w	r5, r0, #20
 8011f46:	f101 0814 	add.w	r8, r1, #20
 8011f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f4e:	9301      	str	r3, [sp, #4]
 8011f50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f60:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011f64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f68:	d331      	bcc.n	8011fce <quorem+0x9e>
 8011f6a:	f04f 0e00 	mov.w	lr, #0
 8011f6e:	4640      	mov	r0, r8
 8011f70:	46ac      	mov	ip, r5
 8011f72:	46f2      	mov	sl, lr
 8011f74:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f78:	b293      	uxth	r3, r2
 8011f7a:	fb06 e303 	mla	r3, r6, r3, lr
 8011f7e:	0c12      	lsrs	r2, r2, #16
 8011f80:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	fb06 e202 	mla	r2, r6, r2, lr
 8011f8a:	ebaa 0303 	sub.w	r3, sl, r3
 8011f8e:	f8dc a000 	ldr.w	sl, [ip]
 8011f92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f96:	fa1f fa8a 	uxth.w	sl, sl
 8011f9a:	4453      	add	r3, sl
 8011f9c:	f8dc a000 	ldr.w	sl, [ip]
 8011fa0:	b292      	uxth	r2, r2
 8011fa2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011fa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fb0:	4581      	cmp	r9, r0
 8011fb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011fb6:	f84c 3b04 	str.w	r3, [ip], #4
 8011fba:	d2db      	bcs.n	8011f74 <quorem+0x44>
 8011fbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8011fc0:	b92b      	cbnz	r3, 8011fce <quorem+0x9e>
 8011fc2:	9b01      	ldr	r3, [sp, #4]
 8011fc4:	3b04      	subs	r3, #4
 8011fc6:	429d      	cmp	r5, r3
 8011fc8:	461a      	mov	r2, r3
 8011fca:	d32f      	bcc.n	801202c <quorem+0xfc>
 8011fcc:	613c      	str	r4, [r7, #16]
 8011fce:	4638      	mov	r0, r7
 8011fd0:	f001 f8d2 	bl	8013178 <__mcmp>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	db25      	blt.n	8012024 <quorem+0xf4>
 8011fd8:	4628      	mov	r0, r5
 8011fda:	f04f 0c00 	mov.w	ip, #0
 8011fde:	3601      	adds	r6, #1
 8011fe0:	f858 1b04 	ldr.w	r1, [r8], #4
 8011fe4:	f8d0 e000 	ldr.w	lr, [r0]
 8011fe8:	b28b      	uxth	r3, r1
 8011fea:	ebac 0303 	sub.w	r3, ip, r3
 8011fee:	fa1f f28e 	uxth.w	r2, lr
 8011ff2:	4413      	add	r3, r2
 8011ff4:	0c0a      	lsrs	r2, r1, #16
 8011ff6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012004:	45c1      	cmp	r9, r8
 8012006:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801200a:	f840 3b04 	str.w	r3, [r0], #4
 801200e:	d2e7      	bcs.n	8011fe0 <quorem+0xb0>
 8012010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012018:	b922      	cbnz	r2, 8012024 <quorem+0xf4>
 801201a:	3b04      	subs	r3, #4
 801201c:	429d      	cmp	r5, r3
 801201e:	461a      	mov	r2, r3
 8012020:	d30a      	bcc.n	8012038 <quorem+0x108>
 8012022:	613c      	str	r4, [r7, #16]
 8012024:	4630      	mov	r0, r6
 8012026:	b003      	add	sp, #12
 8012028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801202c:	6812      	ldr	r2, [r2, #0]
 801202e:	3b04      	subs	r3, #4
 8012030:	2a00      	cmp	r2, #0
 8012032:	d1cb      	bne.n	8011fcc <quorem+0x9c>
 8012034:	3c01      	subs	r4, #1
 8012036:	e7c6      	b.n	8011fc6 <quorem+0x96>
 8012038:	6812      	ldr	r2, [r2, #0]
 801203a:	3b04      	subs	r3, #4
 801203c:	2a00      	cmp	r2, #0
 801203e:	d1f0      	bne.n	8012022 <quorem+0xf2>
 8012040:	3c01      	subs	r4, #1
 8012042:	e7eb      	b.n	801201c <quorem+0xec>
 8012044:	2000      	movs	r0, #0
 8012046:	e7ee      	b.n	8012026 <quorem+0xf6>

08012048 <_dtoa_r>:
 8012048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	4616      	mov	r6, r2
 801204e:	461f      	mov	r7, r3
 8012050:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012052:	b099      	sub	sp, #100	; 0x64
 8012054:	4605      	mov	r5, r0
 8012056:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801205a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801205e:	b974      	cbnz	r4, 801207e <_dtoa_r+0x36>
 8012060:	2010      	movs	r0, #16
 8012062:	f7ff f9c7 	bl	80113f4 <malloc>
 8012066:	4602      	mov	r2, r0
 8012068:	6268      	str	r0, [r5, #36]	; 0x24
 801206a:	b920      	cbnz	r0, 8012076 <_dtoa_r+0x2e>
 801206c:	21ea      	movs	r1, #234	; 0xea
 801206e:	4ba8      	ldr	r3, [pc, #672]	; (8012310 <_dtoa_r+0x2c8>)
 8012070:	48a8      	ldr	r0, [pc, #672]	; (8012314 <_dtoa_r+0x2cc>)
 8012072:	f001 faf5 	bl	8013660 <__assert_func>
 8012076:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801207a:	6004      	str	r4, [r0, #0]
 801207c:	60c4      	str	r4, [r0, #12]
 801207e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012080:	6819      	ldr	r1, [r3, #0]
 8012082:	b151      	cbz	r1, 801209a <_dtoa_r+0x52>
 8012084:	685a      	ldr	r2, [r3, #4]
 8012086:	2301      	movs	r3, #1
 8012088:	4093      	lsls	r3, r2
 801208a:	604a      	str	r2, [r1, #4]
 801208c:	608b      	str	r3, [r1, #8]
 801208e:	4628      	mov	r0, r5
 8012090:	f000 fe34 	bl	8012cfc <_Bfree>
 8012094:	2200      	movs	r2, #0
 8012096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012098:	601a      	str	r2, [r3, #0]
 801209a:	1e3b      	subs	r3, r7, #0
 801209c:	bfaf      	iteee	ge
 801209e:	2300      	movge	r3, #0
 80120a0:	2201      	movlt	r2, #1
 80120a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80120a6:	9305      	strlt	r3, [sp, #20]
 80120a8:	bfa8      	it	ge
 80120aa:	f8c8 3000 	strge.w	r3, [r8]
 80120ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80120b2:	4b99      	ldr	r3, [pc, #612]	; (8012318 <_dtoa_r+0x2d0>)
 80120b4:	bfb8      	it	lt
 80120b6:	f8c8 2000 	strlt.w	r2, [r8]
 80120ba:	ea33 0309 	bics.w	r3, r3, r9
 80120be:	d119      	bne.n	80120f4 <_dtoa_r+0xac>
 80120c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80120c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80120c6:	6013      	str	r3, [r2, #0]
 80120c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120cc:	4333      	orrs	r3, r6
 80120ce:	f000 857f 	beq.w	8012bd0 <_dtoa_r+0xb88>
 80120d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80120d4:	b953      	cbnz	r3, 80120ec <_dtoa_r+0xa4>
 80120d6:	4b91      	ldr	r3, [pc, #580]	; (801231c <_dtoa_r+0x2d4>)
 80120d8:	e022      	b.n	8012120 <_dtoa_r+0xd8>
 80120da:	4b91      	ldr	r3, [pc, #580]	; (8012320 <_dtoa_r+0x2d8>)
 80120dc:	9303      	str	r3, [sp, #12]
 80120de:	3308      	adds	r3, #8
 80120e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80120e2:	6013      	str	r3, [r2, #0]
 80120e4:	9803      	ldr	r0, [sp, #12]
 80120e6:	b019      	add	sp, #100	; 0x64
 80120e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ec:	4b8b      	ldr	r3, [pc, #556]	; (801231c <_dtoa_r+0x2d4>)
 80120ee:	9303      	str	r3, [sp, #12]
 80120f0:	3303      	adds	r3, #3
 80120f2:	e7f5      	b.n	80120e0 <_dtoa_r+0x98>
 80120f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80120f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80120fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012100:	2200      	movs	r2, #0
 8012102:	2300      	movs	r3, #0
 8012104:	f7ee fcbc 	bl	8000a80 <__aeabi_dcmpeq>
 8012108:	4680      	mov	r8, r0
 801210a:	b158      	cbz	r0, 8012124 <_dtoa_r+0xdc>
 801210c:	2301      	movs	r3, #1
 801210e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012110:	6013      	str	r3, [r2, #0]
 8012112:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012114:	2b00      	cmp	r3, #0
 8012116:	f000 8558 	beq.w	8012bca <_dtoa_r+0xb82>
 801211a:	4882      	ldr	r0, [pc, #520]	; (8012324 <_dtoa_r+0x2dc>)
 801211c:	6018      	str	r0, [r3, #0]
 801211e:	1e43      	subs	r3, r0, #1
 8012120:	9303      	str	r3, [sp, #12]
 8012122:	e7df      	b.n	80120e4 <_dtoa_r+0x9c>
 8012124:	ab16      	add	r3, sp, #88	; 0x58
 8012126:	9301      	str	r3, [sp, #4]
 8012128:	ab17      	add	r3, sp, #92	; 0x5c
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	4628      	mov	r0, r5
 801212e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012132:	f001 f8c9 	bl	80132c8 <__d2b>
 8012136:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801213a:	4683      	mov	fp, r0
 801213c:	2c00      	cmp	r4, #0
 801213e:	d07f      	beq.n	8012240 <_dtoa_r+0x1f8>
 8012140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012146:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801214a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801214e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012152:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012156:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801215a:	2200      	movs	r2, #0
 801215c:	4b72      	ldr	r3, [pc, #456]	; (8012328 <_dtoa_r+0x2e0>)
 801215e:	f7ee f86f 	bl	8000240 <__aeabi_dsub>
 8012162:	a365      	add	r3, pc, #404	; (adr r3, 80122f8 <_dtoa_r+0x2b0>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	f7ee fa22 	bl	80005b0 <__aeabi_dmul>
 801216c:	a364      	add	r3, pc, #400	; (adr r3, 8012300 <_dtoa_r+0x2b8>)
 801216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012172:	f7ee f867 	bl	8000244 <__adddf3>
 8012176:	4606      	mov	r6, r0
 8012178:	4620      	mov	r0, r4
 801217a:	460f      	mov	r7, r1
 801217c:	f7ee f9ae 	bl	80004dc <__aeabi_i2d>
 8012180:	a361      	add	r3, pc, #388	; (adr r3, 8012308 <_dtoa_r+0x2c0>)
 8012182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012186:	f7ee fa13 	bl	80005b0 <__aeabi_dmul>
 801218a:	4602      	mov	r2, r0
 801218c:	460b      	mov	r3, r1
 801218e:	4630      	mov	r0, r6
 8012190:	4639      	mov	r1, r7
 8012192:	f7ee f857 	bl	8000244 <__adddf3>
 8012196:	4606      	mov	r6, r0
 8012198:	460f      	mov	r7, r1
 801219a:	f7ee fcb9 	bl	8000b10 <__aeabi_d2iz>
 801219e:	2200      	movs	r2, #0
 80121a0:	4682      	mov	sl, r0
 80121a2:	2300      	movs	r3, #0
 80121a4:	4630      	mov	r0, r6
 80121a6:	4639      	mov	r1, r7
 80121a8:	f7ee fc74 	bl	8000a94 <__aeabi_dcmplt>
 80121ac:	b148      	cbz	r0, 80121c2 <_dtoa_r+0x17a>
 80121ae:	4650      	mov	r0, sl
 80121b0:	f7ee f994 	bl	80004dc <__aeabi_i2d>
 80121b4:	4632      	mov	r2, r6
 80121b6:	463b      	mov	r3, r7
 80121b8:	f7ee fc62 	bl	8000a80 <__aeabi_dcmpeq>
 80121bc:	b908      	cbnz	r0, 80121c2 <_dtoa_r+0x17a>
 80121be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121c2:	f1ba 0f16 	cmp.w	sl, #22
 80121c6:	d858      	bhi.n	801227a <_dtoa_r+0x232>
 80121c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80121cc:	4b57      	ldr	r3, [pc, #348]	; (801232c <_dtoa_r+0x2e4>)
 80121ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80121d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d6:	f7ee fc5d 	bl	8000a94 <__aeabi_dcmplt>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d04f      	beq.n	801227e <_dtoa_r+0x236>
 80121de:	2300      	movs	r3, #0
 80121e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80121e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80121e8:	1b1c      	subs	r4, r3, r4
 80121ea:	1e63      	subs	r3, r4, #1
 80121ec:	9309      	str	r3, [sp, #36]	; 0x24
 80121ee:	bf49      	itett	mi
 80121f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80121f4:	2300      	movpl	r3, #0
 80121f6:	9306      	strmi	r3, [sp, #24]
 80121f8:	2300      	movmi	r3, #0
 80121fa:	bf54      	ite	pl
 80121fc:	9306      	strpl	r3, [sp, #24]
 80121fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8012200:	f1ba 0f00 	cmp.w	sl, #0
 8012204:	db3d      	blt.n	8012282 <_dtoa_r+0x23a>
 8012206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012208:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801220c:	4453      	add	r3, sl
 801220e:	9309      	str	r3, [sp, #36]	; 0x24
 8012210:	2300      	movs	r3, #0
 8012212:	930a      	str	r3, [sp, #40]	; 0x28
 8012214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012216:	2b09      	cmp	r3, #9
 8012218:	f200 808c 	bhi.w	8012334 <_dtoa_r+0x2ec>
 801221c:	2b05      	cmp	r3, #5
 801221e:	bfc4      	itt	gt
 8012220:	3b04      	subgt	r3, #4
 8012222:	9322      	strgt	r3, [sp, #136]	; 0x88
 8012224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012226:	bfc8      	it	gt
 8012228:	2400      	movgt	r4, #0
 801222a:	f1a3 0302 	sub.w	r3, r3, #2
 801222e:	bfd8      	it	le
 8012230:	2401      	movle	r4, #1
 8012232:	2b03      	cmp	r3, #3
 8012234:	f200 808a 	bhi.w	801234c <_dtoa_r+0x304>
 8012238:	e8df f003 	tbb	[pc, r3]
 801223c:	5b4d4f2d 	.word	0x5b4d4f2d
 8012240:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8012244:	441c      	add	r4, r3
 8012246:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801224a:	2b20      	cmp	r3, #32
 801224c:	bfc3      	ittte	gt
 801224e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012252:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8012256:	fa09 f303 	lslgt.w	r3, r9, r3
 801225a:	f1c3 0320 	rsble	r3, r3, #32
 801225e:	bfc6      	itte	gt
 8012260:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012264:	4318      	orrgt	r0, r3
 8012266:	fa06 f003 	lslle.w	r0, r6, r3
 801226a:	f7ee f927 	bl	80004bc <__aeabi_ui2d>
 801226e:	2301      	movs	r3, #1
 8012270:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012274:	3c01      	subs	r4, #1
 8012276:	9313      	str	r3, [sp, #76]	; 0x4c
 8012278:	e76f      	b.n	801215a <_dtoa_r+0x112>
 801227a:	2301      	movs	r3, #1
 801227c:	e7b2      	b.n	80121e4 <_dtoa_r+0x19c>
 801227e:	900f      	str	r0, [sp, #60]	; 0x3c
 8012280:	e7b1      	b.n	80121e6 <_dtoa_r+0x19e>
 8012282:	9b06      	ldr	r3, [sp, #24]
 8012284:	eba3 030a 	sub.w	r3, r3, sl
 8012288:	9306      	str	r3, [sp, #24]
 801228a:	f1ca 0300 	rsb	r3, sl, #0
 801228e:	930a      	str	r3, [sp, #40]	; 0x28
 8012290:	2300      	movs	r3, #0
 8012292:	930e      	str	r3, [sp, #56]	; 0x38
 8012294:	e7be      	b.n	8012214 <_dtoa_r+0x1cc>
 8012296:	2300      	movs	r3, #0
 8012298:	930b      	str	r3, [sp, #44]	; 0x2c
 801229a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801229c:	2b00      	cmp	r3, #0
 801229e:	dc58      	bgt.n	8012352 <_dtoa_r+0x30a>
 80122a0:	f04f 0901 	mov.w	r9, #1
 80122a4:	464b      	mov	r3, r9
 80122a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80122aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80122ae:	2200      	movs	r2, #0
 80122b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80122b2:	6042      	str	r2, [r0, #4]
 80122b4:	2204      	movs	r2, #4
 80122b6:	f102 0614 	add.w	r6, r2, #20
 80122ba:	429e      	cmp	r6, r3
 80122bc:	6841      	ldr	r1, [r0, #4]
 80122be:	d94e      	bls.n	801235e <_dtoa_r+0x316>
 80122c0:	4628      	mov	r0, r5
 80122c2:	f000 fcdb 	bl	8012c7c <_Balloc>
 80122c6:	9003      	str	r0, [sp, #12]
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d14c      	bne.n	8012366 <_dtoa_r+0x31e>
 80122cc:	4602      	mov	r2, r0
 80122ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80122d2:	4b17      	ldr	r3, [pc, #92]	; (8012330 <_dtoa_r+0x2e8>)
 80122d4:	e6cc      	b.n	8012070 <_dtoa_r+0x28>
 80122d6:	2301      	movs	r3, #1
 80122d8:	e7de      	b.n	8012298 <_dtoa_r+0x250>
 80122da:	2300      	movs	r3, #0
 80122dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80122de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80122e0:	eb0a 0903 	add.w	r9, sl, r3
 80122e4:	f109 0301 	add.w	r3, r9, #1
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	9308      	str	r3, [sp, #32]
 80122ec:	bfb8      	it	lt
 80122ee:	2301      	movlt	r3, #1
 80122f0:	e7dd      	b.n	80122ae <_dtoa_r+0x266>
 80122f2:	2301      	movs	r3, #1
 80122f4:	e7f2      	b.n	80122dc <_dtoa_r+0x294>
 80122f6:	bf00      	nop
 80122f8:	636f4361 	.word	0x636f4361
 80122fc:	3fd287a7 	.word	0x3fd287a7
 8012300:	8b60c8b3 	.word	0x8b60c8b3
 8012304:	3fc68a28 	.word	0x3fc68a28
 8012308:	509f79fb 	.word	0x509f79fb
 801230c:	3fd34413 	.word	0x3fd34413
 8012310:	080222ed 	.word	0x080222ed
 8012314:	08022304 	.word	0x08022304
 8012318:	7ff00000 	.word	0x7ff00000
 801231c:	080222e9 	.word	0x080222e9
 8012320:	080222e0 	.word	0x080222e0
 8012324:	080222bd 	.word	0x080222bd
 8012328:	3ff80000 	.word	0x3ff80000
 801232c:	080223f8 	.word	0x080223f8
 8012330:	0802235f 	.word	0x0802235f
 8012334:	2401      	movs	r4, #1
 8012336:	2300      	movs	r3, #0
 8012338:	940b      	str	r4, [sp, #44]	; 0x2c
 801233a:	9322      	str	r3, [sp, #136]	; 0x88
 801233c:	f04f 39ff 	mov.w	r9, #4294967295
 8012340:	2200      	movs	r2, #0
 8012342:	2312      	movs	r3, #18
 8012344:	f8cd 9020 	str.w	r9, [sp, #32]
 8012348:	9223      	str	r2, [sp, #140]	; 0x8c
 801234a:	e7b0      	b.n	80122ae <_dtoa_r+0x266>
 801234c:	2301      	movs	r3, #1
 801234e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012350:	e7f4      	b.n	801233c <_dtoa_r+0x2f4>
 8012352:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8012356:	464b      	mov	r3, r9
 8012358:	f8cd 9020 	str.w	r9, [sp, #32]
 801235c:	e7a7      	b.n	80122ae <_dtoa_r+0x266>
 801235e:	3101      	adds	r1, #1
 8012360:	6041      	str	r1, [r0, #4]
 8012362:	0052      	lsls	r2, r2, #1
 8012364:	e7a7      	b.n	80122b6 <_dtoa_r+0x26e>
 8012366:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012368:	9a03      	ldr	r2, [sp, #12]
 801236a:	601a      	str	r2, [r3, #0]
 801236c:	9b08      	ldr	r3, [sp, #32]
 801236e:	2b0e      	cmp	r3, #14
 8012370:	f200 80a8 	bhi.w	80124c4 <_dtoa_r+0x47c>
 8012374:	2c00      	cmp	r4, #0
 8012376:	f000 80a5 	beq.w	80124c4 <_dtoa_r+0x47c>
 801237a:	f1ba 0f00 	cmp.w	sl, #0
 801237e:	dd34      	ble.n	80123ea <_dtoa_r+0x3a2>
 8012380:	4a9a      	ldr	r2, [pc, #616]	; (80125ec <_dtoa_r+0x5a4>)
 8012382:	f00a 030f 	and.w	r3, sl, #15
 8012386:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801238a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801238e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8012396:	ea4f 142a 	mov.w	r4, sl, asr #4
 801239a:	d016      	beq.n	80123ca <_dtoa_r+0x382>
 801239c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80123a0:	4b93      	ldr	r3, [pc, #588]	; (80125f0 <_dtoa_r+0x5a8>)
 80123a2:	2703      	movs	r7, #3
 80123a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80123a8:	f7ee fa2c 	bl	8000804 <__aeabi_ddiv>
 80123ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123b0:	f004 040f 	and.w	r4, r4, #15
 80123b4:	4e8e      	ldr	r6, [pc, #568]	; (80125f0 <_dtoa_r+0x5a8>)
 80123b6:	b954      	cbnz	r4, 80123ce <_dtoa_r+0x386>
 80123b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80123bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80123c0:	f7ee fa20 	bl	8000804 <__aeabi_ddiv>
 80123c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123c8:	e029      	b.n	801241e <_dtoa_r+0x3d6>
 80123ca:	2702      	movs	r7, #2
 80123cc:	e7f2      	b.n	80123b4 <_dtoa_r+0x36c>
 80123ce:	07e1      	lsls	r1, r4, #31
 80123d0:	d508      	bpl.n	80123e4 <_dtoa_r+0x39c>
 80123d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80123d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80123da:	f7ee f8e9 	bl	80005b0 <__aeabi_dmul>
 80123de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80123e2:	3701      	adds	r7, #1
 80123e4:	1064      	asrs	r4, r4, #1
 80123e6:	3608      	adds	r6, #8
 80123e8:	e7e5      	b.n	80123b6 <_dtoa_r+0x36e>
 80123ea:	f000 80a5 	beq.w	8012538 <_dtoa_r+0x4f0>
 80123ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80123f2:	f1ca 0400 	rsb	r4, sl, #0
 80123f6:	4b7d      	ldr	r3, [pc, #500]	; (80125ec <_dtoa_r+0x5a4>)
 80123f8:	f004 020f 	and.w	r2, r4, #15
 80123fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012404:	f7ee f8d4 	bl	80005b0 <__aeabi_dmul>
 8012408:	2702      	movs	r7, #2
 801240a:	2300      	movs	r3, #0
 801240c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012410:	4e77      	ldr	r6, [pc, #476]	; (80125f0 <_dtoa_r+0x5a8>)
 8012412:	1124      	asrs	r4, r4, #4
 8012414:	2c00      	cmp	r4, #0
 8012416:	f040 8084 	bne.w	8012522 <_dtoa_r+0x4da>
 801241a:	2b00      	cmp	r3, #0
 801241c:	d1d2      	bne.n	80123c4 <_dtoa_r+0x37c>
 801241e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012420:	2b00      	cmp	r3, #0
 8012422:	f000 808b 	beq.w	801253c <_dtoa_r+0x4f4>
 8012426:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801242a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801242e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012432:	2200      	movs	r2, #0
 8012434:	4b6f      	ldr	r3, [pc, #444]	; (80125f4 <_dtoa_r+0x5ac>)
 8012436:	f7ee fb2d 	bl	8000a94 <__aeabi_dcmplt>
 801243a:	2800      	cmp	r0, #0
 801243c:	d07e      	beq.n	801253c <_dtoa_r+0x4f4>
 801243e:	9b08      	ldr	r3, [sp, #32]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d07b      	beq.n	801253c <_dtoa_r+0x4f4>
 8012444:	f1b9 0f00 	cmp.w	r9, #0
 8012448:	dd38      	ble.n	80124bc <_dtoa_r+0x474>
 801244a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801244e:	2200      	movs	r2, #0
 8012450:	4b69      	ldr	r3, [pc, #420]	; (80125f8 <_dtoa_r+0x5b0>)
 8012452:	f7ee f8ad 	bl	80005b0 <__aeabi_dmul>
 8012456:	464c      	mov	r4, r9
 8012458:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801245c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8012460:	3701      	adds	r7, #1
 8012462:	4638      	mov	r0, r7
 8012464:	f7ee f83a 	bl	80004dc <__aeabi_i2d>
 8012468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801246c:	f7ee f8a0 	bl	80005b0 <__aeabi_dmul>
 8012470:	2200      	movs	r2, #0
 8012472:	4b62      	ldr	r3, [pc, #392]	; (80125fc <_dtoa_r+0x5b4>)
 8012474:	f7ed fee6 	bl	8000244 <__adddf3>
 8012478:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801247c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012480:	9611      	str	r6, [sp, #68]	; 0x44
 8012482:	2c00      	cmp	r4, #0
 8012484:	d15d      	bne.n	8012542 <_dtoa_r+0x4fa>
 8012486:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801248a:	2200      	movs	r2, #0
 801248c:	4b5c      	ldr	r3, [pc, #368]	; (8012600 <_dtoa_r+0x5b8>)
 801248e:	f7ed fed7 	bl	8000240 <__aeabi_dsub>
 8012492:	4602      	mov	r2, r0
 8012494:	460b      	mov	r3, r1
 8012496:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801249a:	4633      	mov	r3, r6
 801249c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801249e:	f7ee fb17 	bl	8000ad0 <__aeabi_dcmpgt>
 80124a2:	2800      	cmp	r0, #0
 80124a4:	f040 829c 	bne.w	80129e0 <_dtoa_r+0x998>
 80124a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80124ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80124b2:	f7ee faef 	bl	8000a94 <__aeabi_dcmplt>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	f040 8290 	bne.w	80129dc <_dtoa_r+0x994>
 80124bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80124c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80124c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f2c0 8152 	blt.w	8012770 <_dtoa_r+0x728>
 80124cc:	f1ba 0f0e 	cmp.w	sl, #14
 80124d0:	f300 814e 	bgt.w	8012770 <_dtoa_r+0x728>
 80124d4:	4b45      	ldr	r3, [pc, #276]	; (80125ec <_dtoa_r+0x5a4>)
 80124d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80124da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80124de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80124e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	f280 80db 	bge.w	80126a0 <_dtoa_r+0x658>
 80124ea:	9b08      	ldr	r3, [sp, #32]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f300 80d7 	bgt.w	80126a0 <_dtoa_r+0x658>
 80124f2:	f040 8272 	bne.w	80129da <_dtoa_r+0x992>
 80124f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80124fa:	2200      	movs	r2, #0
 80124fc:	4b40      	ldr	r3, [pc, #256]	; (8012600 <_dtoa_r+0x5b8>)
 80124fe:	f7ee f857 	bl	80005b0 <__aeabi_dmul>
 8012502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012506:	f7ee fad9 	bl	8000abc <__aeabi_dcmpge>
 801250a:	9c08      	ldr	r4, [sp, #32]
 801250c:	4626      	mov	r6, r4
 801250e:	2800      	cmp	r0, #0
 8012510:	f040 8248 	bne.w	80129a4 <_dtoa_r+0x95c>
 8012514:	2331      	movs	r3, #49	; 0x31
 8012516:	9f03      	ldr	r7, [sp, #12]
 8012518:	f10a 0a01 	add.w	sl, sl, #1
 801251c:	f807 3b01 	strb.w	r3, [r7], #1
 8012520:	e244      	b.n	80129ac <_dtoa_r+0x964>
 8012522:	07e2      	lsls	r2, r4, #31
 8012524:	d505      	bpl.n	8012532 <_dtoa_r+0x4ea>
 8012526:	e9d6 2300 	ldrd	r2, r3, [r6]
 801252a:	f7ee f841 	bl	80005b0 <__aeabi_dmul>
 801252e:	2301      	movs	r3, #1
 8012530:	3701      	adds	r7, #1
 8012532:	1064      	asrs	r4, r4, #1
 8012534:	3608      	adds	r6, #8
 8012536:	e76d      	b.n	8012414 <_dtoa_r+0x3cc>
 8012538:	2702      	movs	r7, #2
 801253a:	e770      	b.n	801241e <_dtoa_r+0x3d6>
 801253c:	46d0      	mov	r8, sl
 801253e:	9c08      	ldr	r4, [sp, #32]
 8012540:	e78f      	b.n	8012462 <_dtoa_r+0x41a>
 8012542:	9903      	ldr	r1, [sp, #12]
 8012544:	4b29      	ldr	r3, [pc, #164]	; (80125ec <_dtoa_r+0x5a4>)
 8012546:	4421      	add	r1, r4
 8012548:	9112      	str	r1, [sp, #72]	; 0x48
 801254a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801254c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012550:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012554:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012558:	2900      	cmp	r1, #0
 801255a:	d055      	beq.n	8012608 <_dtoa_r+0x5c0>
 801255c:	2000      	movs	r0, #0
 801255e:	4929      	ldr	r1, [pc, #164]	; (8012604 <_dtoa_r+0x5bc>)
 8012560:	f7ee f950 	bl	8000804 <__aeabi_ddiv>
 8012564:	463b      	mov	r3, r7
 8012566:	4632      	mov	r2, r6
 8012568:	f7ed fe6a 	bl	8000240 <__aeabi_dsub>
 801256c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012570:	9f03      	ldr	r7, [sp, #12]
 8012572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012576:	f7ee facb 	bl	8000b10 <__aeabi_d2iz>
 801257a:	4604      	mov	r4, r0
 801257c:	f7ed ffae 	bl	80004dc <__aeabi_i2d>
 8012580:	4602      	mov	r2, r0
 8012582:	460b      	mov	r3, r1
 8012584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012588:	f7ed fe5a 	bl	8000240 <__aeabi_dsub>
 801258c:	4602      	mov	r2, r0
 801258e:	460b      	mov	r3, r1
 8012590:	3430      	adds	r4, #48	; 0x30
 8012592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801259a:	f807 4b01 	strb.w	r4, [r7], #1
 801259e:	f7ee fa79 	bl	8000a94 <__aeabi_dcmplt>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d174      	bne.n	8012690 <_dtoa_r+0x648>
 80125a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80125aa:	2000      	movs	r0, #0
 80125ac:	4911      	ldr	r1, [pc, #68]	; (80125f4 <_dtoa_r+0x5ac>)
 80125ae:	f7ed fe47 	bl	8000240 <__aeabi_dsub>
 80125b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80125b6:	f7ee fa6d 	bl	8000a94 <__aeabi_dcmplt>
 80125ba:	2800      	cmp	r0, #0
 80125bc:	f040 80b7 	bne.w	801272e <_dtoa_r+0x6e6>
 80125c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80125c2:	429f      	cmp	r7, r3
 80125c4:	f43f af7a 	beq.w	80124bc <_dtoa_r+0x474>
 80125c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80125cc:	2200      	movs	r2, #0
 80125ce:	4b0a      	ldr	r3, [pc, #40]	; (80125f8 <_dtoa_r+0x5b0>)
 80125d0:	f7ed ffee 	bl	80005b0 <__aeabi_dmul>
 80125d4:	2200      	movs	r2, #0
 80125d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80125da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80125de:	4b06      	ldr	r3, [pc, #24]	; (80125f8 <_dtoa_r+0x5b0>)
 80125e0:	f7ed ffe6 	bl	80005b0 <__aeabi_dmul>
 80125e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80125e8:	e7c3      	b.n	8012572 <_dtoa_r+0x52a>
 80125ea:	bf00      	nop
 80125ec:	080223f8 	.word	0x080223f8
 80125f0:	080223d0 	.word	0x080223d0
 80125f4:	3ff00000 	.word	0x3ff00000
 80125f8:	40240000 	.word	0x40240000
 80125fc:	401c0000 	.word	0x401c0000
 8012600:	40140000 	.word	0x40140000
 8012604:	3fe00000 	.word	0x3fe00000
 8012608:	4630      	mov	r0, r6
 801260a:	4639      	mov	r1, r7
 801260c:	f7ed ffd0 	bl	80005b0 <__aeabi_dmul>
 8012610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012612:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012616:	9c03      	ldr	r4, [sp, #12]
 8012618:	9314      	str	r3, [sp, #80]	; 0x50
 801261a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801261e:	f7ee fa77 	bl	8000b10 <__aeabi_d2iz>
 8012622:	9015      	str	r0, [sp, #84]	; 0x54
 8012624:	f7ed ff5a 	bl	80004dc <__aeabi_i2d>
 8012628:	4602      	mov	r2, r0
 801262a:	460b      	mov	r3, r1
 801262c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012630:	f7ed fe06 	bl	8000240 <__aeabi_dsub>
 8012634:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012636:	4606      	mov	r6, r0
 8012638:	3330      	adds	r3, #48	; 0x30
 801263a:	f804 3b01 	strb.w	r3, [r4], #1
 801263e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012640:	460f      	mov	r7, r1
 8012642:	429c      	cmp	r4, r3
 8012644:	f04f 0200 	mov.w	r2, #0
 8012648:	d124      	bne.n	8012694 <_dtoa_r+0x64c>
 801264a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801264e:	4bb0      	ldr	r3, [pc, #704]	; (8012910 <_dtoa_r+0x8c8>)
 8012650:	f7ed fdf8 	bl	8000244 <__adddf3>
 8012654:	4602      	mov	r2, r0
 8012656:	460b      	mov	r3, r1
 8012658:	4630      	mov	r0, r6
 801265a:	4639      	mov	r1, r7
 801265c:	f7ee fa38 	bl	8000ad0 <__aeabi_dcmpgt>
 8012660:	2800      	cmp	r0, #0
 8012662:	d163      	bne.n	801272c <_dtoa_r+0x6e4>
 8012664:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012668:	2000      	movs	r0, #0
 801266a:	49a9      	ldr	r1, [pc, #676]	; (8012910 <_dtoa_r+0x8c8>)
 801266c:	f7ed fde8 	bl	8000240 <__aeabi_dsub>
 8012670:	4602      	mov	r2, r0
 8012672:	460b      	mov	r3, r1
 8012674:	4630      	mov	r0, r6
 8012676:	4639      	mov	r1, r7
 8012678:	f7ee fa0c 	bl	8000a94 <__aeabi_dcmplt>
 801267c:	2800      	cmp	r0, #0
 801267e:	f43f af1d 	beq.w	80124bc <_dtoa_r+0x474>
 8012682:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012684:	1e7b      	subs	r3, r7, #1
 8012686:	9314      	str	r3, [sp, #80]	; 0x50
 8012688:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801268c:	2b30      	cmp	r3, #48	; 0x30
 801268e:	d0f8      	beq.n	8012682 <_dtoa_r+0x63a>
 8012690:	46c2      	mov	sl, r8
 8012692:	e03b      	b.n	801270c <_dtoa_r+0x6c4>
 8012694:	4b9f      	ldr	r3, [pc, #636]	; (8012914 <_dtoa_r+0x8cc>)
 8012696:	f7ed ff8b 	bl	80005b0 <__aeabi_dmul>
 801269a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801269e:	e7bc      	b.n	801261a <_dtoa_r+0x5d2>
 80126a0:	9f03      	ldr	r7, [sp, #12]
 80126a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80126a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126aa:	4640      	mov	r0, r8
 80126ac:	4649      	mov	r1, r9
 80126ae:	f7ee f8a9 	bl	8000804 <__aeabi_ddiv>
 80126b2:	f7ee fa2d 	bl	8000b10 <__aeabi_d2iz>
 80126b6:	4604      	mov	r4, r0
 80126b8:	f7ed ff10 	bl	80004dc <__aeabi_i2d>
 80126bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126c0:	f7ed ff76 	bl	80005b0 <__aeabi_dmul>
 80126c4:	4602      	mov	r2, r0
 80126c6:	460b      	mov	r3, r1
 80126c8:	4640      	mov	r0, r8
 80126ca:	4649      	mov	r1, r9
 80126cc:	f7ed fdb8 	bl	8000240 <__aeabi_dsub>
 80126d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80126d4:	f807 6b01 	strb.w	r6, [r7], #1
 80126d8:	9e03      	ldr	r6, [sp, #12]
 80126da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80126de:	1bbe      	subs	r6, r7, r6
 80126e0:	45b4      	cmp	ip, r6
 80126e2:	4602      	mov	r2, r0
 80126e4:	460b      	mov	r3, r1
 80126e6:	d136      	bne.n	8012756 <_dtoa_r+0x70e>
 80126e8:	f7ed fdac 	bl	8000244 <__adddf3>
 80126ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126f0:	4680      	mov	r8, r0
 80126f2:	4689      	mov	r9, r1
 80126f4:	f7ee f9ec 	bl	8000ad0 <__aeabi_dcmpgt>
 80126f8:	bb58      	cbnz	r0, 8012752 <_dtoa_r+0x70a>
 80126fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126fe:	4640      	mov	r0, r8
 8012700:	4649      	mov	r1, r9
 8012702:	f7ee f9bd 	bl	8000a80 <__aeabi_dcmpeq>
 8012706:	b108      	cbz	r0, 801270c <_dtoa_r+0x6c4>
 8012708:	07e1      	lsls	r1, r4, #31
 801270a:	d422      	bmi.n	8012752 <_dtoa_r+0x70a>
 801270c:	4628      	mov	r0, r5
 801270e:	4659      	mov	r1, fp
 8012710:	f000 faf4 	bl	8012cfc <_Bfree>
 8012714:	2300      	movs	r3, #0
 8012716:	703b      	strb	r3, [r7, #0]
 8012718:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801271a:	f10a 0001 	add.w	r0, sl, #1
 801271e:	6018      	str	r0, [r3, #0]
 8012720:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012722:	2b00      	cmp	r3, #0
 8012724:	f43f acde 	beq.w	80120e4 <_dtoa_r+0x9c>
 8012728:	601f      	str	r7, [r3, #0]
 801272a:	e4db      	b.n	80120e4 <_dtoa_r+0x9c>
 801272c:	4627      	mov	r7, r4
 801272e:	463b      	mov	r3, r7
 8012730:	461f      	mov	r7, r3
 8012732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012736:	2a39      	cmp	r2, #57	; 0x39
 8012738:	d107      	bne.n	801274a <_dtoa_r+0x702>
 801273a:	9a03      	ldr	r2, [sp, #12]
 801273c:	429a      	cmp	r2, r3
 801273e:	d1f7      	bne.n	8012730 <_dtoa_r+0x6e8>
 8012740:	2230      	movs	r2, #48	; 0x30
 8012742:	9903      	ldr	r1, [sp, #12]
 8012744:	f108 0801 	add.w	r8, r8, #1
 8012748:	700a      	strb	r2, [r1, #0]
 801274a:	781a      	ldrb	r2, [r3, #0]
 801274c:	3201      	adds	r2, #1
 801274e:	701a      	strb	r2, [r3, #0]
 8012750:	e79e      	b.n	8012690 <_dtoa_r+0x648>
 8012752:	46d0      	mov	r8, sl
 8012754:	e7eb      	b.n	801272e <_dtoa_r+0x6e6>
 8012756:	2200      	movs	r2, #0
 8012758:	4b6e      	ldr	r3, [pc, #440]	; (8012914 <_dtoa_r+0x8cc>)
 801275a:	f7ed ff29 	bl	80005b0 <__aeabi_dmul>
 801275e:	2200      	movs	r2, #0
 8012760:	2300      	movs	r3, #0
 8012762:	4680      	mov	r8, r0
 8012764:	4689      	mov	r9, r1
 8012766:	f7ee f98b 	bl	8000a80 <__aeabi_dcmpeq>
 801276a:	2800      	cmp	r0, #0
 801276c:	d09b      	beq.n	80126a6 <_dtoa_r+0x65e>
 801276e:	e7cd      	b.n	801270c <_dtoa_r+0x6c4>
 8012770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012772:	2a00      	cmp	r2, #0
 8012774:	f000 80d0 	beq.w	8012918 <_dtoa_r+0x8d0>
 8012778:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801277a:	2a01      	cmp	r2, #1
 801277c:	f300 80ae 	bgt.w	80128dc <_dtoa_r+0x894>
 8012780:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012782:	2a00      	cmp	r2, #0
 8012784:	f000 80a6 	beq.w	80128d4 <_dtoa_r+0x88c>
 8012788:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801278c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801278e:	9f06      	ldr	r7, [sp, #24]
 8012790:	9a06      	ldr	r2, [sp, #24]
 8012792:	2101      	movs	r1, #1
 8012794:	441a      	add	r2, r3
 8012796:	9206      	str	r2, [sp, #24]
 8012798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801279a:	4628      	mov	r0, r5
 801279c:	441a      	add	r2, r3
 801279e:	9209      	str	r2, [sp, #36]	; 0x24
 80127a0:	f000 fb62 	bl	8012e68 <__i2b>
 80127a4:	4606      	mov	r6, r0
 80127a6:	2f00      	cmp	r7, #0
 80127a8:	dd0c      	ble.n	80127c4 <_dtoa_r+0x77c>
 80127aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	dd09      	ble.n	80127c4 <_dtoa_r+0x77c>
 80127b0:	42bb      	cmp	r3, r7
 80127b2:	bfa8      	it	ge
 80127b4:	463b      	movge	r3, r7
 80127b6:	9a06      	ldr	r2, [sp, #24]
 80127b8:	1aff      	subs	r7, r7, r3
 80127ba:	1ad2      	subs	r2, r2, r3
 80127bc:	9206      	str	r2, [sp, #24]
 80127be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127c0:	1ad3      	subs	r3, r2, r3
 80127c2:	9309      	str	r3, [sp, #36]	; 0x24
 80127c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127c6:	b1f3      	cbz	r3, 8012806 <_dtoa_r+0x7be>
 80127c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	f000 80a8 	beq.w	8012920 <_dtoa_r+0x8d8>
 80127d0:	2c00      	cmp	r4, #0
 80127d2:	dd10      	ble.n	80127f6 <_dtoa_r+0x7ae>
 80127d4:	4631      	mov	r1, r6
 80127d6:	4622      	mov	r2, r4
 80127d8:	4628      	mov	r0, r5
 80127da:	f000 fc03 	bl	8012fe4 <__pow5mult>
 80127de:	465a      	mov	r2, fp
 80127e0:	4601      	mov	r1, r0
 80127e2:	4606      	mov	r6, r0
 80127e4:	4628      	mov	r0, r5
 80127e6:	f000 fb55 	bl	8012e94 <__multiply>
 80127ea:	4680      	mov	r8, r0
 80127ec:	4659      	mov	r1, fp
 80127ee:	4628      	mov	r0, r5
 80127f0:	f000 fa84 	bl	8012cfc <_Bfree>
 80127f4:	46c3      	mov	fp, r8
 80127f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127f8:	1b1a      	subs	r2, r3, r4
 80127fa:	d004      	beq.n	8012806 <_dtoa_r+0x7be>
 80127fc:	4659      	mov	r1, fp
 80127fe:	4628      	mov	r0, r5
 8012800:	f000 fbf0 	bl	8012fe4 <__pow5mult>
 8012804:	4683      	mov	fp, r0
 8012806:	2101      	movs	r1, #1
 8012808:	4628      	mov	r0, r5
 801280a:	f000 fb2d 	bl	8012e68 <__i2b>
 801280e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012810:	4604      	mov	r4, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	f340 8086 	ble.w	8012924 <_dtoa_r+0x8dc>
 8012818:	461a      	mov	r2, r3
 801281a:	4601      	mov	r1, r0
 801281c:	4628      	mov	r0, r5
 801281e:	f000 fbe1 	bl	8012fe4 <__pow5mult>
 8012822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012824:	4604      	mov	r4, r0
 8012826:	2b01      	cmp	r3, #1
 8012828:	dd7f      	ble.n	801292a <_dtoa_r+0x8e2>
 801282a:	f04f 0800 	mov.w	r8, #0
 801282e:	6923      	ldr	r3, [r4, #16]
 8012830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012834:	6918      	ldr	r0, [r3, #16]
 8012836:	f000 fac9 	bl	8012dcc <__hi0bits>
 801283a:	f1c0 0020 	rsb	r0, r0, #32
 801283e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012840:	4418      	add	r0, r3
 8012842:	f010 001f 	ands.w	r0, r0, #31
 8012846:	f000 8092 	beq.w	801296e <_dtoa_r+0x926>
 801284a:	f1c0 0320 	rsb	r3, r0, #32
 801284e:	2b04      	cmp	r3, #4
 8012850:	f340 808a 	ble.w	8012968 <_dtoa_r+0x920>
 8012854:	f1c0 001c 	rsb	r0, r0, #28
 8012858:	9b06      	ldr	r3, [sp, #24]
 801285a:	4407      	add	r7, r0
 801285c:	4403      	add	r3, r0
 801285e:	9306      	str	r3, [sp, #24]
 8012860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012862:	4403      	add	r3, r0
 8012864:	9309      	str	r3, [sp, #36]	; 0x24
 8012866:	9b06      	ldr	r3, [sp, #24]
 8012868:	2b00      	cmp	r3, #0
 801286a:	dd05      	ble.n	8012878 <_dtoa_r+0x830>
 801286c:	4659      	mov	r1, fp
 801286e:	461a      	mov	r2, r3
 8012870:	4628      	mov	r0, r5
 8012872:	f000 fc11 	bl	8013098 <__lshift>
 8012876:	4683      	mov	fp, r0
 8012878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801287a:	2b00      	cmp	r3, #0
 801287c:	dd05      	ble.n	801288a <_dtoa_r+0x842>
 801287e:	4621      	mov	r1, r4
 8012880:	461a      	mov	r2, r3
 8012882:	4628      	mov	r0, r5
 8012884:	f000 fc08 	bl	8013098 <__lshift>
 8012888:	4604      	mov	r4, r0
 801288a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801288c:	2b00      	cmp	r3, #0
 801288e:	d070      	beq.n	8012972 <_dtoa_r+0x92a>
 8012890:	4621      	mov	r1, r4
 8012892:	4658      	mov	r0, fp
 8012894:	f000 fc70 	bl	8013178 <__mcmp>
 8012898:	2800      	cmp	r0, #0
 801289a:	da6a      	bge.n	8012972 <_dtoa_r+0x92a>
 801289c:	2300      	movs	r3, #0
 801289e:	4659      	mov	r1, fp
 80128a0:	220a      	movs	r2, #10
 80128a2:	4628      	mov	r0, r5
 80128a4:	f000 fa4c 	bl	8012d40 <__multadd>
 80128a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128aa:	4683      	mov	fp, r0
 80128ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f000 8194 	beq.w	8012bde <_dtoa_r+0xb96>
 80128b6:	4631      	mov	r1, r6
 80128b8:	2300      	movs	r3, #0
 80128ba:	220a      	movs	r2, #10
 80128bc:	4628      	mov	r0, r5
 80128be:	f000 fa3f 	bl	8012d40 <__multadd>
 80128c2:	f1b9 0f00 	cmp.w	r9, #0
 80128c6:	4606      	mov	r6, r0
 80128c8:	f300 8093 	bgt.w	80129f2 <_dtoa_r+0x9aa>
 80128cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80128ce:	2b02      	cmp	r3, #2
 80128d0:	dc57      	bgt.n	8012982 <_dtoa_r+0x93a>
 80128d2:	e08e      	b.n	80129f2 <_dtoa_r+0x9aa>
 80128d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80128d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80128da:	e757      	b.n	801278c <_dtoa_r+0x744>
 80128dc:	9b08      	ldr	r3, [sp, #32]
 80128de:	1e5c      	subs	r4, r3, #1
 80128e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128e2:	42a3      	cmp	r3, r4
 80128e4:	bfb7      	itett	lt
 80128e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80128e8:	1b1c      	subge	r4, r3, r4
 80128ea:	1ae2      	sublt	r2, r4, r3
 80128ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80128ee:	bfbe      	ittt	lt
 80128f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80128f2:	189b      	addlt	r3, r3, r2
 80128f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80128f6:	9b08      	ldr	r3, [sp, #32]
 80128f8:	bfb8      	it	lt
 80128fa:	2400      	movlt	r4, #0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	bfbb      	ittet	lt
 8012900:	9b06      	ldrlt	r3, [sp, #24]
 8012902:	9a08      	ldrlt	r2, [sp, #32]
 8012904:	9f06      	ldrge	r7, [sp, #24]
 8012906:	1a9f      	sublt	r7, r3, r2
 8012908:	bfac      	ite	ge
 801290a:	9b08      	ldrge	r3, [sp, #32]
 801290c:	2300      	movlt	r3, #0
 801290e:	e73f      	b.n	8012790 <_dtoa_r+0x748>
 8012910:	3fe00000 	.word	0x3fe00000
 8012914:	40240000 	.word	0x40240000
 8012918:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801291a:	9f06      	ldr	r7, [sp, #24]
 801291c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801291e:	e742      	b.n	80127a6 <_dtoa_r+0x75e>
 8012920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012922:	e76b      	b.n	80127fc <_dtoa_r+0x7b4>
 8012924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012926:	2b01      	cmp	r3, #1
 8012928:	dc19      	bgt.n	801295e <_dtoa_r+0x916>
 801292a:	9b04      	ldr	r3, [sp, #16]
 801292c:	b9bb      	cbnz	r3, 801295e <_dtoa_r+0x916>
 801292e:	9b05      	ldr	r3, [sp, #20]
 8012930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012934:	b99b      	cbnz	r3, 801295e <_dtoa_r+0x916>
 8012936:	9b05      	ldr	r3, [sp, #20]
 8012938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801293c:	0d1b      	lsrs	r3, r3, #20
 801293e:	051b      	lsls	r3, r3, #20
 8012940:	b183      	cbz	r3, 8012964 <_dtoa_r+0x91c>
 8012942:	f04f 0801 	mov.w	r8, #1
 8012946:	9b06      	ldr	r3, [sp, #24]
 8012948:	3301      	adds	r3, #1
 801294a:	9306      	str	r3, [sp, #24]
 801294c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801294e:	3301      	adds	r3, #1
 8012950:	9309      	str	r3, [sp, #36]	; 0x24
 8012952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012954:	2b00      	cmp	r3, #0
 8012956:	f47f af6a 	bne.w	801282e <_dtoa_r+0x7e6>
 801295a:	2001      	movs	r0, #1
 801295c:	e76f      	b.n	801283e <_dtoa_r+0x7f6>
 801295e:	f04f 0800 	mov.w	r8, #0
 8012962:	e7f6      	b.n	8012952 <_dtoa_r+0x90a>
 8012964:	4698      	mov	r8, r3
 8012966:	e7f4      	b.n	8012952 <_dtoa_r+0x90a>
 8012968:	f43f af7d 	beq.w	8012866 <_dtoa_r+0x81e>
 801296c:	4618      	mov	r0, r3
 801296e:	301c      	adds	r0, #28
 8012970:	e772      	b.n	8012858 <_dtoa_r+0x810>
 8012972:	9b08      	ldr	r3, [sp, #32]
 8012974:	2b00      	cmp	r3, #0
 8012976:	dc36      	bgt.n	80129e6 <_dtoa_r+0x99e>
 8012978:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801297a:	2b02      	cmp	r3, #2
 801297c:	dd33      	ble.n	80129e6 <_dtoa_r+0x99e>
 801297e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012982:	f1b9 0f00 	cmp.w	r9, #0
 8012986:	d10d      	bne.n	80129a4 <_dtoa_r+0x95c>
 8012988:	4621      	mov	r1, r4
 801298a:	464b      	mov	r3, r9
 801298c:	2205      	movs	r2, #5
 801298e:	4628      	mov	r0, r5
 8012990:	f000 f9d6 	bl	8012d40 <__multadd>
 8012994:	4601      	mov	r1, r0
 8012996:	4604      	mov	r4, r0
 8012998:	4658      	mov	r0, fp
 801299a:	f000 fbed 	bl	8013178 <__mcmp>
 801299e:	2800      	cmp	r0, #0
 80129a0:	f73f adb8 	bgt.w	8012514 <_dtoa_r+0x4cc>
 80129a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80129a6:	9f03      	ldr	r7, [sp, #12]
 80129a8:	ea6f 0a03 	mvn.w	sl, r3
 80129ac:	f04f 0800 	mov.w	r8, #0
 80129b0:	4621      	mov	r1, r4
 80129b2:	4628      	mov	r0, r5
 80129b4:	f000 f9a2 	bl	8012cfc <_Bfree>
 80129b8:	2e00      	cmp	r6, #0
 80129ba:	f43f aea7 	beq.w	801270c <_dtoa_r+0x6c4>
 80129be:	f1b8 0f00 	cmp.w	r8, #0
 80129c2:	d005      	beq.n	80129d0 <_dtoa_r+0x988>
 80129c4:	45b0      	cmp	r8, r6
 80129c6:	d003      	beq.n	80129d0 <_dtoa_r+0x988>
 80129c8:	4641      	mov	r1, r8
 80129ca:	4628      	mov	r0, r5
 80129cc:	f000 f996 	bl	8012cfc <_Bfree>
 80129d0:	4631      	mov	r1, r6
 80129d2:	4628      	mov	r0, r5
 80129d4:	f000 f992 	bl	8012cfc <_Bfree>
 80129d8:	e698      	b.n	801270c <_dtoa_r+0x6c4>
 80129da:	2400      	movs	r4, #0
 80129dc:	4626      	mov	r6, r4
 80129de:	e7e1      	b.n	80129a4 <_dtoa_r+0x95c>
 80129e0:	46c2      	mov	sl, r8
 80129e2:	4626      	mov	r6, r4
 80129e4:	e596      	b.n	8012514 <_dtoa_r+0x4cc>
 80129e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	f000 80fd 	beq.w	8012bec <_dtoa_r+0xba4>
 80129f2:	2f00      	cmp	r7, #0
 80129f4:	dd05      	ble.n	8012a02 <_dtoa_r+0x9ba>
 80129f6:	4631      	mov	r1, r6
 80129f8:	463a      	mov	r2, r7
 80129fa:	4628      	mov	r0, r5
 80129fc:	f000 fb4c 	bl	8013098 <__lshift>
 8012a00:	4606      	mov	r6, r0
 8012a02:	f1b8 0f00 	cmp.w	r8, #0
 8012a06:	d05c      	beq.n	8012ac2 <_dtoa_r+0xa7a>
 8012a08:	4628      	mov	r0, r5
 8012a0a:	6871      	ldr	r1, [r6, #4]
 8012a0c:	f000 f936 	bl	8012c7c <_Balloc>
 8012a10:	4607      	mov	r7, r0
 8012a12:	b928      	cbnz	r0, 8012a20 <_dtoa_r+0x9d8>
 8012a14:	4602      	mov	r2, r0
 8012a16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012a1a:	4b7f      	ldr	r3, [pc, #508]	; (8012c18 <_dtoa_r+0xbd0>)
 8012a1c:	f7ff bb28 	b.w	8012070 <_dtoa_r+0x28>
 8012a20:	6932      	ldr	r2, [r6, #16]
 8012a22:	f106 010c 	add.w	r1, r6, #12
 8012a26:	3202      	adds	r2, #2
 8012a28:	0092      	lsls	r2, r2, #2
 8012a2a:	300c      	adds	r0, #12
 8012a2c:	f000 f90c 	bl	8012c48 <memcpy>
 8012a30:	2201      	movs	r2, #1
 8012a32:	4639      	mov	r1, r7
 8012a34:	4628      	mov	r0, r5
 8012a36:	f000 fb2f 	bl	8013098 <__lshift>
 8012a3a:	46b0      	mov	r8, r6
 8012a3c:	4606      	mov	r6, r0
 8012a3e:	9b03      	ldr	r3, [sp, #12]
 8012a40:	3301      	adds	r3, #1
 8012a42:	9308      	str	r3, [sp, #32]
 8012a44:	9b03      	ldr	r3, [sp, #12]
 8012a46:	444b      	add	r3, r9
 8012a48:	930a      	str	r3, [sp, #40]	; 0x28
 8012a4a:	9b04      	ldr	r3, [sp, #16]
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	9309      	str	r3, [sp, #36]	; 0x24
 8012a52:	9b08      	ldr	r3, [sp, #32]
 8012a54:	4621      	mov	r1, r4
 8012a56:	3b01      	subs	r3, #1
 8012a58:	4658      	mov	r0, fp
 8012a5a:	9304      	str	r3, [sp, #16]
 8012a5c:	f7ff fa68 	bl	8011f30 <quorem>
 8012a60:	4603      	mov	r3, r0
 8012a62:	4641      	mov	r1, r8
 8012a64:	3330      	adds	r3, #48	; 0x30
 8012a66:	9006      	str	r0, [sp, #24]
 8012a68:	4658      	mov	r0, fp
 8012a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a6c:	f000 fb84 	bl	8013178 <__mcmp>
 8012a70:	4632      	mov	r2, r6
 8012a72:	4681      	mov	r9, r0
 8012a74:	4621      	mov	r1, r4
 8012a76:	4628      	mov	r0, r5
 8012a78:	f000 fb9a 	bl	80131b0 <__mdiff>
 8012a7c:	68c2      	ldr	r2, [r0, #12]
 8012a7e:	4607      	mov	r7, r0
 8012a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a82:	bb02      	cbnz	r2, 8012ac6 <_dtoa_r+0xa7e>
 8012a84:	4601      	mov	r1, r0
 8012a86:	4658      	mov	r0, fp
 8012a88:	f000 fb76 	bl	8013178 <__mcmp>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a90:	4639      	mov	r1, r7
 8012a92:	4628      	mov	r0, r5
 8012a94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8012a98:	f000 f930 	bl	8012cfc <_Bfree>
 8012a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012aa0:	9f08      	ldr	r7, [sp, #32]
 8012aa2:	ea43 0102 	orr.w	r1, r3, r2
 8012aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aa8:	430b      	orrs	r3, r1
 8012aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012aac:	d10d      	bne.n	8012aca <_dtoa_r+0xa82>
 8012aae:	2b39      	cmp	r3, #57	; 0x39
 8012ab0:	d029      	beq.n	8012b06 <_dtoa_r+0xabe>
 8012ab2:	f1b9 0f00 	cmp.w	r9, #0
 8012ab6:	dd01      	ble.n	8012abc <_dtoa_r+0xa74>
 8012ab8:	9b06      	ldr	r3, [sp, #24]
 8012aba:	3331      	adds	r3, #49	; 0x31
 8012abc:	9a04      	ldr	r2, [sp, #16]
 8012abe:	7013      	strb	r3, [r2, #0]
 8012ac0:	e776      	b.n	80129b0 <_dtoa_r+0x968>
 8012ac2:	4630      	mov	r0, r6
 8012ac4:	e7b9      	b.n	8012a3a <_dtoa_r+0x9f2>
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	e7e2      	b.n	8012a90 <_dtoa_r+0xa48>
 8012aca:	f1b9 0f00 	cmp.w	r9, #0
 8012ace:	db06      	blt.n	8012ade <_dtoa_r+0xa96>
 8012ad0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012ad2:	ea41 0909 	orr.w	r9, r1, r9
 8012ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ad8:	ea59 0101 	orrs.w	r1, r9, r1
 8012adc:	d120      	bne.n	8012b20 <_dtoa_r+0xad8>
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	ddec      	ble.n	8012abc <_dtoa_r+0xa74>
 8012ae2:	4659      	mov	r1, fp
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	9308      	str	r3, [sp, #32]
 8012aea:	f000 fad5 	bl	8013098 <__lshift>
 8012aee:	4621      	mov	r1, r4
 8012af0:	4683      	mov	fp, r0
 8012af2:	f000 fb41 	bl	8013178 <__mcmp>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	9b08      	ldr	r3, [sp, #32]
 8012afa:	dc02      	bgt.n	8012b02 <_dtoa_r+0xaba>
 8012afc:	d1de      	bne.n	8012abc <_dtoa_r+0xa74>
 8012afe:	07da      	lsls	r2, r3, #31
 8012b00:	d5dc      	bpl.n	8012abc <_dtoa_r+0xa74>
 8012b02:	2b39      	cmp	r3, #57	; 0x39
 8012b04:	d1d8      	bne.n	8012ab8 <_dtoa_r+0xa70>
 8012b06:	2339      	movs	r3, #57	; 0x39
 8012b08:	9a04      	ldr	r2, [sp, #16]
 8012b0a:	7013      	strb	r3, [r2, #0]
 8012b0c:	463b      	mov	r3, r7
 8012b0e:	461f      	mov	r7, r3
 8012b10:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8012b14:	3b01      	subs	r3, #1
 8012b16:	2a39      	cmp	r2, #57	; 0x39
 8012b18:	d050      	beq.n	8012bbc <_dtoa_r+0xb74>
 8012b1a:	3201      	adds	r2, #1
 8012b1c:	701a      	strb	r2, [r3, #0]
 8012b1e:	e747      	b.n	80129b0 <_dtoa_r+0x968>
 8012b20:	2a00      	cmp	r2, #0
 8012b22:	dd03      	ble.n	8012b2c <_dtoa_r+0xae4>
 8012b24:	2b39      	cmp	r3, #57	; 0x39
 8012b26:	d0ee      	beq.n	8012b06 <_dtoa_r+0xabe>
 8012b28:	3301      	adds	r3, #1
 8012b2a:	e7c7      	b.n	8012abc <_dtoa_r+0xa74>
 8012b2c:	9a08      	ldr	r2, [sp, #32]
 8012b2e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012b30:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012b34:	428a      	cmp	r2, r1
 8012b36:	d02a      	beq.n	8012b8e <_dtoa_r+0xb46>
 8012b38:	4659      	mov	r1, fp
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	220a      	movs	r2, #10
 8012b3e:	4628      	mov	r0, r5
 8012b40:	f000 f8fe 	bl	8012d40 <__multadd>
 8012b44:	45b0      	cmp	r8, r6
 8012b46:	4683      	mov	fp, r0
 8012b48:	f04f 0300 	mov.w	r3, #0
 8012b4c:	f04f 020a 	mov.w	r2, #10
 8012b50:	4641      	mov	r1, r8
 8012b52:	4628      	mov	r0, r5
 8012b54:	d107      	bne.n	8012b66 <_dtoa_r+0xb1e>
 8012b56:	f000 f8f3 	bl	8012d40 <__multadd>
 8012b5a:	4680      	mov	r8, r0
 8012b5c:	4606      	mov	r6, r0
 8012b5e:	9b08      	ldr	r3, [sp, #32]
 8012b60:	3301      	adds	r3, #1
 8012b62:	9308      	str	r3, [sp, #32]
 8012b64:	e775      	b.n	8012a52 <_dtoa_r+0xa0a>
 8012b66:	f000 f8eb 	bl	8012d40 <__multadd>
 8012b6a:	4631      	mov	r1, r6
 8012b6c:	4680      	mov	r8, r0
 8012b6e:	2300      	movs	r3, #0
 8012b70:	220a      	movs	r2, #10
 8012b72:	4628      	mov	r0, r5
 8012b74:	f000 f8e4 	bl	8012d40 <__multadd>
 8012b78:	4606      	mov	r6, r0
 8012b7a:	e7f0      	b.n	8012b5e <_dtoa_r+0xb16>
 8012b7c:	f1b9 0f00 	cmp.w	r9, #0
 8012b80:	bfcc      	ite	gt
 8012b82:	464f      	movgt	r7, r9
 8012b84:	2701      	movle	r7, #1
 8012b86:	f04f 0800 	mov.w	r8, #0
 8012b8a:	9a03      	ldr	r2, [sp, #12]
 8012b8c:	4417      	add	r7, r2
 8012b8e:	4659      	mov	r1, fp
 8012b90:	2201      	movs	r2, #1
 8012b92:	4628      	mov	r0, r5
 8012b94:	9308      	str	r3, [sp, #32]
 8012b96:	f000 fa7f 	bl	8013098 <__lshift>
 8012b9a:	4621      	mov	r1, r4
 8012b9c:	4683      	mov	fp, r0
 8012b9e:	f000 faeb 	bl	8013178 <__mcmp>
 8012ba2:	2800      	cmp	r0, #0
 8012ba4:	dcb2      	bgt.n	8012b0c <_dtoa_r+0xac4>
 8012ba6:	d102      	bne.n	8012bae <_dtoa_r+0xb66>
 8012ba8:	9b08      	ldr	r3, [sp, #32]
 8012baa:	07db      	lsls	r3, r3, #31
 8012bac:	d4ae      	bmi.n	8012b0c <_dtoa_r+0xac4>
 8012bae:	463b      	mov	r3, r7
 8012bb0:	461f      	mov	r7, r3
 8012bb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bb6:	2a30      	cmp	r2, #48	; 0x30
 8012bb8:	d0fa      	beq.n	8012bb0 <_dtoa_r+0xb68>
 8012bba:	e6f9      	b.n	80129b0 <_dtoa_r+0x968>
 8012bbc:	9a03      	ldr	r2, [sp, #12]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d1a5      	bne.n	8012b0e <_dtoa_r+0xac6>
 8012bc2:	2331      	movs	r3, #49	; 0x31
 8012bc4:	f10a 0a01 	add.w	sl, sl, #1
 8012bc8:	e779      	b.n	8012abe <_dtoa_r+0xa76>
 8012bca:	4b14      	ldr	r3, [pc, #80]	; (8012c1c <_dtoa_r+0xbd4>)
 8012bcc:	f7ff baa8 	b.w	8012120 <_dtoa_r+0xd8>
 8012bd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	f47f aa81 	bne.w	80120da <_dtoa_r+0x92>
 8012bd8:	4b11      	ldr	r3, [pc, #68]	; (8012c20 <_dtoa_r+0xbd8>)
 8012bda:	f7ff baa1 	b.w	8012120 <_dtoa_r+0xd8>
 8012bde:	f1b9 0f00 	cmp.w	r9, #0
 8012be2:	dc03      	bgt.n	8012bec <_dtoa_r+0xba4>
 8012be4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012be6:	2b02      	cmp	r3, #2
 8012be8:	f73f aecb 	bgt.w	8012982 <_dtoa_r+0x93a>
 8012bec:	9f03      	ldr	r7, [sp, #12]
 8012bee:	4621      	mov	r1, r4
 8012bf0:	4658      	mov	r0, fp
 8012bf2:	f7ff f99d 	bl	8011f30 <quorem>
 8012bf6:	9a03      	ldr	r2, [sp, #12]
 8012bf8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012bfc:	f807 3b01 	strb.w	r3, [r7], #1
 8012c00:	1aba      	subs	r2, r7, r2
 8012c02:	4591      	cmp	r9, r2
 8012c04:	ddba      	ble.n	8012b7c <_dtoa_r+0xb34>
 8012c06:	4659      	mov	r1, fp
 8012c08:	2300      	movs	r3, #0
 8012c0a:	220a      	movs	r2, #10
 8012c0c:	4628      	mov	r0, r5
 8012c0e:	f000 f897 	bl	8012d40 <__multadd>
 8012c12:	4683      	mov	fp, r0
 8012c14:	e7eb      	b.n	8012bee <_dtoa_r+0xba6>
 8012c16:	bf00      	nop
 8012c18:	0802235f 	.word	0x0802235f
 8012c1c:	080222bc 	.word	0x080222bc
 8012c20:	080222e0 	.word	0x080222e0

08012c24 <_localeconv_r>:
 8012c24:	4800      	ldr	r0, [pc, #0]	; (8012c28 <_localeconv_r+0x4>)
 8012c26:	4770      	bx	lr
 8012c28:	2000b858 	.word	0x2000b858

08012c2c <memchr>:
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	b510      	push	{r4, lr}
 8012c30:	b2c9      	uxtb	r1, r1
 8012c32:	4402      	add	r2, r0
 8012c34:	4293      	cmp	r3, r2
 8012c36:	4618      	mov	r0, r3
 8012c38:	d101      	bne.n	8012c3e <memchr+0x12>
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	e003      	b.n	8012c46 <memchr+0x1a>
 8012c3e:	7804      	ldrb	r4, [r0, #0]
 8012c40:	3301      	adds	r3, #1
 8012c42:	428c      	cmp	r4, r1
 8012c44:	d1f6      	bne.n	8012c34 <memchr+0x8>
 8012c46:	bd10      	pop	{r4, pc}

08012c48 <memcpy>:
 8012c48:	440a      	add	r2, r1
 8012c4a:	4291      	cmp	r1, r2
 8012c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c50:	d100      	bne.n	8012c54 <memcpy+0xc>
 8012c52:	4770      	bx	lr
 8012c54:	b510      	push	{r4, lr}
 8012c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c5a:	4291      	cmp	r1, r2
 8012c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c60:	d1f9      	bne.n	8012c56 <memcpy+0xe>
 8012c62:	bd10      	pop	{r4, pc}

08012c64 <__malloc_lock>:
 8012c64:	4801      	ldr	r0, [pc, #4]	; (8012c6c <__malloc_lock+0x8>)
 8012c66:	f000 bd2c 	b.w	80136c2 <__retarget_lock_acquire_recursive>
 8012c6a:	bf00      	nop
 8012c6c:	2000cbf4 	.word	0x2000cbf4

08012c70 <__malloc_unlock>:
 8012c70:	4801      	ldr	r0, [pc, #4]	; (8012c78 <__malloc_unlock+0x8>)
 8012c72:	f000 bd27 	b.w	80136c4 <__retarget_lock_release_recursive>
 8012c76:	bf00      	nop
 8012c78:	2000cbf4 	.word	0x2000cbf4

08012c7c <_Balloc>:
 8012c7c:	b570      	push	{r4, r5, r6, lr}
 8012c7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012c80:	4604      	mov	r4, r0
 8012c82:	460d      	mov	r5, r1
 8012c84:	b976      	cbnz	r6, 8012ca4 <_Balloc+0x28>
 8012c86:	2010      	movs	r0, #16
 8012c88:	f7fe fbb4 	bl	80113f4 <malloc>
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	6260      	str	r0, [r4, #36]	; 0x24
 8012c90:	b920      	cbnz	r0, 8012c9c <_Balloc+0x20>
 8012c92:	2166      	movs	r1, #102	; 0x66
 8012c94:	4b17      	ldr	r3, [pc, #92]	; (8012cf4 <_Balloc+0x78>)
 8012c96:	4818      	ldr	r0, [pc, #96]	; (8012cf8 <_Balloc+0x7c>)
 8012c98:	f000 fce2 	bl	8013660 <__assert_func>
 8012c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ca0:	6006      	str	r6, [r0, #0]
 8012ca2:	60c6      	str	r6, [r0, #12]
 8012ca4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012ca6:	68f3      	ldr	r3, [r6, #12]
 8012ca8:	b183      	cbz	r3, 8012ccc <_Balloc+0x50>
 8012caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cac:	68db      	ldr	r3, [r3, #12]
 8012cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cb2:	b9b8      	cbnz	r0, 8012ce4 <_Balloc+0x68>
 8012cb4:	2101      	movs	r1, #1
 8012cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8012cba:	1d72      	adds	r2, r6, #5
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	0092      	lsls	r2, r2, #2
 8012cc0:	f000 fb5e 	bl	8013380 <_calloc_r>
 8012cc4:	b160      	cbz	r0, 8012ce0 <_Balloc+0x64>
 8012cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012cca:	e00e      	b.n	8012cea <_Balloc+0x6e>
 8012ccc:	2221      	movs	r2, #33	; 0x21
 8012cce:	2104      	movs	r1, #4
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f000 fb55 	bl	8013380 <_calloc_r>
 8012cd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cd8:	60f0      	str	r0, [r6, #12]
 8012cda:	68db      	ldr	r3, [r3, #12]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d1e4      	bne.n	8012caa <_Balloc+0x2e>
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	bd70      	pop	{r4, r5, r6, pc}
 8012ce4:	6802      	ldr	r2, [r0, #0]
 8012ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012cea:	2300      	movs	r3, #0
 8012cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012cf0:	e7f7      	b.n	8012ce2 <_Balloc+0x66>
 8012cf2:	bf00      	nop
 8012cf4:	080222ed 	.word	0x080222ed
 8012cf8:	08022370 	.word	0x08022370

08012cfc <_Bfree>:
 8012cfc:	b570      	push	{r4, r5, r6, lr}
 8012cfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d00:	4605      	mov	r5, r0
 8012d02:	460c      	mov	r4, r1
 8012d04:	b976      	cbnz	r6, 8012d24 <_Bfree+0x28>
 8012d06:	2010      	movs	r0, #16
 8012d08:	f7fe fb74 	bl	80113f4 <malloc>
 8012d0c:	4602      	mov	r2, r0
 8012d0e:	6268      	str	r0, [r5, #36]	; 0x24
 8012d10:	b920      	cbnz	r0, 8012d1c <_Bfree+0x20>
 8012d12:	218a      	movs	r1, #138	; 0x8a
 8012d14:	4b08      	ldr	r3, [pc, #32]	; (8012d38 <_Bfree+0x3c>)
 8012d16:	4809      	ldr	r0, [pc, #36]	; (8012d3c <_Bfree+0x40>)
 8012d18:	f000 fca2 	bl	8013660 <__assert_func>
 8012d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d20:	6006      	str	r6, [r0, #0]
 8012d22:	60c6      	str	r6, [r0, #12]
 8012d24:	b13c      	cbz	r4, 8012d36 <_Bfree+0x3a>
 8012d26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d28:	6862      	ldr	r2, [r4, #4]
 8012d2a:	68db      	ldr	r3, [r3, #12]
 8012d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d30:	6021      	str	r1, [r4, #0]
 8012d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d36:	bd70      	pop	{r4, r5, r6, pc}
 8012d38:	080222ed 	.word	0x080222ed
 8012d3c:	08022370 	.word	0x08022370

08012d40 <__multadd>:
 8012d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d44:	4607      	mov	r7, r0
 8012d46:	460c      	mov	r4, r1
 8012d48:	461e      	mov	r6, r3
 8012d4a:	2000      	movs	r0, #0
 8012d4c:	690d      	ldr	r5, [r1, #16]
 8012d4e:	f101 0c14 	add.w	ip, r1, #20
 8012d52:	f8dc 3000 	ldr.w	r3, [ip]
 8012d56:	3001      	adds	r0, #1
 8012d58:	b299      	uxth	r1, r3
 8012d5a:	fb02 6101 	mla	r1, r2, r1, r6
 8012d5e:	0c1e      	lsrs	r6, r3, #16
 8012d60:	0c0b      	lsrs	r3, r1, #16
 8012d62:	fb02 3306 	mla	r3, r2, r6, r3
 8012d66:	b289      	uxth	r1, r1
 8012d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012d6c:	4285      	cmp	r5, r0
 8012d6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012d72:	f84c 1b04 	str.w	r1, [ip], #4
 8012d76:	dcec      	bgt.n	8012d52 <__multadd+0x12>
 8012d78:	b30e      	cbz	r6, 8012dbe <__multadd+0x7e>
 8012d7a:	68a3      	ldr	r3, [r4, #8]
 8012d7c:	42ab      	cmp	r3, r5
 8012d7e:	dc19      	bgt.n	8012db4 <__multadd+0x74>
 8012d80:	6861      	ldr	r1, [r4, #4]
 8012d82:	4638      	mov	r0, r7
 8012d84:	3101      	adds	r1, #1
 8012d86:	f7ff ff79 	bl	8012c7c <_Balloc>
 8012d8a:	4680      	mov	r8, r0
 8012d8c:	b928      	cbnz	r0, 8012d9a <__multadd+0x5a>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	21b5      	movs	r1, #181	; 0xb5
 8012d92:	4b0c      	ldr	r3, [pc, #48]	; (8012dc4 <__multadd+0x84>)
 8012d94:	480c      	ldr	r0, [pc, #48]	; (8012dc8 <__multadd+0x88>)
 8012d96:	f000 fc63 	bl	8013660 <__assert_func>
 8012d9a:	6922      	ldr	r2, [r4, #16]
 8012d9c:	f104 010c 	add.w	r1, r4, #12
 8012da0:	3202      	adds	r2, #2
 8012da2:	0092      	lsls	r2, r2, #2
 8012da4:	300c      	adds	r0, #12
 8012da6:	f7ff ff4f 	bl	8012c48 <memcpy>
 8012daa:	4621      	mov	r1, r4
 8012dac:	4638      	mov	r0, r7
 8012dae:	f7ff ffa5 	bl	8012cfc <_Bfree>
 8012db2:	4644      	mov	r4, r8
 8012db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012db8:	3501      	adds	r5, #1
 8012dba:	615e      	str	r6, [r3, #20]
 8012dbc:	6125      	str	r5, [r4, #16]
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012dc4:	0802235f 	.word	0x0802235f
 8012dc8:	08022370 	.word	0x08022370

08012dcc <__hi0bits>:
 8012dcc:	0c02      	lsrs	r2, r0, #16
 8012dce:	0412      	lsls	r2, r2, #16
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	b9ca      	cbnz	r2, 8012e08 <__hi0bits+0x3c>
 8012dd4:	0403      	lsls	r3, r0, #16
 8012dd6:	2010      	movs	r0, #16
 8012dd8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012ddc:	bf04      	itt	eq
 8012dde:	021b      	lsleq	r3, r3, #8
 8012de0:	3008      	addeq	r0, #8
 8012de2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012de6:	bf04      	itt	eq
 8012de8:	011b      	lsleq	r3, r3, #4
 8012dea:	3004      	addeq	r0, #4
 8012dec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012df0:	bf04      	itt	eq
 8012df2:	009b      	lsleq	r3, r3, #2
 8012df4:	3002      	addeq	r0, #2
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	db05      	blt.n	8012e06 <__hi0bits+0x3a>
 8012dfa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8012dfe:	f100 0001 	add.w	r0, r0, #1
 8012e02:	bf08      	it	eq
 8012e04:	2020      	moveq	r0, #32
 8012e06:	4770      	bx	lr
 8012e08:	2000      	movs	r0, #0
 8012e0a:	e7e5      	b.n	8012dd8 <__hi0bits+0xc>

08012e0c <__lo0bits>:
 8012e0c:	6803      	ldr	r3, [r0, #0]
 8012e0e:	4602      	mov	r2, r0
 8012e10:	f013 0007 	ands.w	r0, r3, #7
 8012e14:	d00b      	beq.n	8012e2e <__lo0bits+0x22>
 8012e16:	07d9      	lsls	r1, r3, #31
 8012e18:	d421      	bmi.n	8012e5e <__lo0bits+0x52>
 8012e1a:	0798      	lsls	r0, r3, #30
 8012e1c:	bf49      	itett	mi
 8012e1e:	085b      	lsrmi	r3, r3, #1
 8012e20:	089b      	lsrpl	r3, r3, #2
 8012e22:	2001      	movmi	r0, #1
 8012e24:	6013      	strmi	r3, [r2, #0]
 8012e26:	bf5c      	itt	pl
 8012e28:	2002      	movpl	r0, #2
 8012e2a:	6013      	strpl	r3, [r2, #0]
 8012e2c:	4770      	bx	lr
 8012e2e:	b299      	uxth	r1, r3
 8012e30:	b909      	cbnz	r1, 8012e36 <__lo0bits+0x2a>
 8012e32:	2010      	movs	r0, #16
 8012e34:	0c1b      	lsrs	r3, r3, #16
 8012e36:	b2d9      	uxtb	r1, r3
 8012e38:	b909      	cbnz	r1, 8012e3e <__lo0bits+0x32>
 8012e3a:	3008      	adds	r0, #8
 8012e3c:	0a1b      	lsrs	r3, r3, #8
 8012e3e:	0719      	lsls	r1, r3, #28
 8012e40:	bf04      	itt	eq
 8012e42:	091b      	lsreq	r3, r3, #4
 8012e44:	3004      	addeq	r0, #4
 8012e46:	0799      	lsls	r1, r3, #30
 8012e48:	bf04      	itt	eq
 8012e4a:	089b      	lsreq	r3, r3, #2
 8012e4c:	3002      	addeq	r0, #2
 8012e4e:	07d9      	lsls	r1, r3, #31
 8012e50:	d403      	bmi.n	8012e5a <__lo0bits+0x4e>
 8012e52:	085b      	lsrs	r3, r3, #1
 8012e54:	f100 0001 	add.w	r0, r0, #1
 8012e58:	d003      	beq.n	8012e62 <__lo0bits+0x56>
 8012e5a:	6013      	str	r3, [r2, #0]
 8012e5c:	4770      	bx	lr
 8012e5e:	2000      	movs	r0, #0
 8012e60:	4770      	bx	lr
 8012e62:	2020      	movs	r0, #32
 8012e64:	4770      	bx	lr
	...

08012e68 <__i2b>:
 8012e68:	b510      	push	{r4, lr}
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	2101      	movs	r1, #1
 8012e6e:	f7ff ff05 	bl	8012c7c <_Balloc>
 8012e72:	4602      	mov	r2, r0
 8012e74:	b928      	cbnz	r0, 8012e82 <__i2b+0x1a>
 8012e76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012e7a:	4b04      	ldr	r3, [pc, #16]	; (8012e8c <__i2b+0x24>)
 8012e7c:	4804      	ldr	r0, [pc, #16]	; (8012e90 <__i2b+0x28>)
 8012e7e:	f000 fbef 	bl	8013660 <__assert_func>
 8012e82:	2301      	movs	r3, #1
 8012e84:	6144      	str	r4, [r0, #20]
 8012e86:	6103      	str	r3, [r0, #16]
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	bf00      	nop
 8012e8c:	0802235f 	.word	0x0802235f
 8012e90:	08022370 	.word	0x08022370

08012e94 <__multiply>:
 8012e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e98:	4691      	mov	r9, r2
 8012e9a:	690a      	ldr	r2, [r1, #16]
 8012e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ea0:	460c      	mov	r4, r1
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	bfbe      	ittt	lt
 8012ea6:	460b      	movlt	r3, r1
 8012ea8:	464c      	movlt	r4, r9
 8012eaa:	4699      	movlt	r9, r3
 8012eac:	6927      	ldr	r7, [r4, #16]
 8012eae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012eb2:	68a3      	ldr	r3, [r4, #8]
 8012eb4:	6861      	ldr	r1, [r4, #4]
 8012eb6:	eb07 060a 	add.w	r6, r7, sl
 8012eba:	42b3      	cmp	r3, r6
 8012ebc:	b085      	sub	sp, #20
 8012ebe:	bfb8      	it	lt
 8012ec0:	3101      	addlt	r1, #1
 8012ec2:	f7ff fedb 	bl	8012c7c <_Balloc>
 8012ec6:	b930      	cbnz	r0, 8012ed6 <__multiply+0x42>
 8012ec8:	4602      	mov	r2, r0
 8012eca:	f240 115d 	movw	r1, #349	; 0x15d
 8012ece:	4b43      	ldr	r3, [pc, #268]	; (8012fdc <__multiply+0x148>)
 8012ed0:	4843      	ldr	r0, [pc, #268]	; (8012fe0 <__multiply+0x14c>)
 8012ed2:	f000 fbc5 	bl	8013660 <__assert_func>
 8012ed6:	f100 0514 	add.w	r5, r0, #20
 8012eda:	462b      	mov	r3, r5
 8012edc:	2200      	movs	r2, #0
 8012ede:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012ee2:	4543      	cmp	r3, r8
 8012ee4:	d321      	bcc.n	8012f2a <__multiply+0x96>
 8012ee6:	f104 0314 	add.w	r3, r4, #20
 8012eea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012eee:	f109 0314 	add.w	r3, r9, #20
 8012ef2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012ef6:	9202      	str	r2, [sp, #8]
 8012ef8:	1b3a      	subs	r2, r7, r4
 8012efa:	3a15      	subs	r2, #21
 8012efc:	f022 0203 	bic.w	r2, r2, #3
 8012f00:	3204      	adds	r2, #4
 8012f02:	f104 0115 	add.w	r1, r4, #21
 8012f06:	428f      	cmp	r7, r1
 8012f08:	bf38      	it	cc
 8012f0a:	2204      	movcc	r2, #4
 8012f0c:	9201      	str	r2, [sp, #4]
 8012f0e:	9a02      	ldr	r2, [sp, #8]
 8012f10:	9303      	str	r3, [sp, #12]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d80c      	bhi.n	8012f30 <__multiply+0x9c>
 8012f16:	2e00      	cmp	r6, #0
 8012f18:	dd03      	ble.n	8012f22 <__multiply+0x8e>
 8012f1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d059      	beq.n	8012fd6 <__multiply+0x142>
 8012f22:	6106      	str	r6, [r0, #16]
 8012f24:	b005      	add	sp, #20
 8012f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2a:	f843 2b04 	str.w	r2, [r3], #4
 8012f2e:	e7d8      	b.n	8012ee2 <__multiply+0x4e>
 8012f30:	f8b3 a000 	ldrh.w	sl, [r3]
 8012f34:	f1ba 0f00 	cmp.w	sl, #0
 8012f38:	d023      	beq.n	8012f82 <__multiply+0xee>
 8012f3a:	46a9      	mov	r9, r5
 8012f3c:	f04f 0c00 	mov.w	ip, #0
 8012f40:	f104 0e14 	add.w	lr, r4, #20
 8012f44:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012f48:	f8d9 1000 	ldr.w	r1, [r9]
 8012f4c:	fa1f fb82 	uxth.w	fp, r2
 8012f50:	b289      	uxth	r1, r1
 8012f52:	fb0a 110b 	mla	r1, sl, fp, r1
 8012f56:	4461      	add	r1, ip
 8012f58:	f8d9 c000 	ldr.w	ip, [r9]
 8012f5c:	0c12      	lsrs	r2, r2, #16
 8012f5e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8012f62:	fb0a c202 	mla	r2, sl, r2, ip
 8012f66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012f6a:	b289      	uxth	r1, r1
 8012f6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012f70:	4577      	cmp	r7, lr
 8012f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012f76:	f849 1b04 	str.w	r1, [r9], #4
 8012f7a:	d8e3      	bhi.n	8012f44 <__multiply+0xb0>
 8012f7c:	9a01      	ldr	r2, [sp, #4]
 8012f7e:	f845 c002 	str.w	ip, [r5, r2]
 8012f82:	9a03      	ldr	r2, [sp, #12]
 8012f84:	3304      	adds	r3, #4
 8012f86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012f8a:	f1b9 0f00 	cmp.w	r9, #0
 8012f8e:	d020      	beq.n	8012fd2 <__multiply+0x13e>
 8012f90:	46ae      	mov	lr, r5
 8012f92:	f04f 0a00 	mov.w	sl, #0
 8012f96:	6829      	ldr	r1, [r5, #0]
 8012f98:	f104 0c14 	add.w	ip, r4, #20
 8012f9c:	f8bc b000 	ldrh.w	fp, [ip]
 8012fa0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012fa4:	b289      	uxth	r1, r1
 8012fa6:	fb09 220b 	mla	r2, r9, fp, r2
 8012faa:	4492      	add	sl, r2
 8012fac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012fb0:	f84e 1b04 	str.w	r1, [lr], #4
 8012fb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012fb8:	f8be 1000 	ldrh.w	r1, [lr]
 8012fbc:	0c12      	lsrs	r2, r2, #16
 8012fbe:	fb09 1102 	mla	r1, r9, r2, r1
 8012fc2:	4567      	cmp	r7, ip
 8012fc4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012fc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012fcc:	d8e6      	bhi.n	8012f9c <__multiply+0x108>
 8012fce:	9a01      	ldr	r2, [sp, #4]
 8012fd0:	50a9      	str	r1, [r5, r2]
 8012fd2:	3504      	adds	r5, #4
 8012fd4:	e79b      	b.n	8012f0e <__multiply+0x7a>
 8012fd6:	3e01      	subs	r6, #1
 8012fd8:	e79d      	b.n	8012f16 <__multiply+0x82>
 8012fda:	bf00      	nop
 8012fdc:	0802235f 	.word	0x0802235f
 8012fe0:	08022370 	.word	0x08022370

08012fe4 <__pow5mult>:
 8012fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fe8:	4615      	mov	r5, r2
 8012fea:	f012 0203 	ands.w	r2, r2, #3
 8012fee:	4606      	mov	r6, r0
 8012ff0:	460f      	mov	r7, r1
 8012ff2:	d007      	beq.n	8013004 <__pow5mult+0x20>
 8012ff4:	4c25      	ldr	r4, [pc, #148]	; (801308c <__pow5mult+0xa8>)
 8012ff6:	3a01      	subs	r2, #1
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012ffe:	f7ff fe9f 	bl	8012d40 <__multadd>
 8013002:	4607      	mov	r7, r0
 8013004:	10ad      	asrs	r5, r5, #2
 8013006:	d03d      	beq.n	8013084 <__pow5mult+0xa0>
 8013008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801300a:	b97c      	cbnz	r4, 801302c <__pow5mult+0x48>
 801300c:	2010      	movs	r0, #16
 801300e:	f7fe f9f1 	bl	80113f4 <malloc>
 8013012:	4602      	mov	r2, r0
 8013014:	6270      	str	r0, [r6, #36]	; 0x24
 8013016:	b928      	cbnz	r0, 8013024 <__pow5mult+0x40>
 8013018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801301c:	4b1c      	ldr	r3, [pc, #112]	; (8013090 <__pow5mult+0xac>)
 801301e:	481d      	ldr	r0, [pc, #116]	; (8013094 <__pow5mult+0xb0>)
 8013020:	f000 fb1e 	bl	8013660 <__assert_func>
 8013024:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013028:	6004      	str	r4, [r0, #0]
 801302a:	60c4      	str	r4, [r0, #12]
 801302c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013030:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013034:	b94c      	cbnz	r4, 801304a <__pow5mult+0x66>
 8013036:	f240 2171 	movw	r1, #625	; 0x271
 801303a:	4630      	mov	r0, r6
 801303c:	f7ff ff14 	bl	8012e68 <__i2b>
 8013040:	2300      	movs	r3, #0
 8013042:	4604      	mov	r4, r0
 8013044:	f8c8 0008 	str.w	r0, [r8, #8]
 8013048:	6003      	str	r3, [r0, #0]
 801304a:	f04f 0900 	mov.w	r9, #0
 801304e:	07eb      	lsls	r3, r5, #31
 8013050:	d50a      	bpl.n	8013068 <__pow5mult+0x84>
 8013052:	4639      	mov	r1, r7
 8013054:	4622      	mov	r2, r4
 8013056:	4630      	mov	r0, r6
 8013058:	f7ff ff1c 	bl	8012e94 <__multiply>
 801305c:	4680      	mov	r8, r0
 801305e:	4639      	mov	r1, r7
 8013060:	4630      	mov	r0, r6
 8013062:	f7ff fe4b 	bl	8012cfc <_Bfree>
 8013066:	4647      	mov	r7, r8
 8013068:	106d      	asrs	r5, r5, #1
 801306a:	d00b      	beq.n	8013084 <__pow5mult+0xa0>
 801306c:	6820      	ldr	r0, [r4, #0]
 801306e:	b938      	cbnz	r0, 8013080 <__pow5mult+0x9c>
 8013070:	4622      	mov	r2, r4
 8013072:	4621      	mov	r1, r4
 8013074:	4630      	mov	r0, r6
 8013076:	f7ff ff0d 	bl	8012e94 <__multiply>
 801307a:	6020      	str	r0, [r4, #0]
 801307c:	f8c0 9000 	str.w	r9, [r0]
 8013080:	4604      	mov	r4, r0
 8013082:	e7e4      	b.n	801304e <__pow5mult+0x6a>
 8013084:	4638      	mov	r0, r7
 8013086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801308a:	bf00      	nop
 801308c:	080224c0 	.word	0x080224c0
 8013090:	080222ed 	.word	0x080222ed
 8013094:	08022370 	.word	0x08022370

08013098 <__lshift>:
 8013098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801309c:	460c      	mov	r4, r1
 801309e:	4607      	mov	r7, r0
 80130a0:	4691      	mov	r9, r2
 80130a2:	6923      	ldr	r3, [r4, #16]
 80130a4:	6849      	ldr	r1, [r1, #4]
 80130a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80130aa:	68a3      	ldr	r3, [r4, #8]
 80130ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80130b0:	f108 0601 	add.w	r6, r8, #1
 80130b4:	42b3      	cmp	r3, r6
 80130b6:	db0b      	blt.n	80130d0 <__lshift+0x38>
 80130b8:	4638      	mov	r0, r7
 80130ba:	f7ff fddf 	bl	8012c7c <_Balloc>
 80130be:	4605      	mov	r5, r0
 80130c0:	b948      	cbnz	r0, 80130d6 <__lshift+0x3e>
 80130c2:	4602      	mov	r2, r0
 80130c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80130c8:	4b29      	ldr	r3, [pc, #164]	; (8013170 <__lshift+0xd8>)
 80130ca:	482a      	ldr	r0, [pc, #168]	; (8013174 <__lshift+0xdc>)
 80130cc:	f000 fac8 	bl	8013660 <__assert_func>
 80130d0:	3101      	adds	r1, #1
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	e7ee      	b.n	80130b4 <__lshift+0x1c>
 80130d6:	2300      	movs	r3, #0
 80130d8:	f100 0114 	add.w	r1, r0, #20
 80130dc:	f100 0210 	add.w	r2, r0, #16
 80130e0:	4618      	mov	r0, r3
 80130e2:	4553      	cmp	r3, sl
 80130e4:	db37      	blt.n	8013156 <__lshift+0xbe>
 80130e6:	6920      	ldr	r0, [r4, #16]
 80130e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80130ec:	f104 0314 	add.w	r3, r4, #20
 80130f0:	f019 091f 	ands.w	r9, r9, #31
 80130f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80130f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80130fc:	d02f      	beq.n	801315e <__lshift+0xc6>
 80130fe:	468a      	mov	sl, r1
 8013100:	f04f 0c00 	mov.w	ip, #0
 8013104:	f1c9 0e20 	rsb	lr, r9, #32
 8013108:	681a      	ldr	r2, [r3, #0]
 801310a:	fa02 f209 	lsl.w	r2, r2, r9
 801310e:	ea42 020c 	orr.w	r2, r2, ip
 8013112:	f84a 2b04 	str.w	r2, [sl], #4
 8013116:	f853 2b04 	ldr.w	r2, [r3], #4
 801311a:	4298      	cmp	r0, r3
 801311c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013120:	d8f2      	bhi.n	8013108 <__lshift+0x70>
 8013122:	1b03      	subs	r3, r0, r4
 8013124:	3b15      	subs	r3, #21
 8013126:	f023 0303 	bic.w	r3, r3, #3
 801312a:	3304      	adds	r3, #4
 801312c:	f104 0215 	add.w	r2, r4, #21
 8013130:	4290      	cmp	r0, r2
 8013132:	bf38      	it	cc
 8013134:	2304      	movcc	r3, #4
 8013136:	f841 c003 	str.w	ip, [r1, r3]
 801313a:	f1bc 0f00 	cmp.w	ip, #0
 801313e:	d001      	beq.n	8013144 <__lshift+0xac>
 8013140:	f108 0602 	add.w	r6, r8, #2
 8013144:	3e01      	subs	r6, #1
 8013146:	4638      	mov	r0, r7
 8013148:	4621      	mov	r1, r4
 801314a:	612e      	str	r6, [r5, #16]
 801314c:	f7ff fdd6 	bl	8012cfc <_Bfree>
 8013150:	4628      	mov	r0, r5
 8013152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013156:	f842 0f04 	str.w	r0, [r2, #4]!
 801315a:	3301      	adds	r3, #1
 801315c:	e7c1      	b.n	80130e2 <__lshift+0x4a>
 801315e:	3904      	subs	r1, #4
 8013160:	f853 2b04 	ldr.w	r2, [r3], #4
 8013164:	4298      	cmp	r0, r3
 8013166:	f841 2f04 	str.w	r2, [r1, #4]!
 801316a:	d8f9      	bhi.n	8013160 <__lshift+0xc8>
 801316c:	e7ea      	b.n	8013144 <__lshift+0xac>
 801316e:	bf00      	nop
 8013170:	0802235f 	.word	0x0802235f
 8013174:	08022370 	.word	0x08022370

08013178 <__mcmp>:
 8013178:	4603      	mov	r3, r0
 801317a:	690a      	ldr	r2, [r1, #16]
 801317c:	6900      	ldr	r0, [r0, #16]
 801317e:	b530      	push	{r4, r5, lr}
 8013180:	1a80      	subs	r0, r0, r2
 8013182:	d10d      	bne.n	80131a0 <__mcmp+0x28>
 8013184:	3314      	adds	r3, #20
 8013186:	3114      	adds	r1, #20
 8013188:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801318c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013190:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013194:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013198:	4295      	cmp	r5, r2
 801319a:	d002      	beq.n	80131a2 <__mcmp+0x2a>
 801319c:	d304      	bcc.n	80131a8 <__mcmp+0x30>
 801319e:	2001      	movs	r0, #1
 80131a0:	bd30      	pop	{r4, r5, pc}
 80131a2:	42a3      	cmp	r3, r4
 80131a4:	d3f4      	bcc.n	8013190 <__mcmp+0x18>
 80131a6:	e7fb      	b.n	80131a0 <__mcmp+0x28>
 80131a8:	f04f 30ff 	mov.w	r0, #4294967295
 80131ac:	e7f8      	b.n	80131a0 <__mcmp+0x28>
	...

080131b0 <__mdiff>:
 80131b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131b4:	460d      	mov	r5, r1
 80131b6:	4607      	mov	r7, r0
 80131b8:	4611      	mov	r1, r2
 80131ba:	4628      	mov	r0, r5
 80131bc:	4614      	mov	r4, r2
 80131be:	f7ff ffdb 	bl	8013178 <__mcmp>
 80131c2:	1e06      	subs	r6, r0, #0
 80131c4:	d111      	bne.n	80131ea <__mdiff+0x3a>
 80131c6:	4631      	mov	r1, r6
 80131c8:	4638      	mov	r0, r7
 80131ca:	f7ff fd57 	bl	8012c7c <_Balloc>
 80131ce:	4602      	mov	r2, r0
 80131d0:	b928      	cbnz	r0, 80131de <__mdiff+0x2e>
 80131d2:	f240 2132 	movw	r1, #562	; 0x232
 80131d6:	4b3a      	ldr	r3, [pc, #232]	; (80132c0 <__mdiff+0x110>)
 80131d8:	483a      	ldr	r0, [pc, #232]	; (80132c4 <__mdiff+0x114>)
 80131da:	f000 fa41 	bl	8013660 <__assert_func>
 80131de:	2301      	movs	r3, #1
 80131e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80131e4:	4610      	mov	r0, r2
 80131e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ea:	bfa4      	itt	ge
 80131ec:	4623      	movge	r3, r4
 80131ee:	462c      	movge	r4, r5
 80131f0:	4638      	mov	r0, r7
 80131f2:	6861      	ldr	r1, [r4, #4]
 80131f4:	bfa6      	itte	ge
 80131f6:	461d      	movge	r5, r3
 80131f8:	2600      	movge	r6, #0
 80131fa:	2601      	movlt	r6, #1
 80131fc:	f7ff fd3e 	bl	8012c7c <_Balloc>
 8013200:	4602      	mov	r2, r0
 8013202:	b918      	cbnz	r0, 801320c <__mdiff+0x5c>
 8013204:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013208:	4b2d      	ldr	r3, [pc, #180]	; (80132c0 <__mdiff+0x110>)
 801320a:	e7e5      	b.n	80131d8 <__mdiff+0x28>
 801320c:	f102 0814 	add.w	r8, r2, #20
 8013210:	46c2      	mov	sl, r8
 8013212:	f04f 0c00 	mov.w	ip, #0
 8013216:	6927      	ldr	r7, [r4, #16]
 8013218:	60c6      	str	r6, [r0, #12]
 801321a:	692e      	ldr	r6, [r5, #16]
 801321c:	f104 0014 	add.w	r0, r4, #20
 8013220:	f105 0914 	add.w	r9, r5, #20
 8013224:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8013228:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801322c:	3410      	adds	r4, #16
 801322e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8013232:	f859 3b04 	ldr.w	r3, [r9], #4
 8013236:	fa1f f18b 	uxth.w	r1, fp
 801323a:	448c      	add	ip, r1
 801323c:	b299      	uxth	r1, r3
 801323e:	0c1b      	lsrs	r3, r3, #16
 8013240:	ebac 0101 	sub.w	r1, ip, r1
 8013244:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013248:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801324c:	b289      	uxth	r1, r1
 801324e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8013252:	454e      	cmp	r6, r9
 8013254:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013258:	f84a 3b04 	str.w	r3, [sl], #4
 801325c:	d8e7      	bhi.n	801322e <__mdiff+0x7e>
 801325e:	1b73      	subs	r3, r6, r5
 8013260:	3b15      	subs	r3, #21
 8013262:	f023 0303 	bic.w	r3, r3, #3
 8013266:	3515      	adds	r5, #21
 8013268:	3304      	adds	r3, #4
 801326a:	42ae      	cmp	r6, r5
 801326c:	bf38      	it	cc
 801326e:	2304      	movcc	r3, #4
 8013270:	4418      	add	r0, r3
 8013272:	4443      	add	r3, r8
 8013274:	461e      	mov	r6, r3
 8013276:	4605      	mov	r5, r0
 8013278:	4575      	cmp	r5, lr
 801327a:	d30e      	bcc.n	801329a <__mdiff+0xea>
 801327c:	f10e 0103 	add.w	r1, lr, #3
 8013280:	1a09      	subs	r1, r1, r0
 8013282:	f021 0103 	bic.w	r1, r1, #3
 8013286:	3803      	subs	r0, #3
 8013288:	4586      	cmp	lr, r0
 801328a:	bf38      	it	cc
 801328c:	2100      	movcc	r1, #0
 801328e:	4419      	add	r1, r3
 8013290:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8013294:	b18b      	cbz	r3, 80132ba <__mdiff+0x10a>
 8013296:	6117      	str	r7, [r2, #16]
 8013298:	e7a4      	b.n	80131e4 <__mdiff+0x34>
 801329a:	f855 8b04 	ldr.w	r8, [r5], #4
 801329e:	fa1f f188 	uxth.w	r1, r8
 80132a2:	4461      	add	r1, ip
 80132a4:	140c      	asrs	r4, r1, #16
 80132a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80132aa:	b289      	uxth	r1, r1
 80132ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80132b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80132b4:	f846 1b04 	str.w	r1, [r6], #4
 80132b8:	e7de      	b.n	8013278 <__mdiff+0xc8>
 80132ba:	3f01      	subs	r7, #1
 80132bc:	e7e8      	b.n	8013290 <__mdiff+0xe0>
 80132be:	bf00      	nop
 80132c0:	0802235f 	.word	0x0802235f
 80132c4:	08022370 	.word	0x08022370

080132c8 <__d2b>:
 80132c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80132cc:	2101      	movs	r1, #1
 80132ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80132d2:	4690      	mov	r8, r2
 80132d4:	461d      	mov	r5, r3
 80132d6:	f7ff fcd1 	bl	8012c7c <_Balloc>
 80132da:	4604      	mov	r4, r0
 80132dc:	b930      	cbnz	r0, 80132ec <__d2b+0x24>
 80132de:	4602      	mov	r2, r0
 80132e0:	f240 310a 	movw	r1, #778	; 0x30a
 80132e4:	4b24      	ldr	r3, [pc, #144]	; (8013378 <__d2b+0xb0>)
 80132e6:	4825      	ldr	r0, [pc, #148]	; (801337c <__d2b+0xb4>)
 80132e8:	f000 f9ba 	bl	8013660 <__assert_func>
 80132ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80132f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80132f4:	bb2d      	cbnz	r5, 8013342 <__d2b+0x7a>
 80132f6:	9301      	str	r3, [sp, #4]
 80132f8:	f1b8 0300 	subs.w	r3, r8, #0
 80132fc:	d026      	beq.n	801334c <__d2b+0x84>
 80132fe:	4668      	mov	r0, sp
 8013300:	9300      	str	r3, [sp, #0]
 8013302:	f7ff fd83 	bl	8012e0c <__lo0bits>
 8013306:	9900      	ldr	r1, [sp, #0]
 8013308:	b1f0      	cbz	r0, 8013348 <__d2b+0x80>
 801330a:	9a01      	ldr	r2, [sp, #4]
 801330c:	f1c0 0320 	rsb	r3, r0, #32
 8013310:	fa02 f303 	lsl.w	r3, r2, r3
 8013314:	430b      	orrs	r3, r1
 8013316:	40c2      	lsrs	r2, r0
 8013318:	6163      	str	r3, [r4, #20]
 801331a:	9201      	str	r2, [sp, #4]
 801331c:	9b01      	ldr	r3, [sp, #4]
 801331e:	2b00      	cmp	r3, #0
 8013320:	bf14      	ite	ne
 8013322:	2102      	movne	r1, #2
 8013324:	2101      	moveq	r1, #1
 8013326:	61a3      	str	r3, [r4, #24]
 8013328:	6121      	str	r1, [r4, #16]
 801332a:	b1c5      	cbz	r5, 801335e <__d2b+0x96>
 801332c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013330:	4405      	add	r5, r0
 8013332:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013336:	603d      	str	r5, [r7, #0]
 8013338:	6030      	str	r0, [r6, #0]
 801333a:	4620      	mov	r0, r4
 801333c:	b002      	add	sp, #8
 801333e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013346:	e7d6      	b.n	80132f6 <__d2b+0x2e>
 8013348:	6161      	str	r1, [r4, #20]
 801334a:	e7e7      	b.n	801331c <__d2b+0x54>
 801334c:	a801      	add	r0, sp, #4
 801334e:	f7ff fd5d 	bl	8012e0c <__lo0bits>
 8013352:	2101      	movs	r1, #1
 8013354:	9b01      	ldr	r3, [sp, #4]
 8013356:	6121      	str	r1, [r4, #16]
 8013358:	6163      	str	r3, [r4, #20]
 801335a:	3020      	adds	r0, #32
 801335c:	e7e5      	b.n	801332a <__d2b+0x62>
 801335e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8013362:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013366:	6038      	str	r0, [r7, #0]
 8013368:	6918      	ldr	r0, [r3, #16]
 801336a:	f7ff fd2f 	bl	8012dcc <__hi0bits>
 801336e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8013372:	6031      	str	r1, [r6, #0]
 8013374:	e7e1      	b.n	801333a <__d2b+0x72>
 8013376:	bf00      	nop
 8013378:	0802235f 	.word	0x0802235f
 801337c:	08022370 	.word	0x08022370

08013380 <_calloc_r>:
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	fba1 5402 	umull	r5, r4, r1, r2
 8013386:	b934      	cbnz	r4, 8013396 <_calloc_r+0x16>
 8013388:	4629      	mov	r1, r5
 801338a:	f7fe f8b3 	bl	80114f4 <_malloc_r>
 801338e:	4606      	mov	r6, r0
 8013390:	b928      	cbnz	r0, 801339e <_calloc_r+0x1e>
 8013392:	4630      	mov	r0, r6
 8013394:	bd70      	pop	{r4, r5, r6, pc}
 8013396:	220c      	movs	r2, #12
 8013398:	2600      	movs	r6, #0
 801339a:	6002      	str	r2, [r0, #0]
 801339c:	e7f9      	b.n	8013392 <_calloc_r+0x12>
 801339e:	462a      	mov	r2, r5
 80133a0:	4621      	mov	r1, r4
 80133a2:	f7fe f837 	bl	8011414 <memset>
 80133a6:	e7f4      	b.n	8013392 <_calloc_r+0x12>

080133a8 <__ssputs_r>:
 80133a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133ac:	688e      	ldr	r6, [r1, #8]
 80133ae:	4682      	mov	sl, r0
 80133b0:	429e      	cmp	r6, r3
 80133b2:	460c      	mov	r4, r1
 80133b4:	4690      	mov	r8, r2
 80133b6:	461f      	mov	r7, r3
 80133b8:	d838      	bhi.n	801342c <__ssputs_r+0x84>
 80133ba:	898a      	ldrh	r2, [r1, #12]
 80133bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80133c0:	d032      	beq.n	8013428 <__ssputs_r+0x80>
 80133c2:	6825      	ldr	r5, [r4, #0]
 80133c4:	6909      	ldr	r1, [r1, #16]
 80133c6:	3301      	adds	r3, #1
 80133c8:	eba5 0901 	sub.w	r9, r5, r1
 80133cc:	6965      	ldr	r5, [r4, #20]
 80133ce:	444b      	add	r3, r9
 80133d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80133d8:	106d      	asrs	r5, r5, #1
 80133da:	429d      	cmp	r5, r3
 80133dc:	bf38      	it	cc
 80133de:	461d      	movcc	r5, r3
 80133e0:	0553      	lsls	r3, r2, #21
 80133e2:	d531      	bpl.n	8013448 <__ssputs_r+0xa0>
 80133e4:	4629      	mov	r1, r5
 80133e6:	f7fe f885 	bl	80114f4 <_malloc_r>
 80133ea:	4606      	mov	r6, r0
 80133ec:	b950      	cbnz	r0, 8013404 <__ssputs_r+0x5c>
 80133ee:	230c      	movs	r3, #12
 80133f0:	f04f 30ff 	mov.w	r0, #4294967295
 80133f4:	f8ca 3000 	str.w	r3, [sl]
 80133f8:	89a3      	ldrh	r3, [r4, #12]
 80133fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133fe:	81a3      	strh	r3, [r4, #12]
 8013400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013404:	464a      	mov	r2, r9
 8013406:	6921      	ldr	r1, [r4, #16]
 8013408:	f7ff fc1e 	bl	8012c48 <memcpy>
 801340c:	89a3      	ldrh	r3, [r4, #12]
 801340e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013416:	81a3      	strh	r3, [r4, #12]
 8013418:	6126      	str	r6, [r4, #16]
 801341a:	444e      	add	r6, r9
 801341c:	6026      	str	r6, [r4, #0]
 801341e:	463e      	mov	r6, r7
 8013420:	6165      	str	r5, [r4, #20]
 8013422:	eba5 0509 	sub.w	r5, r5, r9
 8013426:	60a5      	str	r5, [r4, #8]
 8013428:	42be      	cmp	r6, r7
 801342a:	d900      	bls.n	801342e <__ssputs_r+0x86>
 801342c:	463e      	mov	r6, r7
 801342e:	4632      	mov	r2, r6
 8013430:	4641      	mov	r1, r8
 8013432:	6820      	ldr	r0, [r4, #0]
 8013434:	f000 f959 	bl	80136ea <memmove>
 8013438:	68a3      	ldr	r3, [r4, #8]
 801343a:	2000      	movs	r0, #0
 801343c:	1b9b      	subs	r3, r3, r6
 801343e:	60a3      	str	r3, [r4, #8]
 8013440:	6823      	ldr	r3, [r4, #0]
 8013442:	4433      	add	r3, r6
 8013444:	6023      	str	r3, [r4, #0]
 8013446:	e7db      	b.n	8013400 <__ssputs_r+0x58>
 8013448:	462a      	mov	r2, r5
 801344a:	f000 f968 	bl	801371e <_realloc_r>
 801344e:	4606      	mov	r6, r0
 8013450:	2800      	cmp	r0, #0
 8013452:	d1e1      	bne.n	8013418 <__ssputs_r+0x70>
 8013454:	4650      	mov	r0, sl
 8013456:	6921      	ldr	r1, [r4, #16]
 8013458:	f7fd ffe4 	bl	8011424 <_free_r>
 801345c:	e7c7      	b.n	80133ee <__ssputs_r+0x46>
	...

08013460 <_svfiprintf_r>:
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	4698      	mov	r8, r3
 8013466:	898b      	ldrh	r3, [r1, #12]
 8013468:	4607      	mov	r7, r0
 801346a:	061b      	lsls	r3, r3, #24
 801346c:	460d      	mov	r5, r1
 801346e:	4614      	mov	r4, r2
 8013470:	b09d      	sub	sp, #116	; 0x74
 8013472:	d50e      	bpl.n	8013492 <_svfiprintf_r+0x32>
 8013474:	690b      	ldr	r3, [r1, #16]
 8013476:	b963      	cbnz	r3, 8013492 <_svfiprintf_r+0x32>
 8013478:	2140      	movs	r1, #64	; 0x40
 801347a:	f7fe f83b 	bl	80114f4 <_malloc_r>
 801347e:	6028      	str	r0, [r5, #0]
 8013480:	6128      	str	r0, [r5, #16]
 8013482:	b920      	cbnz	r0, 801348e <_svfiprintf_r+0x2e>
 8013484:	230c      	movs	r3, #12
 8013486:	603b      	str	r3, [r7, #0]
 8013488:	f04f 30ff 	mov.w	r0, #4294967295
 801348c:	e0d1      	b.n	8013632 <_svfiprintf_r+0x1d2>
 801348e:	2340      	movs	r3, #64	; 0x40
 8013490:	616b      	str	r3, [r5, #20]
 8013492:	2300      	movs	r3, #0
 8013494:	9309      	str	r3, [sp, #36]	; 0x24
 8013496:	2320      	movs	r3, #32
 8013498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801349c:	2330      	movs	r3, #48	; 0x30
 801349e:	f04f 0901 	mov.w	r9, #1
 80134a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80134a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801364c <_svfiprintf_r+0x1ec>
 80134aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134ae:	4623      	mov	r3, r4
 80134b0:	469a      	mov	sl, r3
 80134b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134b6:	b10a      	cbz	r2, 80134bc <_svfiprintf_r+0x5c>
 80134b8:	2a25      	cmp	r2, #37	; 0x25
 80134ba:	d1f9      	bne.n	80134b0 <_svfiprintf_r+0x50>
 80134bc:	ebba 0b04 	subs.w	fp, sl, r4
 80134c0:	d00b      	beq.n	80134da <_svfiprintf_r+0x7a>
 80134c2:	465b      	mov	r3, fp
 80134c4:	4622      	mov	r2, r4
 80134c6:	4629      	mov	r1, r5
 80134c8:	4638      	mov	r0, r7
 80134ca:	f7ff ff6d 	bl	80133a8 <__ssputs_r>
 80134ce:	3001      	adds	r0, #1
 80134d0:	f000 80aa 	beq.w	8013628 <_svfiprintf_r+0x1c8>
 80134d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134d6:	445a      	add	r2, fp
 80134d8:	9209      	str	r2, [sp, #36]	; 0x24
 80134da:	f89a 3000 	ldrb.w	r3, [sl]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 80a2 	beq.w	8013628 <_svfiprintf_r+0x1c8>
 80134e4:	2300      	movs	r3, #0
 80134e6:	f04f 32ff 	mov.w	r2, #4294967295
 80134ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134ee:	f10a 0a01 	add.w	sl, sl, #1
 80134f2:	9304      	str	r3, [sp, #16]
 80134f4:	9307      	str	r3, [sp, #28]
 80134f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134fa:	931a      	str	r3, [sp, #104]	; 0x68
 80134fc:	4654      	mov	r4, sl
 80134fe:	2205      	movs	r2, #5
 8013500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013504:	4851      	ldr	r0, [pc, #324]	; (801364c <_svfiprintf_r+0x1ec>)
 8013506:	f7ff fb91 	bl	8012c2c <memchr>
 801350a:	9a04      	ldr	r2, [sp, #16]
 801350c:	b9d8      	cbnz	r0, 8013546 <_svfiprintf_r+0xe6>
 801350e:	06d0      	lsls	r0, r2, #27
 8013510:	bf44      	itt	mi
 8013512:	2320      	movmi	r3, #32
 8013514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013518:	0711      	lsls	r1, r2, #28
 801351a:	bf44      	itt	mi
 801351c:	232b      	movmi	r3, #43	; 0x2b
 801351e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013522:	f89a 3000 	ldrb.w	r3, [sl]
 8013526:	2b2a      	cmp	r3, #42	; 0x2a
 8013528:	d015      	beq.n	8013556 <_svfiprintf_r+0xf6>
 801352a:	4654      	mov	r4, sl
 801352c:	2000      	movs	r0, #0
 801352e:	f04f 0c0a 	mov.w	ip, #10
 8013532:	9a07      	ldr	r2, [sp, #28]
 8013534:	4621      	mov	r1, r4
 8013536:	f811 3b01 	ldrb.w	r3, [r1], #1
 801353a:	3b30      	subs	r3, #48	; 0x30
 801353c:	2b09      	cmp	r3, #9
 801353e:	d94e      	bls.n	80135de <_svfiprintf_r+0x17e>
 8013540:	b1b0      	cbz	r0, 8013570 <_svfiprintf_r+0x110>
 8013542:	9207      	str	r2, [sp, #28]
 8013544:	e014      	b.n	8013570 <_svfiprintf_r+0x110>
 8013546:	eba0 0308 	sub.w	r3, r0, r8
 801354a:	fa09 f303 	lsl.w	r3, r9, r3
 801354e:	4313      	orrs	r3, r2
 8013550:	46a2      	mov	sl, r4
 8013552:	9304      	str	r3, [sp, #16]
 8013554:	e7d2      	b.n	80134fc <_svfiprintf_r+0x9c>
 8013556:	9b03      	ldr	r3, [sp, #12]
 8013558:	1d19      	adds	r1, r3, #4
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	9103      	str	r1, [sp, #12]
 801355e:	2b00      	cmp	r3, #0
 8013560:	bfbb      	ittet	lt
 8013562:	425b      	neglt	r3, r3
 8013564:	f042 0202 	orrlt.w	r2, r2, #2
 8013568:	9307      	strge	r3, [sp, #28]
 801356a:	9307      	strlt	r3, [sp, #28]
 801356c:	bfb8      	it	lt
 801356e:	9204      	strlt	r2, [sp, #16]
 8013570:	7823      	ldrb	r3, [r4, #0]
 8013572:	2b2e      	cmp	r3, #46	; 0x2e
 8013574:	d10c      	bne.n	8013590 <_svfiprintf_r+0x130>
 8013576:	7863      	ldrb	r3, [r4, #1]
 8013578:	2b2a      	cmp	r3, #42	; 0x2a
 801357a:	d135      	bne.n	80135e8 <_svfiprintf_r+0x188>
 801357c:	9b03      	ldr	r3, [sp, #12]
 801357e:	3402      	adds	r4, #2
 8013580:	1d1a      	adds	r2, r3, #4
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	9203      	str	r2, [sp, #12]
 8013586:	2b00      	cmp	r3, #0
 8013588:	bfb8      	it	lt
 801358a:	f04f 33ff 	movlt.w	r3, #4294967295
 801358e:	9305      	str	r3, [sp, #20]
 8013590:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013650 <_svfiprintf_r+0x1f0>
 8013594:	2203      	movs	r2, #3
 8013596:	4650      	mov	r0, sl
 8013598:	7821      	ldrb	r1, [r4, #0]
 801359a:	f7ff fb47 	bl	8012c2c <memchr>
 801359e:	b140      	cbz	r0, 80135b2 <_svfiprintf_r+0x152>
 80135a0:	2340      	movs	r3, #64	; 0x40
 80135a2:	eba0 000a 	sub.w	r0, r0, sl
 80135a6:	fa03 f000 	lsl.w	r0, r3, r0
 80135aa:	9b04      	ldr	r3, [sp, #16]
 80135ac:	3401      	adds	r4, #1
 80135ae:	4303      	orrs	r3, r0
 80135b0:	9304      	str	r3, [sp, #16]
 80135b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135b6:	2206      	movs	r2, #6
 80135b8:	4826      	ldr	r0, [pc, #152]	; (8013654 <_svfiprintf_r+0x1f4>)
 80135ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135be:	f7ff fb35 	bl	8012c2c <memchr>
 80135c2:	2800      	cmp	r0, #0
 80135c4:	d038      	beq.n	8013638 <_svfiprintf_r+0x1d8>
 80135c6:	4b24      	ldr	r3, [pc, #144]	; (8013658 <_svfiprintf_r+0x1f8>)
 80135c8:	bb1b      	cbnz	r3, 8013612 <_svfiprintf_r+0x1b2>
 80135ca:	9b03      	ldr	r3, [sp, #12]
 80135cc:	3307      	adds	r3, #7
 80135ce:	f023 0307 	bic.w	r3, r3, #7
 80135d2:	3308      	adds	r3, #8
 80135d4:	9303      	str	r3, [sp, #12]
 80135d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135d8:	4433      	add	r3, r6
 80135da:	9309      	str	r3, [sp, #36]	; 0x24
 80135dc:	e767      	b.n	80134ae <_svfiprintf_r+0x4e>
 80135de:	460c      	mov	r4, r1
 80135e0:	2001      	movs	r0, #1
 80135e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80135e6:	e7a5      	b.n	8013534 <_svfiprintf_r+0xd4>
 80135e8:	2300      	movs	r3, #0
 80135ea:	f04f 0c0a 	mov.w	ip, #10
 80135ee:	4619      	mov	r1, r3
 80135f0:	3401      	adds	r4, #1
 80135f2:	9305      	str	r3, [sp, #20]
 80135f4:	4620      	mov	r0, r4
 80135f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135fa:	3a30      	subs	r2, #48	; 0x30
 80135fc:	2a09      	cmp	r2, #9
 80135fe:	d903      	bls.n	8013608 <_svfiprintf_r+0x1a8>
 8013600:	2b00      	cmp	r3, #0
 8013602:	d0c5      	beq.n	8013590 <_svfiprintf_r+0x130>
 8013604:	9105      	str	r1, [sp, #20]
 8013606:	e7c3      	b.n	8013590 <_svfiprintf_r+0x130>
 8013608:	4604      	mov	r4, r0
 801360a:	2301      	movs	r3, #1
 801360c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013610:	e7f0      	b.n	80135f4 <_svfiprintf_r+0x194>
 8013612:	ab03      	add	r3, sp, #12
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	462a      	mov	r2, r5
 8013618:	4638      	mov	r0, r7
 801361a:	4b10      	ldr	r3, [pc, #64]	; (801365c <_svfiprintf_r+0x1fc>)
 801361c:	a904      	add	r1, sp, #16
 801361e:	f7fe f87b 	bl	8011718 <_printf_float>
 8013622:	1c42      	adds	r2, r0, #1
 8013624:	4606      	mov	r6, r0
 8013626:	d1d6      	bne.n	80135d6 <_svfiprintf_r+0x176>
 8013628:	89ab      	ldrh	r3, [r5, #12]
 801362a:	065b      	lsls	r3, r3, #25
 801362c:	f53f af2c 	bmi.w	8013488 <_svfiprintf_r+0x28>
 8013630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013632:	b01d      	add	sp, #116	; 0x74
 8013634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013638:	ab03      	add	r3, sp, #12
 801363a:	9300      	str	r3, [sp, #0]
 801363c:	462a      	mov	r2, r5
 801363e:	4638      	mov	r0, r7
 8013640:	4b06      	ldr	r3, [pc, #24]	; (801365c <_svfiprintf_r+0x1fc>)
 8013642:	a904      	add	r1, sp, #16
 8013644:	f7fe fb04 	bl	8011c50 <_printf_i>
 8013648:	e7eb      	b.n	8013622 <_svfiprintf_r+0x1c2>
 801364a:	bf00      	nop
 801364c:	080224cc 	.word	0x080224cc
 8013650:	080224d2 	.word	0x080224d2
 8013654:	080224d6 	.word	0x080224d6
 8013658:	08011719 	.word	0x08011719
 801365c:	080133a9 	.word	0x080133a9

08013660 <__assert_func>:
 8013660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013662:	4614      	mov	r4, r2
 8013664:	461a      	mov	r2, r3
 8013666:	4b09      	ldr	r3, [pc, #36]	; (801368c <__assert_func+0x2c>)
 8013668:	4605      	mov	r5, r0
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	68d8      	ldr	r0, [r3, #12]
 801366e:	b14c      	cbz	r4, 8013684 <__assert_func+0x24>
 8013670:	4b07      	ldr	r3, [pc, #28]	; (8013690 <__assert_func+0x30>)
 8013672:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013676:	9100      	str	r1, [sp, #0]
 8013678:	462b      	mov	r3, r5
 801367a:	4906      	ldr	r1, [pc, #24]	; (8013694 <__assert_func+0x34>)
 801367c:	f000 f80e 	bl	801369c <fiprintf>
 8013680:	f000 faa2 	bl	8013bc8 <abort>
 8013684:	4b04      	ldr	r3, [pc, #16]	; (8013698 <__assert_func+0x38>)
 8013686:	461c      	mov	r4, r3
 8013688:	e7f3      	b.n	8013672 <__assert_func+0x12>
 801368a:	bf00      	nop
 801368c:	2000b704 	.word	0x2000b704
 8013690:	080224dd 	.word	0x080224dd
 8013694:	080224ea 	.word	0x080224ea
 8013698:	08022518 	.word	0x08022518

0801369c <fiprintf>:
 801369c:	b40e      	push	{r1, r2, r3}
 801369e:	b503      	push	{r0, r1, lr}
 80136a0:	4601      	mov	r1, r0
 80136a2:	ab03      	add	r3, sp, #12
 80136a4:	4805      	ldr	r0, [pc, #20]	; (80136bc <fiprintf+0x20>)
 80136a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136aa:	6800      	ldr	r0, [r0, #0]
 80136ac:	9301      	str	r3, [sp, #4]
 80136ae:	f000 f88d 	bl	80137cc <_vfiprintf_r>
 80136b2:	b002      	add	sp, #8
 80136b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80136b8:	b003      	add	sp, #12
 80136ba:	4770      	bx	lr
 80136bc:	2000b704 	.word	0x2000b704

080136c0 <__retarget_lock_init_recursive>:
 80136c0:	4770      	bx	lr

080136c2 <__retarget_lock_acquire_recursive>:
 80136c2:	4770      	bx	lr

080136c4 <__retarget_lock_release_recursive>:
 80136c4:	4770      	bx	lr

080136c6 <__ascii_mbtowc>:
 80136c6:	b082      	sub	sp, #8
 80136c8:	b901      	cbnz	r1, 80136cc <__ascii_mbtowc+0x6>
 80136ca:	a901      	add	r1, sp, #4
 80136cc:	b142      	cbz	r2, 80136e0 <__ascii_mbtowc+0x1a>
 80136ce:	b14b      	cbz	r3, 80136e4 <__ascii_mbtowc+0x1e>
 80136d0:	7813      	ldrb	r3, [r2, #0]
 80136d2:	600b      	str	r3, [r1, #0]
 80136d4:	7812      	ldrb	r2, [r2, #0]
 80136d6:	1e10      	subs	r0, r2, #0
 80136d8:	bf18      	it	ne
 80136da:	2001      	movne	r0, #1
 80136dc:	b002      	add	sp, #8
 80136de:	4770      	bx	lr
 80136e0:	4610      	mov	r0, r2
 80136e2:	e7fb      	b.n	80136dc <__ascii_mbtowc+0x16>
 80136e4:	f06f 0001 	mvn.w	r0, #1
 80136e8:	e7f8      	b.n	80136dc <__ascii_mbtowc+0x16>

080136ea <memmove>:
 80136ea:	4288      	cmp	r0, r1
 80136ec:	b510      	push	{r4, lr}
 80136ee:	eb01 0402 	add.w	r4, r1, r2
 80136f2:	d902      	bls.n	80136fa <memmove+0x10>
 80136f4:	4284      	cmp	r4, r0
 80136f6:	4623      	mov	r3, r4
 80136f8:	d807      	bhi.n	801370a <memmove+0x20>
 80136fa:	1e43      	subs	r3, r0, #1
 80136fc:	42a1      	cmp	r1, r4
 80136fe:	d008      	beq.n	8013712 <memmove+0x28>
 8013700:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013704:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013708:	e7f8      	b.n	80136fc <memmove+0x12>
 801370a:	4601      	mov	r1, r0
 801370c:	4402      	add	r2, r0
 801370e:	428a      	cmp	r2, r1
 8013710:	d100      	bne.n	8013714 <memmove+0x2a>
 8013712:	bd10      	pop	{r4, pc}
 8013714:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013718:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801371c:	e7f7      	b.n	801370e <memmove+0x24>

0801371e <_realloc_r>:
 801371e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013722:	4680      	mov	r8, r0
 8013724:	4614      	mov	r4, r2
 8013726:	460e      	mov	r6, r1
 8013728:	b921      	cbnz	r1, 8013734 <_realloc_r+0x16>
 801372a:	4611      	mov	r1, r2
 801372c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013730:	f7fd bee0 	b.w	80114f4 <_malloc_r>
 8013734:	b92a      	cbnz	r2, 8013742 <_realloc_r+0x24>
 8013736:	f7fd fe75 	bl	8011424 <_free_r>
 801373a:	4625      	mov	r5, r4
 801373c:	4628      	mov	r0, r5
 801373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013742:	f000 fc61 	bl	8014008 <_malloc_usable_size_r>
 8013746:	4284      	cmp	r4, r0
 8013748:	4607      	mov	r7, r0
 801374a:	d802      	bhi.n	8013752 <_realloc_r+0x34>
 801374c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013750:	d812      	bhi.n	8013778 <_realloc_r+0x5a>
 8013752:	4621      	mov	r1, r4
 8013754:	4640      	mov	r0, r8
 8013756:	f7fd fecd 	bl	80114f4 <_malloc_r>
 801375a:	4605      	mov	r5, r0
 801375c:	2800      	cmp	r0, #0
 801375e:	d0ed      	beq.n	801373c <_realloc_r+0x1e>
 8013760:	42bc      	cmp	r4, r7
 8013762:	4622      	mov	r2, r4
 8013764:	4631      	mov	r1, r6
 8013766:	bf28      	it	cs
 8013768:	463a      	movcs	r2, r7
 801376a:	f7ff fa6d 	bl	8012c48 <memcpy>
 801376e:	4631      	mov	r1, r6
 8013770:	4640      	mov	r0, r8
 8013772:	f7fd fe57 	bl	8011424 <_free_r>
 8013776:	e7e1      	b.n	801373c <_realloc_r+0x1e>
 8013778:	4635      	mov	r5, r6
 801377a:	e7df      	b.n	801373c <_realloc_r+0x1e>

0801377c <__sfputc_r>:
 801377c:	6893      	ldr	r3, [r2, #8]
 801377e:	b410      	push	{r4}
 8013780:	3b01      	subs	r3, #1
 8013782:	2b00      	cmp	r3, #0
 8013784:	6093      	str	r3, [r2, #8]
 8013786:	da07      	bge.n	8013798 <__sfputc_r+0x1c>
 8013788:	6994      	ldr	r4, [r2, #24]
 801378a:	42a3      	cmp	r3, r4
 801378c:	db01      	blt.n	8013792 <__sfputc_r+0x16>
 801378e:	290a      	cmp	r1, #10
 8013790:	d102      	bne.n	8013798 <__sfputc_r+0x1c>
 8013792:	bc10      	pop	{r4}
 8013794:	f000 b94a 	b.w	8013a2c <__swbuf_r>
 8013798:	6813      	ldr	r3, [r2, #0]
 801379a:	1c58      	adds	r0, r3, #1
 801379c:	6010      	str	r0, [r2, #0]
 801379e:	7019      	strb	r1, [r3, #0]
 80137a0:	4608      	mov	r0, r1
 80137a2:	bc10      	pop	{r4}
 80137a4:	4770      	bx	lr

080137a6 <__sfputs_r>:
 80137a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a8:	4606      	mov	r6, r0
 80137aa:	460f      	mov	r7, r1
 80137ac:	4614      	mov	r4, r2
 80137ae:	18d5      	adds	r5, r2, r3
 80137b0:	42ac      	cmp	r4, r5
 80137b2:	d101      	bne.n	80137b8 <__sfputs_r+0x12>
 80137b4:	2000      	movs	r0, #0
 80137b6:	e007      	b.n	80137c8 <__sfputs_r+0x22>
 80137b8:	463a      	mov	r2, r7
 80137ba:	4630      	mov	r0, r6
 80137bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137c0:	f7ff ffdc 	bl	801377c <__sfputc_r>
 80137c4:	1c43      	adds	r3, r0, #1
 80137c6:	d1f3      	bne.n	80137b0 <__sfputs_r+0xa>
 80137c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080137cc <_vfiprintf_r>:
 80137cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d0:	460d      	mov	r5, r1
 80137d2:	4614      	mov	r4, r2
 80137d4:	4698      	mov	r8, r3
 80137d6:	4606      	mov	r6, r0
 80137d8:	b09d      	sub	sp, #116	; 0x74
 80137da:	b118      	cbz	r0, 80137e4 <_vfiprintf_r+0x18>
 80137dc:	6983      	ldr	r3, [r0, #24]
 80137de:	b90b      	cbnz	r3, 80137e4 <_vfiprintf_r+0x18>
 80137e0:	f000 fb10 	bl	8013e04 <__sinit>
 80137e4:	4b89      	ldr	r3, [pc, #548]	; (8013a0c <_vfiprintf_r+0x240>)
 80137e6:	429d      	cmp	r5, r3
 80137e8:	d11b      	bne.n	8013822 <_vfiprintf_r+0x56>
 80137ea:	6875      	ldr	r5, [r6, #4]
 80137ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80137ee:	07d9      	lsls	r1, r3, #31
 80137f0:	d405      	bmi.n	80137fe <_vfiprintf_r+0x32>
 80137f2:	89ab      	ldrh	r3, [r5, #12]
 80137f4:	059a      	lsls	r2, r3, #22
 80137f6:	d402      	bmi.n	80137fe <_vfiprintf_r+0x32>
 80137f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80137fa:	f7ff ff62 	bl	80136c2 <__retarget_lock_acquire_recursive>
 80137fe:	89ab      	ldrh	r3, [r5, #12]
 8013800:	071b      	lsls	r3, r3, #28
 8013802:	d501      	bpl.n	8013808 <_vfiprintf_r+0x3c>
 8013804:	692b      	ldr	r3, [r5, #16]
 8013806:	b9eb      	cbnz	r3, 8013844 <_vfiprintf_r+0x78>
 8013808:	4629      	mov	r1, r5
 801380a:	4630      	mov	r0, r6
 801380c:	f000 f96e 	bl	8013aec <__swsetup_r>
 8013810:	b1c0      	cbz	r0, 8013844 <_vfiprintf_r+0x78>
 8013812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013814:	07dc      	lsls	r4, r3, #31
 8013816:	d50e      	bpl.n	8013836 <_vfiprintf_r+0x6a>
 8013818:	f04f 30ff 	mov.w	r0, #4294967295
 801381c:	b01d      	add	sp, #116	; 0x74
 801381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013822:	4b7b      	ldr	r3, [pc, #492]	; (8013a10 <_vfiprintf_r+0x244>)
 8013824:	429d      	cmp	r5, r3
 8013826:	d101      	bne.n	801382c <_vfiprintf_r+0x60>
 8013828:	68b5      	ldr	r5, [r6, #8]
 801382a:	e7df      	b.n	80137ec <_vfiprintf_r+0x20>
 801382c:	4b79      	ldr	r3, [pc, #484]	; (8013a14 <_vfiprintf_r+0x248>)
 801382e:	429d      	cmp	r5, r3
 8013830:	bf08      	it	eq
 8013832:	68f5      	ldreq	r5, [r6, #12]
 8013834:	e7da      	b.n	80137ec <_vfiprintf_r+0x20>
 8013836:	89ab      	ldrh	r3, [r5, #12]
 8013838:	0598      	lsls	r0, r3, #22
 801383a:	d4ed      	bmi.n	8013818 <_vfiprintf_r+0x4c>
 801383c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801383e:	f7ff ff41 	bl	80136c4 <__retarget_lock_release_recursive>
 8013842:	e7e9      	b.n	8013818 <_vfiprintf_r+0x4c>
 8013844:	2300      	movs	r3, #0
 8013846:	9309      	str	r3, [sp, #36]	; 0x24
 8013848:	2320      	movs	r3, #32
 801384a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801384e:	2330      	movs	r3, #48	; 0x30
 8013850:	f04f 0901 	mov.w	r9, #1
 8013854:	f8cd 800c 	str.w	r8, [sp, #12]
 8013858:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8013a18 <_vfiprintf_r+0x24c>
 801385c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013860:	4623      	mov	r3, r4
 8013862:	469a      	mov	sl, r3
 8013864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013868:	b10a      	cbz	r2, 801386e <_vfiprintf_r+0xa2>
 801386a:	2a25      	cmp	r2, #37	; 0x25
 801386c:	d1f9      	bne.n	8013862 <_vfiprintf_r+0x96>
 801386e:	ebba 0b04 	subs.w	fp, sl, r4
 8013872:	d00b      	beq.n	801388c <_vfiprintf_r+0xc0>
 8013874:	465b      	mov	r3, fp
 8013876:	4622      	mov	r2, r4
 8013878:	4629      	mov	r1, r5
 801387a:	4630      	mov	r0, r6
 801387c:	f7ff ff93 	bl	80137a6 <__sfputs_r>
 8013880:	3001      	adds	r0, #1
 8013882:	f000 80aa 	beq.w	80139da <_vfiprintf_r+0x20e>
 8013886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013888:	445a      	add	r2, fp
 801388a:	9209      	str	r2, [sp, #36]	; 0x24
 801388c:	f89a 3000 	ldrb.w	r3, [sl]
 8013890:	2b00      	cmp	r3, #0
 8013892:	f000 80a2 	beq.w	80139da <_vfiprintf_r+0x20e>
 8013896:	2300      	movs	r3, #0
 8013898:	f04f 32ff 	mov.w	r2, #4294967295
 801389c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138a0:	f10a 0a01 	add.w	sl, sl, #1
 80138a4:	9304      	str	r3, [sp, #16]
 80138a6:	9307      	str	r3, [sp, #28]
 80138a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80138ac:	931a      	str	r3, [sp, #104]	; 0x68
 80138ae:	4654      	mov	r4, sl
 80138b0:	2205      	movs	r2, #5
 80138b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138b6:	4858      	ldr	r0, [pc, #352]	; (8013a18 <_vfiprintf_r+0x24c>)
 80138b8:	f7ff f9b8 	bl	8012c2c <memchr>
 80138bc:	9a04      	ldr	r2, [sp, #16]
 80138be:	b9d8      	cbnz	r0, 80138f8 <_vfiprintf_r+0x12c>
 80138c0:	06d1      	lsls	r1, r2, #27
 80138c2:	bf44      	itt	mi
 80138c4:	2320      	movmi	r3, #32
 80138c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138ca:	0713      	lsls	r3, r2, #28
 80138cc:	bf44      	itt	mi
 80138ce:	232b      	movmi	r3, #43	; 0x2b
 80138d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80138d4:	f89a 3000 	ldrb.w	r3, [sl]
 80138d8:	2b2a      	cmp	r3, #42	; 0x2a
 80138da:	d015      	beq.n	8013908 <_vfiprintf_r+0x13c>
 80138dc:	4654      	mov	r4, sl
 80138de:	2000      	movs	r0, #0
 80138e0:	f04f 0c0a 	mov.w	ip, #10
 80138e4:	9a07      	ldr	r2, [sp, #28]
 80138e6:	4621      	mov	r1, r4
 80138e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138ec:	3b30      	subs	r3, #48	; 0x30
 80138ee:	2b09      	cmp	r3, #9
 80138f0:	d94e      	bls.n	8013990 <_vfiprintf_r+0x1c4>
 80138f2:	b1b0      	cbz	r0, 8013922 <_vfiprintf_r+0x156>
 80138f4:	9207      	str	r2, [sp, #28]
 80138f6:	e014      	b.n	8013922 <_vfiprintf_r+0x156>
 80138f8:	eba0 0308 	sub.w	r3, r0, r8
 80138fc:	fa09 f303 	lsl.w	r3, r9, r3
 8013900:	4313      	orrs	r3, r2
 8013902:	46a2      	mov	sl, r4
 8013904:	9304      	str	r3, [sp, #16]
 8013906:	e7d2      	b.n	80138ae <_vfiprintf_r+0xe2>
 8013908:	9b03      	ldr	r3, [sp, #12]
 801390a:	1d19      	adds	r1, r3, #4
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	9103      	str	r1, [sp, #12]
 8013910:	2b00      	cmp	r3, #0
 8013912:	bfbb      	ittet	lt
 8013914:	425b      	neglt	r3, r3
 8013916:	f042 0202 	orrlt.w	r2, r2, #2
 801391a:	9307      	strge	r3, [sp, #28]
 801391c:	9307      	strlt	r3, [sp, #28]
 801391e:	bfb8      	it	lt
 8013920:	9204      	strlt	r2, [sp, #16]
 8013922:	7823      	ldrb	r3, [r4, #0]
 8013924:	2b2e      	cmp	r3, #46	; 0x2e
 8013926:	d10c      	bne.n	8013942 <_vfiprintf_r+0x176>
 8013928:	7863      	ldrb	r3, [r4, #1]
 801392a:	2b2a      	cmp	r3, #42	; 0x2a
 801392c:	d135      	bne.n	801399a <_vfiprintf_r+0x1ce>
 801392e:	9b03      	ldr	r3, [sp, #12]
 8013930:	3402      	adds	r4, #2
 8013932:	1d1a      	adds	r2, r3, #4
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	9203      	str	r2, [sp, #12]
 8013938:	2b00      	cmp	r3, #0
 801393a:	bfb8      	it	lt
 801393c:	f04f 33ff 	movlt.w	r3, #4294967295
 8013940:	9305      	str	r3, [sp, #20]
 8013942:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013a1c <_vfiprintf_r+0x250>
 8013946:	2203      	movs	r2, #3
 8013948:	4650      	mov	r0, sl
 801394a:	7821      	ldrb	r1, [r4, #0]
 801394c:	f7ff f96e 	bl	8012c2c <memchr>
 8013950:	b140      	cbz	r0, 8013964 <_vfiprintf_r+0x198>
 8013952:	2340      	movs	r3, #64	; 0x40
 8013954:	eba0 000a 	sub.w	r0, r0, sl
 8013958:	fa03 f000 	lsl.w	r0, r3, r0
 801395c:	9b04      	ldr	r3, [sp, #16]
 801395e:	3401      	adds	r4, #1
 8013960:	4303      	orrs	r3, r0
 8013962:	9304      	str	r3, [sp, #16]
 8013964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013968:	2206      	movs	r2, #6
 801396a:	482d      	ldr	r0, [pc, #180]	; (8013a20 <_vfiprintf_r+0x254>)
 801396c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013970:	f7ff f95c 	bl	8012c2c <memchr>
 8013974:	2800      	cmp	r0, #0
 8013976:	d03f      	beq.n	80139f8 <_vfiprintf_r+0x22c>
 8013978:	4b2a      	ldr	r3, [pc, #168]	; (8013a24 <_vfiprintf_r+0x258>)
 801397a:	bb1b      	cbnz	r3, 80139c4 <_vfiprintf_r+0x1f8>
 801397c:	9b03      	ldr	r3, [sp, #12]
 801397e:	3307      	adds	r3, #7
 8013980:	f023 0307 	bic.w	r3, r3, #7
 8013984:	3308      	adds	r3, #8
 8013986:	9303      	str	r3, [sp, #12]
 8013988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801398a:	443b      	add	r3, r7
 801398c:	9309      	str	r3, [sp, #36]	; 0x24
 801398e:	e767      	b.n	8013860 <_vfiprintf_r+0x94>
 8013990:	460c      	mov	r4, r1
 8013992:	2001      	movs	r0, #1
 8013994:	fb0c 3202 	mla	r2, ip, r2, r3
 8013998:	e7a5      	b.n	80138e6 <_vfiprintf_r+0x11a>
 801399a:	2300      	movs	r3, #0
 801399c:	f04f 0c0a 	mov.w	ip, #10
 80139a0:	4619      	mov	r1, r3
 80139a2:	3401      	adds	r4, #1
 80139a4:	9305      	str	r3, [sp, #20]
 80139a6:	4620      	mov	r0, r4
 80139a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139ac:	3a30      	subs	r2, #48	; 0x30
 80139ae:	2a09      	cmp	r2, #9
 80139b0:	d903      	bls.n	80139ba <_vfiprintf_r+0x1ee>
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d0c5      	beq.n	8013942 <_vfiprintf_r+0x176>
 80139b6:	9105      	str	r1, [sp, #20]
 80139b8:	e7c3      	b.n	8013942 <_vfiprintf_r+0x176>
 80139ba:	4604      	mov	r4, r0
 80139bc:	2301      	movs	r3, #1
 80139be:	fb0c 2101 	mla	r1, ip, r1, r2
 80139c2:	e7f0      	b.n	80139a6 <_vfiprintf_r+0x1da>
 80139c4:	ab03      	add	r3, sp, #12
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	462a      	mov	r2, r5
 80139ca:	4630      	mov	r0, r6
 80139cc:	4b16      	ldr	r3, [pc, #88]	; (8013a28 <_vfiprintf_r+0x25c>)
 80139ce:	a904      	add	r1, sp, #16
 80139d0:	f7fd fea2 	bl	8011718 <_printf_float>
 80139d4:	4607      	mov	r7, r0
 80139d6:	1c78      	adds	r0, r7, #1
 80139d8:	d1d6      	bne.n	8013988 <_vfiprintf_r+0x1bc>
 80139da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139dc:	07d9      	lsls	r1, r3, #31
 80139de:	d405      	bmi.n	80139ec <_vfiprintf_r+0x220>
 80139e0:	89ab      	ldrh	r3, [r5, #12]
 80139e2:	059a      	lsls	r2, r3, #22
 80139e4:	d402      	bmi.n	80139ec <_vfiprintf_r+0x220>
 80139e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139e8:	f7ff fe6c 	bl	80136c4 <__retarget_lock_release_recursive>
 80139ec:	89ab      	ldrh	r3, [r5, #12]
 80139ee:	065b      	lsls	r3, r3, #25
 80139f0:	f53f af12 	bmi.w	8013818 <_vfiprintf_r+0x4c>
 80139f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80139f6:	e711      	b.n	801381c <_vfiprintf_r+0x50>
 80139f8:	ab03      	add	r3, sp, #12
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	462a      	mov	r2, r5
 80139fe:	4630      	mov	r0, r6
 8013a00:	4b09      	ldr	r3, [pc, #36]	; (8013a28 <_vfiprintf_r+0x25c>)
 8013a02:	a904      	add	r1, sp, #16
 8013a04:	f7fe f924 	bl	8011c50 <_printf_i>
 8013a08:	e7e4      	b.n	80139d4 <_vfiprintf_r+0x208>
 8013a0a:	bf00      	nop
 8013a0c:	08022644 	.word	0x08022644
 8013a10:	08022664 	.word	0x08022664
 8013a14:	08022624 	.word	0x08022624
 8013a18:	080224cc 	.word	0x080224cc
 8013a1c:	080224d2 	.word	0x080224d2
 8013a20:	080224d6 	.word	0x080224d6
 8013a24:	08011719 	.word	0x08011719
 8013a28:	080137a7 	.word	0x080137a7

08013a2c <__swbuf_r>:
 8013a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a2e:	460e      	mov	r6, r1
 8013a30:	4614      	mov	r4, r2
 8013a32:	4605      	mov	r5, r0
 8013a34:	b118      	cbz	r0, 8013a3e <__swbuf_r+0x12>
 8013a36:	6983      	ldr	r3, [r0, #24]
 8013a38:	b90b      	cbnz	r3, 8013a3e <__swbuf_r+0x12>
 8013a3a:	f000 f9e3 	bl	8013e04 <__sinit>
 8013a3e:	4b21      	ldr	r3, [pc, #132]	; (8013ac4 <__swbuf_r+0x98>)
 8013a40:	429c      	cmp	r4, r3
 8013a42:	d12b      	bne.n	8013a9c <__swbuf_r+0x70>
 8013a44:	686c      	ldr	r4, [r5, #4]
 8013a46:	69a3      	ldr	r3, [r4, #24]
 8013a48:	60a3      	str	r3, [r4, #8]
 8013a4a:	89a3      	ldrh	r3, [r4, #12]
 8013a4c:	071a      	lsls	r2, r3, #28
 8013a4e:	d52f      	bpl.n	8013ab0 <__swbuf_r+0x84>
 8013a50:	6923      	ldr	r3, [r4, #16]
 8013a52:	b36b      	cbz	r3, 8013ab0 <__swbuf_r+0x84>
 8013a54:	6923      	ldr	r3, [r4, #16]
 8013a56:	6820      	ldr	r0, [r4, #0]
 8013a58:	b2f6      	uxtb	r6, r6
 8013a5a:	1ac0      	subs	r0, r0, r3
 8013a5c:	6963      	ldr	r3, [r4, #20]
 8013a5e:	4637      	mov	r7, r6
 8013a60:	4283      	cmp	r3, r0
 8013a62:	dc04      	bgt.n	8013a6e <__swbuf_r+0x42>
 8013a64:	4621      	mov	r1, r4
 8013a66:	4628      	mov	r0, r5
 8013a68:	f000 f938 	bl	8013cdc <_fflush_r>
 8013a6c:	bb30      	cbnz	r0, 8013abc <__swbuf_r+0x90>
 8013a6e:	68a3      	ldr	r3, [r4, #8]
 8013a70:	3001      	adds	r0, #1
 8013a72:	3b01      	subs	r3, #1
 8013a74:	60a3      	str	r3, [r4, #8]
 8013a76:	6823      	ldr	r3, [r4, #0]
 8013a78:	1c5a      	adds	r2, r3, #1
 8013a7a:	6022      	str	r2, [r4, #0]
 8013a7c:	701e      	strb	r6, [r3, #0]
 8013a7e:	6963      	ldr	r3, [r4, #20]
 8013a80:	4283      	cmp	r3, r0
 8013a82:	d004      	beq.n	8013a8e <__swbuf_r+0x62>
 8013a84:	89a3      	ldrh	r3, [r4, #12]
 8013a86:	07db      	lsls	r3, r3, #31
 8013a88:	d506      	bpl.n	8013a98 <__swbuf_r+0x6c>
 8013a8a:	2e0a      	cmp	r6, #10
 8013a8c:	d104      	bne.n	8013a98 <__swbuf_r+0x6c>
 8013a8e:	4621      	mov	r1, r4
 8013a90:	4628      	mov	r0, r5
 8013a92:	f000 f923 	bl	8013cdc <_fflush_r>
 8013a96:	b988      	cbnz	r0, 8013abc <__swbuf_r+0x90>
 8013a98:	4638      	mov	r0, r7
 8013a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a9c:	4b0a      	ldr	r3, [pc, #40]	; (8013ac8 <__swbuf_r+0x9c>)
 8013a9e:	429c      	cmp	r4, r3
 8013aa0:	d101      	bne.n	8013aa6 <__swbuf_r+0x7a>
 8013aa2:	68ac      	ldr	r4, [r5, #8]
 8013aa4:	e7cf      	b.n	8013a46 <__swbuf_r+0x1a>
 8013aa6:	4b09      	ldr	r3, [pc, #36]	; (8013acc <__swbuf_r+0xa0>)
 8013aa8:	429c      	cmp	r4, r3
 8013aaa:	bf08      	it	eq
 8013aac:	68ec      	ldreq	r4, [r5, #12]
 8013aae:	e7ca      	b.n	8013a46 <__swbuf_r+0x1a>
 8013ab0:	4621      	mov	r1, r4
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	f000 f81a 	bl	8013aec <__swsetup_r>
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d0cb      	beq.n	8013a54 <__swbuf_r+0x28>
 8013abc:	f04f 37ff 	mov.w	r7, #4294967295
 8013ac0:	e7ea      	b.n	8013a98 <__swbuf_r+0x6c>
 8013ac2:	bf00      	nop
 8013ac4:	08022644 	.word	0x08022644
 8013ac8:	08022664 	.word	0x08022664
 8013acc:	08022624 	.word	0x08022624

08013ad0 <__ascii_wctomb>:
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	4608      	mov	r0, r1
 8013ad4:	b141      	cbz	r1, 8013ae8 <__ascii_wctomb+0x18>
 8013ad6:	2aff      	cmp	r2, #255	; 0xff
 8013ad8:	d904      	bls.n	8013ae4 <__ascii_wctomb+0x14>
 8013ada:	228a      	movs	r2, #138	; 0x8a
 8013adc:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae0:	601a      	str	r2, [r3, #0]
 8013ae2:	4770      	bx	lr
 8013ae4:	2001      	movs	r0, #1
 8013ae6:	700a      	strb	r2, [r1, #0]
 8013ae8:	4770      	bx	lr
	...

08013aec <__swsetup_r>:
 8013aec:	4b32      	ldr	r3, [pc, #200]	; (8013bb8 <__swsetup_r+0xcc>)
 8013aee:	b570      	push	{r4, r5, r6, lr}
 8013af0:	681d      	ldr	r5, [r3, #0]
 8013af2:	4606      	mov	r6, r0
 8013af4:	460c      	mov	r4, r1
 8013af6:	b125      	cbz	r5, 8013b02 <__swsetup_r+0x16>
 8013af8:	69ab      	ldr	r3, [r5, #24]
 8013afa:	b913      	cbnz	r3, 8013b02 <__swsetup_r+0x16>
 8013afc:	4628      	mov	r0, r5
 8013afe:	f000 f981 	bl	8013e04 <__sinit>
 8013b02:	4b2e      	ldr	r3, [pc, #184]	; (8013bbc <__swsetup_r+0xd0>)
 8013b04:	429c      	cmp	r4, r3
 8013b06:	d10f      	bne.n	8013b28 <__swsetup_r+0x3c>
 8013b08:	686c      	ldr	r4, [r5, #4]
 8013b0a:	89a3      	ldrh	r3, [r4, #12]
 8013b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b10:	0719      	lsls	r1, r3, #28
 8013b12:	d42c      	bmi.n	8013b6e <__swsetup_r+0x82>
 8013b14:	06dd      	lsls	r5, r3, #27
 8013b16:	d411      	bmi.n	8013b3c <__swsetup_r+0x50>
 8013b18:	2309      	movs	r3, #9
 8013b1a:	6033      	str	r3, [r6, #0]
 8013b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013b20:	f04f 30ff 	mov.w	r0, #4294967295
 8013b24:	81a3      	strh	r3, [r4, #12]
 8013b26:	e03e      	b.n	8013ba6 <__swsetup_r+0xba>
 8013b28:	4b25      	ldr	r3, [pc, #148]	; (8013bc0 <__swsetup_r+0xd4>)
 8013b2a:	429c      	cmp	r4, r3
 8013b2c:	d101      	bne.n	8013b32 <__swsetup_r+0x46>
 8013b2e:	68ac      	ldr	r4, [r5, #8]
 8013b30:	e7eb      	b.n	8013b0a <__swsetup_r+0x1e>
 8013b32:	4b24      	ldr	r3, [pc, #144]	; (8013bc4 <__swsetup_r+0xd8>)
 8013b34:	429c      	cmp	r4, r3
 8013b36:	bf08      	it	eq
 8013b38:	68ec      	ldreq	r4, [r5, #12]
 8013b3a:	e7e6      	b.n	8013b0a <__swsetup_r+0x1e>
 8013b3c:	0758      	lsls	r0, r3, #29
 8013b3e:	d512      	bpl.n	8013b66 <__swsetup_r+0x7a>
 8013b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b42:	b141      	cbz	r1, 8013b56 <__swsetup_r+0x6a>
 8013b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b48:	4299      	cmp	r1, r3
 8013b4a:	d002      	beq.n	8013b52 <__swsetup_r+0x66>
 8013b4c:	4630      	mov	r0, r6
 8013b4e:	f7fd fc69 	bl	8011424 <_free_r>
 8013b52:	2300      	movs	r3, #0
 8013b54:	6363      	str	r3, [r4, #52]	; 0x34
 8013b56:	89a3      	ldrh	r3, [r4, #12]
 8013b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013b5c:	81a3      	strh	r3, [r4, #12]
 8013b5e:	2300      	movs	r3, #0
 8013b60:	6063      	str	r3, [r4, #4]
 8013b62:	6923      	ldr	r3, [r4, #16]
 8013b64:	6023      	str	r3, [r4, #0]
 8013b66:	89a3      	ldrh	r3, [r4, #12]
 8013b68:	f043 0308 	orr.w	r3, r3, #8
 8013b6c:	81a3      	strh	r3, [r4, #12]
 8013b6e:	6923      	ldr	r3, [r4, #16]
 8013b70:	b94b      	cbnz	r3, 8013b86 <__swsetup_r+0x9a>
 8013b72:	89a3      	ldrh	r3, [r4, #12]
 8013b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b7c:	d003      	beq.n	8013b86 <__swsetup_r+0x9a>
 8013b7e:	4621      	mov	r1, r4
 8013b80:	4630      	mov	r0, r6
 8013b82:	f000 fa01 	bl	8013f88 <__smakebuf_r>
 8013b86:	89a0      	ldrh	r0, [r4, #12]
 8013b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013b8c:	f010 0301 	ands.w	r3, r0, #1
 8013b90:	d00a      	beq.n	8013ba8 <__swsetup_r+0xbc>
 8013b92:	2300      	movs	r3, #0
 8013b94:	60a3      	str	r3, [r4, #8]
 8013b96:	6963      	ldr	r3, [r4, #20]
 8013b98:	425b      	negs	r3, r3
 8013b9a:	61a3      	str	r3, [r4, #24]
 8013b9c:	6923      	ldr	r3, [r4, #16]
 8013b9e:	b943      	cbnz	r3, 8013bb2 <__swsetup_r+0xc6>
 8013ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013ba4:	d1ba      	bne.n	8013b1c <__swsetup_r+0x30>
 8013ba6:	bd70      	pop	{r4, r5, r6, pc}
 8013ba8:	0781      	lsls	r1, r0, #30
 8013baa:	bf58      	it	pl
 8013bac:	6963      	ldrpl	r3, [r4, #20]
 8013bae:	60a3      	str	r3, [r4, #8]
 8013bb0:	e7f4      	b.n	8013b9c <__swsetup_r+0xb0>
 8013bb2:	2000      	movs	r0, #0
 8013bb4:	e7f7      	b.n	8013ba6 <__swsetup_r+0xba>
 8013bb6:	bf00      	nop
 8013bb8:	2000b704 	.word	0x2000b704
 8013bbc:	08022644 	.word	0x08022644
 8013bc0:	08022664 	.word	0x08022664
 8013bc4:	08022624 	.word	0x08022624

08013bc8 <abort>:
 8013bc8:	2006      	movs	r0, #6
 8013bca:	b508      	push	{r3, lr}
 8013bcc:	f000 fa4c 	bl	8014068 <raise>
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	f7ef fb3e 	bl	8003252 <_exit>
	...

08013bd8 <__sflush_r>:
 8013bd8:	898a      	ldrh	r2, [r1, #12]
 8013bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bdc:	4605      	mov	r5, r0
 8013bde:	0710      	lsls	r0, r2, #28
 8013be0:	460c      	mov	r4, r1
 8013be2:	d457      	bmi.n	8013c94 <__sflush_r+0xbc>
 8013be4:	684b      	ldr	r3, [r1, #4]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	dc04      	bgt.n	8013bf4 <__sflush_r+0x1c>
 8013bea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	dc01      	bgt.n	8013bf4 <__sflush_r+0x1c>
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bf6:	2e00      	cmp	r6, #0
 8013bf8:	d0fa      	beq.n	8013bf0 <__sflush_r+0x18>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013c00:	682f      	ldr	r7, [r5, #0]
 8013c02:	602b      	str	r3, [r5, #0]
 8013c04:	d032      	beq.n	8013c6c <__sflush_r+0x94>
 8013c06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013c08:	89a3      	ldrh	r3, [r4, #12]
 8013c0a:	075a      	lsls	r2, r3, #29
 8013c0c:	d505      	bpl.n	8013c1a <__sflush_r+0x42>
 8013c0e:	6863      	ldr	r3, [r4, #4]
 8013c10:	1ac0      	subs	r0, r0, r3
 8013c12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013c14:	b10b      	cbz	r3, 8013c1a <__sflush_r+0x42>
 8013c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013c18:	1ac0      	subs	r0, r0, r3
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c20:	4628      	mov	r0, r5
 8013c22:	6a21      	ldr	r1, [r4, #32]
 8013c24:	47b0      	blx	r6
 8013c26:	1c43      	adds	r3, r0, #1
 8013c28:	89a3      	ldrh	r3, [r4, #12]
 8013c2a:	d106      	bne.n	8013c3a <__sflush_r+0x62>
 8013c2c:	6829      	ldr	r1, [r5, #0]
 8013c2e:	291d      	cmp	r1, #29
 8013c30:	d82c      	bhi.n	8013c8c <__sflush_r+0xb4>
 8013c32:	4a29      	ldr	r2, [pc, #164]	; (8013cd8 <__sflush_r+0x100>)
 8013c34:	40ca      	lsrs	r2, r1
 8013c36:	07d6      	lsls	r6, r2, #31
 8013c38:	d528      	bpl.n	8013c8c <__sflush_r+0xb4>
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	6062      	str	r2, [r4, #4]
 8013c3e:	6922      	ldr	r2, [r4, #16]
 8013c40:	04d9      	lsls	r1, r3, #19
 8013c42:	6022      	str	r2, [r4, #0]
 8013c44:	d504      	bpl.n	8013c50 <__sflush_r+0x78>
 8013c46:	1c42      	adds	r2, r0, #1
 8013c48:	d101      	bne.n	8013c4e <__sflush_r+0x76>
 8013c4a:	682b      	ldr	r3, [r5, #0]
 8013c4c:	b903      	cbnz	r3, 8013c50 <__sflush_r+0x78>
 8013c4e:	6560      	str	r0, [r4, #84]	; 0x54
 8013c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c52:	602f      	str	r7, [r5, #0]
 8013c54:	2900      	cmp	r1, #0
 8013c56:	d0cb      	beq.n	8013bf0 <__sflush_r+0x18>
 8013c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c5c:	4299      	cmp	r1, r3
 8013c5e:	d002      	beq.n	8013c66 <__sflush_r+0x8e>
 8013c60:	4628      	mov	r0, r5
 8013c62:	f7fd fbdf 	bl	8011424 <_free_r>
 8013c66:	2000      	movs	r0, #0
 8013c68:	6360      	str	r0, [r4, #52]	; 0x34
 8013c6a:	e7c2      	b.n	8013bf2 <__sflush_r+0x1a>
 8013c6c:	6a21      	ldr	r1, [r4, #32]
 8013c6e:	2301      	movs	r3, #1
 8013c70:	4628      	mov	r0, r5
 8013c72:	47b0      	blx	r6
 8013c74:	1c41      	adds	r1, r0, #1
 8013c76:	d1c7      	bne.n	8013c08 <__sflush_r+0x30>
 8013c78:	682b      	ldr	r3, [r5, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d0c4      	beq.n	8013c08 <__sflush_r+0x30>
 8013c7e:	2b1d      	cmp	r3, #29
 8013c80:	d001      	beq.n	8013c86 <__sflush_r+0xae>
 8013c82:	2b16      	cmp	r3, #22
 8013c84:	d101      	bne.n	8013c8a <__sflush_r+0xb2>
 8013c86:	602f      	str	r7, [r5, #0]
 8013c88:	e7b2      	b.n	8013bf0 <__sflush_r+0x18>
 8013c8a:	89a3      	ldrh	r3, [r4, #12]
 8013c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c90:	81a3      	strh	r3, [r4, #12]
 8013c92:	e7ae      	b.n	8013bf2 <__sflush_r+0x1a>
 8013c94:	690f      	ldr	r7, [r1, #16]
 8013c96:	2f00      	cmp	r7, #0
 8013c98:	d0aa      	beq.n	8013bf0 <__sflush_r+0x18>
 8013c9a:	0793      	lsls	r3, r2, #30
 8013c9c:	bf18      	it	ne
 8013c9e:	2300      	movne	r3, #0
 8013ca0:	680e      	ldr	r6, [r1, #0]
 8013ca2:	bf08      	it	eq
 8013ca4:	694b      	ldreq	r3, [r1, #20]
 8013ca6:	1bf6      	subs	r6, r6, r7
 8013ca8:	600f      	str	r7, [r1, #0]
 8013caa:	608b      	str	r3, [r1, #8]
 8013cac:	2e00      	cmp	r6, #0
 8013cae:	dd9f      	ble.n	8013bf0 <__sflush_r+0x18>
 8013cb0:	4633      	mov	r3, r6
 8013cb2:	463a      	mov	r2, r7
 8013cb4:	4628      	mov	r0, r5
 8013cb6:	6a21      	ldr	r1, [r4, #32]
 8013cb8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8013cbc:	47e0      	blx	ip
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	dc06      	bgt.n	8013cd0 <__sflush_r+0xf8>
 8013cc2:	89a3      	ldrh	r3, [r4, #12]
 8013cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ccc:	81a3      	strh	r3, [r4, #12]
 8013cce:	e790      	b.n	8013bf2 <__sflush_r+0x1a>
 8013cd0:	4407      	add	r7, r0
 8013cd2:	1a36      	subs	r6, r6, r0
 8013cd4:	e7ea      	b.n	8013cac <__sflush_r+0xd4>
 8013cd6:	bf00      	nop
 8013cd8:	20400001 	.word	0x20400001

08013cdc <_fflush_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	690b      	ldr	r3, [r1, #16]
 8013ce0:	4605      	mov	r5, r0
 8013ce2:	460c      	mov	r4, r1
 8013ce4:	b913      	cbnz	r3, 8013cec <_fflush_r+0x10>
 8013ce6:	2500      	movs	r5, #0
 8013ce8:	4628      	mov	r0, r5
 8013cea:	bd38      	pop	{r3, r4, r5, pc}
 8013cec:	b118      	cbz	r0, 8013cf6 <_fflush_r+0x1a>
 8013cee:	6983      	ldr	r3, [r0, #24]
 8013cf0:	b90b      	cbnz	r3, 8013cf6 <_fflush_r+0x1a>
 8013cf2:	f000 f887 	bl	8013e04 <__sinit>
 8013cf6:	4b14      	ldr	r3, [pc, #80]	; (8013d48 <_fflush_r+0x6c>)
 8013cf8:	429c      	cmp	r4, r3
 8013cfa:	d11b      	bne.n	8013d34 <_fflush_r+0x58>
 8013cfc:	686c      	ldr	r4, [r5, #4]
 8013cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d0ef      	beq.n	8013ce6 <_fflush_r+0xa>
 8013d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013d08:	07d0      	lsls	r0, r2, #31
 8013d0a:	d404      	bmi.n	8013d16 <_fflush_r+0x3a>
 8013d0c:	0599      	lsls	r1, r3, #22
 8013d0e:	d402      	bmi.n	8013d16 <_fflush_r+0x3a>
 8013d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d12:	f7ff fcd6 	bl	80136c2 <__retarget_lock_acquire_recursive>
 8013d16:	4628      	mov	r0, r5
 8013d18:	4621      	mov	r1, r4
 8013d1a:	f7ff ff5d 	bl	8013bd8 <__sflush_r>
 8013d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013d20:	4605      	mov	r5, r0
 8013d22:	07da      	lsls	r2, r3, #31
 8013d24:	d4e0      	bmi.n	8013ce8 <_fflush_r+0xc>
 8013d26:	89a3      	ldrh	r3, [r4, #12]
 8013d28:	059b      	lsls	r3, r3, #22
 8013d2a:	d4dd      	bmi.n	8013ce8 <_fflush_r+0xc>
 8013d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013d2e:	f7ff fcc9 	bl	80136c4 <__retarget_lock_release_recursive>
 8013d32:	e7d9      	b.n	8013ce8 <_fflush_r+0xc>
 8013d34:	4b05      	ldr	r3, [pc, #20]	; (8013d4c <_fflush_r+0x70>)
 8013d36:	429c      	cmp	r4, r3
 8013d38:	d101      	bne.n	8013d3e <_fflush_r+0x62>
 8013d3a:	68ac      	ldr	r4, [r5, #8]
 8013d3c:	e7df      	b.n	8013cfe <_fflush_r+0x22>
 8013d3e:	4b04      	ldr	r3, [pc, #16]	; (8013d50 <_fflush_r+0x74>)
 8013d40:	429c      	cmp	r4, r3
 8013d42:	bf08      	it	eq
 8013d44:	68ec      	ldreq	r4, [r5, #12]
 8013d46:	e7da      	b.n	8013cfe <_fflush_r+0x22>
 8013d48:	08022644 	.word	0x08022644
 8013d4c:	08022664 	.word	0x08022664
 8013d50:	08022624 	.word	0x08022624

08013d54 <std>:
 8013d54:	2300      	movs	r3, #0
 8013d56:	b510      	push	{r4, lr}
 8013d58:	4604      	mov	r4, r0
 8013d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8013d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d62:	6083      	str	r3, [r0, #8]
 8013d64:	8181      	strh	r1, [r0, #12]
 8013d66:	6643      	str	r3, [r0, #100]	; 0x64
 8013d68:	81c2      	strh	r2, [r0, #14]
 8013d6a:	6183      	str	r3, [r0, #24]
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	2208      	movs	r2, #8
 8013d70:	305c      	adds	r0, #92	; 0x5c
 8013d72:	f7fd fb4f 	bl	8011414 <memset>
 8013d76:	4b05      	ldr	r3, [pc, #20]	; (8013d8c <std+0x38>)
 8013d78:	6224      	str	r4, [r4, #32]
 8013d7a:	6263      	str	r3, [r4, #36]	; 0x24
 8013d7c:	4b04      	ldr	r3, [pc, #16]	; (8013d90 <std+0x3c>)
 8013d7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d80:	4b04      	ldr	r3, [pc, #16]	; (8013d94 <std+0x40>)
 8013d82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d84:	4b04      	ldr	r3, [pc, #16]	; (8013d98 <std+0x44>)
 8013d86:	6323      	str	r3, [r4, #48]	; 0x30
 8013d88:	bd10      	pop	{r4, pc}
 8013d8a:	bf00      	nop
 8013d8c:	080140a1 	.word	0x080140a1
 8013d90:	080140c3 	.word	0x080140c3
 8013d94:	080140fb 	.word	0x080140fb
 8013d98:	0801411f 	.word	0x0801411f

08013d9c <_cleanup_r>:
 8013d9c:	4901      	ldr	r1, [pc, #4]	; (8013da4 <_cleanup_r+0x8>)
 8013d9e:	f000 b8af 	b.w	8013f00 <_fwalk_reent>
 8013da2:	bf00      	nop
 8013da4:	08013cdd 	.word	0x08013cdd

08013da8 <__sfmoreglue>:
 8013da8:	2268      	movs	r2, #104	; 0x68
 8013daa:	b570      	push	{r4, r5, r6, lr}
 8013dac:	1e4d      	subs	r5, r1, #1
 8013dae:	4355      	muls	r5, r2
 8013db0:	460e      	mov	r6, r1
 8013db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013db6:	f7fd fb9d 	bl	80114f4 <_malloc_r>
 8013dba:	4604      	mov	r4, r0
 8013dbc:	b140      	cbz	r0, 8013dd0 <__sfmoreglue+0x28>
 8013dbe:	2100      	movs	r1, #0
 8013dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8013dc4:	300c      	adds	r0, #12
 8013dc6:	60a0      	str	r0, [r4, #8]
 8013dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013dcc:	f7fd fb22 	bl	8011414 <memset>
 8013dd0:	4620      	mov	r0, r4
 8013dd2:	bd70      	pop	{r4, r5, r6, pc}

08013dd4 <__sfp_lock_acquire>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	; (8013ddc <__sfp_lock_acquire+0x8>)
 8013dd6:	f7ff bc74 	b.w	80136c2 <__retarget_lock_acquire_recursive>
 8013dda:	bf00      	nop
 8013ddc:	2000cbf5 	.word	0x2000cbf5

08013de0 <__sfp_lock_release>:
 8013de0:	4801      	ldr	r0, [pc, #4]	; (8013de8 <__sfp_lock_release+0x8>)
 8013de2:	f7ff bc6f 	b.w	80136c4 <__retarget_lock_release_recursive>
 8013de6:	bf00      	nop
 8013de8:	2000cbf5 	.word	0x2000cbf5

08013dec <__sinit_lock_acquire>:
 8013dec:	4801      	ldr	r0, [pc, #4]	; (8013df4 <__sinit_lock_acquire+0x8>)
 8013dee:	f7ff bc68 	b.w	80136c2 <__retarget_lock_acquire_recursive>
 8013df2:	bf00      	nop
 8013df4:	2000cbf6 	.word	0x2000cbf6

08013df8 <__sinit_lock_release>:
 8013df8:	4801      	ldr	r0, [pc, #4]	; (8013e00 <__sinit_lock_release+0x8>)
 8013dfa:	f7ff bc63 	b.w	80136c4 <__retarget_lock_release_recursive>
 8013dfe:	bf00      	nop
 8013e00:	2000cbf6 	.word	0x2000cbf6

08013e04 <__sinit>:
 8013e04:	b510      	push	{r4, lr}
 8013e06:	4604      	mov	r4, r0
 8013e08:	f7ff fff0 	bl	8013dec <__sinit_lock_acquire>
 8013e0c:	69a3      	ldr	r3, [r4, #24]
 8013e0e:	b11b      	cbz	r3, 8013e18 <__sinit+0x14>
 8013e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e14:	f7ff bff0 	b.w	8013df8 <__sinit_lock_release>
 8013e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8013e1e:	4b13      	ldr	r3, [pc, #76]	; (8013e6c <__sinit+0x68>)
 8013e20:	4a13      	ldr	r2, [pc, #76]	; (8013e70 <__sinit+0x6c>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8013e26:	42a3      	cmp	r3, r4
 8013e28:	bf08      	it	eq
 8013e2a:	2301      	moveq	r3, #1
 8013e2c:	4620      	mov	r0, r4
 8013e2e:	bf08      	it	eq
 8013e30:	61a3      	streq	r3, [r4, #24]
 8013e32:	f000 f81f 	bl	8013e74 <__sfp>
 8013e36:	6060      	str	r0, [r4, #4]
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f000 f81b 	bl	8013e74 <__sfp>
 8013e3e:	60a0      	str	r0, [r4, #8]
 8013e40:	4620      	mov	r0, r4
 8013e42:	f000 f817 	bl	8013e74 <__sfp>
 8013e46:	2200      	movs	r2, #0
 8013e48:	2104      	movs	r1, #4
 8013e4a:	60e0      	str	r0, [r4, #12]
 8013e4c:	6860      	ldr	r0, [r4, #4]
 8013e4e:	f7ff ff81 	bl	8013d54 <std>
 8013e52:	2201      	movs	r2, #1
 8013e54:	2109      	movs	r1, #9
 8013e56:	68a0      	ldr	r0, [r4, #8]
 8013e58:	f7ff ff7c 	bl	8013d54 <std>
 8013e5c:	2202      	movs	r2, #2
 8013e5e:	2112      	movs	r1, #18
 8013e60:	68e0      	ldr	r0, [r4, #12]
 8013e62:	f7ff ff77 	bl	8013d54 <std>
 8013e66:	2301      	movs	r3, #1
 8013e68:	61a3      	str	r3, [r4, #24]
 8013e6a:	e7d1      	b.n	8013e10 <__sinit+0xc>
 8013e6c:	080222a8 	.word	0x080222a8
 8013e70:	08013d9d 	.word	0x08013d9d

08013e74 <__sfp>:
 8013e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e76:	4607      	mov	r7, r0
 8013e78:	f7ff ffac 	bl	8013dd4 <__sfp_lock_acquire>
 8013e7c:	4b1e      	ldr	r3, [pc, #120]	; (8013ef8 <__sfp+0x84>)
 8013e7e:	681e      	ldr	r6, [r3, #0]
 8013e80:	69b3      	ldr	r3, [r6, #24]
 8013e82:	b913      	cbnz	r3, 8013e8a <__sfp+0x16>
 8013e84:	4630      	mov	r0, r6
 8013e86:	f7ff ffbd 	bl	8013e04 <__sinit>
 8013e8a:	3648      	adds	r6, #72	; 0x48
 8013e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e90:	3b01      	subs	r3, #1
 8013e92:	d503      	bpl.n	8013e9c <__sfp+0x28>
 8013e94:	6833      	ldr	r3, [r6, #0]
 8013e96:	b30b      	cbz	r3, 8013edc <__sfp+0x68>
 8013e98:	6836      	ldr	r6, [r6, #0]
 8013e9a:	e7f7      	b.n	8013e8c <__sfp+0x18>
 8013e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013ea0:	b9d5      	cbnz	r5, 8013ed8 <__sfp+0x64>
 8013ea2:	4b16      	ldr	r3, [pc, #88]	; (8013efc <__sfp+0x88>)
 8013ea4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013ea8:	60e3      	str	r3, [r4, #12]
 8013eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8013eac:	f7ff fc08 	bl	80136c0 <__retarget_lock_init_recursive>
 8013eb0:	f7ff ff96 	bl	8013de0 <__sfp_lock_release>
 8013eb4:	2208      	movs	r2, #8
 8013eb6:	4629      	mov	r1, r5
 8013eb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013ebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013ec0:	6025      	str	r5, [r4, #0]
 8013ec2:	61a5      	str	r5, [r4, #24]
 8013ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013ec8:	f7fd faa4 	bl	8011414 <memset>
 8013ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ed8:	3468      	adds	r4, #104	; 0x68
 8013eda:	e7d9      	b.n	8013e90 <__sfp+0x1c>
 8013edc:	2104      	movs	r1, #4
 8013ede:	4638      	mov	r0, r7
 8013ee0:	f7ff ff62 	bl	8013da8 <__sfmoreglue>
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	6030      	str	r0, [r6, #0]
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	d1d5      	bne.n	8013e98 <__sfp+0x24>
 8013eec:	f7ff ff78 	bl	8013de0 <__sfp_lock_release>
 8013ef0:	230c      	movs	r3, #12
 8013ef2:	603b      	str	r3, [r7, #0]
 8013ef4:	e7ee      	b.n	8013ed4 <__sfp+0x60>
 8013ef6:	bf00      	nop
 8013ef8:	080222a8 	.word	0x080222a8
 8013efc:	ffff0001 	.word	0xffff0001

08013f00 <_fwalk_reent>:
 8013f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f04:	4606      	mov	r6, r0
 8013f06:	4688      	mov	r8, r1
 8013f08:	2700      	movs	r7, #0
 8013f0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013f12:	f1b9 0901 	subs.w	r9, r9, #1
 8013f16:	d505      	bpl.n	8013f24 <_fwalk_reent+0x24>
 8013f18:	6824      	ldr	r4, [r4, #0]
 8013f1a:	2c00      	cmp	r4, #0
 8013f1c:	d1f7      	bne.n	8013f0e <_fwalk_reent+0xe>
 8013f1e:	4638      	mov	r0, r7
 8013f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f24:	89ab      	ldrh	r3, [r5, #12]
 8013f26:	2b01      	cmp	r3, #1
 8013f28:	d907      	bls.n	8013f3a <_fwalk_reent+0x3a>
 8013f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f2e:	3301      	adds	r3, #1
 8013f30:	d003      	beq.n	8013f3a <_fwalk_reent+0x3a>
 8013f32:	4629      	mov	r1, r5
 8013f34:	4630      	mov	r0, r6
 8013f36:	47c0      	blx	r8
 8013f38:	4307      	orrs	r7, r0
 8013f3a:	3568      	adds	r5, #104	; 0x68
 8013f3c:	e7e9      	b.n	8013f12 <_fwalk_reent+0x12>

08013f3e <__swhatbuf_r>:
 8013f3e:	b570      	push	{r4, r5, r6, lr}
 8013f40:	460e      	mov	r6, r1
 8013f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f46:	4614      	mov	r4, r2
 8013f48:	2900      	cmp	r1, #0
 8013f4a:	461d      	mov	r5, r3
 8013f4c:	b096      	sub	sp, #88	; 0x58
 8013f4e:	da08      	bge.n	8013f62 <__swhatbuf_r+0x24>
 8013f50:	2200      	movs	r2, #0
 8013f52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013f56:	602a      	str	r2, [r5, #0]
 8013f58:	061a      	lsls	r2, r3, #24
 8013f5a:	d410      	bmi.n	8013f7e <__swhatbuf_r+0x40>
 8013f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f60:	e00e      	b.n	8013f80 <__swhatbuf_r+0x42>
 8013f62:	466a      	mov	r2, sp
 8013f64:	f000 f902 	bl	801416c <_fstat_r>
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	dbf1      	blt.n	8013f50 <__swhatbuf_r+0x12>
 8013f6c:	9a01      	ldr	r2, [sp, #4]
 8013f6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f76:	425a      	negs	r2, r3
 8013f78:	415a      	adcs	r2, r3
 8013f7a:	602a      	str	r2, [r5, #0]
 8013f7c:	e7ee      	b.n	8013f5c <__swhatbuf_r+0x1e>
 8013f7e:	2340      	movs	r3, #64	; 0x40
 8013f80:	2000      	movs	r0, #0
 8013f82:	6023      	str	r3, [r4, #0]
 8013f84:	b016      	add	sp, #88	; 0x58
 8013f86:	bd70      	pop	{r4, r5, r6, pc}

08013f88 <__smakebuf_r>:
 8013f88:	898b      	ldrh	r3, [r1, #12]
 8013f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f8c:	079d      	lsls	r5, r3, #30
 8013f8e:	4606      	mov	r6, r0
 8013f90:	460c      	mov	r4, r1
 8013f92:	d507      	bpl.n	8013fa4 <__smakebuf_r+0x1c>
 8013f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f98:	6023      	str	r3, [r4, #0]
 8013f9a:	6123      	str	r3, [r4, #16]
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	6163      	str	r3, [r4, #20]
 8013fa0:	b002      	add	sp, #8
 8013fa2:	bd70      	pop	{r4, r5, r6, pc}
 8013fa4:	466a      	mov	r2, sp
 8013fa6:	ab01      	add	r3, sp, #4
 8013fa8:	f7ff ffc9 	bl	8013f3e <__swhatbuf_r>
 8013fac:	9900      	ldr	r1, [sp, #0]
 8013fae:	4605      	mov	r5, r0
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f7fd fa9f 	bl	80114f4 <_malloc_r>
 8013fb6:	b948      	cbnz	r0, 8013fcc <__smakebuf_r+0x44>
 8013fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013fbc:	059a      	lsls	r2, r3, #22
 8013fbe:	d4ef      	bmi.n	8013fa0 <__smakebuf_r+0x18>
 8013fc0:	f023 0303 	bic.w	r3, r3, #3
 8013fc4:	f043 0302 	orr.w	r3, r3, #2
 8013fc8:	81a3      	strh	r3, [r4, #12]
 8013fca:	e7e3      	b.n	8013f94 <__smakebuf_r+0xc>
 8013fcc:	4b0d      	ldr	r3, [pc, #52]	; (8014004 <__smakebuf_r+0x7c>)
 8013fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8013fd0:	89a3      	ldrh	r3, [r4, #12]
 8013fd2:	6020      	str	r0, [r4, #0]
 8013fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fd8:	81a3      	strh	r3, [r4, #12]
 8013fda:	9b00      	ldr	r3, [sp, #0]
 8013fdc:	6120      	str	r0, [r4, #16]
 8013fde:	6163      	str	r3, [r4, #20]
 8013fe0:	9b01      	ldr	r3, [sp, #4]
 8013fe2:	b15b      	cbz	r3, 8013ffc <__smakebuf_r+0x74>
 8013fe4:	4630      	mov	r0, r6
 8013fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fea:	f000 f8d1 	bl	8014190 <_isatty_r>
 8013fee:	b128      	cbz	r0, 8013ffc <__smakebuf_r+0x74>
 8013ff0:	89a3      	ldrh	r3, [r4, #12]
 8013ff2:	f023 0303 	bic.w	r3, r3, #3
 8013ff6:	f043 0301 	orr.w	r3, r3, #1
 8013ffa:	81a3      	strh	r3, [r4, #12]
 8013ffc:	89a0      	ldrh	r0, [r4, #12]
 8013ffe:	4305      	orrs	r5, r0
 8014000:	81a5      	strh	r5, [r4, #12]
 8014002:	e7cd      	b.n	8013fa0 <__smakebuf_r+0x18>
 8014004:	08013d9d 	.word	0x08013d9d

08014008 <_malloc_usable_size_r>:
 8014008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801400c:	1f18      	subs	r0, r3, #4
 801400e:	2b00      	cmp	r3, #0
 8014010:	bfbc      	itt	lt
 8014012:	580b      	ldrlt	r3, [r1, r0]
 8014014:	18c0      	addlt	r0, r0, r3
 8014016:	4770      	bx	lr

08014018 <_raise_r>:
 8014018:	291f      	cmp	r1, #31
 801401a:	b538      	push	{r3, r4, r5, lr}
 801401c:	4604      	mov	r4, r0
 801401e:	460d      	mov	r5, r1
 8014020:	d904      	bls.n	801402c <_raise_r+0x14>
 8014022:	2316      	movs	r3, #22
 8014024:	6003      	str	r3, [r0, #0]
 8014026:	f04f 30ff 	mov.w	r0, #4294967295
 801402a:	bd38      	pop	{r3, r4, r5, pc}
 801402c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801402e:	b112      	cbz	r2, 8014036 <_raise_r+0x1e>
 8014030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014034:	b94b      	cbnz	r3, 801404a <_raise_r+0x32>
 8014036:	4620      	mov	r0, r4
 8014038:	f000 f830 	bl	801409c <_getpid_r>
 801403c:	462a      	mov	r2, r5
 801403e:	4601      	mov	r1, r0
 8014040:	4620      	mov	r0, r4
 8014042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014046:	f000 b817 	b.w	8014078 <_kill_r>
 801404a:	2b01      	cmp	r3, #1
 801404c:	d00a      	beq.n	8014064 <_raise_r+0x4c>
 801404e:	1c59      	adds	r1, r3, #1
 8014050:	d103      	bne.n	801405a <_raise_r+0x42>
 8014052:	2316      	movs	r3, #22
 8014054:	6003      	str	r3, [r0, #0]
 8014056:	2001      	movs	r0, #1
 8014058:	e7e7      	b.n	801402a <_raise_r+0x12>
 801405a:	2400      	movs	r4, #0
 801405c:	4628      	mov	r0, r5
 801405e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014062:	4798      	blx	r3
 8014064:	2000      	movs	r0, #0
 8014066:	e7e0      	b.n	801402a <_raise_r+0x12>

08014068 <raise>:
 8014068:	4b02      	ldr	r3, [pc, #8]	; (8014074 <raise+0xc>)
 801406a:	4601      	mov	r1, r0
 801406c:	6818      	ldr	r0, [r3, #0]
 801406e:	f7ff bfd3 	b.w	8014018 <_raise_r>
 8014072:	bf00      	nop
 8014074:	2000b704 	.word	0x2000b704

08014078 <_kill_r>:
 8014078:	b538      	push	{r3, r4, r5, lr}
 801407a:	2300      	movs	r3, #0
 801407c:	4d06      	ldr	r5, [pc, #24]	; (8014098 <_kill_r+0x20>)
 801407e:	4604      	mov	r4, r0
 8014080:	4608      	mov	r0, r1
 8014082:	4611      	mov	r1, r2
 8014084:	602b      	str	r3, [r5, #0]
 8014086:	f7ef f8d4 	bl	8003232 <_kill>
 801408a:	1c43      	adds	r3, r0, #1
 801408c:	d102      	bne.n	8014094 <_kill_r+0x1c>
 801408e:	682b      	ldr	r3, [r5, #0]
 8014090:	b103      	cbz	r3, 8014094 <_kill_r+0x1c>
 8014092:	6023      	str	r3, [r4, #0]
 8014094:	bd38      	pop	{r3, r4, r5, pc}
 8014096:	bf00      	nop
 8014098:	2000cbf0 	.word	0x2000cbf0

0801409c <_getpid_r>:
 801409c:	f7ef b8c2 	b.w	8003224 <_getpid>

080140a0 <__sread>:
 80140a0:	b510      	push	{r4, lr}
 80140a2:	460c      	mov	r4, r1
 80140a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140a8:	f000 f894 	bl	80141d4 <_read_r>
 80140ac:	2800      	cmp	r0, #0
 80140ae:	bfab      	itete	ge
 80140b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80140b2:	89a3      	ldrhlt	r3, [r4, #12]
 80140b4:	181b      	addge	r3, r3, r0
 80140b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80140ba:	bfac      	ite	ge
 80140bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80140be:	81a3      	strhlt	r3, [r4, #12]
 80140c0:	bd10      	pop	{r4, pc}

080140c2 <__swrite>:
 80140c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c6:	461f      	mov	r7, r3
 80140c8:	898b      	ldrh	r3, [r1, #12]
 80140ca:	4605      	mov	r5, r0
 80140cc:	05db      	lsls	r3, r3, #23
 80140ce:	460c      	mov	r4, r1
 80140d0:	4616      	mov	r6, r2
 80140d2:	d505      	bpl.n	80140e0 <__swrite+0x1e>
 80140d4:	2302      	movs	r3, #2
 80140d6:	2200      	movs	r2, #0
 80140d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140dc:	f000 f868 	bl	80141b0 <_lseek_r>
 80140e0:	89a3      	ldrh	r3, [r4, #12]
 80140e2:	4632      	mov	r2, r6
 80140e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140e8:	81a3      	strh	r3, [r4, #12]
 80140ea:	4628      	mov	r0, r5
 80140ec:	463b      	mov	r3, r7
 80140ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140f6:	f000 b817 	b.w	8014128 <_write_r>

080140fa <__sseek>:
 80140fa:	b510      	push	{r4, lr}
 80140fc:	460c      	mov	r4, r1
 80140fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014102:	f000 f855 	bl	80141b0 <_lseek_r>
 8014106:	1c43      	adds	r3, r0, #1
 8014108:	89a3      	ldrh	r3, [r4, #12]
 801410a:	bf15      	itete	ne
 801410c:	6560      	strne	r0, [r4, #84]	; 0x54
 801410e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014116:	81a3      	strheq	r3, [r4, #12]
 8014118:	bf18      	it	ne
 801411a:	81a3      	strhne	r3, [r4, #12]
 801411c:	bd10      	pop	{r4, pc}

0801411e <__sclose>:
 801411e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014122:	f000 b813 	b.w	801414c <_close_r>
	...

08014128 <_write_r>:
 8014128:	b538      	push	{r3, r4, r5, lr}
 801412a:	4604      	mov	r4, r0
 801412c:	4608      	mov	r0, r1
 801412e:	4611      	mov	r1, r2
 8014130:	2200      	movs	r2, #0
 8014132:	4d05      	ldr	r5, [pc, #20]	; (8014148 <_write_r+0x20>)
 8014134:	602a      	str	r2, [r5, #0]
 8014136:	461a      	mov	r2, r3
 8014138:	f7ef f8b2 	bl	80032a0 <_write>
 801413c:	1c43      	adds	r3, r0, #1
 801413e:	d102      	bne.n	8014146 <_write_r+0x1e>
 8014140:	682b      	ldr	r3, [r5, #0]
 8014142:	b103      	cbz	r3, 8014146 <_write_r+0x1e>
 8014144:	6023      	str	r3, [r4, #0]
 8014146:	bd38      	pop	{r3, r4, r5, pc}
 8014148:	2000cbf0 	.word	0x2000cbf0

0801414c <_close_r>:
 801414c:	b538      	push	{r3, r4, r5, lr}
 801414e:	2300      	movs	r3, #0
 8014150:	4d05      	ldr	r5, [pc, #20]	; (8014168 <_close_r+0x1c>)
 8014152:	4604      	mov	r4, r0
 8014154:	4608      	mov	r0, r1
 8014156:	602b      	str	r3, [r5, #0]
 8014158:	f7ef f8be 	bl	80032d8 <_close>
 801415c:	1c43      	adds	r3, r0, #1
 801415e:	d102      	bne.n	8014166 <_close_r+0x1a>
 8014160:	682b      	ldr	r3, [r5, #0]
 8014162:	b103      	cbz	r3, 8014166 <_close_r+0x1a>
 8014164:	6023      	str	r3, [r4, #0]
 8014166:	bd38      	pop	{r3, r4, r5, pc}
 8014168:	2000cbf0 	.word	0x2000cbf0

0801416c <_fstat_r>:
 801416c:	b538      	push	{r3, r4, r5, lr}
 801416e:	2300      	movs	r3, #0
 8014170:	4d06      	ldr	r5, [pc, #24]	; (801418c <_fstat_r+0x20>)
 8014172:	4604      	mov	r4, r0
 8014174:	4608      	mov	r0, r1
 8014176:	4611      	mov	r1, r2
 8014178:	602b      	str	r3, [r5, #0]
 801417a:	f7ef f8b8 	bl	80032ee <_fstat>
 801417e:	1c43      	adds	r3, r0, #1
 8014180:	d102      	bne.n	8014188 <_fstat_r+0x1c>
 8014182:	682b      	ldr	r3, [r5, #0]
 8014184:	b103      	cbz	r3, 8014188 <_fstat_r+0x1c>
 8014186:	6023      	str	r3, [r4, #0]
 8014188:	bd38      	pop	{r3, r4, r5, pc}
 801418a:	bf00      	nop
 801418c:	2000cbf0 	.word	0x2000cbf0

08014190 <_isatty_r>:
 8014190:	b538      	push	{r3, r4, r5, lr}
 8014192:	2300      	movs	r3, #0
 8014194:	4d05      	ldr	r5, [pc, #20]	; (80141ac <_isatty_r+0x1c>)
 8014196:	4604      	mov	r4, r0
 8014198:	4608      	mov	r0, r1
 801419a:	602b      	str	r3, [r5, #0]
 801419c:	f7ef f8b6 	bl	800330c <_isatty>
 80141a0:	1c43      	adds	r3, r0, #1
 80141a2:	d102      	bne.n	80141aa <_isatty_r+0x1a>
 80141a4:	682b      	ldr	r3, [r5, #0]
 80141a6:	b103      	cbz	r3, 80141aa <_isatty_r+0x1a>
 80141a8:	6023      	str	r3, [r4, #0]
 80141aa:	bd38      	pop	{r3, r4, r5, pc}
 80141ac:	2000cbf0 	.word	0x2000cbf0

080141b0 <_lseek_r>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4604      	mov	r4, r0
 80141b4:	4608      	mov	r0, r1
 80141b6:	4611      	mov	r1, r2
 80141b8:	2200      	movs	r2, #0
 80141ba:	4d05      	ldr	r5, [pc, #20]	; (80141d0 <_lseek_r+0x20>)
 80141bc:	602a      	str	r2, [r5, #0]
 80141be:	461a      	mov	r2, r3
 80141c0:	f7ef f8ae 	bl	8003320 <_lseek>
 80141c4:	1c43      	adds	r3, r0, #1
 80141c6:	d102      	bne.n	80141ce <_lseek_r+0x1e>
 80141c8:	682b      	ldr	r3, [r5, #0]
 80141ca:	b103      	cbz	r3, 80141ce <_lseek_r+0x1e>
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	bd38      	pop	{r3, r4, r5, pc}
 80141d0:	2000cbf0 	.word	0x2000cbf0

080141d4 <_read_r>:
 80141d4:	b538      	push	{r3, r4, r5, lr}
 80141d6:	4604      	mov	r4, r0
 80141d8:	4608      	mov	r0, r1
 80141da:	4611      	mov	r1, r2
 80141dc:	2200      	movs	r2, #0
 80141de:	4d05      	ldr	r5, [pc, #20]	; (80141f4 <_read_r+0x20>)
 80141e0:	602a      	str	r2, [r5, #0]
 80141e2:	461a      	mov	r2, r3
 80141e4:	f7ef f83f 	bl	8003266 <_read>
 80141e8:	1c43      	adds	r3, r0, #1
 80141ea:	d102      	bne.n	80141f2 <_read_r+0x1e>
 80141ec:	682b      	ldr	r3, [r5, #0]
 80141ee:	b103      	cbz	r3, 80141f2 <_read_r+0x1e>
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	bd38      	pop	{r3, r4, r5, pc}
 80141f4:	2000cbf0 	.word	0x2000cbf0

080141f8 <fmin>:
 80141f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141fa:	4604      	mov	r4, r0
 80141fc:	460d      	mov	r5, r1
 80141fe:	4616      	mov	r6, r2
 8014200:	461f      	mov	r7, r3
 8014202:	f000 f813 	bl	801422c <__fpclassifyd>
 8014206:	b158      	cbz	r0, 8014220 <fmin+0x28>
 8014208:	4630      	mov	r0, r6
 801420a:	4639      	mov	r1, r7
 801420c:	f000 f80e 	bl	801422c <__fpclassifyd>
 8014210:	b140      	cbz	r0, 8014224 <fmin+0x2c>
 8014212:	4632      	mov	r2, r6
 8014214:	463b      	mov	r3, r7
 8014216:	4620      	mov	r0, r4
 8014218:	4629      	mov	r1, r5
 801421a:	f7ec fc3b 	bl	8000a94 <__aeabi_dcmplt>
 801421e:	b908      	cbnz	r0, 8014224 <fmin+0x2c>
 8014220:	4634      	mov	r4, r6
 8014222:	463d      	mov	r5, r7
 8014224:	4620      	mov	r0, r4
 8014226:	4629      	mov	r1, r5
 8014228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801422c <__fpclassifyd>:
 801422c:	b510      	push	{r4, lr}
 801422e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8014232:	460b      	mov	r3, r1
 8014234:	d019      	beq.n	801426a <__fpclassifyd+0x3e>
 8014236:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801423a:	490e      	ldr	r1, [pc, #56]	; (8014274 <__fpclassifyd+0x48>)
 801423c:	428a      	cmp	r2, r1
 801423e:	d90e      	bls.n	801425e <__fpclassifyd+0x32>
 8014240:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8014244:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8014248:	428a      	cmp	r2, r1
 801424a:	d908      	bls.n	801425e <__fpclassifyd+0x32>
 801424c:	4a0a      	ldr	r2, [pc, #40]	; (8014278 <__fpclassifyd+0x4c>)
 801424e:	4213      	tst	r3, r2
 8014250:	d007      	beq.n	8014262 <__fpclassifyd+0x36>
 8014252:	4294      	cmp	r4, r2
 8014254:	d107      	bne.n	8014266 <__fpclassifyd+0x3a>
 8014256:	fab0 f080 	clz	r0, r0
 801425a:	0940      	lsrs	r0, r0, #5
 801425c:	bd10      	pop	{r4, pc}
 801425e:	2004      	movs	r0, #4
 8014260:	e7fc      	b.n	801425c <__fpclassifyd+0x30>
 8014262:	2003      	movs	r0, #3
 8014264:	e7fa      	b.n	801425c <__fpclassifyd+0x30>
 8014266:	2000      	movs	r0, #0
 8014268:	e7f8      	b.n	801425c <__fpclassifyd+0x30>
 801426a:	2800      	cmp	r0, #0
 801426c:	d1ee      	bne.n	801424c <__fpclassifyd+0x20>
 801426e:	2002      	movs	r0, #2
 8014270:	e7f4      	b.n	801425c <__fpclassifyd+0x30>
 8014272:	bf00      	nop
 8014274:	7fdfffff 	.word	0x7fdfffff
 8014278:	7ff00000 	.word	0x7ff00000

0801427c <sqrt>:
 801427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427e:	4606      	mov	r6, r0
 8014280:	460f      	mov	r7, r1
 8014282:	f000 f81f 	bl	80142c4 <__ieee754_sqrt>
 8014286:	4632      	mov	r2, r6
 8014288:	4604      	mov	r4, r0
 801428a:	460d      	mov	r5, r1
 801428c:	463b      	mov	r3, r7
 801428e:	4630      	mov	r0, r6
 8014290:	4639      	mov	r1, r7
 8014292:	f7ec fc27 	bl	8000ae4 <__aeabi_dcmpun>
 8014296:	b990      	cbnz	r0, 80142be <sqrt+0x42>
 8014298:	2200      	movs	r2, #0
 801429a:	2300      	movs	r3, #0
 801429c:	4630      	mov	r0, r6
 801429e:	4639      	mov	r1, r7
 80142a0:	f7ec fbf8 	bl	8000a94 <__aeabi_dcmplt>
 80142a4:	b158      	cbz	r0, 80142be <sqrt+0x42>
 80142a6:	f7fd f87b 	bl	80113a0 <__errno>
 80142aa:	2321      	movs	r3, #33	; 0x21
 80142ac:	2200      	movs	r2, #0
 80142ae:	6003      	str	r3, [r0, #0]
 80142b0:	2300      	movs	r3, #0
 80142b2:	4610      	mov	r0, r2
 80142b4:	4619      	mov	r1, r3
 80142b6:	f7ec faa5 	bl	8000804 <__aeabi_ddiv>
 80142ba:	4604      	mov	r4, r0
 80142bc:	460d      	mov	r5, r1
 80142be:	4620      	mov	r0, r4
 80142c0:	4629      	mov	r1, r5
 80142c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080142c4 <__ieee754_sqrt>:
 80142c4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8014420 <__ieee754_sqrt+0x15c>
 80142c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80142d0:	4606      	mov	r6, r0
 80142d2:	460d      	mov	r5, r1
 80142d4:	460c      	mov	r4, r1
 80142d6:	460a      	mov	r2, r1
 80142d8:	4607      	mov	r7, r0
 80142da:	4603      	mov	r3, r0
 80142dc:	d10f      	bne.n	80142fe <__ieee754_sqrt+0x3a>
 80142de:	4602      	mov	r2, r0
 80142e0:	460b      	mov	r3, r1
 80142e2:	f7ec f965 	bl	80005b0 <__aeabi_dmul>
 80142e6:	4602      	mov	r2, r0
 80142e8:	460b      	mov	r3, r1
 80142ea:	4630      	mov	r0, r6
 80142ec:	4629      	mov	r1, r5
 80142ee:	f7eb ffa9 	bl	8000244 <__adddf3>
 80142f2:	4606      	mov	r6, r0
 80142f4:	460d      	mov	r5, r1
 80142f6:	4630      	mov	r0, r6
 80142f8:	4629      	mov	r1, r5
 80142fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142fe:	2900      	cmp	r1, #0
 8014300:	dc0e      	bgt.n	8014320 <__ieee754_sqrt+0x5c>
 8014302:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8014306:	ea5c 0707 	orrs.w	r7, ip, r7
 801430a:	d0f4      	beq.n	80142f6 <__ieee754_sqrt+0x32>
 801430c:	b141      	cbz	r1, 8014320 <__ieee754_sqrt+0x5c>
 801430e:	4602      	mov	r2, r0
 8014310:	460b      	mov	r3, r1
 8014312:	f7eb ff95 	bl	8000240 <__aeabi_dsub>
 8014316:	4602      	mov	r2, r0
 8014318:	460b      	mov	r3, r1
 801431a:	f7ec fa73 	bl	8000804 <__aeabi_ddiv>
 801431e:	e7e8      	b.n	80142f2 <__ieee754_sqrt+0x2e>
 8014320:	1521      	asrs	r1, r4, #20
 8014322:	d075      	beq.n	8014410 <__ieee754_sqrt+0x14c>
 8014324:	07cc      	lsls	r4, r1, #31
 8014326:	f04f 0400 	mov.w	r4, #0
 801432a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801432e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8014332:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014336:	bf5e      	ittt	pl
 8014338:	0fd9      	lsrpl	r1, r3, #31
 801433a:	005b      	lslpl	r3, r3, #1
 801433c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8014340:	0fd9      	lsrs	r1, r3, #31
 8014342:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8014346:	2516      	movs	r5, #22
 8014348:	4620      	mov	r0, r4
 801434a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801434e:	107f      	asrs	r7, r7, #1
 8014350:	005b      	lsls	r3, r3, #1
 8014352:	1846      	adds	r6, r0, r1
 8014354:	4296      	cmp	r6, r2
 8014356:	bfde      	ittt	le
 8014358:	1b92      	suble	r2, r2, r6
 801435a:	1870      	addle	r0, r6, r1
 801435c:	1864      	addle	r4, r4, r1
 801435e:	0052      	lsls	r2, r2, #1
 8014360:	3d01      	subs	r5, #1
 8014362:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014366:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801436a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801436e:	d1f0      	bne.n	8014352 <__ieee754_sqrt+0x8e>
 8014370:	4629      	mov	r1, r5
 8014372:	f04f 0e20 	mov.w	lr, #32
 8014376:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801437a:	4282      	cmp	r2, r0
 801437c:	eb06 0c05 	add.w	ip, r6, r5
 8014380:	dc02      	bgt.n	8014388 <__ieee754_sqrt+0xc4>
 8014382:	d113      	bne.n	80143ac <__ieee754_sqrt+0xe8>
 8014384:	459c      	cmp	ip, r3
 8014386:	d811      	bhi.n	80143ac <__ieee754_sqrt+0xe8>
 8014388:	f1bc 0f00 	cmp.w	ip, #0
 801438c:	eb0c 0506 	add.w	r5, ip, r6
 8014390:	da43      	bge.n	801441a <__ieee754_sqrt+0x156>
 8014392:	2d00      	cmp	r5, #0
 8014394:	db41      	blt.n	801441a <__ieee754_sqrt+0x156>
 8014396:	f100 0801 	add.w	r8, r0, #1
 801439a:	1a12      	subs	r2, r2, r0
 801439c:	4640      	mov	r0, r8
 801439e:	459c      	cmp	ip, r3
 80143a0:	bf88      	it	hi
 80143a2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80143a6:	eba3 030c 	sub.w	r3, r3, ip
 80143aa:	4431      	add	r1, r6
 80143ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80143b0:	f1be 0e01 	subs.w	lr, lr, #1
 80143b4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80143b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80143bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80143c0:	d1db      	bne.n	801437a <__ieee754_sqrt+0xb6>
 80143c2:	4313      	orrs	r3, r2
 80143c4:	d006      	beq.n	80143d4 <__ieee754_sqrt+0x110>
 80143c6:	1c48      	adds	r0, r1, #1
 80143c8:	bf0b      	itete	eq
 80143ca:	4671      	moveq	r1, lr
 80143cc:	3101      	addne	r1, #1
 80143ce:	3401      	addeq	r4, #1
 80143d0:	f021 0101 	bicne.w	r1, r1, #1
 80143d4:	1063      	asrs	r3, r4, #1
 80143d6:	0849      	lsrs	r1, r1, #1
 80143d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80143dc:	07e2      	lsls	r2, r4, #31
 80143de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80143e2:	bf48      	it	mi
 80143e4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80143e8:	460e      	mov	r6, r1
 80143ea:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80143ee:	e782      	b.n	80142f6 <__ieee754_sqrt+0x32>
 80143f0:	0ada      	lsrs	r2, r3, #11
 80143f2:	3815      	subs	r0, #21
 80143f4:	055b      	lsls	r3, r3, #21
 80143f6:	2a00      	cmp	r2, #0
 80143f8:	d0fa      	beq.n	80143f0 <__ieee754_sqrt+0x12c>
 80143fa:	02d5      	lsls	r5, r2, #11
 80143fc:	d50a      	bpl.n	8014414 <__ieee754_sqrt+0x150>
 80143fe:	f1c1 0420 	rsb	r4, r1, #32
 8014402:	fa23 f404 	lsr.w	r4, r3, r4
 8014406:	1e4d      	subs	r5, r1, #1
 8014408:	408b      	lsls	r3, r1
 801440a:	4322      	orrs	r2, r4
 801440c:	1b41      	subs	r1, r0, r5
 801440e:	e789      	b.n	8014324 <__ieee754_sqrt+0x60>
 8014410:	4608      	mov	r0, r1
 8014412:	e7f0      	b.n	80143f6 <__ieee754_sqrt+0x132>
 8014414:	0052      	lsls	r2, r2, #1
 8014416:	3101      	adds	r1, #1
 8014418:	e7ef      	b.n	80143fa <__ieee754_sqrt+0x136>
 801441a:	4680      	mov	r8, r0
 801441c:	e7bd      	b.n	801439a <__ieee754_sqrt+0xd6>
 801441e:	bf00      	nop
 8014420:	7ff00000 	.word	0x7ff00000

08014424 <_init>:
 8014424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014426:	bf00      	nop
 8014428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801442a:	bc08      	pop	{r3}
 801442c:	469e      	mov	lr, r3
 801442e:	4770      	bx	lr

08014430 <_fini>:
 8014430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014432:	bf00      	nop
 8014434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014436:	bc08      	pop	{r3}
 8014438:	469e      	mov	lr, r3
 801443a:	4770      	bx	lr
