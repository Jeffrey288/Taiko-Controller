
TAIKO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de74  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a94  0800e060  0800e060  0001e060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaf4  0800eaf4  00020310  2**0
                  CONTENTS
  4 .ARM          00000000  0800eaf4  0800eaf4  00020310  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eaf4  0800eaf4  00020310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eaf4  0800eaf4  0001eaf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eaf8  0800eaf8  0001eaf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800eafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  20000310  0800ee0c  00020310  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d78  0800ee0c  00020d78  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001788e  00000000  00000000  00020339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d75  00000000  00000000  00037bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eabb  00000000  00000000  0003e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019886  00000000  00000000  0005cbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5247  00000000  00000000  00076459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b6a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000687c  00000000  00000000  0011b6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000310 	.word	0x20000310
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e044 	.word	0x0800e044

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000314 	.word	0x20000314
 8000224:	0800e044 	.word	0x0800e044

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <DrumOutputDefault>:
uint32_t drum_sensor_values[4];
DrumStruct drums[4];
DrumOutputDevice drum_output_device;
DrumOutputCallback drum_output_callback;

void DrumOutputDefault(DrumType type) {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	drums[type].hit_count++;
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	490a      	ldr	r1, [pc, #40]	; (8001054 <DrumOutputDefault+0x38>)
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	440b      	add	r3, r1
 8001034:	3304      	adds	r3, #4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1c59      	adds	r1, r3, #1
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <DrumOutputDefault+0x38>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4403      	add	r3, r0
 8001046:	3304      	adds	r3, #4
 8001048:	6019      	str	r1, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	20000340 	.word	0x20000340

08001058 <DrumInit>:

void DrumInit() {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

	drum_output_device = DRUM_OUTPUT_NONE;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <DrumInit+0xa0>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
	drum_output_callback = &DrumOutputDefault;
 8001064:	4b25      	ldr	r3, [pc, #148]	; (80010fc <DrumInit+0xa4>)
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <DrumInit+0xa8>)
 8001068:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e03b      	b.n	80010e8 <DrumInit+0x90>
		drums[i].type = i;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	b2d8      	uxtb	r0, r3
 8001074:	4923      	ldr	r1, [pc, #140]	; (8001104 <DrumInit+0xac>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	440b      	add	r3, r1
 8001082:	4602      	mov	r2, r0
 8001084:	701a      	strb	r2, [r3, #0]
		drums[i].state = DRUM_IDLE;
 8001086:	491f      	ldr	r1, [pc, #124]	; (8001104 <DrumInit+0xac>)
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	440b      	add	r3, r1
 8001094:	3308      	adds	r3, #8
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
		drums[i].sensor_value_pt = &(drum_sensor_values[i]);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <DrumInit+0xb0>)
 80010a0:	1899      	adds	r1, r3, r2
 80010a2:	4818      	ldr	r0, [pc, #96]	; (8001104 <DrumInit+0xac>)
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4403      	add	r3, r0
 80010b0:	3310      	adds	r3, #16
 80010b2:	6019      	str	r1, [r3, #0]
		drums[i].hit_count = 0;
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <DrumInit+0xac>)
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	440b      	add	r3, r1
 80010c2:	3304      	adds	r3, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		drums[i].last_tick = HAL_GetTick();
 80010c8:	f001 fba6 	bl	8002818 <HAL_GetTick>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4618      	mov	r0, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <DrumInit+0xac>)
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	440b      	add	r3, r1
 80010de:	330c      	adds	r3, #12
 80010e0:	6018      	str	r0, [r3, #0]
	for (int i = 0; i < NUM_DRUMS; i++) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3301      	adds	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	ddc0      	ble.n	8001070 <DrumInit+0x18>
	}

}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000400 	.word	0x20000400
 80010fc:	20000404 	.word	0x20000404
 8001100:	0800101d 	.word	0x0800101d
 8001104:	20000340 	.word	0x20000340
 8001108:	2000032c 	.word	0x2000032c
 800110c:	00000000 	.word	0x00000000

08001110 <DrumCalibrate>:

void DrumCalibrate() {
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b092      	sub	sp, #72	; 0x48
 8001116:	af00      	add	r7, sp, #0

	uint32_t last_tick = HAL_GetTick();
 8001118:	f001 fb7e 	bl	8002818 <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
	//	uint16_t values[NUM_DRUMS][DRUM_CALIBRATION_SAMPLE_NUM];
	// Dynamically allocate memory for the 2D array
	uint16_t **values = (uint16_t**) malloc(NUM_DRUMS * sizeof(uint16_t*));
 8001120:	2010      	movs	r0, #16
 8001122:	f009 ff77 	bl	800b014 <malloc>
 8001126:	4603      	mov	r3, r0
 8001128:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
 800112e:	e00c      	b.n	800114a <DrumCalibrate+0x3a>
		values[i] = (uint16_t*) malloc(DRUM_CALIBRATION_SAMPLE_NUM * sizeof(uint16_t));
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	18d4      	adds	r4, r2, r3
 8001138:	f44f 7016 	mov.w	r0, #600	; 0x258
 800113c:	f009 ff6a 	bl	800b014 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001146:	3301      	adds	r3, #1
 8001148:	643b      	str	r3, [r7, #64]	; 0x40
 800114a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800114c:	2b03      	cmp	r3, #3
 800114e:	ddef      	ble.n	8001130 <DrumCalibrate+0x20>
	}

	// sampling
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001154:	e024      	b.n	80011a0 <DrumCalibrate+0x90>
		while (last_tick == HAL_GetTick()) {
 8001156:	bf00      	nop
 8001158:	f001 fb5e 	bl	8002818 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001160:	429a      	cmp	r2, r3
 8001162:	d0f9      	beq.n	8001158 <DrumCalibrate+0x48>
		} // waits for 1 tick
		last_tick = HAL_GetTick();
 8001164:	f001 fb58 	bl	8002818 <HAL_GetTick>
 8001168:	4603      	mov	r3, r0
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
		for (int j = 0; j < NUM_DRUMS; j++) {
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001170:	e010      	b.n	8001194 <DrumCalibrate+0x84>
			values[j][i] = drum_sensor_values[j];
 8001172:	4a99      	ldr	r2, [pc, #612]	; (80013d8 <DrumCalibrate+0x2c8>)
 8001174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001176:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4413      	add	r3, r2
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	b28a      	uxth	r2, r1
 800118c:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < NUM_DRUMS; j++) {
 800118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001190:	3301      	adds	r3, #1
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
 8001194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001196:	2b03      	cmp	r3, #3
 8001198:	ddeb      	ble.n	8001172 <DrumCalibrate+0x62>
	for (int i = 0; i < DRUM_CALIBRATION_SAMPLE_NUM; i++) {
 800119a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800119c:	3301      	adds	r3, #1
 800119e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011a6:	dbd6      	blt.n	8001156 <DrumCalibrate+0x46>
		}
	}

	// calculates avg and sd for each drum, tunes threshold
	for (int i = 0; i < NUM_DRUMS; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
 80011ac:	e0ec      	b.n	8001388 <DrumCalibrate+0x278>
		uint32_t sum = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t max_val = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ba:	e026      	b.n	800120a <DrumCalibrate+0xfa>
			sum += values[i][j];
 80011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	4413      	add	r3, r2
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d2:	4413      	add	r3, r2
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
			if (values[i][j] > max_val)
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4413      	add	r3, r2
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d209      	bcs.n	8001204 <DrumCalibrate+0xf4>
				max_val = values[i][j];
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	4413      	add	r3, r2
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	3301      	adds	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
 800120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001210:	dbd4      	blt.n	80011bc <DrumCalibrate+0xac>
		}
		double avg = (double) sum / DRUM_CALIBRATION_SAMPLE_NUM;
 8001212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001214:	f7ff f952 	bl	80004bc <__aeabi_ui2d>
 8001218:	a36b      	add	r3, pc, #428	; (adr r3, 80013c8 <DrumCalibrate+0x2b8>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff faf1 	bl	8000804 <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double sqerr = 0;
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	e036      	b.n	80012aa <DrumCalibrate+0x19a>
			sqerr += (values[i][j] - avg) * (values[i][j] - avg);
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4413      	add	r3, r2
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f944 	bl	80004dc <__aeabi_i2d>
 8001254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001258:	f7fe fff2 	bl	8000240 <__aeabi_dsub>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	4413      	add	r3, r2
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f930 	bl	80004dc <__aeabi_i2d>
 800127c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001280:	f7fe ffde 	bl	8000240 <__aeabi_dsub>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f990 	bl	80005b0 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001298:	f7fe ffd4 	bl	8000244 <__adddf3>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		for (int j = 0; j < DRUM_CALIBRATION_SAMPLE_NUM; j++) {
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80012b0:	dbc4      	blt.n	800123c <DrumCalibrate+0x12c>
		}
		double sd = sqrt(sqerr / (DRUM_CALIBRATION_SAMPLE_NUM - 1));
 80012b2:	a347      	add	r3, pc, #284	; (adr r3, 80013d0 <DrumCalibrate+0x2c0>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80012bc:	f7ff faa2 	bl	8000804 <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f00c fde8 	bl	800de9c <sqrt>
 80012cc:	e9c7 0100 	strd	r0, r1, [r7]

		drums[i].sensor_avg = avg;
 80012d0:	4942      	ldr	r1, [pc, #264]	; (80013dc <DrumCalibrate+0x2cc>)
 80012d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	f103 0118 	add.w	r1, r3, #24
 80012e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012e6:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_max = max_val;
 80012ea:	493c      	ldr	r1, [pc, #240]	; (80013dc <DrumCalibrate+0x2cc>)
 80012ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	440b      	add	r3, r1
 80012f8:	3314      	adds	r3, #20
 80012fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012fc:	601a      	str	r2, [r3, #0]
		drums[i].sensor_sd = sd;
 80012fe:	4937      	ldr	r1, [pc, #220]	; (80013dc <DrumCalibrate+0x2cc>)
 8001300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	440b      	add	r3, r1
 800130c:	f103 0120 	add.w	r1, r3, #32
 8001310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001314:	e9c1 2300 	strd	r2, r3, [r1]
		drums[i].sensor_thresh = fmin(avg + 7 * sd, max_val + 5 * sd);
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <DrumCalibrate+0x2d0>)
 800131e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001322:	f7ff f945 	bl	80005b0 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001332:	f7fe ff87 	bl	8000244 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4690      	mov	r8, r2
 800133c:	4699      	mov	r9, r3
 800133e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001340:	f7ff f8bc 	bl	80004bc <__aeabi_ui2d>
 8001344:	4604      	mov	r4, r0
 8001346:	460d      	mov	r5, r1
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <DrumCalibrate+0x2d4>)
 800134e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001352:	f7ff f92d 	bl	80005b0 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff71 	bl	8000244 <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4640      	mov	r0, r8
 8001368:	4649      	mov	r1, r9
 800136a:	f00c fd55 	bl	800de18 <fmin>
 800136e:	4c1b      	ldr	r4, [pc, #108]	; (80013dc <DrumCalibrate+0x2cc>)
 8001370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4423      	add	r3, r4
 800137c:	3328      	adds	r3, #40	; 0x28
 800137e:	e9c3 0100 	strd	r0, r1, [r3]
	for (int i = 0; i < NUM_DRUMS; i++) {
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	3301      	adds	r3, #1
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
 8001388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138a:	2b03      	cmp	r3, #3
 800138c:	f77f af0f 	ble.w	80011ae <DrumCalibrate+0x9e>

	}

	for (int i = 0; i < NUM_DRUMS; ++i) {
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e00a      	b.n	80013ac <DrumCalibrate+0x29c>
		free(values[i]);
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	4413      	add	r3, r2
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f009 fe3f 	bl	800b024 <free>
	for (int i = 0; i < NUM_DRUMS; ++i) {
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	3301      	adds	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	ddf1      	ble.n	8001396 <DrumCalibrate+0x286>
	}
	free(values);
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f009 fe36 	bl	800b024 <free>

}
 80013b8:	bf00      	nop
 80013ba:	3748      	adds	r7, #72	; 0x48
 80013bc:	46bd      	mov	sp, r7
 80013be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4072c000 	.word	0x4072c000
 80013d0:	00000000 	.word	0x00000000
 80013d4:	4072b000 	.word	0x4072b000
 80013d8:	2000032c 	.word	0x2000032c
 80013dc:	20000340 	.word	0x20000340
 80013e0:	401c0000 	.word	0x401c0000
 80013e4:	40140000 	.word	0x40140000

080013e8 <ILI9341_Send_Command>:
static void ILI9341_Send_Command(unsigned char command);
static void ILI9341_Send_Burst(unsigned short color, unsigned long len);
static void ILI9341_Draw_Char(int x, int y, unsigned int color, unsigned int phone, unsigned char charcode, unsigned char size);


static inline void ILI9341_Send_Command(unsigned char command) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <ILI9341_Send_Command+0x34>)
 80013fa:	f002 fc12 	bl	8003c22 <HAL_GPIO_WritePin>
	DC_COMMAND;
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <ILI9341_Send_Command+0x34>)
 8001406:	f002 fc0c 	bl	8003c22 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f95d 	bl	80016cc <ILI9341_SPI_Send>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40010c00 	.word	0x40010c00

08001420 <ILI9341_Send_Data>:

static inline void ILI9341_Send_Data(unsigned char data) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001430:	4808      	ldr	r0, [pc, #32]	; (8001454 <ILI9341_Send_Data+0x34>)
 8001432:	f002 fbf6 	bl	8003c22 <HAL_GPIO_WritePin>
	DC_DATA;
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <ILI9341_Send_Data+0x34>)
 800143e:	f002 fbf0 	bl	8003c22 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f941 	bl	80016cc <ILI9341_SPI_Send>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40010c00 	.word	0x40010c00

08001458 <ILI9341_Init>:
static unsigned int Y_SIZE = 320;

unsigned char hh;
static SPI_HandleTypeDef lcd_spi;

void ILI9341_Init() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	ILI9341_SPI_Init();
 800145c:	f000 f900 	bl	8001660 <ILI9341_SPI_Init>

	/* Reset The Screen */
	ILI9341_Reset();
 8001460:	f000 f958 	bl	8001714 <ILI9341_Reset>
	ILI9341_Send_Command(0x01);
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff ffbf 	bl	80013e8 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 800146a:	20cb      	movs	r0, #203	; 0xcb
 800146c:	f7ff ffbc 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 8001470:	2039      	movs	r0, #57	; 0x39
 8001472:	f7ff ffd5 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 8001476:	202c      	movs	r0, #44	; 0x2c
 8001478:	f7ff ffd2 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ffcf 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 8001482:	2034      	movs	r0, #52	; 0x34
 8001484:	f7ff ffcc 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 8001488:	2002      	movs	r0, #2
 800148a:	f7ff ffc9 	bl	8001420 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 800148e:	20cf      	movs	r0, #207	; 0xcf
 8001490:	f7ff ffaa 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff ffc3 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800149a:	20c1      	movs	r0, #193	; 0xc1
 800149c:	f7ff ffc0 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 80014a0:	2030      	movs	r0, #48	; 0x30
 80014a2:	f7ff ffbd 	bl	8001420 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 80014a6:	20e8      	movs	r0, #232	; 0xe8
 80014a8:	f7ff ff9e 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 80014ac:	2085      	movs	r0, #133	; 0x85
 80014ae:	f7ff ffb7 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff ffb4 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 80014b8:	2078      	movs	r0, #120	; 0x78
 80014ba:	f7ff ffb1 	bl	8001420 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 80014be:	20ea      	movs	r0, #234	; 0xea
 80014c0:	f7ff ff92 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff ffab 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80014ca:	2000      	movs	r0, #0
 80014cc:	f7ff ffa8 	bl	8001420 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 80014d0:	20ed      	movs	r0, #237	; 0xed
 80014d2:	f7ff ff89 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 80014d6:	2064      	movs	r0, #100	; 0x64
 80014d8:	f7ff ffa2 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80014dc:	2003      	movs	r0, #3
 80014de:	f7ff ff9f 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 80014e2:	2012      	movs	r0, #18
 80014e4:	f7ff ff9c 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 80014e8:	2081      	movs	r0, #129	; 0x81
 80014ea:	f7ff ff99 	bl	8001420 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 80014ee:	20f7      	movs	r0, #247	; 0xf7
 80014f0:	f7ff ff7a 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 80014f4:	2020      	movs	r0, #32
 80014f6:	f7ff ff93 	bl	8001420 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(0xC0);
 80014fa:	20c0      	movs	r0, #192	; 0xc0
 80014fc:	f7ff ff74 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8001500:	2010      	movs	r0, #16
 8001502:	f7ff ff8d 	bl	8001420 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(0xC1);
 8001506:	20c1      	movs	r0, #193	; 0xc1
 8001508:	f7ff ff6e 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 800150c:	2010      	movs	r0, #16
 800150e:	f7ff ff87 	bl	8001420 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(0xC5);
 8001512:	20c5      	movs	r0, #197	; 0xc5
 8001514:	f7ff ff68 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8001518:	203e      	movs	r0, #62	; 0x3e
 800151a:	f7ff ff81 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 800151e:	2028      	movs	r0, #40	; 0x28
 8001520:	f7ff ff7e 	bl	8001420 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0xC7);
 8001524:	20c7      	movs	r0, #199	; 0xc7
 8001526:	f7ff ff5f 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 800152a:	2086      	movs	r0, #134	; 0x86
 800152c:	f7ff ff78 	bl	8001420 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f7ff ff59 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 8001536:	2048      	movs	r0, #72	; 0x48
 8001538:	f7ff ff72 	bl	8001420 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(0x3A);
 800153c:	203a      	movs	r0, #58	; 0x3a
 800153e:	f7ff ff53 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 8001542:	2055      	movs	r0, #85	; 0x55
 8001544:	f7ff ff6c 	bl	8001420 <ILI9341_Send_Data>

	ILI9341_Send_Command(0xB1);
 8001548:	20b1      	movs	r0, #177	; 0xb1
 800154a:	f7ff ff4d 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff ff66 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 8001554:	2018      	movs	r0, #24
 8001556:	f7ff ff63 	bl	8001420 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(0xB6);
 800155a:	20b6      	movs	r0, #182	; 0xb6
 800155c:	f7ff ff44 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 8001560:	2008      	movs	r0, #8
 8001562:	f7ff ff5d 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 8001566:	2082      	movs	r0, #130	; 0x82
 8001568:	f7ff ff5a 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 800156c:	2027      	movs	r0, #39	; 0x27
 800156e:	f7ff ff57 	bl	8001420 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 8001572:	20f2      	movs	r0, #242	; 0xf2
 8001574:	f7ff ff38 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff51 	bl	8001420 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 800157e:	2026      	movs	r0, #38	; 0x26
 8001580:	f7ff ff32 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff ff4b 	bl	8001420 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 800158a:	20e0      	movs	r0, #224	; 0xe0
 800158c:	f7ff ff2c 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 8001590:	200f      	movs	r0, #15
 8001592:	f7ff ff45 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001596:	2031      	movs	r0, #49	; 0x31
 8001598:	f7ff ff42 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 800159c:	202b      	movs	r0, #43	; 0x2b
 800159e:	f7ff ff3f 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 80015a2:	200c      	movs	r0, #12
 80015a4:	f7ff ff3c 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015a8:	200e      	movs	r0, #14
 80015aa:	f7ff ff39 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 80015ae:	2008      	movs	r0, #8
 80015b0:	f7ff ff36 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 80015b4:	204e      	movs	r0, #78	; 0x4e
 80015b6:	f7ff ff33 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 80015ba:	20f1      	movs	r0, #241	; 0xf1
 80015bc:	f7ff ff30 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 80015c0:	2037      	movs	r0, #55	; 0x37
 80015c2:	f7ff ff2d 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 80015c6:	2007      	movs	r0, #7
 80015c8:	f7ff ff2a 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 80015cc:	2010      	movs	r0, #16
 80015ce:	f7ff ff27 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 80015d2:	2003      	movs	r0, #3
 80015d4:	f7ff ff24 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015d8:	200e      	movs	r0, #14
 80015da:	f7ff ff21 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 80015de:	2009      	movs	r0, #9
 80015e0:	f7ff ff1e 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80015e4:	2000      	movs	r0, #0
 80015e6:	f7ff ff1b 	bl	8001420 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 80015ea:	20e1      	movs	r0, #225	; 0xe1
 80015ec:	f7ff fefc 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f7ff ff15 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 80015f6:	200e      	movs	r0, #14
 80015f8:	f7ff ff12 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 80015fc:	2014      	movs	r0, #20
 80015fe:	f7ff ff0f 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8001602:	2003      	movs	r0, #3
 8001604:	f7ff ff0c 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8001608:	2011      	movs	r0, #17
 800160a:	f7ff ff09 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800160e:	2007      	movs	r0, #7
 8001610:	f7ff ff06 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001614:	2031      	movs	r0, #49	; 0x31
 8001616:	f7ff ff03 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 800161a:	20c1      	movs	r0, #193	; 0xc1
 800161c:	f7ff ff00 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8001620:	2048      	movs	r0, #72	; 0x48
 8001622:	f7ff fefd 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8001626:	2008      	movs	r0, #8
 8001628:	f7ff fefa 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 800162c:	200f      	movs	r0, #15
 800162e:	f7ff fef7 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 8001632:	200c      	movs	r0, #12
 8001634:	f7ff fef4 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 8001638:	2031      	movs	r0, #49	; 0x31
 800163a:	f7ff fef1 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 800163e:	2036      	movs	r0, #54	; 0x36
 8001640:	f7ff feee 	bl	8001420 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8001644:	200f      	movs	r0, #15
 8001646:	f7ff feeb 	bl	8001420 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(0x11);
 800164a:	2011      	movs	r0, #17
 800164c:	f7ff fecc 	bl	80013e8 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(0x29);
 8001650:	2029      	movs	r0, #41	; 0x29
 8001652:	f7ff fec9 	bl	80013e8 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x2C);
 8001656:	202c      	movs	r0, #44	; 0x2c
 8001658:	f7ff fee2 	bl	8001420 <ILI9341_Send_Data>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <ILI9341_SPI_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void ILI9341_SPI_Init()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	lcd_spi.Instance 				= SPI2;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001666:	4a18      	ldr	r2, [pc, #96]	; (80016c8 <ILI9341_SPI_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
	lcd_spi.Init.Mode 				= SPI_MODE_MASTER;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800166c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001670:	605a      	str	r2, [r3, #4]
	lcd_spi.Init.Direction 			= SPI_DIRECTION_2LINES;
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
	lcd_spi.Init.DataSize 			= SPI_DATASIZE_8BIT;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
	lcd_spi.Init.CLKPolarity 		= SPI_POLARITY_LOW;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
	lcd_spi.Init.CLKPhase 			= SPI_PHASE_1EDGE;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
	lcd_spi.Init.NSS 				= SPI_NSS_SOFT;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	619a      	str	r2, [r3, #24]
	lcd_spi.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_2;
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	61da      	str	r2, [r3, #28]
	lcd_spi.Init.FirstBit 			= SPI_FIRSTBIT_MSB;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	621a      	str	r2, [r3, #32]
	lcd_spi.Init.TIMode 			= SPI_TIMODE_DISABLE;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
	lcd_spi.Init.CRCCalculation 	= SPI_CRCCALCULATION_DISABLE;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
	lcd_spi.Init.CRCPolynomial 		= 10;
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016ac:	220a      	movs	r2, #10
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&lcd_spi) != HAL_OK) {
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <ILI9341_SPI_Init+0x64>)
 80016b2:	f004 fcb9 	bl	8006028 <HAL_SPI_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <ILI9341_SPI_Init+0x60>
		Error_Handler();
 80016bc:	f000 fe0e 	bl	80022dc <Error_Handler>
	}
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000408 	.word	0x20000408
 80016c8:	40003800 	.word	0x40003800

080016cc <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80016d6:	1df9      	adds	r1, r7, #7
 80016d8:	2301      	movs	r3, #1
 80016da:	2201      	movs	r2, #1
 80016dc:	4803      	ldr	r0, [pc, #12]	; (80016ec <ILI9341_SPI_Send+0x20>)
 80016de:	f004 fd27 	bl	8006130 <HAL_SPI_Transmit>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000408 	.word	0x20000408

080016f0 <ILI9341_SPI_Send_Multiple>:
{
	HAL_SPI_Transmit(&lcd_spi, &data, 2, 1);
}

void ILI9341_SPI_Send_Multiple(uint8_t* data, int size)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&lcd_spi, data, size, 10);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	230a      	movs	r3, #10
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <ILI9341_SPI_Send_Multiple+0x20>)
 8001704:	f004 fd14 	bl	8006130 <HAL_SPI_Transmit>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000408 	.word	0x20000408

08001714 <ILI9341_Reset>:

void ILI9341_Reset() {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	RESET_ON;
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800171e:	4810      	ldr	r0, [pc, #64]	; (8001760 <ILI9341_Reset+0x4c>)
 8001720:	f002 fa7f 	bl	8003c22 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001724:	2032      	movs	r0, #50	; 0x32
 8001726:	f001 f881 	bl	800282c <HAL_Delay>
	RESET_OFF;
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <ILI9341_Reset+0x4c>)
 8001732:	f002 fa76 	bl	8003c22 <HAL_GPIO_WritePin>
	CS_ON;
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173c:	4808      	ldr	r0, [pc, #32]	; (8001760 <ILI9341_Reset+0x4c>)
 800173e:	f002 fa70 	bl	8003c22 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001742:	2032      	movs	r0, #50	; 0x32
 8001744:	f001 f872 	bl	800282c <HAL_Delay>
	ILI9341_Send_Command(0x01);
 8001748:	2001      	movs	r0, #1
 800174a:	f7ff fe4d 	bl	80013e8 <ILI9341_Send_Command>
	CS_OFF;
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <ILI9341_Reset+0x4c>)
 8001756:	f002 fa64 	bl	8003c22 <HAL_GPIO_WritePin>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40010c00 	.word	0x40010c00

08001764 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800176e:	2036      	movs	r0, #54	; 0x36
 8001770:	f7ff fe3a 	bl	80013e8 <ILI9341_Send_Command>
	switch (rotation) {
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b03      	cmp	r3, #3
 8001778:	d836      	bhi.n	80017e8 <ILI9341_Set_Rotation+0x84>
 800177a:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <ILI9341_Set_Rotation+0x1c>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	08001791 	.word	0x08001791
 8001784:	080017a7 	.word	0x080017a7
 8001788:	080017bd 	.word	0x080017bd
 800178c:	080017d3 	.word	0x080017d3
	case 0:
		ILI9341_Send_Data(0x48);
 8001790:	2048      	movs	r0, #72	; 0x48
 8001792:	f7ff fe45 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 240;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 8001798:	22f0      	movs	r2, #240	; 0xf0
 800179a:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 800179e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017a2:	601a      	str	r2, [r3, #0]
		break;
 80017a4:	e020      	b.n	80017e8 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 80017a6:	2028      	movs	r0, #40	; 0x28
 80017a8:	f7ff fe3a 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 80017ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017b2:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 80017b6:	22f0      	movs	r2, #240	; 0xf0
 80017b8:	601a      	str	r2, [r3, #0]
		break;
 80017ba:	e015      	b.n	80017e8 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 80017bc:	2088      	movs	r0, #136	; 0x88
 80017be:	f7ff fe2f 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 240;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 80017c4:	22f0      	movs	r2, #240	; 0xf0
 80017c6:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 80017ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017ce:	601a      	str	r2, [r3, #0]
		break;
 80017d0:	e00a      	b.n	80017e8 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 80017d2:	20e8      	movs	r0, #232	; 0xe8
 80017d4:	f7ff fe24 	bl	8001420 <ILI9341_Send_Data>
		X_SIZE = 320;
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <ILI9341_Set_Rotation+0x8c>)
 80017da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017de:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <ILI9341_Set_Rotation+0x90>)
 80017e2:	22f0      	movs	r2, #240	; 0xf0
 80017e4:	601a      	str	r2, [r3, #0]
		break;
 80017e6:	bf00      	nop
	}
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000004 	.word	0x20000004

080017f8 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800180a:	4817      	ldr	r0, [pc, #92]	; (8001868 <ILI9341_SPI_Send_32+0x70>)
 800180c:	f002 fa09 	bl	8003c22 <HAL_GPIO_WritePin>
	DC_COMMAND;
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001816:	4814      	ldr	r0, [pc, #80]	; (8001868 <ILI9341_SPI_Send_32+0x70>)
 8001818:	f002 fa03 	bl	8003c22 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff54 	bl	80016cc <ILI9341_SPI_Send>

	DC_DATA;
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <ILI9341_SPI_Send_32+0x70>)
 800182c:	f002 f9f9 	bl	8003c22 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	0e1b      	lsrs	r3, r3, #24
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff ff48 	bl	80016cc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	0c1b      	lsrs	r3, r3, #16
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff42 	bl	80016cc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff3c 	bl	80016cc <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff37 	bl	80016cc <ILI9341_SPI_Send>

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40010c00 	.word	0x40010c00

0800186c <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	617b      	str	r3, [r7, #20]
	t |= x2;
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	202a      	movs	r0, #42	; 0x2a
 8001890:	f7ff ffb2 	bl	80017f8 <ILI9341_SPI_Send_32>
	t = y1;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	041b      	lsls	r3, r3, #16
 800189c:	617b      	str	r3, [r7, #20]
	t |= y2;
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 80018a6:	6979      	ldr	r1, [r7, #20]
 80018a8:	202b      	movs	r0, #43	; 0x2b
 80018aa:	f7ff ffa5 	bl	80017f8 <ILI9341_SPI_Send_32>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <LCD_OpenWindow>:
	ILI9341_SPI_Send(data);
	ILI9341_SPI_Send(data);
}

void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{
 80018b6:	b590      	push	{r4, r7, lr}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4604      	mov	r4, r0
 80018be:	4608      	mov	r0, r1
 80018c0:	4611      	mov	r1, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	80fb      	strh	r3, [r7, #6]
 80018c8:	4603      	mov	r3, r0
 80018ca:	80bb      	strh	r3, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
 80018d0:	4613      	mov	r3, r2
 80018d2:	803b      	strh	r3, [r7, #0]
	ILI9341_Set_Address(usCOLUMN, usPAGE, usCOLUMN + usWidth - 1, usPAGE + usHeight - 1);
 80018d4:	88f8      	ldrh	r0, [r7, #6]
 80018d6:	88b9      	ldrh	r1, [r7, #4]
 80018d8:	88fa      	ldrh	r2, [r7, #6]
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	4413      	add	r3, r2
 80018de:	3b01      	subs	r3, #1
 80018e0:	461c      	mov	r4, r3
 80018e2:	88ba      	ldrh	r2, [r7, #4]
 80018e4:	883b      	ldrh	r3, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	3b01      	subs	r3, #1
 80018ea:	4622      	mov	r2, r4
 80018ec:	f7ff ffbe 	bl	800186c <ILI9341_Set_Address>
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <LCD_FillWindow>:

void LCD_FillWindow ( uint32_t usPoint, uint16_t usColor )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );
 8001908:	202c      	movs	r0, #44	; 0x2c
 800190a:	f7ff fd6d 	bl	80013e8 <ILI9341_Send_Command>

	CS_ON;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001914:	482a      	ldr	r0, [pc, #168]	; (80019c0 <LCD_FillWindow+0xc8>)
 8001916:	f002 f984 	bl	8003c22 <HAL_GPIO_WritePin>
	DC_DATA;
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001920:	4827      	ldr	r0, [pc, #156]	; (80019c0 <LCD_FillWindow+0xc8>)
 8001922:	f002 f97e 	bl	8003c22 <HAL_GPIO_WritePin>

	int chunk_size = usPoint / 10;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a26      	ldr	r2, [pc, #152]	; (80019c4 <LCD_FillWindow+0xcc>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	08db      	lsrs	r3, r3, #3
 8001930:	61fb      	str	r3, [r7, #28]
	if (chunk_size < 64) chunk_size = 64;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b3f      	cmp	r3, #63	; 0x3f
 8001936:	dc01      	bgt.n	800193c <LCD_FillWindow+0x44>
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	61fb      	str	r3, [r7, #28]
	if (chunk_size > 240) chunk_size = 240;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2bf0      	cmp	r3, #240	; 0xf0
 8001940:	dd01      	ble.n	8001946 <LCD_FillWindow+0x4e>
 8001942:	23f0      	movs	r3, #240	; 0xf0
 8001944:	61fb      	str	r3, [r7, #28]
	unsigned int revertedColor = (usColor >> 8) | ((usColor & 0x00ff) << 8);
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b29b      	uxth	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
	uint16_t* array = (uint16_t*) malloc(chunk_size * sizeof(uint16_t));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4618      	mov	r0, r3
 800195e:	f009 fb59 	bl	800b014 <malloc>
 8001962:	4603      	mov	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < chunk_size; i++) {
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	e009      	b.n	8001980 <LCD_FillWindow+0x88>
		array[i] = revertedColor;
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	b292      	uxth	r2, r2
 8001978:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < chunk_size; i++) {
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	3301      	adds	r3, #1
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf1      	blt.n	800196c <LCD_FillWindow+0x74>
	}

	while (usPoint > chunk_size) {
 8001988:	e009      	b.n	800199e <LCD_FillWindow+0xa6>
		ILI9341_SPI_Send_Multiple(array, chunk_size * 2);
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4619      	mov	r1, r3
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff fead 	bl	80016f0 <ILI9341_SPI_Send_Multiple>
		usPoint -= chunk_size;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	607b      	str	r3, [r7, #4]
	while (usPoint > chunk_size) {
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d8f1      	bhi.n	800198a <LCD_FillWindow+0x92>
	}
	ILI9341_SPI_Send_Multiple(array, usPoint * 2);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4619      	mov	r1, r3
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff fe9f 	bl	80016f0 <ILI9341_SPI_Send_Multiple>

	free(array);
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f009 fb36 	bl	800b024 <free>

//	for ( i = 0; i < usPoint; i ++ ) {
//		ILI9341_SPI_SendU16(revertedColor);
//	}

}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	cccccccd 	.word	0xcccccccd

080019c8 <LCD_DrawFilledRectangle>:

void LCD_DrawFilledRectangle ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4604      	mov	r4, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	4603      	mov	r3, r0
 80019dc:	80bb      	strh	r3, [r7, #4]
 80019de:	460b      	mov	r3, r1
 80019e0:	807b      	strh	r3, [r7, #2]
 80019e2:	4613      	mov	r3, r2
 80019e4:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019e6:	883b      	ldrh	r3, [r7, #0]
 80019e8:	887a      	ldrh	r2, [r7, #2]
 80019ea:	88b9      	ldrh	r1, [r7, #4]
 80019ec:	88f8      	ldrh	r0, [r7, #6]
 80019ee:	f7ff ff62 	bl	80018b6 <LCD_OpenWindow>
	LCD_FillWindow ( usWidth * usHeight, usColor );
 80019f2:	887b      	ldrh	r3, [r7, #2]
 80019f4:	883a      	ldrh	r2, [r7, #0]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	8b3b      	ldrh	r3, [r7, #24]
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f7ff ff79 	bl	80018f8 <LCD_FillWindow>
//	ILI9341_Send_Burst(usColor,  usWidth * usHeight);
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd90      	pop	{r4, r7, pc}
	...

08001a10 <LCD_FillScreen>:


void LCD_FillScreen (uint16_t usColor )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	LCD_DrawFilledRectangle(0, 0, X_SIZE, Y_SIZE, usColor);
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <LCD_FillScreen+0x2c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <LCD_FillScreen+0x30>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b299      	uxth	r1, r3
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff ffca 	bl	80019c8 <LCD_DrawFilledRectangle>
}
 8001a34:	bf00      	nop
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000004 	.word	0x20000004

08001a44 <LCD_DrawChar>:

	}
}

void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	80bb      	strh	r3, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	ucRelativePositon = cChar - ' ';
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	3b20      	subs	r3, #32
 8001a5a:	73fb      	strb	r3, [r7, #15]

	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a5c:	88b9      	ldrh	r1, [r7, #4]
 8001a5e:	88f8      	ldrh	r0, [r7, #6]
 8001a60:	2310      	movs	r3, #16
 8001a62:	2208      	movs	r2, #8
 8001a64:	f7ff ff27 	bl	80018b6 <LCD_OpenWindow>

	LCD_Write_Cmd ( CMD_SetPixel );
 8001a68:	202c      	movs	r0, #44	; 0x2c
 8001a6a:	f7ff fcbd 	bl	80013e8 <ILI9341_Send_Command>

	uint16_t* array = (uint16_t*) malloc(HEIGHT_EN_CHAR * WIDTH_EN_CHAR * sizeof(uint16_t));
 8001a6e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a72:	f009 facf 	bl	800b014 <malloc>
 8001a76:	4603      	mov	r3, r0
 8001a78:	60bb      	str	r3, [r7, #8]
	uint16_t* pt = array;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75bb      	strb	r3, [r7, #22]
 8001a82:	e026      	b.n	8001ad2 <LCD_DrawChar+0x8e>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	7dbb      	ldrb	r3, [r7, #22]
 8001a88:	491c      	ldr	r1, [pc, #112]	; (8001afc <LCD_DrawChar+0xb8>)
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	440a      	add	r2, r1
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	75fb      	strb	r3, [r7, #23]

		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a94:	2300      	movs	r3, #0
 8001a96:	757b      	strb	r3, [r7, #21]
 8001a98:	e015      	b.n	8001ac6 <LCD_DrawChar+0x82>
		{

			if ( ucTemp & 0x01 ) {
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <LCD_DrawChar+0x68>
				*pt = 0x0000;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	801a      	strh	r2, [r3, #0]
 8001aaa:	e003      	b.n	8001ab4 <LCD_DrawChar+0x70>
			} else {
				*pt = 0xFFFF;
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab2:	801a      	strh	r2, [r3, #0]
			}
			ucTemp >>= 1;
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
			pt++;
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	3302      	adds	r3, #2
 8001abe:	613b      	str	r3, [r7, #16]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001ac0:	7d7b      	ldrb	r3, [r7, #21]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	757b      	strb	r3, [r7, #21]
 8001ac6:	7d7b      	ldrb	r3, [r7, #21]
 8001ac8:	2b07      	cmp	r3, #7
 8001aca:	d9e6      	bls.n	8001a9a <LCD_DrawChar+0x56>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001acc:	7dbb      	ldrb	r3, [r7, #22]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	75bb      	strb	r3, [r7, #22]
 8001ad2:	7dbb      	ldrb	r3, [r7, #22]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d9d5      	bls.n	8001a84 <LCD_DrawChar+0x40>
		}
	}
	DC_DATA;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <LCD_DrawChar+0xbc>)
 8001ae0:	f002 f89f 	bl	8003c22 <HAL_GPIO_WritePin>
	ILI9341_SPI_Send_Multiple(array, HEIGHT_EN_CHAR * WIDTH_EN_CHAR * 2);
 8001ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae8:	68b8      	ldr	r0, [r7, #8]
 8001aea:	f7ff fe01 	bl	80016f0 <ILI9341_SPI_Send_Multiple>
	free(array);
 8001aee:	68b8      	ldr	r0, [r7, #8]
 8001af0:	f009 fa98 	bl	800b024 <free>
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	0800e104 	.word	0x0800e104
 8001b00:	40010c00 	.word	0x40010c00

08001b04 <LCD_DrawString>:
}



void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	603a      	str	r2, [r7, #0]
 8001b0e:	80fb      	strh	r3, [r7, #6]
 8001b10:	460b      	mov	r3, r1
 8001b12:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001b14:	e01d      	b.n	8001b52 <LCD_DrawString+0x4e>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001b1c:	d904      	bls.n	8001b28 <LCD_DrawString+0x24>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	3310      	adds	r3, #16
 8001b26:	80bb      	strh	r3, [r7, #4]
		}

		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001b2e:	d903      	bls.n	8001b38 <LCD_DrawString+0x34>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001b30:	2300      	movs	r3, #0
 8001b32:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	80bb      	strh	r3, [r7, #4]
		}

		LCD_DrawChar ( usC, usP, * pStr );
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	88b9      	ldrh	r1, [r7, #4]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff7f 	bl	8001a44 <LCD_DrawChar>

		pStr ++;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	603b      	str	r3, [r7, #0]

		usC += WIDTH_EN_CHAR;
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1dd      	bne.n	8001b16 <LCD_DrawString+0x12>

	}

}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <LCD_Print>:

	if (num_chars_to_print < 0) return;
	LCD_DrawString(x, y, formatted_str);
}

void LCD_Print(uint16_t xc, uint16_t yc, const char* fmt, ...) {
 8001b64:	b40c      	push	{r2, r3}
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b08e      	sub	sp, #56	; 0x38
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	460a      	mov	r2, r1
 8001b70:	80fb      	strh	r3, [r7, #6]
 8001b72:	4613      	mov	r3, r2
 8001b74:	80bb      	strh	r3, [r7, #4]

	char formatted_str[40];

	va_list arglist;
	va_start(arglist, fmt);
 8001b76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b7a:	60bb      	str	r3, [r7, #8]

	int num_chars_to_print = vsnprintf(formatted_str, sizeof(formatted_str), fmt, arglist);
 8001b7c:	f107 000c 	add.w	r0, r7, #12
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b84:	2128      	movs	r1, #40	; 0x28
 8001b86:	f009 ffd5 	bl	800bb34 <vsniprintf>
 8001b8a:	6378      	str	r0, [r7, #52]	; 0x34
	va_end(arglist);

	if (num_chars_to_print < 0) return;
 8001b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db0b      	blt.n	8001baa <LCD_Print+0x46>
	LCD_DrawString(xc * WIDTH_EN_CHAR, yc * HEIGHT_EN_CHAR, formatted_str);
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	b298      	uxth	r0, r3
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f107 020c 	add.w	r2, r7, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7ff ffae 	bl	8001b04 <LCD_DrawString>
 8001ba8:	e000      	b.n	8001bac <LCD_Print+0x48>
	if (num_chars_to_print < 0) return;
 8001baa:	bf00      	nop
}
 8001bac:	3738      	adds	r7, #56	; 0x38
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bb4:	b002      	add	sp, #8
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_TIM_PeriodElapsedCallback>:

int drum_max_val[4] = {0, 0, 0, 0};
int drum_interrupt_start_tick = 0;
int drum_interrupt_counts = 0;
extern USB_JoystickReport_Input joystick_input_data;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d121      	bne.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x54>
		drum_interrupt_counts++;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001bd0:	6013      	str	r3, [r2, #0]

		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0)) {
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4811      	ldr	r0, [pc, #68]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001bd6:	f002 f80d 	bl	8003bf4 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_TIM_PeriodElapsedCallback+0x30>
			joystick_input_data.Button = SWITCH_A;  // left Shift
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001be2:	2204      	movs	r2, #4
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	e002      	b.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x36>
		} else {
			joystick_input_data.Button = 0;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	801a      	strh	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0));
 8001bee:	2101      	movs	r1, #1
 8001bf0:	480a      	ldr	r0, [pc, #40]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001bf2:	f001 ffff 	bl	8003bf4 <HAL_GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c00:	f002 f80f 	bl	8003c22 <HAL_GPIO_WritePin>
		SendReport(&hUsbDeviceFS, &joystick_input_data);
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c06:	4808      	ldr	r0, [pc, #32]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c08:	f000 fb6d 	bl	80022e6 <SendReport>
//				drum_max_val[i] = drum_sensor_values[i];
//			}
//		}
	}

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000052c 	.word	0x2000052c
 8001c18:	20000588 	.word	0x20000588
 8001c1c:	40011800 	.word	0x40011800
 8001c20:	20000008 	.word	0x20000008
 8001c24:	40011000 	.word	0x40011000
 8001c28:	200005a0 	.word	0x200005a0

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c30:	b090      	sub	sp, #64	; 0x40
 8001c32:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c34:	f000 fd98 	bl	8002768 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c38:	f000 f944 	bl	8001ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c3c:	f000 faae 	bl	800219c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c40:	f000 fa8e 	bl	8002160 <MX_DMA_Init>
  MX_SPI2_Init();
 8001c44:	f000 fa08 	bl	8002058 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001c48:	f000 fa3c 	bl	80020c4 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001c4c:	f000 f99a 	bl	8001f84 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001c50:	f008 fdfc 	bl	800a84c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init();
 8001c54:	f7ff fc00 	bl	8001458 <ILI9341_Init>
	ILI9341_Set_Rotation(2);
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7ff fd83 	bl	8001764 <ILI9341_Set_Rotation>
	LCD_FillScreen(PINK);
 8001c5e:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8001c62:	f7ff fed5 	bl	8001a10 <LCD_FillScreen>
	HAL_ADC_Start_DMA(&hadc1, drum_sensor_values, 4);
 8001c66:	2204      	movs	r2, #4
 8001c68:	4984      	ldr	r1, [pc, #528]	; (8001e7c <main+0x250>)
 8001c6a:	4885      	ldr	r0, [pc, #532]	; (8001e80 <main+0x254>)
 8001c6c:	f000 feec 	bl	8002a48 <HAL_ADC_Start_DMA>
	DrumInit();
 8001c70:	f7ff f9f2 	bl	8001058 <DrumInit>
  	DrumCalibrate();
 8001c74:	f7ff fa4c 	bl	8001110 <DrumCalibrate>
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  	drum_interrupt_start_tick = HAL_GetTick();
 8001c78:	f000 fdce 	bl	8002818 <HAL_GetTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <main+0x258>)
 8001c82:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3);
 8001c84:	4880      	ldr	r0, [pc, #512]	; (8001e88 <main+0x25c>)
 8001c86:	f004 fc8d 	bl	80065a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */


//  LCD_DrawFilledRectangle(0, 0, 240, 320, RED);

	long last_ticks = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
	long tft_last_ticks = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
	long ticks = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
	int num_hits = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
	int hit_state = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
//		keyboardhid.MODIFIER = 0x00;  // shift release
//		keyboardhid.KEYCODE1 = 0x00;  // release key
//		keyboardhid.KEYCODE2 = 0x00;  // release key
//		USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));

		joystick_input_data.Button = SWITCH_CAPTURE;  // left Shift
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <main+0x260>)
 8001ca0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ca4:	801a      	strh	r2, [r3, #0]
		SendReport(&hUsbDeviceFS, &joystick_input_data);
 8001ca6:	4979      	ldr	r1, [pc, #484]	; (8001e8c <main+0x260>)
 8001ca8:	4879      	ldr	r0, [pc, #484]	; (8001e90 <main+0x264>)
 8001caa:	f000 fb1c 	bl	80022e6 <SendReport>
		HAL_Delay (50);
 8001cae:	2032      	movs	r0, #50	; 0x32
 8001cb0:	f000 fdbc 	bl	800282c <HAL_Delay>

		joystick_input_data.Button = 0;  // left Shift
 8001cb4:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <main+0x260>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
		SendReport(&hUsbDeviceFS, &joystick_input_data);
 8001cba:	4974      	ldr	r1, [pc, #464]	; (8001e8c <main+0x260>)
 8001cbc:	4874      	ldr	r0, [pc, #464]	; (8001e90 <main+0x264>)
 8001cbe:	f000 fb12 	bl	80022e6 <SendReport>
		HAL_Delay (200);
 8001cc2:	20c8      	movs	r0, #200	; 0xc8
 8001cc4:	f000 fdb2 	bl	800282c <HAL_Delay>
//	  } else {
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
//	  }

//
		if (HAL_GetTick() - tft_last_ticks > 30) {
 8001cc8:	f000 fda6 	bl	8002818 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b1e      	cmp	r3, #30
 8001cd4:	d9e3      	bls.n	8001c9e <main+0x72>

//			__disable_irq();
			int r = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	623a      	str	r2, [r7, #32]
 8001ce0:	fa1f f883 	uxth.w	r8, r3
					HAL_GetTick() / (1000 * 60 * 60),
 8001ce4:	f000 fd98 	bl	8002818 <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001cea:	4a6a      	ldr	r2, [pc, #424]	; (8001e94 <main+0x268>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	ea4f 5953 	mov.w	r9, r3, lsr #21
					HAL_GetTick() / (1000 * 60) % 60,
 8001cf4:	f000 fd90 	bl	8002818 <HAL_GetTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a67      	ldr	r2, [pc, #412]	; (8001e98 <main+0x26c>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	0b9a      	lsrs	r2, r3, #14
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <main+0x270>)
 8001d04:	fba3 1302 	umull	r1, r3, r3, r2
 8001d08:	095c      	lsrs	r4, r3, #5
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	1b1b      	subs	r3, r3, r4
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	1ad4      	subs	r4, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8001d14:	f000 fd80 	bl	8002818 <HAL_GetTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a61      	ldr	r2, [pc, #388]	; (8001ea0 <main+0x274>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	099a      	lsrs	r2, r3, #6
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001d22:	4b5e      	ldr	r3, [pc, #376]	; (8001e9c <main+0x270>)
 8001d24:	fba3 1302 	umull	r1, r3, r3, r2
 8001d28:	095d      	lsrs	r5, r3, #5
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	1b5b      	subs	r3, r3, r5
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	1ad5      	subs	r5, r2, r3
					(HAL_GetTick() / 1000) % 60, HAL_GetTick() % 1000,
 8001d34:	f000 fd70 	bl	8002818 <HAL_GetTick>
 8001d38:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001d3a:	4a59      	ldr	r2, [pc, #356]	; (8001ea0 <main+0x274>)
 8001d3c:	fba2 1203 	umull	r1, r2, r2, r3
 8001d40:	0996      	lsrs	r6, r2, #6
 8001d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d46:	fb06 f202 	mul.w	r2, r6, r2
 8001d4a:	1a9e      	subs	r6, r3, r2
					(float) drum_interrupt_counts / (HAL_GetTick() - drum_interrupt_start_tick + 1) * 1000);
 8001d4c:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <main+0x278>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ffbf 	bl	8000cd4 <__aeabi_i2f>
 8001d56:	4682      	mov	sl, r0
 8001d58:	f000 fd5e 	bl	8002818 <HAL_GetTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a49      	ldr	r2, [pc, #292]	; (8001e84 <main+0x258>)
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	3301      	adds	r3, #1
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ffb0 	bl	8000ccc <__aeabi_ui2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4650      	mov	r0, sl
 8001d72:	f7ff f8b7 	bl	8000ee4 <__aeabi_fdiv>
 8001d76:	4603      	mov	r3, r0
 8001d78:	494b      	ldr	r1, [pc, #300]	; (8001ea8 <main+0x27c>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fffe 	bl	8000d7c <__aeabi_fmul>
 8001d80:	4603      	mov	r3, r0
			LCD_Print(0, r++, "%02ld:%02ld:%02ld.%03ld, %6.1f Hz",
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbbc 	bl	8000500 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d90:	9602      	str	r6, [sp, #8]
 8001d92:	9501      	str	r5, [sp, #4]
 8001d94:	9400      	str	r4, [sp, #0]
 8001d96:	464b      	mov	r3, r9
 8001d98:	4a44      	ldr	r2, [pc, #272]	; (8001eac <main+0x280>)
 8001d9a:	4641      	mov	r1, r8
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff fee1 	bl	8001b64 <LCD_Print>

			LCD_Print(0, r++, "         adc | hits");
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	623a      	str	r2, [r7, #32]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4a41      	ldr	r2, [pc, #260]	; (8001eb0 <main+0x284>)
 8001dac:	4619      	mov	r1, r3
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff fed8 	bl	8001b64 <LCD_Print>
			for (int i = 0; i < 4; i++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	e020      	b.n	8001dfc <main+0x1d0>
				LCD_Print(0, r++, "Drum %d: %4ld | %4d | %4d", i,
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	623a      	str	r2, [r7, #32]
 8001dc0:	b298      	uxth	r0, r3
 8001dc2:	4a2e      	ldr	r2, [pc, #184]	; (8001e7c <main+0x250>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dca:	4c3a      	ldr	r4, [pc, #232]	; (8001eb4 <main+0x288>)
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4423      	add	r3, r4
 8001dd8:	3304      	adds	r3, #4
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4c36      	ldr	r4, [pc, #216]	; (8001eb8 <main+0x28c>)
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001de4:	9202      	str	r2, [sp, #8]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	9100      	str	r1, [sp, #0]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <main+0x290>)
 8001dee:	4601      	mov	r1, r0
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff feb7 	bl	8001b64 <LCD_Print>
			for (int i = 0; i < 4; i++) {
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	dddb      	ble.n	8001dba <main+0x18e>
						drum_sensor_values[i], drums[i].hit_count, drum_max_val[i]);
			}

			for (int i = 0; i < 4; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	e031      	b.n	8001e6c <main+0x240>
				LCD_Print(0, r++, "%lf, %lf, %lf",
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	623a      	str	r2, [r7, #32]
 8001e0e:	b29e      	uxth	r6, r3
 8001e10:	4928      	ldr	r1, [pc, #160]	; (8001eb4 <main+0x288>)
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3318      	adds	r3, #24
 8001e20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e24:	4c23      	ldr	r4, [pc, #140]	; (8001eb4 <main+0x288>)
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4423      	add	r3, r4
 8001e32:	3320      	adds	r3, #32
 8001e34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <main+0x288>)
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	3328      	adds	r3, #40	; 0x28
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001e58:	e9cd 0100 	strd	r0, r1, [sp]
 8001e5c:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <main+0x294>)
 8001e5e:	4631      	mov	r1, r6
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fe7f 	bl	8001b64 <LCD_Print>
			for (int i = 0; i < 4; i++) {
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	ddca      	ble.n	8001e08 <main+0x1dc>
						drums[i].sensor_avg, drums[i].sensor_sd, drums[i].sensor_thresh);
			}

//			__enable_irq();

			tft_last_ticks = HAL_GetTick();
 8001e72:	f000 fcd1 	bl	8002818 <HAL_GetTick>
 8001e76:	4603      	mov	r3, r0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
		joystick_input_data.Button = SWITCH_CAPTURE;  // left Shift
 8001e7a:	e710      	b.n	8001c9e <main+0x72>
 8001e7c:	2000032c 	.word	0x2000032c
 8001e80:	20000460 	.word	0x20000460
 8001e84:	20000584 	.word	0x20000584
 8001e88:	2000052c 	.word	0x2000052c
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	200005a0 	.word	0x200005a0
 8001e94:	95217cb1 	.word	0x95217cb1
 8001e98:	45e7b273 	.word	0x45e7b273
 8001e9c:	88888889 	.word	0x88888889
 8001ea0:	10624dd3 	.word	0x10624dd3
 8001ea4:	20000588 	.word	0x20000588
 8001ea8:	447a0000 	.word	0x447a0000
 8001eac:	0800e060 	.word	0x0800e060
 8001eb0:	0800e084 	.word	0x0800e084
 8001eb4:	20000340 	.word	0x20000340
 8001eb8:	20000574 	.word	0x20000574
 8001ebc:	0800e098 	.word	0x0800e098
 8001ec0:	0800e0b4 	.word	0x0800e0b4

08001ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b096      	sub	sp, #88	; 0x58
 8001ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ece:	2228      	movs	r2, #40	; 0x28
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f009 f8ae 	bl	800b034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001efc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f06:	2301      	movs	r3, #1
 8001f08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f14:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f18:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fbee 	bl	8005700 <HAL_RCC_OscConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001f2a:	f000 f9d7 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2e:	230f      	movs	r3, #15
 8001f30:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f40:	2300      	movs	r3, #0
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fe5a 	bl	8005c04 <HAL_RCC_ClockConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f56:	f000 f9c1 	bl	80022dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001f5a:	2312      	movs	r3, #18
 8001f5c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f62:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f003 ffa6 	bl	8005ebc <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001f76:	f000 f9b1 	bl	80022dc <Error_Handler>
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3758      	adds	r7, #88	; 0x58
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <MX_ADC1_Init+0xd0>)
 8001f98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fa8:	4b29      	ldr	r3, [pc, #164]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001fb0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001fb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001fbe:	2204      	movs	r2, #4
 8001fc0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fc2:	4823      	ldr	r0, [pc, #140]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001fc4:	f000 fc56 	bl	8002874 <HAL_ADC_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001fce:	f000 f985 	bl	80022dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481b      	ldr	r0, [pc, #108]	; (8002050 <MX_ADC1_Init+0xcc>)
 8001fe4:	f000 fe2a 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001fee:	f000 f975 	bl	80022dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4814      	ldr	r0, [pc, #80]	; (8002050 <MX_ADC1_Init+0xcc>)
 8002000:	f000 fe1c 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800200a:	f000 f967 	bl	80022dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800200e:	2302      	movs	r3, #2
 8002010:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002012:	2303      	movs	r3, #3
 8002014:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_ADC1_Init+0xcc>)
 800201c:	f000 fe0e 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002026:	f000 f959 	bl	80022dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800202a:	2303      	movs	r3, #3
 800202c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800202e:	2304      	movs	r3, #4
 8002030:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <MX_ADC1_Init+0xcc>)
 8002038:	f000 fe00 	bl	8002c3c <HAL_ADC_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8002042:	f000 f94b 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000460 	.word	0x20000460
 8002054:	40012400 	.word	0x40012400

08002058 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_SPI2_Init+0x64>)
 800205e:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <MX_SPI2_Init+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002062:	4b16      	ldr	r3, [pc, #88]	; (80020bc <MX_SPI2_Init+0x64>)
 8002064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002068:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800206a:	4b14      	ldr	r3, [pc, #80]	; (80020bc <MX_SPI2_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <MX_SPI2_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <MX_SPI2_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MX_SPI2_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <MX_SPI2_Init+0x64>)
 8002084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002088:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_SPI2_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <MX_SPI2_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <MX_SPI2_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <MX_SPI2_Init+0x64>)
 800209e:	2200      	movs	r2, #0
 80020a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <MX_SPI2_Init+0x64>)
 80020a4:	220a      	movs	r2, #10
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020a8:	4804      	ldr	r0, [pc, #16]	; (80020bc <MX_SPI2_Init+0x64>)
 80020aa:	f003 ffbd 	bl	8006028 <HAL_SPI_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80020b4:	f000 f912 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200004d4 	.word	0x200004d4
 80020c0:	40003800 	.word	0x40003800

080020c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ca:	f107 0308 	add.w	r3, r7, #8
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	463b      	mov	r3, r7
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_TIM3_Init+0x94>)
 80020e2:	4a1e      	ldr	r2, [pc, #120]	; (800215c <MX_TIM3_Init+0x98>)
 80020e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_TIM3_Init+0x94>)
 80020e8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80020ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_TIM3_Init+0x94>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_TIM3_Init+0x94>)
 80020f6:	2231      	movs	r2, #49	; 0x31
 80020f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_TIM3_Init+0x94>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <MX_TIM3_Init+0x94>)
 8002102:	2200      	movs	r2, #0
 8002104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002106:	4814      	ldr	r0, [pc, #80]	; (8002158 <MX_TIM3_Init+0x94>)
 8002108:	f004 f9fc 	bl	8006504 <HAL_TIM_Base_Init>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002112:	f000 f8e3 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	4619      	mov	r1, r3
 8002122:	480d      	ldr	r0, [pc, #52]	; (8002158 <MX_TIM3_Init+0x94>)
 8002124:	f004 fba6 	bl	8006874 <HAL_TIM_ConfigClockSource>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800212e:	f000 f8d5 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800213a:	463b      	mov	r3, r7
 800213c:	4619      	mov	r1, r3
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <MX_TIM3_Init+0x94>)
 8002140:	f004 fd94 	bl	8006c6c <HAL_TIMEx_MasterConfigSynchronization>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800214a:	f000 f8c7 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000052c 	.word	0x2000052c
 800215c:	40000400 	.word	0x40000400

08002160 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_DMA_Init+0x38>)
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <MX_DMA_Init+0x38>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6153      	str	r3, [r2, #20]
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_DMA_Init+0x38>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	200b      	movs	r0, #11
 8002184:	f001 f82b 	bl	80031de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002188:	200b      	movs	r0, #11
 800218a:	f001 f844 	bl	8003216 <HAL_NVIC_EnableIRQ>

}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000

0800219c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <MX_GPIO_Init+0x130>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <MX_GPIO_Init+0x130>)
 80021b6:	f043 0310 	orr.w	r3, r3, #16
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <MX_GPIO_Init+0x130>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b40      	ldr	r3, [pc, #256]	; (80022cc <MX_GPIO_Init+0x130>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a3f      	ldr	r2, [pc, #252]	; (80022cc <MX_GPIO_Init+0x130>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <MX_GPIO_Init+0x130>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <MX_GPIO_Init+0x130>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a39      	ldr	r2, [pc, #228]	; (80022cc <MX_GPIO_Init+0x130>)
 80021e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b37      	ldr	r3, [pc, #220]	; (80022cc <MX_GPIO_Init+0x130>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <MX_GPIO_Init+0x130>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a33      	ldr	r2, [pc, #204]	; (80022cc <MX_GPIO_Init+0x130>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <MX_GPIO_Init+0x130>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|LED_Pin, GPIO_PIN_RESET);
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8002216:	482e      	ldr	r0, [pc, #184]	; (80022d0 <MX_GPIO_Init+0x134>)
 8002218:	f001 fd03 	bl	8003c22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002222:	482c      	ldr	r0, [pc, #176]	; (80022d4 <MX_GPIO_Init+0x138>)
 8002224:	f001 fcfd 	bl	8003c22 <HAL_GPIO_WritePin>
                          |T_IRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800222e:	482a      	ldr	r0, [pc, #168]	; (80022d8 <MX_GPIO_Init+0x13c>)
 8002230:	f001 fcf7 	bl	8003c22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223a:	2301      	movs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002246:	f107 0310 	add.w	r3, r7, #16
 800224a:	4619      	mov	r1, r3
 800224c:	4820      	ldr	r0, [pc, #128]	; (80022d0 <MX_GPIO_Init+0x134>)
 800224e:	f001 fb3d 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin T_DIN_Pin T_DO_Pin
                           T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_DIN_Pin|T_DO_Pin
 8002252:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002256:	613b      	str	r3, [r7, #16]
                          |T_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2302      	movs	r3, #2
 8002262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	4619      	mov	r1, r3
 800226a:	481a      	ldr	r0, [pc, #104]	; (80022d4 <MX_GPIO_Init+0x138>)
 800226c:	f001 fb2e 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_CS_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_CS_Pin|LCD_RST_Pin;
 8002270:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	2301      	movs	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227e:	2302      	movs	r3, #2
 8002280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	4813      	ldr	r0, [pc, #76]	; (80022d8 <MX_GPIO_Init+0x13c>)
 800228a:	f001 fb1f 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4619      	mov	r1, r3
 80022a4:	480a      	ldr	r0, [pc, #40]	; (80022d0 <MX_GPIO_Init+0x134>)
 80022a6:	f001 fb11 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022aa:	2301      	movs	r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b6:	f107 0310 	add.w	r3, r7, #16
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_GPIO_Init+0x138>)
 80022be:	f001 fb05 	bl	80038cc <HAL_GPIO_Init>

}
 80022c2:	bf00      	nop
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40011000 	.word	0x40011000
 80022d4:	40011800 	.word	0x40011800
 80022d8:	40010c00 	.word	0x40010c00

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>

080022e6 <SendReport>:
  report->RY = STICK_CENTER;
  report->HAT = HAT_CENTER;
}

uint8_t SendReport(USBD_HandleTypeDef* pdev, USB_JoystickReport_Input* input_data)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]
  uint8_t result = USBD_FAIL;
 80022f0:	2302      	movs	r3, #2
 80022f2:	73fb      	strb	r3, [r7, #15]
  result = USBD_HID_SendReport(pdev, (uint8_t*)input_data, sizeof(USB_JoystickReport_Input));
 80022f4:	2208      	movs	r2, #8
 80022f6:	6839      	ldr	r1, [r7, #0]
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f007 f9bf 	bl	800967c <USBD_HID_SendReport>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
  return result;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_MspInit+0x40>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_MspInit+0x40>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6193      	str	r3, [r2, #24]
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_MspInit+0x40>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_MspInit+0x40>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <HAL_MspInit+0x40>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_MspInit+0x40>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_ADC_MspInit+0xbc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d149      	bne.n	8002404 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <HAL_ADC_MspInit+0xc0>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_ADC_MspInit+0xc0>)
 8002376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_ADC_MspInit+0xc0>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_ADC_MspInit+0xc0>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a20      	ldr	r2, [pc, #128]	; (8002410 <HAL_ADC_MspInit+0xc0>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_ADC_MspInit+0xc0>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80023a0:	230f      	movs	r3, #15
 80023a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023a4:	2303      	movs	r3, #3
 80023a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	4819      	ldr	r0, [pc, #100]	; (8002414 <HAL_ADC_MspInit+0xc4>)
 80023b0:	f001 fa8c 	bl	80038cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023b6:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_ADC_MspInit+0xcc>)
 80023b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023de:	2220      	movs	r2, #32
 80023e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023e8:	480b      	ldr	r0, [pc, #44]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023ea:	f000 ff2f 	bl	800324c <HAL_DMA_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80023f4:	f7ff ff72 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 80023fc:	621a      	str	r2, [r3, #32]
 80023fe:	4a06      	ldr	r2, [pc, #24]	; (8002418 <HAL_ADC_MspInit+0xc8>)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002404:	bf00      	nop
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40012400 	.word	0x40012400
 8002410:	40021000 	.word	0x40021000
 8002414:	40010800 	.word	0x40010800
 8002418:	20000490 	.word	0x20000490
 800241c:	40020008 	.word	0x40020008

08002420 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <HAL_SPI_MspInit+0x8c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d131      	bne.n	80024a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_SPI_MspInit+0x90>)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_SPI_MspInit+0x90>)
 8002446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244a:	61d3      	str	r3, [r2, #28]
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_SPI_MspInit+0x90>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002454:	60fb      	str	r3, [r7, #12]
 8002456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_SPI_MspInit+0x90>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_SPI_MspInit+0x90>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_SPI_MspInit+0x90>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002470:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4619      	mov	r1, r3
 8002484:	480b      	ldr	r0, [pc, #44]	; (80024b4 <HAL_SPI_MspInit+0x94>)
 8002486:	f001 fa21 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800248a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800248e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4619      	mov	r1, r3
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_SPI_MspInit+0x94>)
 80024a0:	f001 fa14 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40003800 	.word	0x40003800
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010c00 	.word	0x40010c00

080024b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <HAL_TIM_Base_MspInit+0x44>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d113      	bne.n	80024f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <HAL_TIM_Base_MspInit+0x48>)
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <HAL_TIM_Base_MspInit+0x48>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	61d3      	str	r3, [r2, #28]
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_TIM_Base_MspInit+0x48>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2100      	movs	r1, #0
 80024e6:	201d      	movs	r0, #29
 80024e8:	f000 fe79 	bl	80031de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024ec:	201d      	movs	r0, #29
 80024ee:	f000 fe92 	bl	8003216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40000400 	.word	0x40000400
 8002500:	40021000 	.word	0x40021000

08002504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <NMI_Handler+0x4>

0800250a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <MemManage_Handler+0x4>

08002516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <UsageFault_Handler+0x4>

08002522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254a:	f000 f953 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <DMA1_Channel1_IRQHandler+0x10>)
 800255a:	f000 ff4d 	bl	80033f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000490 	.word	0x20000490

08002568 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800256e:	f001 fc95 	bl	8003e9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000a64 	.word	0x20000a64

0800257c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <TIM3_IRQHandler+0x10>)
 8002582:	f004 f86f 	bl	8006664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000052c 	.word	0x2000052c

08002590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
	return 1;
 8002594:	2301      	movs	r3, #1
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <_kill>:

int _kill(int pid, int sig)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025a8:	f008 fd0a 	bl	800afc0 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2216      	movs	r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
	return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_exit>:

void _exit (int status)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025c6:	f04f 31ff 	mov.w	r1, #4294967295
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffe7 	bl	800259e <_kill>
	while (1) {}		/* Make sure we hang here */
 80025d0:	e7fe      	b.n	80025d0 <_exit+0x12>

080025d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b086      	sub	sp, #24
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	e00a      	b.n	80025fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025e4:	f3af 8000 	nop.w
 80025e8:	4601      	mov	r1, r0
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	60ba      	str	r2, [r7, #8]
 80025f0:	b2ca      	uxtb	r2, r1
 80025f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	dbf0      	blt.n	80025e4 <_read+0x12>
	}

return len;
 8002602:	687b      	ldr	r3, [r7, #4]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e009      	b.n	8002632 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	60ba      	str	r2, [r7, #8]
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	dbf1      	blt.n	800261e <_write+0x12>
	}
	return len;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_close>:

int _close(int file)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	return -1;
 800264c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266a:	605a      	str	r2, [r3, #4]
	return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <_isatty>:

int _isatty(int file)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	return 1;
 8002680:	2301      	movs	r3, #1
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
	return 0;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d4:	f008 fc74 	bl	800afc0 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	220c      	movs	r2, #12
 80026dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	e009      	b.n	80026f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_sbrk+0x64>)
 80026f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f6:	68fb      	ldr	r3, [r7, #12]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20010000 	.word	0x20010000
 8002704:	00000400 	.word	0x00000400
 8002708:	20000594 	.word	0x20000594
 800270c:	20000d78 	.word	0x20000d78

08002710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800271c:	f7ff fff8 	bl	8002710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002720:	480b      	ldr	r0, [pc, #44]	; (8002750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002722:	490c      	ldr	r1, [pc, #48]	; (8002754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002738:	4c09      	ldr	r4, [pc, #36]	; (8002760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f008 fc41 	bl	800afcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800274a:	f7ff fa6f 	bl	8001c2c <main>
  bx lr
 800274e:	4770      	bx	lr
  ldr r0, =_sdata
 8002750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002754:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8002758:	0800eafc 	.word	0x0800eafc
  ldr r2, =_sbss
 800275c:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8002760:	20000d78 	.word	0x20000d78

08002764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002764:	e7fe      	b.n	8002764 <ADC1_2_IRQHandler>
	...

08002768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_Init+0x28>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <HAL_Init+0x28>)
 8002772:	f043 0310 	orr.w	r3, r3, #16
 8002776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002778:	2003      	movs	r0, #3
 800277a:	f000 fd25 	bl	80031c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f808 	bl	8002794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002784:	f7ff fdc2 	bl	800230c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_InitTick+0x54>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_InitTick+0x58>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fd3d 	bl	8003232 <HAL_SYSTICK_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00e      	b.n	80027e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d80a      	bhi.n	80027de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f000 fd05 	bl	80031de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d4:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <HAL_InitTick+0x5c>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000010 	.word	0x20000010
 80027ec:	20000018 	.word	0x20000018
 80027f0:	20000014 	.word	0x20000014

080027f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_IncTick+0x1c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_IncTick+0x20>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_IncTick+0x20>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	20000018 	.word	0x20000018
 8002814:	20000598 	.word	0x20000598

08002818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return uwTick;
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <HAL_GetTick+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	20000598 	.word	0x20000598

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff fff0 	bl	8002818 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_Delay+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffe0 	bl	8002818 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000018 	.word	0x20000018

08002874 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0ce      	b.n	8002a34 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff fd4c 	bl	8002350 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fb11 	bl	8002ee0 <ADC_ConversionStop_Disable>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 80a9 	bne.w	8002a22 <HAL_ADC_Init+0x1ae>
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f040 80a5 	bne.w	8002a22 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028e0:	f023 0302 	bic.w	r3, r3, #2
 80028e4:	f043 0202 	orr.w	r2, r3, #2
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4951      	ldr	r1, [pc, #324]	; (8002a3c <HAL_ADC_Init+0x1c8>)
 80028f6:	428b      	cmp	r3, r1
 80028f8:	d10a      	bne.n	8002910 <HAL_ADC_Init+0x9c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002902:	d002      	beq.n	800290a <HAL_ADC_Init+0x96>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	e004      	b.n	8002914 <HAL_ADC_Init+0xa0>
 800290a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800290e:	e001      	b.n	8002914 <HAL_ADC_Init+0xa0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002914:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7b1b      	ldrb	r3, [r3, #12]
 800291a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800291c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	4313      	orrs	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292c:	d003      	beq.n	8002936 <HAL_ADC_Init+0xc2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_ADC_Init+0xc8>
 8002936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293a:	e000      	b.n	800293e <HAL_ADC_Init+0xca>
 800293c:	2300      	movs	r3, #0
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7d1b      	ldrb	r3, [r3, #20]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d119      	bne.n	8002980 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7b1b      	ldrb	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	3b01      	subs	r3, #1
 800295a:	035a      	lsls	r2, r3, #13
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e00b      	b.n	8002980 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_ADC_Init+0x1cc>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	d003      	beq.n	80029ba <HAL_ADC_Init+0x146>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d104      	bne.n	80029c4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	3b01      	subs	r3, #1
 80029c0:	051b      	lsls	r3, r3, #20
 80029c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_ADC_Init+0x1d0>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d10b      	bne.n	8002a00 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029fe:	e018      	b.n	8002a32 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	f023 0312 	bic.w	r3, r3, #18
 8002a08:	f043 0210 	orr.w	r2, r3, #16
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a20:	e007      	b.n	8002a32 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	f043 0210 	orr.w	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40013c00 	.word	0x40013c00
 8002a40:	ffe1f7fd 	.word	0xffe1f7fd
 8002a44:	ff1f0efe 	.word	0xff1f0efe

08002a48 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a64      	ldr	r2, [pc, #400]	; (8002bf0 <HAL_ADC_Start_DMA+0x1a8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_Start_DMA+0x24>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a63      	ldr	r2, [pc, #396]	; (8002bf4 <HAL_ADC_Start_DMA+0x1ac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d106      	bne.n	8002a7a <HAL_ADC_Start_DMA+0x32>
 8002a6c:	4b60      	ldr	r3, [pc, #384]	; (8002bf0 <HAL_ADC_Start_DMA+0x1a8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 80b3 	bne.w	8002be0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_Start_DMA+0x40>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0ae      	b.n	8002be6 <HAL_ADC_Start_DMA+0x19e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f9cb 	bl	8002e2c <ADC_Enable>
 8002a96:	4603      	mov	r3, r0
 8002a98:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 809a 	bne.w	8002bd6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a4e      	ldr	r2, [pc, #312]	; (8002bf4 <HAL_ADC_Start_DMA+0x1ac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_Start_DMA+0x84>
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <HAL_ADC_Start_DMA+0x1a8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d115      	bne.n	8002af8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d026      	beq.n	8002b34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002af6:	e01d      	b.n	8002b34 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a39      	ldr	r2, [pc, #228]	; (8002bf0 <HAL_ADC_Start_DMA+0x1a8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_ADC_Start_DMA+0xd0>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a38      	ldr	r2, [pc, #224]	; (8002bf4 <HAL_ADC_Start_DMA+0x1ac>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d10d      	bne.n	8002b34 <HAL_ADC_Start_DMA+0xec>
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_ADC_Start_DMA+0x1a8>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f023 0206 	bic.w	r2, r3, #6
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b4c:	e002      	b.n	8002b54 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a25      	ldr	r2, [pc, #148]	; (8002bf8 <HAL_ADC_Start_DMA+0x1b0>)
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <HAL_ADC_Start_DMA+0x1b4>)
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_ADC_Start_DMA+0x1b8>)
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0202 	mvn.w	r2, #2
 8002b7c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a18      	ldr	r0, [r3, #32]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	334c      	adds	r3, #76	; 0x4c
 8002b98:	4619      	mov	r1, r3
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f000 fbcb 	bl	8003338 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002bac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002bc0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002bc2:	e00f      	b.n	8002be4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bd2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002bd4:	e006      	b.n	8002be4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002bde:	e001      	b.n	8002be4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40012400 	.word	0x40012400
 8002bf4:	40012800 	.word	0x40012800
 8002bf8:	08002f63 	.word	0x08002f63
 8002bfc:	08002fdf 	.word	0x08002fdf
 8002c00:	08002ffb 	.word	0x08002ffb

08002c04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x20>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e0dc      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x1da>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d81c      	bhi.n	8002ca6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b05      	subs	r3, #5
 8002c7e:	221f      	movs	r2, #31
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4019      	ands	r1, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	3b05      	subs	r3, #5
 8002c98:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca4:	e03c      	b.n	8002d20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d81c      	bhi.n	8002ce8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b23      	subs	r3, #35	; 0x23
 8002cc0:	221f      	movs	r2, #31
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	4019      	ands	r1, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b23      	subs	r3, #35	; 0x23
 8002cda:	fa00 f203 	lsl.w	r2, r0, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce6:	e01b      	b.n	8002d20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b41      	subs	r3, #65	; 0x41
 8002cfa:	221f      	movs	r2, #31
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	4019      	ands	r1, r3
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3b41      	subs	r3, #65	; 0x41
 8002d14:	fa00 f203 	lsl.w	r2, r0, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	d91c      	bls.n	8002d62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68d9      	ldr	r1, [r3, #12]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	3b1e      	subs	r3, #30
 8002d3a:	2207      	movs	r2, #7
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4019      	ands	r1, r3
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6898      	ldr	r0, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	fa00 f203 	lsl.w	r2, r0, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	e019      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6919      	ldr	r1, [r3, #16]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	4413      	add	r3, r2
 8002d72:	2207      	movs	r2, #7
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	4019      	ands	r1, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6898      	ldr	r0, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d003      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002da2:	2b11      	cmp	r3, #17
 8002da4:	d132      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_ADC_ConfigChannel+0x1e4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d125      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d126      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dcc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d11a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <HAL_ADC_ConfigChannel+0x1e8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a13      	ldr	r2, [pc, #76]	; (8002e28 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	0c9a      	lsrs	r2, r3, #18
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002dec:	e002      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f9      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x1b2>
 8002dfa:	e007      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr
 8002e20:	40012400 	.word	0x40012400
 8002e24:	20000010 	.word	0x20000010
 8002e28:	431bde83 	.word	0x431bde83

08002e2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d040      	beq.n	8002ecc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <ADC_Enable+0xac>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <ADC_Enable+0xb0>)
 8002e60:	fba2 2303 	umull	r2, r3, r2, r3
 8002e64:	0c9b      	lsrs	r3, r3, #18
 8002e66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e68:	e002      	b.n	8002e70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f9      	bne.n	8002e6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e76:	f7ff fccf 	bl	8002818 <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e7c:	e01f      	b.n	8002ebe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e7e:	f7ff fccb 	bl	8002818 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d918      	bls.n	8002ebe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d011      	beq.n	8002ebe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f043 0210 	orr.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e007      	b.n	8002ece <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d1d8      	bne.n	8002e7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000010 	.word	0x20000010
 8002edc:	431bde83 	.word	0x431bde83

08002ee0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d12e      	bne.n	8002f58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f0a:	f7ff fc85 	bl	8002818 <HAL_GetTick>
 8002f0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f10:	e01b      	b.n	8002f4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f12:	f7ff fc81 	bl	8002818 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d914      	bls.n	8002f4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10d      	bne.n	8002f4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e007      	b.n	8002f5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d0dc      	beq.n	8002f12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d127      	bne.n	8002fcc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f92:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f96:	d115      	bne.n	8002fc4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d111      	bne.n	8002fc4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fe1d 	bl	8002c04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002fca:	e004      	b.n	8002fd6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7ff fe12 	bl	8002c16 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff fe01 	bl	8002c28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800304c:	4013      	ands	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <__NVIC_GetPriorityGrouping+0x18>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 0307 	and.w	r3, r3, #7
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	db0b      	blt.n	80030be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4906      	ldr	r1, [pc, #24]	; (80030c8 <__NVIC_EnableIRQ+0x34>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2001      	movs	r0, #1
 80030b6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003194:	d301      	bcc.n	800319a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003196:	2301      	movs	r3, #1
 8003198:	e00f      	b.n	80031ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <SysTick_Config+0x40>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a2:	210f      	movs	r1, #15
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f7ff ff90 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <SysTick_Config+0x40>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <SysTick_Config+0x40>)
 80031b4:	2207      	movs	r2, #7
 80031b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	e000e010 	.word	0xe000e010

080031c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ff2d 	bl	8003030 <__NVIC_SetPriorityGrouping>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f0:	f7ff ff42 	bl	8003078 <__NVIC_GetPriorityGrouping>
 80031f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f7ff ff90 	bl	8003120 <NVIC_EncodePriority>
 8003200:	4602      	mov	r2, r0
 8003202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff5f 	bl	80030cc <__NVIC_SetPriority>
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	4603      	mov	r3, r0
 800321e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff35 	bl	8003094 <__NVIC_EnableIRQ>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffa2 	bl	8003184 <SysTick_Config>
 8003240:	4603      	mov	r3, r0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e059      	b.n	8003316 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_DMA_Init+0xd4>)
 800326a:	429a      	cmp	r2, r3
 800326c:	d80f      	bhi.n	800328e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	4b2b      	ldr	r3, [pc, #172]	; (8003324 <HAL_DMA_Init+0xd8>)
 8003276:	4413      	add	r3, r2
 8003278:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <HAL_DMA_Init+0xdc>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	009a      	lsls	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a28      	ldr	r2, [pc, #160]	; (800332c <HAL_DMA_Init+0xe0>)
 800328a:	63da      	str	r2, [r3, #60]	; 0x3c
 800328c:	e00e      	b.n	80032ac <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_DMA_Init+0xe4>)
 8003296:	4413      	add	r3, r2
 8003298:	4a23      	ldr	r2, [pc, #140]	; (8003328 <HAL_DMA_Init+0xdc>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <HAL_DMA_Init+0xe8>)
 80032aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80032c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80032c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40020407 	.word	0x40020407
 8003324:	bffdfff8 	.word	0xbffdfff8
 8003328:	cccccccd 	.word	0xcccccccd
 800332c:	40020000 	.word	0x40020000
 8003330:	bffdfbf8 	.word	0xbffdfbf8
 8003334:	40020400 	.word	0x40020400

08003338 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Start_IT+0x20>
 8003354:	2302      	movs	r3, #2
 8003356:	e04b      	b.n	80033f0 <HAL_DMA_Start_IT+0xb8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d13a      	bne.n	80033e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fa6d 	bl	8003870 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 020e 	orr.w	r2, r2, #14
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e00f      	b.n	80033d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0204 	bic.w	r2, r2, #4
 80033be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 020a 	orr.w	r2, r2, #10
 80033ce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e005      	b.n	80033ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
 80033ec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	2204      	movs	r2, #4
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80f1 	beq.w	8003604 <HAL_DMA_IRQHandler+0x20c>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80eb 	beq.w	8003604 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0204 	bic.w	r2, r2, #4
 800344a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <HAL_DMA_IRQHandler+0x1d8>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d958      	bls.n	800350a <HAL_DMA_IRQHandler+0x112>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a5d      	ldr	r2, [pc, #372]	; (80035d4 <HAL_DMA_IRQHandler+0x1dc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d04f      	beq.n	8003502 <HAL_DMA_IRQHandler+0x10a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a5c      	ldr	r2, [pc, #368]	; (80035d8 <HAL_DMA_IRQHandler+0x1e0>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d048      	beq.n	80034fe <HAL_DMA_IRQHandler+0x106>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a5a      	ldr	r2, [pc, #360]	; (80035dc <HAL_DMA_IRQHandler+0x1e4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d040      	beq.n	80034f8 <HAL_DMA_IRQHandler+0x100>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a59      	ldr	r2, [pc, #356]	; (80035e0 <HAL_DMA_IRQHandler+0x1e8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d038      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xfa>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a57      	ldr	r2, [pc, #348]	; (80035e4 <HAL_DMA_IRQHandler+0x1ec>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d030      	beq.n	80034ec <HAL_DMA_IRQHandler+0xf4>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a56      	ldr	r2, [pc, #344]	; (80035e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d028      	beq.n	80034e6 <HAL_DMA_IRQHandler+0xee>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a4d      	ldr	r2, [pc, #308]	; (80035d0 <HAL_DMA_IRQHandler+0x1d8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d020      	beq.n	80034e0 <HAL_DMA_IRQHandler+0xe8>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a52      	ldr	r2, [pc, #328]	; (80035ec <HAL_DMA_IRQHandler+0x1f4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d019      	beq.n	80034dc <HAL_DMA_IRQHandler+0xe4>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a50      	ldr	r2, [pc, #320]	; (80035f0 <HAL_DMA_IRQHandler+0x1f8>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d012      	beq.n	80034d8 <HAL_DMA_IRQHandler+0xe0>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a4f      	ldr	r2, [pc, #316]	; (80035f4 <HAL_DMA_IRQHandler+0x1fc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00a      	beq.n	80034d2 <HAL_DMA_IRQHandler+0xda>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a4d      	ldr	r2, [pc, #308]	; (80035f8 <HAL_DMA_IRQHandler+0x200>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d102      	bne.n	80034cc <HAL_DMA_IRQHandler+0xd4>
 80034c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034ca:	e01b      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034d0:	e018      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d6:	e015      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034d8:	2340      	movs	r3, #64	; 0x40
 80034da:	e013      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034dc:	2304      	movs	r3, #4
 80034de:	e011      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034e4:	e00e      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ea:	e00b      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034f0:	e008      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034f6:	e005      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034fc:	e002      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	e000      	b.n	8003504 <HAL_DMA_IRQHandler+0x10c>
 8003502:	2304      	movs	r3, #4
 8003504:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <HAL_DMA_IRQHandler+0x204>)
 8003506:	6053      	str	r3, [r2, #4]
 8003508:	e057      	b.n	80035ba <HAL_DMA_IRQHandler+0x1c2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a31      	ldr	r2, [pc, #196]	; (80035d4 <HAL_DMA_IRQHandler+0x1dc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d04f      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x1bc>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2f      	ldr	r2, [pc, #188]	; (80035d8 <HAL_DMA_IRQHandler+0x1e0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d048      	beq.n	80035b0 <HAL_DMA_IRQHandler+0x1b8>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2e      	ldr	r2, [pc, #184]	; (80035dc <HAL_DMA_IRQHandler+0x1e4>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d040      	beq.n	80035aa <HAL_DMA_IRQHandler+0x1b2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2c      	ldr	r2, [pc, #176]	; (80035e0 <HAL_DMA_IRQHandler+0x1e8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d038      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x1ac>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2b      	ldr	r2, [pc, #172]	; (80035e4 <HAL_DMA_IRQHandler+0x1ec>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d030      	beq.n	800359e <HAL_DMA_IRQHandler+0x1a6>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a29      	ldr	r2, [pc, #164]	; (80035e8 <HAL_DMA_IRQHandler+0x1f0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d028      	beq.n	8003598 <HAL_DMA_IRQHandler+0x1a0>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a21      	ldr	r2, [pc, #132]	; (80035d0 <HAL_DMA_IRQHandler+0x1d8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d020      	beq.n	8003592 <HAL_DMA_IRQHandler+0x19a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a25      	ldr	r2, [pc, #148]	; (80035ec <HAL_DMA_IRQHandler+0x1f4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d019      	beq.n	800358e <HAL_DMA_IRQHandler+0x196>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <HAL_DMA_IRQHandler+0x1f8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d012      	beq.n	800358a <HAL_DMA_IRQHandler+0x192>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a22      	ldr	r2, [pc, #136]	; (80035f4 <HAL_DMA_IRQHandler+0x1fc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00a      	beq.n	8003584 <HAL_DMA_IRQHandler+0x18c>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_DMA_IRQHandler+0x200>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d102      	bne.n	800357e <HAL_DMA_IRQHandler+0x186>
 8003578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800357c:	e01b      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 800357e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003582:	e018      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 8003584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003588:	e015      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 800358a:	2340      	movs	r3, #64	; 0x40
 800358c:	e013      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 800358e:	2304      	movs	r3, #4
 8003590:	e011      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 8003592:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003596:	e00e      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 8003598:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800359c:	e00b      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 800359e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035a2:	e008      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 80035a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035a8:	e005      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 80035aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ae:	e002      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 80035b0:	2340      	movs	r3, #64	; 0x40
 80035b2:	e000      	b.n	80035b6 <HAL_DMA_IRQHandler+0x1be>
 80035b4:	2304      	movs	r3, #4
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <HAL_DMA_IRQHandler+0x208>)
 80035b8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8136 	beq.w	8003830 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035cc:	e130      	b.n	8003830 <HAL_DMA_IRQHandler+0x438>
 80035ce:	bf00      	nop
 80035d0:	40020080 	.word	0x40020080
 80035d4:	40020008 	.word	0x40020008
 80035d8:	4002001c 	.word	0x4002001c
 80035dc:	40020030 	.word	0x40020030
 80035e0:	40020044 	.word	0x40020044
 80035e4:	40020058 	.word	0x40020058
 80035e8:	4002006c 	.word	0x4002006c
 80035ec:	40020408 	.word	0x40020408
 80035f0:	4002041c 	.word	0x4002041c
 80035f4:	40020430 	.word	0x40020430
 80035f8:	40020444 	.word	0x40020444
 80035fc:	40020400 	.word	0x40020400
 8003600:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2202      	movs	r2, #2
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80dd 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x3d8>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80d7 	beq.w	80037d0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10b      	bne.n	8003648 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 020a 	bic.w	r2, r2, #10
 800363e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4b7b      	ldr	r3, [pc, #492]	; (800383c <HAL_DMA_IRQHandler+0x444>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d958      	bls.n	8003706 <HAL_DMA_IRQHandler+0x30e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a79      	ldr	r2, [pc, #484]	; (8003840 <HAL_DMA_IRQHandler+0x448>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d04f      	beq.n	80036fe <HAL_DMA_IRQHandler+0x306>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a78      	ldr	r2, [pc, #480]	; (8003844 <HAL_DMA_IRQHandler+0x44c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d048      	beq.n	80036fa <HAL_DMA_IRQHandler+0x302>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a76      	ldr	r2, [pc, #472]	; (8003848 <HAL_DMA_IRQHandler+0x450>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d040      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x2fc>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a75      	ldr	r2, [pc, #468]	; (800384c <HAL_DMA_IRQHandler+0x454>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d038      	beq.n	80036ee <HAL_DMA_IRQHandler+0x2f6>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a73      	ldr	r2, [pc, #460]	; (8003850 <HAL_DMA_IRQHandler+0x458>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d030      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x2f0>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a72      	ldr	r2, [pc, #456]	; (8003854 <HAL_DMA_IRQHandler+0x45c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d028      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x2ea>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a69      	ldr	r2, [pc, #420]	; (800383c <HAL_DMA_IRQHandler+0x444>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d020      	beq.n	80036dc <HAL_DMA_IRQHandler+0x2e4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a6e      	ldr	r2, [pc, #440]	; (8003858 <HAL_DMA_IRQHandler+0x460>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d019      	beq.n	80036d8 <HAL_DMA_IRQHandler+0x2e0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a6c      	ldr	r2, [pc, #432]	; (800385c <HAL_DMA_IRQHandler+0x464>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d012      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2dc>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a6b      	ldr	r2, [pc, #428]	; (8003860 <HAL_DMA_IRQHandler+0x468>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00a      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2d6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a69      	ldr	r2, [pc, #420]	; (8003864 <HAL_DMA_IRQHandler+0x46c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d102      	bne.n	80036c8 <HAL_DMA_IRQHandler+0x2d0>
 80036c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c6:	e01b      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036cc:	e018      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036d2:	e015      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036d4:	2320      	movs	r3, #32
 80036d6:	e013      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036d8:	2302      	movs	r3, #2
 80036da:	e011      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e0:	e00e      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036e6:	e00b      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ec:	e008      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036f2:	e005      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f8:	e002      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036fa:	2320      	movs	r3, #32
 80036fc:	e000      	b.n	8003700 <HAL_DMA_IRQHandler+0x308>
 80036fe:	2302      	movs	r3, #2
 8003700:	4a59      	ldr	r2, [pc, #356]	; (8003868 <HAL_DMA_IRQHandler+0x470>)
 8003702:	6053      	str	r3, [r2, #4]
 8003704:	e057      	b.n	80037b6 <HAL_DMA_IRQHandler+0x3be>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a4d      	ldr	r2, [pc, #308]	; (8003840 <HAL_DMA_IRQHandler+0x448>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d04f      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x3b8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_DMA_IRQHandler+0x44c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d048      	beq.n	80037ac <HAL_DMA_IRQHandler+0x3b4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a4a      	ldr	r2, [pc, #296]	; (8003848 <HAL_DMA_IRQHandler+0x450>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d040      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x3ae>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a48      	ldr	r2, [pc, #288]	; (800384c <HAL_DMA_IRQHandler+0x454>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d038      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x3a8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a47      	ldr	r2, [pc, #284]	; (8003850 <HAL_DMA_IRQHandler+0x458>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d030      	beq.n	800379a <HAL_DMA_IRQHandler+0x3a2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a45      	ldr	r2, [pc, #276]	; (8003854 <HAL_DMA_IRQHandler+0x45c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d028      	beq.n	8003794 <HAL_DMA_IRQHandler+0x39c>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a3d      	ldr	r2, [pc, #244]	; (800383c <HAL_DMA_IRQHandler+0x444>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d020      	beq.n	800378e <HAL_DMA_IRQHandler+0x396>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a41      	ldr	r2, [pc, #260]	; (8003858 <HAL_DMA_IRQHandler+0x460>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d019      	beq.n	800378a <HAL_DMA_IRQHandler+0x392>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a40      	ldr	r2, [pc, #256]	; (800385c <HAL_DMA_IRQHandler+0x464>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d012      	beq.n	8003786 <HAL_DMA_IRQHandler+0x38e>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a3e      	ldr	r2, [pc, #248]	; (8003860 <HAL_DMA_IRQHandler+0x468>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00a      	beq.n	8003780 <HAL_DMA_IRQHandler+0x388>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a3d      	ldr	r2, [pc, #244]	; (8003864 <HAL_DMA_IRQHandler+0x46c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d102      	bne.n	800377a <HAL_DMA_IRQHandler+0x382>
 8003774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003778:	e01b      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 800377a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800377e:	e018      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 8003780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003784:	e015      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 8003786:	2320      	movs	r3, #32
 8003788:	e013      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 800378a:	2302      	movs	r3, #2
 800378c:	e011      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 800378e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003792:	e00e      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 8003794:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003798:	e00b      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 800379a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379e:	e008      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 80037a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037a4:	e005      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 80037a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037aa:	e002      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 80037ac:	2320      	movs	r3, #32
 80037ae:	e000      	b.n	80037b2 <HAL_DMA_IRQHandler+0x3ba>
 80037b0:	2302      	movs	r3, #2
 80037b2:	4a2e      	ldr	r2, [pc, #184]	; (800386c <HAL_DMA_IRQHandler+0x474>)
 80037b4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d034      	beq.n	8003830 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037ce:	e02f      	b.n	8003830 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	2208      	movs	r2, #8
 80037d6:	409a      	lsls	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d028      	beq.n	8003832 <HAL_DMA_IRQHandler+0x43a>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d023      	beq.n	8003832 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 020e 	bic.w	r2, r2, #14
 80037f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
    }
  }
  return;
 8003830:	bf00      	nop
 8003832:	bf00      	nop
}
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40020080 	.word	0x40020080
 8003840:	40020008 	.word	0x40020008
 8003844:	4002001c 	.word	0x4002001c
 8003848:	40020030 	.word	0x40020030
 800384c:	40020044 	.word	0x40020044
 8003850:	40020058 	.word	0x40020058
 8003854:	4002006c 	.word	0x4002006c
 8003858:	40020408 	.word	0x40020408
 800385c:	4002041c 	.word	0x4002041c
 8003860:	40020430 	.word	0x40020430
 8003864:	40020444 	.word	0x40020444
 8003868:	40020400 	.word	0x40020400
 800386c:	40020000 	.word	0x40020000

08003870 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b10      	cmp	r3, #16
 800389c:	d108      	bne.n	80038b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038ae:	e007      	b.n	80038c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	60da      	str	r2, [r3, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b08b      	sub	sp, #44	; 0x2c
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038de:	e179      	b.n	8003bd4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038e0:	2201      	movs	r2, #1
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	f040 8168 	bne.w	8003bce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4a96      	ldr	r2, [pc, #600]	; (8003b5c <HAL_GPIO_Init+0x290>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d05e      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003908:	4a94      	ldr	r2, [pc, #592]	; (8003b5c <HAL_GPIO_Init+0x290>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d875      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 800390e:	4a94      	ldr	r2, [pc, #592]	; (8003b60 <HAL_GPIO_Init+0x294>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d058      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003914:	4a92      	ldr	r2, [pc, #584]	; (8003b60 <HAL_GPIO_Init+0x294>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d86f      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 800391a:	4a92      	ldr	r2, [pc, #584]	; (8003b64 <HAL_GPIO_Init+0x298>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d052      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003920:	4a90      	ldr	r2, [pc, #576]	; (8003b64 <HAL_GPIO_Init+0x298>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d869      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 8003926:	4a90      	ldr	r2, [pc, #576]	; (8003b68 <HAL_GPIO_Init+0x29c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d04c      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 800392c:	4a8e      	ldr	r2, [pc, #568]	; (8003b68 <HAL_GPIO_Init+0x29c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d863      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 8003932:	4a8e      	ldr	r2, [pc, #568]	; (8003b6c <HAL_GPIO_Init+0x2a0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d046      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003938:	4a8c      	ldr	r2, [pc, #560]	; (8003b6c <HAL_GPIO_Init+0x2a0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d85d      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 800393e:	2b12      	cmp	r3, #18
 8003940:	d82a      	bhi.n	8003998 <HAL_GPIO_Init+0xcc>
 8003942:	2b12      	cmp	r3, #18
 8003944:	d859      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <HAL_GPIO_Init+0x80>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	080039c7 	.word	0x080039c7
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080039b3 	.word	0x080039b3
 8003958:	080039f5 	.word	0x080039f5
 800395c:	080039fb 	.word	0x080039fb
 8003960:	080039fb 	.word	0x080039fb
 8003964:	080039fb 	.word	0x080039fb
 8003968:	080039fb 	.word	0x080039fb
 800396c:	080039fb 	.word	0x080039fb
 8003970:	080039fb 	.word	0x080039fb
 8003974:	080039fb 	.word	0x080039fb
 8003978:	080039fb 	.word	0x080039fb
 800397c:	080039fb 	.word	0x080039fb
 8003980:	080039fb 	.word	0x080039fb
 8003984:	080039fb 	.word	0x080039fb
 8003988:	080039fb 	.word	0x080039fb
 800398c:	080039fb 	.word	0x080039fb
 8003990:	080039a9 	.word	0x080039a9
 8003994:	080039bd 	.word	0x080039bd
 8003998:	4a75      	ldr	r2, [pc, #468]	; (8003b70 <HAL_GPIO_Init+0x2a4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800399e:	e02c      	b.n	80039fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	623b      	str	r3, [r7, #32]
          break;
 80039a6:	e029      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	3304      	adds	r3, #4
 80039ae:	623b      	str	r3, [r7, #32]
          break;
 80039b0:	e024      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	3308      	adds	r3, #8
 80039b8:	623b      	str	r3, [r7, #32]
          break;
 80039ba:	e01f      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	330c      	adds	r3, #12
 80039c2:	623b      	str	r3, [r7, #32]
          break;
 80039c4:	e01a      	b.n	80039fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ce:	2304      	movs	r3, #4
 80039d0:	623b      	str	r3, [r7, #32]
          break;
 80039d2:	e013      	b.n	80039fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039dc:	2308      	movs	r3, #8
 80039de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	611a      	str	r2, [r3, #16]
          break;
 80039e6:	e009      	b.n	80039fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039e8:	2308      	movs	r3, #8
 80039ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	615a      	str	r2, [r3, #20]
          break;
 80039f2:	e003      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
          break;
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x130>
          break;
 80039fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d801      	bhi.n	8003a06 <HAL_GPIO_Init+0x13a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	e001      	b.n	8003a0a <HAL_GPIO_Init+0x13e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d802      	bhi.n	8003a18 <HAL_GPIO_Init+0x14c>
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	e002      	b.n	8003a1e <HAL_GPIO_Init+0x152>
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	3b08      	subs	r3, #8
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	210f      	movs	r1, #15
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80c1 	beq.w	8003bce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a4c:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <HAL_GPIO_Init+0x2a8>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	4a48      	ldr	r2, [pc, #288]	; (8003b74 <HAL_GPIO_Init+0x2a8>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6193      	str	r3, [r2, #24]
 8003a58:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <HAL_GPIO_Init+0x2a8>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a64:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <HAL_GPIO_Init+0x2ac>)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3c      	ldr	r2, [pc, #240]	; (8003b7c <HAL_GPIO_Init+0x2b0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01f      	beq.n	8003ad0 <HAL_GPIO_Init+0x204>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <HAL_GPIO_Init+0x2b4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d019      	beq.n	8003acc <HAL_GPIO_Init+0x200>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <HAL_GPIO_Init+0x1fc>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a39      	ldr	r2, [pc, #228]	; (8003b88 <HAL_GPIO_Init+0x2bc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00d      	beq.n	8003ac4 <HAL_GPIO_Init+0x1f8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a38      	ldr	r2, [pc, #224]	; (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <HAL_GPIO_Init+0x1f4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <HAL_GPIO_Init+0x2c4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_GPIO_Init+0x1f0>
 8003ab8:	2305      	movs	r3, #5
 8003aba:	e00a      	b.n	8003ad2 <HAL_GPIO_Init+0x206>
 8003abc:	2306      	movs	r3, #6
 8003abe:	e008      	b.n	8003ad2 <HAL_GPIO_Init+0x206>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	e006      	b.n	8003ad2 <HAL_GPIO_Init+0x206>
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e004      	b.n	8003ad2 <HAL_GPIO_Init+0x206>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e002      	b.n	8003ad2 <HAL_GPIO_Init+0x206>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <HAL_GPIO_Init+0x206>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	f002 0203 	and.w	r2, r2, #3
 8003ad8:	0092      	lsls	r2, r2, #2
 8003ada:	4093      	lsls	r3, r2
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ae2:	4925      	ldr	r1, [pc, #148]	; (8003b78 <HAL_GPIO_Init+0x2ac>)
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3302      	adds	r3, #2
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003afc:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	4924      	ldr	r1, [pc, #144]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
 8003b08:	e006      	b.n	8003b18 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	4920      	ldr	r1, [pc, #128]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b24:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	491a      	ldr	r1, [pc, #104]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e006      	b.n	8003b40 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	4916      	ldr	r1, [pc, #88]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d025      	beq.n	8003b98 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b4c:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4910      	ldr	r1, [pc, #64]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
 8003b58:	e025      	b.n	8003ba6 <HAL_GPIO_Init+0x2da>
 8003b5a:	bf00      	nop
 8003b5c:	10320000 	.word	0x10320000
 8003b60:	10310000 	.word	0x10310000
 8003b64:	10220000 	.word	0x10220000
 8003b68:	10210000 	.word	0x10210000
 8003b6c:	10120000 	.word	0x10120000
 8003b70:	10110000 	.word	0x10110000
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40010800 	.word	0x40010800
 8003b80:	40010c00 	.word	0x40010c00
 8003b84:	40011000 	.word	0x40011000
 8003b88:	40011400 	.word	0x40011400
 8003b8c:	40011800 	.word	0x40011800
 8003b90:	40011c00 	.word	0x40011c00
 8003b94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	4913      	ldr	r1, [pc, #76]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]
 8003bbe:	e006      	b.n	8003bce <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	4909      	ldr	r1, [pc, #36]	; (8003bf0 <HAL_GPIO_Init+0x324>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f47f ae7e 	bne.w	80038e0 <HAL_GPIO_Init+0x14>
  }
}
 8003be4:	bf00      	nop
 8003be6:	bf00      	nop
 8003be8:	372c      	adds	r7, #44	; 0x2c
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40010400 	.word	0x40010400

08003bf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	887b      	ldrh	r3, [r7, #2]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
 8003c10:	e001      	b.n	8003c16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	807b      	strh	r3, [r7, #2]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c32:	787b      	ldrb	r3, [r7, #1]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c38:	887a      	ldrh	r2, [r7, #2]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c3e:	e003      	b.n	8003c48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c40:	887b      	ldrh	r3, [r7, #2]
 8003c42:	041a      	lsls	r2, r3, #16
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c54:	b08b      	sub	sp, #44	; 0x2c
 8003c56:	af06      	add	r7, sp, #24
 8003c58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0f1      	b.n	8003e48 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f006 ff1b 	bl	800aab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2203      	movs	r2, #3
 8003c82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 f892 	bl	8006db4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	687e      	ldr	r6, [r7, #4]
 8003c98:	466d      	mov	r5, sp
 8003c9a:	f106 0410 	add.w	r4, r6, #16
 8003c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	602b      	str	r3, [r5, #0]
 8003ca6:	1d33      	adds	r3, r6, #4
 8003ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f003 f85c 	bl	8006d68 <USB_CoreInit>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0c2      	b.n	8003e48 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 f88d 	bl	8006de8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e040      	b.n	8003d56 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	440b      	add	r3, r1
 8003cfa:	7bfa      	ldrb	r2, [r7, #15]
 8003cfc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3303      	adds	r3, #3
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	440b      	add	r3, r1
 8003d22:	3338      	adds	r3, #56	; 0x38
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	440b      	add	r3, r1
 8003d36:	333c      	adds	r3, #60	; 0x3c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	440b      	add	r3, r1
 8003d4a:	3340      	adds	r3, #64	; 0x40
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	3301      	adds	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d3b9      	bcc.n	8003cd4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e044      	b.n	8003df0 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	440b      	add	r3, r1
 8003d8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003da8:	7bfa      	ldrb	r2, [r7, #15]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dbe:	7bfa      	ldrb	r2, [r7, #15]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	440b      	add	r3, r1
 8003dcc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	3301      	adds	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d3b5      	bcc.n	8003d66 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	687e      	ldr	r6, [r7, #4]
 8003e02:	466d      	mov	r5, sp
 8003e04:	f106 0410 	add.w	r4, r6, #16
 8003e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	1d33      	adds	r3, r6, #4
 8003e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e14:	6838      	ldr	r0, [r7, #0]
 8003e16:	f002 fff3 	bl	8006e00 <USB_DevInit>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e00d      	b.n	8003e48 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f005 fa74 	bl	800932e <USB_DevDisconnect>

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_PCD_Start+0x16>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e016      	b.n	8003e94 <HAL_PCD_Start+0x44>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f002 ff88 	bl	8006d88 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003e78:	2101      	movs	r1, #1
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f007 f869 	bl	800af52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f005 fa48 	bl	800931a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f005 fa4a 	bl	8009342 <USB_ReadInterrupts>
 8003eae:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fb04 	bl	80044c8 <PCD_EP_ISR_Handler>

    return;
 8003ec0:	e119      	b.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f006 fe60 	bl	800abaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003eea:	2100      	movs	r1, #0
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f905 	bl	80040fc <HAL_PCD_SetAddress>

    return;
 8003ef2:	e100      	b.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00c      	beq.n	8003f18 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f10:	b292      	uxth	r2, r2
 8003f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f16:	e0ee      	b.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f34:	b292      	uxth	r2, r2
 8003f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f3a:	e0dc      	b.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d027      	beq.n	8003f96 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0204 	bic.w	r2, r2, #4
 8003f58:	b292      	uxth	r2, r2
 8003f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0208 	bic.w	r2, r2, #8
 8003f70:	b292      	uxth	r2, r2
 8003f72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f006 fe50 	bl	800ac1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f8e:	b292      	uxth	r2, r2
 8003f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f94:	e0af      	b.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8083 	beq.w	80040a8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e010      	b.n	8003fca <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	7ffb      	ldrb	r3, [r7, #31]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	441a      	add	r2, r3
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
 8003fb6:	8812      	ldrh	r2, [r2, #0]
 8003fb8:	b292      	uxth	r2, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	3320      	adds	r3, #32
 8003fbe:	443b      	add	r3, r7
 8003fc0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003fc4:	7ffb      	ldrb	r3, [r7, #31]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	7ffb      	ldrb	r3, [r7, #31]
 8003fcc:	2b07      	cmp	r3, #7
 8003fce:	d9eb      	bls.n	8003fa8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	b292      	uxth	r2, r2
 8003ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004000:	bf00      	nop
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800400a:	b29b      	uxth	r3, r3
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f6      	beq.n	8004002 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	b292      	uxth	r2, r2
 8004028:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e00f      	b.n	8004052 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004032:	7ffb      	ldrb	r3, [r7, #31]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	4611      	mov	r1, r2
 800403a:	7ffa      	ldrb	r2, [r7, #31]
 800403c:	0092      	lsls	r2, r2, #2
 800403e:	440a      	add	r2, r1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	3320      	adds	r3, #32
 8004044:	443b      	add	r3, r7
 8004046:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800404a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800404c:	7ffb      	ldrb	r3, [r7, #31]
 800404e:	3301      	adds	r3, #1
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	7ffb      	ldrb	r3, [r7, #31]
 8004054:	2b07      	cmp	r3, #7
 8004056:	d9ec      	bls.n	8004032 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004060:	b29a      	uxth	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	b292      	uxth	r2, r2
 800406c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004082:	b292      	uxth	r2, r2
 8004084:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0204 	orr.w	r2, r2, #4
 800409a:	b292      	uxth	r2, r2
 800409c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f006 fda1 	bl	800abe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80040a6:	e026      	b.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00f      	beq.n	80040d2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040c4:	b292      	uxth	r2, r2
 80040c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f006 fd5f 	bl	800ab8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80040d0:	e011      	b.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00c      	beq.n	80040f6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ee:	b292      	uxth	r2, r2
 80040f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80040f4:	bf00      	nop
  }
}
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	460b      	mov	r3, r1
 8004106:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800410e:	2b01      	cmp	r3, #1
 8004110:	d101      	bne.n	8004116 <HAL_PCD_SetAddress+0x1a>
 8004112:	2302      	movs	r3, #2
 8004114:	e013      	b.n	800413e <HAL_PCD_SetAddress+0x42>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f005 f8e0 	bl	80092f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	461a      	mov	r2, r3
 8004154:	4603      	mov	r3, r0
 8004156:	70fb      	strb	r3, [r7, #3]
 8004158:	460b      	mov	r3, r1
 800415a:	803b      	strh	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004164:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004168:	2b00      	cmp	r3, #0
 800416a:	da0e      	bge.n	800418a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4413      	add	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	705a      	strb	r2, [r3, #1]
 8004188:	e00e      	b.n	80041a8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	f003 0207 	and.w	r2, r3, #7
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041b4:	883a      	ldrh	r2, [r7, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	78ba      	ldrb	r2, [r7, #2]
 80041be:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041c0:	78bb      	ldrb	r3, [r7, #2]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d102      	bne.n	80041cc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_PCD_EP_Open+0x94>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e00e      	b.n	80041f8 <HAL_PCD_EP_Open+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68f9      	ldr	r1, [r7, #12]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f002 fe29 	bl	8006e40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80041f6:	7afb      	ldrb	r3, [r7, #11]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800420c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004210:	2b00      	cmp	r3, #0
 8004212:	da0e      	bge.n	8004232 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	705a      	strb	r2, [r3, #1]
 8004230:	e00e      	b.n	8004250 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	f003 0207 	and.w	r2, r3, #7
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4413      	add	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_PCD_EP_Close+0x6a>
 8004266:	2302      	movs	r3, #2
 8004268:	e00e      	b.n	8004288 <HAL_PCD_EP_Close+0x88>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	4618      	mov	r0, r3
 800427a:	f003 f9a1 	bl	80075c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	460b      	mov	r3, r1
 800429e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a0:	7afb      	ldrb	r3, [r7, #11]
 80042a2:	f003 0207 	and.w	r2, r3, #7
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4413      	add	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f003 fb58 	bl	8007998 <USB_EPStartXfer>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	460b      	mov	r3, r1
 8004300:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004302:	7afb      	ldrb	r3, [r7, #11]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2201      	movs	r2, #1
 800433c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800433e:	7afb      	ldrb	r3, [r7, #11]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	b2da      	uxtb	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6979      	ldr	r1, [r7, #20]
 8004350:	4618      	mov	r0, r3
 8004352:	f003 fb21 	bl	8007998 <USB_EPStartXfer>

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	f003 0207 	and.w	r2, r3, #7
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d901      	bls.n	800437e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e04c      	b.n	8004418 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800437e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da0e      	bge.n	80043a4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2201      	movs	r2, #1
 80043a0:	705a      	strb	r2, [r3, #1]
 80043a2:	e00c      	b.n	80043be <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_PCD_EP_SetStall+0x7e>
 80043da:	2302      	movs	r3, #2
 80043dc:	e01c      	b.n	8004418 <HAL_PCD_EP_SetStall+0xb8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f004 fe84 	bl	80090fa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d108      	bne.n	800440e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004406:	4619      	mov	r1, r3
 8004408:	4610      	mov	r0, r2
 800440a:	f004 ffa9 	bl	8009360 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 020f 	and.w	r2, r3, #15
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d901      	bls.n	800443e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e040      	b.n	80044c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800443e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004442:	2b00      	cmp	r3, #0
 8004444:	da0e      	bge.n	8004464 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	705a      	strb	r2, [r3, #1]
 8004462:	e00e      	b.n	8004482 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 0207 	and.w	r2, r3, #7
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	4413      	add	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_PCD_EP_ClrStall+0x82>
 800449e:	2302      	movs	r3, #2
 80044a0:	e00e      	b.n	80044c0 <HAL_PCD_EP_ClrStall+0xa0>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f004 fe72 	bl	800919a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b096      	sub	sp, #88	; 0x58
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80044d0:	e3bf      	b.n	8004c52 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80044de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80044ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 8179 	bne.w	80047e8 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80044f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d152      	bne.n	80045a8 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800450e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004512:	81fb      	strh	r3, [r7, #14]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004522:	b29b      	uxth	r3, r3
 8004524:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3328      	adds	r3, #40	; 0x28
 800452a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004534:	b29b      	uxth	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	3302      	adds	r3, #2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004556:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	441a      	add	r2, r3
 8004562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004564:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004566:	2100      	movs	r1, #0
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f006 faf6 	bl	800ab5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 836b 	beq.w	8004c52 <PCD_EP_ISR_Handler+0x78a>
 800457c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	f040 8366 	bne.w	8004c52 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004592:	b2da      	uxtb	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b292      	uxth	r2, r2
 800459a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80045a6:	e354      	b.n	8004c52 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045ae:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80045ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d034      	beq.n	8004630 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	3306      	adds	r3, #6
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80045fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004602:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004604:	b29b      	uxth	r3, r3
 8004606:	f004 fefb 	bl	8009400 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29a      	uxth	r2, r3
 8004612:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004616:	4013      	ands	r3, r2
 8004618:	823b      	strh	r3, [r7, #16]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	8a3a      	ldrh	r2, [r7, #16]
 8004620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004624:	b292      	uxth	r2, r2
 8004626:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f006 fa69 	bl	800ab00 <HAL_PCD_SetupStageCallback>
 800462e:	e310      	b.n	8004c52 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004630:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004634:	2b00      	cmp	r3, #0
 8004636:	f280 830c 	bge.w	8004c52 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29a      	uxth	r2, r3
 8004642:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004646:	4013      	ands	r3, r2
 8004648:	83fb      	strh	r3, [r7, #30]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	8bfa      	ldrh	r2, [r7, #30]
 8004650:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004654:	b292      	uxth	r2, r2
 8004656:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004660:	b29b      	uxth	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	3306      	adds	r3, #6
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6812      	ldr	r2, [r2, #0]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004682:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d019      	beq.n	80046c0 <PCD_EP_ISR_Handler+0x1f8>
 800468c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d015      	beq.n	80046c0 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469a:	6959      	ldr	r1, [r3, #20]
 800469c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80046a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f004 feab 	bl	8009400 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80046aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	441a      	add	r2, r3
 80046b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80046b8:	2100      	movs	r1, #0
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f006 fa32 	bl	800ab24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80046ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 82bd 	bne.w	8004c52 <PCD_EP_ISR_Handler+0x78a>
 80046d8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80046e4:	f000 82b5 	beq.w	8004c52 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4413      	add	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004712:	b29a      	uxth	r2, r3
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	801a      	strh	r2, [r3, #0]
 8004718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b3e      	cmp	r3, #62	; 0x3e
 800471e:	d91d      	bls.n	800475c <PCD_EP_ISR_Handler+0x294>
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	647b      	str	r3, [r7, #68]	; 0x44
 8004728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	2b00      	cmp	r3, #0
 8004732:	d102      	bne.n	800473a <PCD_EP_ISR_Handler+0x272>
 8004734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004736:	3b01      	subs	r3, #1
 8004738:	647b      	str	r3, [r7, #68]	; 0x44
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29a      	uxth	r2, r3
 8004740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004742:	b29b      	uxth	r3, r3
 8004744:	029b      	lsls	r3, r3, #10
 8004746:	b29b      	uxth	r3, r3
 8004748:	4313      	orrs	r3, r2
 800474a:	b29b      	uxth	r3, r3
 800474c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004754:	b29a      	uxth	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	801a      	strh	r2, [r3, #0]
 800475a:	e026      	b.n	80047aa <PCD_EP_ISR_Handler+0x2e2>
 800475c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <PCD_EP_ISR_Handler+0x2b2>
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004772:	b29a      	uxth	r2, r3
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e017      	b.n	80047aa <PCD_EP_ISR_Handler+0x2e2>
 800477a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	647b      	str	r3, [r7, #68]	; 0x44
 8004782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <PCD_EP_ISR_Handler+0x2cc>
 800478e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004790:	3301      	adds	r3, #1
 8004792:	647b      	str	r3, [r7, #68]	; 0x44
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	b29a      	uxth	r2, r3
 800479a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479c:	b29b      	uxth	r3, r3
 800479e:	029b      	lsls	r3, r3, #10
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ba:	827b      	strh	r3, [r7, #18]
 80047bc:	8a7b      	ldrh	r3, [r7, #18]
 80047be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047c2:	827b      	strh	r3, [r7, #18]
 80047c4:	8a7b      	ldrh	r3, [r7, #18]
 80047c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047ca:	827b      	strh	r3, [r7, #18]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	8a7b      	ldrh	r3, [r7, #18]
 80047d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	8013      	strh	r3, [r2, #0]
 80047e6:	e234      	b.n	8004c52 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004800:	2b00      	cmp	r3, #0
 8004802:	f280 80fc 	bge.w	80049fe <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29a      	uxth	r2, r3
 8004818:	f640 738f 	movw	r3, #3983	; 0xf8f
 800481c:	4013      	ands	r3, r2
 800481e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004834:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004838:	b292      	uxth	r2, r2
 800483a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800483c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004854:	7b1b      	ldrb	r3, [r3, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d125      	bne.n	80048a6 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004862:	b29b      	uxth	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	3306      	adds	r3, #6
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004882:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004886:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8092 	beq.w	80049b4 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004896:	6959      	ldr	r1, [r3, #20]
 8004898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489a:	88da      	ldrh	r2, [r3, #6]
 800489c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80048a0:	f004 fdae 	bl	8009400 <USB_ReadPMA>
 80048a4:	e086      	b.n	80049b4 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	78db      	ldrb	r3, [r3, #3]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d10a      	bne.n	80048c4 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80048ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048b2:	461a      	mov	r2, r3
 80048b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9d9 	bl	8004c6e <HAL_PCD_EP_DB_Receive>
 80048bc:	4603      	mov	r3, r0
 80048be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80048c2:	e077      	b.n	80049b4 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004900:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4413      	add	r3, r2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d024      	beq.n	800496c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492a:	b29b      	uxth	r3, r3
 800492c:	461a      	mov	r2, r3
 800492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	3302      	adds	r3, #2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800494a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800494e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004952:	2b00      	cmp	r3, #0
 8004954:	d02e      	beq.n	80049b4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495c:	6959      	ldr	r1, [r3, #20]
 800495e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004960:	891a      	ldrh	r2, [r3, #8]
 8004962:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004966:	f004 fd4b 	bl	8009400 <USB_ReadPMA>
 800496a:	e023      	b.n	80049b4 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	3306      	adds	r3, #6
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004998:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a6:	6959      	ldr	r1, [r3, #20]
 80049a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049aa:	895a      	ldrh	r2, [r3, #10]
 80049ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80049b0:	f004 fd26 	bl	8009400 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80049b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80049bc:	441a      	add	r2, r3
 80049be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80049c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80049ca:	441a      	add	r2, r3
 80049cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80049d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <PCD_EP_ISR_Handler+0x51c>
 80049d8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80049dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d206      	bcs.n	80049f2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80049e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f006 f89a 	bl	800ab24 <HAL_PCD_DataOutStageCallback>
 80049f0:	e005      	b.n	80049fe <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049f8:	4618      	mov	r0, r3
 80049fa:	f002 ffcd 	bl	8007998 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80049fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8123 	beq.w	8004c52 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004a0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	441a      	add	r2, r3
 8004a4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5e:	78db      	ldrb	r3, [r3, #3]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	f040 80a2 	bne.w	8004baa <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6e:	7b1b      	ldrb	r3, [r3, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8093 	beq.w	8004b9c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d046      	beq.n	8004b10 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d126      	bne.n	8004ad8 <PCD_EP_ISR_Handler+0x610>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	4413      	add	r3, r2
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	011a      	lsls	r2, r3, #4
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	4413      	add	r3, r2
 8004aac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	6a3b      	ldr	r3, [r7, #32]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	801a      	strh	r2, [r3, #0]
 8004ad6:	e061      	b.n	8004b9c <PCD_EP_ISR_Handler+0x6d4>
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d15d      	bne.n	8004b9c <PCD_EP_ISR_Handler+0x6d4>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	4413      	add	r3, r2
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	011a      	lsls	r2, r3, #4
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	4413      	add	r3, r2
 8004b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	801a      	strh	r2, [r3, #0]
 8004b0e:	e045      	b.n	8004b9c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d126      	bne.n	8004b6c <PCD_EP_ISR_Handler+0x6a4>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b32:	4413      	add	r3, r2
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
 8004b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	011a      	lsls	r2, r3, #4
 8004b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3e:	4413      	add	r3, r2
 8004b40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b44:	633b      	str	r3, [r7, #48]	; 0x30
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b50:	b29a      	uxth	r2, r3
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	801a      	strh	r2, [r3, #0]
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	e017      	b.n	8004b9c <PCD_EP_ISR_Handler+0x6d4>
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d113      	bne.n	8004b9c <PCD_EP_ISR_Handler+0x6d4>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b82:	4413      	add	r3, r2
 8004b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	011a      	lsls	r2, r3, #4
 8004b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8e:	4413      	add	r3, r2
 8004b90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	2200      	movs	r2, #0
 8004b9a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f005 ffd9 	bl	800ab5a <HAL_PCD_DataInStageCallback>
 8004ba8:	e053      	b.n	8004c52 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004baa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d146      	bne.n	8004c44 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bde:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d907      	bls.n	8004bfe <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfa:	619a      	str	r2, [r3, #24]
 8004bfc:	e002      	b.n	8004c04 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c00:	2200      	movs	r2, #0
 8004c02:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d106      	bne.n	8004c1a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f005 ffa1 	bl	800ab5a <HAL_PCD_DataInStageCallback>
 8004c18:	e01b      	b.n	8004c52 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c22:	441a      	add	r2, r3
 8004c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c26:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c30:	441a      	add	r2, r3
 8004c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c34:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f002 feab 	bl	8007998 <USB_EPStartXfer>
 8004c42:	e006      	b.n	8004c52 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f91b 	bl	8004e88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	b21b      	sxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f6ff ac37 	blt.w	80044d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3758      	adds	r7, #88	; 0x58
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b088      	sub	sp, #32
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d07e      	beq.n	8004d84 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3302      	adds	r3, #2
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	8b7b      	ldrh	r3, [r7, #26]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d306      	bcc.n	8004cc8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	8b7b      	ldrh	r3, [r7, #26]
 8004cc0:	1ad2      	subs	r2, r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	619a      	str	r2, [r3, #24]
 8004cc6:	e002      	b.n	8004cce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d123      	bne.n	8004d1e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf0:	833b      	strh	r3, [r7, #24]
 8004cf2:	8b3b      	ldrh	r3, [r7, #24]
 8004cf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004cf8:	833b      	strh	r3, [r7, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	441a      	add	r2, r3
 8004d08:	8b3b      	ldrh	r3, [r7, #24]
 8004d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d1e:	88fb      	ldrh	r3, [r7, #6]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01f      	beq.n	8004d68 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	82fb      	strh	r3, [r7, #22]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	8afb      	ldrh	r3, [r7, #22]
 8004d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d68:	8b7b      	ldrh	r3, [r7, #26]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8087 	beq.w	8004e7e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6959      	ldr	r1, [r3, #20]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	891a      	ldrh	r2, [r3, #8]
 8004d7c:	8b7b      	ldrh	r3, [r7, #26]
 8004d7e:	f004 fb3f 	bl	8009400 <USB_ReadPMA>
 8004d82:	e07c      	b.n	8004e7e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4413      	add	r3, r2
 8004d98:	3306      	adds	r3, #6
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	8b7b      	ldrh	r3, [r7, #26]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d306      	bcc.n	8004dc6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	699a      	ldr	r2, [r3, #24]
 8004dbc:	8b7b      	ldrh	r3, [r7, #26]
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	619a      	str	r2, [r3, #24]
 8004dc4:	e002      	b.n	8004dcc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d123      	bne.n	8004e1c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dee:	83fb      	strh	r3, [r7, #30]
 8004df0:	8bfb      	ldrh	r3, [r7, #30]
 8004df2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004df6:	83fb      	strh	r3, [r7, #30]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	441a      	add	r2, r3
 8004e06:	8bfb      	ldrh	r3, [r7, #30]
 8004e08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11f      	bne.n	8004e66 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e40:	83bb      	strh	r3, [r7, #28]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	441a      	add	r2, r3
 8004e50:	8bbb      	ldrh	r3, [r7, #28]
 8004e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e66:	8b7b      	ldrh	r3, [r7, #26]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	6959      	ldr	r1, [r3, #20]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	895a      	ldrh	r2, [r3, #10]
 8004e78:	8b7b      	ldrh	r3, [r7, #26]
 8004e7a:	f004 fac1 	bl	8009400 <USB_ReadPMA>
    }
  }

  return count;
 8004e7e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b0a4      	sub	sp, #144	; 0x90
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 81dd 	beq.w	800525c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3302      	adds	r3, #2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d907      	bls.n	8004eea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ee2:	1ad2      	subs	r2, r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	619a      	str	r2, [r3, #24]
 8004ee8:	e002      	b.n	8004ef0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2200      	movs	r2, #0
 8004eee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 80b9 	bne.w	800506c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	785b      	ldrb	r3, [r3, #1]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d126      	bne.n	8004f50 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	4413      	add	r3, r2
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	011a      	lsls	r2, r3, #4
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	4413      	add	r3, r2
 8004f24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	801a      	strh	r2, [r3, #0]
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	801a      	strh	r2, [r3, #0]
 8004f4e:	e01a      	b.n	8004f86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d116      	bne.n	8004f86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	4413      	add	r3, r2
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	011a      	lsls	r2, r3, #4
 8004f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f78:	4413      	add	r3, r2
 8004f7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	2200      	movs	r2, #0
 8004f84:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d126      	bne.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	011a      	lsls	r2, r3, #4
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fba:	61bb      	str	r3, [r7, #24]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	801a      	strh	r2, [r3, #0]
 8004fe0:	e017      	b.n	8005012 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	785b      	ldrb	r3, [r3, #1]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d113      	bne.n	8005012 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	4413      	add	r3, r2
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	011a      	lsls	r2, r3, #4
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	4413      	add	r3, r2
 8005006:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2200      	movs	r2, #0
 8005010:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	4619      	mov	r1, r3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f005 fd9e 	bl	800ab5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 82fc 	beq.w	8005622 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	82fb      	strh	r3, [r7, #22]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	441a      	add	r2, r3
 8005054:	8afb      	ldrh	r3, [r7, #22]
 8005056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800505a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800505e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005066:	b29b      	uxth	r3, r3
 8005068:	8013      	strh	r3, [r2, #0]
 800506a:	e2da      	b.n	8005622 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800506c:	88fb      	ldrh	r3, [r7, #6]
 800506e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d021      	beq.n	80050ba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800508c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005090:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	441a      	add	r2, r3
 80050a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80050a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	f040 82ae 	bne.w	8005622 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	695a      	ldr	r2, [r3, #20]
 80050ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050ce:	441a      	add	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050dc:	441a      	add	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	6a1a      	ldr	r2, [r3, #32]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d30b      	bcc.n	8005106 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6a1a      	ldr	r2, [r3, #32]
 80050fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	621a      	str	r2, [r3, #32]
 8005104:	e017      	b.n	8005136 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d108      	bne.n	8005120 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800510e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800511e:	e00a      	b.n	8005136 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2200      	movs	r2, #0
 8005134:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d165      	bne.n	800520a <HAL_PCD_EP_DB_Transmit+0x382>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800514c:	b29b      	uxth	r3, r3
 800514e:	461a      	mov	r2, r3
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	4413      	add	r3, r2
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	011a      	lsls	r2, r3, #4
 800515c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515e:	4413      	add	r3, r2
 8005160:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005164:	63bb      	str	r3, [r7, #56]	; 0x38
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29b      	uxth	r3, r3
 800516c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005170:	b29a      	uxth	r2, r3
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	801a      	strh	r2, [r3, #0]
 8005176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800517a:	2b3e      	cmp	r3, #62	; 0x3e
 800517c:	d91d      	bls.n	80051ba <HAL_PCD_EP_DB_Transmit+0x332>
 800517e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
 8005186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	2b00      	cmp	r3, #0
 8005190:	d102      	bne.n	8005198 <HAL_PCD_EP_DB_Transmit+0x310>
 8005192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005194:	3b01      	subs	r3, #1
 8005196:	64bb      	str	r3, [r7, #72]	; 0x48
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29a      	uxth	r2, r3
 800519e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	029b      	lsls	r3, r3, #10
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	4313      	orrs	r3, r2
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	801a      	strh	r2, [r3, #0]
 80051b8:	e044      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80051ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <HAL_PCD_EP_DB_Transmit+0x350>
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	801a      	strh	r2, [r3, #0]
 80051d6:	e035      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80051d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80051ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ee:	3301      	adds	r3, #1
 80051f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b29a      	uxth	r2, r3
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	e01c      	b.n	8005244 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	785b      	ldrb	r3, [r3, #1]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d118      	bne.n	8005244 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	647b      	str	r3, [r7, #68]	; 0x44
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005220:	b29b      	uxth	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005226:	4413      	add	r3, r2
 8005228:	647b      	str	r3, [r7, #68]	; 0x44
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	011a      	lsls	r2, r3, #4
 8005230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005232:	4413      	add	r3, r2
 8005234:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005238:	643b      	str	r3, [r7, #64]	; 0x40
 800523a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523e:	b29a      	uxth	r2, r3
 8005240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005242:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6818      	ldr	r0, [r3, #0]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	6959      	ldr	r1, [r3, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	891a      	ldrh	r2, [r3, #8]
 8005250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005254:	b29b      	uxth	r3, r3
 8005256:	f004 f88e 	bl	8009376 <USB_WritePMA>
 800525a:	e1e2      	b.n	8005622 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005264:	b29b      	uxth	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	3306      	adds	r3, #6
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005284:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	699a      	ldr	r2, [r3, #24]
 800528c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005290:	429a      	cmp	r2, r3
 8005292:	d307      	bcc.n	80052a4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	619a      	str	r2, [r3, #24]
 80052a2:	e002      	b.n	80052aa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 80c0 	bne.w	8005434 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	785b      	ldrb	r3, [r3, #1]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d126      	bne.n	800530a <HAL_PCD_EP_DB_Transmit+0x482>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052d0:	4413      	add	r3, r2
 80052d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	011a      	lsls	r2, r3, #4
 80052da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052dc:	4413      	add	r3, r2
 80052de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80052e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005302:	b29a      	uxth	r2, r3
 8005304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	e01a      	b.n	8005340 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d116      	bne.n	8005340 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	667b      	str	r3, [r7, #100]	; 0x64
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005326:	4413      	add	r3, r2
 8005328:	667b      	str	r3, [r7, #100]	; 0x64
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	011a      	lsls	r2, r3, #4
 8005330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005332:	4413      	add	r3, r2
 8005334:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005338:	663b      	str	r3, [r7, #96]	; 0x60
 800533a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800533c:	2200      	movs	r2, #0
 800533e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	677b      	str	r3, [r7, #116]	; 0x74
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d12b      	bne.n	80053a6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005362:	4413      	add	r3, r2
 8005364:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	011a      	lsls	r2, r3, #4
 800536c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536e:	4413      	add	r3, r2
 8005370:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539c:	b29a      	uxth	r2, r3
 800539e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e017      	b.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d113      	bne.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053bc:	4413      	add	r3, r2
 80053be:	677b      	str	r3, [r7, #116]	; 0x74
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	011a      	lsls	r2, r3, #4
 80053c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c8:	4413      	add	r3, r2
 80053ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053ce:	673b      	str	r3, [r7, #112]	; 0x70
 80053d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053d2:	2200      	movs	r2, #0
 80053d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f005 fbbc 	bl	800ab5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f040 811a 	bne.w	8005622 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005408:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	441a      	add	r2, r3
 800541a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800541e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005426:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800542a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542e:	b29b      	uxth	r3, r3
 8005430:	8013      	strh	r3, [r2, #0]
 8005432:	e0f6      	b.n	8005622 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d121      	bne.n	8005482 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	441a      	add	r2, r3
 800546a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800546e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800547a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547e:	b29b      	uxth	r3, r3
 8005480:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005488:	2b01      	cmp	r3, #1
 800548a:	f040 80ca 	bne.w	8005622 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005496:	441a      	add	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054a4:	441a      	add	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6a1a      	ldr	r2, [r3, #32]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d30b      	bcc.n	80054ce <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054c6:	1ad2      	subs	r2, r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	621a      	str	r2, [r3, #32]
 80054cc:	e017      	b.n	80054fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80054d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054e6:	e00a      	b.n	80054fe <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	657b      	str	r3, [r7, #84]	; 0x54
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d165      	bne.n	80055d8 <HAL_PCD_EP_DB_Transmit+0x750>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005520:	4413      	add	r3, r2
 8005522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	011a      	lsls	r2, r3, #4
 800552a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552c:	4413      	add	r3, r2
 800552e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005532:	65bb      	str	r3, [r7, #88]	; 0x58
 8005534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	b29a      	uxth	r2, r3
 8005540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005548:	2b3e      	cmp	r3, #62	; 0x3e
 800554a:	d91d      	bls.n	8005588 <HAL_PCD_EP_DB_Transmit+0x700>
 800554c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	66bb      	str	r3, [r7, #104]	; 0x68
 8005554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005560:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005562:	3b01      	subs	r3, #1
 8005564:	66bb      	str	r3, [r7, #104]	; 0x68
 8005566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29a      	uxth	r2, r3
 800556c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800556e:	b29b      	uxth	r3, r3
 8005570:	029b      	lsls	r3, r3, #10
 8005572:	b29b      	uxth	r3, r3
 8005574:	4313      	orrs	r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005580:	b29a      	uxth	r2, r3
 8005582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	e041      	b.n	800560c <HAL_PCD_EP_DB_Transmit+0x784>
 8005588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800559e:	b29a      	uxth	r2, r3
 80055a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e032      	b.n	800560c <HAL_PCD_EP_DB_Transmit+0x784>
 80055a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_PCD_EP_DB_Transmit+0x738>
 80055ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055bc:	3301      	adds	r3, #1
 80055be:	66bb      	str	r3, [r7, #104]	; 0x68
 80055c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	029b      	lsls	r3, r3, #10
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e019      	b.n	800560c <HAL_PCD_EP_DB_Transmit+0x784>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	785b      	ldrb	r3, [r3, #1]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d115      	bne.n	800560c <HAL_PCD_EP_DB_Transmit+0x784>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ee:	4413      	add	r3, r2
 80055f0:	657b      	str	r3, [r7, #84]	; 0x54
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	011a      	lsls	r2, r3, #4
 80055f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055fa:	4413      	add	r3, r2
 80055fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005600:	653b      	str	r3, [r7, #80]	; 0x50
 8005602:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005606:	b29a      	uxth	r2, r3
 8005608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800560a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6959      	ldr	r1, [r3, #20]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	895a      	ldrh	r2, [r3, #10]
 8005618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561c:	b29b      	uxth	r3, r3
 800561e:	f003 feaa 	bl	8009376 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800563c:	82bb      	strh	r3, [r7, #20]
 800563e:	8abb      	ldrh	r3, [r7, #20]
 8005640:	f083 0310 	eor.w	r3, r3, #16
 8005644:	82bb      	strh	r3, [r7, #20]
 8005646:	8abb      	ldrh	r3, [r7, #20]
 8005648:	f083 0320 	eor.w	r3, r3, #32
 800564c:	82bb      	strh	r3, [r7, #20]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	8abb      	ldrh	r3, [r7, #20]
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3790      	adds	r7, #144	; 0x90
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	4613      	mov	r3, r2
 800568c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800569a:	897b      	ldrh	r3, [r7, #10]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	e009      	b.n	80056c6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056b2:	897a      	ldrh	r2, [r7, #10]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80056c6:	893b      	ldrh	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d107      	bne.n	80056dc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2200      	movs	r2, #0
 80056d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	80da      	strh	r2, [r3, #6]
 80056da:	e00b      	b.n	80056f4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2201      	movs	r2, #1
 80056e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e272      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8087 	beq.w	800582e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005720:	4b92      	ldr	r3, [pc, #584]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 030c 	and.w	r3, r3, #12
 8005728:	2b04      	cmp	r3, #4
 800572a:	d00c      	beq.n	8005746 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800572c:	4b8f      	ldr	r3, [pc, #572]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 030c 	and.w	r3, r3, #12
 8005734:	2b08      	cmp	r3, #8
 8005736:	d112      	bne.n	800575e <HAL_RCC_OscConfig+0x5e>
 8005738:	4b8c      	ldr	r3, [pc, #560]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005744:	d10b      	bne.n	800575e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005746:	4b89      	ldr	r3, [pc, #548]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d06c      	beq.n	800582c <HAL_RCC_OscConfig+0x12c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d168      	bne.n	800582c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e24c      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x76>
 8005768:	4b80      	ldr	r3, [pc, #512]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a7f      	ldr	r2, [pc, #508]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 800576e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	e02e      	b.n	80057d4 <HAL_RCC_OscConfig+0xd4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x98>
 800577e:	4b7b      	ldr	r3, [pc, #492]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a7a      	ldr	r2, [pc, #488]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	4b78      	ldr	r3, [pc, #480]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a77      	ldr	r2, [pc, #476]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e01d      	b.n	80057d4 <HAL_RCC_OscConfig+0xd4>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0xbc>
 80057a2:	4b72      	ldr	r3, [pc, #456]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a71      	ldr	r2, [pc, #452]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	4b6f      	ldr	r3, [pc, #444]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a6e      	ldr	r2, [pc, #440]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0xd4>
 80057bc:	4b6b      	ldr	r3, [pc, #428]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a6a      	ldr	r2, [pc, #424]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	4b68      	ldr	r3, [pc, #416]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a67      	ldr	r2, [pc, #412]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d013      	beq.n	8005804 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fd f81c 	bl	8002818 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e4:	f7fd f818 	bl	8002818 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b64      	cmp	r3, #100	; 0x64
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e200      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057f6:	4b5d      	ldr	r3, [pc, #372]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0xe4>
 8005802:	e014      	b.n	800582e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005804:	f7fd f808 	bl	8002818 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800580c:	f7fd f804 	bl	8002818 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b64      	cmp	r3, #100	; 0x64
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e1ec      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581e:	4b53      	ldr	r3, [pc, #332]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x10c>
 800582a:	e000      	b.n	800582e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800582c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d063      	beq.n	8005902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800583a:	4b4c      	ldr	r3, [pc, #304]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005846:	4b49      	ldr	r3, [pc, #292]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	2b08      	cmp	r3, #8
 8005850:	d11c      	bne.n	800588c <HAL_RCC_OscConfig+0x18c>
 8005852:	4b46      	ldr	r3, [pc, #280]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d116      	bne.n	800588c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800585e:	4b43      	ldr	r3, [pc, #268]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_RCC_OscConfig+0x176>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d001      	beq.n	8005876 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e1c0      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005876:	4b3d      	ldr	r3, [pc, #244]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4939      	ldr	r1, [pc, #228]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588a:	e03a      	b.n	8005902 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005894:	4b36      	ldr	r3, [pc, #216]	; (8005970 <HAL_RCC_OscConfig+0x270>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fc ffbd 	bl	8002818 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a2:	f7fc ffb9 	bl	8002818 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e1a1      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b4:	4b2d      	ldr	r3, [pc, #180]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c0:	4b2a      	ldr	r3, [pc, #168]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	4927      	ldr	r1, [pc, #156]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]
 80058d4:	e015      	b.n	8005902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058d6:	4b26      	ldr	r3, [pc, #152]	; (8005970 <HAL_RCC_OscConfig+0x270>)
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058dc:	f7fc ff9c 	bl	8002818 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e4:	f7fc ff98 	bl	8002818 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e180      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d03a      	beq.n	8005984 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d019      	beq.n	800594a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005916:	4b17      	ldr	r3, [pc, #92]	; (8005974 <HAL_RCC_OscConfig+0x274>)
 8005918:	2201      	movs	r2, #1
 800591a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800591c:	f7fc ff7c 	bl	8002818 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005924:	f7fc ff78 	bl	8002818 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e160      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005936:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCC_OscConfig+0x26c>)
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005942:	2001      	movs	r0, #1
 8005944:	f000 fa9c 	bl	8005e80 <RCC_Delay>
 8005948:	e01c      	b.n	8005984 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594a:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <HAL_RCC_OscConfig+0x274>)
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005950:	f7fc ff62 	bl	8002818 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005956:	e00f      	b.n	8005978 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005958:	f7fc ff5e 	bl	8002818 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d908      	bls.n	8005978 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e146      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	42420000 	.word	0x42420000
 8005974:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005978:	4b92      	ldr	r3, [pc, #584]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e9      	bne.n	8005958 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a6 	beq.w	8005ade <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005992:	2300      	movs	r3, #0
 8005994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005996:	4b8b      	ldr	r3, [pc, #556]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10d      	bne.n	80059be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a2:	4b88      	ldr	r3, [pc, #544]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	4a87      	ldr	r2, [pc, #540]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ac:	61d3      	str	r3, [r2, #28]
 80059ae:	4b85      	ldr	r3, [pc, #532]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059be:	4b82      	ldr	r3, [pc, #520]	; (8005bc8 <HAL_RCC_OscConfig+0x4c8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d118      	bne.n	80059fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ca:	4b7f      	ldr	r3, [pc, #508]	; (8005bc8 <HAL_RCC_OscConfig+0x4c8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a7e      	ldr	r2, [pc, #504]	; (8005bc8 <HAL_RCC_OscConfig+0x4c8>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d6:	f7fc ff1f 	bl	8002818 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059de:	f7fc ff1b 	bl	8002818 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b64      	cmp	r3, #100	; 0x64
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e103      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f0:	4b75      	ldr	r3, [pc, #468]	; (8005bc8 <HAL_RCC_OscConfig+0x4c8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d106      	bne.n	8005a12 <HAL_RCC_OscConfig+0x312>
 8005a04:	4b6f      	ldr	r3, [pc, #444]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	4a6e      	ldr	r2, [pc, #440]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	6213      	str	r3, [r2, #32]
 8005a10:	e02d      	b.n	8005a6e <HAL_RCC_OscConfig+0x36e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x334>
 8005a1a:	4b6a      	ldr	r3, [pc, #424]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	4a69      	ldr	r2, [pc, #420]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	6213      	str	r3, [r2, #32]
 8005a26:	4b67      	ldr	r3, [pc, #412]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	4a66      	ldr	r2, [pc, #408]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a2c:	f023 0304 	bic.w	r3, r3, #4
 8005a30:	6213      	str	r3, [r2, #32]
 8005a32:	e01c      	b.n	8005a6e <HAL_RCC_OscConfig+0x36e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	2b05      	cmp	r3, #5
 8005a3a:	d10c      	bne.n	8005a56 <HAL_RCC_OscConfig+0x356>
 8005a3c:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	4a60      	ldr	r2, [pc, #384]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a42:	f043 0304 	orr.w	r3, r3, #4
 8005a46:	6213      	str	r3, [r2, #32]
 8005a48:	4b5e      	ldr	r3, [pc, #376]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	4a5d      	ldr	r2, [pc, #372]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6213      	str	r3, [r2, #32]
 8005a54:	e00b      	b.n	8005a6e <HAL_RCC_OscConfig+0x36e>
 8005a56:	4b5b      	ldr	r3, [pc, #364]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	4a5a      	ldr	r2, [pc, #360]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a5c:	f023 0301 	bic.w	r3, r3, #1
 8005a60:	6213      	str	r3, [r2, #32]
 8005a62:	4b58      	ldr	r3, [pc, #352]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	4a57      	ldr	r2, [pc, #348]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a68:	f023 0304 	bic.w	r3, r3, #4
 8005a6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d015      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a76:	f7fc fecf 	bl	8002818 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a7e:	f7fc fecb 	bl	8002818 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e0b1      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	4b4b      	ldr	r3, [pc, #300]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0ee      	beq.n	8005a7e <HAL_RCC_OscConfig+0x37e>
 8005aa0:	e014      	b.n	8005acc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa2:	f7fc feb9 	bl	8002818 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aaa:	f7fc feb5 	bl	8002818 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e09b      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac0:	4b40      	ldr	r3, [pc, #256]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ee      	bne.n	8005aaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d105      	bne.n	8005ade <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad2:	4b3c      	ldr	r3, [pc, #240]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4a3b      	ldr	r2, [pc, #236]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005adc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8087 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ae8:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 030c 	and.w	r3, r3, #12
 8005af0:	2b08      	cmp	r3, #8
 8005af2:	d061      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d146      	bne.n	8005b8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005afc:	4b33      	ldr	r3, [pc, #204]	; (8005bcc <HAL_RCC_OscConfig+0x4cc>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b02:	f7fc fe89 	bl	8002818 <HAL_GetTick>
 8005b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b08:	e008      	b.n	8005b1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0a:	f7fc fe85 	bl	8002818 <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d901      	bls.n	8005b1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e06d      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b1c:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f0      	bne.n	8005b0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d108      	bne.n	8005b44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	4921      	ldr	r1, [pc, #132]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b44:	4b1f      	ldr	r3, [pc, #124]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a19      	ldr	r1, [r3, #32]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	430b      	orrs	r3, r1
 8005b56:	491b      	ldr	r1, [pc, #108]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <HAL_RCC_OscConfig+0x4cc>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b62:	f7fc fe59 	bl	8002818 <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6a:	f7fc fe55 	bl	8002818 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e03d      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b7c:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <HAL_RCC_OscConfig+0x46a>
 8005b88:	e035      	b.n	8005bf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <HAL_RCC_OscConfig+0x4cc>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b90:	f7fc fe42 	bl	8002818 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b98:	f7fc fe3e 	bl	8002818 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e026      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_RCC_OscConfig+0x4c4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x498>
 8005bb6:	e01e      	b.n	8005bf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e019      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40007000 	.word	0x40007000
 8005bcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bd0:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <HAL_RCC_OscConfig+0x500>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40021000 	.word	0x40021000

08005c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0d0      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c18:	4b6a      	ldr	r3, [pc, #424]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d910      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b67      	ldr	r3, [pc, #412]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f023 0207 	bic.w	r2, r3, #7
 8005c2e:	4965      	ldr	r1, [pc, #404]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b63      	ldr	r3, [pc, #396]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0b8      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d020      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c60:	4b59      	ldr	r3, [pc, #356]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a58      	ldr	r2, [pc, #352]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d005      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c78:	4b53      	ldr	r3, [pc, #332]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c84:	4b50      	ldr	r3, [pc, #320]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	494d      	ldr	r1, [pc, #308]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d040      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005caa:	4b47      	ldr	r3, [pc, #284]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d115      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e07f      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cc2:	4b41      	ldr	r3, [pc, #260]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e073      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd2:	4b3d      	ldr	r3, [pc, #244]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e06b      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ce2:	4b39      	ldr	r3, [pc, #228]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f023 0203 	bic.w	r2, r3, #3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4936      	ldr	r1, [pc, #216]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf4:	f7fc fd90 	bl	8002818 <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cfc:	f7fc fd8c 	bl	8002818 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e053      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	4b2d      	ldr	r3, [pc, #180]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 020c 	and.w	r2, r3, #12
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d1eb      	bne.n	8005cfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d210      	bcs.n	8005d54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b24      	ldr	r3, [pc, #144]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 0207 	bic.w	r2, r3, #7
 8005d3a:	4922      	ldr	r1, [pc, #136]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b20      	ldr	r3, [pc, #128]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e032      	b.n	8005dba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d60:	4b19      	ldr	r3, [pc, #100]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4916      	ldr	r1, [pc, #88]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0308 	and.w	r3, r3, #8
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d009      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	490e      	ldr	r1, [pc, #56]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d92:	f000 f821 	bl	8005dd8 <HAL_RCC_GetSysClockFreq>
 8005d96:	4602      	mov	r2, r0
 8005d98:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	091b      	lsrs	r3, r3, #4
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	490a      	ldr	r1, [pc, #40]	; (8005dcc <HAL_RCC_ClockConfig+0x1c8>)
 8005da4:	5ccb      	ldrb	r3, [r1, r3]
 8005da6:	fa22 f303 	lsr.w	r3, r2, r3
 8005daa:	4a09      	ldr	r2, [pc, #36]	; (8005dd0 <HAL_RCC_ClockConfig+0x1cc>)
 8005dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dae:	4b09      	ldr	r3, [pc, #36]	; (8005dd4 <HAL_RCC_ClockConfig+0x1d0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fc fcee 	bl	8002794 <HAL_InitTick>

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40022000 	.word	0x40022000
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	0800e6f4 	.word	0x0800e6f4
 8005dd0:	20000010 	.word	0x20000010
 8005dd4:	20000014 	.word	0x20000014

08005dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	2300      	movs	r3, #0
 8005dec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005df2:	4b1e      	ldr	r3, [pc, #120]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d002      	beq.n	8005e08 <HAL_RCC_GetSysClockFreq+0x30>
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d003      	beq.n	8005e0e <HAL_RCC_GetSysClockFreq+0x36>
 8005e06:	e027      	b.n	8005e58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e0a:	613b      	str	r3, [r7, #16]
      break;
 8005e0c:	e027      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	0c9b      	lsrs	r3, r3, #18
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e18:	5cd3      	ldrb	r3, [r2, r3]
 8005e1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d010      	beq.n	8005e48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e26:	4b11      	ldr	r3, [pc, #68]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x94>)
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	0c5b      	lsrs	r3, r3, #17
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	4a11      	ldr	r2, [pc, #68]	; (8005e78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e32:	5cd3      	ldrb	r3, [r2, r3]
 8005e34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e3a:	fb03 f202 	mul.w	r2, r3, r2
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e004      	b.n	8005e52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	613b      	str	r3, [r7, #16]
      break;
 8005e56:	e002      	b.n	8005e5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e5a:	613b      	str	r3, [r7, #16]
      break;
 8005e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e5e:	693b      	ldr	r3, [r7, #16]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	007a1200 	.word	0x007a1200
 8005e74:	0800e704 	.word	0x0800e704
 8005e78:	0800e714 	.word	0x0800e714
 8005e7c:	003d0900 	.word	0x003d0900

08005e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <RCC_Delay+0x34>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a0a      	ldr	r2, [pc, #40]	; (8005eb8 <RCC_Delay+0x38>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0a5b      	lsrs	r3, r3, #9
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e9c:	bf00      	nop
  }
  while (Delay --);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	60fa      	str	r2, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f9      	bne.n	8005e9c <RCC_Delay+0x1c>
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	20000010 	.word	0x20000010
 8005eb8:	10624dd3 	.word	0x10624dd3

08005ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d07d      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005edc:	4b4f      	ldr	r3, [pc, #316]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10d      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee8:	4b4c      	ldr	r3, [pc, #304]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	4a4b      	ldr	r2, [pc, #300]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	61d3      	str	r3, [r2, #28]
 8005ef4:	4b49      	ldr	r3, [pc, #292]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f00:	2301      	movs	r3, #1
 8005f02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f04:	4b46      	ldr	r3, [pc, #280]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d118      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f10:	4b43      	ldr	r3, [pc, #268]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a42      	ldr	r2, [pc, #264]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f1c:	f7fc fc7c 	bl	8002818 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f22:	e008      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f24:	f7fc fc78 	bl	8002818 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	; 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e06d      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f36:	4b3a      	ldr	r3, [pc, #232]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f42:	4b36      	ldr	r3, [pc, #216]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d02e      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d027      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f60:	4b2e      	ldr	r3, [pc, #184]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f70:	4b2c      	ldr	r3, [pc, #176]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f76:	4a29      	ldr	r2, [pc, #164]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d014      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f86:	f7fc fc47 	bl	8002818 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f8c:	e00a      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8e:	f7fc fc43 	bl	8002818 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e036      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa4:	4b1d      	ldr	r3, [pc, #116]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0ee      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fb0:	4b1a      	ldr	r3, [pc, #104]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4917      	ldr	r1, [pc, #92]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005fc2:	7dfb      	ldrb	r3, [r7, #23]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d105      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc8:	4b14      	ldr	r3, [pc, #80]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4a13      	ldr	r2, [pc, #76]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	490b      	ldr	r1, [pc, #44]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d008      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ffe:	4b07      	ldr	r3, [pc, #28]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	4904      	ldr	r1, [pc, #16]	; (800601c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600c:	4313      	orrs	r3, r2
 800600e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40021000 	.word	0x40021000
 8006020:	40007000 	.word	0x40007000
 8006024:	42420440 	.word	0x42420440

08006028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e076      	b.n	8006128 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b00      	cmp	r3, #0
 8006040:	d108      	bne.n	8006054 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604a:	d009      	beq.n	8006060 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	61da      	str	r2, [r3, #28]
 8006052:	e005      	b.n	8006060 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fc f9d0 	bl	8002420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006096:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060a8:	431a      	orrs	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	431a      	orrs	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e4:	ea42 0103 	orr.w	r1, r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	0c1a      	lsrs	r2, r3, #16
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f002 0204 	and.w	r2, r2, #4
 8006106:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006116:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_SPI_Transmit+0x22>
 800614e:	2302      	movs	r3, #2
 8006150:	e12d      	b.n	80063ae <HAL_SPI_Transmit+0x27e>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800615a:	f7fc fb5d 	bl	8002818 <HAL_GetTick>
 800615e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	d002      	beq.n	8006176 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006170:	2302      	movs	r3, #2
 8006172:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006174:	e116      	b.n	80063a4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_SPI_Transmit+0x52>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006186:	e10d      	b.n	80063a4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2203      	movs	r2, #3
 800618c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	88fa      	ldrh	r2, [r7, #6]
 80061a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ce:	d10f      	bne.n	80061f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d007      	beq.n	800620e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800620c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006216:	d14f      	bne.n	80062b8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_Transmit+0xf6>
 8006220:	8afb      	ldrh	r3, [r7, #22]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d142      	bne.n	80062ac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	1c9a      	adds	r2, r3, #2
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800624a:	e02f      	b.n	80062ac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b02      	cmp	r3, #2
 8006258:	d112      	bne.n	8006280 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	1c9a      	adds	r2, r3, #2
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006274:	b29b      	uxth	r3, r3
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	86da      	strh	r2, [r3, #54]	; 0x36
 800627e:	e015      	b.n	80062ac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006280:	f7fc faca 	bl	8002818 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d803      	bhi.n	8006298 <HAL_SPI_Transmit+0x168>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d102      	bne.n	800629e <HAL_SPI_Transmit+0x16e>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80062aa:	e07b      	b.n	80063a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1ca      	bne.n	800624c <HAL_SPI_Transmit+0x11c>
 80062b6:	e050      	b.n	800635a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <HAL_SPI_Transmit+0x196>
 80062c0:	8afb      	ldrh	r3, [r7, #22]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d144      	bne.n	8006350 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	7812      	ldrb	r2, [r2, #0]
 80062d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062ec:	e030      	b.n	8006350 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d113      	bne.n	8006324 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	330c      	adds	r3, #12
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b29a      	uxth	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	86da      	strh	r2, [r3, #54]	; 0x36
 8006322:	e015      	b.n	8006350 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006324:	f7fc fa78 	bl	8002818 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d803      	bhi.n	800633c <HAL_SPI_Transmit+0x20c>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633a:	d102      	bne.n	8006342 <HAL_SPI_Transmit+0x212>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800634e:	e029      	b.n	80063a4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1c9      	bne.n	80062ee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f8b2 	bl	80064c8 <SPI_EndRxTxTransaction>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	613b      	str	r3, [r7, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e003      	b.n	80063a4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3720      	adds	r7, #32
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
	...

080063b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	603b      	str	r3, [r7, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063c8:	f7fc fa26 	bl	8002818 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	1a9b      	subs	r3, r3, r2
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	4413      	add	r3, r2
 80063d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063d8:	f7fc fa1e 	bl	8002818 <HAL_GetTick>
 80063dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063de:	4b39      	ldr	r3, [pc, #228]	; (80064c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	015b      	lsls	r3, r3, #5
 80063e4:	0d1b      	lsrs	r3, r3, #20
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	fb02 f303 	mul.w	r3, r2, r3
 80063ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ee:	e054      	b.n	800649a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f6:	d050      	beq.n	800649a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063f8:	f7fc fa0e 	bl	8002818 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	429a      	cmp	r2, r3
 8006406:	d902      	bls.n	800640e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d13d      	bne.n	800648a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800641c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006426:	d111      	bne.n	800644c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006430:	d004      	beq.n	800643c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643a:	d107      	bne.n	800644c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006454:	d10f      	bne.n	8006476 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006474:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e017      	b.n	80064ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	3b01      	subs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d19b      	bne.n	80063f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3720      	adds	r7, #32
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000010 	.word	0x20000010

080064c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2200      	movs	r2, #0
 80064dc:	2180      	movs	r1, #128	; 0x80
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff ff6a 	bl	80063b8 <SPI_WaitFlagStateUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e000      	b.n	80064fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e041      	b.n	800659a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d106      	bne.n	8006530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7fb ffc4 	bl	80024b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3304      	adds	r3, #4
 8006540:	4619      	mov	r1, r3
 8006542:	4610      	mov	r0, r2
 8006544:	f000 fa82 	bl	8006a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d001      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e044      	b.n	8006646 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68da      	ldr	r2, [r3, #12]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1d      	ldr	r2, [pc, #116]	; (8006650 <HAL_TIM_Base_Start_IT+0xac>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d018      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x6c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1c      	ldr	r2, [pc, #112]	; (8006654 <HAL_TIM_Base_Start_IT+0xb0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d013      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x6c>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f0:	d00e      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x6c>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a18      	ldr	r2, [pc, #96]	; (8006658 <HAL_TIM_Base_Start_IT+0xb4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d009      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x6c>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a16      	ldr	r2, [pc, #88]	; (800665c <HAL_TIM_Base_Start_IT+0xb8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d004      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0x6c>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a15      	ldr	r2, [pc, #84]	; (8006660 <HAL_TIM_Base_Start_IT+0xbc>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d111      	bne.n	8006634 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b06      	cmp	r3, #6
 8006620:	d010      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006632:	e007      	b.n	8006644 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr
 8006650:	40012c00 	.word	0x40012c00
 8006654:	40013400 	.word	0x40013400
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00

08006664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b02      	cmp	r3, #2
 8006678:	d122      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b02      	cmp	r3, #2
 8006686:	d11b      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0202 	mvn.w	r2, #2
 8006690:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0303 	and.w	r3, r3, #3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f9b4 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9a7 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f9b6 	bl	8006a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d122      	bne.n	8006714 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d11b      	bne.n	8006714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0204 	mvn.w	r2, #4
 80066e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2202      	movs	r2, #2
 80066ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f98a 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 8006700:	e005      	b.n	800670e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f97d 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f98c 	bl	8006a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b08      	cmp	r3, #8
 8006720:	d122      	bne.n	8006768 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d11b      	bne.n	8006768 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0208 	mvn.w	r2, #8
 8006738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2204      	movs	r2, #4
 800673e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f960 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 8006754:	e005      	b.n	8006762 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f953 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f962 	bl	8006a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b10      	cmp	r3, #16
 8006774:	d122      	bne.n	80067bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b10      	cmp	r3, #16
 8006782:	d11b      	bne.n	80067bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0210 	mvn.w	r2, #16
 800678c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2208      	movs	r2, #8
 8006792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f936 	bl	8006a14 <HAL_TIM_IC_CaptureCallback>
 80067a8:	e005      	b.n	80067b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f929 	bl	8006a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f938 	bl	8006a26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d10e      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d107      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0201 	mvn.w	r2, #1
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fb f9e8 	bl	8001bb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b80      	cmp	r3, #128	; 0x80
 80067f4:	d10e      	bne.n	8006814 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006800:	2b80      	cmp	r3, #128	; 0x80
 8006802:	d107      	bne.n	8006814 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800680c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 faa1 	bl	8006d56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681e:	2b40      	cmp	r3, #64	; 0x40
 8006820:	d10e      	bne.n	8006840 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682c:	2b40      	cmp	r3, #64	; 0x40
 800682e:	d107      	bne.n	8006840 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f8fc 	bl	8006a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b20      	cmp	r3, #32
 800684c:	d10e      	bne.n	800686c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f003 0320 	and.w	r3, r3, #32
 8006858:	2b20      	cmp	r3, #32
 800685a:	d107      	bne.n	800686c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f06f 0220 	mvn.w	r2, #32
 8006864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa6c 	bl	8006d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800686c:	bf00      	nop
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006888:	2b01      	cmp	r3, #1
 800688a:	d101      	bne.n	8006890 <HAL_TIM_ConfigClockSource+0x1c>
 800688c:	2302      	movs	r3, #2
 800688e:	e0b4      	b.n	80069fa <HAL_TIM_ConfigClockSource+0x186>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c8:	d03e      	beq.n	8006948 <HAL_TIM_ConfigClockSource+0xd4>
 80068ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ce:	f200 8087 	bhi.w	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 80068d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d6:	f000 8086 	beq.w	80069e6 <HAL_TIM_ConfigClockSource+0x172>
 80068da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068de:	d87f      	bhi.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e0:	2b70      	cmp	r3, #112	; 0x70
 80068e2:	d01a      	beq.n	800691a <HAL_TIM_ConfigClockSource+0xa6>
 80068e4:	2b70      	cmp	r3, #112	; 0x70
 80068e6:	d87b      	bhi.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 80068e8:	2b60      	cmp	r3, #96	; 0x60
 80068ea:	d050      	beq.n	800698e <HAL_TIM_ConfigClockSource+0x11a>
 80068ec:	2b60      	cmp	r3, #96	; 0x60
 80068ee:	d877      	bhi.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 80068f0:	2b50      	cmp	r3, #80	; 0x50
 80068f2:	d03c      	beq.n	800696e <HAL_TIM_ConfigClockSource+0xfa>
 80068f4:	2b50      	cmp	r3, #80	; 0x50
 80068f6:	d873      	bhi.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 80068f8:	2b40      	cmp	r3, #64	; 0x40
 80068fa:	d058      	beq.n	80069ae <HAL_TIM_ConfigClockSource+0x13a>
 80068fc:	2b40      	cmp	r3, #64	; 0x40
 80068fe:	d86f      	bhi.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006900:	2b30      	cmp	r3, #48	; 0x30
 8006902:	d064      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x15a>
 8006904:	2b30      	cmp	r3, #48	; 0x30
 8006906:	d86b      	bhi.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006908:	2b20      	cmp	r3, #32
 800690a:	d060      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x15a>
 800690c:	2b20      	cmp	r3, #32
 800690e:	d867      	bhi.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d05c      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x15a>
 8006914:	2b10      	cmp	r3, #16
 8006916:	d05a      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0x15a>
 8006918:	e062      	b.n	80069e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	6899      	ldr	r1, [r3, #8]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f000 f980 	bl	8006c2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800693c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	609a      	str	r2, [r3, #8]
      break;
 8006946:	e04f      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	6899      	ldr	r1, [r3, #8]
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f000 f969 	bl	8006c2e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800696a:	609a      	str	r2, [r3, #8]
      break;
 800696c:	e03c      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6859      	ldr	r1, [r3, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	461a      	mov	r2, r3
 800697c:	f000 f8e0 	bl	8006b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2150      	movs	r1, #80	; 0x50
 8006986:	4618      	mov	r0, r3
 8006988:	f000 f937 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 800698c:	e02c      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6818      	ldr	r0, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	6859      	ldr	r1, [r3, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	461a      	mov	r2, r3
 800699c:	f000 f8fe 	bl	8006b9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2160      	movs	r1, #96	; 0x60
 80069a6:	4618      	mov	r0, r3
 80069a8:	f000 f927 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 80069ac:	e01c      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6859      	ldr	r1, [r3, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f000 f8c0 	bl	8006b40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2140      	movs	r1, #64	; 0x40
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f917 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 80069cc:	e00c      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4619      	mov	r1, r3
 80069d8:	4610      	mov	r0, r2
 80069da:	f000 f90e 	bl	8006bfa <TIM_ITRx_SetConfig>
      break;
 80069de:	e003      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
      break;
 80069e4:	e000      	b.n	80069e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80069e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr

08006a14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr

08006a26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bc80      	pop	{r7}
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bc80      	pop	{r7}
 8006a48:	4770      	bx	lr
	...

08006a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a33      	ldr	r2, [pc, #204]	; (8006b2c <TIM_Base_SetConfig+0xe0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d013      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a32      	ldr	r2, [pc, #200]	; (8006b30 <TIM_Base_SetConfig+0xe4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00f      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a2f      	ldr	r2, [pc, #188]	; (8006b34 <TIM_Base_SetConfig+0xe8>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a2e      	ldr	r2, [pc, #184]	; (8006b38 <TIM_Base_SetConfig+0xec>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a2d      	ldr	r2, [pc, #180]	; (8006b3c <TIM_Base_SetConfig+0xf0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d108      	bne.n	8006a9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a22      	ldr	r2, [pc, #136]	; (8006b2c <TIM_Base_SetConfig+0xe0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <TIM_Base_SetConfig+0x82>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a21      	ldr	r2, [pc, #132]	; (8006b30 <TIM_Base_SetConfig+0xe4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_Base_SetConfig+0x82>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab4:	d00b      	beq.n	8006ace <TIM_Base_SetConfig+0x82>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a1e      	ldr	r2, [pc, #120]	; (8006b34 <TIM_Base_SetConfig+0xe8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_Base_SetConfig+0x82>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <TIM_Base_SetConfig+0xec>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_Base_SetConfig+0x82>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a1c      	ldr	r2, [pc, #112]	; (8006b3c <TIM_Base_SetConfig+0xf0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <TIM_Base_SetConfig+0xe0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <TIM_Base_SetConfig+0xc8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <TIM_Base_SetConfig+0xe4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d103      	bne.n	8006b1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	691a      	ldr	r2, [r3, #16]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	615a      	str	r2, [r3, #20]
}
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr
 8006b2c:	40012c00 	.word	0x40012c00
 8006b30:	40013400 	.word	0x40013400
 8006b34:	40000400 	.word	0x40000400
 8006b38:	40000800 	.word	0x40000800
 8006b3c:	40000c00 	.word	0x40000c00

08006b40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f023 0201 	bic.w	r2, r3, #1
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f023 030a 	bic.w	r3, r3, #10
 8006b7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a1b      	ldr	r3, [r3, #32]
 8006bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	f023 0210 	bic.w	r2, r3, #16
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	031b      	lsls	r3, r3, #12
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	011b      	lsls	r3, r3, #4
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f043 0307 	orr.w	r3, r3, #7
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b087      	sub	sp, #28
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	021a      	lsls	r2, r3, #8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	609a      	str	r2, [r3, #8]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d101      	bne.n	8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c80:	2302      	movs	r3, #2
 8006c82:	e050      	b.n	8006d26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006caa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d018      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cda:	d00e      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a14      	ldr	r2, [pc, #80]	; (8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a12      	ldr	r2, [pc, #72]	; (8006d40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d10c      	bne.n	8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40013400 	.word	0x40013400
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00

08006d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d5e:	bf00      	nop
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d68:	b084      	sub	sp, #16
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	f107 0014 	add.w	r0, r7, #20
 8006d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	b004      	add	sp, #16
 8006d86:	4770      	bx	lr

08006d88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006d9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006dbc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006dc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr

08006de8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e00:	b084      	sub	sp, #16
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
 8006e0a:	f107 0014 	add.w	r0, r7, #20
 8006e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	b004      	add	sp, #16
 8006e3e:	4770      	bx	lr

08006e40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b09d      	sub	sp, #116	; 0x74
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	78db      	ldrb	r3, [r3, #3]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d81f      	bhi.n	8006eb2 <USB_ActivateEndpoint+0x72>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USB_ActivateEndpoint+0x38>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ebb 	.word	0x08006ebb
 8006e84:	08006e97 	.word	0x08006e97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006e94:	e012      	b.n	8006ebc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006e96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006e9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006e9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006ea2:	e00b      	b.n	8006ebc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006eb0:	e004      	b.n	8006ebc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006eb8:	e000      	b.n	8006ebc <USB_ActivateEndpoint+0x7c>
      break;
 8006eba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	441a      	add	r2, r3
 8006ec6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	7b1b      	ldrb	r3, [r3, #12]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 8178 	bne.w	800721e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8084 	beq.w	8007040 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	61bb      	str	r3, [r7, #24]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4413      	add	r3, r2
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	011a      	lsls	r2, r3, #4
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	88db      	ldrh	r3, [r3, #6]
 8006f60:	085b      	lsrs	r3, r3, #1
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	827b      	strh	r3, [r7, #18]
 8006f7a:	8a7b      	ldrh	r3, [r7, #18]
 8006f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01b      	beq.n	8006fbc <USB_ActivateEndpoint+0x17c>
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	823b      	strh	r3, [r7, #16]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	441a      	add	r2, r3
 8006fa6:	8a3b      	ldrh	r3, [r7, #16]
 8006fa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	78db      	ldrb	r3, [r3, #3]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d020      	beq.n	8007006 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fda:	81bb      	strh	r3, [r7, #12]
 8006fdc:	89bb      	ldrh	r3, [r7, #12]
 8006fde:	f083 0320 	eor.w	r3, r3, #32
 8006fe2:	81bb      	strh	r3, [r7, #12]
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	89bb      	ldrh	r3, [r7, #12]
 8006ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007000:	b29b      	uxth	r3, r3
 8007002:	8013      	strh	r3, [r2, #0]
 8007004:	e2d5      	b.n	80075b2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4413      	add	r3, r2
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800701c:	81fb      	strh	r3, [r7, #14]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	441a      	add	r2, r3
 8007028:	89fb      	ldrh	r3, [r7, #14]
 800702a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800703a:	b29b      	uxth	r3, r3
 800703c:	8013      	strh	r3, [r2, #0]
 800703e:	e2b8      	b.n	80075b2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800704a:	b29b      	uxth	r3, r3
 800704c:	461a      	mov	r2, r3
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	4413      	add	r3, r2
 8007052:	633b      	str	r3, [r7, #48]	; 0x30
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	011a      	lsls	r2, r3, #4
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	4413      	add	r3, r2
 800705e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	88db      	ldrh	r3, [r3, #6]
 8007068:	085b      	lsrs	r3, r3, #1
 800706a:	b29b      	uxth	r3, r3
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	4413      	add	r3, r2
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	011a      	lsls	r2, r3, #4
 800708e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007090:	4413      	add	r3, r2
 8007092:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	2b3e      	cmp	r3, #62	; 0x3e
 80070ae:	d91d      	bls.n	80070ec <USB_ActivateEndpoint+0x2ac>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f003 031f 	and.w	r3, r3, #31
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <USB_ActivateEndpoint+0x28a>
 80070c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070c6:	3b01      	subs	r3, #1
 80070c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	029b      	lsls	r3, r3, #10
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	b29b      	uxth	r3, r3
 80070dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	e026      	b.n	800713a <USB_ActivateEndpoint+0x2fa>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <USB_ActivateEndpoint+0x2ca>
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	881b      	ldrh	r3, [r3, #0]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007102:	b29a      	uxth	r2, r3
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	801a      	strh	r2, [r3, #0]
 8007108:	e017      	b.n	800713a <USB_ActivateEndpoint+0x2fa>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	66bb      	str	r3, [r7, #104]	; 0x68
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <USB_ActivateEndpoint+0x2e4>
 800711e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007120:	3301      	adds	r3, #1
 8007122:	66bb      	str	r3, [r7, #104]	; 0x68
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29a      	uxth	r2, r3
 800712a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800712c:	b29b      	uxth	r3, r3
 800712e:	029b      	lsls	r3, r3, #10
 8007130:	b29b      	uxth	r3, r3
 8007132:	4313      	orrs	r3, r2
 8007134:	b29a      	uxth	r2, r3
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	847b      	strh	r3, [r7, #34]	; 0x22
 8007148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800714a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d01b      	beq.n	800718a <USB_ActivateEndpoint+0x34a>
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007168:	843b      	strh	r3, [r7, #32]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	441a      	add	r2, r3
 8007174:	8c3b      	ldrh	r3, [r7, #32]
 8007176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800717a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800717e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007186:	b29b      	uxth	r3, r3
 8007188:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d124      	bne.n	80071dc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a8:	83bb      	strh	r3, [r7, #28]
 80071aa:	8bbb      	ldrh	r3, [r7, #28]
 80071ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071b0:	83bb      	strh	r3, [r7, #28]
 80071b2:	8bbb      	ldrh	r3, [r7, #28]
 80071b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071b8:	83bb      	strh	r3, [r7, #28]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	441a      	add	r2, r3
 80071c4:	8bbb      	ldrh	r3, [r7, #28]
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]
 80071da:	e1ea      	b.n	80075b2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	83fb      	strh	r3, [r7, #30]
 80071f4:	8bfb      	ldrh	r3, [r7, #30]
 80071f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80071fa:	83fb      	strh	r3, [r7, #30]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	8bfb      	ldrh	r3, [r7, #30]
 8007208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007218:	b29b      	uxth	r3, r3
 800721a:	8013      	strh	r3, [r2, #0]
 800721c:	e1c9      	b.n	80075b2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	78db      	ldrb	r3, [r3, #3]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d11e      	bne.n	8007264 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	441a      	add	r2, r3
 800724a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800724e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007256:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800725a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800725e:	b29b      	uxth	r3, r3
 8007260:	8013      	strh	r3, [r2, #0]
 8007262:	e01d      	b.n	80072a0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	441a      	add	r2, r3
 8007288:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800728c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729c:	b29b      	uxth	r3, r3
 800729e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b0:	4413      	add	r3, r2
 80072b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	011a      	lsls	r2, r3, #4
 80072ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	891b      	ldrh	r3, [r3, #8]
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	657b      	str	r3, [r7, #84]	; 0x54
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072de:	b29b      	uxth	r3, r3
 80072e0:	461a      	mov	r2, r3
 80072e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072e4:	4413      	add	r3, r2
 80072e6:	657b      	str	r3, [r7, #84]	; 0x54
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	011a      	lsls	r2, r3, #4
 80072ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80072f6:	653b      	str	r3, [r7, #80]	; 0x50
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	895b      	ldrh	r3, [r3, #10]
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	b29b      	uxth	r3, r3
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007306:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f040 8093 	bne.w	8007438 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007322:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01b      	beq.n	8007366 <USB_ActivateEndpoint+0x526>
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007344:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	441a      	add	r2, r3
 8007350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800735a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	b29b      	uxth	r3, r3
 8007364:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	881b      	ldrh	r3, [r3, #0]
 8007372:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01b      	beq.n	80073b6 <USB_ActivateEndpoint+0x576>
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	b29b      	uxth	r3, r3
 800738c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007394:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	441a      	add	r2, r3
 80073a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80073a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80073ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80073d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80073d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80073d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	441a      	add	r2, r3
 80073e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80073ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007414:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	441a      	add	r2, r3
 8007420:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800742a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800742e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007432:	b29b      	uxth	r3, r3
 8007434:	8013      	strh	r3, [r2, #0]
 8007436:	e0bc      	b.n	80075b2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800744c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01d      	beq.n	8007490 <USB_ActivateEndpoint+0x650>
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	441a      	add	r2, r3
 8007478:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800747c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748c:	b29b      	uxth	r3, r3
 800748e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80074a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80074a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01d      	beq.n	80074e8 <USB_ActivateEndpoint+0x6a8>
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	441a      	add	r2, r3
 80074d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80074d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	78db      	ldrb	r3, [r3, #3]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d024      	beq.n	800753a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007506:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800750a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800750e:	f083 0320 	eor.w	r3, r3, #32
 8007512:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007534:	b29b      	uxth	r3, r3
 8007536:	8013      	strh	r3, [r2, #0]
 8007538:	e01d      	b.n	8007576 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4413      	add	r3, r2
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007550:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	441a      	add	r2, r3
 800755e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007562:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007566:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800756e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007572:	b29b      	uxth	r3, r3
 8007574:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800758c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	441a      	add	r2, r3
 800759a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800759e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80075b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3774      	adds	r7, #116	; 0x74
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bc80      	pop	{r7}
 80075be:	4770      	bx	lr

080075c0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b08d      	sub	sp, #52	; 0x34
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	7b1b      	ldrb	r3, [r3, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f040 808e 	bne.w	80076f0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d044      	beq.n	8007666 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	881b      	ldrh	r3, [r3, #0]
 80075e8:	81bb      	strh	r3, [r7, #12]
 80075ea:	89bb      	ldrh	r3, [r7, #12]
 80075ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01b      	beq.n	800762c <USB_DeactivateEndpoint+0x6c>
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	817b      	strh	r3, [r7, #10]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	441a      	add	r2, r3
 8007616:	897b      	ldrh	r3, [r7, #10]
 8007618:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800761c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007624:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007628:	b29b      	uxth	r3, r3
 800762a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800763e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007642:	813b      	strh	r3, [r7, #8]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	441a      	add	r2, r3
 800764e:	893b      	ldrh	r3, [r7, #8]
 8007650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800765c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007660:	b29b      	uxth	r3, r3
 8007662:	8013      	strh	r3, [r2, #0]
 8007664:	e192      	b.n	800798c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	827b      	strh	r3, [r7, #18]
 8007674:	8a7b      	ldrh	r3, [r7, #18]
 8007676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01b      	beq.n	80076b6 <USB_DeactivateEndpoint+0xf6>
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007694:	823b      	strh	r3, [r7, #16]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	8a3b      	ldrh	r3, [r7, #16]
 80076a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076cc:	81fb      	strh	r3, [r7, #14]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	441a      	add	r2, r3
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	8013      	strh	r3, [r2, #0]
 80076ee:	e14d      	b.n	800798c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 80a5 	bne.w	8007844 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	843b      	strh	r3, [r7, #32]
 8007708:	8c3b      	ldrh	r3, [r7, #32]
 800770a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d01b      	beq.n	800774a <USB_DeactivateEndpoint+0x18a>
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	b29b      	uxth	r3, r3
 8007720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007728:	83fb      	strh	r3, [r7, #30]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	441a      	add	r2, r3
 8007734:	8bfb      	ldrh	r3, [r7, #30]
 8007736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800773a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800773e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007746:	b29b      	uxth	r3, r3
 8007748:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	83bb      	strh	r3, [r7, #28]
 8007758:	8bbb      	ldrh	r3, [r7, #28]
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d01b      	beq.n	800779a <USB_DeactivateEndpoint+0x1da>
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	4413      	add	r3, r2
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007778:	837b      	strh	r3, [r7, #26]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	441a      	add	r2, r3
 8007784:	8b7b      	ldrh	r3, [r7, #26]
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007792:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b0:	833b      	strh	r3, [r7, #24]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	441a      	add	r2, r3
 80077bc:	8b3b      	ldrh	r3, [r7, #24]
 80077be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	4413      	add	r3, r2
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077e8:	82fb      	strh	r3, [r7, #22]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	441a      	add	r2, r3
 80077f4:	8afb      	ldrh	r3, [r7, #22]
 80077f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007806:	b29b      	uxth	r3, r3
 8007808:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	b29b      	uxth	r3, r3
 8007818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800781c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007820:	82bb      	strh	r3, [r7, #20]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	441a      	add	r2, r3
 800782c:	8abb      	ldrh	r3, [r7, #20]
 800782e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783e:	b29b      	uxth	r3, r3
 8007840:	8013      	strh	r3, [r2, #0]
 8007842:	e0a3      	b.n	800798c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <USB_DeactivateEndpoint+0x2d4>
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800788c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007890:	b29b      	uxth	r3, r3
 8007892:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80078a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01b      	beq.n	80078e4 <USB_DeactivateEndpoint+0x324>
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4413      	add	r3, r2
 80078b6:	881b      	ldrh	r3, [r3, #0]
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	441a      	add	r2, r3
 80078ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	441a      	add	r2, r3
 8007906:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007918:	b29b      	uxth	r3, r3
 800791a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	881b      	ldrh	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007932:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	441a      	add	r2, r3
 800793e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007950:	b29b      	uxth	r3, r3
 8007952:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	847b      	strh	r3, [r7, #34]	; 0x22
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	441a      	add	r2, r3
 8007976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800797c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	b29b      	uxth	r3, r3
 800798a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3734      	adds	r7, #52	; 0x34
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b0c2      	sub	sp, #264	; 0x108
 800799c:	af00      	add	r7, sp, #0
 800799e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a6:	6018      	str	r0, [r3, #0]
 80079a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	f040 86b7 	bne.w	8008732 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80079c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699a      	ldr	r2, [r3, #24]
 80079d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d908      	bls.n	80079f2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80079e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80079f0:	e007      	b.n	8007a02 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80079f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	7b1b      	ldrb	r3, [r3, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d13a      	bne.n	8007a88 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6959      	ldr	r1, [r3, #20]
 8007a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	88da      	ldrh	r2, [r3, #6]
 8007a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a34:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a38:	6800      	ldr	r0, [r0, #0]
 8007a3a:	f001 fc9c 	bl	8009376 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	4413      	add	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	011a      	lsls	r2, r3, #4
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	f000 be1f 	b.w	80086c6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	78db      	ldrb	r3, [r3, #3]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	f040 8462 	bne.w	800835e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	f240 83df 	bls.w	8008276 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	441a      	add	r2, r3
 8007afc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b08:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007b14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6a1a      	ldr	r2, [r3, #32]
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b24:	1ad2      	subs	r2, r2, r3
 8007b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 81c7 	beq.w	8007ee8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	633b      	str	r3, [r7, #48]	; 0x30
 8007b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	785b      	ldrb	r3, [r3, #1]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d177      	bne.n	8007c66 <USB_EPStartXfer+0x2ce>
 8007b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	4413      	add	r3, r2
 8007b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	011a      	lsls	r2, r3, #4
 8007ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007baa:	4413      	add	r3, r2
 8007bac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	801a      	strh	r2, [r3, #0]
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc8:	d921      	bls.n	8007c0e <USB_EPStartXfer+0x276>
 8007bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bce:	095b      	lsrs	r3, r3, #5
 8007bd0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bd8:	f003 031f 	and.w	r3, r3, #31
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d104      	bne.n	8007bea <USB_EPStartXfer+0x252>
 8007be0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007be4:	3b01      	subs	r3, #1
 8007be6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	029b      	lsls	r3, r3, #10
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	801a      	strh	r2, [r3, #0]
 8007c0c:	e050      	b.n	8007cb0 <USB_EPStartXfer+0x318>
 8007c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <USB_EPStartXfer+0x294>
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	881b      	ldrh	r3, [r3, #0]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	801a      	strh	r2, [r3, #0]
 8007c2a:	e041      	b.n	8007cb0 <USB_EPStartXfer+0x318>
 8007c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c30:	085b      	lsrs	r3, r3, #1
 8007c32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <USB_EPStartXfer+0x2b4>
 8007c42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c46:	3301      	adds	r3, #1
 8007c48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	881b      	ldrh	r3, [r3, #0]
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	029b      	lsls	r3, r3, #10
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	e024      	b.n	8007cb0 <USB_EPStartXfer+0x318>
 8007c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	785b      	ldrb	r3, [r3, #1]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d11c      	bne.n	8007cb0 <USB_EPStartXfer+0x318>
 8007c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	461a      	mov	r2, r3
 8007c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8a:	4413      	add	r3, r2
 8007c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	011a      	lsls	r2, r3, #4
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	895b      	ldrh	r3, [r3, #10]
 8007cbc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6959      	ldr	r1, [r3, #20]
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007cd6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007cda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007cde:	6800      	ldr	r0, [r0, #0]
 8007ce0:	f001 fb49 	bl	8009376 <USB_WritePMA>
            ep->xfer_buff += len;
 8007ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	695a      	ldr	r2, [r3, #20]
 8007cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cf4:	441a      	add	r2, r3
 8007cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6a1a      	ldr	r2, [r3, #32]
 8007d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d90f      	bls.n	8007d3e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6a1a      	ldr	r2, [r3, #32]
 8007d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	621a      	str	r2, [r3, #32]
 8007d3c:	e00e      	b.n	8007d5c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6a1b      	ldr	r3, [r3, #32]
 8007d4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d177      	bne.n	8007e5c <USB_EPStartXfer+0x4c4>
 8007d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	61bb      	str	r3, [r7, #24]
 8007d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	011a      	lsls	r2, r3, #4
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	801a      	strh	r2, [r3, #0]
 8007db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dbe:	d921      	bls.n	8007e04 <USB_EPStartXfer+0x46c>
 8007dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dce:	f003 031f 	and.w	r3, r3, #31
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <USB_EPStartXfer+0x448>
 8007dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	029b      	lsls	r3, r3, #10
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	801a      	strh	r2, [r3, #0]
 8007e02:	e056      	b.n	8007eb2 <USB_EPStartXfer+0x51a>
 8007e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <USB_EPStartXfer+0x48a>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	801a      	strh	r2, [r3, #0]
 8007e20:	e047      	b.n	8007eb2 <USB_EPStartXfer+0x51a>
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d004      	beq.n	8007e42 <USB_EPStartXfer+0x4aa>
 8007e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	029b      	lsls	r3, r3, #10
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	4313      	orrs	r3, r2
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	e02a      	b.n	8007eb2 <USB_EPStartXfer+0x51a>
 8007e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	785b      	ldrb	r3, [r3, #1]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d122      	bne.n	8007eb2 <USB_EPStartXfer+0x51a>
 8007e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	623b      	str	r3, [r7, #32]
 8007e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	623b      	str	r3, [r7, #32]
 8007e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	011a      	lsls	r2, r3, #4
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	891b      	ldrh	r3, [r3, #8]
 8007ebe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6959      	ldr	r1, [r3, #20]
 8007ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ed8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007edc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ee0:	6800      	ldr	r0, [r0, #0]
 8007ee2:	f001 fa48 	bl	8009376 <USB_WritePMA>
 8007ee6:	e3ee      	b.n	80086c6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d177      	bne.n	8007fe8 <USB_EPStartXfer+0x650>
 8007ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007efc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f18:	4413      	add	r3, r2
 8007f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	011a      	lsls	r2, r3, #4
 8007f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f32:	647b      	str	r3, [r7, #68]	; 0x44
 8007f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f42:	801a      	strh	r2, [r3, #0]
 8007f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f48:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4a:	d921      	bls.n	8007f90 <USB_EPStartXfer+0x5f8>
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <USB_EPStartXfer+0x5d4>
 8007f62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f66:	3b01      	subs	r3, #1
 8007f68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	029b      	lsls	r3, r3, #10
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	e056      	b.n	800803e <USB_EPStartXfer+0x6a6>
 8007f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10a      	bne.n	8007fae <USB_EPStartXfer+0x616>
 8007f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	e047      	b.n	800803e <USB_EPStartXfer+0x6a6>
 8007fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb2:	085b      	lsrs	r3, r3, #1
 8007fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <USB_EPStartXfer+0x636>
 8007fc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fc8:	3301      	adds	r3, #1
 8007fca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	029b      	lsls	r3, r3, #10
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fe4:	801a      	strh	r2, [r3, #0]
 8007fe6:	e02a      	b.n	800803e <USB_EPStartXfer+0x6a6>
 8007fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	785b      	ldrb	r3, [r3, #1]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d122      	bne.n	800803e <USB_EPStartXfer+0x6a6>
 8007ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	653b      	str	r3, [r7, #80]	; 0x50
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008012:	b29b      	uxth	r3, r3
 8008014:	461a      	mov	r2, r3
 8008016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008018:	4413      	add	r3, r2
 800801a:	653b      	str	r3, [r7, #80]	; 0x50
 800801c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	011a      	lsls	r2, r3, #4
 800802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802c:	4413      	add	r3, r2
 800802e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008038:	b29a      	uxth	r2, r3
 800803a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800803c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800803e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	891b      	ldrh	r3, [r3, #8]
 800804a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800804e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6959      	ldr	r1, [r3, #20]
 800805a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800805e:	b29b      	uxth	r3, r3
 8008060:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008064:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008068:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800806c:	6800      	ldr	r0, [r0, #0]
 800806e:	f001 f982 	bl	8009376 <USB_WritePMA>
            ep->xfer_buff += len;
 8008072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008082:	441a      	add	r2, r3
 8008084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6a1a      	ldr	r2, [r3, #32]
 800809c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d90f      	bls.n	80080cc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80080ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6a1a      	ldr	r2, [r3, #32]
 80080b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080bc:	1ad2      	subs	r2, r2, r3
 80080be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	621a      	str	r2, [r3, #32]
 80080ca:	e00e      	b.n	80080ea <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80080cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80080dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	643b      	str	r3, [r7, #64]	; 0x40
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	785b      	ldrb	r3, [r3, #1]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d177      	bne.n	80081f6 <USB_EPStartXfer+0x85e>
 8008106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	63bb      	str	r3, [r7, #56]	; 0x38
 8008112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008120:	b29b      	uxth	r3, r3
 8008122:	461a      	mov	r2, r3
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	4413      	add	r3, r2
 8008128:	63bb      	str	r3, [r7, #56]	; 0x38
 800812a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800812e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	011a      	lsls	r2, r3, #4
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	4413      	add	r3, r2
 800813c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800814c:	b29a      	uxth	r2, r3
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008156:	2b3e      	cmp	r3, #62	; 0x3e
 8008158:	d921      	bls.n	800819e <USB_EPStartXfer+0x806>
 800815a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815e:	095b      	lsrs	r3, r3, #5
 8008160:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008168:	f003 031f 	and.w	r3, r3, #31
 800816c:	2b00      	cmp	r3, #0
 800816e:	d104      	bne.n	800817a <USB_EPStartXfer+0x7e2>
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008174:	3b01      	subs	r3, #1
 8008176:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	b29a      	uxth	r2, r3
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008184:	b29b      	uxth	r3, r3
 8008186:	029b      	lsls	r3, r3, #10
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29b      	uxth	r3, r3
 800818e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008196:	b29a      	uxth	r2, r3
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	801a      	strh	r2, [r3, #0]
 800819c:	e050      	b.n	8008240 <USB_EPStartXfer+0x8a8>
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <USB_EPStartXfer+0x824>
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e041      	b.n	8008240 <USB_EPStartXfer+0x8a8>
 80081bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c0:	085b      	lsrs	r3, r3, #1
 80081c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d004      	beq.n	80081dc <USB_EPStartXfer+0x844>
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d6:	3301      	adds	r3, #1
 80081d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	029b      	lsls	r3, r3, #10
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f2:	801a      	strh	r2, [r3, #0]
 80081f4:	e024      	b.n	8008240 <USB_EPStartXfer+0x8a8>
 80081f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	785b      	ldrb	r3, [r3, #1]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d11c      	bne.n	8008240 <USB_EPStartXfer+0x8a8>
 8008206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008214:	b29b      	uxth	r3, r3
 8008216:	461a      	mov	r2, r3
 8008218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821a:	4413      	add	r3, r2
 800821c:	643b      	str	r3, [r7, #64]	; 0x40
 800821e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	011a      	lsls	r2, r3, #4
 800822c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822e:	4413      	add	r3, r2
 8008230:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823a:	b29a      	uxth	r2, r3
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	895b      	ldrh	r3, [r3, #10]
 800824c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6959      	ldr	r1, [r3, #20]
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008260:	b29b      	uxth	r3, r3
 8008262:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008266:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800826a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800826e:	6800      	ldr	r0, [r0, #0]
 8008270:	f001 f881 	bl	8009376 <USB_WritePMA>
 8008274:	e227      	b.n	80086c6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800827a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800828a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80082a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80082b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	441a      	add	r2, r3
 80082ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80082ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082de:	b29b      	uxth	r3, r3
 80082e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80082e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008302:	4413      	add	r3, r2
 8008304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	011a      	lsls	r2, r3, #4
 8008314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008316:	4413      	add	r3, r2
 8008318:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800831c:	65bb      	str	r3, [r7, #88]	; 0x58
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008322:	b29a      	uxth	r2, r3
 8008324:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008326:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	891b      	ldrh	r3, [r3, #8]
 8008334:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6959      	ldr	r1, [r3, #20]
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008348:	b29b      	uxth	r3, r3
 800834a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800834e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008352:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008356:	6800      	ldr	r0, [r0, #0]
 8008358:	f001 f80d 	bl	8009376 <USB_WritePMA>
 800835c:	e1b3      	b.n	80086c6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800835e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6a1a      	ldr	r2, [r3, #32]
 800836a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800837c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	881b      	ldrh	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80c6 	beq.w	8008530 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	673b      	str	r3, [r7, #112]	; 0x70
 80083b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d177      	bne.n	80084b0 <USB_EPStartXfer+0xb18>
 80083c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80083cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083da:	b29b      	uxth	r3, r3
 80083dc:	461a      	mov	r2, r3
 80083de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083e0:	4413      	add	r3, r2
 80083e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80083e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	011a      	lsls	r2, r3, #4
 80083f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f4:	4413      	add	r3, r2
 80083f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80083fa:	667b      	str	r3, [r7, #100]	; 0x64
 80083fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008406:	b29a      	uxth	r2, r3
 8008408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008410:	2b3e      	cmp	r3, #62	; 0x3e
 8008412:	d921      	bls.n	8008458 <USB_EPStartXfer+0xac0>
 8008414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800841e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008422:	f003 031f 	and.w	r3, r3, #31
 8008426:	2b00      	cmp	r3, #0
 8008428:	d104      	bne.n	8008434 <USB_EPStartXfer+0xa9c>
 800842a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800842e:	3b01      	subs	r3, #1
 8008430:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29a      	uxth	r2, r3
 800843a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800843e:	b29b      	uxth	r3, r3
 8008440:	029b      	lsls	r3, r3, #10
 8008442:	b29b      	uxth	r3, r3
 8008444:	4313      	orrs	r3, r2
 8008446:	b29b      	uxth	r3, r3
 8008448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800844c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008450:	b29a      	uxth	r2, r3
 8008452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	e050      	b.n	80084fa <USB_EPStartXfer+0xb62>
 8008458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <USB_EPStartXfer+0xade>
 8008460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800846a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846e:	b29a      	uxth	r2, r3
 8008470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	e041      	b.n	80084fa <USB_EPStartXfer+0xb62>
 8008476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847a:	085b      	lsrs	r3, r3, #1
 800847c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	d004      	beq.n	8008496 <USB_EPStartXfer+0xafe>
 800848c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008490:	3301      	adds	r3, #1
 8008492:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29a      	uxth	r2, r3
 800849c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	029b      	lsls	r3, r3, #10
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4313      	orrs	r3, r2
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ac:	801a      	strh	r2, [r3, #0]
 80084ae:	e024      	b.n	80084fa <USB_EPStartXfer+0xb62>
 80084b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d11c      	bne.n	80084fa <USB_EPStartXfer+0xb62>
 80084c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084d4:	4413      	add	r3, r2
 80084d6:	673b      	str	r3, [r7, #112]	; 0x70
 80084d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	011a      	lsls	r2, r3, #4
 80084e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e8:	4413      	add	r3, r2
 80084ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80084fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	895b      	ldrh	r3, [r3, #10]
 8008506:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800850a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6959      	ldr	r1, [r3, #20]
 8008516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851a:	b29b      	uxth	r3, r3
 800851c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008520:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008524:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008528:	6800      	ldr	r0, [r0, #0]
 800852a:	f000 ff24 	bl	8009376 <USB_WritePMA>
 800852e:	e0ca      	b.n	80086c6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	785b      	ldrb	r3, [r3, #1]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d177      	bne.n	8008630 <USB_EPStartXfer+0xc98>
 8008540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008544:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800854c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800855a:	b29b      	uxth	r3, r3
 800855c:	461a      	mov	r2, r3
 800855e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008560:	4413      	add	r3, r2
 8008562:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	011a      	lsls	r2, r3, #4
 8008572:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008574:	4413      	add	r3, r2
 8008576:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800857a:	67bb      	str	r3, [r7, #120]	; 0x78
 800857c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	b29b      	uxth	r3, r3
 8008582:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008586:	b29a      	uxth	r2, r3
 8008588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008590:	2b3e      	cmp	r3, #62	; 0x3e
 8008592:	d921      	bls.n	80085d8 <USB_EPStartXfer+0xc40>
 8008594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008598:	095b      	lsrs	r3, r3, #5
 800859a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800859e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a2:	f003 031f 	and.w	r3, r3, #31
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d104      	bne.n	80085b4 <USB_EPStartXfer+0xc1c>
 80085aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085ae:	3b01      	subs	r3, #1
 80085b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085be:	b29b      	uxth	r3, r3
 80085c0:	029b      	lsls	r3, r3, #10
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	4313      	orrs	r3, r2
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e05c      	b.n	8008692 <USB_EPStartXfer+0xcfa>
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <USB_EPStartXfer+0xc5e>
 80085e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085e2:	881b      	ldrh	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f2:	801a      	strh	r2, [r3, #0]
 80085f4:	e04d      	b.n	8008692 <USB_EPStartXfer+0xcfa>
 80085f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <USB_EPStartXfer+0xc7e>
 800860c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008610:	3301      	adds	r3, #1
 8008612:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008618:	881b      	ldrh	r3, [r3, #0]
 800861a:	b29a      	uxth	r2, r3
 800861c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008620:	b29b      	uxth	r3, r3
 8008622:	029b      	lsls	r3, r3, #10
 8008624:	b29b      	uxth	r3, r3
 8008626:	4313      	orrs	r3, r2
 8008628:	b29a      	uxth	r2, r3
 800862a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e030      	b.n	8008692 <USB_EPStartXfer+0xcfa>
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	785b      	ldrb	r3, [r3, #1]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d128      	bne.n	8008692 <USB_EPStartXfer+0xcfa>
 8008640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800864e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800865c:	b29b      	uxth	r3, r3
 800865e:	461a      	mov	r2, r3
 8008660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008664:	4413      	add	r3, r2
 8008666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800866a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	011a      	lsls	r2, r3, #4
 8008678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800867c:	4413      	add	r3, r2
 800867e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868a:	b29a      	uxth	r2, r3
 800868c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008690:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	891b      	ldrh	r3, [r3, #8]
 800869e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6959      	ldr	r1, [r3, #20]
 80086ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086c0:	6800      	ldr	r0, [r0, #0]
 80086c2:	f000 fe58 	bl	8009376 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	4413      	add	r3, r2
 80086e0:	881b      	ldrh	r3, [r3, #0]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086ec:	817b      	strh	r3, [r7, #10]
 80086ee:	897b      	ldrh	r3, [r7, #10]
 80086f0:	f083 0310 	eor.w	r3, r3, #16
 80086f4:	817b      	strh	r3, [r7, #10]
 80086f6:	897b      	ldrh	r3, [r7, #10]
 80086f8:	f083 0320 	eor.w	r3, r3, #32
 80086fc:	817b      	strh	r3, [r7, #10]
 80086fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	441a      	add	r2, r3
 8008718:	897b      	ldrh	r3, [r7, #10]
 800871a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800871e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872a:	b29b      	uxth	r3, r3
 800872c:	8013      	strh	r3, [r2, #0]
 800872e:	f000 bcde 	b.w	80090ee <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	7b1b      	ldrb	r3, [r3, #12]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 80bb 	bne.w	80088ba <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	429a      	cmp	r2, r3
 800875e:	d917      	bls.n	8008790 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008774:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	699a      	ldr	r2, [r3, #24]
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008780:	1ad2      	subs	r2, r2, r3
 8008782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	619a      	str	r2, [r3, #24]
 800878e:	e00e      	b.n	80087ae <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80087a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2200      	movs	r2, #0
 80087ac:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80087ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087d2:	4413      	add	r3, r2
 80087d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	011a      	lsls	r2, r3, #4
 80087e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80087ea:	4413      	add	r3, r2
 80087ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008800:	b29a      	uxth	r2, r3
 8008802:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008806:	801a      	strh	r2, [r3, #0]
 8008808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880c:	2b3e      	cmp	r3, #62	; 0x3e
 800880e:	d924      	bls.n	800885a <USB_EPStartXfer+0xec2>
 8008810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008814:	095b      	lsrs	r3, r3, #5
 8008816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881e:	f003 031f 	and.w	r3, r3, #31
 8008822:	2b00      	cmp	r3, #0
 8008824:	d104      	bne.n	8008830 <USB_EPStartXfer+0xe98>
 8008826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800882a:	3b01      	subs	r3, #1
 800882c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	b29a      	uxth	r2, r3
 8008838:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800883c:	b29b      	uxth	r3, r3
 800883e:	029b      	lsls	r3, r3, #10
 8008840:	b29b      	uxth	r3, r3
 8008842:	4313      	orrs	r3, r2
 8008844:	b29b      	uxth	r3, r3
 8008846:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800884a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800884e:	b29a      	uxth	r2, r3
 8008850:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	f000 bc10 	b.w	800907a <USB_EPStartXfer+0x16e2>
 800885a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10c      	bne.n	800887c <USB_EPStartXfer+0xee4>
 8008862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29b      	uxth	r3, r3
 800886a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008872:	b29a      	uxth	r2, r3
 8008874:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008878:	801a      	strh	r2, [r3, #0]
 800887a:	e3fe      	b.n	800907a <USB_EPStartXfer+0x16e2>
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008880:	085b      	lsrs	r3, r3, #1
 8008882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <USB_EPStartXfer+0xf04>
 8008892:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008896:	3301      	adds	r3, #1
 8008898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800889c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	029b      	lsls	r3, r3, #10
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	4313      	orrs	r3, r2
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e3df      	b.n	800907a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80088ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	78db      	ldrb	r3, [r3, #3]
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	f040 8218 	bne.w	8008cfc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80088cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	785b      	ldrb	r3, [r3, #1]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f040 809d 	bne.w	8008a18 <USB_EPStartXfer+0x1080>
 80088de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008902:	4413      	add	r3, r2
 8008904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	011a      	lsls	r2, r3, #4
 8008916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800891a:	4413      	add	r3, r2
 800891c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29b      	uxth	r3, r3
 800892c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008930:	b29a      	uxth	r2, r3
 8008932:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008936:	801a      	strh	r2, [r3, #0]
 8008938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	2b3e      	cmp	r3, #62	; 0x3e
 8008946:	d92b      	bls.n	80089a0 <USB_EPStartXfer+0x1008>
 8008948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800895a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	2b00      	cmp	r3, #0
 800896c:	d104      	bne.n	8008978 <USB_EPStartXfer+0xfe0>
 800896e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008972:	3b01      	subs	r3, #1
 8008974:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29b      	uxth	r3, r3
 800898e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008996:	b29a      	uxth	r2, r3
 8008998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	e070      	b.n	8008a82 <USB_EPStartXfer+0x10ea>
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10c      	bne.n	80089ca <USB_EPStartXfer+0x1032>
 80089b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089c6:	801a      	strh	r2, [r3, #0]
 80089c8:	e05b      	b.n	8008a82 <USB_EPStartXfer+0x10ea>
 80089ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	085b      	lsrs	r3, r3, #1
 80089d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <USB_EPStartXfer+0x1062>
 80089f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f4:	3301      	adds	r3, #1
 80089f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	029b      	lsls	r3, r3, #10
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a14:	801a      	strh	r2, [r3, #0]
 8008a16:	e034      	b.n	8008a82 <USB_EPStartXfer+0x10ea>
 8008a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	785b      	ldrb	r3, [r3, #1]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d12c      	bne.n	8008a82 <USB_EPStartXfer+0x10ea>
 8008a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	461a      	mov	r2, r3
 8008a48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	011a      	lsls	r2, r3, #4
 8008a60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a64:	4413      	add	r3, r2
 8008a66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	785b      	ldrb	r3, [r3, #1]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f040 809d 	bne.w	8008bdc <USB_EPStartXfer+0x1244>
 8008aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	011a      	lsls	r2, r3, #4
 8008ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ade:	4413      	add	r3, r2
 8008ae0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008afa:	801a      	strh	r2, [r3, #0]
 8008afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	2b3e      	cmp	r3, #62	; 0x3e
 8008b0a:	d92b      	bls.n	8008b64 <USB_EPStartXfer+0x11cc>
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <USB_EPStartXfer+0x11a4>
 8008b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b36:	3b01      	subs	r3, #1
 8008b38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	029b      	lsls	r3, r3, #10
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b60:	801a      	strh	r2, [r3, #0]
 8008b62:	e069      	b.n	8008c38 <USB_EPStartXfer+0x12a0>
 8008b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10c      	bne.n	8008b8e <USB_EPStartXfer+0x11f6>
 8008b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b78:	881b      	ldrh	r3, [r3, #0]
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b8a:	801a      	strh	r2, [r3, #0]
 8008b8c:	e054      	b.n	8008c38 <USB_EPStartXfer+0x12a0>
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	085b      	lsrs	r3, r3, #1
 8008b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <USB_EPStartXfer+0x1226>
 8008bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bb8:	3301      	adds	r3, #1
 8008bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	029b      	lsls	r3, r3, #10
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	e02d      	b.n	8008c38 <USB_EPStartXfer+0x12a0>
 8008bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d125      	bne.n	8008c38 <USB_EPStartXfer+0x12a0>
 8008bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c02:	4413      	add	r3, r2
 8008c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	011a      	lsls	r2, r3, #4
 8008c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c1a:	4413      	add	r3, r2
 8008c1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c36:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 8218 	beq.w	800907a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <USB_EPStartXfer+0x12ea>
 8008c76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10d      	bne.n	8008c9e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c82:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f040 81f5 	bne.w	800907a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c90:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 81ee 	bne.w	800907a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ccc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	441a      	add	r2, r3
 8008ce2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	8013      	strh	r3, [r2, #0]
 8008cfa:	e1be      	b.n	800907a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	78db      	ldrb	r3, [r3, #3]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	f040 81b4 	bne.w	8009076 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d917      	bls.n	8008d5a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699a      	ldr	r2, [r3, #24]
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4a:	1ad2      	subs	r2, r2, r3
 8008d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	619a      	str	r2, [r3, #24]
 8008d58:	e00e      	b.n	8008d78 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008d5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2200      	movs	r2, #0
 8008d76:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 8085 	bne.w	8008e94 <USB_EPStartXfer+0x14fc>
 8008d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008dae:	4413      	add	r3, r2
 8008db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	011a      	lsls	r2, r3, #4
 8008dc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008dcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008de2:	801a      	strh	r2, [r3, #0]
 8008de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de8:	2b3e      	cmp	r3, #62	; 0x3e
 8008dea:	d923      	bls.n	8008e34 <USB_EPStartXfer+0x149c>
 8008dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df0:	095b      	lsrs	r3, r3, #5
 8008df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dfa:	f003 031f 	and.w	r3, r3, #31
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d104      	bne.n	8008e0c <USB_EPStartXfer+0x1474>
 8008e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e06:	3b01      	subs	r3, #1
 8008e08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e10:	881b      	ldrh	r3, [r3, #0]
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	029b      	lsls	r3, r3, #10
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	e060      	b.n	8008ef6 <USB_EPStartXfer+0x155e>
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10c      	bne.n	8008e56 <USB_EPStartXfer+0x14be>
 8008e3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e52:	801a      	strh	r2, [r3, #0]
 8008e54:	e04f      	b.n	8008ef6 <USB_EPStartXfer+0x155e>
 8008e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <USB_EPStartXfer+0x14de>
 8008e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e70:	3301      	adds	r3, #1
 8008e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e030      	b.n	8008ef6 <USB_EPStartXfer+0x155e>
 8008e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d128      	bne.n	8008ef6 <USB_EPStartXfer+0x155e>
 8008ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ec8:	4413      	add	r3, r2
 8008eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	011a      	lsls	r2, r3, #4
 8008edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008ee6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008ef4:	801a      	strh	r2, [r3, #0]
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	785b      	ldrb	r3, [r3, #1]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f040 8085 	bne.w	8009020 <USB_EPStartXfer+0x1688>
 8008f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	461a      	mov	r2, r3
 8008f36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	011a      	lsls	r2, r3, #4
 8008f4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008f52:	4413      	add	r3, r2
 8008f54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f6e:	801a      	strh	r2, [r3, #0]
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f74:	2b3e      	cmp	r3, #62	; 0x3e
 8008f76:	d923      	bls.n	8008fc0 <USB_EPStartXfer+0x1628>
 8008f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f7c:	095b      	lsrs	r3, r3, #5
 8008f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d104      	bne.n	8008f98 <USB_EPStartXfer+0x1600>
 8008f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f92:	3b01      	subs	r3, #1
 8008f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	029b      	lsls	r3, r3, #10
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	4313      	orrs	r3, r2
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e05c      	b.n	800907a <USB_EPStartXfer+0x16e2>
 8008fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10c      	bne.n	8008fe2 <USB_EPStartXfer+0x164a>
 8008fc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fde:	801a      	strh	r2, [r3, #0]
 8008fe0:	e04b      	b.n	800907a <USB_EPStartXfer+0x16e2>
 8008fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fe6:	085b      	lsrs	r3, r3, #1
 8008fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d004      	beq.n	8009002 <USB_EPStartXfer+0x166a>
 8008ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009006:	881b      	ldrh	r3, [r3, #0]
 8009008:	b29a      	uxth	r2, r3
 800900a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800900e:	b29b      	uxth	r3, r3
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	b29b      	uxth	r3, r3
 8009014:	4313      	orrs	r3, r2
 8009016:	b29a      	uxth	r2, r3
 8009018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800901c:	801a      	strh	r2, [r3, #0]
 800901e:	e02c      	b.n	800907a <USB_EPStartXfer+0x16e2>
 8009020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d124      	bne.n	800907a <USB_EPStartXfer+0x16e2>
 8009030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800903e:	b29b      	uxth	r3, r3
 8009040:	461a      	mov	r2, r3
 8009042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009046:	4413      	add	r3, r2
 8009048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800904c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	011a      	lsls	r2, r3, #4
 800905a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800905e:	4413      	add	r3, r2
 8009060:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009064:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906c:	b29a      	uxth	r2, r3
 800906e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	e001      	b.n	800907a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e03a      	b.n	80090f0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800907a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800909c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80090a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80090a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80090ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80090b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80090b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80090b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	441a      	add	r2, r3
 80090d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80090da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	785b      	ldrb	r3, [r3, #1]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d020      	beq.n	800914e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29b      	uxth	r3, r3
 800911a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800911e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009122:	81bb      	strh	r3, [r7, #12]
 8009124:	89bb      	ldrh	r3, [r7, #12]
 8009126:	f083 0310 	eor.w	r3, r3, #16
 800912a:	81bb      	strh	r3, [r7, #12]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	441a      	add	r2, r3
 8009136:	89bb      	ldrh	r3, [r7, #12]
 8009138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800913c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009148:	b29b      	uxth	r3, r3
 800914a:	8013      	strh	r3, [r2, #0]
 800914c:	e01f      	b.n	800918e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009164:	81fb      	strh	r3, [r7, #14]
 8009166:	89fb      	ldrh	r3, [r7, #14]
 8009168:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800916c:	81fb      	strh	r3, [r7, #14]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	441a      	add	r2, r3
 8009178:	89fb      	ldrh	r3, [r7, #14]
 800917a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800917e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918a:	b29b      	uxth	r3, r3
 800918c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	bc80      	pop	{r7}
 8009198:	4770      	bx	lr

0800919a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800919a:	b480      	push	{r7}
 800919c:	b087      	sub	sp, #28
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	7b1b      	ldrb	r3, [r3, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f040 809d 	bne.w	80092e8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d04c      	beq.n	8009250 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	823b      	strh	r3, [r7, #16]
 80091c4:	8a3b      	ldrh	r3, [r7, #16]
 80091c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01b      	beq.n	8009206 <USB_EPClearStall+0x6c>
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e4:	81fb      	strh	r3, [r7, #14]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	441a      	add	r2, r3
 80091f0:	89fb      	ldrh	r3, [r7, #14]
 80091f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009202:	b29b      	uxth	r3, r3
 8009204:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	78db      	ldrb	r3, [r3, #3]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d06c      	beq.n	80092e8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009224:	81bb      	strh	r3, [r7, #12]
 8009226:	89bb      	ldrh	r3, [r7, #12]
 8009228:	f083 0320 	eor.w	r3, r3, #32
 800922c:	81bb      	strh	r3, [r7, #12]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	441a      	add	r2, r3
 8009238:	89bb      	ldrh	r3, [r7, #12]
 800923a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800923e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924a:	b29b      	uxth	r3, r3
 800924c:	8013      	strh	r3, [r2, #0]
 800924e:	e04b      	b.n	80092e8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	82fb      	strh	r3, [r7, #22]
 800925e:	8afb      	ldrh	r3, [r7, #22]
 8009260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01b      	beq.n	80092a0 <USB_EPClearStall+0x106>
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	82bb      	strh	r3, [r7, #20]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	441a      	add	r2, r3
 800928a:	8abb      	ldrh	r3, [r7, #20]
 800928c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009294:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800929c:	b29b      	uxth	r3, r3
 800929e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092b6:	827b      	strh	r3, [r7, #18]
 80092b8:	8a7b      	ldrh	r3, [r7, #18]
 80092ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80092be:	827b      	strh	r3, [r7, #18]
 80092c0:	8a7b      	ldrh	r3, [r7, #18]
 80092c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80092c6:	827b      	strh	r3, [r7, #18]
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	441a      	add	r2, r3
 80092d2:	8a7b      	ldrh	r3, [r7, #18]
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr

080092f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009300:	78fb      	ldrb	r3, [r7, #3]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2280      	movs	r2, #128	; 0x80
 800930a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr

0800932e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	bc80      	pop	{r7}
 8009340:	4770      	bx	lr

08009342 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009342:	b480      	push	{r7}
 8009344:	b085      	sub	sp, #20
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009350:	b29b      	uxth	r3, r3
 8009352:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009354:	68fb      	ldr	r3, [r7, #12]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	bc80      	pop	{r7}
 800935e:	4770      	bx	lr

08009360 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	bc80      	pop	{r7}
 8009374:	4770      	bx	lr

08009376 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009376:	b480      	push	{r7}
 8009378:	b08b      	sub	sp, #44	; 0x2c
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	4611      	mov	r1, r2
 8009382:	461a      	mov	r2, r3
 8009384:	460b      	mov	r3, r1
 8009386:	80fb      	strh	r3, [r7, #6]
 8009388:	4613      	mov	r3, r2
 800938a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800938c:	88bb      	ldrh	r3, [r7, #4]
 800938e:	3301      	adds	r3, #1
 8009390:	085b      	lsrs	r3, r3, #1
 8009392:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800939c:	88fb      	ldrh	r3, [r7, #6]
 800939e:	005a      	lsls	r2, r3, #1
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
 80093ae:	e01e      	b.n	80093ee <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	3301      	adds	r3, #1
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	021b      	lsls	r3, r3, #8
 80093be:	b21a      	sxth	r2, r3
 80093c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	b21b      	sxth	r3, r3
 80093c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	8a7a      	ldrh	r2, [r7, #18]
 80093ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	3302      	adds	r3, #2
 80093d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	3302      	adds	r3, #2
 80093da:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	3301      	adds	r3, #1
 80093e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	3b01      	subs	r3, #1
 80093ec:	627b      	str	r3, [r7, #36]	; 0x24
 80093ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1dd      	bne.n	80093b0 <USB_WritePMA+0x3a>
  }
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop
 80093f8:	372c      	adds	r7, #44	; 0x2c
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr

08009400 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009400:	b480      	push	{r7}
 8009402:	b08b      	sub	sp, #44	; 0x2c
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4611      	mov	r1, r2
 800940c:	461a      	mov	r2, r3
 800940e:	460b      	mov	r3, r1
 8009410:	80fb      	strh	r3, [r7, #6]
 8009412:	4613      	mov	r3, r2
 8009414:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009416:	88bb      	ldrh	r3, [r7, #4]
 8009418:	085b      	lsrs	r3, r3, #1
 800941a:	b29b      	uxth	r3, r3
 800941c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	005a      	lsls	r2, r3, #1
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009432:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	627b      	str	r3, [r7, #36]	; 0x24
 8009438:	e01b      	b.n	8009472 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800943a:	6a3b      	ldr	r3, [r7, #32]
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	3302      	adds	r3, #2
 8009446:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	b2da      	uxtb	r2, r3
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	3301      	adds	r3, #1
 8009454:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	b2da      	uxtb	r2, r3
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	3301      	adds	r3, #1
 8009464:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	3302      	adds	r3, #2
 800946a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800946c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946e:	3b01      	subs	r3, #1
 8009470:	627b      	str	r3, [r7, #36]	; 0x24
 8009472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e0      	bne.n	800943a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009478:	88bb      	ldrh	r3, [r7, #4]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d007      	beq.n	8009494 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	b29b      	uxth	r3, r3
 800948a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	b2da      	uxtb	r2, r3
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	701a      	strb	r2, [r3, #0]
  }
}
 8009494:	bf00      	nop
 8009496:	372c      	adds	r7, #44	; 0x2c
 8009498:	46bd      	mov	sp, r7
 800949a:	bc80      	pop	{r7}
 800949c:	4770      	bx	lr
	...

080094a0 <USBD_HID_Init>:
  */
/* for Nintendo Switch */
extern USB_JoystickReport_Output joystick_output;
static uint8_t  USBD_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]

  /* Open EP IN */
  USBD_LL_OpenEP(pdev,
 80094b0:	2340      	movs	r3, #64	; 0x40
 80094b2:	2203      	movs	r2, #3
 80094b4:	2181      	movs	r1, #129	; 0x81
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f001 fc21 	bl	800acfe <USBD_LL_OpenEP>
                 HID_EPIN_ADDR,
                 USBD_EP_TYPE_INTR,
                 HID_EPIN_SIZE);

  /* Open EP OUT */
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 80094bc:	2010      	movs	r0, #16
 80094be:	f001 fd33 	bl	800af28 <USBD_static_malloc>
 80094c2:	4602      	mov	r2, r0
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, (uint8_t*)&joystick_output, sizeof(USB_JoystickReport_Output));
 80094ca:	2308      	movs	r3, #8
 80094cc:	4a0b      	ldr	r2, [pc, #44]	; (80094fc <USBD_HID_Init+0x5c>)
 80094ce:	2102      	movs	r1, #2
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fd05 	bl	800aee0 <USBD_LL_PrepareReceive>
  if(pdev->pClassData == NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <USBD_HID_Init+0x46>
  {
    ret = 1;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
 80094e4:	e004      	b.n	80094f0 <USBD_HID_Init+0x50>
  }
  else
  {
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ec:	2200      	movs	r2, #0
 80094ee:	731a      	strb	r2, [r3, #12]
  }
  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	2000058c 	.word	0x2000058c

08009500 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev,
 800950c:	2181      	movs	r1, #129	; 0x81
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f001 fc1b 	bl	800ad4a <USBD_LL_CloseEP>
                  HID_EPIN_ADDR);

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <USBD_HID_DeInit+0x32>
  {
    USBD_free(pdev->pClassData);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009524:	4618      	mov	r0, r3
 8009526:	f001 fd0b 	bl	800af40 <USBD_static_free>
    pdev->pClassData = NULL;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	82fb      	strh	r3, [r7, #22]
  uint8_t  *pbuf = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	613b      	str	r3, [r7, #16]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009554:	60fb      	str	r3, [r7, #12]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800955e:	2b00      	cmp	r3, #0
 8009560:	d044      	beq.n	80095ec <USBD_HID_Setup+0xb0>
 8009562:	2b20      	cmp	r3, #32
 8009564:	f040 8080 	bne.w	8009668 <USBD_HID_Setup+0x12c>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	785b      	ldrb	r3, [r3, #1]
 800956c:	3b02      	subs	r3, #2
 800956e:	2b09      	cmp	r3, #9
 8009570:	d835      	bhi.n	80095de <USBD_HID_Setup+0xa2>
 8009572:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <USBD_HID_Setup+0x3c>)
 8009574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009578:	080095cf 	.word	0x080095cf
 800957c:	080095af 	.word	0x080095af
 8009580:	080095df 	.word	0x080095df
 8009584:	080095df 	.word	0x080095df
 8009588:	080095df 	.word	0x080095df
 800958c:	080095df 	.word	0x080095df
 8009590:	080095df 	.word	0x080095df
 8009594:	080095df 	.word	0x080095df
 8009598:	080095bd 	.word	0x080095bd
 800959c:	080095a1 	.word	0x080095a1
    {


    case HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	885b      	ldrh	r3, [r3, #2]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	461a      	mov	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	601a      	str	r2, [r3, #0]
      break;
 80095ac:	e01d      	b.n	80095ea <USBD_HID_Setup+0xae>

    case HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->Protocol,
 80095ae:	68fb      	ldr	r3, [r7, #12]
      USBD_CtlSendData (pdev,
 80095b0:	2201      	movs	r2, #1
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 f8e2 	bl	800a77e <USBD_CtlSendData>
                        1);
      break;
 80095ba:	e016      	b.n	80095ea <USBD_HID_Setup+0xae>

    case HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	885b      	ldrh	r3, [r3, #2]
 80095c0:	0a1b      	lsrs	r3, r3, #8
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	605a      	str	r2, [r3, #4]
      break;
 80095cc:	e00d      	b.n	80095ea <USBD_HID_Setup+0xae>

    case HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->IdleState,
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev,
 80095d2:	2201      	movs	r2, #1
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 f8d1 	bl	800a77e <USBD_CtlSendData>
                        1);
      break;
 80095dc:	e005      	b.n	80095ea <USBD_HID_Setup+0xae>

    default:
      USBD_CtlError (pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 f862 	bl	800a6aa <USBD_CtlError>
      return USBD_FAIL;
 80095e6:	2302      	movs	r3, #2
 80095e8:	e03f      	b.n	800966a <USBD_HID_Setup+0x12e>
    }
    break;
 80095ea:	e03d      	b.n	8009668 <USBD_HID_Setup+0x12c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	785b      	ldrb	r3, [r3, #1]
 80095f0:	2b0b      	cmp	r3, #11
 80095f2:	d032      	beq.n	800965a <USBD_HID_Setup+0x11e>
 80095f4:	2b0b      	cmp	r3, #11
 80095f6:	dc37      	bgt.n	8009668 <USBD_HID_Setup+0x12c>
 80095f8:	2b06      	cmp	r3, #6
 80095fa:	d002      	beq.n	8009602 <USBD_HID_Setup+0xc6>
 80095fc:	2b0a      	cmp	r3, #10
 80095fe:	d024      	beq.n	800964a <USBD_HID_Setup+0x10e>
 8009600:	e032      	b.n	8009668 <USBD_HID_Setup+0x12c>
    {
    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	885b      	ldrh	r3, [r3, #2]
 8009606:	0a1b      	lsrs	r3, r3, #8
 8009608:	b29b      	uxth	r3, r3
 800960a:	2b22      	cmp	r3, #34	; 0x22
 800960c:	d108      	bne.n	8009620 <USBD_HID_Setup+0xe4>
      {
        len = MIN(HID_CUSTOM_REPORT_DESC_SIZE , req->wLength);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	88db      	ldrh	r3, [r3, #6]
 8009612:	2b56      	cmp	r3, #86	; 0x56
 8009614:	bf28      	it	cs
 8009616:	2356      	movcs	r3, #86	; 0x56
 8009618:	82fb      	strh	r3, [r7, #22]
        pbuf = HID_CUSTOM_ReportDesc;
 800961a:	4b16      	ldr	r3, [pc, #88]	; (8009674 <USBD_HID_Setup+0x138>)
 800961c:	613b      	str	r3, [r7, #16]
 800961e:	e00d      	b.n	800963c <USBD_HID_Setup+0x100>
      }
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	885b      	ldrh	r3, [r3, #2]
 8009624:	0a1b      	lsrs	r3, r3, #8
 8009626:	b29b      	uxth	r3, r3
 8009628:	2b21      	cmp	r3, #33	; 0x21
 800962a:	d107      	bne.n	800963c <USBD_HID_Setup+0x100>
      {
        pbuf = USBD_HID_Desc;
 800962c:	4b12      	ldr	r3, [pc, #72]	; (8009678 <USBD_HID_Setup+0x13c>)
 800962e:	613b      	str	r3, [r7, #16]
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	88db      	ldrh	r3, [r3, #6]
 8009634:	2b09      	cmp	r3, #9
 8009636:	bf28      	it	cs
 8009638:	2309      	movcs	r3, #9
 800963a:	82fb      	strh	r3, [r7, #22]
      }

      USBD_CtlSendData (pdev,
 800963c:	8afb      	ldrh	r3, [r7, #22]
 800963e:	461a      	mov	r2, r3
 8009640:	6939      	ldr	r1, [r7, #16]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 f89b 	bl	800a77e <USBD_CtlSendData>
                        pbuf,
                        len);

      break;
 8009648:	e00e      	b.n	8009668 <USBD_HID_Setup+0x12c>

    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
                        (uint8_t *)&hhid->AltSetting,
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev,
 800964e:	2201      	movs	r2, #1
 8009650:	4619      	mov	r1, r3
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 f893 	bl	800a77e <USBD_CtlSendData>
                        1);
      break;
 8009658:	e006      	b.n	8009668 <USBD_HID_Setup+0x12c>

    case USB_REQ_SET_INTERFACE :
      hhid->AltSetting = (uint8_t)(req->wValue);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	885b      	ldrh	r3, [r3, #2]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	461a      	mov	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	609a      	str	r2, [r3, #8]
      break;
 8009666:	bf00      	nop
    }
  }
  return USBD_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20000098 	.word	0x20000098
 8009678:	20000080 	.word	0x20000080

0800967c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport     (USBD_HandleTypeDef  *pdev,
                                 uint8_t *report,
                                 uint16_t len)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	4613      	mov	r3, r2
 8009688:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009690:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	2b03      	cmp	r3, #3
 800969a:	d10c      	bne.n	80096b6 <USBD_HID_SendReport+0x3a>
  {
    if(hhid->state == HID_IDLE)
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	7b1b      	ldrb	r3, [r3, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d108      	bne.n	80096b6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2201      	movs	r2, #1
 80096a8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit (pdev,
 80096aa:	88fb      	ldrh	r3, [r7, #6]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	2181      	movs	r1, #129	; 0x81
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f001 fbf2 	bl	800ae9a <USBD_LL_Transmit>
                        HID_EPIN_ADDR,
                        report,
                        len);
    }
  }
  return USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_HID_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_CfgDesc);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2229      	movs	r2, #41	; 0x29
 80096cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80096ce:	4b03      	ldr	r3, [pc, #12]	; (80096dc <USBD_HID_GetCfgDesc+0x1c>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bc80      	pop	{r7}
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	20000054 	.word	0x20000054

080096e0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f2:	2200      	movs	r2, #0
 80096f4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
	...

08009704 <USBD_HID_DataOut>:
  * @retval status
  */
/* for Nintendo Switch */
static uint8_t  USBD_HID_DataOut (USBD_HandleTypeDef *pdev,
                              uint8_t epnum)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	460b      	mov	r3, r1
 800970e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Receive(hUsbDeviceFS.pData, HID_EPOUT_ADDR, (uint8_t*)&joystick_output, sizeof(USB_JoystickReport_Output));
 8009710:	4b06      	ldr	r3, [pc, #24]	; (800972c <USBD_HID_DataOut+0x28>)
 8009712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009716:	2308      	movs	r3, #8
 8009718:	4a05      	ldr	r2, [pc, #20]	; (8009730 <USBD_HID_DataOut+0x2c>)
 800971a:	2102      	movs	r1, #2
 800971c:	f7fa fdb8 	bl	8004290 <HAL_PCD_EP_Receive>
  // ignore
  return USBD_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	200005a0 	.word	0x200005a0
 8009730:	2000058c 	.word	0x2000058c

08009734 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	220a      	movs	r2, #10
 8009740:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	bc80      	pop	{r7}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	2000008c 	.word	0x2000008c

08009754 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	4613      	mov	r3, r2
 8009760:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009768:	2302      	movs	r3, #2
 800976a:	e01a      	b.n	80097a2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d003      	beq.n	800978c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	79fa      	ldrb	r2, [r7, #7]
 8009798:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f001 fa4c 	bl	800ac38 <USBD_LL_Init>

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80097b4:	2300      	movs	r3, #0
 80097b6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d006      	beq.n	80097cc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	683a      	ldr	r2, [r7, #0]
 80097c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]
 80097ca:	e001      	b.n	80097d0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80097cc:	2302      	movs	r3, #2
 80097ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bc80      	pop	{r7}
 80097da:	4770      	bx	lr

080097dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 fa6f 	bl	800acc8 <USBD_LL_Start>

  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	370c      	adds	r7, #12
 8009802:	46bd      	mov	sp, r7
 8009804:	bc80      	pop	{r7}
 8009806:	4770      	bx	lr

08009808 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009814:	2302      	movs	r3, #2
 8009816:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00c      	beq.n	800983c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	78fa      	ldrb	r2, [r7, #3]
 800982c:	4611      	mov	r1, r2
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	4798      	blx	r3
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	460b      	mov	r3, r1
 8009850:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	78fa      	ldrb	r2, [r7, #3]
 800985c:	4611      	mov	r1, r2
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	4798      	blx	r3

  return USBD_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fed7 	bl	800a632 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009892:	461a      	mov	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80098a0:	f003 031f 	and.w	r3, r3, #31
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d016      	beq.n	80098d6 <USBD_LL_SetupStage+0x6a>
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d81c      	bhi.n	80098e6 <USBD_LL_SetupStage+0x7a>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d002      	beq.n	80098b6 <USBD_LL_SetupStage+0x4a>
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d008      	beq.n	80098c6 <USBD_LL_SetupStage+0x5a>
 80098b4:	e017      	b.n	80098e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f9ca 	bl	8009c58 <USBD_StdDevReq>
      break;
 80098c4:	e01a      	b.n	80098fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fa2c 	bl	8009d2c <USBD_StdItfReq>
      break;
 80098d4:	e012      	b.n	80098fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fa6c 	bl	8009dbc <USBD_StdEPReq>
      break;
 80098e4:	e00a      	b.n	80098fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80098ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 fa47 	bl	800ad88 <USBD_LL_StallEP>
      break;
 80098fa:	bf00      	nop
  }

  return USBD_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	460b      	mov	r3, r1
 8009910:	607a      	str	r2, [r7, #4]
 8009912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009914:	7afb      	ldrb	r3, [r7, #11]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d14b      	bne.n	80099b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009920:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009928:	2b03      	cmp	r3, #3
 800992a:	d134      	bne.n	8009996 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	429a      	cmp	r2, r3
 8009936:	d919      	bls.n	800996c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	68da      	ldr	r2, [r3, #12]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	1ad2      	subs	r2, r2, r3
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	68da      	ldr	r2, [r3, #12]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800994e:	429a      	cmp	r2, r3
 8009950:	d203      	bcs.n	800995a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009956:	b29b      	uxth	r3, r3
 8009958:	e002      	b.n	8009960 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800995e:	b29b      	uxth	r3, r3
 8009960:	461a      	mov	r2, r3
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f000 ff38 	bl	800a7da <USBD_CtlContinueRx>
 800996a:	e038      	b.n	80099de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00a      	beq.n	800998e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800997e:	2b03      	cmp	r3, #3
 8009980:	d105      	bne.n	800998e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 ff35 	bl	800a7fe <USBD_CtlSendStatus>
 8009994:	e023      	b.n	80099de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800999c:	2b05      	cmp	r3, #5
 800999e:	d11e      	bne.n	80099de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80099a8:	2100      	movs	r1, #0
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f001 f9ec 	bl	800ad88 <USBD_LL_StallEP>
 80099b0:	e015      	b.n	80099de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d00d      	beq.n	80099da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d108      	bne.n	80099da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	7afa      	ldrb	r2, [r7, #11]
 80099d2:	4611      	mov	r1, r2
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	4798      	blx	r3
 80099d8:	e001      	b.n	80099de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80099da:	2302      	movs	r3, #2
 80099dc:	e000      	b.n	80099e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	460b      	mov	r3, r1
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80099f6:	7afb      	ldrb	r3, [r7, #11]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d17f      	bne.n	8009afc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3314      	adds	r3, #20
 8009a00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d15c      	bne.n	8009ac6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d915      	bls.n	8009a44 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	68da      	ldr	r2, [r3, #12]
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	1ad2      	subs	r2, r2, r3
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 fec0 	bl	800a7b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a36:	2300      	movs	r3, #0
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f001 fa4f 	bl	800aee0 <USBD_LL_PrepareReceive>
 8009a42:	e04e      	b.n	8009ae2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	6912      	ldr	r2, [r2, #16]
 8009a4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a50:	fb01 f202 	mul.w	r2, r1, r2
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d11c      	bne.n	8009a94 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	689a      	ldr	r2, [r3, #8]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d316      	bcc.n	8009a94 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d20f      	bcs.n	8009a94 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a74:	2200      	movs	r2, #0
 8009a76:	2100      	movs	r1, #0
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 fe9c 	bl	800a7b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a86:	2300      	movs	r3, #0
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f001 fa27 	bl	800aee0 <USBD_LL_PrepareReceive>
 8009a92:	e026      	b.n	8009ae2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00a      	beq.n	8009ab6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009aa6:	2b03      	cmp	r3, #3
 8009aa8:	d105      	bne.n	8009ab6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009ab6:	2180      	movs	r1, #128	; 0x80
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f001 f965 	bl	800ad88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 feb0 	bl	800a824 <USBD_CtlReceiveStatus>
 8009ac4:	e00d      	b.n	8009ae2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d004      	beq.n	8009ada <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d103      	bne.n	8009ae2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009ada:	2180      	movs	r1, #128	; 0x80
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f001 f953 	bl	800ad88 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d11d      	bne.n	8009b28 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7ff fe81 	bl	80097f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009afa:	e015      	b.n	8009b28 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00d      	beq.n	8009b24 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d108      	bne.n	8009b24 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	7afa      	ldrb	r2, [r7, #11]
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	4798      	blx	r3
 8009b22:	e001      	b.n	8009b28 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009b24:	2302      	movs	r3, #2
 8009b26:	e000      	b.n	8009b2a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b3a:	2340      	movs	r3, #64	; 0x40
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f8dc 	bl	800acfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2240      	movs	r2, #64	; 0x40
 8009b52:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009b56:	2340      	movs	r3, #64	; 0x40
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2180      	movs	r1, #128	; 0x80
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 f8ce 	bl	800acfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2240      	movs	r2, #64	; 0x40
 8009b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d009      	beq.n	8009baa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6852      	ldr	r2, [r2, #4]
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
  }

  return USBD_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr

08009bd2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2204      	movs	r2, #4
 8009bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bc80      	pop	{r7}
 8009bf8:	4770      	bx	lr

08009bfa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	d105      	bne.n	8009c18 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr

08009c24 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d10b      	bne.n	8009c4e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d005      	beq.n	8009c4e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c6e:	2b40      	cmp	r3, #64	; 0x40
 8009c70:	d005      	beq.n	8009c7e <USBD_StdDevReq+0x26>
 8009c72:	2b40      	cmp	r3, #64	; 0x40
 8009c74:	d84f      	bhi.n	8009d16 <USBD_StdDevReq+0xbe>
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <USBD_StdDevReq+0x36>
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d14b      	bne.n	8009d16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	6839      	ldr	r1, [r7, #0]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	4798      	blx	r3
      break;
 8009c8c:	e048      	b.n	8009d20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	785b      	ldrb	r3, [r3, #1]
 8009c92:	2b09      	cmp	r3, #9
 8009c94:	d839      	bhi.n	8009d0a <USBD_StdDevReq+0xb2>
 8009c96:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <USBD_StdDevReq+0x44>)
 8009c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9c:	08009ced 	.word	0x08009ced
 8009ca0:	08009d01 	.word	0x08009d01
 8009ca4:	08009d0b 	.word	0x08009d0b
 8009ca8:	08009cf7 	.word	0x08009cf7
 8009cac:	08009d0b 	.word	0x08009d0b
 8009cb0:	08009ccf 	.word	0x08009ccf
 8009cb4:	08009cc5 	.word	0x08009cc5
 8009cb8:	08009d0b 	.word	0x08009d0b
 8009cbc:	08009ce3 	.word	0x08009ce3
 8009cc0:	08009cd9 	.word	0x08009cd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f9dc 	bl	800a084 <USBD_GetDescriptor>
          break;
 8009ccc:	e022      	b.n	8009d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fb3f 	bl	800a354 <USBD_SetAddress>
          break;
 8009cd6:	e01d      	b.n	8009d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb7e 	bl	800a3dc <USBD_SetConfig>
          break;
 8009ce0:	e018      	b.n	8009d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fc07 	bl	800a4f8 <USBD_GetConfig>
          break;
 8009cea:	e013      	b.n	8009d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fc37 	bl	800a562 <USBD_GetStatus>
          break;
 8009cf4:	e00e      	b.n	8009d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fc65 	bl	800a5c8 <USBD_SetFeature>
          break;
 8009cfe:	e009      	b.n	8009d14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc74 	bl	800a5f0 <USBD_ClrFeature>
          break;
 8009d08:	e004      	b.n	8009d14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009d0a:	6839      	ldr	r1, [r7, #0]
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fccc 	bl	800a6aa <USBD_CtlError>
          break;
 8009d12:	bf00      	nop
      }
      break;
 8009d14:	e004      	b.n	8009d20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fcc6 	bl	800a6aa <USBD_CtlError>
      break;
 8009d1e:	bf00      	nop
  }

  return ret;
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop

08009d2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d005      	beq.n	8009d52 <USBD_StdItfReq+0x26>
 8009d46:	2b40      	cmp	r3, #64	; 0x40
 8009d48:	d82e      	bhi.n	8009da8 <USBD_StdItfReq+0x7c>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <USBD_StdItfReq+0x26>
 8009d4e:	2b20      	cmp	r3, #32
 8009d50:	d12a      	bne.n	8009da8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d81d      	bhi.n	8009d9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	889b      	ldrh	r3, [r3, #4]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d813      	bhi.n	8009d90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	4798      	blx	r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	88db      	ldrh	r3, [r3, #6]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d110      	bne.n	8009da4 <USBD_StdItfReq+0x78>
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10d      	bne.n	8009da4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fd38 	bl	800a7fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d8e:	e009      	b.n	8009da4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fc89 	bl	800a6aa <USBD_CtlError>
          break;
 8009d98:	e004      	b.n	8009da4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fc84 	bl	800a6aa <USBD_CtlError>
          break;
 8009da2:	e000      	b.n	8009da6 <USBD_StdItfReq+0x7a>
          break;
 8009da4:	bf00      	nop
      }
      break;
 8009da6:	e004      	b.n	8009db2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fc7d 	bl	800a6aa <USBD_CtlError>
      break;
 8009db0:	bf00      	nop
  }

  return USBD_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	889b      	ldrh	r3, [r3, #4]
 8009dce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dd8:	2b40      	cmp	r3, #64	; 0x40
 8009dda:	d007      	beq.n	8009dec <USBD_StdEPReq+0x30>
 8009ddc:	2b40      	cmp	r3, #64	; 0x40
 8009dde:	f200 8146 	bhi.w	800a06e <USBD_StdEPReq+0x2b2>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <USBD_StdEPReq+0x40>
 8009de6:	2b20      	cmp	r3, #32
 8009de8:	f040 8141 	bne.w	800a06e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	4798      	blx	r3
      break;
 8009dfa:	e13d      	b.n	800a078 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d10a      	bne.n	8009e1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	6839      	ldr	r1, [r7, #0]
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	4798      	blx	r3
 8009e16:	4603      	mov	r3, r0
 8009e18:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	e12d      	b.n	800a07a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	785b      	ldrb	r3, [r3, #1]
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d007      	beq.n	8009e36 <USBD_StdEPReq+0x7a>
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	f300 811b 	bgt.w	800a062 <USBD_StdEPReq+0x2a6>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d072      	beq.n	8009f16 <USBD_StdEPReq+0x15a>
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d03a      	beq.n	8009eaa <USBD_StdEPReq+0xee>
 8009e34:	e115      	b.n	800a062 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d002      	beq.n	8009e46 <USBD_StdEPReq+0x8a>
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d015      	beq.n	8009e70 <USBD_StdEPReq+0xb4>
 8009e44:	e02b      	b.n	8009e9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00c      	beq.n	8009e66 <USBD_StdEPReq+0xaa>
 8009e4c:	7bbb      	ldrb	r3, [r7, #14]
 8009e4e:	2b80      	cmp	r3, #128	; 0x80
 8009e50:	d009      	beq.n	8009e66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 ff96 	bl	800ad88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e5c:	2180      	movs	r1, #128	; 0x80
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 ff92 	bl	800ad88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e64:	e020      	b.n	8009ea8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fc1e 	bl	800a6aa <USBD_CtlError>
              break;
 8009e6e:	e01b      	b.n	8009ea8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	885b      	ldrh	r3, [r3, #2]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10e      	bne.n	8009e96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <USBD_StdEPReq+0xda>
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	2b80      	cmp	r3, #128	; 0x80
 8009e82:	d008      	beq.n	8009e96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	88db      	ldrh	r3, [r3, #6]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 ff79 	bl	800ad88 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fcb1 	bl	800a7fe <USBD_CtlSendStatus>

              break;
 8009e9c:	e004      	b.n	8009ea8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009e9e:	6839      	ldr	r1, [r7, #0]
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fc02 	bl	800a6aa <USBD_CtlError>
              break;
 8009ea6:	bf00      	nop
          }
          break;
 8009ea8:	e0e0      	b.n	800a06c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d002      	beq.n	8009eba <USBD_StdEPReq+0xfe>
 8009eb4:	2b03      	cmp	r3, #3
 8009eb6:	d015      	beq.n	8009ee4 <USBD_StdEPReq+0x128>
 8009eb8:	e026      	b.n	8009f08 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00c      	beq.n	8009eda <USBD_StdEPReq+0x11e>
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	2b80      	cmp	r3, #128	; 0x80
 8009ec4:	d009      	beq.n	8009eda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 ff5c 	bl	800ad88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ed0:	2180      	movs	r1, #128	; 0x80
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 ff58 	bl	800ad88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ed8:	e01c      	b.n	8009f14 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009eda:	6839      	ldr	r1, [r7, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fbe4 	bl	800a6aa <USBD_CtlError>
              break;
 8009ee2:	e017      	b.n	8009f14 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	885b      	ldrh	r3, [r3, #2]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d112      	bne.n	8009f12 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 ff63 	bl	800adc6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fc7c 	bl	800a7fe <USBD_CtlSendStatus>
              }
              break;
 8009f06:	e004      	b.n	8009f12 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fbcd 	bl	800a6aa <USBD_CtlError>
              break;
 8009f10:	e000      	b.n	8009f14 <USBD_StdEPReq+0x158>
              break;
 8009f12:	bf00      	nop
          }
          break;
 8009f14:	e0aa      	b.n	800a06c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d002      	beq.n	8009f26 <USBD_StdEPReq+0x16a>
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d032      	beq.n	8009f8a <USBD_StdEPReq+0x1ce>
 8009f24:	e097      	b.n	800a056 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d007      	beq.n	8009f3c <USBD_StdEPReq+0x180>
 8009f2c:	7bbb      	ldrb	r3, [r7, #14]
 8009f2e:	2b80      	cmp	r3, #128	; 0x80
 8009f30:	d004      	beq.n	8009f3c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009f32:	6839      	ldr	r1, [r7, #0]
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fbb8 	bl	800a6aa <USBD_CtlError>
                break;
 8009f3a:	e091      	b.n	800a060 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da0b      	bge.n	8009f5c <USBD_StdEPReq+0x1a0>
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	3310      	adds	r3, #16
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	4413      	add	r3, r2
 8009f58:	3304      	adds	r3, #4
 8009f5a:	e00b      	b.n	8009f74 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	4413      	add	r3, r2
 8009f72:	3304      	adds	r3, #4
 8009f74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fbfb 	bl	800a77e <USBD_CtlSendData>
              break;
 8009f88:	e06a      	b.n	800a060 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	da11      	bge.n	8009fb6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	f003 020f 	and.w	r2, r3, #15
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3318      	adds	r3, #24
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d117      	bne.n	8009fdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fb7b 	bl	800a6aa <USBD_CtlError>
                  break;
 8009fb4:	e054      	b.n	800a060 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	f003 020f 	and.w	r2, r3, #15
 8009fbc:	6879      	ldr	r1, [r7, #4]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	440b      	add	r3, r1
 8009fc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fb68 	bl	800a6aa <USBD_CtlError>
                  break;
 8009fda:	e041      	b.n	800a060 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	da0b      	bge.n	8009ffc <USBD_StdEPReq+0x240>
 8009fe4:	7bbb      	ldrb	r3, [r7, #14]
 8009fe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fea:	4613      	mov	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	3310      	adds	r3, #16
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	e00b      	b.n	800a014 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	4413      	add	r3, r2
 800a012:	3304      	adds	r3, #4
 800a014:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a016:	7bbb      	ldrb	r3, [r7, #14]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <USBD_StdEPReq+0x266>
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
 800a01e:	2b80      	cmp	r3, #128	; 0x80
 800a020:	d103      	bne.n	800a02a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	e00e      	b.n	800a048 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fee8 	bl	800ae04 <USBD_LL_IsStallEP>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e002      	b.n	800a048 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2202      	movs	r2, #2
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fb95 	bl	800a77e <USBD_CtlSendData>
              break;
 800a054:	e004      	b.n	800a060 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fb26 	bl	800a6aa <USBD_CtlError>
              break;
 800a05e:	bf00      	nop
          }
          break;
 800a060:	e004      	b.n	800a06c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fb20 	bl	800a6aa <USBD_CtlError>
          break;
 800a06a:	bf00      	nop
      }
      break;
 800a06c:	e004      	b.n	800a078 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fb1a 	bl	800a6aa <USBD_CtlError>
      break;
 800a076:	bf00      	nop
  }

  return ret;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a08e:	2300      	movs	r3, #0
 800a090:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	885b      	ldrh	r3, [r3, #2]
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	2b06      	cmp	r3, #6
 800a0a6:	f200 8128 	bhi.w	800a2fa <USBD_GetDescriptor+0x276>
 800a0aa:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <USBD_GetDescriptor+0x2c>)
 800a0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b0:	0800a0cd 	.word	0x0800a0cd
 800a0b4:	0800a0e5 	.word	0x0800a0e5
 800a0b8:	0800a125 	.word	0x0800a125
 800a0bc:	0800a2fb 	.word	0x0800a2fb
 800a0c0:	0800a2fb 	.word	0x0800a2fb
 800a0c4:	0800a29b 	.word	0x0800a29b
 800a0c8:	0800a2c7 	.word	0x0800a2c7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	7c12      	ldrb	r2, [r2, #16]
 800a0d8:	f107 0108 	add.w	r1, r7, #8
 800a0dc:	4610      	mov	r0, r2
 800a0de:	4798      	blx	r3
 800a0e0:	60f8      	str	r0, [r7, #12]
      break;
 800a0e2:	e112      	b.n	800a30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7c1b      	ldrb	r3, [r3, #16]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10d      	bne.n	800a108 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f4:	f107 0208 	add.w	r2, r7, #8
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	4798      	blx	r3
 800a0fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	2202      	movs	r2, #2
 800a104:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a106:	e100      	b.n	800a30a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	f107 0208 	add.w	r2, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	3301      	adds	r3, #1
 800a11e:	2202      	movs	r2, #2
 800a120:	701a      	strb	r2, [r3, #0]
      break;
 800a122:	e0f2      	b.n	800a30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	885b      	ldrh	r3, [r3, #2]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b05      	cmp	r3, #5
 800a12c:	f200 80ac 	bhi.w	800a288 <USBD_GetDescriptor+0x204>
 800a130:	a201      	add	r2, pc, #4	; (adr r2, 800a138 <USBD_GetDescriptor+0xb4>)
 800a132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a136:	bf00      	nop
 800a138:	0800a151 	.word	0x0800a151
 800a13c:	0800a185 	.word	0x0800a185
 800a140:	0800a1b9 	.word	0x0800a1b9
 800a144:	0800a1ed 	.word	0x0800a1ed
 800a148:	0800a221 	.word	0x0800a221
 800a14c:	0800a255 	.word	0x0800a255
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	7c12      	ldrb	r2, [r2, #16]
 800a168:	f107 0108 	add.w	r1, r7, #8
 800a16c:	4610      	mov	r0, r2
 800a16e:	4798      	blx	r3
 800a170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a172:	e091      	b.n	800a298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a174:	6839      	ldr	r1, [r7, #0]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fa97 	bl	800a6aa <USBD_CtlError>
            err++;
 800a17c:	7afb      	ldrb	r3, [r7, #11]
 800a17e:	3301      	adds	r3, #1
 800a180:	72fb      	strb	r3, [r7, #11]
          break;
 800a182:	e089      	b.n	800a298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7c12      	ldrb	r2, [r2, #16]
 800a19c:	f107 0108 	add.w	r1, r7, #8
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	4798      	blx	r3
 800a1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1a6:	e077      	b.n	800a298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa7d 	bl	800a6aa <USBD_CtlError>
            err++;
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1b6:	e06f      	b.n	800a298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00b      	beq.n	800a1dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	7c12      	ldrb	r2, [r2, #16]
 800a1d0:	f107 0108 	add.w	r1, r7, #8
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	4798      	blx	r3
 800a1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1da:	e05d      	b.n	800a298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1dc:	6839      	ldr	r1, [r7, #0]
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fa63 	bl	800a6aa <USBD_CtlError>
            err++;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1ea:	e055      	b.n	800a298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7c12      	ldrb	r2, [r2, #16]
 800a204:	f107 0108 	add.w	r1, r7, #8
 800a208:	4610      	mov	r0, r2
 800a20a:	4798      	blx	r3
 800a20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20e:	e043      	b.n	800a298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa49 	bl	800a6aa <USBD_CtlError>
            err++;
 800a218:	7afb      	ldrb	r3, [r7, #11]
 800a21a:	3301      	adds	r3, #1
 800a21c:	72fb      	strb	r3, [r7, #11]
          break;
 800a21e:	e03b      	b.n	800a298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	7c12      	ldrb	r2, [r2, #16]
 800a238:	f107 0108 	add.w	r1, r7, #8
 800a23c:	4610      	mov	r0, r2
 800a23e:	4798      	blx	r3
 800a240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a242:	e029      	b.n	800a298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 fa2f 	bl	800a6aa <USBD_CtlError>
            err++;
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	3301      	adds	r3, #1
 800a250:	72fb      	strb	r3, [r7, #11]
          break;
 800a252:	e021      	b.n	800a298 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	7c12      	ldrb	r2, [r2, #16]
 800a26c:	f107 0108 	add.w	r1, r7, #8
 800a270:	4610      	mov	r0, r2
 800a272:	4798      	blx	r3
 800a274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a276:	e00f      	b.n	800a298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 fa15 	bl	800a6aa <USBD_CtlError>
            err++;
 800a280:	7afb      	ldrb	r3, [r7, #11]
 800a282:	3301      	adds	r3, #1
 800a284:	72fb      	strb	r3, [r7, #11]
          break;
 800a286:	e007      	b.n	800a298 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa0d 	bl	800a6aa <USBD_CtlError>
          err++;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	3301      	adds	r3, #1
 800a294:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a296:	e038      	b.n	800a30a <USBD_GetDescriptor+0x286>
 800a298:	e037      	b.n	800a30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7c1b      	ldrb	r3, [r3, #16]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d109      	bne.n	800a2b6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2aa:	f107 0208 	add.w	r2, r7, #8
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	4798      	blx	r3
 800a2b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2b4:	e029      	b.n	800a30a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f9f6 	bl	800a6aa <USBD_CtlError>
        err++;
 800a2be:	7afb      	ldrb	r3, [r7, #11]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a2c4:	e021      	b.n	800a30a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	7c1b      	ldrb	r3, [r3, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10d      	bne.n	800a2ea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d6:	f107 0208 	add.w	r2, r7, #8
 800a2da:	4610      	mov	r0, r2
 800a2dc:	4798      	blx	r3
 800a2de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	2207      	movs	r2, #7
 800a2e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2e8:	e00f      	b.n	800a30a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f9dc 	bl	800a6aa <USBD_CtlError>
        err++;
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2f8:	e007      	b.n	800a30a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f9d4 	bl	800a6aa <USBD_CtlError>
      err++;
 800a302:	7afb      	ldrb	r3, [r7, #11]
 800a304:	3301      	adds	r3, #1
 800a306:	72fb      	strb	r3, [r7, #11]
      break;
 800a308:	bf00      	nop
  }

  if (err != 0U)
 800a30a:	7afb      	ldrb	r3, [r7, #11]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d11c      	bne.n	800a34a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a310:	893b      	ldrh	r3, [r7, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d011      	beq.n	800a33a <USBD_GetDescriptor+0x2b6>
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	88db      	ldrh	r3, [r3, #6]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00d      	beq.n	800a33a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88da      	ldrh	r2, [r3, #6]
 800a322:	893b      	ldrh	r3, [r7, #8]
 800a324:	4293      	cmp	r3, r2
 800a326:	bf28      	it	cs
 800a328:	4613      	movcs	r3, r2
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a32e:	893b      	ldrh	r3, [r7, #8]
 800a330:	461a      	mov	r2, r3
 800a332:	68f9      	ldr	r1, [r7, #12]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fa22 	bl	800a77e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	88db      	ldrh	r3, [r3, #6]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d104      	bne.n	800a34c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa5b 	bl	800a7fe <USBD_CtlSendStatus>
 800a348:	e000      	b.n	800a34c <USBD_GetDescriptor+0x2c8>
    return;
 800a34a:	bf00      	nop
    }
  }
}
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop

0800a354 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	889b      	ldrh	r3, [r3, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d130      	bne.n	800a3c8 <USBD_SetAddress+0x74>
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	88db      	ldrh	r3, [r3, #6]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d12c      	bne.n	800a3c8 <USBD_SetAddress+0x74>
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	885b      	ldrh	r3, [r3, #2]
 800a372:	2b7f      	cmp	r3, #127	; 0x7f
 800a374:	d828      	bhi.n	800a3c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	885b      	ldrh	r3, [r3, #2]
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a388:	2b03      	cmp	r3, #3
 800a38a:	d104      	bne.n	800a396 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f98b 	bl	800a6aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a394:	e01d      	b.n	800a3d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	7bfa      	ldrb	r2, [r7, #15]
 800a39a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 fd5a 	bl	800ae5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fa28 	bl	800a7fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2202      	movs	r2, #2
 800a3b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3bc:	e009      	b.n	800a3d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c6:	e004      	b.n	800a3d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f96d 	bl	800a6aa <USBD_CtlError>
  }
}
 800a3d0:	bf00      	nop
 800a3d2:	bf00      	nop
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	885b      	ldrh	r3, [r3, #2]
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	4b41      	ldr	r3, [pc, #260]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a3ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a3f0:	4b40      	ldr	r3, [pc, #256]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d904      	bls.n	800a402 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f955 	bl	800a6aa <USBD_CtlError>
 800a400:	e075      	b.n	800a4ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a408:	2b02      	cmp	r3, #2
 800a40a:	d002      	beq.n	800a412 <USBD_SetConfig+0x36>
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	d023      	beq.n	800a458 <USBD_SetConfig+0x7c>
 800a410:	e062      	b.n	800a4d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a412:	4b38      	ldr	r3, [pc, #224]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d01a      	beq.n	800a450 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a41a:	4b36      	ldr	r3, [pc, #216]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2203      	movs	r2, #3
 800a428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a42c:	4b31      	ldr	r3, [pc, #196]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7ff f9e8 	bl	8009808 <USBD_SetClassConfig>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d104      	bne.n	800a448 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a43e:	6839      	ldr	r1, [r7, #0]
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f932 	bl	800a6aa <USBD_CtlError>
            return;
 800a446:	e052      	b.n	800a4ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9d8 	bl	800a7fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a44e:	e04e      	b.n	800a4ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f9d4 	bl	800a7fe <USBD_CtlSendStatus>
        break;
 800a456:	e04a      	b.n	800a4ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a458:	4b26      	ldr	r3, [pc, #152]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d112      	bne.n	800a486 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2202      	movs	r2, #2
 800a464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a468:	4b22      	ldr	r3, [pc, #136]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a472:	4b20      	ldr	r3, [pc, #128]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff f9e4 	bl	8009846 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f9bd 	bl	800a7fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a484:	e033      	b.n	800a4ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a486:	4b1b      	ldr	r3, [pc, #108]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	429a      	cmp	r2, r3
 800a492:	d01d      	beq.n	800a4d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff f9d2 	bl	8009846 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a4a2:	4b14      	ldr	r3, [pc, #80]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a4ac:	4b11      	ldr	r3, [pc, #68]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f7ff f9a8 	bl	8009808 <USBD_SetClassConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d104      	bne.n	800a4c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a4be:	6839      	ldr	r1, [r7, #0]
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f8f2 	bl	800a6aa <USBD_CtlError>
            return;
 800a4c6:	e012      	b.n	800a4ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f998 	bl	800a7fe <USBD_CtlSendStatus>
        break;
 800a4ce:	e00e      	b.n	800a4ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f994 	bl	800a7fe <USBD_CtlSendStatus>
        break;
 800a4d6:	e00a      	b.n	800a4ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f8e5 	bl	800a6aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <USBD_SetConfig+0x118>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff f9ad 	bl	8009846 <USBD_ClrClassConfig>
        break;
 800a4ec:	bf00      	nop
    }
  }
}
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	2000059c 	.word	0x2000059c

0800a4f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	88db      	ldrh	r3, [r3, #6]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d004      	beq.n	800a514 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a50a:	6839      	ldr	r1, [r7, #0]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f8cc 	bl	800a6aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a512:	e022      	b.n	800a55a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	dc02      	bgt.n	800a524 <USBD_GetConfig+0x2c>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	dc03      	bgt.n	800a52a <USBD_GetConfig+0x32>
 800a522:	e015      	b.n	800a550 <USBD_GetConfig+0x58>
 800a524:	2b03      	cmp	r3, #3
 800a526:	d00b      	beq.n	800a540 <USBD_GetConfig+0x48>
 800a528:	e012      	b.n	800a550 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3308      	adds	r3, #8
 800a534:	2201      	movs	r2, #1
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f920 	bl	800a77e <USBD_CtlSendData>
        break;
 800a53e:	e00c      	b.n	800a55a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3304      	adds	r3, #4
 800a544:	2201      	movs	r2, #1
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f918 	bl	800a77e <USBD_CtlSendData>
        break;
 800a54e:	e004      	b.n	800a55a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 f8a9 	bl	800a6aa <USBD_CtlError>
        break;
 800a558:	bf00      	nop
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a572:	3b01      	subs	r3, #1
 800a574:	2b02      	cmp	r3, #2
 800a576:	d81e      	bhi.n	800a5b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	88db      	ldrh	r3, [r3, #6]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d004      	beq.n	800a58a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a580:	6839      	ldr	r1, [r7, #0]
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f891 	bl	800a6aa <USBD_CtlError>
        break;
 800a588:	e01a      	b.n	800a5c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a596:	2b00      	cmp	r3, #0
 800a598:	d005      	beq.n	800a5a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f043 0202 	orr.w	r2, r3, #2
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	330c      	adds	r3, #12
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f8e5 	bl	800a77e <USBD_CtlSendData>
      break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f876 	bl	800a6aa <USBD_CtlError>
      break;
 800a5be:	bf00      	nop
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	885b      	ldrh	r3, [r3, #2]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d106      	bne.n	800a5e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f90b 	bl	800a7fe <USBD_CtlSendStatus>
  }
}
 800a5e8:	bf00      	nop
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a600:	3b01      	subs	r3, #1
 800a602:	2b02      	cmp	r3, #2
 800a604:	d80b      	bhi.n	800a61e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	885b      	ldrh	r3, [r3, #2]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d10c      	bne.n	800a628 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f8f1 	bl	800a7fe <USBD_CtlSendStatus>
      }
      break;
 800a61c:	e004      	b.n	800a628 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f842 	bl	800a6aa <USBD_CtlError>
      break;
 800a626:	e000      	b.n	800a62a <USBD_ClrFeature+0x3a>
      break;
 800a628:	bf00      	nop
  }
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}

0800a632 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a632:	b480      	push	{r7}
 800a634:	b083      	sub	sp, #12
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781a      	ldrb	r2, [r3, #0]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	785a      	ldrb	r2, [r3, #1]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	3302      	adds	r3, #2
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	b29a      	uxth	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	3303      	adds	r3, #3
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	021b      	lsls	r3, r3, #8
 800a65e:	b29b      	uxth	r3, r3
 800a660:	4413      	add	r3, r2
 800a662:	b29a      	uxth	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	3304      	adds	r3, #4
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b29a      	uxth	r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	3305      	adds	r3, #5
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	021b      	lsls	r3, r3, #8
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4413      	add	r3, r2
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	3306      	adds	r3, #6
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	3307      	adds	r3, #7
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	021b      	lsls	r3, r3, #8
 800a696:	b29b      	uxth	r3, r3
 800a698:	4413      	add	r3, r2
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	80da      	strh	r2, [r3, #6]

}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bc80      	pop	{r7}
 800a6a8:	4770      	bx	lr

0800a6aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b082      	sub	sp, #8
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a6b4:	2180      	movs	r1, #128	; 0x80
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fb66 	bl	800ad88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a6bc:	2100      	movs	r1, #0
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fb62 	bl	800ad88 <USBD_LL_StallEP>
}
 800a6c4:	bf00      	nop
 800a6c6:	3708      	adds	r7, #8
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d032      	beq.n	800a748 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 f834 	bl	800a750 <USBD_GetLen>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	1c5a      	adds	r2, r3, #1
 800a6fa:	75fa      	strb	r2, [r7, #23]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	4413      	add	r3, r2
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	7812      	ldrb	r2, [r2, #0]
 800a706:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	1c5a      	adds	r2, r3, #1
 800a70c:	75fa      	strb	r2, [r7, #23]
 800a70e:	461a      	mov	r2, r3
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4413      	add	r3, r2
 800a714:	2203      	movs	r2, #3
 800a716:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a718:	e012      	b.n	800a740 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	60fa      	str	r2, [r7, #12]
 800a720:	7dfa      	ldrb	r2, [r7, #23]
 800a722:	1c51      	adds	r1, r2, #1
 800a724:	75f9      	strb	r1, [r7, #23]
 800a726:	4611      	mov	r1, r2
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	440a      	add	r2, r1
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a730:	7dfb      	ldrb	r3, [r7, #23]
 800a732:	1c5a      	adds	r2, r3, #1
 800a734:	75fa      	strb	r2, [r7, #23]
 800a736:	461a      	mov	r2, r3
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4413      	add	r3, r2
 800a73c:	2200      	movs	r2, #0
 800a73e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e8      	bne.n	800a71a <USBD_GetString+0x4e>
    }
  }
}
 800a748:	bf00      	nop
 800a74a:	3718      	adds	r7, #24
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a75c:	e005      	b.n	800a76a <USBD_GetLen+0x1a>
  {
    len++;
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	3301      	adds	r3, #1
 800a762:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3301      	adds	r3, #1
 800a768:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1f5      	bne.n	800a75e <USBD_GetLen+0xe>
  }

  return len;
 800a772:	7bfb      	ldrb	r3, [r7, #15]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr

0800a77e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	60b9      	str	r1, [r7, #8]
 800a788:	4613      	mov	r3, r2
 800a78a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2202      	movs	r2, #2
 800a790:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a794:	88fa      	ldrh	r2, [r7, #6]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a79a:	88fa      	ldrh	r2, [r7, #6]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fb77 	bl	800ae9a <USBD_LL_Transmit>

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a7c4:	88fb      	ldrh	r3, [r7, #6]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fb65 	bl	800ae9a <USBD_LL_Transmit>

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	60f8      	str	r0, [r7, #12]
 800a7e2:	60b9      	str	r1, [r7, #8]
 800a7e4:	4613      	mov	r3, r2
 800a7e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7e8:	88fb      	ldrh	r3, [r7, #6]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 fb76 	bl	800aee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2204      	movs	r2, #4
 800a80a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a80e:	2300      	movs	r3, #0
 800a810:	2200      	movs	r2, #0
 800a812:	2100      	movs	r1, #0
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 fb40 	bl	800ae9a <USBD_LL_Transmit>

  return USBD_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2205      	movs	r2, #5
 800a830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a834:	2300      	movs	r3, #0
 800a836:	2200      	movs	r2, #0
 800a838:	2100      	movs	r1, #0
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 fb50 	bl	800aee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a850:	2200      	movs	r2, #0
 800a852:	490e      	ldr	r1, [pc, #56]	; (800a88c <MX_USB_DEVICE_Init+0x40>)
 800a854:	480e      	ldr	r0, [pc, #56]	; (800a890 <MX_USB_DEVICE_Init+0x44>)
 800a856:	f7fe ff7d 	bl	8009754 <USBD_Init>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a860:	f7f7 fd3c 	bl	80022dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a864:	490b      	ldr	r1, [pc, #44]	; (800a894 <MX_USB_DEVICE_Init+0x48>)
 800a866:	480a      	ldr	r0, [pc, #40]	; (800a890 <MX_USB_DEVICE_Init+0x44>)
 800a868:	f7fe ff9f 	bl	80097aa <USBD_RegisterClass>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a872:	f7f7 fd33 	bl	80022dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a876:	4806      	ldr	r0, [pc, #24]	; (800a890 <MX_USB_DEVICE_Init+0x44>)
 800a878:	f7fe ffb0 	bl	80097dc <USBD_Start>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a882:	f7f7 fd2b 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a886:	bf00      	nop
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	200000f0 	.word	0x200000f0
 800a890:	200005a0 	.word	0x200005a0
 800a894:	2000001c 	.word	0x2000001c

0800a898 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2212      	movs	r2, #18
 800a8a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	; (800a8b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bc80      	pop	{r7}
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	2000010c 	.word	0x2000010c

0800a8bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	6039      	str	r1, [r7, #0]
 800a8c6:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2204      	movs	r2, #4
 800a8cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a8ce:	4b03      	ldr	r3, [pc, #12]	; (800a8dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	20000120 	.word	0x20000120

0800a8e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d105      	bne.n	800a8fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	4907      	ldr	r1, [pc, #28]	; (800a914 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8f6:	4808      	ldr	r0, [pc, #32]	; (800a918 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8f8:	f7ff fee8 	bl	800a6cc <USBD_GetString>
 800a8fc:	e004      	b.n	800a908 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	4904      	ldr	r1, [pc, #16]	; (800a914 <USBD_FS_ProductStrDescriptor+0x34>)
 800a902:	4805      	ldr	r0, [pc, #20]	; (800a918 <USBD_FS_ProductStrDescriptor+0x38>)
 800a904:	f7ff fee2 	bl	800a6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a908:	4b02      	ldr	r3, [pc, #8]	; (800a914 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20000864 	.word	0x20000864
 800a918:	0800e0c4 	.word	0x0800e0c4

0800a91c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	6039      	str	r1, [r7, #0]
 800a926:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	4904      	ldr	r1, [pc, #16]	; (800a93c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a92c:	4804      	ldr	r0, [pc, #16]	; (800a940 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a92e:	f7ff fecd 	bl	800a6cc <USBD_GetString>
  return USBD_StrDesc;
 800a932:	4b02      	ldr	r3, [pc, #8]	; (800a93c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	20000864 	.word	0x20000864
 800a940:	0800e0d8 	.word	0x0800e0d8

0800a944 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	6039      	str	r1, [r7, #0]
 800a94e:	71fb      	strb	r3, [r7, #7]
  *length = USB_SIZ_STRING_SERIAL;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	221a      	movs	r2, #26
 800a954:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a956:	f000 f843 	bl	800a9e0 <Get_SerialNum>

  return (uint8_t *) USBD_StringSerial;
 800a95a:	4b02      	ldr	r3, [pc, #8]	; (800a964 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000124 	.word	0x20000124

0800a968 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	4603      	mov	r3, r0
 800a970:	6039      	str	r1, [r7, #0]
 800a972:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a974:	79fb      	ldrb	r3, [r7, #7]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d105      	bne.n	800a986 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a97a:	683a      	ldr	r2, [r7, #0]
 800a97c:	4907      	ldr	r1, [pc, #28]	; (800a99c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a97e:	4808      	ldr	r0, [pc, #32]	; (800a9a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a980:	f7ff fea4 	bl	800a6cc <USBD_GetString>
 800a984:	e004      	b.n	800a990 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4904      	ldr	r1, [pc, #16]	; (800a99c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a98a:	4805      	ldr	r0, [pc, #20]	; (800a9a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a98c:	f7ff fe9e 	bl	800a6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a990:	4b02      	ldr	r3, [pc, #8]	; (800a99c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20000864 	.word	0x20000864
 800a9a0:	0800e0e8 	.word	0x0800e0e8

0800a9a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	6039      	str	r1, [r7, #0]
 800a9ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d105      	bne.n	800a9c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	4907      	ldr	r1, [pc, #28]	; (800a9d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9ba:	4808      	ldr	r0, [pc, #32]	; (800a9dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9bc:	f7ff fe86 	bl	800a6cc <USBD_GetString>
 800a9c0:	e004      	b.n	800a9cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4904      	ldr	r1, [pc, #16]	; (800a9d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a9c6:	4805      	ldr	r0, [pc, #20]	; (800a9dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a9c8:	f7ff fe80 	bl	800a6cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	20000864 	.word	0x20000864
 800a9dc:	0800e0f4 	.word	0x0800e0f4

0800a9e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <Get_SerialNum+0x44>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <Get_SerialNum+0x48>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9f2:	4b0e      	ldr	r3, [pc, #56]	; (800aa2c <Get_SerialNum+0x4c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d009      	beq.n	800aa1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa06:	2208      	movs	r2, #8
 800aa08:	4909      	ldr	r1, [pc, #36]	; (800aa30 <Get_SerialNum+0x50>)
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f814 	bl	800aa38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa10:	2204      	movs	r2, #4
 800aa12:	4908      	ldr	r1, [pc, #32]	; (800aa34 <Get_SerialNum+0x54>)
 800aa14:	68b8      	ldr	r0, [r7, #8]
 800aa16:	f000 f80f 	bl	800aa38 <IntToUnicode>
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	1ffff7e8 	.word	0x1ffff7e8
 800aa28:	1ffff7ec 	.word	0x1ffff7ec
 800aa2c:	1ffff7f0 	.word	0x1ffff7f0
 800aa30:	20000126 	.word	0x20000126
 800aa34:	20000136 	.word	0x20000136

0800aa38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b087      	sub	sp, #28
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4613      	mov	r3, r2
 800aa44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
 800aa4e:	e027      	b.n	800aaa0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	0f1b      	lsrs	r3, r3, #28
 800aa54:	2b09      	cmp	r3, #9
 800aa56:	d80b      	bhi.n	800aa70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	0f1b      	lsrs	r3, r3, #28
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	7dfb      	ldrb	r3, [r7, #23]
 800aa60:	005b      	lsls	r3, r3, #1
 800aa62:	4619      	mov	r1, r3
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	440b      	add	r3, r1
 800aa68:	3230      	adds	r2, #48	; 0x30
 800aa6a:	b2d2      	uxtb	r2, r2
 800aa6c:	701a      	strb	r2, [r3, #0]
 800aa6e:	e00a      	b.n	800aa86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	0f1b      	lsrs	r3, r3, #28
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	005b      	lsls	r3, r3, #1
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	440b      	add	r3, r1
 800aa80:	3237      	adds	r2, #55	; 0x37
 800aa82:	b2d2      	uxtb	r2, r2
 800aa84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	011b      	lsls	r3, r3, #4
 800aa8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	005b      	lsls	r3, r3, #1
 800aa90:	3301      	adds	r3, #1
 800aa92:	68ba      	ldr	r2, [r7, #8]
 800aa94:	4413      	add	r3, r2
 800aa96:	2200      	movs	r2, #0
 800aa98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
 800aaa0:	7dfa      	ldrb	r2, [r7, #23]
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d3d3      	bcc.n	800aa50 <IntToUnicode+0x18>
  }
}
 800aaa8:	bf00      	nop
 800aaaa:	bf00      	nop
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bc80      	pop	{r7}
 800aab2:	4770      	bx	lr

0800aab4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a0d      	ldr	r2, [pc, #52]	; (800aaf8 <HAL_PCD_MspInit+0x44>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d113      	bne.n	800aaee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aac6:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <HAL_PCD_MspInit+0x48>)
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	4a0c      	ldr	r2, [pc, #48]	; (800aafc <HAL_PCD_MspInit+0x48>)
 800aacc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aad0:	61d3      	str	r3, [r2, #28]
 800aad2:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <HAL_PCD_MspInit+0x48>)
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800aade:	2200      	movs	r2, #0
 800aae0:	2105      	movs	r1, #5
 800aae2:	2014      	movs	r0, #20
 800aae4:	f7f8 fb7b 	bl	80031de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aae8:	2014      	movs	r0, #20
 800aaea:	f7f8 fb94 	bl	8003216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aaee:	bf00      	nop
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	40005c00 	.word	0x40005c00
 800aafc:	40021000 	.word	0x40021000

0800ab00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ab14:	4619      	mov	r1, r3
 800ab16:	4610      	mov	r0, r2
 800ab18:	f7fe fea8 	bl	800986c <USBD_LL_SetupStage>
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ab36:	78fa      	ldrb	r2, [r7, #3]
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	00db      	lsls	r3, r3, #3
 800ab42:	440b      	add	r3, r1
 800ab44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	78fb      	ldrb	r3, [r7, #3]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	f7fe feda 	bl	8009906 <USBD_LL_DataOutStage>
}
 800ab52:	bf00      	nop
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	460b      	mov	r3, r1
 800ab64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	440b      	add	r3, r1
 800ab7a:	333c      	adds	r3, #60	; 0x3c
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	78fb      	ldrb	r3, [r7, #3]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f7fe ff31 	bl	80099e8 <USBD_LL_DataInStage>
}
 800ab86:	bf00      	nop
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7ff f841 	bl	8009c24 <USBD_LL_SOF>
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abb2:	2301      	movs	r3, #1
 800abb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	d001      	beq.n	800abc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abbe:	f7f7 fb8d 	bl	80022dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800abc8:	7bfa      	ldrb	r2, [r7, #15]
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fe fff1 	bl	8009bb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe ffaa 	bl	8009b32 <USBD_LL_Reset>
}
 800abde:	bf00      	nop
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe ffeb 	bl	8009bd2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	699b      	ldr	r3, [r3, #24]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d005      	beq.n	800ac10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac04:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <HAL_PCD_SuspendCallback+0x30>)
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	4a03      	ldr	r2, [pc, #12]	; (800ac18 <HAL_PCD_SuspendCallback+0x30>)
 800ac0a:	f043 0306 	orr.w	r3, r3, #6
 800ac0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	e000ed00 	.word	0xe000ed00

0800ac1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fe ffe5 	bl	8009bfa <USBD_LL_Resume>
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ac40:	4a1f      	ldr	r2, [pc, #124]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a1d      	ldr	r2, [pc, #116]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ac50:	4b1b      	ldr	r3, [pc, #108]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac52:	4a1c      	ldr	r2, [pc, #112]	; (800acc4 <USBD_LL_Init+0x8c>)
 800ac54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ac56:	4b1a      	ldr	r3, [pc, #104]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac58:	2208      	movs	r2, #8
 800ac5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ac5c:	4b18      	ldr	r3, [pc, #96]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac5e:	2202      	movs	r2, #2
 800ac60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ac62:	4b17      	ldr	r3, [pc, #92]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac68:	4b15      	ldr	r3, [pc, #84]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ac6e:	4b14      	ldr	r3, [pc, #80]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ac74:	4812      	ldr	r0, [pc, #72]	; (800acc0 <USBD_LL_Init+0x88>)
 800ac76:	f7f8 ffec 	bl	8003c52 <HAL_PCD_Init>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ac80:	f7f7 fb2c 	bl	80022dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac8a:	2318      	movs	r3, #24
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2100      	movs	r1, #0
 800ac90:	f7fa fcf4 	bl	800567c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac9a:	2358      	movs	r3, #88	; 0x58
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2180      	movs	r1, #128	; 0x80
 800aca0:	f7fa fcec 	bl	800567c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acae:	2200      	movs	r2, #0
 800acb0:	2181      	movs	r1, #129	; 0x81
 800acb2:	f7fa fce3 	bl	800567c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	20000a64 	.word	0x20000a64
 800acc4:	40005c00 	.word	0x40005c00

0800acc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acde:	4618      	mov	r0, r3
 800ace0:	f7f9 f8b6 	bl	8003e50 <HAL_PCD_Start>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	4618      	mov	r0, r3
 800acec:	f000 f93c 	bl	800af68 <USBD_Get_USB_Status>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	4608      	mov	r0, r1
 800ad08:	4611      	mov	r1, r2
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	70fb      	strb	r3, [r7, #3]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70bb      	strb	r3, [r7, #2]
 800ad14:	4613      	mov	r3, r2
 800ad16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad26:	78bb      	ldrb	r3, [r7, #2]
 800ad28:	883a      	ldrh	r2, [r7, #0]
 800ad2a:	78f9      	ldrb	r1, [r7, #3]
 800ad2c:	f7f9 fa0b 	bl	8004146 <HAL_PCD_EP_Open>
 800ad30:	4603      	mov	r3, r0
 800ad32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 f916 	bl	800af68 <USBD_Get_USB_Status>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b084      	sub	sp, #16
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad64:	78fa      	ldrb	r2, [r7, #3]
 800ad66:	4611      	mov	r1, r2
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7f9 fa49 	bl	8004200 <HAL_PCD_EP_Close>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 f8f7 	bl	800af68 <USBD_Get_USB_Status>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad94:	2300      	movs	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ada2:	78fa      	ldrb	r2, [r7, #3]
 800ada4:	4611      	mov	r1, r2
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7f9 fada 	bl	8004360 <HAL_PCD_EP_SetStall>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f8d8 	bl	800af68 <USBD_Get_USB_Status>
 800adb8:	4603      	mov	r3, r0
 800adba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ade0:	78fa      	ldrb	r2, [r7, #3]
 800ade2:	4611      	mov	r1, r2
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7f9 fb1b 	bl	8004420 <HAL_PCD_EP_ClrStall>
 800adea:	4603      	mov	r3, r0
 800adec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 f8b9 	bl	800af68 <USBD_Get_USB_Status>
 800adf6:	4603      	mov	r3, r0
 800adf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	da0c      	bge.n	800ae3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	00db      	lsls	r3, r3, #3
 800ae32:	440b      	add	r3, r1
 800ae34:	3302      	adds	r3, #2
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	e00b      	b.n	800ae52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae40:	68f9      	ldr	r1, [r7, #12]
 800ae42:	4613      	mov	r3, r2
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	440b      	add	r3, r1
 800ae4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ae50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr

0800ae5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae76:	78fa      	ldrb	r2, [r7, #3]
 800ae78:	4611      	mov	r1, r2
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7f9 f93e 	bl	80040fc <HAL_PCD_SetAddress>
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae84:	7bfb      	ldrb	r3, [r7, #15]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f000 f86e 	bl	800af68 <USBD_Get_USB_Status>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b086      	sub	sp, #24
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	461a      	mov	r2, r3
 800aea6:	460b      	mov	r3, r1
 800aea8:	72fb      	strb	r3, [r7, #11]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aebc:	893b      	ldrh	r3, [r7, #8]
 800aebe:	7af9      	ldrb	r1, [r7, #11]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	f7f9 fa16 	bl	80042f2 <HAL_PCD_EP_Transmit>
 800aec6:	4603      	mov	r3, r0
 800aec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 f84b 	bl	800af68 <USBD_Get_USB_Status>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aed6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	461a      	mov	r2, r3
 800aeec:	460b      	mov	r3, r1
 800aeee:	72fb      	strb	r3, [r7, #11]
 800aef0:	4613      	mov	r3, r2
 800aef2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800af02:	893b      	ldrh	r3, [r7, #8]
 800af04:	7af9      	ldrb	r1, [r7, #11]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	f7f9 f9c2 	bl	8004290 <HAL_PCD_EP_Receive>
 800af0c:	4603      	mov	r3, r0
 800af0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af10:	7dfb      	ldrb	r3, [r7, #23]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 f828 	bl	800af68 <USBD_Get_USB_Status>
 800af18:	4603      	mov	r3, r0
 800af1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af30:	4b02      	ldr	r3, [pc, #8]	; (800af3c <USBD_static_malloc+0x14>)
}
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	bc80      	pop	{r7}
 800af3a:	4770      	bx	lr
 800af3c:	20000d54 	.word	0x20000d54

0800af40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]

}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bc80      	pop	{r7}
 800af50:	4770      	bx	lr

0800af52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af52:	b480      	push	{r7}
 800af54:	b083      	sub	sp, #12
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	460b      	mov	r3, r1
 800af5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800af5e:	bf00      	nop
 800af60:	370c      	adds	r7, #12
 800af62:	46bd      	mov	sp, r7
 800af64:	bc80      	pop	{r7}
 800af66:	4770      	bx	lr

0800af68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d817      	bhi.n	800afac <USBD_Get_USB_Status+0x44>
 800af7c:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <USBD_Get_USB_Status+0x1c>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800af95 	.word	0x0800af95
 800af88:	0800af9b 	.word	0x0800af9b
 800af8c:	0800afa1 	.word	0x0800afa1
 800af90:	0800afa7 	.word	0x0800afa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af94:	2300      	movs	r3, #0
 800af96:	73fb      	strb	r3, [r7, #15]
    break;
 800af98:	e00b      	b.n	800afb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af9a:	2302      	movs	r3, #2
 800af9c:	73fb      	strb	r3, [r7, #15]
    break;
 800af9e:	e008      	b.n	800afb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afa0:	2301      	movs	r3, #1
 800afa2:	73fb      	strb	r3, [r7, #15]
    break;
 800afa4:	e005      	b.n	800afb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afa6:	2302      	movs	r3, #2
 800afa8:	73fb      	strb	r3, [r7, #15]
    break;
 800afaa:	e002      	b.n	800afb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afac:	2302      	movs	r3, #2
 800afae:	73fb      	strb	r3, [r7, #15]
    break;
 800afb0:	bf00      	nop
  }
  return usb_status;
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	bc80      	pop	{r7}
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop

0800afc0 <__errno>:
 800afc0:	4b01      	ldr	r3, [pc, #4]	; (800afc8 <__errno+0x8>)
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	20000140 	.word	0x20000140

0800afcc <__libc_init_array>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	2600      	movs	r6, #0
 800afd0:	4d0c      	ldr	r5, [pc, #48]	; (800b004 <__libc_init_array+0x38>)
 800afd2:	4c0d      	ldr	r4, [pc, #52]	; (800b008 <__libc_init_array+0x3c>)
 800afd4:	1b64      	subs	r4, r4, r5
 800afd6:	10a4      	asrs	r4, r4, #2
 800afd8:	42a6      	cmp	r6, r4
 800afda:	d109      	bne.n	800aff0 <__libc_init_array+0x24>
 800afdc:	f003 f832 	bl	800e044 <_init>
 800afe0:	2600      	movs	r6, #0
 800afe2:	4d0a      	ldr	r5, [pc, #40]	; (800b00c <__libc_init_array+0x40>)
 800afe4:	4c0a      	ldr	r4, [pc, #40]	; (800b010 <__libc_init_array+0x44>)
 800afe6:	1b64      	subs	r4, r4, r5
 800afe8:	10a4      	asrs	r4, r4, #2
 800afea:	42a6      	cmp	r6, r4
 800afec:	d105      	bne.n	800affa <__libc_init_array+0x2e>
 800afee:	bd70      	pop	{r4, r5, r6, pc}
 800aff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff4:	4798      	blx	r3
 800aff6:	3601      	adds	r6, #1
 800aff8:	e7ee      	b.n	800afd8 <__libc_init_array+0xc>
 800affa:	f855 3b04 	ldr.w	r3, [r5], #4
 800affe:	4798      	blx	r3
 800b000:	3601      	adds	r6, #1
 800b002:	e7f2      	b.n	800afea <__libc_init_array+0x1e>
 800b004:	0800eaf4 	.word	0x0800eaf4
 800b008:	0800eaf4 	.word	0x0800eaf4
 800b00c:	0800eaf4 	.word	0x0800eaf4
 800b010:	0800eaf8 	.word	0x0800eaf8

0800b014 <malloc>:
 800b014:	4b02      	ldr	r3, [pc, #8]	; (800b020 <malloc+0xc>)
 800b016:	4601      	mov	r1, r0
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	f000 b87b 	b.w	800b114 <_malloc_r>
 800b01e:	bf00      	nop
 800b020:	20000140 	.word	0x20000140

0800b024 <free>:
 800b024:	4b02      	ldr	r3, [pc, #8]	; (800b030 <free+0xc>)
 800b026:	4601      	mov	r1, r0
 800b028:	6818      	ldr	r0, [r3, #0]
 800b02a:	f000 b80b 	b.w	800b044 <_free_r>
 800b02e:	bf00      	nop
 800b030:	20000140 	.word	0x20000140

0800b034 <memset>:
 800b034:	4603      	mov	r3, r0
 800b036:	4402      	add	r2, r0
 800b038:	4293      	cmp	r3, r2
 800b03a:	d100      	bne.n	800b03e <memset+0xa>
 800b03c:	4770      	bx	lr
 800b03e:	f803 1b01 	strb.w	r1, [r3], #1
 800b042:	e7f9      	b.n	800b038 <memset+0x4>

0800b044 <_free_r>:
 800b044:	b538      	push	{r3, r4, r5, lr}
 800b046:	4605      	mov	r5, r0
 800b048:	2900      	cmp	r1, #0
 800b04a:	d040      	beq.n	800b0ce <_free_r+0x8a>
 800b04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b050:	1f0c      	subs	r4, r1, #4
 800b052:	2b00      	cmp	r3, #0
 800b054:	bfb8      	it	lt
 800b056:	18e4      	addlt	r4, r4, r3
 800b058:	f001 fc14 	bl	800c884 <__malloc_lock>
 800b05c:	4a1c      	ldr	r2, [pc, #112]	; (800b0d0 <_free_r+0x8c>)
 800b05e:	6813      	ldr	r3, [r2, #0]
 800b060:	b933      	cbnz	r3, 800b070 <_free_r+0x2c>
 800b062:	6063      	str	r3, [r4, #4]
 800b064:	6014      	str	r4, [r2, #0]
 800b066:	4628      	mov	r0, r5
 800b068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b06c:	f001 bc10 	b.w	800c890 <__malloc_unlock>
 800b070:	42a3      	cmp	r3, r4
 800b072:	d908      	bls.n	800b086 <_free_r+0x42>
 800b074:	6820      	ldr	r0, [r4, #0]
 800b076:	1821      	adds	r1, r4, r0
 800b078:	428b      	cmp	r3, r1
 800b07a:	bf01      	itttt	eq
 800b07c:	6819      	ldreq	r1, [r3, #0]
 800b07e:	685b      	ldreq	r3, [r3, #4]
 800b080:	1809      	addeq	r1, r1, r0
 800b082:	6021      	streq	r1, [r4, #0]
 800b084:	e7ed      	b.n	800b062 <_free_r+0x1e>
 800b086:	461a      	mov	r2, r3
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	b10b      	cbz	r3, 800b090 <_free_r+0x4c>
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	d9fa      	bls.n	800b086 <_free_r+0x42>
 800b090:	6811      	ldr	r1, [r2, #0]
 800b092:	1850      	adds	r0, r2, r1
 800b094:	42a0      	cmp	r0, r4
 800b096:	d10b      	bne.n	800b0b0 <_free_r+0x6c>
 800b098:	6820      	ldr	r0, [r4, #0]
 800b09a:	4401      	add	r1, r0
 800b09c:	1850      	adds	r0, r2, r1
 800b09e:	4283      	cmp	r3, r0
 800b0a0:	6011      	str	r1, [r2, #0]
 800b0a2:	d1e0      	bne.n	800b066 <_free_r+0x22>
 800b0a4:	6818      	ldr	r0, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	4401      	add	r1, r0
 800b0aa:	6011      	str	r1, [r2, #0]
 800b0ac:	6053      	str	r3, [r2, #4]
 800b0ae:	e7da      	b.n	800b066 <_free_r+0x22>
 800b0b0:	d902      	bls.n	800b0b8 <_free_r+0x74>
 800b0b2:	230c      	movs	r3, #12
 800b0b4:	602b      	str	r3, [r5, #0]
 800b0b6:	e7d6      	b.n	800b066 <_free_r+0x22>
 800b0b8:	6820      	ldr	r0, [r4, #0]
 800b0ba:	1821      	adds	r1, r4, r0
 800b0bc:	428b      	cmp	r3, r1
 800b0be:	bf01      	itttt	eq
 800b0c0:	6819      	ldreq	r1, [r3, #0]
 800b0c2:	685b      	ldreq	r3, [r3, #4]
 800b0c4:	1809      	addeq	r1, r1, r0
 800b0c6:	6021      	streq	r1, [r4, #0]
 800b0c8:	6063      	str	r3, [r4, #4]
 800b0ca:	6054      	str	r4, [r2, #4]
 800b0cc:	e7cb      	b.n	800b066 <_free_r+0x22>
 800b0ce:	bd38      	pop	{r3, r4, r5, pc}
 800b0d0:	20000d68 	.word	0x20000d68

0800b0d4 <sbrk_aligned>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	4e0e      	ldr	r6, [pc, #56]	; (800b110 <sbrk_aligned+0x3c>)
 800b0d8:	460c      	mov	r4, r1
 800b0da:	6831      	ldr	r1, [r6, #0]
 800b0dc:	4605      	mov	r5, r0
 800b0de:	b911      	cbnz	r1, 800b0e6 <sbrk_aligned+0x12>
 800b0e0:	f000 fcec 	bl	800babc <_sbrk_r>
 800b0e4:	6030      	str	r0, [r6, #0]
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f000 fce7 	bl	800babc <_sbrk_r>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d00a      	beq.n	800b108 <sbrk_aligned+0x34>
 800b0f2:	1cc4      	adds	r4, r0, #3
 800b0f4:	f024 0403 	bic.w	r4, r4, #3
 800b0f8:	42a0      	cmp	r0, r4
 800b0fa:	d007      	beq.n	800b10c <sbrk_aligned+0x38>
 800b0fc:	1a21      	subs	r1, r4, r0
 800b0fe:	4628      	mov	r0, r5
 800b100:	f000 fcdc 	bl	800babc <_sbrk_r>
 800b104:	3001      	adds	r0, #1
 800b106:	d101      	bne.n	800b10c <sbrk_aligned+0x38>
 800b108:	f04f 34ff 	mov.w	r4, #4294967295
 800b10c:	4620      	mov	r0, r4
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	20000d6c 	.word	0x20000d6c

0800b114 <_malloc_r>:
 800b114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b118:	1ccd      	adds	r5, r1, #3
 800b11a:	f025 0503 	bic.w	r5, r5, #3
 800b11e:	3508      	adds	r5, #8
 800b120:	2d0c      	cmp	r5, #12
 800b122:	bf38      	it	cc
 800b124:	250c      	movcc	r5, #12
 800b126:	2d00      	cmp	r5, #0
 800b128:	4607      	mov	r7, r0
 800b12a:	db01      	blt.n	800b130 <_malloc_r+0x1c>
 800b12c:	42a9      	cmp	r1, r5
 800b12e:	d905      	bls.n	800b13c <_malloc_r+0x28>
 800b130:	230c      	movs	r3, #12
 800b132:	2600      	movs	r6, #0
 800b134:	603b      	str	r3, [r7, #0]
 800b136:	4630      	mov	r0, r6
 800b138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13c:	4e2e      	ldr	r6, [pc, #184]	; (800b1f8 <_malloc_r+0xe4>)
 800b13e:	f001 fba1 	bl	800c884 <__malloc_lock>
 800b142:	6833      	ldr	r3, [r6, #0]
 800b144:	461c      	mov	r4, r3
 800b146:	bb34      	cbnz	r4, 800b196 <_malloc_r+0x82>
 800b148:	4629      	mov	r1, r5
 800b14a:	4638      	mov	r0, r7
 800b14c:	f7ff ffc2 	bl	800b0d4 <sbrk_aligned>
 800b150:	1c43      	adds	r3, r0, #1
 800b152:	4604      	mov	r4, r0
 800b154:	d14d      	bne.n	800b1f2 <_malloc_r+0xde>
 800b156:	6834      	ldr	r4, [r6, #0]
 800b158:	4626      	mov	r6, r4
 800b15a:	2e00      	cmp	r6, #0
 800b15c:	d140      	bne.n	800b1e0 <_malloc_r+0xcc>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	4631      	mov	r1, r6
 800b162:	4638      	mov	r0, r7
 800b164:	eb04 0803 	add.w	r8, r4, r3
 800b168:	f000 fca8 	bl	800babc <_sbrk_r>
 800b16c:	4580      	cmp	r8, r0
 800b16e:	d13a      	bne.n	800b1e6 <_malloc_r+0xd2>
 800b170:	6821      	ldr	r1, [r4, #0]
 800b172:	3503      	adds	r5, #3
 800b174:	1a6d      	subs	r5, r5, r1
 800b176:	f025 0503 	bic.w	r5, r5, #3
 800b17a:	3508      	adds	r5, #8
 800b17c:	2d0c      	cmp	r5, #12
 800b17e:	bf38      	it	cc
 800b180:	250c      	movcc	r5, #12
 800b182:	4638      	mov	r0, r7
 800b184:	4629      	mov	r1, r5
 800b186:	f7ff ffa5 	bl	800b0d4 <sbrk_aligned>
 800b18a:	3001      	adds	r0, #1
 800b18c:	d02b      	beq.n	800b1e6 <_malloc_r+0xd2>
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	442b      	add	r3, r5
 800b192:	6023      	str	r3, [r4, #0]
 800b194:	e00e      	b.n	800b1b4 <_malloc_r+0xa0>
 800b196:	6822      	ldr	r2, [r4, #0]
 800b198:	1b52      	subs	r2, r2, r5
 800b19a:	d41e      	bmi.n	800b1da <_malloc_r+0xc6>
 800b19c:	2a0b      	cmp	r2, #11
 800b19e:	d916      	bls.n	800b1ce <_malloc_r+0xba>
 800b1a0:	1961      	adds	r1, r4, r5
 800b1a2:	42a3      	cmp	r3, r4
 800b1a4:	6025      	str	r5, [r4, #0]
 800b1a6:	bf18      	it	ne
 800b1a8:	6059      	strne	r1, [r3, #4]
 800b1aa:	6863      	ldr	r3, [r4, #4]
 800b1ac:	bf08      	it	eq
 800b1ae:	6031      	streq	r1, [r6, #0]
 800b1b0:	5162      	str	r2, [r4, r5]
 800b1b2:	604b      	str	r3, [r1, #4]
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	f104 060b 	add.w	r6, r4, #11
 800b1ba:	f001 fb69 	bl	800c890 <__malloc_unlock>
 800b1be:	f026 0607 	bic.w	r6, r6, #7
 800b1c2:	1d23      	adds	r3, r4, #4
 800b1c4:	1af2      	subs	r2, r6, r3
 800b1c6:	d0b6      	beq.n	800b136 <_malloc_r+0x22>
 800b1c8:	1b9b      	subs	r3, r3, r6
 800b1ca:	50a3      	str	r3, [r4, r2]
 800b1cc:	e7b3      	b.n	800b136 <_malloc_r+0x22>
 800b1ce:	6862      	ldr	r2, [r4, #4]
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	bf0c      	ite	eq
 800b1d4:	6032      	streq	r2, [r6, #0]
 800b1d6:	605a      	strne	r2, [r3, #4]
 800b1d8:	e7ec      	b.n	800b1b4 <_malloc_r+0xa0>
 800b1da:	4623      	mov	r3, r4
 800b1dc:	6864      	ldr	r4, [r4, #4]
 800b1de:	e7b2      	b.n	800b146 <_malloc_r+0x32>
 800b1e0:	4634      	mov	r4, r6
 800b1e2:	6876      	ldr	r6, [r6, #4]
 800b1e4:	e7b9      	b.n	800b15a <_malloc_r+0x46>
 800b1e6:	230c      	movs	r3, #12
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	f001 fb50 	bl	800c890 <__malloc_unlock>
 800b1f0:	e7a1      	b.n	800b136 <_malloc_r+0x22>
 800b1f2:	6025      	str	r5, [r4, #0]
 800b1f4:	e7de      	b.n	800b1b4 <_malloc_r+0xa0>
 800b1f6:	bf00      	nop
 800b1f8:	20000d68 	.word	0x20000d68

0800b1fc <__cvt>:
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b202:	461f      	mov	r7, r3
 800b204:	bfbb      	ittet	lt
 800b206:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b20a:	461f      	movlt	r7, r3
 800b20c:	2300      	movge	r3, #0
 800b20e:	232d      	movlt	r3, #45	; 0x2d
 800b210:	b088      	sub	sp, #32
 800b212:	4614      	mov	r4, r2
 800b214:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b216:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b218:	7013      	strb	r3, [r2, #0]
 800b21a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b21c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b220:	f023 0820 	bic.w	r8, r3, #32
 800b224:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b228:	d005      	beq.n	800b236 <__cvt+0x3a>
 800b22a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b22e:	d100      	bne.n	800b232 <__cvt+0x36>
 800b230:	3501      	adds	r5, #1
 800b232:	2302      	movs	r3, #2
 800b234:	e000      	b.n	800b238 <__cvt+0x3c>
 800b236:	2303      	movs	r3, #3
 800b238:	aa07      	add	r2, sp, #28
 800b23a:	9204      	str	r2, [sp, #16]
 800b23c:	aa06      	add	r2, sp, #24
 800b23e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b242:	e9cd 3500 	strd	r3, r5, [sp]
 800b246:	4622      	mov	r2, r4
 800b248:	463b      	mov	r3, r7
 800b24a:	f000 fd0d 	bl	800bc68 <_dtoa_r>
 800b24e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b252:	4606      	mov	r6, r0
 800b254:	d102      	bne.n	800b25c <__cvt+0x60>
 800b256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b258:	07db      	lsls	r3, r3, #31
 800b25a:	d522      	bpl.n	800b2a2 <__cvt+0xa6>
 800b25c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b260:	eb06 0905 	add.w	r9, r6, r5
 800b264:	d110      	bne.n	800b288 <__cvt+0x8c>
 800b266:	7833      	ldrb	r3, [r6, #0]
 800b268:	2b30      	cmp	r3, #48	; 0x30
 800b26a:	d10a      	bne.n	800b282 <__cvt+0x86>
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	4620      	mov	r0, r4
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 fc04 	bl	8000a80 <__aeabi_dcmpeq>
 800b278:	b918      	cbnz	r0, 800b282 <__cvt+0x86>
 800b27a:	f1c5 0501 	rsb	r5, r5, #1
 800b27e:	f8ca 5000 	str.w	r5, [sl]
 800b282:	f8da 3000 	ldr.w	r3, [sl]
 800b286:	4499      	add	r9, r3
 800b288:	2200      	movs	r2, #0
 800b28a:	2300      	movs	r3, #0
 800b28c:	4620      	mov	r0, r4
 800b28e:	4639      	mov	r1, r7
 800b290:	f7f5 fbf6 	bl	8000a80 <__aeabi_dcmpeq>
 800b294:	b108      	cbz	r0, 800b29a <__cvt+0x9e>
 800b296:	f8cd 901c 	str.w	r9, [sp, #28]
 800b29a:	2230      	movs	r2, #48	; 0x30
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	454b      	cmp	r3, r9
 800b2a0:	d307      	bcc.n	800b2b2 <__cvt+0xb6>
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	9b07      	ldr	r3, [sp, #28]
 800b2a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b2a8:	1b9b      	subs	r3, r3, r6
 800b2aa:	6013      	str	r3, [r2, #0]
 800b2ac:	b008      	add	sp, #32
 800b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b2:	1c59      	adds	r1, r3, #1
 800b2b4:	9107      	str	r1, [sp, #28]
 800b2b6:	701a      	strb	r2, [r3, #0]
 800b2b8:	e7f0      	b.n	800b29c <__cvt+0xa0>

0800b2ba <__exponent>:
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	f803 2b02 	strb.w	r2, [r3], #2
 800b2c4:	bfb6      	itet	lt
 800b2c6:	222d      	movlt	r2, #45	; 0x2d
 800b2c8:	222b      	movge	r2, #43	; 0x2b
 800b2ca:	4249      	neglt	r1, r1
 800b2cc:	2909      	cmp	r1, #9
 800b2ce:	7042      	strb	r2, [r0, #1]
 800b2d0:	dd2b      	ble.n	800b32a <__exponent+0x70>
 800b2d2:	f10d 0407 	add.w	r4, sp, #7
 800b2d6:	46a4      	mov	ip, r4
 800b2d8:	270a      	movs	r7, #10
 800b2da:	fb91 f6f7 	sdiv	r6, r1, r7
 800b2de:	460a      	mov	r2, r1
 800b2e0:	46a6      	mov	lr, r4
 800b2e2:	fb07 1516 	mls	r5, r7, r6, r1
 800b2e6:	2a63      	cmp	r2, #99	; 0x63
 800b2e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b2f6:	dcf0      	bgt.n	800b2da <__exponent+0x20>
 800b2f8:	3130      	adds	r1, #48	; 0x30
 800b2fa:	f1ae 0502 	sub.w	r5, lr, #2
 800b2fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b302:	4629      	mov	r1, r5
 800b304:	1c44      	adds	r4, r0, #1
 800b306:	4561      	cmp	r1, ip
 800b308:	d30a      	bcc.n	800b320 <__exponent+0x66>
 800b30a:	f10d 0209 	add.w	r2, sp, #9
 800b30e:	eba2 020e 	sub.w	r2, r2, lr
 800b312:	4565      	cmp	r5, ip
 800b314:	bf88      	it	hi
 800b316:	2200      	movhi	r2, #0
 800b318:	4413      	add	r3, r2
 800b31a:	1a18      	subs	r0, r3, r0
 800b31c:	b003      	add	sp, #12
 800b31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b320:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b324:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b328:	e7ed      	b.n	800b306 <__exponent+0x4c>
 800b32a:	2330      	movs	r3, #48	; 0x30
 800b32c:	3130      	adds	r1, #48	; 0x30
 800b32e:	7083      	strb	r3, [r0, #2]
 800b330:	70c1      	strb	r1, [r0, #3]
 800b332:	1d03      	adds	r3, r0, #4
 800b334:	e7f1      	b.n	800b31a <__exponent+0x60>
	...

0800b338 <_printf_float>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	b091      	sub	sp, #68	; 0x44
 800b33e:	460c      	mov	r4, r1
 800b340:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b344:	4616      	mov	r6, r2
 800b346:	461f      	mov	r7, r3
 800b348:	4605      	mov	r5, r0
 800b34a:	f001 fa7b 	bl	800c844 <_localeconv_r>
 800b34e:	6803      	ldr	r3, [r0, #0]
 800b350:	4618      	mov	r0, r3
 800b352:	9309      	str	r3, [sp, #36]	; 0x24
 800b354:	f7f4 ff68 	bl	8000228 <strlen>
 800b358:	2300      	movs	r3, #0
 800b35a:	930e      	str	r3, [sp, #56]	; 0x38
 800b35c:	f8d8 3000 	ldr.w	r3, [r8]
 800b360:	900a      	str	r0, [sp, #40]	; 0x28
 800b362:	3307      	adds	r3, #7
 800b364:	f023 0307 	bic.w	r3, r3, #7
 800b368:	f103 0208 	add.w	r2, r3, #8
 800b36c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b370:	f8d4 b000 	ldr.w	fp, [r4]
 800b374:	f8c8 2000 	str.w	r2, [r8]
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b380:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b384:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b388:	930b      	str	r3, [sp, #44]	; 0x2c
 800b38a:	f04f 32ff 	mov.w	r2, #4294967295
 800b38e:	4640      	mov	r0, r8
 800b390:	4b9c      	ldr	r3, [pc, #624]	; (800b604 <_printf_float+0x2cc>)
 800b392:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b394:	f7f5 fba6 	bl	8000ae4 <__aeabi_dcmpun>
 800b398:	bb70      	cbnz	r0, 800b3f8 <_printf_float+0xc0>
 800b39a:	f04f 32ff 	mov.w	r2, #4294967295
 800b39e:	4640      	mov	r0, r8
 800b3a0:	4b98      	ldr	r3, [pc, #608]	; (800b604 <_printf_float+0x2cc>)
 800b3a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3a4:	f7f5 fb80 	bl	8000aa8 <__aeabi_dcmple>
 800b3a8:	bb30      	cbnz	r0, 800b3f8 <_printf_float+0xc0>
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	4651      	mov	r1, sl
 800b3b2:	f7f5 fb6f 	bl	8000a94 <__aeabi_dcmplt>
 800b3b6:	b110      	cbz	r0, 800b3be <_printf_float+0x86>
 800b3b8:	232d      	movs	r3, #45	; 0x2d
 800b3ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3be:	4b92      	ldr	r3, [pc, #584]	; (800b608 <_printf_float+0x2d0>)
 800b3c0:	4892      	ldr	r0, [pc, #584]	; (800b60c <_printf_float+0x2d4>)
 800b3c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b3c6:	bf94      	ite	ls
 800b3c8:	4698      	movls	r8, r3
 800b3ca:	4680      	movhi	r8, r0
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	f04f 0a00 	mov.w	sl, #0
 800b3d2:	6123      	str	r3, [r4, #16]
 800b3d4:	f02b 0304 	bic.w	r3, fp, #4
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	4633      	mov	r3, r6
 800b3dc:	4621      	mov	r1, r4
 800b3de:	4628      	mov	r0, r5
 800b3e0:	9700      	str	r7, [sp, #0]
 800b3e2:	aa0f      	add	r2, sp, #60	; 0x3c
 800b3e4:	f000 f9d4 	bl	800b790 <_printf_common>
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	f040 8090 	bne.w	800b50e <_printf_float+0x1d6>
 800b3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f2:	b011      	add	sp, #68	; 0x44
 800b3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	4653      	mov	r3, sl
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	4651      	mov	r1, sl
 800b400:	f7f5 fb70 	bl	8000ae4 <__aeabi_dcmpun>
 800b404:	b148      	cbz	r0, 800b41a <_printf_float+0xe2>
 800b406:	f1ba 0f00 	cmp.w	sl, #0
 800b40a:	bfb8      	it	lt
 800b40c:	232d      	movlt	r3, #45	; 0x2d
 800b40e:	4880      	ldr	r0, [pc, #512]	; (800b610 <_printf_float+0x2d8>)
 800b410:	bfb8      	it	lt
 800b412:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b416:	4b7f      	ldr	r3, [pc, #508]	; (800b614 <_printf_float+0x2dc>)
 800b418:	e7d3      	b.n	800b3c2 <_printf_float+0x8a>
 800b41a:	6863      	ldr	r3, [r4, #4]
 800b41c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	d142      	bne.n	800b4aa <_printf_float+0x172>
 800b424:	2306      	movs	r3, #6
 800b426:	6063      	str	r3, [r4, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	9206      	str	r2, [sp, #24]
 800b42c:	aa0e      	add	r2, sp, #56	; 0x38
 800b42e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b432:	aa0d      	add	r2, sp, #52	; 0x34
 800b434:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b438:	9203      	str	r2, [sp, #12]
 800b43a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b43e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b442:	6023      	str	r3, [r4, #0]
 800b444:	6863      	ldr	r3, [r4, #4]
 800b446:	4642      	mov	r2, r8
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	4628      	mov	r0, r5
 800b44c:	4653      	mov	r3, sl
 800b44e:	910b      	str	r1, [sp, #44]	; 0x2c
 800b450:	f7ff fed4 	bl	800b1fc <__cvt>
 800b454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b456:	4680      	mov	r8, r0
 800b458:	2947      	cmp	r1, #71	; 0x47
 800b45a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b45c:	d108      	bne.n	800b470 <_printf_float+0x138>
 800b45e:	1cc8      	adds	r0, r1, #3
 800b460:	db02      	blt.n	800b468 <_printf_float+0x130>
 800b462:	6863      	ldr	r3, [r4, #4]
 800b464:	4299      	cmp	r1, r3
 800b466:	dd40      	ble.n	800b4ea <_printf_float+0x1b2>
 800b468:	f1a9 0902 	sub.w	r9, r9, #2
 800b46c:	fa5f f989 	uxtb.w	r9, r9
 800b470:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b474:	d81f      	bhi.n	800b4b6 <_printf_float+0x17e>
 800b476:	464a      	mov	r2, r9
 800b478:	3901      	subs	r1, #1
 800b47a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b47e:	910d      	str	r1, [sp, #52]	; 0x34
 800b480:	f7ff ff1b 	bl	800b2ba <__exponent>
 800b484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b486:	4682      	mov	sl, r0
 800b488:	1813      	adds	r3, r2, r0
 800b48a:	2a01      	cmp	r2, #1
 800b48c:	6123      	str	r3, [r4, #16]
 800b48e:	dc02      	bgt.n	800b496 <_printf_float+0x15e>
 800b490:	6822      	ldr	r2, [r4, #0]
 800b492:	07d2      	lsls	r2, r2, #31
 800b494:	d501      	bpl.n	800b49a <_printf_float+0x162>
 800b496:	3301      	adds	r3, #1
 800b498:	6123      	str	r3, [r4, #16]
 800b49a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d09b      	beq.n	800b3da <_printf_float+0xa2>
 800b4a2:	232d      	movs	r3, #45	; 0x2d
 800b4a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4a8:	e797      	b.n	800b3da <_printf_float+0xa2>
 800b4aa:	2947      	cmp	r1, #71	; 0x47
 800b4ac:	d1bc      	bne.n	800b428 <_printf_float+0xf0>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1ba      	bne.n	800b428 <_printf_float+0xf0>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e7b7      	b.n	800b426 <_printf_float+0xee>
 800b4b6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b4ba:	d118      	bne.n	800b4ee <_printf_float+0x1b6>
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	6863      	ldr	r3, [r4, #4]
 800b4c0:	dd0b      	ble.n	800b4da <_printf_float+0x1a2>
 800b4c2:	6121      	str	r1, [r4, #16]
 800b4c4:	b913      	cbnz	r3, 800b4cc <_printf_float+0x194>
 800b4c6:	6822      	ldr	r2, [r4, #0]
 800b4c8:	07d0      	lsls	r0, r2, #31
 800b4ca:	d502      	bpl.n	800b4d2 <_printf_float+0x19a>
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	440b      	add	r3, r1
 800b4d0:	6123      	str	r3, [r4, #16]
 800b4d2:	f04f 0a00 	mov.w	sl, #0
 800b4d6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b4d8:	e7df      	b.n	800b49a <_printf_float+0x162>
 800b4da:	b913      	cbnz	r3, 800b4e2 <_printf_float+0x1aa>
 800b4dc:	6822      	ldr	r2, [r4, #0]
 800b4de:	07d2      	lsls	r2, r2, #31
 800b4e0:	d501      	bpl.n	800b4e6 <_printf_float+0x1ae>
 800b4e2:	3302      	adds	r3, #2
 800b4e4:	e7f4      	b.n	800b4d0 <_printf_float+0x198>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e7f2      	b.n	800b4d0 <_printf_float+0x198>
 800b4ea:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b4ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4f0:	4299      	cmp	r1, r3
 800b4f2:	db05      	blt.n	800b500 <_printf_float+0x1c8>
 800b4f4:	6823      	ldr	r3, [r4, #0]
 800b4f6:	6121      	str	r1, [r4, #16]
 800b4f8:	07d8      	lsls	r0, r3, #31
 800b4fa:	d5ea      	bpl.n	800b4d2 <_printf_float+0x19a>
 800b4fc:	1c4b      	adds	r3, r1, #1
 800b4fe:	e7e7      	b.n	800b4d0 <_printf_float+0x198>
 800b500:	2900      	cmp	r1, #0
 800b502:	bfcc      	ite	gt
 800b504:	2201      	movgt	r2, #1
 800b506:	f1c1 0202 	rsble	r2, r1, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	e7e0      	b.n	800b4d0 <_printf_float+0x198>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	055a      	lsls	r2, r3, #21
 800b512:	d407      	bmi.n	800b524 <_printf_float+0x1ec>
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	4642      	mov	r2, r8
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	d12b      	bne.n	800b57a <_printf_float+0x242>
 800b522:	e764      	b.n	800b3ee <_printf_float+0xb6>
 800b524:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b528:	f240 80dd 	bls.w	800b6e6 <_printf_float+0x3ae>
 800b52c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b530:	2200      	movs	r2, #0
 800b532:	2300      	movs	r3, #0
 800b534:	f7f5 faa4 	bl	8000a80 <__aeabi_dcmpeq>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d033      	beq.n	800b5a4 <_printf_float+0x26c>
 800b53c:	2301      	movs	r3, #1
 800b53e:	4631      	mov	r1, r6
 800b540:	4628      	mov	r0, r5
 800b542:	4a35      	ldr	r2, [pc, #212]	; (800b618 <_printf_float+0x2e0>)
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	f43f af51 	beq.w	800b3ee <_printf_float+0xb6>
 800b54c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b550:	429a      	cmp	r2, r3
 800b552:	db02      	blt.n	800b55a <_printf_float+0x222>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	07d8      	lsls	r0, r3, #31
 800b558:	d50f      	bpl.n	800b57a <_printf_float+0x242>
 800b55a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b55e:	4631      	mov	r1, r6
 800b560:	4628      	mov	r0, r5
 800b562:	47b8      	blx	r7
 800b564:	3001      	adds	r0, #1
 800b566:	f43f af42 	beq.w	800b3ee <_printf_float+0xb6>
 800b56a:	f04f 0800 	mov.w	r8, #0
 800b56e:	f104 091a 	add.w	r9, r4, #26
 800b572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b574:	3b01      	subs	r3, #1
 800b576:	4543      	cmp	r3, r8
 800b578:	dc09      	bgt.n	800b58e <_printf_float+0x256>
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	079b      	lsls	r3, r3, #30
 800b57e:	f100 8102 	bmi.w	800b786 <_printf_float+0x44e>
 800b582:	68e0      	ldr	r0, [r4, #12]
 800b584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b586:	4298      	cmp	r0, r3
 800b588:	bfb8      	it	lt
 800b58a:	4618      	movlt	r0, r3
 800b58c:	e731      	b.n	800b3f2 <_printf_float+0xba>
 800b58e:	2301      	movs	r3, #1
 800b590:	464a      	mov	r2, r9
 800b592:	4631      	mov	r1, r6
 800b594:	4628      	mov	r0, r5
 800b596:	47b8      	blx	r7
 800b598:	3001      	adds	r0, #1
 800b59a:	f43f af28 	beq.w	800b3ee <_printf_float+0xb6>
 800b59e:	f108 0801 	add.w	r8, r8, #1
 800b5a2:	e7e6      	b.n	800b572 <_printf_float+0x23a>
 800b5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	dc38      	bgt.n	800b61c <_printf_float+0x2e4>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	4a19      	ldr	r2, [pc, #100]	; (800b618 <_printf_float+0x2e0>)
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	f43f af1a 	beq.w	800b3ee <_printf_float+0xb6>
 800b5ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	d102      	bne.n	800b5c8 <_printf_float+0x290>
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	07d9      	lsls	r1, r3, #31
 800b5c6:	d5d8      	bpl.n	800b57a <_printf_float+0x242>
 800b5c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	47b8      	blx	r7
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	f43f af0b 	beq.w	800b3ee <_printf_float+0xb6>
 800b5d8:	f04f 0900 	mov.w	r9, #0
 800b5dc:	f104 0a1a 	add.w	sl, r4, #26
 800b5e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e2:	425b      	negs	r3, r3
 800b5e4:	454b      	cmp	r3, r9
 800b5e6:	dc01      	bgt.n	800b5ec <_printf_float+0x2b4>
 800b5e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ea:	e794      	b.n	800b516 <_printf_float+0x1de>
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	4652      	mov	r2, sl
 800b5f0:	4631      	mov	r1, r6
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	47b8      	blx	r7
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f43f aef9 	beq.w	800b3ee <_printf_float+0xb6>
 800b5fc:	f109 0901 	add.w	r9, r9, #1
 800b600:	e7ee      	b.n	800b5e0 <_printf_float+0x2a8>
 800b602:	bf00      	nop
 800b604:	7fefffff 	.word	0x7fefffff
 800b608:	0800e71c 	.word	0x0800e71c
 800b60c:	0800e720 	.word	0x0800e720
 800b610:	0800e728 	.word	0x0800e728
 800b614:	0800e724 	.word	0x0800e724
 800b618:	0800e72c 	.word	0x0800e72c
 800b61c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b61e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b620:	429a      	cmp	r2, r3
 800b622:	bfa8      	it	ge
 800b624:	461a      	movge	r2, r3
 800b626:	2a00      	cmp	r2, #0
 800b628:	4691      	mov	r9, r2
 800b62a:	dc37      	bgt.n	800b69c <_printf_float+0x364>
 800b62c:	f04f 0b00 	mov.w	fp, #0
 800b630:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b634:	f104 021a 	add.w	r2, r4, #26
 800b638:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b63c:	ebaa 0309 	sub.w	r3, sl, r9
 800b640:	455b      	cmp	r3, fp
 800b642:	dc33      	bgt.n	800b6ac <_printf_float+0x374>
 800b644:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b648:	429a      	cmp	r2, r3
 800b64a:	db3b      	blt.n	800b6c4 <_printf_float+0x38c>
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	07da      	lsls	r2, r3, #31
 800b650:	d438      	bmi.n	800b6c4 <_printf_float+0x38c>
 800b652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b654:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b656:	eba3 020a 	sub.w	r2, r3, sl
 800b65a:	eba3 0901 	sub.w	r9, r3, r1
 800b65e:	4591      	cmp	r9, r2
 800b660:	bfa8      	it	ge
 800b662:	4691      	movge	r9, r2
 800b664:	f1b9 0f00 	cmp.w	r9, #0
 800b668:	dc34      	bgt.n	800b6d4 <_printf_float+0x39c>
 800b66a:	f04f 0800 	mov.w	r8, #0
 800b66e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b672:	f104 0a1a 	add.w	sl, r4, #26
 800b676:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b67a:	1a9b      	subs	r3, r3, r2
 800b67c:	eba3 0309 	sub.w	r3, r3, r9
 800b680:	4543      	cmp	r3, r8
 800b682:	f77f af7a 	ble.w	800b57a <_printf_float+0x242>
 800b686:	2301      	movs	r3, #1
 800b688:	4652      	mov	r2, sl
 800b68a:	4631      	mov	r1, r6
 800b68c:	4628      	mov	r0, r5
 800b68e:	47b8      	blx	r7
 800b690:	3001      	adds	r0, #1
 800b692:	f43f aeac 	beq.w	800b3ee <_printf_float+0xb6>
 800b696:	f108 0801 	add.w	r8, r8, #1
 800b69a:	e7ec      	b.n	800b676 <_printf_float+0x33e>
 800b69c:	4613      	mov	r3, r2
 800b69e:	4631      	mov	r1, r6
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	47b8      	blx	r7
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	d1c0      	bne.n	800b62c <_printf_float+0x2f4>
 800b6aa:	e6a0      	b.n	800b3ee <_printf_float+0xb6>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	920b      	str	r2, [sp, #44]	; 0x2c
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	f43f ae99 	beq.w	800b3ee <_printf_float+0xb6>
 800b6bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6be:	f10b 0b01 	add.w	fp, fp, #1
 800b6c2:	e7b9      	b.n	800b638 <_printf_float+0x300>
 800b6c4:	4631      	mov	r1, r6
 800b6c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	47b8      	blx	r7
 800b6ce:	3001      	adds	r0, #1
 800b6d0:	d1bf      	bne.n	800b652 <_printf_float+0x31a>
 800b6d2:	e68c      	b.n	800b3ee <_printf_float+0xb6>
 800b6d4:	464b      	mov	r3, r9
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	4628      	mov	r0, r5
 800b6da:	eb08 020a 	add.w	r2, r8, sl
 800b6de:	47b8      	blx	r7
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d1c2      	bne.n	800b66a <_printf_float+0x332>
 800b6e4:	e683      	b.n	800b3ee <_printf_float+0xb6>
 800b6e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6e8:	2a01      	cmp	r2, #1
 800b6ea:	dc01      	bgt.n	800b6f0 <_printf_float+0x3b8>
 800b6ec:	07db      	lsls	r3, r3, #31
 800b6ee:	d537      	bpl.n	800b760 <_printf_float+0x428>
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	4631      	mov	r1, r6
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	47b8      	blx	r7
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	f43f ae77 	beq.w	800b3ee <_printf_float+0xb6>
 800b700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b704:	4631      	mov	r1, r6
 800b706:	4628      	mov	r0, r5
 800b708:	47b8      	blx	r7
 800b70a:	3001      	adds	r0, #1
 800b70c:	f43f ae6f 	beq.w	800b3ee <_printf_float+0xb6>
 800b710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b714:	2200      	movs	r2, #0
 800b716:	2300      	movs	r3, #0
 800b718:	f7f5 f9b2 	bl	8000a80 <__aeabi_dcmpeq>
 800b71c:	b9d8      	cbnz	r0, 800b756 <_printf_float+0x41e>
 800b71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b720:	f108 0201 	add.w	r2, r8, #1
 800b724:	3b01      	subs	r3, #1
 800b726:	4631      	mov	r1, r6
 800b728:	4628      	mov	r0, r5
 800b72a:	47b8      	blx	r7
 800b72c:	3001      	adds	r0, #1
 800b72e:	d10e      	bne.n	800b74e <_printf_float+0x416>
 800b730:	e65d      	b.n	800b3ee <_printf_float+0xb6>
 800b732:	2301      	movs	r3, #1
 800b734:	464a      	mov	r2, r9
 800b736:	4631      	mov	r1, r6
 800b738:	4628      	mov	r0, r5
 800b73a:	47b8      	blx	r7
 800b73c:	3001      	adds	r0, #1
 800b73e:	f43f ae56 	beq.w	800b3ee <_printf_float+0xb6>
 800b742:	f108 0801 	add.w	r8, r8, #1
 800b746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b748:	3b01      	subs	r3, #1
 800b74a:	4543      	cmp	r3, r8
 800b74c:	dcf1      	bgt.n	800b732 <_printf_float+0x3fa>
 800b74e:	4653      	mov	r3, sl
 800b750:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b754:	e6e0      	b.n	800b518 <_printf_float+0x1e0>
 800b756:	f04f 0800 	mov.w	r8, #0
 800b75a:	f104 091a 	add.w	r9, r4, #26
 800b75e:	e7f2      	b.n	800b746 <_printf_float+0x40e>
 800b760:	2301      	movs	r3, #1
 800b762:	4642      	mov	r2, r8
 800b764:	e7df      	b.n	800b726 <_printf_float+0x3ee>
 800b766:	2301      	movs	r3, #1
 800b768:	464a      	mov	r2, r9
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	f43f ae3c 	beq.w	800b3ee <_printf_float+0xb6>
 800b776:	f108 0801 	add.w	r8, r8, #1
 800b77a:	68e3      	ldr	r3, [r4, #12]
 800b77c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b77e:	1a5b      	subs	r3, r3, r1
 800b780:	4543      	cmp	r3, r8
 800b782:	dcf0      	bgt.n	800b766 <_printf_float+0x42e>
 800b784:	e6fd      	b.n	800b582 <_printf_float+0x24a>
 800b786:	f04f 0800 	mov.w	r8, #0
 800b78a:	f104 0919 	add.w	r9, r4, #25
 800b78e:	e7f4      	b.n	800b77a <_printf_float+0x442>

0800b790 <_printf_common>:
 800b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	4616      	mov	r6, r2
 800b796:	4699      	mov	r9, r3
 800b798:	688a      	ldr	r2, [r1, #8]
 800b79a:	690b      	ldr	r3, [r1, #16]
 800b79c:	4607      	mov	r7, r0
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	bfb8      	it	lt
 800b7a2:	4613      	movlt	r3, r2
 800b7a4:	6033      	str	r3, [r6, #0]
 800b7a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7b0:	b10a      	cbz	r2, 800b7b6 <_printf_common+0x26>
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	6033      	str	r3, [r6, #0]
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	0699      	lsls	r1, r3, #26
 800b7ba:	bf42      	ittt	mi
 800b7bc:	6833      	ldrmi	r3, [r6, #0]
 800b7be:	3302      	addmi	r3, #2
 800b7c0:	6033      	strmi	r3, [r6, #0]
 800b7c2:	6825      	ldr	r5, [r4, #0]
 800b7c4:	f015 0506 	ands.w	r5, r5, #6
 800b7c8:	d106      	bne.n	800b7d8 <_printf_common+0x48>
 800b7ca:	f104 0a19 	add.w	sl, r4, #25
 800b7ce:	68e3      	ldr	r3, [r4, #12]
 800b7d0:	6832      	ldr	r2, [r6, #0]
 800b7d2:	1a9b      	subs	r3, r3, r2
 800b7d4:	42ab      	cmp	r3, r5
 800b7d6:	dc28      	bgt.n	800b82a <_printf_common+0x9a>
 800b7d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7dc:	1e13      	subs	r3, r2, #0
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	bf18      	it	ne
 800b7e2:	2301      	movne	r3, #1
 800b7e4:	0692      	lsls	r2, r2, #26
 800b7e6:	d42d      	bmi.n	800b844 <_printf_common+0xb4>
 800b7e8:	4649      	mov	r1, r9
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7f0:	47c0      	blx	r8
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	d020      	beq.n	800b838 <_printf_common+0xa8>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	68e5      	ldr	r5, [r4, #12]
 800b7fa:	f003 0306 	and.w	r3, r3, #6
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	bf18      	it	ne
 800b802:	2500      	movne	r5, #0
 800b804:	6832      	ldr	r2, [r6, #0]
 800b806:	f04f 0600 	mov.w	r6, #0
 800b80a:	68a3      	ldr	r3, [r4, #8]
 800b80c:	bf08      	it	eq
 800b80e:	1aad      	subeq	r5, r5, r2
 800b810:	6922      	ldr	r2, [r4, #16]
 800b812:	bf08      	it	eq
 800b814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b818:	4293      	cmp	r3, r2
 800b81a:	bfc4      	itt	gt
 800b81c:	1a9b      	subgt	r3, r3, r2
 800b81e:	18ed      	addgt	r5, r5, r3
 800b820:	341a      	adds	r4, #26
 800b822:	42b5      	cmp	r5, r6
 800b824:	d11a      	bne.n	800b85c <_printf_common+0xcc>
 800b826:	2000      	movs	r0, #0
 800b828:	e008      	b.n	800b83c <_printf_common+0xac>
 800b82a:	2301      	movs	r3, #1
 800b82c:	4652      	mov	r2, sl
 800b82e:	4649      	mov	r1, r9
 800b830:	4638      	mov	r0, r7
 800b832:	47c0      	blx	r8
 800b834:	3001      	adds	r0, #1
 800b836:	d103      	bne.n	800b840 <_printf_common+0xb0>
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
 800b83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b840:	3501      	adds	r5, #1
 800b842:	e7c4      	b.n	800b7ce <_printf_common+0x3e>
 800b844:	2030      	movs	r0, #48	; 0x30
 800b846:	18e1      	adds	r1, r4, r3
 800b848:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b84c:	1c5a      	adds	r2, r3, #1
 800b84e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b852:	4422      	add	r2, r4
 800b854:	3302      	adds	r3, #2
 800b856:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b85a:	e7c5      	b.n	800b7e8 <_printf_common+0x58>
 800b85c:	2301      	movs	r3, #1
 800b85e:	4622      	mov	r2, r4
 800b860:	4649      	mov	r1, r9
 800b862:	4638      	mov	r0, r7
 800b864:	47c0      	blx	r8
 800b866:	3001      	adds	r0, #1
 800b868:	d0e6      	beq.n	800b838 <_printf_common+0xa8>
 800b86a:	3601      	adds	r6, #1
 800b86c:	e7d9      	b.n	800b822 <_printf_common+0x92>
	...

0800b870 <_printf_i>:
 800b870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b874:	7e0f      	ldrb	r7, [r1, #24]
 800b876:	4691      	mov	r9, r2
 800b878:	2f78      	cmp	r7, #120	; 0x78
 800b87a:	4680      	mov	r8, r0
 800b87c:	460c      	mov	r4, r1
 800b87e:	469a      	mov	sl, r3
 800b880:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b886:	d807      	bhi.n	800b898 <_printf_i+0x28>
 800b888:	2f62      	cmp	r7, #98	; 0x62
 800b88a:	d80a      	bhi.n	800b8a2 <_printf_i+0x32>
 800b88c:	2f00      	cmp	r7, #0
 800b88e:	f000 80d9 	beq.w	800ba44 <_printf_i+0x1d4>
 800b892:	2f58      	cmp	r7, #88	; 0x58
 800b894:	f000 80a4 	beq.w	800b9e0 <_printf_i+0x170>
 800b898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b89c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8a0:	e03a      	b.n	800b918 <_printf_i+0xa8>
 800b8a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8a6:	2b15      	cmp	r3, #21
 800b8a8:	d8f6      	bhi.n	800b898 <_printf_i+0x28>
 800b8aa:	a101      	add	r1, pc, #4	; (adr r1, 800b8b0 <_printf_i+0x40>)
 800b8ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8b0:	0800b909 	.word	0x0800b909
 800b8b4:	0800b91d 	.word	0x0800b91d
 800b8b8:	0800b899 	.word	0x0800b899
 800b8bc:	0800b899 	.word	0x0800b899
 800b8c0:	0800b899 	.word	0x0800b899
 800b8c4:	0800b899 	.word	0x0800b899
 800b8c8:	0800b91d 	.word	0x0800b91d
 800b8cc:	0800b899 	.word	0x0800b899
 800b8d0:	0800b899 	.word	0x0800b899
 800b8d4:	0800b899 	.word	0x0800b899
 800b8d8:	0800b899 	.word	0x0800b899
 800b8dc:	0800ba2b 	.word	0x0800ba2b
 800b8e0:	0800b94d 	.word	0x0800b94d
 800b8e4:	0800ba0d 	.word	0x0800ba0d
 800b8e8:	0800b899 	.word	0x0800b899
 800b8ec:	0800b899 	.word	0x0800b899
 800b8f0:	0800ba4d 	.word	0x0800ba4d
 800b8f4:	0800b899 	.word	0x0800b899
 800b8f8:	0800b94d 	.word	0x0800b94d
 800b8fc:	0800b899 	.word	0x0800b899
 800b900:	0800b899 	.word	0x0800b899
 800b904:	0800ba15 	.word	0x0800ba15
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	1d1a      	adds	r2, r3, #4
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	602a      	str	r2, [r5, #0]
 800b910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b918:	2301      	movs	r3, #1
 800b91a:	e0a4      	b.n	800ba66 <_printf_i+0x1f6>
 800b91c:	6820      	ldr	r0, [r4, #0]
 800b91e:	6829      	ldr	r1, [r5, #0]
 800b920:	0606      	lsls	r6, r0, #24
 800b922:	f101 0304 	add.w	r3, r1, #4
 800b926:	d50a      	bpl.n	800b93e <_printf_i+0xce>
 800b928:	680e      	ldr	r6, [r1, #0]
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	2e00      	cmp	r6, #0
 800b92e:	da03      	bge.n	800b938 <_printf_i+0xc8>
 800b930:	232d      	movs	r3, #45	; 0x2d
 800b932:	4276      	negs	r6, r6
 800b934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b938:	230a      	movs	r3, #10
 800b93a:	485e      	ldr	r0, [pc, #376]	; (800bab4 <_printf_i+0x244>)
 800b93c:	e019      	b.n	800b972 <_printf_i+0x102>
 800b93e:	680e      	ldr	r6, [r1, #0]
 800b940:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b944:	602b      	str	r3, [r5, #0]
 800b946:	bf18      	it	ne
 800b948:	b236      	sxthne	r6, r6
 800b94a:	e7ef      	b.n	800b92c <_printf_i+0xbc>
 800b94c:	682b      	ldr	r3, [r5, #0]
 800b94e:	6820      	ldr	r0, [r4, #0]
 800b950:	1d19      	adds	r1, r3, #4
 800b952:	6029      	str	r1, [r5, #0]
 800b954:	0601      	lsls	r1, r0, #24
 800b956:	d501      	bpl.n	800b95c <_printf_i+0xec>
 800b958:	681e      	ldr	r6, [r3, #0]
 800b95a:	e002      	b.n	800b962 <_printf_i+0xf2>
 800b95c:	0646      	lsls	r6, r0, #25
 800b95e:	d5fb      	bpl.n	800b958 <_printf_i+0xe8>
 800b960:	881e      	ldrh	r6, [r3, #0]
 800b962:	2f6f      	cmp	r7, #111	; 0x6f
 800b964:	bf0c      	ite	eq
 800b966:	2308      	moveq	r3, #8
 800b968:	230a      	movne	r3, #10
 800b96a:	4852      	ldr	r0, [pc, #328]	; (800bab4 <_printf_i+0x244>)
 800b96c:	2100      	movs	r1, #0
 800b96e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b972:	6865      	ldr	r5, [r4, #4]
 800b974:	2d00      	cmp	r5, #0
 800b976:	bfa8      	it	ge
 800b978:	6821      	ldrge	r1, [r4, #0]
 800b97a:	60a5      	str	r5, [r4, #8]
 800b97c:	bfa4      	itt	ge
 800b97e:	f021 0104 	bicge.w	r1, r1, #4
 800b982:	6021      	strge	r1, [r4, #0]
 800b984:	b90e      	cbnz	r6, 800b98a <_printf_i+0x11a>
 800b986:	2d00      	cmp	r5, #0
 800b988:	d04d      	beq.n	800ba26 <_printf_i+0x1b6>
 800b98a:	4615      	mov	r5, r2
 800b98c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b990:	fb03 6711 	mls	r7, r3, r1, r6
 800b994:	5dc7      	ldrb	r7, [r0, r7]
 800b996:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b99a:	4637      	mov	r7, r6
 800b99c:	42bb      	cmp	r3, r7
 800b99e:	460e      	mov	r6, r1
 800b9a0:	d9f4      	bls.n	800b98c <_printf_i+0x11c>
 800b9a2:	2b08      	cmp	r3, #8
 800b9a4:	d10b      	bne.n	800b9be <_printf_i+0x14e>
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	07de      	lsls	r6, r3, #31
 800b9aa:	d508      	bpl.n	800b9be <_printf_i+0x14e>
 800b9ac:	6923      	ldr	r3, [r4, #16]
 800b9ae:	6861      	ldr	r1, [r4, #4]
 800b9b0:	4299      	cmp	r1, r3
 800b9b2:	bfde      	ittt	le
 800b9b4:	2330      	movle	r3, #48	; 0x30
 800b9b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9be:	1b52      	subs	r2, r2, r5
 800b9c0:	6122      	str	r2, [r4, #16]
 800b9c2:	464b      	mov	r3, r9
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	f8cd a000 	str.w	sl, [sp]
 800b9cc:	aa03      	add	r2, sp, #12
 800b9ce:	f7ff fedf 	bl	800b790 <_printf_common>
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d14c      	bne.n	800ba70 <_printf_i+0x200>
 800b9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9da:	b004      	add	sp, #16
 800b9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e0:	4834      	ldr	r0, [pc, #208]	; (800bab4 <_printf_i+0x244>)
 800b9e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9e6:	6829      	ldr	r1, [r5, #0]
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9ee:	6029      	str	r1, [r5, #0]
 800b9f0:	061d      	lsls	r5, r3, #24
 800b9f2:	d514      	bpl.n	800ba1e <_printf_i+0x1ae>
 800b9f4:	07df      	lsls	r7, r3, #31
 800b9f6:	bf44      	itt	mi
 800b9f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b9fc:	6023      	strmi	r3, [r4, #0]
 800b9fe:	b91e      	cbnz	r6, 800ba08 <_printf_i+0x198>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	f023 0320 	bic.w	r3, r3, #32
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	2310      	movs	r3, #16
 800ba0a:	e7af      	b.n	800b96c <_printf_i+0xfc>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	f043 0320 	orr.w	r3, r3, #32
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	2378      	movs	r3, #120	; 0x78
 800ba16:	4828      	ldr	r0, [pc, #160]	; (800bab8 <_printf_i+0x248>)
 800ba18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba1c:	e7e3      	b.n	800b9e6 <_printf_i+0x176>
 800ba1e:	0659      	lsls	r1, r3, #25
 800ba20:	bf48      	it	mi
 800ba22:	b2b6      	uxthmi	r6, r6
 800ba24:	e7e6      	b.n	800b9f4 <_printf_i+0x184>
 800ba26:	4615      	mov	r5, r2
 800ba28:	e7bb      	b.n	800b9a2 <_printf_i+0x132>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	6826      	ldr	r6, [r4, #0]
 800ba2e:	1d18      	adds	r0, r3, #4
 800ba30:	6961      	ldr	r1, [r4, #20]
 800ba32:	6028      	str	r0, [r5, #0]
 800ba34:	0635      	lsls	r5, r6, #24
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	d501      	bpl.n	800ba3e <_printf_i+0x1ce>
 800ba3a:	6019      	str	r1, [r3, #0]
 800ba3c:	e002      	b.n	800ba44 <_printf_i+0x1d4>
 800ba3e:	0670      	lsls	r0, r6, #25
 800ba40:	d5fb      	bpl.n	800ba3a <_printf_i+0x1ca>
 800ba42:	8019      	strh	r1, [r3, #0]
 800ba44:	2300      	movs	r3, #0
 800ba46:	4615      	mov	r5, r2
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	e7ba      	b.n	800b9c2 <_printf_i+0x152>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	2100      	movs	r1, #0
 800ba50:	1d1a      	adds	r2, r3, #4
 800ba52:	602a      	str	r2, [r5, #0]
 800ba54:	681d      	ldr	r5, [r3, #0]
 800ba56:	6862      	ldr	r2, [r4, #4]
 800ba58:	4628      	mov	r0, r5
 800ba5a:	f000 fef7 	bl	800c84c <memchr>
 800ba5e:	b108      	cbz	r0, 800ba64 <_printf_i+0x1f4>
 800ba60:	1b40      	subs	r0, r0, r5
 800ba62:	6060      	str	r0, [r4, #4]
 800ba64:	6863      	ldr	r3, [r4, #4]
 800ba66:	6123      	str	r3, [r4, #16]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba6e:	e7a8      	b.n	800b9c2 <_printf_i+0x152>
 800ba70:	462a      	mov	r2, r5
 800ba72:	4649      	mov	r1, r9
 800ba74:	4640      	mov	r0, r8
 800ba76:	6923      	ldr	r3, [r4, #16]
 800ba78:	47d0      	blx	sl
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d0ab      	beq.n	800b9d6 <_printf_i+0x166>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	079b      	lsls	r3, r3, #30
 800ba82:	d413      	bmi.n	800baac <_printf_i+0x23c>
 800ba84:	68e0      	ldr	r0, [r4, #12]
 800ba86:	9b03      	ldr	r3, [sp, #12]
 800ba88:	4298      	cmp	r0, r3
 800ba8a:	bfb8      	it	lt
 800ba8c:	4618      	movlt	r0, r3
 800ba8e:	e7a4      	b.n	800b9da <_printf_i+0x16a>
 800ba90:	2301      	movs	r3, #1
 800ba92:	4632      	mov	r2, r6
 800ba94:	4649      	mov	r1, r9
 800ba96:	4640      	mov	r0, r8
 800ba98:	47d0      	blx	sl
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	d09b      	beq.n	800b9d6 <_printf_i+0x166>
 800ba9e:	3501      	adds	r5, #1
 800baa0:	68e3      	ldr	r3, [r4, #12]
 800baa2:	9903      	ldr	r1, [sp, #12]
 800baa4:	1a5b      	subs	r3, r3, r1
 800baa6:	42ab      	cmp	r3, r5
 800baa8:	dcf2      	bgt.n	800ba90 <_printf_i+0x220>
 800baaa:	e7eb      	b.n	800ba84 <_printf_i+0x214>
 800baac:	2500      	movs	r5, #0
 800baae:	f104 0619 	add.w	r6, r4, #25
 800bab2:	e7f5      	b.n	800baa0 <_printf_i+0x230>
 800bab4:	0800e72e 	.word	0x0800e72e
 800bab8:	0800e73f 	.word	0x0800e73f

0800babc <_sbrk_r>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	2300      	movs	r3, #0
 800bac0:	4d05      	ldr	r5, [pc, #20]	; (800bad8 <_sbrk_r+0x1c>)
 800bac2:	4604      	mov	r4, r0
 800bac4:	4608      	mov	r0, r1
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	f7f6 fdec 	bl	80026a4 <_sbrk>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d102      	bne.n	800bad6 <_sbrk_r+0x1a>
 800bad0:	682b      	ldr	r3, [r5, #0]
 800bad2:	b103      	cbz	r3, 800bad6 <_sbrk_r+0x1a>
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	bd38      	pop	{r3, r4, r5, pc}
 800bad8:	20000d70 	.word	0x20000d70

0800badc <_vsniprintf_r>:
 800badc:	b530      	push	{r4, r5, lr}
 800bade:	4614      	mov	r4, r2
 800bae0:	2c00      	cmp	r4, #0
 800bae2:	4605      	mov	r5, r0
 800bae4:	461a      	mov	r2, r3
 800bae6:	b09b      	sub	sp, #108	; 0x6c
 800bae8:	da05      	bge.n	800baf6 <_vsniprintf_r+0x1a>
 800baea:	238b      	movs	r3, #139	; 0x8b
 800baec:	6003      	str	r3, [r0, #0]
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	b01b      	add	sp, #108	; 0x6c
 800baf4:	bd30      	pop	{r4, r5, pc}
 800baf6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bafa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bafe:	bf0c      	ite	eq
 800bb00:	4623      	moveq	r3, r4
 800bb02:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	9305      	str	r3, [sp, #20]
 800bb0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb0e:	9100      	str	r1, [sp, #0]
 800bb10:	9104      	str	r1, [sp, #16]
 800bb12:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bb16:	4669      	mov	r1, sp
 800bb18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bb1a:	f001 fab1 	bl	800d080 <_svfiprintf_r>
 800bb1e:	1c43      	adds	r3, r0, #1
 800bb20:	bfbc      	itt	lt
 800bb22:	238b      	movlt	r3, #139	; 0x8b
 800bb24:	602b      	strlt	r3, [r5, #0]
 800bb26:	2c00      	cmp	r4, #0
 800bb28:	d0e3      	beq.n	800baf2 <_vsniprintf_r+0x16>
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	9b00      	ldr	r3, [sp, #0]
 800bb2e:	701a      	strb	r2, [r3, #0]
 800bb30:	e7df      	b.n	800baf2 <_vsniprintf_r+0x16>
	...

0800bb34 <vsniprintf>:
 800bb34:	b507      	push	{r0, r1, r2, lr}
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	460a      	mov	r2, r1
 800bb3c:	4601      	mov	r1, r0
 800bb3e:	4803      	ldr	r0, [pc, #12]	; (800bb4c <vsniprintf+0x18>)
 800bb40:	6800      	ldr	r0, [r0, #0]
 800bb42:	f7ff ffcb 	bl	800badc <_vsniprintf_r>
 800bb46:	b003      	add	sp, #12
 800bb48:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb4c:	20000140 	.word	0x20000140

0800bb50 <quorem>:
 800bb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	6903      	ldr	r3, [r0, #16]
 800bb56:	690c      	ldr	r4, [r1, #16]
 800bb58:	4607      	mov	r7, r0
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	f2c0 8082 	blt.w	800bc64 <quorem+0x114>
 800bb60:	3c01      	subs	r4, #1
 800bb62:	f100 0514 	add.w	r5, r0, #20
 800bb66:	f101 0814 	add.w	r8, r1, #20
 800bb6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb6e:	9301      	str	r3, [sp, #4]
 800bb70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb88:	d331      	bcc.n	800bbee <quorem+0x9e>
 800bb8a:	f04f 0e00 	mov.w	lr, #0
 800bb8e:	4640      	mov	r0, r8
 800bb90:	46ac      	mov	ip, r5
 800bb92:	46f2      	mov	sl, lr
 800bb94:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb98:	b293      	uxth	r3, r2
 800bb9a:	fb06 e303 	mla	r3, r6, r3, lr
 800bb9e:	0c12      	lsrs	r2, r2, #16
 800bba0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	fb06 e202 	mla	r2, r6, r2, lr
 800bbaa:	ebaa 0303 	sub.w	r3, sl, r3
 800bbae:	f8dc a000 	ldr.w	sl, [ip]
 800bbb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbb6:	fa1f fa8a 	uxth.w	sl, sl
 800bbba:	4453      	add	r3, sl
 800bbbc:	f8dc a000 	ldr.w	sl, [ip]
 800bbc0:	b292      	uxth	r2, r2
 800bbc2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbd0:	4581      	cmp	r9, r0
 800bbd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbd6:	f84c 3b04 	str.w	r3, [ip], #4
 800bbda:	d2db      	bcs.n	800bb94 <quorem+0x44>
 800bbdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbe0:	b92b      	cbnz	r3, 800bbee <quorem+0x9e>
 800bbe2:	9b01      	ldr	r3, [sp, #4]
 800bbe4:	3b04      	subs	r3, #4
 800bbe6:	429d      	cmp	r5, r3
 800bbe8:	461a      	mov	r2, r3
 800bbea:	d32f      	bcc.n	800bc4c <quorem+0xfc>
 800bbec:	613c      	str	r4, [r7, #16]
 800bbee:	4638      	mov	r0, r7
 800bbf0:	f001 f8d2 	bl	800cd98 <__mcmp>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	db25      	blt.n	800bc44 <quorem+0xf4>
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f04f 0c00 	mov.w	ip, #0
 800bbfe:	3601      	adds	r6, #1
 800bc00:	f858 1b04 	ldr.w	r1, [r8], #4
 800bc04:	f8d0 e000 	ldr.w	lr, [r0]
 800bc08:	b28b      	uxth	r3, r1
 800bc0a:	ebac 0303 	sub.w	r3, ip, r3
 800bc0e:	fa1f f28e 	uxth.w	r2, lr
 800bc12:	4413      	add	r3, r2
 800bc14:	0c0a      	lsrs	r2, r1, #16
 800bc16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bc1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc24:	45c1      	cmp	r9, r8
 800bc26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bc2a:	f840 3b04 	str.w	r3, [r0], #4
 800bc2e:	d2e7      	bcs.n	800bc00 <quorem+0xb0>
 800bc30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc38:	b922      	cbnz	r2, 800bc44 <quorem+0xf4>
 800bc3a:	3b04      	subs	r3, #4
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	461a      	mov	r2, r3
 800bc40:	d30a      	bcc.n	800bc58 <quorem+0x108>
 800bc42:	613c      	str	r4, [r7, #16]
 800bc44:	4630      	mov	r0, r6
 800bc46:	b003      	add	sp, #12
 800bc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc4c:	6812      	ldr	r2, [r2, #0]
 800bc4e:	3b04      	subs	r3, #4
 800bc50:	2a00      	cmp	r2, #0
 800bc52:	d1cb      	bne.n	800bbec <quorem+0x9c>
 800bc54:	3c01      	subs	r4, #1
 800bc56:	e7c6      	b.n	800bbe6 <quorem+0x96>
 800bc58:	6812      	ldr	r2, [r2, #0]
 800bc5a:	3b04      	subs	r3, #4
 800bc5c:	2a00      	cmp	r2, #0
 800bc5e:	d1f0      	bne.n	800bc42 <quorem+0xf2>
 800bc60:	3c01      	subs	r4, #1
 800bc62:	e7eb      	b.n	800bc3c <quorem+0xec>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e7ee      	b.n	800bc46 <quorem+0xf6>

0800bc68 <_dtoa_r>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	461f      	mov	r7, r3
 800bc70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bc72:	b099      	sub	sp, #100	; 0x64
 800bc74:	4605      	mov	r5, r0
 800bc76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bc7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bc7e:	b974      	cbnz	r4, 800bc9e <_dtoa_r+0x36>
 800bc80:	2010      	movs	r0, #16
 800bc82:	f7ff f9c7 	bl	800b014 <malloc>
 800bc86:	4602      	mov	r2, r0
 800bc88:	6268      	str	r0, [r5, #36]	; 0x24
 800bc8a:	b920      	cbnz	r0, 800bc96 <_dtoa_r+0x2e>
 800bc8c:	21ea      	movs	r1, #234	; 0xea
 800bc8e:	4ba8      	ldr	r3, [pc, #672]	; (800bf30 <_dtoa_r+0x2c8>)
 800bc90:	48a8      	ldr	r0, [pc, #672]	; (800bf34 <_dtoa_r+0x2cc>)
 800bc92:	f001 faf5 	bl	800d280 <__assert_func>
 800bc96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc9a:	6004      	str	r4, [r0, #0]
 800bc9c:	60c4      	str	r4, [r0, #12]
 800bc9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bca0:	6819      	ldr	r1, [r3, #0]
 800bca2:	b151      	cbz	r1, 800bcba <_dtoa_r+0x52>
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	2301      	movs	r3, #1
 800bca8:	4093      	lsls	r3, r2
 800bcaa:	604a      	str	r2, [r1, #4]
 800bcac:	608b      	str	r3, [r1, #8]
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f000 fe34 	bl	800c91c <_Bfree>
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcb8:	601a      	str	r2, [r3, #0]
 800bcba:	1e3b      	subs	r3, r7, #0
 800bcbc:	bfaf      	iteee	ge
 800bcbe:	2300      	movge	r3, #0
 800bcc0:	2201      	movlt	r2, #1
 800bcc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcc6:	9305      	strlt	r3, [sp, #20]
 800bcc8:	bfa8      	it	ge
 800bcca:	f8c8 3000 	strge.w	r3, [r8]
 800bcce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bcd2:	4b99      	ldr	r3, [pc, #612]	; (800bf38 <_dtoa_r+0x2d0>)
 800bcd4:	bfb8      	it	lt
 800bcd6:	f8c8 2000 	strlt.w	r2, [r8]
 800bcda:	ea33 0309 	bics.w	r3, r3, r9
 800bcde:	d119      	bne.n	800bd14 <_dtoa_r+0xac>
 800bce0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bce4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcec:	4333      	orrs	r3, r6
 800bcee:	f000 857f 	beq.w	800c7f0 <_dtoa_r+0xb88>
 800bcf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcf4:	b953      	cbnz	r3, 800bd0c <_dtoa_r+0xa4>
 800bcf6:	4b91      	ldr	r3, [pc, #580]	; (800bf3c <_dtoa_r+0x2d4>)
 800bcf8:	e022      	b.n	800bd40 <_dtoa_r+0xd8>
 800bcfa:	4b91      	ldr	r3, [pc, #580]	; (800bf40 <_dtoa_r+0x2d8>)
 800bcfc:	9303      	str	r3, [sp, #12]
 800bcfe:	3308      	adds	r3, #8
 800bd00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	9803      	ldr	r0, [sp, #12]
 800bd06:	b019      	add	sp, #100	; 0x64
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	4b8b      	ldr	r3, [pc, #556]	; (800bf3c <_dtoa_r+0x2d4>)
 800bd0e:	9303      	str	r3, [sp, #12]
 800bd10:	3303      	adds	r3, #3
 800bd12:	e7f5      	b.n	800bd00 <_dtoa_r+0x98>
 800bd14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bd18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bd1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd20:	2200      	movs	r2, #0
 800bd22:	2300      	movs	r3, #0
 800bd24:	f7f4 feac 	bl	8000a80 <__aeabi_dcmpeq>
 800bd28:	4680      	mov	r8, r0
 800bd2a:	b158      	cbz	r0, 800bd44 <_dtoa_r+0xdc>
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 8558 	beq.w	800c7ea <_dtoa_r+0xb82>
 800bd3a:	4882      	ldr	r0, [pc, #520]	; (800bf44 <_dtoa_r+0x2dc>)
 800bd3c:	6018      	str	r0, [r3, #0]
 800bd3e:	1e43      	subs	r3, r0, #1
 800bd40:	9303      	str	r3, [sp, #12]
 800bd42:	e7df      	b.n	800bd04 <_dtoa_r+0x9c>
 800bd44:	ab16      	add	r3, sp, #88	; 0x58
 800bd46:	9301      	str	r3, [sp, #4]
 800bd48:	ab17      	add	r3, sp, #92	; 0x5c
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd52:	f001 f8c9 	bl	800cee8 <__d2b>
 800bd56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bd5a:	4683      	mov	fp, r0
 800bd5c:	2c00      	cmp	r4, #0
 800bd5e:	d07f      	beq.n	800be60 <_dtoa_r+0x1f8>
 800bd60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bd6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bd72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bd76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	4b72      	ldr	r3, [pc, #456]	; (800bf48 <_dtoa_r+0x2e0>)
 800bd7e:	f7f4 fa5f 	bl	8000240 <__aeabi_dsub>
 800bd82:	a365      	add	r3, pc, #404	; (adr r3, 800bf18 <_dtoa_r+0x2b0>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fc12 	bl	80005b0 <__aeabi_dmul>
 800bd8c:	a364      	add	r3, pc, #400	; (adr r3, 800bf20 <_dtoa_r+0x2b8>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	f7f4 fa57 	bl	8000244 <__adddf3>
 800bd96:	4606      	mov	r6, r0
 800bd98:	4620      	mov	r0, r4
 800bd9a:	460f      	mov	r7, r1
 800bd9c:	f7f4 fb9e 	bl	80004dc <__aeabi_i2d>
 800bda0:	a361      	add	r3, pc, #388	; (adr r3, 800bf28 <_dtoa_r+0x2c0>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fc03 	bl	80005b0 <__aeabi_dmul>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	460b      	mov	r3, r1
 800bdae:	4630      	mov	r0, r6
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	f7f4 fa47 	bl	8000244 <__adddf3>
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	460f      	mov	r7, r1
 800bdba:	f7f4 fea9 	bl	8000b10 <__aeabi_d2iz>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	4682      	mov	sl, r0
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	4639      	mov	r1, r7
 800bdc8:	f7f4 fe64 	bl	8000a94 <__aeabi_dcmplt>
 800bdcc:	b148      	cbz	r0, 800bde2 <_dtoa_r+0x17a>
 800bdce:	4650      	mov	r0, sl
 800bdd0:	f7f4 fb84 	bl	80004dc <__aeabi_i2d>
 800bdd4:	4632      	mov	r2, r6
 800bdd6:	463b      	mov	r3, r7
 800bdd8:	f7f4 fe52 	bl	8000a80 <__aeabi_dcmpeq>
 800bddc:	b908      	cbnz	r0, 800bde2 <_dtoa_r+0x17a>
 800bdde:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bde2:	f1ba 0f16 	cmp.w	sl, #22
 800bde6:	d858      	bhi.n	800be9a <_dtoa_r+0x232>
 800bde8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bdec:	4b57      	ldr	r3, [pc, #348]	; (800bf4c <_dtoa_r+0x2e4>)
 800bdee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 fe4d 	bl	8000a94 <__aeabi_dcmplt>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d04f      	beq.n	800be9e <_dtoa_r+0x236>
 800bdfe:	2300      	movs	r3, #0
 800be00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be04:	930f      	str	r3, [sp, #60]	; 0x3c
 800be06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800be08:	1b1c      	subs	r4, r3, r4
 800be0a:	1e63      	subs	r3, r4, #1
 800be0c:	9309      	str	r3, [sp, #36]	; 0x24
 800be0e:	bf49      	itett	mi
 800be10:	f1c4 0301 	rsbmi	r3, r4, #1
 800be14:	2300      	movpl	r3, #0
 800be16:	9306      	strmi	r3, [sp, #24]
 800be18:	2300      	movmi	r3, #0
 800be1a:	bf54      	ite	pl
 800be1c:	9306      	strpl	r3, [sp, #24]
 800be1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800be20:	f1ba 0f00 	cmp.w	sl, #0
 800be24:	db3d      	blt.n	800bea2 <_dtoa_r+0x23a>
 800be26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be28:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800be2c:	4453      	add	r3, sl
 800be2e:	9309      	str	r3, [sp, #36]	; 0x24
 800be30:	2300      	movs	r3, #0
 800be32:	930a      	str	r3, [sp, #40]	; 0x28
 800be34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be36:	2b09      	cmp	r3, #9
 800be38:	f200 808c 	bhi.w	800bf54 <_dtoa_r+0x2ec>
 800be3c:	2b05      	cmp	r3, #5
 800be3e:	bfc4      	itt	gt
 800be40:	3b04      	subgt	r3, #4
 800be42:	9322      	strgt	r3, [sp, #136]	; 0x88
 800be44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be46:	bfc8      	it	gt
 800be48:	2400      	movgt	r4, #0
 800be4a:	f1a3 0302 	sub.w	r3, r3, #2
 800be4e:	bfd8      	it	le
 800be50:	2401      	movle	r4, #1
 800be52:	2b03      	cmp	r3, #3
 800be54:	f200 808a 	bhi.w	800bf6c <_dtoa_r+0x304>
 800be58:	e8df f003 	tbb	[pc, r3]
 800be5c:	5b4d4f2d 	.word	0x5b4d4f2d
 800be60:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800be64:	441c      	add	r4, r3
 800be66:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800be6a:	2b20      	cmp	r3, #32
 800be6c:	bfc3      	ittte	gt
 800be6e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be72:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800be76:	fa09 f303 	lslgt.w	r3, r9, r3
 800be7a:	f1c3 0320 	rsble	r3, r3, #32
 800be7e:	bfc6      	itte	gt
 800be80:	fa26 f000 	lsrgt.w	r0, r6, r0
 800be84:	4318      	orrgt	r0, r3
 800be86:	fa06 f003 	lslle.w	r0, r6, r3
 800be8a:	f7f4 fb17 	bl	80004bc <__aeabi_ui2d>
 800be8e:	2301      	movs	r3, #1
 800be90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800be94:	3c01      	subs	r4, #1
 800be96:	9313      	str	r3, [sp, #76]	; 0x4c
 800be98:	e76f      	b.n	800bd7a <_dtoa_r+0x112>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e7b2      	b.n	800be04 <_dtoa_r+0x19c>
 800be9e:	900f      	str	r0, [sp, #60]	; 0x3c
 800bea0:	e7b1      	b.n	800be06 <_dtoa_r+0x19e>
 800bea2:	9b06      	ldr	r3, [sp, #24]
 800bea4:	eba3 030a 	sub.w	r3, r3, sl
 800bea8:	9306      	str	r3, [sp, #24]
 800beaa:	f1ca 0300 	rsb	r3, sl, #0
 800beae:	930a      	str	r3, [sp, #40]	; 0x28
 800beb0:	2300      	movs	r3, #0
 800beb2:	930e      	str	r3, [sp, #56]	; 0x38
 800beb4:	e7be      	b.n	800be34 <_dtoa_r+0x1cc>
 800beb6:	2300      	movs	r3, #0
 800beb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800beba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	dc58      	bgt.n	800bf72 <_dtoa_r+0x30a>
 800bec0:	f04f 0901 	mov.w	r9, #1
 800bec4:	464b      	mov	r3, r9
 800bec6:	f8cd 9020 	str.w	r9, [sp, #32]
 800beca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bece:	2200      	movs	r2, #0
 800bed0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bed2:	6042      	str	r2, [r0, #4]
 800bed4:	2204      	movs	r2, #4
 800bed6:	f102 0614 	add.w	r6, r2, #20
 800beda:	429e      	cmp	r6, r3
 800bedc:	6841      	ldr	r1, [r0, #4]
 800bede:	d94e      	bls.n	800bf7e <_dtoa_r+0x316>
 800bee0:	4628      	mov	r0, r5
 800bee2:	f000 fcdb 	bl	800c89c <_Balloc>
 800bee6:	9003      	str	r0, [sp, #12]
 800bee8:	2800      	cmp	r0, #0
 800beea:	d14c      	bne.n	800bf86 <_dtoa_r+0x31e>
 800beec:	4602      	mov	r2, r0
 800beee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bef2:	4b17      	ldr	r3, [pc, #92]	; (800bf50 <_dtoa_r+0x2e8>)
 800bef4:	e6cc      	b.n	800bc90 <_dtoa_r+0x28>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e7de      	b.n	800beb8 <_dtoa_r+0x250>
 800befa:	2300      	movs	r3, #0
 800befc:	930b      	str	r3, [sp, #44]	; 0x2c
 800befe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf00:	eb0a 0903 	add.w	r9, sl, r3
 800bf04:	f109 0301 	add.w	r3, r9, #1
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	9308      	str	r3, [sp, #32]
 800bf0c:	bfb8      	it	lt
 800bf0e:	2301      	movlt	r3, #1
 800bf10:	e7dd      	b.n	800bece <_dtoa_r+0x266>
 800bf12:	2301      	movs	r3, #1
 800bf14:	e7f2      	b.n	800befc <_dtoa_r+0x294>
 800bf16:	bf00      	nop
 800bf18:	636f4361 	.word	0x636f4361
 800bf1c:	3fd287a7 	.word	0x3fd287a7
 800bf20:	8b60c8b3 	.word	0x8b60c8b3
 800bf24:	3fc68a28 	.word	0x3fc68a28
 800bf28:	509f79fb 	.word	0x509f79fb
 800bf2c:	3fd34413 	.word	0x3fd34413
 800bf30:	0800e75d 	.word	0x0800e75d
 800bf34:	0800e774 	.word	0x0800e774
 800bf38:	7ff00000 	.word	0x7ff00000
 800bf3c:	0800e759 	.word	0x0800e759
 800bf40:	0800e750 	.word	0x0800e750
 800bf44:	0800e72d 	.word	0x0800e72d
 800bf48:	3ff80000 	.word	0x3ff80000
 800bf4c:	0800e868 	.word	0x0800e868
 800bf50:	0800e7cf 	.word	0x0800e7cf
 800bf54:	2401      	movs	r4, #1
 800bf56:	2300      	movs	r3, #0
 800bf58:	940b      	str	r4, [sp, #44]	; 0x2c
 800bf5a:	9322      	str	r3, [sp, #136]	; 0x88
 800bf5c:	f04f 39ff 	mov.w	r9, #4294967295
 800bf60:	2200      	movs	r2, #0
 800bf62:	2312      	movs	r3, #18
 800bf64:	f8cd 9020 	str.w	r9, [sp, #32]
 800bf68:	9223      	str	r2, [sp, #140]	; 0x8c
 800bf6a:	e7b0      	b.n	800bece <_dtoa_r+0x266>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf70:	e7f4      	b.n	800bf5c <_dtoa_r+0x2f4>
 800bf72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800bf76:	464b      	mov	r3, r9
 800bf78:	f8cd 9020 	str.w	r9, [sp, #32]
 800bf7c:	e7a7      	b.n	800bece <_dtoa_r+0x266>
 800bf7e:	3101      	adds	r1, #1
 800bf80:	6041      	str	r1, [r0, #4]
 800bf82:	0052      	lsls	r2, r2, #1
 800bf84:	e7a7      	b.n	800bed6 <_dtoa_r+0x26e>
 800bf86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf88:	9a03      	ldr	r2, [sp, #12]
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	9b08      	ldr	r3, [sp, #32]
 800bf8e:	2b0e      	cmp	r3, #14
 800bf90:	f200 80a8 	bhi.w	800c0e4 <_dtoa_r+0x47c>
 800bf94:	2c00      	cmp	r4, #0
 800bf96:	f000 80a5 	beq.w	800c0e4 <_dtoa_r+0x47c>
 800bf9a:	f1ba 0f00 	cmp.w	sl, #0
 800bf9e:	dd34      	ble.n	800c00a <_dtoa_r+0x3a2>
 800bfa0:	4a9a      	ldr	r2, [pc, #616]	; (800c20c <_dtoa_r+0x5a4>)
 800bfa2:	f00a 030f 	and.w	r3, sl, #15
 800bfa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfaa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800bfae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bfb6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800bfba:	d016      	beq.n	800bfea <_dtoa_r+0x382>
 800bfbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bfc0:	4b93      	ldr	r3, [pc, #588]	; (800c210 <_dtoa_r+0x5a8>)
 800bfc2:	2703      	movs	r7, #3
 800bfc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfc8:	f7f4 fc1c 	bl	8000804 <__aeabi_ddiv>
 800bfcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfd0:	f004 040f 	and.w	r4, r4, #15
 800bfd4:	4e8e      	ldr	r6, [pc, #568]	; (800c210 <_dtoa_r+0x5a8>)
 800bfd6:	b954      	cbnz	r4, 800bfee <_dtoa_r+0x386>
 800bfd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfe0:	f7f4 fc10 	bl	8000804 <__aeabi_ddiv>
 800bfe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfe8:	e029      	b.n	800c03e <_dtoa_r+0x3d6>
 800bfea:	2702      	movs	r7, #2
 800bfec:	e7f2      	b.n	800bfd4 <_dtoa_r+0x36c>
 800bfee:	07e1      	lsls	r1, r4, #31
 800bff0:	d508      	bpl.n	800c004 <_dtoa_r+0x39c>
 800bff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bff6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bffa:	f7f4 fad9 	bl	80005b0 <__aeabi_dmul>
 800bffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c002:	3701      	adds	r7, #1
 800c004:	1064      	asrs	r4, r4, #1
 800c006:	3608      	adds	r6, #8
 800c008:	e7e5      	b.n	800bfd6 <_dtoa_r+0x36e>
 800c00a:	f000 80a5 	beq.w	800c158 <_dtoa_r+0x4f0>
 800c00e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c012:	f1ca 0400 	rsb	r4, sl, #0
 800c016:	4b7d      	ldr	r3, [pc, #500]	; (800c20c <_dtoa_r+0x5a4>)
 800c018:	f004 020f 	and.w	r2, r4, #15
 800c01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 fac4 	bl	80005b0 <__aeabi_dmul>
 800c028:	2702      	movs	r7, #2
 800c02a:	2300      	movs	r3, #0
 800c02c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c030:	4e77      	ldr	r6, [pc, #476]	; (800c210 <_dtoa_r+0x5a8>)
 800c032:	1124      	asrs	r4, r4, #4
 800c034:	2c00      	cmp	r4, #0
 800c036:	f040 8084 	bne.w	800c142 <_dtoa_r+0x4da>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1d2      	bne.n	800bfe4 <_dtoa_r+0x37c>
 800c03e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 808b 	beq.w	800c15c <_dtoa_r+0x4f4>
 800c046:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c04a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c04e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c052:	2200      	movs	r2, #0
 800c054:	4b6f      	ldr	r3, [pc, #444]	; (800c214 <_dtoa_r+0x5ac>)
 800c056:	f7f4 fd1d 	bl	8000a94 <__aeabi_dcmplt>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d07e      	beq.n	800c15c <_dtoa_r+0x4f4>
 800c05e:	9b08      	ldr	r3, [sp, #32]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d07b      	beq.n	800c15c <_dtoa_r+0x4f4>
 800c064:	f1b9 0f00 	cmp.w	r9, #0
 800c068:	dd38      	ble.n	800c0dc <_dtoa_r+0x474>
 800c06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c06e:	2200      	movs	r2, #0
 800c070:	4b69      	ldr	r3, [pc, #420]	; (800c218 <_dtoa_r+0x5b0>)
 800c072:	f7f4 fa9d 	bl	80005b0 <__aeabi_dmul>
 800c076:	464c      	mov	r4, r9
 800c078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c07c:	f10a 38ff 	add.w	r8, sl, #4294967295
 800c080:	3701      	adds	r7, #1
 800c082:	4638      	mov	r0, r7
 800c084:	f7f4 fa2a 	bl	80004dc <__aeabi_i2d>
 800c088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c08c:	f7f4 fa90 	bl	80005b0 <__aeabi_dmul>
 800c090:	2200      	movs	r2, #0
 800c092:	4b62      	ldr	r3, [pc, #392]	; (800c21c <_dtoa_r+0x5b4>)
 800c094:	f7f4 f8d6 	bl	8000244 <__adddf3>
 800c098:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c09c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0a0:	9611      	str	r6, [sp, #68]	; 0x44
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	d15d      	bne.n	800c162 <_dtoa_r+0x4fa>
 800c0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	4b5c      	ldr	r3, [pc, #368]	; (800c220 <_dtoa_r+0x5b8>)
 800c0ae:	f7f4 f8c7 	bl	8000240 <__aeabi_dsub>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0ba:	4633      	mov	r3, r6
 800c0bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0be:	f7f4 fd07 	bl	8000ad0 <__aeabi_dcmpgt>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	f040 829c 	bne.w	800c600 <_dtoa_r+0x998>
 800c0c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0d2:	f7f4 fcdf 	bl	8000a94 <__aeabi_dcmplt>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f040 8290 	bne.w	800c5fc <_dtoa_r+0x994>
 800c0dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c0e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c0e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f2c0 8152 	blt.w	800c390 <_dtoa_r+0x728>
 800c0ec:	f1ba 0f0e 	cmp.w	sl, #14
 800c0f0:	f300 814e 	bgt.w	800c390 <_dtoa_r+0x728>
 800c0f4:	4b45      	ldr	r3, [pc, #276]	; (800c20c <_dtoa_r+0x5a4>)
 800c0f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c0fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c0fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c104:	2b00      	cmp	r3, #0
 800c106:	f280 80db 	bge.w	800c2c0 <_dtoa_r+0x658>
 800c10a:	9b08      	ldr	r3, [sp, #32]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f300 80d7 	bgt.w	800c2c0 <_dtoa_r+0x658>
 800c112:	f040 8272 	bne.w	800c5fa <_dtoa_r+0x992>
 800c116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c11a:	2200      	movs	r2, #0
 800c11c:	4b40      	ldr	r3, [pc, #256]	; (800c220 <_dtoa_r+0x5b8>)
 800c11e:	f7f4 fa47 	bl	80005b0 <__aeabi_dmul>
 800c122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c126:	f7f4 fcc9 	bl	8000abc <__aeabi_dcmpge>
 800c12a:	9c08      	ldr	r4, [sp, #32]
 800c12c:	4626      	mov	r6, r4
 800c12e:	2800      	cmp	r0, #0
 800c130:	f040 8248 	bne.w	800c5c4 <_dtoa_r+0x95c>
 800c134:	2331      	movs	r3, #49	; 0x31
 800c136:	9f03      	ldr	r7, [sp, #12]
 800c138:	f10a 0a01 	add.w	sl, sl, #1
 800c13c:	f807 3b01 	strb.w	r3, [r7], #1
 800c140:	e244      	b.n	800c5cc <_dtoa_r+0x964>
 800c142:	07e2      	lsls	r2, r4, #31
 800c144:	d505      	bpl.n	800c152 <_dtoa_r+0x4ea>
 800c146:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c14a:	f7f4 fa31 	bl	80005b0 <__aeabi_dmul>
 800c14e:	2301      	movs	r3, #1
 800c150:	3701      	adds	r7, #1
 800c152:	1064      	asrs	r4, r4, #1
 800c154:	3608      	adds	r6, #8
 800c156:	e76d      	b.n	800c034 <_dtoa_r+0x3cc>
 800c158:	2702      	movs	r7, #2
 800c15a:	e770      	b.n	800c03e <_dtoa_r+0x3d6>
 800c15c:	46d0      	mov	r8, sl
 800c15e:	9c08      	ldr	r4, [sp, #32]
 800c160:	e78f      	b.n	800c082 <_dtoa_r+0x41a>
 800c162:	9903      	ldr	r1, [sp, #12]
 800c164:	4b29      	ldr	r3, [pc, #164]	; (800c20c <_dtoa_r+0x5a4>)
 800c166:	4421      	add	r1, r4
 800c168:	9112      	str	r1, [sp, #72]	; 0x48
 800c16a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c16c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c170:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c174:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c178:	2900      	cmp	r1, #0
 800c17a:	d055      	beq.n	800c228 <_dtoa_r+0x5c0>
 800c17c:	2000      	movs	r0, #0
 800c17e:	4929      	ldr	r1, [pc, #164]	; (800c224 <_dtoa_r+0x5bc>)
 800c180:	f7f4 fb40 	bl	8000804 <__aeabi_ddiv>
 800c184:	463b      	mov	r3, r7
 800c186:	4632      	mov	r2, r6
 800c188:	f7f4 f85a 	bl	8000240 <__aeabi_dsub>
 800c18c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c190:	9f03      	ldr	r7, [sp, #12]
 800c192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c196:	f7f4 fcbb 	bl	8000b10 <__aeabi_d2iz>
 800c19a:	4604      	mov	r4, r0
 800c19c:	f7f4 f99e 	bl	80004dc <__aeabi_i2d>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1a8:	f7f4 f84a 	bl	8000240 <__aeabi_dsub>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	3430      	adds	r4, #48	; 0x30
 800c1b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1ba:	f807 4b01 	strb.w	r4, [r7], #1
 800c1be:	f7f4 fc69 	bl	8000a94 <__aeabi_dcmplt>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d174      	bne.n	800c2b0 <_dtoa_r+0x648>
 800c1c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	4911      	ldr	r1, [pc, #68]	; (800c214 <_dtoa_r+0x5ac>)
 800c1ce:	f7f4 f837 	bl	8000240 <__aeabi_dsub>
 800c1d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1d6:	f7f4 fc5d 	bl	8000a94 <__aeabi_dcmplt>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	f040 80b7 	bne.w	800c34e <_dtoa_r+0x6e6>
 800c1e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1e2:	429f      	cmp	r7, r3
 800c1e4:	f43f af7a 	beq.w	800c0dc <_dtoa_r+0x474>
 800c1e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	4b0a      	ldr	r3, [pc, #40]	; (800c218 <_dtoa_r+0x5b0>)
 800c1f0:	f7f4 f9de 	bl	80005b0 <__aeabi_dmul>
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c1fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1fe:	4b06      	ldr	r3, [pc, #24]	; (800c218 <_dtoa_r+0x5b0>)
 800c200:	f7f4 f9d6 	bl	80005b0 <__aeabi_dmul>
 800c204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c208:	e7c3      	b.n	800c192 <_dtoa_r+0x52a>
 800c20a:	bf00      	nop
 800c20c:	0800e868 	.word	0x0800e868
 800c210:	0800e840 	.word	0x0800e840
 800c214:	3ff00000 	.word	0x3ff00000
 800c218:	40240000 	.word	0x40240000
 800c21c:	401c0000 	.word	0x401c0000
 800c220:	40140000 	.word	0x40140000
 800c224:	3fe00000 	.word	0x3fe00000
 800c228:	4630      	mov	r0, r6
 800c22a:	4639      	mov	r1, r7
 800c22c:	f7f4 f9c0 	bl	80005b0 <__aeabi_dmul>
 800c230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c232:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c236:	9c03      	ldr	r4, [sp, #12]
 800c238:	9314      	str	r3, [sp, #80]	; 0x50
 800c23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c23e:	f7f4 fc67 	bl	8000b10 <__aeabi_d2iz>
 800c242:	9015      	str	r0, [sp, #84]	; 0x54
 800c244:	f7f4 f94a 	bl	80004dc <__aeabi_i2d>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c250:	f7f3 fff6 	bl	8000240 <__aeabi_dsub>
 800c254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c256:	4606      	mov	r6, r0
 800c258:	3330      	adds	r3, #48	; 0x30
 800c25a:	f804 3b01 	strb.w	r3, [r4], #1
 800c25e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c260:	460f      	mov	r7, r1
 800c262:	429c      	cmp	r4, r3
 800c264:	f04f 0200 	mov.w	r2, #0
 800c268:	d124      	bne.n	800c2b4 <_dtoa_r+0x64c>
 800c26a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c26e:	4bb0      	ldr	r3, [pc, #704]	; (800c530 <_dtoa_r+0x8c8>)
 800c270:	f7f3 ffe8 	bl	8000244 <__adddf3>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 fc28 	bl	8000ad0 <__aeabi_dcmpgt>
 800c280:	2800      	cmp	r0, #0
 800c282:	d163      	bne.n	800c34c <_dtoa_r+0x6e4>
 800c284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c288:	2000      	movs	r0, #0
 800c28a:	49a9      	ldr	r1, [pc, #676]	; (800c530 <_dtoa_r+0x8c8>)
 800c28c:	f7f3 ffd8 	bl	8000240 <__aeabi_dsub>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4630      	mov	r0, r6
 800c296:	4639      	mov	r1, r7
 800c298:	f7f4 fbfc 	bl	8000a94 <__aeabi_dcmplt>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	f43f af1d 	beq.w	800c0dc <_dtoa_r+0x474>
 800c2a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c2a4:	1e7b      	subs	r3, r7, #1
 800c2a6:	9314      	str	r3, [sp, #80]	; 0x50
 800c2a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c2ac:	2b30      	cmp	r3, #48	; 0x30
 800c2ae:	d0f8      	beq.n	800c2a2 <_dtoa_r+0x63a>
 800c2b0:	46c2      	mov	sl, r8
 800c2b2:	e03b      	b.n	800c32c <_dtoa_r+0x6c4>
 800c2b4:	4b9f      	ldr	r3, [pc, #636]	; (800c534 <_dtoa_r+0x8cc>)
 800c2b6:	f7f4 f97b 	bl	80005b0 <__aeabi_dmul>
 800c2ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2be:	e7bc      	b.n	800c23a <_dtoa_r+0x5d2>
 800c2c0:	9f03      	ldr	r7, [sp, #12]
 800c2c2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c2c6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	4649      	mov	r1, r9
 800c2ce:	f7f4 fa99 	bl	8000804 <__aeabi_ddiv>
 800c2d2:	f7f4 fc1d 	bl	8000b10 <__aeabi_d2iz>
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	f7f4 f900 	bl	80004dc <__aeabi_i2d>
 800c2dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2e0:	f7f4 f966 	bl	80005b0 <__aeabi_dmul>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4640      	mov	r0, r8
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	f7f3 ffa8 	bl	8000240 <__aeabi_dsub>
 800c2f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c2f4:	f807 6b01 	strb.w	r6, [r7], #1
 800c2f8:	9e03      	ldr	r6, [sp, #12]
 800c2fa:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c2fe:	1bbe      	subs	r6, r7, r6
 800c300:	45b4      	cmp	ip, r6
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	d136      	bne.n	800c376 <_dtoa_r+0x70e>
 800c308:	f7f3 ff9c 	bl	8000244 <__adddf3>
 800c30c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c310:	4680      	mov	r8, r0
 800c312:	4689      	mov	r9, r1
 800c314:	f7f4 fbdc 	bl	8000ad0 <__aeabi_dcmpgt>
 800c318:	bb58      	cbnz	r0, 800c372 <_dtoa_r+0x70a>
 800c31a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c31e:	4640      	mov	r0, r8
 800c320:	4649      	mov	r1, r9
 800c322:	f7f4 fbad 	bl	8000a80 <__aeabi_dcmpeq>
 800c326:	b108      	cbz	r0, 800c32c <_dtoa_r+0x6c4>
 800c328:	07e1      	lsls	r1, r4, #31
 800c32a:	d422      	bmi.n	800c372 <_dtoa_r+0x70a>
 800c32c:	4628      	mov	r0, r5
 800c32e:	4659      	mov	r1, fp
 800c330:	f000 faf4 	bl	800c91c <_Bfree>
 800c334:	2300      	movs	r3, #0
 800c336:	703b      	strb	r3, [r7, #0]
 800c338:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c33a:	f10a 0001 	add.w	r0, sl, #1
 800c33e:	6018      	str	r0, [r3, #0]
 800c340:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c342:	2b00      	cmp	r3, #0
 800c344:	f43f acde 	beq.w	800bd04 <_dtoa_r+0x9c>
 800c348:	601f      	str	r7, [r3, #0]
 800c34a:	e4db      	b.n	800bd04 <_dtoa_r+0x9c>
 800c34c:	4627      	mov	r7, r4
 800c34e:	463b      	mov	r3, r7
 800c350:	461f      	mov	r7, r3
 800c352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c356:	2a39      	cmp	r2, #57	; 0x39
 800c358:	d107      	bne.n	800c36a <_dtoa_r+0x702>
 800c35a:	9a03      	ldr	r2, [sp, #12]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d1f7      	bne.n	800c350 <_dtoa_r+0x6e8>
 800c360:	2230      	movs	r2, #48	; 0x30
 800c362:	9903      	ldr	r1, [sp, #12]
 800c364:	f108 0801 	add.w	r8, r8, #1
 800c368:	700a      	strb	r2, [r1, #0]
 800c36a:	781a      	ldrb	r2, [r3, #0]
 800c36c:	3201      	adds	r2, #1
 800c36e:	701a      	strb	r2, [r3, #0]
 800c370:	e79e      	b.n	800c2b0 <_dtoa_r+0x648>
 800c372:	46d0      	mov	r8, sl
 800c374:	e7eb      	b.n	800c34e <_dtoa_r+0x6e6>
 800c376:	2200      	movs	r2, #0
 800c378:	4b6e      	ldr	r3, [pc, #440]	; (800c534 <_dtoa_r+0x8cc>)
 800c37a:	f7f4 f919 	bl	80005b0 <__aeabi_dmul>
 800c37e:	2200      	movs	r2, #0
 800c380:	2300      	movs	r3, #0
 800c382:	4680      	mov	r8, r0
 800c384:	4689      	mov	r9, r1
 800c386:	f7f4 fb7b 	bl	8000a80 <__aeabi_dcmpeq>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d09b      	beq.n	800c2c6 <_dtoa_r+0x65e>
 800c38e:	e7cd      	b.n	800c32c <_dtoa_r+0x6c4>
 800c390:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c392:	2a00      	cmp	r2, #0
 800c394:	f000 80d0 	beq.w	800c538 <_dtoa_r+0x8d0>
 800c398:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c39a:	2a01      	cmp	r2, #1
 800c39c:	f300 80ae 	bgt.w	800c4fc <_dtoa_r+0x894>
 800c3a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3a2:	2a00      	cmp	r2, #0
 800c3a4:	f000 80a6 	beq.w	800c4f4 <_dtoa_r+0x88c>
 800c3a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c3ae:	9f06      	ldr	r7, [sp, #24]
 800c3b0:	9a06      	ldr	r2, [sp, #24]
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	441a      	add	r2, r3
 800c3b6:	9206      	str	r2, [sp, #24]
 800c3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	441a      	add	r2, r3
 800c3be:	9209      	str	r2, [sp, #36]	; 0x24
 800c3c0:	f000 fb62 	bl	800ca88 <__i2b>
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	2f00      	cmp	r7, #0
 800c3c8:	dd0c      	ble.n	800c3e4 <_dtoa_r+0x77c>
 800c3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	dd09      	ble.n	800c3e4 <_dtoa_r+0x77c>
 800c3d0:	42bb      	cmp	r3, r7
 800c3d2:	bfa8      	it	ge
 800c3d4:	463b      	movge	r3, r7
 800c3d6:	9a06      	ldr	r2, [sp, #24]
 800c3d8:	1aff      	subs	r7, r7, r3
 800c3da:	1ad2      	subs	r2, r2, r3
 800c3dc:	9206      	str	r2, [sp, #24]
 800c3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e0:	1ad3      	subs	r3, r2, r3
 800c3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e6:	b1f3      	cbz	r3, 800c426 <_dtoa_r+0x7be>
 800c3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 80a8 	beq.w	800c540 <_dtoa_r+0x8d8>
 800c3f0:	2c00      	cmp	r4, #0
 800c3f2:	dd10      	ble.n	800c416 <_dtoa_r+0x7ae>
 800c3f4:	4631      	mov	r1, r6
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	f000 fc03 	bl	800cc04 <__pow5mult>
 800c3fe:	465a      	mov	r2, fp
 800c400:	4601      	mov	r1, r0
 800c402:	4606      	mov	r6, r0
 800c404:	4628      	mov	r0, r5
 800c406:	f000 fb55 	bl	800cab4 <__multiply>
 800c40a:	4680      	mov	r8, r0
 800c40c:	4659      	mov	r1, fp
 800c40e:	4628      	mov	r0, r5
 800c410:	f000 fa84 	bl	800c91c <_Bfree>
 800c414:	46c3      	mov	fp, r8
 800c416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c418:	1b1a      	subs	r2, r3, r4
 800c41a:	d004      	beq.n	800c426 <_dtoa_r+0x7be>
 800c41c:	4659      	mov	r1, fp
 800c41e:	4628      	mov	r0, r5
 800c420:	f000 fbf0 	bl	800cc04 <__pow5mult>
 800c424:	4683      	mov	fp, r0
 800c426:	2101      	movs	r1, #1
 800c428:	4628      	mov	r0, r5
 800c42a:	f000 fb2d 	bl	800ca88 <__i2b>
 800c42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c430:	4604      	mov	r4, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	f340 8086 	ble.w	800c544 <_dtoa_r+0x8dc>
 800c438:	461a      	mov	r2, r3
 800c43a:	4601      	mov	r1, r0
 800c43c:	4628      	mov	r0, r5
 800c43e:	f000 fbe1 	bl	800cc04 <__pow5mult>
 800c442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c444:	4604      	mov	r4, r0
 800c446:	2b01      	cmp	r3, #1
 800c448:	dd7f      	ble.n	800c54a <_dtoa_r+0x8e2>
 800c44a:	f04f 0800 	mov.w	r8, #0
 800c44e:	6923      	ldr	r3, [r4, #16]
 800c450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c454:	6918      	ldr	r0, [r3, #16]
 800c456:	f000 fac9 	bl	800c9ec <__hi0bits>
 800c45a:	f1c0 0020 	rsb	r0, r0, #32
 800c45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c460:	4418      	add	r0, r3
 800c462:	f010 001f 	ands.w	r0, r0, #31
 800c466:	f000 8092 	beq.w	800c58e <_dtoa_r+0x926>
 800c46a:	f1c0 0320 	rsb	r3, r0, #32
 800c46e:	2b04      	cmp	r3, #4
 800c470:	f340 808a 	ble.w	800c588 <_dtoa_r+0x920>
 800c474:	f1c0 001c 	rsb	r0, r0, #28
 800c478:	9b06      	ldr	r3, [sp, #24]
 800c47a:	4407      	add	r7, r0
 800c47c:	4403      	add	r3, r0
 800c47e:	9306      	str	r3, [sp, #24]
 800c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c482:	4403      	add	r3, r0
 800c484:	9309      	str	r3, [sp, #36]	; 0x24
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	dd05      	ble.n	800c498 <_dtoa_r+0x830>
 800c48c:	4659      	mov	r1, fp
 800c48e:	461a      	mov	r2, r3
 800c490:	4628      	mov	r0, r5
 800c492:	f000 fc11 	bl	800ccb8 <__lshift>
 800c496:	4683      	mov	fp, r0
 800c498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dd05      	ble.n	800c4aa <_dtoa_r+0x842>
 800c49e:	4621      	mov	r1, r4
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f000 fc08 	bl	800ccb8 <__lshift>
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d070      	beq.n	800c592 <_dtoa_r+0x92a>
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4658      	mov	r0, fp
 800c4b4:	f000 fc70 	bl	800cd98 <__mcmp>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	da6a      	bge.n	800c592 <_dtoa_r+0x92a>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	4659      	mov	r1, fp
 800c4c0:	220a      	movs	r2, #10
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	f000 fa4c 	bl	800c960 <__multadd>
 800c4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4ca:	4683      	mov	fp, r0
 800c4cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	f000 8194 	beq.w	800c7fe <_dtoa_r+0xb96>
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	2300      	movs	r3, #0
 800c4da:	220a      	movs	r2, #10
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 fa3f 	bl	800c960 <__multadd>
 800c4e2:	f1b9 0f00 	cmp.w	r9, #0
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	f300 8093 	bgt.w	800c612 <_dtoa_r+0x9aa>
 800c4ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	dc57      	bgt.n	800c5a2 <_dtoa_r+0x93a>
 800c4f2:	e08e      	b.n	800c612 <_dtoa_r+0x9aa>
 800c4f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4fa:	e757      	b.n	800c3ac <_dtoa_r+0x744>
 800c4fc:	9b08      	ldr	r3, [sp, #32]
 800c4fe:	1e5c      	subs	r4, r3, #1
 800c500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c502:	42a3      	cmp	r3, r4
 800c504:	bfb7      	itett	lt
 800c506:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c508:	1b1c      	subge	r4, r3, r4
 800c50a:	1ae2      	sublt	r2, r4, r3
 800c50c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c50e:	bfbe      	ittt	lt
 800c510:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c512:	189b      	addlt	r3, r3, r2
 800c514:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c516:	9b08      	ldr	r3, [sp, #32]
 800c518:	bfb8      	it	lt
 800c51a:	2400      	movlt	r4, #0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfbb      	ittet	lt
 800c520:	9b06      	ldrlt	r3, [sp, #24]
 800c522:	9a08      	ldrlt	r2, [sp, #32]
 800c524:	9f06      	ldrge	r7, [sp, #24]
 800c526:	1a9f      	sublt	r7, r3, r2
 800c528:	bfac      	ite	ge
 800c52a:	9b08      	ldrge	r3, [sp, #32]
 800c52c:	2300      	movlt	r3, #0
 800c52e:	e73f      	b.n	800c3b0 <_dtoa_r+0x748>
 800c530:	3fe00000 	.word	0x3fe00000
 800c534:	40240000 	.word	0x40240000
 800c538:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c53a:	9f06      	ldr	r7, [sp, #24]
 800c53c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c53e:	e742      	b.n	800c3c6 <_dtoa_r+0x75e>
 800c540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c542:	e76b      	b.n	800c41c <_dtoa_r+0x7b4>
 800c544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c546:	2b01      	cmp	r3, #1
 800c548:	dc19      	bgt.n	800c57e <_dtoa_r+0x916>
 800c54a:	9b04      	ldr	r3, [sp, #16]
 800c54c:	b9bb      	cbnz	r3, 800c57e <_dtoa_r+0x916>
 800c54e:	9b05      	ldr	r3, [sp, #20]
 800c550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c554:	b99b      	cbnz	r3, 800c57e <_dtoa_r+0x916>
 800c556:	9b05      	ldr	r3, [sp, #20]
 800c558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c55c:	0d1b      	lsrs	r3, r3, #20
 800c55e:	051b      	lsls	r3, r3, #20
 800c560:	b183      	cbz	r3, 800c584 <_dtoa_r+0x91c>
 800c562:	f04f 0801 	mov.w	r8, #1
 800c566:	9b06      	ldr	r3, [sp, #24]
 800c568:	3301      	adds	r3, #1
 800c56a:	9306      	str	r3, [sp, #24]
 800c56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c56e:	3301      	adds	r3, #1
 800c570:	9309      	str	r3, [sp, #36]	; 0x24
 800c572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	f47f af6a 	bne.w	800c44e <_dtoa_r+0x7e6>
 800c57a:	2001      	movs	r0, #1
 800c57c:	e76f      	b.n	800c45e <_dtoa_r+0x7f6>
 800c57e:	f04f 0800 	mov.w	r8, #0
 800c582:	e7f6      	b.n	800c572 <_dtoa_r+0x90a>
 800c584:	4698      	mov	r8, r3
 800c586:	e7f4      	b.n	800c572 <_dtoa_r+0x90a>
 800c588:	f43f af7d 	beq.w	800c486 <_dtoa_r+0x81e>
 800c58c:	4618      	mov	r0, r3
 800c58e:	301c      	adds	r0, #28
 800c590:	e772      	b.n	800c478 <_dtoa_r+0x810>
 800c592:	9b08      	ldr	r3, [sp, #32]
 800c594:	2b00      	cmp	r3, #0
 800c596:	dc36      	bgt.n	800c606 <_dtoa_r+0x99e>
 800c598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	dd33      	ble.n	800c606 <_dtoa_r+0x99e>
 800c59e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c5a2:	f1b9 0f00 	cmp.w	r9, #0
 800c5a6:	d10d      	bne.n	800c5c4 <_dtoa_r+0x95c>
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	2205      	movs	r2, #5
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f000 f9d6 	bl	800c960 <__multadd>
 800c5b4:	4601      	mov	r1, r0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4658      	mov	r0, fp
 800c5ba:	f000 fbed 	bl	800cd98 <__mcmp>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	f73f adb8 	bgt.w	800c134 <_dtoa_r+0x4cc>
 800c5c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5c6:	9f03      	ldr	r7, [sp, #12]
 800c5c8:	ea6f 0a03 	mvn.w	sl, r3
 800c5cc:	f04f 0800 	mov.w	r8, #0
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	f000 f9a2 	bl	800c91c <_Bfree>
 800c5d8:	2e00      	cmp	r6, #0
 800c5da:	f43f aea7 	beq.w	800c32c <_dtoa_r+0x6c4>
 800c5de:	f1b8 0f00 	cmp.w	r8, #0
 800c5e2:	d005      	beq.n	800c5f0 <_dtoa_r+0x988>
 800c5e4:	45b0      	cmp	r8, r6
 800c5e6:	d003      	beq.n	800c5f0 <_dtoa_r+0x988>
 800c5e8:	4641      	mov	r1, r8
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f000 f996 	bl	800c91c <_Bfree>
 800c5f0:	4631      	mov	r1, r6
 800c5f2:	4628      	mov	r0, r5
 800c5f4:	f000 f992 	bl	800c91c <_Bfree>
 800c5f8:	e698      	b.n	800c32c <_dtoa_r+0x6c4>
 800c5fa:	2400      	movs	r4, #0
 800c5fc:	4626      	mov	r6, r4
 800c5fe:	e7e1      	b.n	800c5c4 <_dtoa_r+0x95c>
 800c600:	46c2      	mov	sl, r8
 800c602:	4626      	mov	r6, r4
 800c604:	e596      	b.n	800c134 <_dtoa_r+0x4cc>
 800c606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f000 80fd 	beq.w	800c80c <_dtoa_r+0xba4>
 800c612:	2f00      	cmp	r7, #0
 800c614:	dd05      	ble.n	800c622 <_dtoa_r+0x9ba>
 800c616:	4631      	mov	r1, r6
 800c618:	463a      	mov	r2, r7
 800c61a:	4628      	mov	r0, r5
 800c61c:	f000 fb4c 	bl	800ccb8 <__lshift>
 800c620:	4606      	mov	r6, r0
 800c622:	f1b8 0f00 	cmp.w	r8, #0
 800c626:	d05c      	beq.n	800c6e2 <_dtoa_r+0xa7a>
 800c628:	4628      	mov	r0, r5
 800c62a:	6871      	ldr	r1, [r6, #4]
 800c62c:	f000 f936 	bl	800c89c <_Balloc>
 800c630:	4607      	mov	r7, r0
 800c632:	b928      	cbnz	r0, 800c640 <_dtoa_r+0x9d8>
 800c634:	4602      	mov	r2, r0
 800c636:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c63a:	4b7f      	ldr	r3, [pc, #508]	; (800c838 <_dtoa_r+0xbd0>)
 800c63c:	f7ff bb28 	b.w	800bc90 <_dtoa_r+0x28>
 800c640:	6932      	ldr	r2, [r6, #16]
 800c642:	f106 010c 	add.w	r1, r6, #12
 800c646:	3202      	adds	r2, #2
 800c648:	0092      	lsls	r2, r2, #2
 800c64a:	300c      	adds	r0, #12
 800c64c:	f000 f90c 	bl	800c868 <memcpy>
 800c650:	2201      	movs	r2, #1
 800c652:	4639      	mov	r1, r7
 800c654:	4628      	mov	r0, r5
 800c656:	f000 fb2f 	bl	800ccb8 <__lshift>
 800c65a:	46b0      	mov	r8, r6
 800c65c:	4606      	mov	r6, r0
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	3301      	adds	r3, #1
 800c662:	9308      	str	r3, [sp, #32]
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	444b      	add	r3, r9
 800c668:	930a      	str	r3, [sp, #40]	; 0x28
 800c66a:	9b04      	ldr	r3, [sp, #16]
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	9309      	str	r3, [sp, #36]	; 0x24
 800c672:	9b08      	ldr	r3, [sp, #32]
 800c674:	4621      	mov	r1, r4
 800c676:	3b01      	subs	r3, #1
 800c678:	4658      	mov	r0, fp
 800c67a:	9304      	str	r3, [sp, #16]
 800c67c:	f7ff fa68 	bl	800bb50 <quorem>
 800c680:	4603      	mov	r3, r0
 800c682:	4641      	mov	r1, r8
 800c684:	3330      	adds	r3, #48	; 0x30
 800c686:	9006      	str	r0, [sp, #24]
 800c688:	4658      	mov	r0, fp
 800c68a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c68c:	f000 fb84 	bl	800cd98 <__mcmp>
 800c690:	4632      	mov	r2, r6
 800c692:	4681      	mov	r9, r0
 800c694:	4621      	mov	r1, r4
 800c696:	4628      	mov	r0, r5
 800c698:	f000 fb9a 	bl	800cdd0 <__mdiff>
 800c69c:	68c2      	ldr	r2, [r0, #12]
 800c69e:	4607      	mov	r7, r0
 800c6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a2:	bb02      	cbnz	r2, 800c6e6 <_dtoa_r+0xa7e>
 800c6a4:	4601      	mov	r1, r0
 800c6a6:	4658      	mov	r0, fp
 800c6a8:	f000 fb76 	bl	800cd98 <__mcmp>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c6b8:	f000 f930 	bl	800c91c <_Bfree>
 800c6bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6c0:	9f08      	ldr	r7, [sp, #32]
 800c6c2:	ea43 0102 	orr.w	r1, r3, r2
 800c6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c8:	430b      	orrs	r3, r1
 800c6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6cc:	d10d      	bne.n	800c6ea <_dtoa_r+0xa82>
 800c6ce:	2b39      	cmp	r3, #57	; 0x39
 800c6d0:	d029      	beq.n	800c726 <_dtoa_r+0xabe>
 800c6d2:	f1b9 0f00 	cmp.w	r9, #0
 800c6d6:	dd01      	ble.n	800c6dc <_dtoa_r+0xa74>
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	3331      	adds	r3, #49	; 0x31
 800c6dc:	9a04      	ldr	r2, [sp, #16]
 800c6de:	7013      	strb	r3, [r2, #0]
 800c6e0:	e776      	b.n	800c5d0 <_dtoa_r+0x968>
 800c6e2:	4630      	mov	r0, r6
 800c6e4:	e7b9      	b.n	800c65a <_dtoa_r+0x9f2>
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	e7e2      	b.n	800c6b0 <_dtoa_r+0xa48>
 800c6ea:	f1b9 0f00 	cmp.w	r9, #0
 800c6ee:	db06      	blt.n	800c6fe <_dtoa_r+0xa96>
 800c6f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c6f2:	ea41 0909 	orr.w	r9, r1, r9
 800c6f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6f8:	ea59 0101 	orrs.w	r1, r9, r1
 800c6fc:	d120      	bne.n	800c740 <_dtoa_r+0xad8>
 800c6fe:	2a00      	cmp	r2, #0
 800c700:	ddec      	ble.n	800c6dc <_dtoa_r+0xa74>
 800c702:	4659      	mov	r1, fp
 800c704:	2201      	movs	r2, #1
 800c706:	4628      	mov	r0, r5
 800c708:	9308      	str	r3, [sp, #32]
 800c70a:	f000 fad5 	bl	800ccb8 <__lshift>
 800c70e:	4621      	mov	r1, r4
 800c710:	4683      	mov	fp, r0
 800c712:	f000 fb41 	bl	800cd98 <__mcmp>
 800c716:	2800      	cmp	r0, #0
 800c718:	9b08      	ldr	r3, [sp, #32]
 800c71a:	dc02      	bgt.n	800c722 <_dtoa_r+0xaba>
 800c71c:	d1de      	bne.n	800c6dc <_dtoa_r+0xa74>
 800c71e:	07da      	lsls	r2, r3, #31
 800c720:	d5dc      	bpl.n	800c6dc <_dtoa_r+0xa74>
 800c722:	2b39      	cmp	r3, #57	; 0x39
 800c724:	d1d8      	bne.n	800c6d8 <_dtoa_r+0xa70>
 800c726:	2339      	movs	r3, #57	; 0x39
 800c728:	9a04      	ldr	r2, [sp, #16]
 800c72a:	7013      	strb	r3, [r2, #0]
 800c72c:	463b      	mov	r3, r7
 800c72e:	461f      	mov	r7, r3
 800c730:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c734:	3b01      	subs	r3, #1
 800c736:	2a39      	cmp	r2, #57	; 0x39
 800c738:	d050      	beq.n	800c7dc <_dtoa_r+0xb74>
 800c73a:	3201      	adds	r2, #1
 800c73c:	701a      	strb	r2, [r3, #0]
 800c73e:	e747      	b.n	800c5d0 <_dtoa_r+0x968>
 800c740:	2a00      	cmp	r2, #0
 800c742:	dd03      	ble.n	800c74c <_dtoa_r+0xae4>
 800c744:	2b39      	cmp	r3, #57	; 0x39
 800c746:	d0ee      	beq.n	800c726 <_dtoa_r+0xabe>
 800c748:	3301      	adds	r3, #1
 800c74a:	e7c7      	b.n	800c6dc <_dtoa_r+0xa74>
 800c74c:	9a08      	ldr	r2, [sp, #32]
 800c74e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c750:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c754:	428a      	cmp	r2, r1
 800c756:	d02a      	beq.n	800c7ae <_dtoa_r+0xb46>
 800c758:	4659      	mov	r1, fp
 800c75a:	2300      	movs	r3, #0
 800c75c:	220a      	movs	r2, #10
 800c75e:	4628      	mov	r0, r5
 800c760:	f000 f8fe 	bl	800c960 <__multadd>
 800c764:	45b0      	cmp	r8, r6
 800c766:	4683      	mov	fp, r0
 800c768:	f04f 0300 	mov.w	r3, #0
 800c76c:	f04f 020a 	mov.w	r2, #10
 800c770:	4641      	mov	r1, r8
 800c772:	4628      	mov	r0, r5
 800c774:	d107      	bne.n	800c786 <_dtoa_r+0xb1e>
 800c776:	f000 f8f3 	bl	800c960 <__multadd>
 800c77a:	4680      	mov	r8, r0
 800c77c:	4606      	mov	r6, r0
 800c77e:	9b08      	ldr	r3, [sp, #32]
 800c780:	3301      	adds	r3, #1
 800c782:	9308      	str	r3, [sp, #32]
 800c784:	e775      	b.n	800c672 <_dtoa_r+0xa0a>
 800c786:	f000 f8eb 	bl	800c960 <__multadd>
 800c78a:	4631      	mov	r1, r6
 800c78c:	4680      	mov	r8, r0
 800c78e:	2300      	movs	r3, #0
 800c790:	220a      	movs	r2, #10
 800c792:	4628      	mov	r0, r5
 800c794:	f000 f8e4 	bl	800c960 <__multadd>
 800c798:	4606      	mov	r6, r0
 800c79a:	e7f0      	b.n	800c77e <_dtoa_r+0xb16>
 800c79c:	f1b9 0f00 	cmp.w	r9, #0
 800c7a0:	bfcc      	ite	gt
 800c7a2:	464f      	movgt	r7, r9
 800c7a4:	2701      	movle	r7, #1
 800c7a6:	f04f 0800 	mov.w	r8, #0
 800c7aa:	9a03      	ldr	r2, [sp, #12]
 800c7ac:	4417      	add	r7, r2
 800c7ae:	4659      	mov	r1, fp
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	9308      	str	r3, [sp, #32]
 800c7b6:	f000 fa7f 	bl	800ccb8 <__lshift>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4683      	mov	fp, r0
 800c7be:	f000 faeb 	bl	800cd98 <__mcmp>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	dcb2      	bgt.n	800c72c <_dtoa_r+0xac4>
 800c7c6:	d102      	bne.n	800c7ce <_dtoa_r+0xb66>
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	07db      	lsls	r3, r3, #31
 800c7cc:	d4ae      	bmi.n	800c72c <_dtoa_r+0xac4>
 800c7ce:	463b      	mov	r3, r7
 800c7d0:	461f      	mov	r7, r3
 800c7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7d6:	2a30      	cmp	r2, #48	; 0x30
 800c7d8:	d0fa      	beq.n	800c7d0 <_dtoa_r+0xb68>
 800c7da:	e6f9      	b.n	800c5d0 <_dtoa_r+0x968>
 800c7dc:	9a03      	ldr	r2, [sp, #12]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d1a5      	bne.n	800c72e <_dtoa_r+0xac6>
 800c7e2:	2331      	movs	r3, #49	; 0x31
 800c7e4:	f10a 0a01 	add.w	sl, sl, #1
 800c7e8:	e779      	b.n	800c6de <_dtoa_r+0xa76>
 800c7ea:	4b14      	ldr	r3, [pc, #80]	; (800c83c <_dtoa_r+0xbd4>)
 800c7ec:	f7ff baa8 	b.w	800bd40 <_dtoa_r+0xd8>
 800c7f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f47f aa81 	bne.w	800bcfa <_dtoa_r+0x92>
 800c7f8:	4b11      	ldr	r3, [pc, #68]	; (800c840 <_dtoa_r+0xbd8>)
 800c7fa:	f7ff baa1 	b.w	800bd40 <_dtoa_r+0xd8>
 800c7fe:	f1b9 0f00 	cmp.w	r9, #0
 800c802:	dc03      	bgt.n	800c80c <_dtoa_r+0xba4>
 800c804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c806:	2b02      	cmp	r3, #2
 800c808:	f73f aecb 	bgt.w	800c5a2 <_dtoa_r+0x93a>
 800c80c:	9f03      	ldr	r7, [sp, #12]
 800c80e:	4621      	mov	r1, r4
 800c810:	4658      	mov	r0, fp
 800c812:	f7ff f99d 	bl	800bb50 <quorem>
 800c816:	9a03      	ldr	r2, [sp, #12]
 800c818:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c81c:	f807 3b01 	strb.w	r3, [r7], #1
 800c820:	1aba      	subs	r2, r7, r2
 800c822:	4591      	cmp	r9, r2
 800c824:	ddba      	ble.n	800c79c <_dtoa_r+0xb34>
 800c826:	4659      	mov	r1, fp
 800c828:	2300      	movs	r3, #0
 800c82a:	220a      	movs	r2, #10
 800c82c:	4628      	mov	r0, r5
 800c82e:	f000 f897 	bl	800c960 <__multadd>
 800c832:	4683      	mov	fp, r0
 800c834:	e7eb      	b.n	800c80e <_dtoa_r+0xba6>
 800c836:	bf00      	nop
 800c838:	0800e7cf 	.word	0x0800e7cf
 800c83c:	0800e72c 	.word	0x0800e72c
 800c840:	0800e750 	.word	0x0800e750

0800c844 <_localeconv_r>:
 800c844:	4800      	ldr	r0, [pc, #0]	; (800c848 <_localeconv_r+0x4>)
 800c846:	4770      	bx	lr
 800c848:	20000294 	.word	0x20000294

0800c84c <memchr>:
 800c84c:	4603      	mov	r3, r0
 800c84e:	b510      	push	{r4, lr}
 800c850:	b2c9      	uxtb	r1, r1
 800c852:	4402      	add	r2, r0
 800c854:	4293      	cmp	r3, r2
 800c856:	4618      	mov	r0, r3
 800c858:	d101      	bne.n	800c85e <memchr+0x12>
 800c85a:	2000      	movs	r0, #0
 800c85c:	e003      	b.n	800c866 <memchr+0x1a>
 800c85e:	7804      	ldrb	r4, [r0, #0]
 800c860:	3301      	adds	r3, #1
 800c862:	428c      	cmp	r4, r1
 800c864:	d1f6      	bne.n	800c854 <memchr+0x8>
 800c866:	bd10      	pop	{r4, pc}

0800c868 <memcpy>:
 800c868:	440a      	add	r2, r1
 800c86a:	4291      	cmp	r1, r2
 800c86c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c870:	d100      	bne.n	800c874 <memcpy+0xc>
 800c872:	4770      	bx	lr
 800c874:	b510      	push	{r4, lr}
 800c876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c87a:	4291      	cmp	r1, r2
 800c87c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c880:	d1f9      	bne.n	800c876 <memcpy+0xe>
 800c882:	bd10      	pop	{r4, pc}

0800c884 <__malloc_lock>:
 800c884:	4801      	ldr	r0, [pc, #4]	; (800c88c <__malloc_lock+0x8>)
 800c886:	f000 bd2c 	b.w	800d2e2 <__retarget_lock_acquire_recursive>
 800c88a:	bf00      	nop
 800c88c:	20000d74 	.word	0x20000d74

0800c890 <__malloc_unlock>:
 800c890:	4801      	ldr	r0, [pc, #4]	; (800c898 <__malloc_unlock+0x8>)
 800c892:	f000 bd27 	b.w	800d2e4 <__retarget_lock_release_recursive>
 800c896:	bf00      	nop
 800c898:	20000d74 	.word	0x20000d74

0800c89c <_Balloc>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	460d      	mov	r5, r1
 800c8a4:	b976      	cbnz	r6, 800c8c4 <_Balloc+0x28>
 800c8a6:	2010      	movs	r0, #16
 800c8a8:	f7fe fbb4 	bl	800b014 <malloc>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	6260      	str	r0, [r4, #36]	; 0x24
 800c8b0:	b920      	cbnz	r0, 800c8bc <_Balloc+0x20>
 800c8b2:	2166      	movs	r1, #102	; 0x66
 800c8b4:	4b17      	ldr	r3, [pc, #92]	; (800c914 <_Balloc+0x78>)
 800c8b6:	4818      	ldr	r0, [pc, #96]	; (800c918 <_Balloc+0x7c>)
 800c8b8:	f000 fce2 	bl	800d280 <__assert_func>
 800c8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8c0:	6006      	str	r6, [r0, #0]
 800c8c2:	60c6      	str	r6, [r0, #12]
 800c8c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8c6:	68f3      	ldr	r3, [r6, #12]
 800c8c8:	b183      	cbz	r3, 800c8ec <_Balloc+0x50>
 800c8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8d2:	b9b8      	cbnz	r0, 800c904 <_Balloc+0x68>
 800c8d4:	2101      	movs	r1, #1
 800c8d6:	fa01 f605 	lsl.w	r6, r1, r5
 800c8da:	1d72      	adds	r2, r6, #5
 800c8dc:	4620      	mov	r0, r4
 800c8de:	0092      	lsls	r2, r2, #2
 800c8e0:	f000 fb5e 	bl	800cfa0 <_calloc_r>
 800c8e4:	b160      	cbz	r0, 800c900 <_Balloc+0x64>
 800c8e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8ea:	e00e      	b.n	800c90a <_Balloc+0x6e>
 800c8ec:	2221      	movs	r2, #33	; 0x21
 800c8ee:	2104      	movs	r1, #4
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f000 fb55 	bl	800cfa0 <_calloc_r>
 800c8f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8f8:	60f0      	str	r0, [r6, #12]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d1e4      	bne.n	800c8ca <_Balloc+0x2e>
 800c900:	2000      	movs	r0, #0
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	6802      	ldr	r2, [r0, #0]
 800c906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c90a:	2300      	movs	r3, #0
 800c90c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c910:	e7f7      	b.n	800c902 <_Balloc+0x66>
 800c912:	bf00      	nop
 800c914:	0800e75d 	.word	0x0800e75d
 800c918:	0800e7e0 	.word	0x0800e7e0

0800c91c <_Bfree>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c920:	4605      	mov	r5, r0
 800c922:	460c      	mov	r4, r1
 800c924:	b976      	cbnz	r6, 800c944 <_Bfree+0x28>
 800c926:	2010      	movs	r0, #16
 800c928:	f7fe fb74 	bl	800b014 <malloc>
 800c92c:	4602      	mov	r2, r0
 800c92e:	6268      	str	r0, [r5, #36]	; 0x24
 800c930:	b920      	cbnz	r0, 800c93c <_Bfree+0x20>
 800c932:	218a      	movs	r1, #138	; 0x8a
 800c934:	4b08      	ldr	r3, [pc, #32]	; (800c958 <_Bfree+0x3c>)
 800c936:	4809      	ldr	r0, [pc, #36]	; (800c95c <_Bfree+0x40>)
 800c938:	f000 fca2 	bl	800d280 <__assert_func>
 800c93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c940:	6006      	str	r6, [r0, #0]
 800c942:	60c6      	str	r6, [r0, #12]
 800c944:	b13c      	cbz	r4, 800c956 <_Bfree+0x3a>
 800c946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c948:	6862      	ldr	r2, [r4, #4]
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c950:	6021      	str	r1, [r4, #0]
 800c952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c956:	bd70      	pop	{r4, r5, r6, pc}
 800c958:	0800e75d 	.word	0x0800e75d
 800c95c:	0800e7e0 	.word	0x0800e7e0

0800c960 <__multadd>:
 800c960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c964:	4607      	mov	r7, r0
 800c966:	460c      	mov	r4, r1
 800c968:	461e      	mov	r6, r3
 800c96a:	2000      	movs	r0, #0
 800c96c:	690d      	ldr	r5, [r1, #16]
 800c96e:	f101 0c14 	add.w	ip, r1, #20
 800c972:	f8dc 3000 	ldr.w	r3, [ip]
 800c976:	3001      	adds	r0, #1
 800c978:	b299      	uxth	r1, r3
 800c97a:	fb02 6101 	mla	r1, r2, r1, r6
 800c97e:	0c1e      	lsrs	r6, r3, #16
 800c980:	0c0b      	lsrs	r3, r1, #16
 800c982:	fb02 3306 	mla	r3, r2, r6, r3
 800c986:	b289      	uxth	r1, r1
 800c988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c98c:	4285      	cmp	r5, r0
 800c98e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c992:	f84c 1b04 	str.w	r1, [ip], #4
 800c996:	dcec      	bgt.n	800c972 <__multadd+0x12>
 800c998:	b30e      	cbz	r6, 800c9de <__multadd+0x7e>
 800c99a:	68a3      	ldr	r3, [r4, #8]
 800c99c:	42ab      	cmp	r3, r5
 800c99e:	dc19      	bgt.n	800c9d4 <__multadd+0x74>
 800c9a0:	6861      	ldr	r1, [r4, #4]
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	3101      	adds	r1, #1
 800c9a6:	f7ff ff79 	bl	800c89c <_Balloc>
 800c9aa:	4680      	mov	r8, r0
 800c9ac:	b928      	cbnz	r0, 800c9ba <__multadd+0x5a>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	21b5      	movs	r1, #181	; 0xb5
 800c9b2:	4b0c      	ldr	r3, [pc, #48]	; (800c9e4 <__multadd+0x84>)
 800c9b4:	480c      	ldr	r0, [pc, #48]	; (800c9e8 <__multadd+0x88>)
 800c9b6:	f000 fc63 	bl	800d280 <__assert_func>
 800c9ba:	6922      	ldr	r2, [r4, #16]
 800c9bc:	f104 010c 	add.w	r1, r4, #12
 800c9c0:	3202      	adds	r2, #2
 800c9c2:	0092      	lsls	r2, r2, #2
 800c9c4:	300c      	adds	r0, #12
 800c9c6:	f7ff ff4f 	bl	800c868 <memcpy>
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	f7ff ffa5 	bl	800c91c <_Bfree>
 800c9d2:	4644      	mov	r4, r8
 800c9d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9d8:	3501      	adds	r5, #1
 800c9da:	615e      	str	r6, [r3, #20]
 800c9dc:	6125      	str	r5, [r4, #16]
 800c9de:	4620      	mov	r0, r4
 800c9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9e4:	0800e7cf 	.word	0x0800e7cf
 800c9e8:	0800e7e0 	.word	0x0800e7e0

0800c9ec <__hi0bits>:
 800c9ec:	0c02      	lsrs	r2, r0, #16
 800c9ee:	0412      	lsls	r2, r2, #16
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	b9ca      	cbnz	r2, 800ca28 <__hi0bits+0x3c>
 800c9f4:	0403      	lsls	r3, r0, #16
 800c9f6:	2010      	movs	r0, #16
 800c9f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c9fc:	bf04      	itt	eq
 800c9fe:	021b      	lsleq	r3, r3, #8
 800ca00:	3008      	addeq	r0, #8
 800ca02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ca06:	bf04      	itt	eq
 800ca08:	011b      	lsleq	r3, r3, #4
 800ca0a:	3004      	addeq	r0, #4
 800ca0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ca10:	bf04      	itt	eq
 800ca12:	009b      	lsleq	r3, r3, #2
 800ca14:	3002      	addeq	r0, #2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	db05      	blt.n	800ca26 <__hi0bits+0x3a>
 800ca1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ca1e:	f100 0001 	add.w	r0, r0, #1
 800ca22:	bf08      	it	eq
 800ca24:	2020      	moveq	r0, #32
 800ca26:	4770      	bx	lr
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e7e5      	b.n	800c9f8 <__hi0bits+0xc>

0800ca2c <__lo0bits>:
 800ca2c:	6803      	ldr	r3, [r0, #0]
 800ca2e:	4602      	mov	r2, r0
 800ca30:	f013 0007 	ands.w	r0, r3, #7
 800ca34:	d00b      	beq.n	800ca4e <__lo0bits+0x22>
 800ca36:	07d9      	lsls	r1, r3, #31
 800ca38:	d421      	bmi.n	800ca7e <__lo0bits+0x52>
 800ca3a:	0798      	lsls	r0, r3, #30
 800ca3c:	bf49      	itett	mi
 800ca3e:	085b      	lsrmi	r3, r3, #1
 800ca40:	089b      	lsrpl	r3, r3, #2
 800ca42:	2001      	movmi	r0, #1
 800ca44:	6013      	strmi	r3, [r2, #0]
 800ca46:	bf5c      	itt	pl
 800ca48:	2002      	movpl	r0, #2
 800ca4a:	6013      	strpl	r3, [r2, #0]
 800ca4c:	4770      	bx	lr
 800ca4e:	b299      	uxth	r1, r3
 800ca50:	b909      	cbnz	r1, 800ca56 <__lo0bits+0x2a>
 800ca52:	2010      	movs	r0, #16
 800ca54:	0c1b      	lsrs	r3, r3, #16
 800ca56:	b2d9      	uxtb	r1, r3
 800ca58:	b909      	cbnz	r1, 800ca5e <__lo0bits+0x32>
 800ca5a:	3008      	adds	r0, #8
 800ca5c:	0a1b      	lsrs	r3, r3, #8
 800ca5e:	0719      	lsls	r1, r3, #28
 800ca60:	bf04      	itt	eq
 800ca62:	091b      	lsreq	r3, r3, #4
 800ca64:	3004      	addeq	r0, #4
 800ca66:	0799      	lsls	r1, r3, #30
 800ca68:	bf04      	itt	eq
 800ca6a:	089b      	lsreq	r3, r3, #2
 800ca6c:	3002      	addeq	r0, #2
 800ca6e:	07d9      	lsls	r1, r3, #31
 800ca70:	d403      	bmi.n	800ca7a <__lo0bits+0x4e>
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	f100 0001 	add.w	r0, r0, #1
 800ca78:	d003      	beq.n	800ca82 <__lo0bits+0x56>
 800ca7a:	6013      	str	r3, [r2, #0]
 800ca7c:	4770      	bx	lr
 800ca7e:	2000      	movs	r0, #0
 800ca80:	4770      	bx	lr
 800ca82:	2020      	movs	r0, #32
 800ca84:	4770      	bx	lr
	...

0800ca88 <__i2b>:
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	2101      	movs	r1, #1
 800ca8e:	f7ff ff05 	bl	800c89c <_Balloc>
 800ca92:	4602      	mov	r2, r0
 800ca94:	b928      	cbnz	r0, 800caa2 <__i2b+0x1a>
 800ca96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca9a:	4b04      	ldr	r3, [pc, #16]	; (800caac <__i2b+0x24>)
 800ca9c:	4804      	ldr	r0, [pc, #16]	; (800cab0 <__i2b+0x28>)
 800ca9e:	f000 fbef 	bl	800d280 <__assert_func>
 800caa2:	2301      	movs	r3, #1
 800caa4:	6144      	str	r4, [r0, #20]
 800caa6:	6103      	str	r3, [r0, #16]
 800caa8:	bd10      	pop	{r4, pc}
 800caaa:	bf00      	nop
 800caac:	0800e7cf 	.word	0x0800e7cf
 800cab0:	0800e7e0 	.word	0x0800e7e0

0800cab4 <__multiply>:
 800cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab8:	4691      	mov	r9, r2
 800caba:	690a      	ldr	r2, [r1, #16]
 800cabc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cac0:	460c      	mov	r4, r1
 800cac2:	429a      	cmp	r2, r3
 800cac4:	bfbe      	ittt	lt
 800cac6:	460b      	movlt	r3, r1
 800cac8:	464c      	movlt	r4, r9
 800caca:	4699      	movlt	r9, r3
 800cacc:	6927      	ldr	r7, [r4, #16]
 800cace:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cad2:	68a3      	ldr	r3, [r4, #8]
 800cad4:	6861      	ldr	r1, [r4, #4]
 800cad6:	eb07 060a 	add.w	r6, r7, sl
 800cada:	42b3      	cmp	r3, r6
 800cadc:	b085      	sub	sp, #20
 800cade:	bfb8      	it	lt
 800cae0:	3101      	addlt	r1, #1
 800cae2:	f7ff fedb 	bl	800c89c <_Balloc>
 800cae6:	b930      	cbnz	r0, 800caf6 <__multiply+0x42>
 800cae8:	4602      	mov	r2, r0
 800caea:	f240 115d 	movw	r1, #349	; 0x15d
 800caee:	4b43      	ldr	r3, [pc, #268]	; (800cbfc <__multiply+0x148>)
 800caf0:	4843      	ldr	r0, [pc, #268]	; (800cc00 <__multiply+0x14c>)
 800caf2:	f000 fbc5 	bl	800d280 <__assert_func>
 800caf6:	f100 0514 	add.w	r5, r0, #20
 800cafa:	462b      	mov	r3, r5
 800cafc:	2200      	movs	r2, #0
 800cafe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb02:	4543      	cmp	r3, r8
 800cb04:	d321      	bcc.n	800cb4a <__multiply+0x96>
 800cb06:	f104 0314 	add.w	r3, r4, #20
 800cb0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb0e:	f109 0314 	add.w	r3, r9, #20
 800cb12:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cb16:	9202      	str	r2, [sp, #8]
 800cb18:	1b3a      	subs	r2, r7, r4
 800cb1a:	3a15      	subs	r2, #21
 800cb1c:	f022 0203 	bic.w	r2, r2, #3
 800cb20:	3204      	adds	r2, #4
 800cb22:	f104 0115 	add.w	r1, r4, #21
 800cb26:	428f      	cmp	r7, r1
 800cb28:	bf38      	it	cc
 800cb2a:	2204      	movcc	r2, #4
 800cb2c:	9201      	str	r2, [sp, #4]
 800cb2e:	9a02      	ldr	r2, [sp, #8]
 800cb30:	9303      	str	r3, [sp, #12]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d80c      	bhi.n	800cb50 <__multiply+0x9c>
 800cb36:	2e00      	cmp	r6, #0
 800cb38:	dd03      	ble.n	800cb42 <__multiply+0x8e>
 800cb3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d059      	beq.n	800cbf6 <__multiply+0x142>
 800cb42:	6106      	str	r6, [r0, #16]
 800cb44:	b005      	add	sp, #20
 800cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4a:	f843 2b04 	str.w	r2, [r3], #4
 800cb4e:	e7d8      	b.n	800cb02 <__multiply+0x4e>
 800cb50:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb54:	f1ba 0f00 	cmp.w	sl, #0
 800cb58:	d023      	beq.n	800cba2 <__multiply+0xee>
 800cb5a:	46a9      	mov	r9, r5
 800cb5c:	f04f 0c00 	mov.w	ip, #0
 800cb60:	f104 0e14 	add.w	lr, r4, #20
 800cb64:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb68:	f8d9 1000 	ldr.w	r1, [r9]
 800cb6c:	fa1f fb82 	uxth.w	fp, r2
 800cb70:	b289      	uxth	r1, r1
 800cb72:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb76:	4461      	add	r1, ip
 800cb78:	f8d9 c000 	ldr.w	ip, [r9]
 800cb7c:	0c12      	lsrs	r2, r2, #16
 800cb7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cb82:	fb0a c202 	mla	r2, sl, r2, ip
 800cb86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb8a:	b289      	uxth	r1, r1
 800cb8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb90:	4577      	cmp	r7, lr
 800cb92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb96:	f849 1b04 	str.w	r1, [r9], #4
 800cb9a:	d8e3      	bhi.n	800cb64 <__multiply+0xb0>
 800cb9c:	9a01      	ldr	r2, [sp, #4]
 800cb9e:	f845 c002 	str.w	ip, [r5, r2]
 800cba2:	9a03      	ldr	r2, [sp, #12]
 800cba4:	3304      	adds	r3, #4
 800cba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cbaa:	f1b9 0f00 	cmp.w	r9, #0
 800cbae:	d020      	beq.n	800cbf2 <__multiply+0x13e>
 800cbb0:	46ae      	mov	lr, r5
 800cbb2:	f04f 0a00 	mov.w	sl, #0
 800cbb6:	6829      	ldr	r1, [r5, #0]
 800cbb8:	f104 0c14 	add.w	ip, r4, #20
 800cbbc:	f8bc b000 	ldrh.w	fp, [ip]
 800cbc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cbc4:	b289      	uxth	r1, r1
 800cbc6:	fb09 220b 	mla	r2, r9, fp, r2
 800cbca:	4492      	add	sl, r2
 800cbcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cbd0:	f84e 1b04 	str.w	r1, [lr], #4
 800cbd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cbd8:	f8be 1000 	ldrh.w	r1, [lr]
 800cbdc:	0c12      	lsrs	r2, r2, #16
 800cbde:	fb09 1102 	mla	r1, r9, r2, r1
 800cbe2:	4567      	cmp	r7, ip
 800cbe4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cbe8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cbec:	d8e6      	bhi.n	800cbbc <__multiply+0x108>
 800cbee:	9a01      	ldr	r2, [sp, #4]
 800cbf0:	50a9      	str	r1, [r5, r2]
 800cbf2:	3504      	adds	r5, #4
 800cbf4:	e79b      	b.n	800cb2e <__multiply+0x7a>
 800cbf6:	3e01      	subs	r6, #1
 800cbf8:	e79d      	b.n	800cb36 <__multiply+0x82>
 800cbfa:	bf00      	nop
 800cbfc:	0800e7cf 	.word	0x0800e7cf
 800cc00:	0800e7e0 	.word	0x0800e7e0

0800cc04 <__pow5mult>:
 800cc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc08:	4615      	mov	r5, r2
 800cc0a:	f012 0203 	ands.w	r2, r2, #3
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460f      	mov	r7, r1
 800cc12:	d007      	beq.n	800cc24 <__pow5mult+0x20>
 800cc14:	4c25      	ldr	r4, [pc, #148]	; (800ccac <__pow5mult+0xa8>)
 800cc16:	3a01      	subs	r2, #1
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc1e:	f7ff fe9f 	bl	800c960 <__multadd>
 800cc22:	4607      	mov	r7, r0
 800cc24:	10ad      	asrs	r5, r5, #2
 800cc26:	d03d      	beq.n	800cca4 <__pow5mult+0xa0>
 800cc28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc2a:	b97c      	cbnz	r4, 800cc4c <__pow5mult+0x48>
 800cc2c:	2010      	movs	r0, #16
 800cc2e:	f7fe f9f1 	bl	800b014 <malloc>
 800cc32:	4602      	mov	r2, r0
 800cc34:	6270      	str	r0, [r6, #36]	; 0x24
 800cc36:	b928      	cbnz	r0, 800cc44 <__pow5mult+0x40>
 800cc38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cc3c:	4b1c      	ldr	r3, [pc, #112]	; (800ccb0 <__pow5mult+0xac>)
 800cc3e:	481d      	ldr	r0, [pc, #116]	; (800ccb4 <__pow5mult+0xb0>)
 800cc40:	f000 fb1e 	bl	800d280 <__assert_func>
 800cc44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc48:	6004      	str	r4, [r0, #0]
 800cc4a:	60c4      	str	r4, [r0, #12]
 800cc4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc54:	b94c      	cbnz	r4, 800cc6a <__pow5mult+0x66>
 800cc56:	f240 2171 	movw	r1, #625	; 0x271
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f7ff ff14 	bl	800ca88 <__i2b>
 800cc60:	2300      	movs	r3, #0
 800cc62:	4604      	mov	r4, r0
 800cc64:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc68:	6003      	str	r3, [r0, #0]
 800cc6a:	f04f 0900 	mov.w	r9, #0
 800cc6e:	07eb      	lsls	r3, r5, #31
 800cc70:	d50a      	bpl.n	800cc88 <__pow5mult+0x84>
 800cc72:	4639      	mov	r1, r7
 800cc74:	4622      	mov	r2, r4
 800cc76:	4630      	mov	r0, r6
 800cc78:	f7ff ff1c 	bl	800cab4 <__multiply>
 800cc7c:	4680      	mov	r8, r0
 800cc7e:	4639      	mov	r1, r7
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7ff fe4b 	bl	800c91c <_Bfree>
 800cc86:	4647      	mov	r7, r8
 800cc88:	106d      	asrs	r5, r5, #1
 800cc8a:	d00b      	beq.n	800cca4 <__pow5mult+0xa0>
 800cc8c:	6820      	ldr	r0, [r4, #0]
 800cc8e:	b938      	cbnz	r0, 800cca0 <__pow5mult+0x9c>
 800cc90:	4622      	mov	r2, r4
 800cc92:	4621      	mov	r1, r4
 800cc94:	4630      	mov	r0, r6
 800cc96:	f7ff ff0d 	bl	800cab4 <__multiply>
 800cc9a:	6020      	str	r0, [r4, #0]
 800cc9c:	f8c0 9000 	str.w	r9, [r0]
 800cca0:	4604      	mov	r4, r0
 800cca2:	e7e4      	b.n	800cc6e <__pow5mult+0x6a>
 800cca4:	4638      	mov	r0, r7
 800cca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	bf00      	nop
 800ccac:	0800e930 	.word	0x0800e930
 800ccb0:	0800e75d 	.word	0x0800e75d
 800ccb4:	0800e7e0 	.word	0x0800e7e0

0800ccb8 <__lshift>:
 800ccb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	4607      	mov	r7, r0
 800ccc0:	4691      	mov	r9, r2
 800ccc2:	6923      	ldr	r3, [r4, #16]
 800ccc4:	6849      	ldr	r1, [r1, #4]
 800ccc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ccca:	68a3      	ldr	r3, [r4, #8]
 800cccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccd0:	f108 0601 	add.w	r6, r8, #1
 800ccd4:	42b3      	cmp	r3, r6
 800ccd6:	db0b      	blt.n	800ccf0 <__lshift+0x38>
 800ccd8:	4638      	mov	r0, r7
 800ccda:	f7ff fddf 	bl	800c89c <_Balloc>
 800ccde:	4605      	mov	r5, r0
 800cce0:	b948      	cbnz	r0, 800ccf6 <__lshift+0x3e>
 800cce2:	4602      	mov	r2, r0
 800cce4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cce8:	4b29      	ldr	r3, [pc, #164]	; (800cd90 <__lshift+0xd8>)
 800ccea:	482a      	ldr	r0, [pc, #168]	; (800cd94 <__lshift+0xdc>)
 800ccec:	f000 fac8 	bl	800d280 <__assert_func>
 800ccf0:	3101      	adds	r1, #1
 800ccf2:	005b      	lsls	r3, r3, #1
 800ccf4:	e7ee      	b.n	800ccd4 <__lshift+0x1c>
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f100 0114 	add.w	r1, r0, #20
 800ccfc:	f100 0210 	add.w	r2, r0, #16
 800cd00:	4618      	mov	r0, r3
 800cd02:	4553      	cmp	r3, sl
 800cd04:	db37      	blt.n	800cd76 <__lshift+0xbe>
 800cd06:	6920      	ldr	r0, [r4, #16]
 800cd08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd0c:	f104 0314 	add.w	r3, r4, #20
 800cd10:	f019 091f 	ands.w	r9, r9, #31
 800cd14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd1c:	d02f      	beq.n	800cd7e <__lshift+0xc6>
 800cd1e:	468a      	mov	sl, r1
 800cd20:	f04f 0c00 	mov.w	ip, #0
 800cd24:	f1c9 0e20 	rsb	lr, r9, #32
 800cd28:	681a      	ldr	r2, [r3, #0]
 800cd2a:	fa02 f209 	lsl.w	r2, r2, r9
 800cd2e:	ea42 020c 	orr.w	r2, r2, ip
 800cd32:	f84a 2b04 	str.w	r2, [sl], #4
 800cd36:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd3a:	4298      	cmp	r0, r3
 800cd3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cd40:	d8f2      	bhi.n	800cd28 <__lshift+0x70>
 800cd42:	1b03      	subs	r3, r0, r4
 800cd44:	3b15      	subs	r3, #21
 800cd46:	f023 0303 	bic.w	r3, r3, #3
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	f104 0215 	add.w	r2, r4, #21
 800cd50:	4290      	cmp	r0, r2
 800cd52:	bf38      	it	cc
 800cd54:	2304      	movcc	r3, #4
 800cd56:	f841 c003 	str.w	ip, [r1, r3]
 800cd5a:	f1bc 0f00 	cmp.w	ip, #0
 800cd5e:	d001      	beq.n	800cd64 <__lshift+0xac>
 800cd60:	f108 0602 	add.w	r6, r8, #2
 800cd64:	3e01      	subs	r6, #1
 800cd66:	4638      	mov	r0, r7
 800cd68:	4621      	mov	r1, r4
 800cd6a:	612e      	str	r6, [r5, #16]
 800cd6c:	f7ff fdd6 	bl	800c91c <_Bfree>
 800cd70:	4628      	mov	r0, r5
 800cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd76:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	e7c1      	b.n	800cd02 <__lshift+0x4a>
 800cd7e:	3904      	subs	r1, #4
 800cd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd84:	4298      	cmp	r0, r3
 800cd86:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd8a:	d8f9      	bhi.n	800cd80 <__lshift+0xc8>
 800cd8c:	e7ea      	b.n	800cd64 <__lshift+0xac>
 800cd8e:	bf00      	nop
 800cd90:	0800e7cf 	.word	0x0800e7cf
 800cd94:	0800e7e0 	.word	0x0800e7e0

0800cd98 <__mcmp>:
 800cd98:	4603      	mov	r3, r0
 800cd9a:	690a      	ldr	r2, [r1, #16]
 800cd9c:	6900      	ldr	r0, [r0, #16]
 800cd9e:	b530      	push	{r4, r5, lr}
 800cda0:	1a80      	subs	r0, r0, r2
 800cda2:	d10d      	bne.n	800cdc0 <__mcmp+0x28>
 800cda4:	3314      	adds	r3, #20
 800cda6:	3114      	adds	r1, #20
 800cda8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cdac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cdb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cdb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cdb8:	4295      	cmp	r5, r2
 800cdba:	d002      	beq.n	800cdc2 <__mcmp+0x2a>
 800cdbc:	d304      	bcc.n	800cdc8 <__mcmp+0x30>
 800cdbe:	2001      	movs	r0, #1
 800cdc0:	bd30      	pop	{r4, r5, pc}
 800cdc2:	42a3      	cmp	r3, r4
 800cdc4:	d3f4      	bcc.n	800cdb0 <__mcmp+0x18>
 800cdc6:	e7fb      	b.n	800cdc0 <__mcmp+0x28>
 800cdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdcc:	e7f8      	b.n	800cdc0 <__mcmp+0x28>
	...

0800cdd0 <__mdiff>:
 800cdd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd4:	460d      	mov	r5, r1
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4628      	mov	r0, r5
 800cddc:	4614      	mov	r4, r2
 800cdde:	f7ff ffdb 	bl	800cd98 <__mcmp>
 800cde2:	1e06      	subs	r6, r0, #0
 800cde4:	d111      	bne.n	800ce0a <__mdiff+0x3a>
 800cde6:	4631      	mov	r1, r6
 800cde8:	4638      	mov	r0, r7
 800cdea:	f7ff fd57 	bl	800c89c <_Balloc>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	b928      	cbnz	r0, 800cdfe <__mdiff+0x2e>
 800cdf2:	f240 2132 	movw	r1, #562	; 0x232
 800cdf6:	4b3a      	ldr	r3, [pc, #232]	; (800cee0 <__mdiff+0x110>)
 800cdf8:	483a      	ldr	r0, [pc, #232]	; (800cee4 <__mdiff+0x114>)
 800cdfa:	f000 fa41 	bl	800d280 <__assert_func>
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ce04:	4610      	mov	r0, r2
 800ce06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0a:	bfa4      	itt	ge
 800ce0c:	4623      	movge	r3, r4
 800ce0e:	462c      	movge	r4, r5
 800ce10:	4638      	mov	r0, r7
 800ce12:	6861      	ldr	r1, [r4, #4]
 800ce14:	bfa6      	itte	ge
 800ce16:	461d      	movge	r5, r3
 800ce18:	2600      	movge	r6, #0
 800ce1a:	2601      	movlt	r6, #1
 800ce1c:	f7ff fd3e 	bl	800c89c <_Balloc>
 800ce20:	4602      	mov	r2, r0
 800ce22:	b918      	cbnz	r0, 800ce2c <__mdiff+0x5c>
 800ce24:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce28:	4b2d      	ldr	r3, [pc, #180]	; (800cee0 <__mdiff+0x110>)
 800ce2a:	e7e5      	b.n	800cdf8 <__mdiff+0x28>
 800ce2c:	f102 0814 	add.w	r8, r2, #20
 800ce30:	46c2      	mov	sl, r8
 800ce32:	f04f 0c00 	mov.w	ip, #0
 800ce36:	6927      	ldr	r7, [r4, #16]
 800ce38:	60c6      	str	r6, [r0, #12]
 800ce3a:	692e      	ldr	r6, [r5, #16]
 800ce3c:	f104 0014 	add.w	r0, r4, #20
 800ce40:	f105 0914 	add.w	r9, r5, #20
 800ce44:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ce48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ce4c:	3410      	adds	r4, #16
 800ce4e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ce52:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce56:	fa1f f18b 	uxth.w	r1, fp
 800ce5a:	448c      	add	ip, r1
 800ce5c:	b299      	uxth	r1, r3
 800ce5e:	0c1b      	lsrs	r3, r3, #16
 800ce60:	ebac 0101 	sub.w	r1, ip, r1
 800ce64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ce6c:	b289      	uxth	r1, r1
 800ce6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ce72:	454e      	cmp	r6, r9
 800ce74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ce78:	f84a 3b04 	str.w	r3, [sl], #4
 800ce7c:	d8e7      	bhi.n	800ce4e <__mdiff+0x7e>
 800ce7e:	1b73      	subs	r3, r6, r5
 800ce80:	3b15      	subs	r3, #21
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	3515      	adds	r5, #21
 800ce88:	3304      	adds	r3, #4
 800ce8a:	42ae      	cmp	r6, r5
 800ce8c:	bf38      	it	cc
 800ce8e:	2304      	movcc	r3, #4
 800ce90:	4418      	add	r0, r3
 800ce92:	4443      	add	r3, r8
 800ce94:	461e      	mov	r6, r3
 800ce96:	4605      	mov	r5, r0
 800ce98:	4575      	cmp	r5, lr
 800ce9a:	d30e      	bcc.n	800ceba <__mdiff+0xea>
 800ce9c:	f10e 0103 	add.w	r1, lr, #3
 800cea0:	1a09      	subs	r1, r1, r0
 800cea2:	f021 0103 	bic.w	r1, r1, #3
 800cea6:	3803      	subs	r0, #3
 800cea8:	4586      	cmp	lr, r0
 800ceaa:	bf38      	it	cc
 800ceac:	2100      	movcc	r1, #0
 800ceae:	4419      	add	r1, r3
 800ceb0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ceb4:	b18b      	cbz	r3, 800ceda <__mdiff+0x10a>
 800ceb6:	6117      	str	r7, [r2, #16]
 800ceb8:	e7a4      	b.n	800ce04 <__mdiff+0x34>
 800ceba:	f855 8b04 	ldr.w	r8, [r5], #4
 800cebe:	fa1f f188 	uxth.w	r1, r8
 800cec2:	4461      	add	r1, ip
 800cec4:	140c      	asrs	r4, r1, #16
 800cec6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ceca:	b289      	uxth	r1, r1
 800cecc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ced0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ced4:	f846 1b04 	str.w	r1, [r6], #4
 800ced8:	e7de      	b.n	800ce98 <__mdiff+0xc8>
 800ceda:	3f01      	subs	r7, #1
 800cedc:	e7e8      	b.n	800ceb0 <__mdiff+0xe0>
 800cede:	bf00      	nop
 800cee0:	0800e7cf 	.word	0x0800e7cf
 800cee4:	0800e7e0 	.word	0x0800e7e0

0800cee8 <__d2b>:
 800cee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ceec:	2101      	movs	r1, #1
 800ceee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cef2:	4690      	mov	r8, r2
 800cef4:	461d      	mov	r5, r3
 800cef6:	f7ff fcd1 	bl	800c89c <_Balloc>
 800cefa:	4604      	mov	r4, r0
 800cefc:	b930      	cbnz	r0, 800cf0c <__d2b+0x24>
 800cefe:	4602      	mov	r2, r0
 800cf00:	f240 310a 	movw	r1, #778	; 0x30a
 800cf04:	4b24      	ldr	r3, [pc, #144]	; (800cf98 <__d2b+0xb0>)
 800cf06:	4825      	ldr	r0, [pc, #148]	; (800cf9c <__d2b+0xb4>)
 800cf08:	f000 f9ba 	bl	800d280 <__assert_func>
 800cf0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cf10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cf14:	bb2d      	cbnz	r5, 800cf62 <__d2b+0x7a>
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	f1b8 0300 	subs.w	r3, r8, #0
 800cf1c:	d026      	beq.n	800cf6c <__d2b+0x84>
 800cf1e:	4668      	mov	r0, sp
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	f7ff fd83 	bl	800ca2c <__lo0bits>
 800cf26:	9900      	ldr	r1, [sp, #0]
 800cf28:	b1f0      	cbz	r0, 800cf68 <__d2b+0x80>
 800cf2a:	9a01      	ldr	r2, [sp, #4]
 800cf2c:	f1c0 0320 	rsb	r3, r0, #32
 800cf30:	fa02 f303 	lsl.w	r3, r2, r3
 800cf34:	430b      	orrs	r3, r1
 800cf36:	40c2      	lsrs	r2, r0
 800cf38:	6163      	str	r3, [r4, #20]
 800cf3a:	9201      	str	r2, [sp, #4]
 800cf3c:	9b01      	ldr	r3, [sp, #4]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	bf14      	ite	ne
 800cf42:	2102      	movne	r1, #2
 800cf44:	2101      	moveq	r1, #1
 800cf46:	61a3      	str	r3, [r4, #24]
 800cf48:	6121      	str	r1, [r4, #16]
 800cf4a:	b1c5      	cbz	r5, 800cf7e <__d2b+0x96>
 800cf4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf50:	4405      	add	r5, r0
 800cf52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf56:	603d      	str	r5, [r7, #0]
 800cf58:	6030      	str	r0, [r6, #0]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	b002      	add	sp, #8
 800cf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf66:	e7d6      	b.n	800cf16 <__d2b+0x2e>
 800cf68:	6161      	str	r1, [r4, #20]
 800cf6a:	e7e7      	b.n	800cf3c <__d2b+0x54>
 800cf6c:	a801      	add	r0, sp, #4
 800cf6e:	f7ff fd5d 	bl	800ca2c <__lo0bits>
 800cf72:	2101      	movs	r1, #1
 800cf74:	9b01      	ldr	r3, [sp, #4]
 800cf76:	6121      	str	r1, [r4, #16]
 800cf78:	6163      	str	r3, [r4, #20]
 800cf7a:	3020      	adds	r0, #32
 800cf7c:	e7e5      	b.n	800cf4a <__d2b+0x62>
 800cf7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cf82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf86:	6038      	str	r0, [r7, #0]
 800cf88:	6918      	ldr	r0, [r3, #16]
 800cf8a:	f7ff fd2f 	bl	800c9ec <__hi0bits>
 800cf8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cf92:	6031      	str	r1, [r6, #0]
 800cf94:	e7e1      	b.n	800cf5a <__d2b+0x72>
 800cf96:	bf00      	nop
 800cf98:	0800e7cf 	.word	0x0800e7cf
 800cf9c:	0800e7e0 	.word	0x0800e7e0

0800cfa0 <_calloc_r>:
 800cfa0:	b570      	push	{r4, r5, r6, lr}
 800cfa2:	fba1 5402 	umull	r5, r4, r1, r2
 800cfa6:	b934      	cbnz	r4, 800cfb6 <_calloc_r+0x16>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	f7fe f8b3 	bl	800b114 <_malloc_r>
 800cfae:	4606      	mov	r6, r0
 800cfb0:	b928      	cbnz	r0, 800cfbe <_calloc_r+0x1e>
 800cfb2:	4630      	mov	r0, r6
 800cfb4:	bd70      	pop	{r4, r5, r6, pc}
 800cfb6:	220c      	movs	r2, #12
 800cfb8:	2600      	movs	r6, #0
 800cfba:	6002      	str	r2, [r0, #0]
 800cfbc:	e7f9      	b.n	800cfb2 <_calloc_r+0x12>
 800cfbe:	462a      	mov	r2, r5
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f7fe f837 	bl	800b034 <memset>
 800cfc6:	e7f4      	b.n	800cfb2 <_calloc_r+0x12>

0800cfc8 <__ssputs_r>:
 800cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfcc:	688e      	ldr	r6, [r1, #8]
 800cfce:	4682      	mov	sl, r0
 800cfd0:	429e      	cmp	r6, r3
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	4690      	mov	r8, r2
 800cfd6:	461f      	mov	r7, r3
 800cfd8:	d838      	bhi.n	800d04c <__ssputs_r+0x84>
 800cfda:	898a      	ldrh	r2, [r1, #12]
 800cfdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfe0:	d032      	beq.n	800d048 <__ssputs_r+0x80>
 800cfe2:	6825      	ldr	r5, [r4, #0]
 800cfe4:	6909      	ldr	r1, [r1, #16]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	eba5 0901 	sub.w	r9, r5, r1
 800cfec:	6965      	ldr	r5, [r4, #20]
 800cfee:	444b      	add	r3, r9
 800cff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cff8:	106d      	asrs	r5, r5, #1
 800cffa:	429d      	cmp	r5, r3
 800cffc:	bf38      	it	cc
 800cffe:	461d      	movcc	r5, r3
 800d000:	0553      	lsls	r3, r2, #21
 800d002:	d531      	bpl.n	800d068 <__ssputs_r+0xa0>
 800d004:	4629      	mov	r1, r5
 800d006:	f7fe f885 	bl	800b114 <_malloc_r>
 800d00a:	4606      	mov	r6, r0
 800d00c:	b950      	cbnz	r0, 800d024 <__ssputs_r+0x5c>
 800d00e:	230c      	movs	r3, #12
 800d010:	f04f 30ff 	mov.w	r0, #4294967295
 800d014:	f8ca 3000 	str.w	r3, [sl]
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d01e:	81a3      	strh	r3, [r4, #12]
 800d020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d024:	464a      	mov	r2, r9
 800d026:	6921      	ldr	r1, [r4, #16]
 800d028:	f7ff fc1e 	bl	800c868 <memcpy>
 800d02c:	89a3      	ldrh	r3, [r4, #12]
 800d02e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d036:	81a3      	strh	r3, [r4, #12]
 800d038:	6126      	str	r6, [r4, #16]
 800d03a:	444e      	add	r6, r9
 800d03c:	6026      	str	r6, [r4, #0]
 800d03e:	463e      	mov	r6, r7
 800d040:	6165      	str	r5, [r4, #20]
 800d042:	eba5 0509 	sub.w	r5, r5, r9
 800d046:	60a5      	str	r5, [r4, #8]
 800d048:	42be      	cmp	r6, r7
 800d04a:	d900      	bls.n	800d04e <__ssputs_r+0x86>
 800d04c:	463e      	mov	r6, r7
 800d04e:	4632      	mov	r2, r6
 800d050:	4641      	mov	r1, r8
 800d052:	6820      	ldr	r0, [r4, #0]
 800d054:	f000 f959 	bl	800d30a <memmove>
 800d058:	68a3      	ldr	r3, [r4, #8]
 800d05a:	2000      	movs	r0, #0
 800d05c:	1b9b      	subs	r3, r3, r6
 800d05e:	60a3      	str	r3, [r4, #8]
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	4433      	add	r3, r6
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	e7db      	b.n	800d020 <__ssputs_r+0x58>
 800d068:	462a      	mov	r2, r5
 800d06a:	f000 f968 	bl	800d33e <_realloc_r>
 800d06e:	4606      	mov	r6, r0
 800d070:	2800      	cmp	r0, #0
 800d072:	d1e1      	bne.n	800d038 <__ssputs_r+0x70>
 800d074:	4650      	mov	r0, sl
 800d076:	6921      	ldr	r1, [r4, #16]
 800d078:	f7fd ffe4 	bl	800b044 <_free_r>
 800d07c:	e7c7      	b.n	800d00e <__ssputs_r+0x46>
	...

0800d080 <_svfiprintf_r>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	4698      	mov	r8, r3
 800d086:	898b      	ldrh	r3, [r1, #12]
 800d088:	4607      	mov	r7, r0
 800d08a:	061b      	lsls	r3, r3, #24
 800d08c:	460d      	mov	r5, r1
 800d08e:	4614      	mov	r4, r2
 800d090:	b09d      	sub	sp, #116	; 0x74
 800d092:	d50e      	bpl.n	800d0b2 <_svfiprintf_r+0x32>
 800d094:	690b      	ldr	r3, [r1, #16]
 800d096:	b963      	cbnz	r3, 800d0b2 <_svfiprintf_r+0x32>
 800d098:	2140      	movs	r1, #64	; 0x40
 800d09a:	f7fe f83b 	bl	800b114 <_malloc_r>
 800d09e:	6028      	str	r0, [r5, #0]
 800d0a0:	6128      	str	r0, [r5, #16]
 800d0a2:	b920      	cbnz	r0, 800d0ae <_svfiprintf_r+0x2e>
 800d0a4:	230c      	movs	r3, #12
 800d0a6:	603b      	str	r3, [r7, #0]
 800d0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ac:	e0d1      	b.n	800d252 <_svfiprintf_r+0x1d2>
 800d0ae:	2340      	movs	r3, #64	; 0x40
 800d0b0:	616b      	str	r3, [r5, #20]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b6:	2320      	movs	r3, #32
 800d0b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0bc:	2330      	movs	r3, #48	; 0x30
 800d0be:	f04f 0901 	mov.w	r9, #1
 800d0c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d26c <_svfiprintf_r+0x1ec>
 800d0ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0ce:	4623      	mov	r3, r4
 800d0d0:	469a      	mov	sl, r3
 800d0d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0d6:	b10a      	cbz	r2, 800d0dc <_svfiprintf_r+0x5c>
 800d0d8:	2a25      	cmp	r2, #37	; 0x25
 800d0da:	d1f9      	bne.n	800d0d0 <_svfiprintf_r+0x50>
 800d0dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d0e0:	d00b      	beq.n	800d0fa <_svfiprintf_r+0x7a>
 800d0e2:	465b      	mov	r3, fp
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	f7ff ff6d 	bl	800cfc8 <__ssputs_r>
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	f000 80aa 	beq.w	800d248 <_svfiprintf_r+0x1c8>
 800d0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0f6:	445a      	add	r2, fp
 800d0f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f000 80a2 	beq.w	800d248 <_svfiprintf_r+0x1c8>
 800d104:	2300      	movs	r3, #0
 800d106:	f04f 32ff 	mov.w	r2, #4294967295
 800d10a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d10e:	f10a 0a01 	add.w	sl, sl, #1
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	9307      	str	r3, [sp, #28]
 800d116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d11a:	931a      	str	r3, [sp, #104]	; 0x68
 800d11c:	4654      	mov	r4, sl
 800d11e:	2205      	movs	r2, #5
 800d120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d124:	4851      	ldr	r0, [pc, #324]	; (800d26c <_svfiprintf_r+0x1ec>)
 800d126:	f7ff fb91 	bl	800c84c <memchr>
 800d12a:	9a04      	ldr	r2, [sp, #16]
 800d12c:	b9d8      	cbnz	r0, 800d166 <_svfiprintf_r+0xe6>
 800d12e:	06d0      	lsls	r0, r2, #27
 800d130:	bf44      	itt	mi
 800d132:	2320      	movmi	r3, #32
 800d134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d138:	0711      	lsls	r1, r2, #28
 800d13a:	bf44      	itt	mi
 800d13c:	232b      	movmi	r3, #43	; 0x2b
 800d13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d142:	f89a 3000 	ldrb.w	r3, [sl]
 800d146:	2b2a      	cmp	r3, #42	; 0x2a
 800d148:	d015      	beq.n	800d176 <_svfiprintf_r+0xf6>
 800d14a:	4654      	mov	r4, sl
 800d14c:	2000      	movs	r0, #0
 800d14e:	f04f 0c0a 	mov.w	ip, #10
 800d152:	9a07      	ldr	r2, [sp, #28]
 800d154:	4621      	mov	r1, r4
 800d156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d15a:	3b30      	subs	r3, #48	; 0x30
 800d15c:	2b09      	cmp	r3, #9
 800d15e:	d94e      	bls.n	800d1fe <_svfiprintf_r+0x17e>
 800d160:	b1b0      	cbz	r0, 800d190 <_svfiprintf_r+0x110>
 800d162:	9207      	str	r2, [sp, #28]
 800d164:	e014      	b.n	800d190 <_svfiprintf_r+0x110>
 800d166:	eba0 0308 	sub.w	r3, r0, r8
 800d16a:	fa09 f303 	lsl.w	r3, r9, r3
 800d16e:	4313      	orrs	r3, r2
 800d170:	46a2      	mov	sl, r4
 800d172:	9304      	str	r3, [sp, #16]
 800d174:	e7d2      	b.n	800d11c <_svfiprintf_r+0x9c>
 800d176:	9b03      	ldr	r3, [sp, #12]
 800d178:	1d19      	adds	r1, r3, #4
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	9103      	str	r1, [sp, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bfbb      	ittet	lt
 800d182:	425b      	neglt	r3, r3
 800d184:	f042 0202 	orrlt.w	r2, r2, #2
 800d188:	9307      	strge	r3, [sp, #28]
 800d18a:	9307      	strlt	r3, [sp, #28]
 800d18c:	bfb8      	it	lt
 800d18e:	9204      	strlt	r2, [sp, #16]
 800d190:	7823      	ldrb	r3, [r4, #0]
 800d192:	2b2e      	cmp	r3, #46	; 0x2e
 800d194:	d10c      	bne.n	800d1b0 <_svfiprintf_r+0x130>
 800d196:	7863      	ldrb	r3, [r4, #1]
 800d198:	2b2a      	cmp	r3, #42	; 0x2a
 800d19a:	d135      	bne.n	800d208 <_svfiprintf_r+0x188>
 800d19c:	9b03      	ldr	r3, [sp, #12]
 800d19e:	3402      	adds	r4, #2
 800d1a0:	1d1a      	adds	r2, r3, #4
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	9203      	str	r2, [sp, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	bfb8      	it	lt
 800d1aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d270 <_svfiprintf_r+0x1f0>
 800d1b4:	2203      	movs	r2, #3
 800d1b6:	4650      	mov	r0, sl
 800d1b8:	7821      	ldrb	r1, [r4, #0]
 800d1ba:	f7ff fb47 	bl	800c84c <memchr>
 800d1be:	b140      	cbz	r0, 800d1d2 <_svfiprintf_r+0x152>
 800d1c0:	2340      	movs	r3, #64	; 0x40
 800d1c2:	eba0 000a 	sub.w	r0, r0, sl
 800d1c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d1ca:	9b04      	ldr	r3, [sp, #16]
 800d1cc:	3401      	adds	r4, #1
 800d1ce:	4303      	orrs	r3, r0
 800d1d0:	9304      	str	r3, [sp, #16]
 800d1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1d6:	2206      	movs	r2, #6
 800d1d8:	4826      	ldr	r0, [pc, #152]	; (800d274 <_svfiprintf_r+0x1f4>)
 800d1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1de:	f7ff fb35 	bl	800c84c <memchr>
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d038      	beq.n	800d258 <_svfiprintf_r+0x1d8>
 800d1e6:	4b24      	ldr	r3, [pc, #144]	; (800d278 <_svfiprintf_r+0x1f8>)
 800d1e8:	bb1b      	cbnz	r3, 800d232 <_svfiprintf_r+0x1b2>
 800d1ea:	9b03      	ldr	r3, [sp, #12]
 800d1ec:	3307      	adds	r3, #7
 800d1ee:	f023 0307 	bic.w	r3, r3, #7
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	9303      	str	r3, [sp, #12]
 800d1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1f8:	4433      	add	r3, r6
 800d1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1fc:	e767      	b.n	800d0ce <_svfiprintf_r+0x4e>
 800d1fe:	460c      	mov	r4, r1
 800d200:	2001      	movs	r0, #1
 800d202:	fb0c 3202 	mla	r2, ip, r2, r3
 800d206:	e7a5      	b.n	800d154 <_svfiprintf_r+0xd4>
 800d208:	2300      	movs	r3, #0
 800d20a:	f04f 0c0a 	mov.w	ip, #10
 800d20e:	4619      	mov	r1, r3
 800d210:	3401      	adds	r4, #1
 800d212:	9305      	str	r3, [sp, #20]
 800d214:	4620      	mov	r0, r4
 800d216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d21a:	3a30      	subs	r2, #48	; 0x30
 800d21c:	2a09      	cmp	r2, #9
 800d21e:	d903      	bls.n	800d228 <_svfiprintf_r+0x1a8>
 800d220:	2b00      	cmp	r3, #0
 800d222:	d0c5      	beq.n	800d1b0 <_svfiprintf_r+0x130>
 800d224:	9105      	str	r1, [sp, #20]
 800d226:	e7c3      	b.n	800d1b0 <_svfiprintf_r+0x130>
 800d228:	4604      	mov	r4, r0
 800d22a:	2301      	movs	r3, #1
 800d22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d230:	e7f0      	b.n	800d214 <_svfiprintf_r+0x194>
 800d232:	ab03      	add	r3, sp, #12
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	462a      	mov	r2, r5
 800d238:	4638      	mov	r0, r7
 800d23a:	4b10      	ldr	r3, [pc, #64]	; (800d27c <_svfiprintf_r+0x1fc>)
 800d23c:	a904      	add	r1, sp, #16
 800d23e:	f7fe f87b 	bl	800b338 <_printf_float>
 800d242:	1c42      	adds	r2, r0, #1
 800d244:	4606      	mov	r6, r0
 800d246:	d1d6      	bne.n	800d1f6 <_svfiprintf_r+0x176>
 800d248:	89ab      	ldrh	r3, [r5, #12]
 800d24a:	065b      	lsls	r3, r3, #25
 800d24c:	f53f af2c 	bmi.w	800d0a8 <_svfiprintf_r+0x28>
 800d250:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d252:	b01d      	add	sp, #116	; 0x74
 800d254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d258:	ab03      	add	r3, sp, #12
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	462a      	mov	r2, r5
 800d25e:	4638      	mov	r0, r7
 800d260:	4b06      	ldr	r3, [pc, #24]	; (800d27c <_svfiprintf_r+0x1fc>)
 800d262:	a904      	add	r1, sp, #16
 800d264:	f7fe fb04 	bl	800b870 <_printf_i>
 800d268:	e7eb      	b.n	800d242 <_svfiprintf_r+0x1c2>
 800d26a:	bf00      	nop
 800d26c:	0800e93c 	.word	0x0800e93c
 800d270:	0800e942 	.word	0x0800e942
 800d274:	0800e946 	.word	0x0800e946
 800d278:	0800b339 	.word	0x0800b339
 800d27c:	0800cfc9 	.word	0x0800cfc9

0800d280 <__assert_func>:
 800d280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d282:	4614      	mov	r4, r2
 800d284:	461a      	mov	r2, r3
 800d286:	4b09      	ldr	r3, [pc, #36]	; (800d2ac <__assert_func+0x2c>)
 800d288:	4605      	mov	r5, r0
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68d8      	ldr	r0, [r3, #12]
 800d28e:	b14c      	cbz	r4, 800d2a4 <__assert_func+0x24>
 800d290:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <__assert_func+0x30>)
 800d292:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d296:	9100      	str	r1, [sp, #0]
 800d298:	462b      	mov	r3, r5
 800d29a:	4906      	ldr	r1, [pc, #24]	; (800d2b4 <__assert_func+0x34>)
 800d29c:	f000 f80e 	bl	800d2bc <fiprintf>
 800d2a0:	f000 faa2 	bl	800d7e8 <abort>
 800d2a4:	4b04      	ldr	r3, [pc, #16]	; (800d2b8 <__assert_func+0x38>)
 800d2a6:	461c      	mov	r4, r3
 800d2a8:	e7f3      	b.n	800d292 <__assert_func+0x12>
 800d2aa:	bf00      	nop
 800d2ac:	20000140 	.word	0x20000140
 800d2b0:	0800e94d 	.word	0x0800e94d
 800d2b4:	0800e95a 	.word	0x0800e95a
 800d2b8:	0800e988 	.word	0x0800e988

0800d2bc <fiprintf>:
 800d2bc:	b40e      	push	{r1, r2, r3}
 800d2be:	b503      	push	{r0, r1, lr}
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	ab03      	add	r3, sp, #12
 800d2c4:	4805      	ldr	r0, [pc, #20]	; (800d2dc <fiprintf+0x20>)
 800d2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ca:	6800      	ldr	r0, [r0, #0]
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	f000 f88d 	bl	800d3ec <_vfiprintf_r>
 800d2d2:	b002      	add	sp, #8
 800d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d8:	b003      	add	sp, #12
 800d2da:	4770      	bx	lr
 800d2dc:	20000140 	.word	0x20000140

0800d2e0 <__retarget_lock_init_recursive>:
 800d2e0:	4770      	bx	lr

0800d2e2 <__retarget_lock_acquire_recursive>:
 800d2e2:	4770      	bx	lr

0800d2e4 <__retarget_lock_release_recursive>:
 800d2e4:	4770      	bx	lr

0800d2e6 <__ascii_mbtowc>:
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	b901      	cbnz	r1, 800d2ec <__ascii_mbtowc+0x6>
 800d2ea:	a901      	add	r1, sp, #4
 800d2ec:	b142      	cbz	r2, 800d300 <__ascii_mbtowc+0x1a>
 800d2ee:	b14b      	cbz	r3, 800d304 <__ascii_mbtowc+0x1e>
 800d2f0:	7813      	ldrb	r3, [r2, #0]
 800d2f2:	600b      	str	r3, [r1, #0]
 800d2f4:	7812      	ldrb	r2, [r2, #0]
 800d2f6:	1e10      	subs	r0, r2, #0
 800d2f8:	bf18      	it	ne
 800d2fa:	2001      	movne	r0, #1
 800d2fc:	b002      	add	sp, #8
 800d2fe:	4770      	bx	lr
 800d300:	4610      	mov	r0, r2
 800d302:	e7fb      	b.n	800d2fc <__ascii_mbtowc+0x16>
 800d304:	f06f 0001 	mvn.w	r0, #1
 800d308:	e7f8      	b.n	800d2fc <__ascii_mbtowc+0x16>

0800d30a <memmove>:
 800d30a:	4288      	cmp	r0, r1
 800d30c:	b510      	push	{r4, lr}
 800d30e:	eb01 0402 	add.w	r4, r1, r2
 800d312:	d902      	bls.n	800d31a <memmove+0x10>
 800d314:	4284      	cmp	r4, r0
 800d316:	4623      	mov	r3, r4
 800d318:	d807      	bhi.n	800d32a <memmove+0x20>
 800d31a:	1e43      	subs	r3, r0, #1
 800d31c:	42a1      	cmp	r1, r4
 800d31e:	d008      	beq.n	800d332 <memmove+0x28>
 800d320:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d324:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d328:	e7f8      	b.n	800d31c <memmove+0x12>
 800d32a:	4601      	mov	r1, r0
 800d32c:	4402      	add	r2, r0
 800d32e:	428a      	cmp	r2, r1
 800d330:	d100      	bne.n	800d334 <memmove+0x2a>
 800d332:	bd10      	pop	{r4, pc}
 800d334:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d338:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d33c:	e7f7      	b.n	800d32e <memmove+0x24>

0800d33e <_realloc_r>:
 800d33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d342:	4680      	mov	r8, r0
 800d344:	4614      	mov	r4, r2
 800d346:	460e      	mov	r6, r1
 800d348:	b921      	cbnz	r1, 800d354 <_realloc_r+0x16>
 800d34a:	4611      	mov	r1, r2
 800d34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d350:	f7fd bee0 	b.w	800b114 <_malloc_r>
 800d354:	b92a      	cbnz	r2, 800d362 <_realloc_r+0x24>
 800d356:	f7fd fe75 	bl	800b044 <_free_r>
 800d35a:	4625      	mov	r5, r4
 800d35c:	4628      	mov	r0, r5
 800d35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d362:	f000 fc61 	bl	800dc28 <_malloc_usable_size_r>
 800d366:	4284      	cmp	r4, r0
 800d368:	4607      	mov	r7, r0
 800d36a:	d802      	bhi.n	800d372 <_realloc_r+0x34>
 800d36c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d370:	d812      	bhi.n	800d398 <_realloc_r+0x5a>
 800d372:	4621      	mov	r1, r4
 800d374:	4640      	mov	r0, r8
 800d376:	f7fd fecd 	bl	800b114 <_malloc_r>
 800d37a:	4605      	mov	r5, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d0ed      	beq.n	800d35c <_realloc_r+0x1e>
 800d380:	42bc      	cmp	r4, r7
 800d382:	4622      	mov	r2, r4
 800d384:	4631      	mov	r1, r6
 800d386:	bf28      	it	cs
 800d388:	463a      	movcs	r2, r7
 800d38a:	f7ff fa6d 	bl	800c868 <memcpy>
 800d38e:	4631      	mov	r1, r6
 800d390:	4640      	mov	r0, r8
 800d392:	f7fd fe57 	bl	800b044 <_free_r>
 800d396:	e7e1      	b.n	800d35c <_realloc_r+0x1e>
 800d398:	4635      	mov	r5, r6
 800d39a:	e7df      	b.n	800d35c <_realloc_r+0x1e>

0800d39c <__sfputc_r>:
 800d39c:	6893      	ldr	r3, [r2, #8]
 800d39e:	b410      	push	{r4}
 800d3a0:	3b01      	subs	r3, #1
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	6093      	str	r3, [r2, #8]
 800d3a6:	da07      	bge.n	800d3b8 <__sfputc_r+0x1c>
 800d3a8:	6994      	ldr	r4, [r2, #24]
 800d3aa:	42a3      	cmp	r3, r4
 800d3ac:	db01      	blt.n	800d3b2 <__sfputc_r+0x16>
 800d3ae:	290a      	cmp	r1, #10
 800d3b0:	d102      	bne.n	800d3b8 <__sfputc_r+0x1c>
 800d3b2:	bc10      	pop	{r4}
 800d3b4:	f000 b94a 	b.w	800d64c <__swbuf_r>
 800d3b8:	6813      	ldr	r3, [r2, #0]
 800d3ba:	1c58      	adds	r0, r3, #1
 800d3bc:	6010      	str	r0, [r2, #0]
 800d3be:	7019      	strb	r1, [r3, #0]
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	bc10      	pop	{r4}
 800d3c4:	4770      	bx	lr

0800d3c6 <__sfputs_r>:
 800d3c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	460f      	mov	r7, r1
 800d3cc:	4614      	mov	r4, r2
 800d3ce:	18d5      	adds	r5, r2, r3
 800d3d0:	42ac      	cmp	r4, r5
 800d3d2:	d101      	bne.n	800d3d8 <__sfputs_r+0x12>
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	e007      	b.n	800d3e8 <__sfputs_r+0x22>
 800d3d8:	463a      	mov	r2, r7
 800d3da:	4630      	mov	r0, r6
 800d3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e0:	f7ff ffdc 	bl	800d39c <__sfputc_r>
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d1f3      	bne.n	800d3d0 <__sfputs_r+0xa>
 800d3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3ec <_vfiprintf_r>:
 800d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	460d      	mov	r5, r1
 800d3f2:	4614      	mov	r4, r2
 800d3f4:	4698      	mov	r8, r3
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	b09d      	sub	sp, #116	; 0x74
 800d3fa:	b118      	cbz	r0, 800d404 <_vfiprintf_r+0x18>
 800d3fc:	6983      	ldr	r3, [r0, #24]
 800d3fe:	b90b      	cbnz	r3, 800d404 <_vfiprintf_r+0x18>
 800d400:	f000 fb10 	bl	800da24 <__sinit>
 800d404:	4b89      	ldr	r3, [pc, #548]	; (800d62c <_vfiprintf_r+0x240>)
 800d406:	429d      	cmp	r5, r3
 800d408:	d11b      	bne.n	800d442 <_vfiprintf_r+0x56>
 800d40a:	6875      	ldr	r5, [r6, #4]
 800d40c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d40e:	07d9      	lsls	r1, r3, #31
 800d410:	d405      	bmi.n	800d41e <_vfiprintf_r+0x32>
 800d412:	89ab      	ldrh	r3, [r5, #12]
 800d414:	059a      	lsls	r2, r3, #22
 800d416:	d402      	bmi.n	800d41e <_vfiprintf_r+0x32>
 800d418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d41a:	f7ff ff62 	bl	800d2e2 <__retarget_lock_acquire_recursive>
 800d41e:	89ab      	ldrh	r3, [r5, #12]
 800d420:	071b      	lsls	r3, r3, #28
 800d422:	d501      	bpl.n	800d428 <_vfiprintf_r+0x3c>
 800d424:	692b      	ldr	r3, [r5, #16]
 800d426:	b9eb      	cbnz	r3, 800d464 <_vfiprintf_r+0x78>
 800d428:	4629      	mov	r1, r5
 800d42a:	4630      	mov	r0, r6
 800d42c:	f000 f96e 	bl	800d70c <__swsetup_r>
 800d430:	b1c0      	cbz	r0, 800d464 <_vfiprintf_r+0x78>
 800d432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d434:	07dc      	lsls	r4, r3, #31
 800d436:	d50e      	bpl.n	800d456 <_vfiprintf_r+0x6a>
 800d438:	f04f 30ff 	mov.w	r0, #4294967295
 800d43c:	b01d      	add	sp, #116	; 0x74
 800d43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d442:	4b7b      	ldr	r3, [pc, #492]	; (800d630 <_vfiprintf_r+0x244>)
 800d444:	429d      	cmp	r5, r3
 800d446:	d101      	bne.n	800d44c <_vfiprintf_r+0x60>
 800d448:	68b5      	ldr	r5, [r6, #8]
 800d44a:	e7df      	b.n	800d40c <_vfiprintf_r+0x20>
 800d44c:	4b79      	ldr	r3, [pc, #484]	; (800d634 <_vfiprintf_r+0x248>)
 800d44e:	429d      	cmp	r5, r3
 800d450:	bf08      	it	eq
 800d452:	68f5      	ldreq	r5, [r6, #12]
 800d454:	e7da      	b.n	800d40c <_vfiprintf_r+0x20>
 800d456:	89ab      	ldrh	r3, [r5, #12]
 800d458:	0598      	lsls	r0, r3, #22
 800d45a:	d4ed      	bmi.n	800d438 <_vfiprintf_r+0x4c>
 800d45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d45e:	f7ff ff41 	bl	800d2e4 <__retarget_lock_release_recursive>
 800d462:	e7e9      	b.n	800d438 <_vfiprintf_r+0x4c>
 800d464:	2300      	movs	r3, #0
 800d466:	9309      	str	r3, [sp, #36]	; 0x24
 800d468:	2320      	movs	r3, #32
 800d46a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d46e:	2330      	movs	r3, #48	; 0x30
 800d470:	f04f 0901 	mov.w	r9, #1
 800d474:	f8cd 800c 	str.w	r8, [sp, #12]
 800d478:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d638 <_vfiprintf_r+0x24c>
 800d47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d480:	4623      	mov	r3, r4
 800d482:	469a      	mov	sl, r3
 800d484:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d488:	b10a      	cbz	r2, 800d48e <_vfiprintf_r+0xa2>
 800d48a:	2a25      	cmp	r2, #37	; 0x25
 800d48c:	d1f9      	bne.n	800d482 <_vfiprintf_r+0x96>
 800d48e:	ebba 0b04 	subs.w	fp, sl, r4
 800d492:	d00b      	beq.n	800d4ac <_vfiprintf_r+0xc0>
 800d494:	465b      	mov	r3, fp
 800d496:	4622      	mov	r2, r4
 800d498:	4629      	mov	r1, r5
 800d49a:	4630      	mov	r0, r6
 800d49c:	f7ff ff93 	bl	800d3c6 <__sfputs_r>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	f000 80aa 	beq.w	800d5fa <_vfiprintf_r+0x20e>
 800d4a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4a8:	445a      	add	r2, fp
 800d4aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 80a2 	beq.w	800d5fa <_vfiprintf_r+0x20e>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c0:	f10a 0a01 	add.w	sl, sl, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	9307      	str	r3, [sp, #28]
 800d4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ce:	4654      	mov	r4, sl
 800d4d0:	2205      	movs	r2, #5
 800d4d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4d6:	4858      	ldr	r0, [pc, #352]	; (800d638 <_vfiprintf_r+0x24c>)
 800d4d8:	f7ff f9b8 	bl	800c84c <memchr>
 800d4dc:	9a04      	ldr	r2, [sp, #16]
 800d4de:	b9d8      	cbnz	r0, 800d518 <_vfiprintf_r+0x12c>
 800d4e0:	06d1      	lsls	r1, r2, #27
 800d4e2:	bf44      	itt	mi
 800d4e4:	2320      	movmi	r3, #32
 800d4e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ea:	0713      	lsls	r3, r2, #28
 800d4ec:	bf44      	itt	mi
 800d4ee:	232b      	movmi	r3, #43	; 0x2b
 800d4f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d4fa:	d015      	beq.n	800d528 <_vfiprintf_r+0x13c>
 800d4fc:	4654      	mov	r4, sl
 800d4fe:	2000      	movs	r0, #0
 800d500:	f04f 0c0a 	mov.w	ip, #10
 800d504:	9a07      	ldr	r2, [sp, #28]
 800d506:	4621      	mov	r1, r4
 800d508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d50c:	3b30      	subs	r3, #48	; 0x30
 800d50e:	2b09      	cmp	r3, #9
 800d510:	d94e      	bls.n	800d5b0 <_vfiprintf_r+0x1c4>
 800d512:	b1b0      	cbz	r0, 800d542 <_vfiprintf_r+0x156>
 800d514:	9207      	str	r2, [sp, #28]
 800d516:	e014      	b.n	800d542 <_vfiprintf_r+0x156>
 800d518:	eba0 0308 	sub.w	r3, r0, r8
 800d51c:	fa09 f303 	lsl.w	r3, r9, r3
 800d520:	4313      	orrs	r3, r2
 800d522:	46a2      	mov	sl, r4
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	e7d2      	b.n	800d4ce <_vfiprintf_r+0xe2>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	1d19      	adds	r1, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9103      	str	r1, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	bfbb      	ittet	lt
 800d534:	425b      	neglt	r3, r3
 800d536:	f042 0202 	orrlt.w	r2, r2, #2
 800d53a:	9307      	strge	r3, [sp, #28]
 800d53c:	9307      	strlt	r3, [sp, #28]
 800d53e:	bfb8      	it	lt
 800d540:	9204      	strlt	r2, [sp, #16]
 800d542:	7823      	ldrb	r3, [r4, #0]
 800d544:	2b2e      	cmp	r3, #46	; 0x2e
 800d546:	d10c      	bne.n	800d562 <_vfiprintf_r+0x176>
 800d548:	7863      	ldrb	r3, [r4, #1]
 800d54a:	2b2a      	cmp	r3, #42	; 0x2a
 800d54c:	d135      	bne.n	800d5ba <_vfiprintf_r+0x1ce>
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	3402      	adds	r4, #2
 800d552:	1d1a      	adds	r2, r3, #4
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	9203      	str	r2, [sp, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	bfb8      	it	lt
 800d55c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d560:	9305      	str	r3, [sp, #20]
 800d562:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d63c <_vfiprintf_r+0x250>
 800d566:	2203      	movs	r2, #3
 800d568:	4650      	mov	r0, sl
 800d56a:	7821      	ldrb	r1, [r4, #0]
 800d56c:	f7ff f96e 	bl	800c84c <memchr>
 800d570:	b140      	cbz	r0, 800d584 <_vfiprintf_r+0x198>
 800d572:	2340      	movs	r3, #64	; 0x40
 800d574:	eba0 000a 	sub.w	r0, r0, sl
 800d578:	fa03 f000 	lsl.w	r0, r3, r0
 800d57c:	9b04      	ldr	r3, [sp, #16]
 800d57e:	3401      	adds	r4, #1
 800d580:	4303      	orrs	r3, r0
 800d582:	9304      	str	r3, [sp, #16]
 800d584:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d588:	2206      	movs	r2, #6
 800d58a:	482d      	ldr	r0, [pc, #180]	; (800d640 <_vfiprintf_r+0x254>)
 800d58c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d590:	f7ff f95c 	bl	800c84c <memchr>
 800d594:	2800      	cmp	r0, #0
 800d596:	d03f      	beq.n	800d618 <_vfiprintf_r+0x22c>
 800d598:	4b2a      	ldr	r3, [pc, #168]	; (800d644 <_vfiprintf_r+0x258>)
 800d59a:	bb1b      	cbnz	r3, 800d5e4 <_vfiprintf_r+0x1f8>
 800d59c:	9b03      	ldr	r3, [sp, #12]
 800d59e:	3307      	adds	r3, #7
 800d5a0:	f023 0307 	bic.w	r3, r3, #7
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	9303      	str	r3, [sp, #12]
 800d5a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5aa:	443b      	add	r3, r7
 800d5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d5ae:	e767      	b.n	800d480 <_vfiprintf_r+0x94>
 800d5b0:	460c      	mov	r4, r1
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5b8:	e7a5      	b.n	800d506 <_vfiprintf_r+0x11a>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	f04f 0c0a 	mov.w	ip, #10
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	3401      	adds	r4, #1
 800d5c4:	9305      	str	r3, [sp, #20]
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5cc:	3a30      	subs	r2, #48	; 0x30
 800d5ce:	2a09      	cmp	r2, #9
 800d5d0:	d903      	bls.n	800d5da <_vfiprintf_r+0x1ee>
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d0c5      	beq.n	800d562 <_vfiprintf_r+0x176>
 800d5d6:	9105      	str	r1, [sp, #20]
 800d5d8:	e7c3      	b.n	800d562 <_vfiprintf_r+0x176>
 800d5da:	4604      	mov	r4, r0
 800d5dc:	2301      	movs	r3, #1
 800d5de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5e2:	e7f0      	b.n	800d5c6 <_vfiprintf_r+0x1da>
 800d5e4:	ab03      	add	r3, sp, #12
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	462a      	mov	r2, r5
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	4b16      	ldr	r3, [pc, #88]	; (800d648 <_vfiprintf_r+0x25c>)
 800d5ee:	a904      	add	r1, sp, #16
 800d5f0:	f7fd fea2 	bl	800b338 <_printf_float>
 800d5f4:	4607      	mov	r7, r0
 800d5f6:	1c78      	adds	r0, r7, #1
 800d5f8:	d1d6      	bne.n	800d5a8 <_vfiprintf_r+0x1bc>
 800d5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5fc:	07d9      	lsls	r1, r3, #31
 800d5fe:	d405      	bmi.n	800d60c <_vfiprintf_r+0x220>
 800d600:	89ab      	ldrh	r3, [r5, #12]
 800d602:	059a      	lsls	r2, r3, #22
 800d604:	d402      	bmi.n	800d60c <_vfiprintf_r+0x220>
 800d606:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d608:	f7ff fe6c 	bl	800d2e4 <__retarget_lock_release_recursive>
 800d60c:	89ab      	ldrh	r3, [r5, #12]
 800d60e:	065b      	lsls	r3, r3, #25
 800d610:	f53f af12 	bmi.w	800d438 <_vfiprintf_r+0x4c>
 800d614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d616:	e711      	b.n	800d43c <_vfiprintf_r+0x50>
 800d618:	ab03      	add	r3, sp, #12
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	462a      	mov	r2, r5
 800d61e:	4630      	mov	r0, r6
 800d620:	4b09      	ldr	r3, [pc, #36]	; (800d648 <_vfiprintf_r+0x25c>)
 800d622:	a904      	add	r1, sp, #16
 800d624:	f7fe f924 	bl	800b870 <_printf_i>
 800d628:	e7e4      	b.n	800d5f4 <_vfiprintf_r+0x208>
 800d62a:	bf00      	nop
 800d62c:	0800eab4 	.word	0x0800eab4
 800d630:	0800ead4 	.word	0x0800ead4
 800d634:	0800ea94 	.word	0x0800ea94
 800d638:	0800e93c 	.word	0x0800e93c
 800d63c:	0800e942 	.word	0x0800e942
 800d640:	0800e946 	.word	0x0800e946
 800d644:	0800b339 	.word	0x0800b339
 800d648:	0800d3c7 	.word	0x0800d3c7

0800d64c <__swbuf_r>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	460e      	mov	r6, r1
 800d650:	4614      	mov	r4, r2
 800d652:	4605      	mov	r5, r0
 800d654:	b118      	cbz	r0, 800d65e <__swbuf_r+0x12>
 800d656:	6983      	ldr	r3, [r0, #24]
 800d658:	b90b      	cbnz	r3, 800d65e <__swbuf_r+0x12>
 800d65a:	f000 f9e3 	bl	800da24 <__sinit>
 800d65e:	4b21      	ldr	r3, [pc, #132]	; (800d6e4 <__swbuf_r+0x98>)
 800d660:	429c      	cmp	r4, r3
 800d662:	d12b      	bne.n	800d6bc <__swbuf_r+0x70>
 800d664:	686c      	ldr	r4, [r5, #4]
 800d666:	69a3      	ldr	r3, [r4, #24]
 800d668:	60a3      	str	r3, [r4, #8]
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	071a      	lsls	r2, r3, #28
 800d66e:	d52f      	bpl.n	800d6d0 <__swbuf_r+0x84>
 800d670:	6923      	ldr	r3, [r4, #16]
 800d672:	b36b      	cbz	r3, 800d6d0 <__swbuf_r+0x84>
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	6820      	ldr	r0, [r4, #0]
 800d678:	b2f6      	uxtb	r6, r6
 800d67a:	1ac0      	subs	r0, r0, r3
 800d67c:	6963      	ldr	r3, [r4, #20]
 800d67e:	4637      	mov	r7, r6
 800d680:	4283      	cmp	r3, r0
 800d682:	dc04      	bgt.n	800d68e <__swbuf_r+0x42>
 800d684:	4621      	mov	r1, r4
 800d686:	4628      	mov	r0, r5
 800d688:	f000 f938 	bl	800d8fc <_fflush_r>
 800d68c:	bb30      	cbnz	r0, 800d6dc <__swbuf_r+0x90>
 800d68e:	68a3      	ldr	r3, [r4, #8]
 800d690:	3001      	adds	r0, #1
 800d692:	3b01      	subs	r3, #1
 800d694:	60a3      	str	r3, [r4, #8]
 800d696:	6823      	ldr	r3, [r4, #0]
 800d698:	1c5a      	adds	r2, r3, #1
 800d69a:	6022      	str	r2, [r4, #0]
 800d69c:	701e      	strb	r6, [r3, #0]
 800d69e:	6963      	ldr	r3, [r4, #20]
 800d6a0:	4283      	cmp	r3, r0
 800d6a2:	d004      	beq.n	800d6ae <__swbuf_r+0x62>
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	07db      	lsls	r3, r3, #31
 800d6a8:	d506      	bpl.n	800d6b8 <__swbuf_r+0x6c>
 800d6aa:	2e0a      	cmp	r6, #10
 800d6ac:	d104      	bne.n	800d6b8 <__swbuf_r+0x6c>
 800d6ae:	4621      	mov	r1, r4
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	f000 f923 	bl	800d8fc <_fflush_r>
 800d6b6:	b988      	cbnz	r0, 800d6dc <__swbuf_r+0x90>
 800d6b8:	4638      	mov	r0, r7
 800d6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6bc:	4b0a      	ldr	r3, [pc, #40]	; (800d6e8 <__swbuf_r+0x9c>)
 800d6be:	429c      	cmp	r4, r3
 800d6c0:	d101      	bne.n	800d6c6 <__swbuf_r+0x7a>
 800d6c2:	68ac      	ldr	r4, [r5, #8]
 800d6c4:	e7cf      	b.n	800d666 <__swbuf_r+0x1a>
 800d6c6:	4b09      	ldr	r3, [pc, #36]	; (800d6ec <__swbuf_r+0xa0>)
 800d6c8:	429c      	cmp	r4, r3
 800d6ca:	bf08      	it	eq
 800d6cc:	68ec      	ldreq	r4, [r5, #12]
 800d6ce:	e7ca      	b.n	800d666 <__swbuf_r+0x1a>
 800d6d0:	4621      	mov	r1, r4
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f000 f81a 	bl	800d70c <__swsetup_r>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d0cb      	beq.n	800d674 <__swbuf_r+0x28>
 800d6dc:	f04f 37ff 	mov.w	r7, #4294967295
 800d6e0:	e7ea      	b.n	800d6b8 <__swbuf_r+0x6c>
 800d6e2:	bf00      	nop
 800d6e4:	0800eab4 	.word	0x0800eab4
 800d6e8:	0800ead4 	.word	0x0800ead4
 800d6ec:	0800ea94 	.word	0x0800ea94

0800d6f0 <__ascii_wctomb>:
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	4608      	mov	r0, r1
 800d6f4:	b141      	cbz	r1, 800d708 <__ascii_wctomb+0x18>
 800d6f6:	2aff      	cmp	r2, #255	; 0xff
 800d6f8:	d904      	bls.n	800d704 <__ascii_wctomb+0x14>
 800d6fa:	228a      	movs	r2, #138	; 0x8a
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	4770      	bx	lr
 800d704:	2001      	movs	r0, #1
 800d706:	700a      	strb	r2, [r1, #0]
 800d708:	4770      	bx	lr
	...

0800d70c <__swsetup_r>:
 800d70c:	4b32      	ldr	r3, [pc, #200]	; (800d7d8 <__swsetup_r+0xcc>)
 800d70e:	b570      	push	{r4, r5, r6, lr}
 800d710:	681d      	ldr	r5, [r3, #0]
 800d712:	4606      	mov	r6, r0
 800d714:	460c      	mov	r4, r1
 800d716:	b125      	cbz	r5, 800d722 <__swsetup_r+0x16>
 800d718:	69ab      	ldr	r3, [r5, #24]
 800d71a:	b913      	cbnz	r3, 800d722 <__swsetup_r+0x16>
 800d71c:	4628      	mov	r0, r5
 800d71e:	f000 f981 	bl	800da24 <__sinit>
 800d722:	4b2e      	ldr	r3, [pc, #184]	; (800d7dc <__swsetup_r+0xd0>)
 800d724:	429c      	cmp	r4, r3
 800d726:	d10f      	bne.n	800d748 <__swsetup_r+0x3c>
 800d728:	686c      	ldr	r4, [r5, #4]
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d730:	0719      	lsls	r1, r3, #28
 800d732:	d42c      	bmi.n	800d78e <__swsetup_r+0x82>
 800d734:	06dd      	lsls	r5, r3, #27
 800d736:	d411      	bmi.n	800d75c <__swsetup_r+0x50>
 800d738:	2309      	movs	r3, #9
 800d73a:	6033      	str	r3, [r6, #0]
 800d73c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d740:	f04f 30ff 	mov.w	r0, #4294967295
 800d744:	81a3      	strh	r3, [r4, #12]
 800d746:	e03e      	b.n	800d7c6 <__swsetup_r+0xba>
 800d748:	4b25      	ldr	r3, [pc, #148]	; (800d7e0 <__swsetup_r+0xd4>)
 800d74a:	429c      	cmp	r4, r3
 800d74c:	d101      	bne.n	800d752 <__swsetup_r+0x46>
 800d74e:	68ac      	ldr	r4, [r5, #8]
 800d750:	e7eb      	b.n	800d72a <__swsetup_r+0x1e>
 800d752:	4b24      	ldr	r3, [pc, #144]	; (800d7e4 <__swsetup_r+0xd8>)
 800d754:	429c      	cmp	r4, r3
 800d756:	bf08      	it	eq
 800d758:	68ec      	ldreq	r4, [r5, #12]
 800d75a:	e7e6      	b.n	800d72a <__swsetup_r+0x1e>
 800d75c:	0758      	lsls	r0, r3, #29
 800d75e:	d512      	bpl.n	800d786 <__swsetup_r+0x7a>
 800d760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d762:	b141      	cbz	r1, 800d776 <__swsetup_r+0x6a>
 800d764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d768:	4299      	cmp	r1, r3
 800d76a:	d002      	beq.n	800d772 <__swsetup_r+0x66>
 800d76c:	4630      	mov	r0, r6
 800d76e:	f7fd fc69 	bl	800b044 <_free_r>
 800d772:	2300      	movs	r3, #0
 800d774:	6363      	str	r3, [r4, #52]	; 0x34
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d77c:	81a3      	strh	r3, [r4, #12]
 800d77e:	2300      	movs	r3, #0
 800d780:	6063      	str	r3, [r4, #4]
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	f043 0308 	orr.w	r3, r3, #8
 800d78c:	81a3      	strh	r3, [r4, #12]
 800d78e:	6923      	ldr	r3, [r4, #16]
 800d790:	b94b      	cbnz	r3, 800d7a6 <__swsetup_r+0x9a>
 800d792:	89a3      	ldrh	r3, [r4, #12]
 800d794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d79c:	d003      	beq.n	800d7a6 <__swsetup_r+0x9a>
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f000 fa01 	bl	800dba8 <__smakebuf_r>
 800d7a6:	89a0      	ldrh	r0, [r4, #12]
 800d7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7ac:	f010 0301 	ands.w	r3, r0, #1
 800d7b0:	d00a      	beq.n	800d7c8 <__swsetup_r+0xbc>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	60a3      	str	r3, [r4, #8]
 800d7b6:	6963      	ldr	r3, [r4, #20]
 800d7b8:	425b      	negs	r3, r3
 800d7ba:	61a3      	str	r3, [r4, #24]
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	b943      	cbnz	r3, 800d7d2 <__swsetup_r+0xc6>
 800d7c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7c4:	d1ba      	bne.n	800d73c <__swsetup_r+0x30>
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}
 800d7c8:	0781      	lsls	r1, r0, #30
 800d7ca:	bf58      	it	pl
 800d7cc:	6963      	ldrpl	r3, [r4, #20]
 800d7ce:	60a3      	str	r3, [r4, #8]
 800d7d0:	e7f4      	b.n	800d7bc <__swsetup_r+0xb0>
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	e7f7      	b.n	800d7c6 <__swsetup_r+0xba>
 800d7d6:	bf00      	nop
 800d7d8:	20000140 	.word	0x20000140
 800d7dc:	0800eab4 	.word	0x0800eab4
 800d7e0:	0800ead4 	.word	0x0800ead4
 800d7e4:	0800ea94 	.word	0x0800ea94

0800d7e8 <abort>:
 800d7e8:	2006      	movs	r0, #6
 800d7ea:	b508      	push	{r3, lr}
 800d7ec:	f000 fa4c 	bl	800dc88 <raise>
 800d7f0:	2001      	movs	r0, #1
 800d7f2:	f7f4 fee4 	bl	80025be <_exit>
	...

0800d7f8 <__sflush_r>:
 800d7f8:	898a      	ldrh	r2, [r1, #12]
 800d7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7fc:	4605      	mov	r5, r0
 800d7fe:	0710      	lsls	r0, r2, #28
 800d800:	460c      	mov	r4, r1
 800d802:	d457      	bmi.n	800d8b4 <__sflush_r+0xbc>
 800d804:	684b      	ldr	r3, [r1, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	dc04      	bgt.n	800d814 <__sflush_r+0x1c>
 800d80a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	dc01      	bgt.n	800d814 <__sflush_r+0x1c>
 800d810:	2000      	movs	r0, #0
 800d812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d816:	2e00      	cmp	r6, #0
 800d818:	d0fa      	beq.n	800d810 <__sflush_r+0x18>
 800d81a:	2300      	movs	r3, #0
 800d81c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d820:	682f      	ldr	r7, [r5, #0]
 800d822:	602b      	str	r3, [r5, #0]
 800d824:	d032      	beq.n	800d88c <__sflush_r+0x94>
 800d826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d828:	89a3      	ldrh	r3, [r4, #12]
 800d82a:	075a      	lsls	r2, r3, #29
 800d82c:	d505      	bpl.n	800d83a <__sflush_r+0x42>
 800d82e:	6863      	ldr	r3, [r4, #4]
 800d830:	1ac0      	subs	r0, r0, r3
 800d832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d834:	b10b      	cbz	r3, 800d83a <__sflush_r+0x42>
 800d836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d838:	1ac0      	subs	r0, r0, r3
 800d83a:	2300      	movs	r3, #0
 800d83c:	4602      	mov	r2, r0
 800d83e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d840:	4628      	mov	r0, r5
 800d842:	6a21      	ldr	r1, [r4, #32]
 800d844:	47b0      	blx	r6
 800d846:	1c43      	adds	r3, r0, #1
 800d848:	89a3      	ldrh	r3, [r4, #12]
 800d84a:	d106      	bne.n	800d85a <__sflush_r+0x62>
 800d84c:	6829      	ldr	r1, [r5, #0]
 800d84e:	291d      	cmp	r1, #29
 800d850:	d82c      	bhi.n	800d8ac <__sflush_r+0xb4>
 800d852:	4a29      	ldr	r2, [pc, #164]	; (800d8f8 <__sflush_r+0x100>)
 800d854:	40ca      	lsrs	r2, r1
 800d856:	07d6      	lsls	r6, r2, #31
 800d858:	d528      	bpl.n	800d8ac <__sflush_r+0xb4>
 800d85a:	2200      	movs	r2, #0
 800d85c:	6062      	str	r2, [r4, #4]
 800d85e:	6922      	ldr	r2, [r4, #16]
 800d860:	04d9      	lsls	r1, r3, #19
 800d862:	6022      	str	r2, [r4, #0]
 800d864:	d504      	bpl.n	800d870 <__sflush_r+0x78>
 800d866:	1c42      	adds	r2, r0, #1
 800d868:	d101      	bne.n	800d86e <__sflush_r+0x76>
 800d86a:	682b      	ldr	r3, [r5, #0]
 800d86c:	b903      	cbnz	r3, 800d870 <__sflush_r+0x78>
 800d86e:	6560      	str	r0, [r4, #84]	; 0x54
 800d870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d872:	602f      	str	r7, [r5, #0]
 800d874:	2900      	cmp	r1, #0
 800d876:	d0cb      	beq.n	800d810 <__sflush_r+0x18>
 800d878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d87c:	4299      	cmp	r1, r3
 800d87e:	d002      	beq.n	800d886 <__sflush_r+0x8e>
 800d880:	4628      	mov	r0, r5
 800d882:	f7fd fbdf 	bl	800b044 <_free_r>
 800d886:	2000      	movs	r0, #0
 800d888:	6360      	str	r0, [r4, #52]	; 0x34
 800d88a:	e7c2      	b.n	800d812 <__sflush_r+0x1a>
 800d88c:	6a21      	ldr	r1, [r4, #32]
 800d88e:	2301      	movs	r3, #1
 800d890:	4628      	mov	r0, r5
 800d892:	47b0      	blx	r6
 800d894:	1c41      	adds	r1, r0, #1
 800d896:	d1c7      	bne.n	800d828 <__sflush_r+0x30>
 800d898:	682b      	ldr	r3, [r5, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d0c4      	beq.n	800d828 <__sflush_r+0x30>
 800d89e:	2b1d      	cmp	r3, #29
 800d8a0:	d001      	beq.n	800d8a6 <__sflush_r+0xae>
 800d8a2:	2b16      	cmp	r3, #22
 800d8a4:	d101      	bne.n	800d8aa <__sflush_r+0xb2>
 800d8a6:	602f      	str	r7, [r5, #0]
 800d8a8:	e7b2      	b.n	800d810 <__sflush_r+0x18>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8b0:	81a3      	strh	r3, [r4, #12]
 800d8b2:	e7ae      	b.n	800d812 <__sflush_r+0x1a>
 800d8b4:	690f      	ldr	r7, [r1, #16]
 800d8b6:	2f00      	cmp	r7, #0
 800d8b8:	d0aa      	beq.n	800d810 <__sflush_r+0x18>
 800d8ba:	0793      	lsls	r3, r2, #30
 800d8bc:	bf18      	it	ne
 800d8be:	2300      	movne	r3, #0
 800d8c0:	680e      	ldr	r6, [r1, #0]
 800d8c2:	bf08      	it	eq
 800d8c4:	694b      	ldreq	r3, [r1, #20]
 800d8c6:	1bf6      	subs	r6, r6, r7
 800d8c8:	600f      	str	r7, [r1, #0]
 800d8ca:	608b      	str	r3, [r1, #8]
 800d8cc:	2e00      	cmp	r6, #0
 800d8ce:	dd9f      	ble.n	800d810 <__sflush_r+0x18>
 800d8d0:	4633      	mov	r3, r6
 800d8d2:	463a      	mov	r2, r7
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	6a21      	ldr	r1, [r4, #32]
 800d8d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d8dc:	47e0      	blx	ip
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	dc06      	bgt.n	800d8f0 <__sflush_r+0xf8>
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ec:	81a3      	strh	r3, [r4, #12]
 800d8ee:	e790      	b.n	800d812 <__sflush_r+0x1a>
 800d8f0:	4407      	add	r7, r0
 800d8f2:	1a36      	subs	r6, r6, r0
 800d8f4:	e7ea      	b.n	800d8cc <__sflush_r+0xd4>
 800d8f6:	bf00      	nop
 800d8f8:	20400001 	.word	0x20400001

0800d8fc <_fflush_r>:
 800d8fc:	b538      	push	{r3, r4, r5, lr}
 800d8fe:	690b      	ldr	r3, [r1, #16]
 800d900:	4605      	mov	r5, r0
 800d902:	460c      	mov	r4, r1
 800d904:	b913      	cbnz	r3, 800d90c <_fflush_r+0x10>
 800d906:	2500      	movs	r5, #0
 800d908:	4628      	mov	r0, r5
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
 800d90c:	b118      	cbz	r0, 800d916 <_fflush_r+0x1a>
 800d90e:	6983      	ldr	r3, [r0, #24]
 800d910:	b90b      	cbnz	r3, 800d916 <_fflush_r+0x1a>
 800d912:	f000 f887 	bl	800da24 <__sinit>
 800d916:	4b14      	ldr	r3, [pc, #80]	; (800d968 <_fflush_r+0x6c>)
 800d918:	429c      	cmp	r4, r3
 800d91a:	d11b      	bne.n	800d954 <_fflush_r+0x58>
 800d91c:	686c      	ldr	r4, [r5, #4]
 800d91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d0ef      	beq.n	800d906 <_fflush_r+0xa>
 800d926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d928:	07d0      	lsls	r0, r2, #31
 800d92a:	d404      	bmi.n	800d936 <_fflush_r+0x3a>
 800d92c:	0599      	lsls	r1, r3, #22
 800d92e:	d402      	bmi.n	800d936 <_fflush_r+0x3a>
 800d930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d932:	f7ff fcd6 	bl	800d2e2 <__retarget_lock_acquire_recursive>
 800d936:	4628      	mov	r0, r5
 800d938:	4621      	mov	r1, r4
 800d93a:	f7ff ff5d 	bl	800d7f8 <__sflush_r>
 800d93e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d940:	4605      	mov	r5, r0
 800d942:	07da      	lsls	r2, r3, #31
 800d944:	d4e0      	bmi.n	800d908 <_fflush_r+0xc>
 800d946:	89a3      	ldrh	r3, [r4, #12]
 800d948:	059b      	lsls	r3, r3, #22
 800d94a:	d4dd      	bmi.n	800d908 <_fflush_r+0xc>
 800d94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d94e:	f7ff fcc9 	bl	800d2e4 <__retarget_lock_release_recursive>
 800d952:	e7d9      	b.n	800d908 <_fflush_r+0xc>
 800d954:	4b05      	ldr	r3, [pc, #20]	; (800d96c <_fflush_r+0x70>)
 800d956:	429c      	cmp	r4, r3
 800d958:	d101      	bne.n	800d95e <_fflush_r+0x62>
 800d95a:	68ac      	ldr	r4, [r5, #8]
 800d95c:	e7df      	b.n	800d91e <_fflush_r+0x22>
 800d95e:	4b04      	ldr	r3, [pc, #16]	; (800d970 <_fflush_r+0x74>)
 800d960:	429c      	cmp	r4, r3
 800d962:	bf08      	it	eq
 800d964:	68ec      	ldreq	r4, [r5, #12]
 800d966:	e7da      	b.n	800d91e <_fflush_r+0x22>
 800d968:	0800eab4 	.word	0x0800eab4
 800d96c:	0800ead4 	.word	0x0800ead4
 800d970:	0800ea94 	.word	0x0800ea94

0800d974 <std>:
 800d974:	2300      	movs	r3, #0
 800d976:	b510      	push	{r4, lr}
 800d978:	4604      	mov	r4, r0
 800d97a:	e9c0 3300 	strd	r3, r3, [r0]
 800d97e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d982:	6083      	str	r3, [r0, #8]
 800d984:	8181      	strh	r1, [r0, #12]
 800d986:	6643      	str	r3, [r0, #100]	; 0x64
 800d988:	81c2      	strh	r2, [r0, #14]
 800d98a:	6183      	str	r3, [r0, #24]
 800d98c:	4619      	mov	r1, r3
 800d98e:	2208      	movs	r2, #8
 800d990:	305c      	adds	r0, #92	; 0x5c
 800d992:	f7fd fb4f 	bl	800b034 <memset>
 800d996:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <std+0x38>)
 800d998:	6224      	str	r4, [r4, #32]
 800d99a:	6263      	str	r3, [r4, #36]	; 0x24
 800d99c:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <std+0x3c>)
 800d99e:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9a0:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <std+0x40>)
 800d9a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9a4:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <std+0x44>)
 800d9a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d9a8:	bd10      	pop	{r4, pc}
 800d9aa:	bf00      	nop
 800d9ac:	0800dcc1 	.word	0x0800dcc1
 800d9b0:	0800dce3 	.word	0x0800dce3
 800d9b4:	0800dd1b 	.word	0x0800dd1b
 800d9b8:	0800dd3f 	.word	0x0800dd3f

0800d9bc <_cleanup_r>:
 800d9bc:	4901      	ldr	r1, [pc, #4]	; (800d9c4 <_cleanup_r+0x8>)
 800d9be:	f000 b8af 	b.w	800db20 <_fwalk_reent>
 800d9c2:	bf00      	nop
 800d9c4:	0800d8fd 	.word	0x0800d8fd

0800d9c8 <__sfmoreglue>:
 800d9c8:	2268      	movs	r2, #104	; 0x68
 800d9ca:	b570      	push	{r4, r5, r6, lr}
 800d9cc:	1e4d      	subs	r5, r1, #1
 800d9ce:	4355      	muls	r5, r2
 800d9d0:	460e      	mov	r6, r1
 800d9d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9d6:	f7fd fb9d 	bl	800b114 <_malloc_r>
 800d9da:	4604      	mov	r4, r0
 800d9dc:	b140      	cbz	r0, 800d9f0 <__sfmoreglue+0x28>
 800d9de:	2100      	movs	r1, #0
 800d9e0:	e9c0 1600 	strd	r1, r6, [r0]
 800d9e4:	300c      	adds	r0, #12
 800d9e6:	60a0      	str	r0, [r4, #8]
 800d9e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9ec:	f7fd fb22 	bl	800b034 <memset>
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	bd70      	pop	{r4, r5, r6, pc}

0800d9f4 <__sfp_lock_acquire>:
 800d9f4:	4801      	ldr	r0, [pc, #4]	; (800d9fc <__sfp_lock_acquire+0x8>)
 800d9f6:	f7ff bc74 	b.w	800d2e2 <__retarget_lock_acquire_recursive>
 800d9fa:	bf00      	nop
 800d9fc:	20000d75 	.word	0x20000d75

0800da00 <__sfp_lock_release>:
 800da00:	4801      	ldr	r0, [pc, #4]	; (800da08 <__sfp_lock_release+0x8>)
 800da02:	f7ff bc6f 	b.w	800d2e4 <__retarget_lock_release_recursive>
 800da06:	bf00      	nop
 800da08:	20000d75 	.word	0x20000d75

0800da0c <__sinit_lock_acquire>:
 800da0c:	4801      	ldr	r0, [pc, #4]	; (800da14 <__sinit_lock_acquire+0x8>)
 800da0e:	f7ff bc68 	b.w	800d2e2 <__retarget_lock_acquire_recursive>
 800da12:	bf00      	nop
 800da14:	20000d76 	.word	0x20000d76

0800da18 <__sinit_lock_release>:
 800da18:	4801      	ldr	r0, [pc, #4]	; (800da20 <__sinit_lock_release+0x8>)
 800da1a:	f7ff bc63 	b.w	800d2e4 <__retarget_lock_release_recursive>
 800da1e:	bf00      	nop
 800da20:	20000d76 	.word	0x20000d76

0800da24 <__sinit>:
 800da24:	b510      	push	{r4, lr}
 800da26:	4604      	mov	r4, r0
 800da28:	f7ff fff0 	bl	800da0c <__sinit_lock_acquire>
 800da2c:	69a3      	ldr	r3, [r4, #24]
 800da2e:	b11b      	cbz	r3, 800da38 <__sinit+0x14>
 800da30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da34:	f7ff bff0 	b.w	800da18 <__sinit_lock_release>
 800da38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da3c:	6523      	str	r3, [r4, #80]	; 0x50
 800da3e:	4b13      	ldr	r3, [pc, #76]	; (800da8c <__sinit+0x68>)
 800da40:	4a13      	ldr	r2, [pc, #76]	; (800da90 <__sinit+0x6c>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	62a2      	str	r2, [r4, #40]	; 0x28
 800da46:	42a3      	cmp	r3, r4
 800da48:	bf08      	it	eq
 800da4a:	2301      	moveq	r3, #1
 800da4c:	4620      	mov	r0, r4
 800da4e:	bf08      	it	eq
 800da50:	61a3      	streq	r3, [r4, #24]
 800da52:	f000 f81f 	bl	800da94 <__sfp>
 800da56:	6060      	str	r0, [r4, #4]
 800da58:	4620      	mov	r0, r4
 800da5a:	f000 f81b 	bl	800da94 <__sfp>
 800da5e:	60a0      	str	r0, [r4, #8]
 800da60:	4620      	mov	r0, r4
 800da62:	f000 f817 	bl	800da94 <__sfp>
 800da66:	2200      	movs	r2, #0
 800da68:	2104      	movs	r1, #4
 800da6a:	60e0      	str	r0, [r4, #12]
 800da6c:	6860      	ldr	r0, [r4, #4]
 800da6e:	f7ff ff81 	bl	800d974 <std>
 800da72:	2201      	movs	r2, #1
 800da74:	2109      	movs	r1, #9
 800da76:	68a0      	ldr	r0, [r4, #8]
 800da78:	f7ff ff7c 	bl	800d974 <std>
 800da7c:	2202      	movs	r2, #2
 800da7e:	2112      	movs	r1, #18
 800da80:	68e0      	ldr	r0, [r4, #12]
 800da82:	f7ff ff77 	bl	800d974 <std>
 800da86:	2301      	movs	r3, #1
 800da88:	61a3      	str	r3, [r4, #24]
 800da8a:	e7d1      	b.n	800da30 <__sinit+0xc>
 800da8c:	0800e718 	.word	0x0800e718
 800da90:	0800d9bd 	.word	0x0800d9bd

0800da94 <__sfp>:
 800da94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da96:	4607      	mov	r7, r0
 800da98:	f7ff ffac 	bl	800d9f4 <__sfp_lock_acquire>
 800da9c:	4b1e      	ldr	r3, [pc, #120]	; (800db18 <__sfp+0x84>)
 800da9e:	681e      	ldr	r6, [r3, #0]
 800daa0:	69b3      	ldr	r3, [r6, #24]
 800daa2:	b913      	cbnz	r3, 800daaa <__sfp+0x16>
 800daa4:	4630      	mov	r0, r6
 800daa6:	f7ff ffbd 	bl	800da24 <__sinit>
 800daaa:	3648      	adds	r6, #72	; 0x48
 800daac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	d503      	bpl.n	800dabc <__sfp+0x28>
 800dab4:	6833      	ldr	r3, [r6, #0]
 800dab6:	b30b      	cbz	r3, 800dafc <__sfp+0x68>
 800dab8:	6836      	ldr	r6, [r6, #0]
 800daba:	e7f7      	b.n	800daac <__sfp+0x18>
 800dabc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dac0:	b9d5      	cbnz	r5, 800daf8 <__sfp+0x64>
 800dac2:	4b16      	ldr	r3, [pc, #88]	; (800db1c <__sfp+0x88>)
 800dac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dac8:	60e3      	str	r3, [r4, #12]
 800daca:	6665      	str	r5, [r4, #100]	; 0x64
 800dacc:	f7ff fc08 	bl	800d2e0 <__retarget_lock_init_recursive>
 800dad0:	f7ff ff96 	bl	800da00 <__sfp_lock_release>
 800dad4:	2208      	movs	r2, #8
 800dad6:	4629      	mov	r1, r5
 800dad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dadc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dae0:	6025      	str	r5, [r4, #0]
 800dae2:	61a5      	str	r5, [r4, #24]
 800dae4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dae8:	f7fd faa4 	bl	800b034 <memset>
 800daec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800daf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800daf4:	4620      	mov	r0, r4
 800daf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daf8:	3468      	adds	r4, #104	; 0x68
 800dafa:	e7d9      	b.n	800dab0 <__sfp+0x1c>
 800dafc:	2104      	movs	r1, #4
 800dafe:	4638      	mov	r0, r7
 800db00:	f7ff ff62 	bl	800d9c8 <__sfmoreglue>
 800db04:	4604      	mov	r4, r0
 800db06:	6030      	str	r0, [r6, #0]
 800db08:	2800      	cmp	r0, #0
 800db0a:	d1d5      	bne.n	800dab8 <__sfp+0x24>
 800db0c:	f7ff ff78 	bl	800da00 <__sfp_lock_release>
 800db10:	230c      	movs	r3, #12
 800db12:	603b      	str	r3, [r7, #0]
 800db14:	e7ee      	b.n	800daf4 <__sfp+0x60>
 800db16:	bf00      	nop
 800db18:	0800e718 	.word	0x0800e718
 800db1c:	ffff0001 	.word	0xffff0001

0800db20 <_fwalk_reent>:
 800db20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db24:	4606      	mov	r6, r0
 800db26:	4688      	mov	r8, r1
 800db28:	2700      	movs	r7, #0
 800db2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db32:	f1b9 0901 	subs.w	r9, r9, #1
 800db36:	d505      	bpl.n	800db44 <_fwalk_reent+0x24>
 800db38:	6824      	ldr	r4, [r4, #0]
 800db3a:	2c00      	cmp	r4, #0
 800db3c:	d1f7      	bne.n	800db2e <_fwalk_reent+0xe>
 800db3e:	4638      	mov	r0, r7
 800db40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db44:	89ab      	ldrh	r3, [r5, #12]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d907      	bls.n	800db5a <_fwalk_reent+0x3a>
 800db4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db4e:	3301      	adds	r3, #1
 800db50:	d003      	beq.n	800db5a <_fwalk_reent+0x3a>
 800db52:	4629      	mov	r1, r5
 800db54:	4630      	mov	r0, r6
 800db56:	47c0      	blx	r8
 800db58:	4307      	orrs	r7, r0
 800db5a:	3568      	adds	r5, #104	; 0x68
 800db5c:	e7e9      	b.n	800db32 <_fwalk_reent+0x12>

0800db5e <__swhatbuf_r>:
 800db5e:	b570      	push	{r4, r5, r6, lr}
 800db60:	460e      	mov	r6, r1
 800db62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db66:	4614      	mov	r4, r2
 800db68:	2900      	cmp	r1, #0
 800db6a:	461d      	mov	r5, r3
 800db6c:	b096      	sub	sp, #88	; 0x58
 800db6e:	da08      	bge.n	800db82 <__swhatbuf_r+0x24>
 800db70:	2200      	movs	r2, #0
 800db72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db76:	602a      	str	r2, [r5, #0]
 800db78:	061a      	lsls	r2, r3, #24
 800db7a:	d410      	bmi.n	800db9e <__swhatbuf_r+0x40>
 800db7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db80:	e00e      	b.n	800dba0 <__swhatbuf_r+0x42>
 800db82:	466a      	mov	r2, sp
 800db84:	f000 f902 	bl	800dd8c <_fstat_r>
 800db88:	2800      	cmp	r0, #0
 800db8a:	dbf1      	blt.n	800db70 <__swhatbuf_r+0x12>
 800db8c:	9a01      	ldr	r2, [sp, #4]
 800db8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800db92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800db96:	425a      	negs	r2, r3
 800db98:	415a      	adcs	r2, r3
 800db9a:	602a      	str	r2, [r5, #0]
 800db9c:	e7ee      	b.n	800db7c <__swhatbuf_r+0x1e>
 800db9e:	2340      	movs	r3, #64	; 0x40
 800dba0:	2000      	movs	r0, #0
 800dba2:	6023      	str	r3, [r4, #0]
 800dba4:	b016      	add	sp, #88	; 0x58
 800dba6:	bd70      	pop	{r4, r5, r6, pc}

0800dba8 <__smakebuf_r>:
 800dba8:	898b      	ldrh	r3, [r1, #12]
 800dbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbac:	079d      	lsls	r5, r3, #30
 800dbae:	4606      	mov	r6, r0
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	d507      	bpl.n	800dbc4 <__smakebuf_r+0x1c>
 800dbb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbb8:	6023      	str	r3, [r4, #0]
 800dbba:	6123      	str	r3, [r4, #16]
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	6163      	str	r3, [r4, #20]
 800dbc0:	b002      	add	sp, #8
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}
 800dbc4:	466a      	mov	r2, sp
 800dbc6:	ab01      	add	r3, sp, #4
 800dbc8:	f7ff ffc9 	bl	800db5e <__swhatbuf_r>
 800dbcc:	9900      	ldr	r1, [sp, #0]
 800dbce:	4605      	mov	r5, r0
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f7fd fa9f 	bl	800b114 <_malloc_r>
 800dbd6:	b948      	cbnz	r0, 800dbec <__smakebuf_r+0x44>
 800dbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d4ef      	bmi.n	800dbc0 <__smakebuf_r+0x18>
 800dbe0:	f023 0303 	bic.w	r3, r3, #3
 800dbe4:	f043 0302 	orr.w	r3, r3, #2
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	e7e3      	b.n	800dbb4 <__smakebuf_r+0xc>
 800dbec:	4b0d      	ldr	r3, [pc, #52]	; (800dc24 <__smakebuf_r+0x7c>)
 800dbee:	62b3      	str	r3, [r6, #40]	; 0x28
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	6020      	str	r0, [r4, #0]
 800dbf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbf8:	81a3      	strh	r3, [r4, #12]
 800dbfa:	9b00      	ldr	r3, [sp, #0]
 800dbfc:	6120      	str	r0, [r4, #16]
 800dbfe:	6163      	str	r3, [r4, #20]
 800dc00:	9b01      	ldr	r3, [sp, #4]
 800dc02:	b15b      	cbz	r3, 800dc1c <__smakebuf_r+0x74>
 800dc04:	4630      	mov	r0, r6
 800dc06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc0a:	f000 f8d1 	bl	800ddb0 <_isatty_r>
 800dc0e:	b128      	cbz	r0, 800dc1c <__smakebuf_r+0x74>
 800dc10:	89a3      	ldrh	r3, [r4, #12]
 800dc12:	f023 0303 	bic.w	r3, r3, #3
 800dc16:	f043 0301 	orr.w	r3, r3, #1
 800dc1a:	81a3      	strh	r3, [r4, #12]
 800dc1c:	89a0      	ldrh	r0, [r4, #12]
 800dc1e:	4305      	orrs	r5, r0
 800dc20:	81a5      	strh	r5, [r4, #12]
 800dc22:	e7cd      	b.n	800dbc0 <__smakebuf_r+0x18>
 800dc24:	0800d9bd 	.word	0x0800d9bd

0800dc28 <_malloc_usable_size_r>:
 800dc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc2c:	1f18      	subs	r0, r3, #4
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	bfbc      	itt	lt
 800dc32:	580b      	ldrlt	r3, [r1, r0]
 800dc34:	18c0      	addlt	r0, r0, r3
 800dc36:	4770      	bx	lr

0800dc38 <_raise_r>:
 800dc38:	291f      	cmp	r1, #31
 800dc3a:	b538      	push	{r3, r4, r5, lr}
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	460d      	mov	r5, r1
 800dc40:	d904      	bls.n	800dc4c <_raise_r+0x14>
 800dc42:	2316      	movs	r3, #22
 800dc44:	6003      	str	r3, [r0, #0]
 800dc46:	f04f 30ff 	mov.w	r0, #4294967295
 800dc4a:	bd38      	pop	{r3, r4, r5, pc}
 800dc4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc4e:	b112      	cbz	r2, 800dc56 <_raise_r+0x1e>
 800dc50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc54:	b94b      	cbnz	r3, 800dc6a <_raise_r+0x32>
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 f830 	bl	800dcbc <_getpid_r>
 800dc5c:	462a      	mov	r2, r5
 800dc5e:	4601      	mov	r1, r0
 800dc60:	4620      	mov	r0, r4
 800dc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc66:	f000 b817 	b.w	800dc98 <_kill_r>
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d00a      	beq.n	800dc84 <_raise_r+0x4c>
 800dc6e:	1c59      	adds	r1, r3, #1
 800dc70:	d103      	bne.n	800dc7a <_raise_r+0x42>
 800dc72:	2316      	movs	r3, #22
 800dc74:	6003      	str	r3, [r0, #0]
 800dc76:	2001      	movs	r0, #1
 800dc78:	e7e7      	b.n	800dc4a <_raise_r+0x12>
 800dc7a:	2400      	movs	r4, #0
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc82:	4798      	blx	r3
 800dc84:	2000      	movs	r0, #0
 800dc86:	e7e0      	b.n	800dc4a <_raise_r+0x12>

0800dc88 <raise>:
 800dc88:	4b02      	ldr	r3, [pc, #8]	; (800dc94 <raise+0xc>)
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	6818      	ldr	r0, [r3, #0]
 800dc8e:	f7ff bfd3 	b.w	800dc38 <_raise_r>
 800dc92:	bf00      	nop
 800dc94:	20000140 	.word	0x20000140

0800dc98 <_kill_r>:
 800dc98:	b538      	push	{r3, r4, r5, lr}
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	4d06      	ldr	r5, [pc, #24]	; (800dcb8 <_kill_r+0x20>)
 800dc9e:	4604      	mov	r4, r0
 800dca0:	4608      	mov	r0, r1
 800dca2:	4611      	mov	r1, r2
 800dca4:	602b      	str	r3, [r5, #0]
 800dca6:	f7f4 fc7a 	bl	800259e <_kill>
 800dcaa:	1c43      	adds	r3, r0, #1
 800dcac:	d102      	bne.n	800dcb4 <_kill_r+0x1c>
 800dcae:	682b      	ldr	r3, [r5, #0]
 800dcb0:	b103      	cbz	r3, 800dcb4 <_kill_r+0x1c>
 800dcb2:	6023      	str	r3, [r4, #0]
 800dcb4:	bd38      	pop	{r3, r4, r5, pc}
 800dcb6:	bf00      	nop
 800dcb8:	20000d70 	.word	0x20000d70

0800dcbc <_getpid_r>:
 800dcbc:	f7f4 bc68 	b.w	8002590 <_getpid>

0800dcc0 <__sread>:
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc8:	f000 f894 	bl	800ddf4 <_read_r>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	bfab      	itete	ge
 800dcd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcd2:	89a3      	ldrhlt	r3, [r4, #12]
 800dcd4:	181b      	addge	r3, r3, r0
 800dcd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcda:	bfac      	ite	ge
 800dcdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcde:	81a3      	strhlt	r3, [r4, #12]
 800dce0:	bd10      	pop	{r4, pc}

0800dce2 <__swrite>:
 800dce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce6:	461f      	mov	r7, r3
 800dce8:	898b      	ldrh	r3, [r1, #12]
 800dcea:	4605      	mov	r5, r0
 800dcec:	05db      	lsls	r3, r3, #23
 800dcee:	460c      	mov	r4, r1
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	d505      	bpl.n	800dd00 <__swrite+0x1e>
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcfc:	f000 f868 	bl	800ddd0 <_lseek_r>
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	4632      	mov	r2, r6
 800dd04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd08:	81a3      	strh	r3, [r4, #12]
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	463b      	mov	r3, r7
 800dd0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd16:	f000 b817 	b.w	800dd48 <_write_r>

0800dd1a <__sseek>:
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd22:	f000 f855 	bl	800ddd0 <_lseek_r>
 800dd26:	1c43      	adds	r3, r0, #1
 800dd28:	89a3      	ldrh	r3, [r4, #12]
 800dd2a:	bf15      	itete	ne
 800dd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd36:	81a3      	strheq	r3, [r4, #12]
 800dd38:	bf18      	it	ne
 800dd3a:	81a3      	strhne	r3, [r4, #12]
 800dd3c:	bd10      	pop	{r4, pc}

0800dd3e <__sclose>:
 800dd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd42:	f000 b813 	b.w	800dd6c <_close_r>
	...

0800dd48 <_write_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	4608      	mov	r0, r1
 800dd4e:	4611      	mov	r1, r2
 800dd50:	2200      	movs	r2, #0
 800dd52:	4d05      	ldr	r5, [pc, #20]	; (800dd68 <_write_r+0x20>)
 800dd54:	602a      	str	r2, [r5, #0]
 800dd56:	461a      	mov	r2, r3
 800dd58:	f7f4 fc58 	bl	800260c <_write>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d102      	bne.n	800dd66 <_write_r+0x1e>
 800dd60:	682b      	ldr	r3, [r5, #0]
 800dd62:	b103      	cbz	r3, 800dd66 <_write_r+0x1e>
 800dd64:	6023      	str	r3, [r4, #0]
 800dd66:	bd38      	pop	{r3, r4, r5, pc}
 800dd68:	20000d70 	.word	0x20000d70

0800dd6c <_close_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	2300      	movs	r3, #0
 800dd70:	4d05      	ldr	r5, [pc, #20]	; (800dd88 <_close_r+0x1c>)
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	602b      	str	r3, [r5, #0]
 800dd78:	f7f4 fc64 	bl	8002644 <_close>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_close_r+0x1a>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_close_r+0x1a>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	20000d70 	.word	0x20000d70

0800dd8c <_fstat_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	2300      	movs	r3, #0
 800dd90:	4d06      	ldr	r5, [pc, #24]	; (800ddac <_fstat_r+0x20>)
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	4611      	mov	r1, r2
 800dd98:	602b      	str	r3, [r5, #0]
 800dd9a:	f7f4 fc5e 	bl	800265a <_fstat>
 800dd9e:	1c43      	adds	r3, r0, #1
 800dda0:	d102      	bne.n	800dda8 <_fstat_r+0x1c>
 800dda2:	682b      	ldr	r3, [r5, #0]
 800dda4:	b103      	cbz	r3, 800dda8 <_fstat_r+0x1c>
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	bd38      	pop	{r3, r4, r5, pc}
 800ddaa:	bf00      	nop
 800ddac:	20000d70 	.word	0x20000d70

0800ddb0 <_isatty_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	4d05      	ldr	r5, [pc, #20]	; (800ddcc <_isatty_r+0x1c>)
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7f4 fc5c 	bl	8002678 <_isatty>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_isatty_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_isatty_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	20000d70 	.word	0x20000d70

0800ddd0 <_lseek_r>:
 800ddd0:	b538      	push	{r3, r4, r5, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4608      	mov	r0, r1
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	2200      	movs	r2, #0
 800ddda:	4d05      	ldr	r5, [pc, #20]	; (800ddf0 <_lseek_r+0x20>)
 800dddc:	602a      	str	r2, [r5, #0]
 800ddde:	461a      	mov	r2, r3
 800dde0:	f7f4 fc54 	bl	800268c <_lseek>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d102      	bne.n	800ddee <_lseek_r+0x1e>
 800dde8:	682b      	ldr	r3, [r5, #0]
 800ddea:	b103      	cbz	r3, 800ddee <_lseek_r+0x1e>
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	bd38      	pop	{r3, r4, r5, pc}
 800ddf0:	20000d70 	.word	0x20000d70

0800ddf4 <_read_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	4d05      	ldr	r5, [pc, #20]	; (800de14 <_read_r+0x20>)
 800de00:	602a      	str	r2, [r5, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f7f4 fbe5 	bl	80025d2 <_read>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_read_r+0x1e>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_read_r+0x1e>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	20000d70 	.word	0x20000d70

0800de18 <fmin>:
 800de18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de1a:	4604      	mov	r4, r0
 800de1c:	460d      	mov	r5, r1
 800de1e:	4616      	mov	r6, r2
 800de20:	461f      	mov	r7, r3
 800de22:	f000 f813 	bl	800de4c <__fpclassifyd>
 800de26:	b158      	cbz	r0, 800de40 <fmin+0x28>
 800de28:	4630      	mov	r0, r6
 800de2a:	4639      	mov	r1, r7
 800de2c:	f000 f80e 	bl	800de4c <__fpclassifyd>
 800de30:	b140      	cbz	r0, 800de44 <fmin+0x2c>
 800de32:	4632      	mov	r2, r6
 800de34:	463b      	mov	r3, r7
 800de36:	4620      	mov	r0, r4
 800de38:	4629      	mov	r1, r5
 800de3a:	f7f2 fe2b 	bl	8000a94 <__aeabi_dcmplt>
 800de3e:	b908      	cbnz	r0, 800de44 <fmin+0x2c>
 800de40:	4634      	mov	r4, r6
 800de42:	463d      	mov	r5, r7
 800de44:	4620      	mov	r0, r4
 800de46:	4629      	mov	r1, r5
 800de48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800de4c <__fpclassifyd>:
 800de4c:	b510      	push	{r4, lr}
 800de4e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800de52:	460b      	mov	r3, r1
 800de54:	d019      	beq.n	800de8a <__fpclassifyd+0x3e>
 800de56:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800de5a:	490e      	ldr	r1, [pc, #56]	; (800de94 <__fpclassifyd+0x48>)
 800de5c:	428a      	cmp	r2, r1
 800de5e:	d90e      	bls.n	800de7e <__fpclassifyd+0x32>
 800de60:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800de64:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800de68:	428a      	cmp	r2, r1
 800de6a:	d908      	bls.n	800de7e <__fpclassifyd+0x32>
 800de6c:	4a0a      	ldr	r2, [pc, #40]	; (800de98 <__fpclassifyd+0x4c>)
 800de6e:	4213      	tst	r3, r2
 800de70:	d007      	beq.n	800de82 <__fpclassifyd+0x36>
 800de72:	4294      	cmp	r4, r2
 800de74:	d107      	bne.n	800de86 <__fpclassifyd+0x3a>
 800de76:	fab0 f080 	clz	r0, r0
 800de7a:	0940      	lsrs	r0, r0, #5
 800de7c:	bd10      	pop	{r4, pc}
 800de7e:	2004      	movs	r0, #4
 800de80:	e7fc      	b.n	800de7c <__fpclassifyd+0x30>
 800de82:	2003      	movs	r0, #3
 800de84:	e7fa      	b.n	800de7c <__fpclassifyd+0x30>
 800de86:	2000      	movs	r0, #0
 800de88:	e7f8      	b.n	800de7c <__fpclassifyd+0x30>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d1ee      	bne.n	800de6c <__fpclassifyd+0x20>
 800de8e:	2002      	movs	r0, #2
 800de90:	e7f4      	b.n	800de7c <__fpclassifyd+0x30>
 800de92:	bf00      	nop
 800de94:	7fdfffff 	.word	0x7fdfffff
 800de98:	7ff00000 	.word	0x7ff00000

0800de9c <sqrt>:
 800de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de9e:	4606      	mov	r6, r0
 800dea0:	460f      	mov	r7, r1
 800dea2:	f000 f81f 	bl	800dee4 <__ieee754_sqrt>
 800dea6:	4632      	mov	r2, r6
 800dea8:	4604      	mov	r4, r0
 800deaa:	460d      	mov	r5, r1
 800deac:	463b      	mov	r3, r7
 800deae:	4630      	mov	r0, r6
 800deb0:	4639      	mov	r1, r7
 800deb2:	f7f2 fe17 	bl	8000ae4 <__aeabi_dcmpun>
 800deb6:	b990      	cbnz	r0, 800dede <sqrt+0x42>
 800deb8:	2200      	movs	r2, #0
 800deba:	2300      	movs	r3, #0
 800debc:	4630      	mov	r0, r6
 800debe:	4639      	mov	r1, r7
 800dec0:	f7f2 fde8 	bl	8000a94 <__aeabi_dcmplt>
 800dec4:	b158      	cbz	r0, 800dede <sqrt+0x42>
 800dec6:	f7fd f87b 	bl	800afc0 <__errno>
 800deca:	2321      	movs	r3, #33	; 0x21
 800decc:	2200      	movs	r2, #0
 800dece:	6003      	str	r3, [r0, #0]
 800ded0:	2300      	movs	r3, #0
 800ded2:	4610      	mov	r0, r2
 800ded4:	4619      	mov	r1, r3
 800ded6:	f7f2 fc95 	bl	8000804 <__aeabi_ddiv>
 800deda:	4604      	mov	r4, r0
 800dedc:	460d      	mov	r5, r1
 800dede:	4620      	mov	r0, r4
 800dee0:	4629      	mov	r1, r5
 800dee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dee4 <__ieee754_sqrt>:
 800dee4:	f8df c158 	ldr.w	ip, [pc, #344]	; 800e040 <__ieee754_sqrt+0x15c>
 800dee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deec:	ea3c 0c01 	bics.w	ip, ip, r1
 800def0:	4606      	mov	r6, r0
 800def2:	460d      	mov	r5, r1
 800def4:	460c      	mov	r4, r1
 800def6:	460a      	mov	r2, r1
 800def8:	4607      	mov	r7, r0
 800defa:	4603      	mov	r3, r0
 800defc:	d10f      	bne.n	800df1e <__ieee754_sqrt+0x3a>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	f7f2 fb55 	bl	80005b0 <__aeabi_dmul>
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	4630      	mov	r0, r6
 800df0c:	4629      	mov	r1, r5
 800df0e:	f7f2 f999 	bl	8000244 <__adddf3>
 800df12:	4606      	mov	r6, r0
 800df14:	460d      	mov	r5, r1
 800df16:	4630      	mov	r0, r6
 800df18:	4629      	mov	r1, r5
 800df1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df1e:	2900      	cmp	r1, #0
 800df20:	dc0e      	bgt.n	800df40 <__ieee754_sqrt+0x5c>
 800df22:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800df26:	ea5c 0707 	orrs.w	r7, ip, r7
 800df2a:	d0f4      	beq.n	800df16 <__ieee754_sqrt+0x32>
 800df2c:	b141      	cbz	r1, 800df40 <__ieee754_sqrt+0x5c>
 800df2e:	4602      	mov	r2, r0
 800df30:	460b      	mov	r3, r1
 800df32:	f7f2 f985 	bl	8000240 <__aeabi_dsub>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	f7f2 fc63 	bl	8000804 <__aeabi_ddiv>
 800df3e:	e7e8      	b.n	800df12 <__ieee754_sqrt+0x2e>
 800df40:	1521      	asrs	r1, r4, #20
 800df42:	d075      	beq.n	800e030 <__ieee754_sqrt+0x14c>
 800df44:	07cc      	lsls	r4, r1, #31
 800df46:	f04f 0400 	mov.w	r4, #0
 800df4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800df4e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800df52:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800df56:	bf5e      	ittt	pl
 800df58:	0fd9      	lsrpl	r1, r3, #31
 800df5a:	005b      	lslpl	r3, r3, #1
 800df5c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800df60:	0fd9      	lsrs	r1, r3, #31
 800df62:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800df66:	2516      	movs	r5, #22
 800df68:	4620      	mov	r0, r4
 800df6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800df6e:	107f      	asrs	r7, r7, #1
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	1846      	adds	r6, r0, r1
 800df74:	4296      	cmp	r6, r2
 800df76:	bfde      	ittt	le
 800df78:	1b92      	suble	r2, r2, r6
 800df7a:	1870      	addle	r0, r6, r1
 800df7c:	1864      	addle	r4, r4, r1
 800df7e:	0052      	lsls	r2, r2, #1
 800df80:	3d01      	subs	r5, #1
 800df82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800df86:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800df8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df8e:	d1f0      	bne.n	800df72 <__ieee754_sqrt+0x8e>
 800df90:	4629      	mov	r1, r5
 800df92:	f04f 0e20 	mov.w	lr, #32
 800df96:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800df9a:	4282      	cmp	r2, r0
 800df9c:	eb06 0c05 	add.w	ip, r6, r5
 800dfa0:	dc02      	bgt.n	800dfa8 <__ieee754_sqrt+0xc4>
 800dfa2:	d113      	bne.n	800dfcc <__ieee754_sqrt+0xe8>
 800dfa4:	459c      	cmp	ip, r3
 800dfa6:	d811      	bhi.n	800dfcc <__ieee754_sqrt+0xe8>
 800dfa8:	f1bc 0f00 	cmp.w	ip, #0
 800dfac:	eb0c 0506 	add.w	r5, ip, r6
 800dfb0:	da43      	bge.n	800e03a <__ieee754_sqrt+0x156>
 800dfb2:	2d00      	cmp	r5, #0
 800dfb4:	db41      	blt.n	800e03a <__ieee754_sqrt+0x156>
 800dfb6:	f100 0801 	add.w	r8, r0, #1
 800dfba:	1a12      	subs	r2, r2, r0
 800dfbc:	4640      	mov	r0, r8
 800dfbe:	459c      	cmp	ip, r3
 800dfc0:	bf88      	it	hi
 800dfc2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dfc6:	eba3 030c 	sub.w	r3, r3, ip
 800dfca:	4431      	add	r1, r6
 800dfcc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800dfd0:	f1be 0e01 	subs.w	lr, lr, #1
 800dfd4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800dfd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfdc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dfe0:	d1db      	bne.n	800df9a <__ieee754_sqrt+0xb6>
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	d006      	beq.n	800dff4 <__ieee754_sqrt+0x110>
 800dfe6:	1c48      	adds	r0, r1, #1
 800dfe8:	bf0b      	itete	eq
 800dfea:	4671      	moveq	r1, lr
 800dfec:	3101      	addne	r1, #1
 800dfee:	3401      	addeq	r4, #1
 800dff0:	f021 0101 	bicne.w	r1, r1, #1
 800dff4:	1063      	asrs	r3, r4, #1
 800dff6:	0849      	lsrs	r1, r1, #1
 800dff8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dffc:	07e2      	lsls	r2, r4, #31
 800dffe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e002:	bf48      	it	mi
 800e004:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800e008:	460e      	mov	r6, r1
 800e00a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e00e:	e782      	b.n	800df16 <__ieee754_sqrt+0x32>
 800e010:	0ada      	lsrs	r2, r3, #11
 800e012:	3815      	subs	r0, #21
 800e014:	055b      	lsls	r3, r3, #21
 800e016:	2a00      	cmp	r2, #0
 800e018:	d0fa      	beq.n	800e010 <__ieee754_sqrt+0x12c>
 800e01a:	02d5      	lsls	r5, r2, #11
 800e01c:	d50a      	bpl.n	800e034 <__ieee754_sqrt+0x150>
 800e01e:	f1c1 0420 	rsb	r4, r1, #32
 800e022:	fa23 f404 	lsr.w	r4, r3, r4
 800e026:	1e4d      	subs	r5, r1, #1
 800e028:	408b      	lsls	r3, r1
 800e02a:	4322      	orrs	r2, r4
 800e02c:	1b41      	subs	r1, r0, r5
 800e02e:	e789      	b.n	800df44 <__ieee754_sqrt+0x60>
 800e030:	4608      	mov	r0, r1
 800e032:	e7f0      	b.n	800e016 <__ieee754_sqrt+0x132>
 800e034:	0052      	lsls	r2, r2, #1
 800e036:	3101      	adds	r1, #1
 800e038:	e7ef      	b.n	800e01a <__ieee754_sqrt+0x136>
 800e03a:	4680      	mov	r8, r0
 800e03c:	e7bd      	b.n	800dfba <__ieee754_sqrt+0xd6>
 800e03e:	bf00      	nop
 800e040:	7ff00000 	.word	0x7ff00000

0800e044 <_init>:
 800e044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e046:	bf00      	nop
 800e048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e04a:	bc08      	pop	{r3}
 800e04c:	469e      	mov	lr, r3
 800e04e:	4770      	bx	lr

0800e050 <_fini>:
 800e050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e052:	bf00      	nop
 800e054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e056:	bc08      	pop	{r3}
 800e058:	469e      	mov	lr, r3
 800e05a:	4770      	bx	lr
